
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c814  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001038  0800c9f8  0800c9f8  0001c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da30  0800da30  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800da30  0800da30  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da30  0800da30  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da30  0800da30  0001da30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da34  0800da34  0001da34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800da38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000110  0800db48  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800db48  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166ea  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d6  00000000  00000000  00036866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e68  00000000  00000000  0003afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfae  00000000  00000000  000584e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee89  00000000  00000000  00074493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d8  00000000  00000000  0011331c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001185f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c9e0 	.word	0x0800c9e0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800c9e0 	.word	0x0800c9e0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fa04 	bl	800965c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f87c 	bl	8008354 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	20000290 	.word	0x20000290
 80004c0:	200001d9 	.word	0x200001d9
 80004c4:	20000201 	.word	0x20000201
 80004c8:	20000204 	.word	0x20000204
 80004cc:	20000205 	.word	0x20000205
 80004d0:	20000206 	.word	0x20000206
 80004d4:	20000207 	.word	0x20000207
 80004d8:	20000208 	.word	0x20000208
 80004dc:	20000209 	.word	0x20000209
 80004e0:	20000219 	.word	0x20000219
 80004e4:	2000020a 	.word	0x2000020a
 80004e8:	2000021a 	.word	0x2000021a
 80004ec:	2000020b 	.word	0x2000020b
 80004f0:	2000021b 	.word	0x2000021b
 80004f4:	2000020e 	.word	0x2000020e
 80004f8:	2000020f 	.word	0x2000020f
 80004fc:	20000210 	.word	0x20000210
 8000500:	20000211 	.word	0x20000211
 8000504:	20000212 	.word	0x20000212
 8000508:	20000213 	.word	0x20000213
 800050c:	20000214 	.word	0x20000214
 8000510:	20000215 	.word	0x20000215
 8000514:	20000216 	.word	0x20000216
 8000518:	20000217 	.word	0x20000217
 800051c:	20000218 	.word	0x20000218
 8000520:	2000021c 	.word	0x2000021c
 8000524:	2000021e 	.word	0x2000021e
 8000528:	200001fc 	.word	0x200001fc
 800052c:	200001fd 	.word	0x200001fd
 8000530:	200001fe 	.word	0x200001fe
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001ff 	.word	0x200001ff
 8000540:	20000221 	.word	0x20000221
 8000544:	2000021f 	.word	0x2000021f
 8000548:	2000020d 	.word	0x2000020d
 800054c:	20000220 	.word	0x20000220
 8000550:	2000020c 	.word	0x2000020c
 8000554:	20000222 	.word	0x20000222
 8000558:	20000223 	.word	0x20000223
 800055c:	20000224 	.word	0x20000224
 8000560:	20000225 	.word	0x20000225
 8000564:	20000226 	.word	0x20000226
 8000568:	20000227 	.word	0x20000227
 800056c:	20000228 	.word	0x20000228
 8000570:	20000229 	.word	0x20000229
 8000574:	2000022a 	.word	0x2000022a
 8000578:	2000022b 	.word	0x2000022b
 800057c:	200001d8 	.word	0x200001d8
	}

	if(kapi1AcSure>5) {
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <eepromKontrol+0x4b0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b56      	ldr	r3, [pc, #344]	; (80006e4 <eepromKontrol+0x4b0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <eepromKontrol+0x4b4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <eepromKontrol+0x4b4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <eepromKontrol+0x4b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b51      	ldr	r3, [pc, #324]	; (80006ec <eepromKontrol+0x4b8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <eepromKontrol+0x4bc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b49      	ldr	r3, [pc, #292]	; (80006fc <eepromKontrol+0x4c8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <eepromKontrol+0x4c8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <eepromKontrol+0x4cc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <eepromKontrol+0x4cc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <eepromKontrol+0x4d0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <eepromKontrol+0x4d0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <eepromKontrol+0x4d4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <eepromKontrol+0x4d4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <eepromKontrol+0x4d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <eepromKontrol+0x4d8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <eepromKontrol+0x4dc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <eepromKontrol+0x4dc>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <eepromKontrol+0x4e0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <eepromKontrol+0x4e0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <eepromKontrol+0x4e4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <eepromKontrol+0x4e4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <eepromKontrol+0x4e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <eepromKontrol+0x4e8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <eepromKontrol+0x4ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <eepromKontrol+0x4ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <eepromKontrol+0x4f0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <eepromKontrol+0x4f0>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <eepromKontrol+0x4f4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <eepromKontrol+0x4f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <eepromKontrol+0x4f8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <eepromKontrol+0x4f8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <eepromKontrol+0x4fc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <eepromKontrol+0x4fc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <eepromKontrol+0x500>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <eepromKontrol+0x500>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <eepromKontrol+0x504>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <eepromKontrol+0x504>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f851 	bl	800075c <readFromEEPROM>
	HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f007 fe49 	bl	8008354 <HAL_Delay>
	readFromEEPROM(2);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f84a 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f007 fe42 	bl	8008354 <HAL_Delay>
	readFromEEPROM(3);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f843 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f007 fe3b 	bl	8008354 <HAL_Delay>
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000219 	.word	0x20000219
 80006e8:	2000020a 	.word	0x2000020a
 80006ec:	2000021a 	.word	0x2000021a
 80006f0:	2000020b 	.word	0x2000020b
 80006f4:	2000020d 	.word	0x2000020d
 80006f8:	2000021b 	.word	0x2000021b
 80006fc:	2000020e 	.word	0x2000020e
 8000700:	2000020f 	.word	0x2000020f
 8000704:	20000210 	.word	0x20000210
 8000708:	20000211 	.word	0x20000211
 800070c:	20000212 	.word	0x20000212
 8000710:	20000213 	.word	0x20000213
 8000714:	20000214 	.word	0x20000214
 8000718:	20000215 	.word	0x20000215
 800071c:	20000216 	.word	0x20000216
 8000720:	20000217 	.word	0x20000217
 8000724:	20000218 	.word	0x20000218
 8000728:	2000021c 	.word	0x2000021c
 800072c:	2000021e 	.word	0x2000021e
 8000730:	20000220 	.word	0x20000220
 8000734:	20000221 	.word	0x20000221
 8000738:	2000021f 	.word	0x2000021f

0800073c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <getCharFromCursorPosition+0x1c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000030 	.word	0x20000030

0800075c <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d117      	bne.n	800079a <readFromEEPROM+0x3e>
		//MachineID Okuma
		uint8_t tempMachineIDStartPos = idStartPos;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <readFromEEPROM+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	e00d      	b.n	8000792 <readFromEEPROM+0x36>
			machineID[i] = eepromData[tempMachineIDStartPos];
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <readFromEEPROM+0xc8>)
 800077a:	5cd1      	ldrb	r1, [r2, r3]
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <readFromEEPROM+0xcc>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]

			tempMachineIDStartPos++;
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	3301      	adds	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	3301      	adds	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b0b      	cmp	r3, #11
 8000796:	ddee      	ble.n	8000776 <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 8000798:	e03e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 2) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11c      	bne.n	80007da <readFromEEPROM+0x7e>
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <readFromEEPROM+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e012      	b.n	80007d2 <readFromEEPROM+0x76>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <readFromEEPROM+0xc8>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffc2 	bl	800073c <getCharFromCursorPosition>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <readFromEEPROM+0xd4>)
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	3301      	adds	r3, #1
 80007ca:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b13      	cmp	r3, #19
 80007d6:	dde9      	ble.n	80007ac <readFromEEPROM+0x50>
}
 80007d8:	e01e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 3) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d11b      	bne.n	8000818 <readFromEEPROM+0xbc>
		uint8_t tempPassStartPos = passStartPos;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <readFromEEPROM+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e012      	b.n	8000812 <readFromEEPROM+0xb6>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <readFromEEPROM+0xc8>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa2 	bl	800073c <getCharFromCursorPosition>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <readFromEEPROM+0xdc>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3301      	adds	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde9      	ble.n	80007ec <readFromEEPROM+0x90>
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000004 	.word	0x20000004
 8000824:	2000012c 	.word	0x2000012c
 8000828:	200001a4 	.word	0x200001a4
 800082c:	20000008 	.word	0x20000008
 8000830:	200001b0 	.word	0x200001b0
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200001c4 	.word	0x200001c4

0800083c <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f7ff fcea 	bl	8000224 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f00a fe47 	bl	800b4ec <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter); // Bekleme süresi komuta göre ayarlanabilir
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4618      	mov	r0, r3
 8000862:	f007 fd77 	bl	8008354 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a0      	sub	sp, #128	; 0x80
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 800087c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000880:	4915      	ldr	r1, [pc, #84]	; (80008d8 <ESP8266_Init+0x68>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffda 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <ESP8266_Init+0x6c>)
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffd4 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 8000894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000898:	4911      	ldr	r1, [pc, #68]	; (80008e0 <ESP8266_Init+0x70>)
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ffce 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 80008a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a4:	490f      	ldr	r1, [pc, #60]	; (80008e4 <ESP8266_Init+0x74>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff ffc8 	bl	800083c <sendATCommand>

    char cmd[100]; // Komutu oluşturmak için yeterli uzunlukta bir dizi
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 80008ac:	f107 0014 	add.w	r0, r7, #20
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <ESP8266_Init+0x78>)
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	f00b fbf1 	bl	800c0a0 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ffb7 	bl	800083c <sendATCommand>
}
 80008ce:	bf00      	nop
 80008d0:	3778      	adds	r7, #120	; 0x78
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	0800c9f8 	.word	0x0800c9f8
 80008dc:	0800ca08 	.word	0x0800ca08
 80008e0:	0800ca14 	.word	0x0800ca14
 80008e4:	0800ca1c 	.word	0x0800ca1c
 80008e8:	0800ca2c 	.word	0x0800ca2c

080008ec <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0c6      	sub	sp, #280	; 0x118
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000904:	6019      	str	r1, [r3, #0]
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800090e:	601a      	str	r2, [r3, #0]
    char cmd[200]; // Komutu oluşturmak için yeterli uzunlukta bir dizi
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000910:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <sendMachineData+0xb8>)
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <sendMachineData+0xbc>)
 8000918:	21c8      	movs	r1, #200	; 0xc8
 800091a:	f00b fbc1 	bl	800c0a0 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 800091e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	f7ff ff84 	bl	800083c <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800093c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <sendMachineData+0xc0>)
 8000942:	9201      	str	r2, [sp, #4]
 8000944:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000948:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <sendMachineData+0xc4>)
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f00b fba3 	bl	800c0a0 <sniprintf>
 800095a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 800095e:	f107 0010 	add.w	r0, r7, #16
 8000962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000966:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <sendMachineData+0xc8>)
 8000968:	2132      	movs	r1, #50	; 0x32
 800096a:	f00b fb99 	bl	800c0a0 <sniprintf>
    sendATCommand(huart, lenCmd, 4000); // Uzunluk komutunu gönder
 800096e:	f107 0110 	add.w	r1, r7, #16
 8000972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	f7ff ff5c 	bl	800083c <sendATCommand>
    sendATCommand(huart, cmd, 4000); // Asıl komutu gönder
 8000984:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000990:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f7ff ff51 	bl	800083c <sendATCommand>
}
 800099a:	bf00      	nop
 800099c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0800ca48 	.word	0x0800ca48
 80009a8:	0800ca58 	.word	0x0800ca58
 80009ac:	0800cad4 	.word	0x0800cad4
 80009b0:	0800ca78 	.word	0x0800ca78
 80009b4:	0800cae8 	.word	0x0800cae8

080009b8 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af04      	add	r7, sp, #16
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <hata2EEPROM+0xa4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <hata2EEPROM+0xa8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <hata2EEPROM+0xac>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009d6:	f000 f92b 	bl	8000c30 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009da:	e000      	b.n	80009de <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009dc:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e012      	b.n	8000a0a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <hata2EEPROM+0xa8>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <hata2EEPROM+0xac>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d107      	bne.n	8000a04 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <hata2EEPROM+0xa8>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	4919      	ldr	r1, [pc, #100]	; (8000a64 <hata2EEPROM+0xac>)
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	54ca      	strb	r2, [r1, r3]
					break;
 8000a02:	e007      	b.n	8000a14 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <hata2EEPROM+0xa4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbe7      	blt.n	80009e4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <hata2EEPROM+0xa8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <hata2EEPROM+0xa4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b298      	uxth	r0, r3
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <hata2EEPROM+0xa8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <hata2EEPROM+0xac>)
 8000a26:	4413      	add	r3, r2
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <hata2EEPROM+0xa4>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	b292      	uxth	r2, r2
 8000a2e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a32:	9402      	str	r4, [sp, #8]
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	21a0      	movs	r1, #160	; 0xa0
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <hata2EEPROM+0xb0>)
 8000a40:	f008 fd12 	bl	8009468 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f007 fc84 	bl	8008354 <HAL_Delay>
	eepromKontrol(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fbf1 	bl	8000234 <eepromKontrol>
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000ac 	.word	0x200000ac
 8000a60:	200000b0 	.word	0x200000b0
 8000a64:	2000012c 	.word	0x2000012c
 8000a68:	20000290 	.word	0x20000290

08000a6c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d11d      	bne.n	8000ab8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a7c:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a84:	4a61      	ldr	r2, [pc, #388]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f006 ff23 	bl	80078d4 <lcd_print>
 8000a8e:	e008      	b.n	8000aa2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a90:	4b5d      	ldr	r3, [pc, #372]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d104      	bne.n	8000aa2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a98:	4a5d      	ldr	r2, [pc, #372]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f006 ff19 	bl	80078d4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000aa2:	4a5c      	ldr	r2, [pc, #368]	; (8000c14 <hataKoduLcdGoster+0x1a8>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f006 ff14 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aac:	4a5a      	ldr	r2, [pc, #360]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000aae:	2107      	movs	r1, #7
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f006 ff0f 	bl	80078d4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000ab6:	e0a3      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d11d      	bne.n	8000afa <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000abe:	4b52      	ldr	r3, [pc, #328]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d105      	bne.n	8000ad2 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000ac6:	4a51      	ldr	r2, [pc, #324]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	2001      	movs	r0, #1
 8000acc:	f006 ff02 	bl	80078d4 <lcd_print>
 8000ad0:	e008      	b.n	8000ae4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000ad2:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000ada:	4a4d      	ldr	r2, [pc, #308]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f006 fef8 	bl	80078d4 <lcd_print>
		lcd_print(2, 2, "2");
 8000ae4:	4a4d      	ldr	r2, [pc, #308]	; (8000c1c <hataKoduLcdGoster+0x1b0>)
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f006 fef3 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aee:	4a4a      	ldr	r2, [pc, #296]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000af0:	2107      	movs	r1, #7
 8000af2:	2002      	movs	r0, #2
 8000af4:	f006 feee 	bl	80078d4 <lcd_print>
}
 8000af8:	e082      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d11d      	bne.n	8000b3c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b00:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b08:	4a40      	ldr	r2, [pc, #256]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f006 fee1 	bl	80078d4 <lcd_print>
 8000b12:	e008      	b.n	8000b26 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d104      	bne.n	8000b26 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1c:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f006 fed7 	bl	80078d4 <lcd_print>
		lcd_print(2, 3, "3");
 8000b26:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <hataKoduLcdGoster+0x1b4>)
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f006 fed2 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b30:	4a39      	ldr	r2, [pc, #228]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000b32:	2107      	movs	r1, #7
 8000b34:	2002      	movs	r0, #2
 8000b36:	f006 fecd 	bl	80078d4 <lcd_print>
}
 8000b3a:	e061      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d11d      	bne.n	8000b7e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f006 fec0 	bl	80078d4 <lcd_print>
 8000b54:	e008      	b.n	8000b68 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f006 feb6 	bl	80078d4 <lcd_print>
		lcd_print(2, 4, "4");
 8000b68:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <hataKoduLcdGoster+0x1b8>)
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f006 feb1 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b72:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000b74:	2107      	movs	r1, #7
 8000b76:	2002      	movs	r0, #2
 8000b78:	f006 feac 	bl	80078d4 <lcd_print>
}
 8000b7c:	e040      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	d11d      	bne.n	8000bc0 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2001      	movs	r0, #1
 8000b92:	f006 fe9f 	bl	80078d4 <lcd_print>
 8000b96:	e008      	b.n	8000baa <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f006 fe95 	bl	80078d4 <lcd_print>
		lcd_print(2, 5, "5");
 8000baa:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <hataKoduLcdGoster+0x1bc>)
 8000bac:	2105      	movs	r1, #5
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f006 fe90 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f006 fe8b 	bl	80078d4 <lcd_print>
}
 8000bbe:	e01f      	b.n	8000c00 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d11c      	bne.n	8000c00 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <hataKoduLcdGoster+0x1a0>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f006 fe7e 	bl	80078d4 <lcd_print>
 8000bd8:	e008      	b.n	8000bec <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <hataKoduLcdGoster+0x19c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d104      	bne.n	8000bec <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <hataKoduLcdGoster+0x1a4>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f006 fe74 	bl	80078d4 <lcd_print>
		lcd_print(2, 6, "6");
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <hataKoduLcdGoster+0x1c0>)
 8000bee:	2106      	movs	r1, #6
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f006 fe6f 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <hataKoduLcdGoster+0x1ac>)
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f006 fe6a 	bl	80078d4 <lcd_print>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000221 	.word	0x20000221
 8000c0c:	0800cb74 	.word	0x0800cb74
 8000c10:	0800cb84 	.word	0x0800cb84
 8000c14:	0800cb94 	.word	0x0800cb94
 8000c18:	0800cb98 	.word	0x0800cb98
 8000c1c:	0800cba4 	.word	0x0800cba4
 8000c20:	0800cba8 	.word	0x0800cba8
 8000c24:	0800cbac 	.word	0x0800cbac
 8000c28:	0800cbb0 	.word	0x0800cbb0
 8000c2c:	0800cbb4 	.word	0x0800cbb4

08000c30 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e009      	b.n	8000c50 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <eepromDataFillWithEmpty+0x38>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <eepromDataFillWithEmpty+0x3c>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <eepromDataFillWithEmpty+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbf0      	blt.n	8000c3c <eepromDataFillWithEmpty+0xc>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000084 	.word	0x20000084
 8000c6c:	2000012c 	.word	0x2000012c
 8000c70:	200000ac 	.word	0x200000ac

08000c74 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c86:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <i2cTest+0x154>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <i2cTest+0x154>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0201 	bic.w	r2, r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c96:	484c      	ldr	r0, [pc, #304]	; (8000dc8 <i2cTest+0x154>)
 8000c98:	f008 fab8 	bl	800920c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9c:	23c0      	movs	r3, #192	; 0xc0
 8000c9e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000ca0:	2311      	movs	r3, #17
 8000ca2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <i2cTest+0x158>)
 8000cb2:	f007 febf 	bl	8008a34 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	4844      	ldr	r0, [pc, #272]	; (8000dcc <i2cTest+0x158>)
 8000cbc:	f008 f931 	bl	8008f22 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	4841      	ldr	r0, [pc, #260]	; (8000dcc <i2cTest+0x158>)
 8000cc6:	f008 f92c 	bl	8008f22 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f007 fb42 	bl	8008354 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cd0:	bf00      	nop
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	483d      	ldr	r0, [pc, #244]	; (8000dcc <i2cTest+0x158>)
 8000cd6:	f008 f90d 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d006      	beq.n	8000cee <i2cTest+0x7a>
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	483a      	ldr	r0, [pc, #232]	; (8000dcc <i2cTest+0x158>)
 8000ce4:	f008 f906 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d1f1      	bne.n	8000cd2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	4836      	ldr	r0, [pc, #216]	; (8000dcc <i2cTest+0x158>)
 8000cf4:	f008 f915 	bl	8008f22 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f007 fb2b 	bl	8008354 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cfe:	bf00      	nop
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	4832      	ldr	r0, [pc, #200]	; (8000dcc <i2cTest+0x158>)
 8000d04:	f008 f8f6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d0f8      	beq.n	8000d00 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	482e      	ldr	r0, [pc, #184]	; (8000dcc <i2cTest+0x158>)
 8000d14:	f008 f905 	bl	8008f22 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f007 fb1b 	bl	8008354 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d1e:	bf00      	nop
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	482a      	ldr	r0, [pc, #168]	; (8000dcc <i2cTest+0x158>)
 8000d24:	f008 f8e6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d0f8      	beq.n	8000d20 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	4826      	ldr	r0, [pc, #152]	; (8000dcc <i2cTest+0x158>)
 8000d34:	f008 f8f5 	bl	8008f22 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f007 fb0b 	bl	8008354 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d3e:	bf00      	nop
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	4822      	ldr	r0, [pc, #136]	; (8000dcc <i2cTest+0x158>)
 8000d44:	f008 f8d6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d1f8      	bne.n	8000d40 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	481e      	ldr	r0, [pc, #120]	; (8000dcc <i2cTest+0x158>)
 8000d54:	f008 f8e5 	bl	8008f22 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f007 fafb 	bl	8008354 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d5e:	bf00      	nop
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <i2cTest+0x158>)
 8000d64:	f008 f8c6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d1f8      	bne.n	8000d60 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <i2cTest+0x158>)
 8000d84:	f007 fe56 	bl	8008a34 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <i2cTest+0x154>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <i2cTest+0x154>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d96:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <i2cTest+0x154>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <i2cTest+0x154>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000da6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <i2cTest+0x154>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <i2cTest+0x154>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <i2cTest+0x154>)
 8000dba:	f008 f8e3 	bl	8008f84 <HAL_I2C_Init>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000290 	.word	0x20000290
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dda:	20c8      	movs	r0, #200	; 0xc8
 8000ddc:	f007 faba 	bl	8008354 <HAL_Delay>
	lcd_clear();
 8000de0:	f006 fda4 	bl	800792c <lcd_clear>
	if(type == 1 && page == 0) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d143      	bne.n	8000e72 <printTemplate+0xa2>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d140      	bne.n	8000e72 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000df0:	4a9d      	ldr	r2, [pc, #628]	; (8001068 <printTemplate+0x298>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	2001      	movs	r0, #1
 8000df6:	f006 fd6d 	bl	80078d4 <lcd_print>
		lcd_print(2, 3, "0");
 8000dfa:	4a9c      	ldr	r2, [pc, #624]	; (800106c <printTemplate+0x29c>)
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f006 fd68 	bl	80078d4 <lcd_print>
		lcd_print(2, 4, "1");
 8000e04:	4a9a      	ldr	r2, [pc, #616]	; (8001070 <printTemplate+0x2a0>)
 8000e06:	2104      	movs	r1, #4
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f006 fd63 	bl	80078d4 <lcd_print>
		lcd_print(2, 5, "2");
 8000e0e:	4a99      	ldr	r2, [pc, #612]	; (8001074 <printTemplate+0x2a4>)
 8000e10:	2105      	movs	r1, #5
 8000e12:	2002      	movs	r0, #2
 8000e14:	f006 fd5e 	bl	80078d4 <lcd_print>
		lcd_print(2, 6, "3");
 8000e18:	4a97      	ldr	r2, [pc, #604]	; (8001078 <printTemplate+0x2a8>)
 8000e1a:	2106      	movs	r1, #6
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f006 fd59 	bl	80078d4 <lcd_print>
		lcd_print(2, 7, "4");
 8000e22:	4a96      	ldr	r2, [pc, #600]	; (800107c <printTemplate+0x2ac>)
 8000e24:	2107      	movs	r1, #7
 8000e26:	2002      	movs	r0, #2
 8000e28:	f006 fd54 	bl	80078d4 <lcd_print>
		lcd_print(2, 10, "5");
 8000e2c:	4a94      	ldr	r2, [pc, #592]	; (8001080 <printTemplate+0x2b0>)
 8000e2e:	210a      	movs	r1, #10
 8000e30:	2002      	movs	r0, #2
 8000e32:	f006 fd4f 	bl	80078d4 <lcd_print>
		lcd_print(2, 11, "6");
 8000e36:	4a93      	ldr	r2, [pc, #588]	; (8001084 <printTemplate+0x2b4>)
 8000e38:	210b      	movs	r1, #11
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f006 fd4a 	bl	80078d4 <lcd_print>
		lcd_print(2, 12, "7");
 8000e40:	4a91      	ldr	r2, [pc, #580]	; (8001088 <printTemplate+0x2b8>)
 8000e42:	210c      	movs	r1, #12
 8000e44:	2002      	movs	r0, #2
 8000e46:	f006 fd45 	bl	80078d4 <lcd_print>
		lcd_print(2, 13, "8");
 8000e4a:	4a90      	ldr	r2, [pc, #576]	; (800108c <printTemplate+0x2bc>)
 8000e4c:	210d      	movs	r1, #13
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f006 fd40 	bl	80078d4 <lcd_print>
		lcd_print(2, 14, "9");
 8000e54:	4a8e      	ldr	r2, [pc, #568]	; (8001090 <printTemplate+0x2c0>)
 8000e56:	210e      	movs	r1, #14
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f006 fd3b 	bl	80078d4 <lcd_print>
		lcd_print(1, 5, machineID);
 8000e5e:	4a8d      	ldr	r2, [pc, #564]	; (8001094 <printTemplate+0x2c4>)
 8000e60:	2105      	movs	r1, #5
 8000e62:	2001      	movs	r0, #1
 8000e64:	f006 fd36 	bl	80078d4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e68:	2103      	movs	r1, #3
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f006 fd13 	bl	8007896 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e70:	e0f5      	b.n	800105e <printTemplate+0x28e>
	} else if(type == 2) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d178      	bne.n	8000f6a <printTemplate+0x19a>
		if(page == 1) {
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d114      	bne.n	8000ea8 <printTemplate+0xd8>
			lcd_clear();
 8000e7e:	f006 fd55 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f007 fa66 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e88:	4a83      	ldr	r2, [pc, #524]	; (8001098 <printTemplate+0x2c8>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f006 fd21 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e92:	4a82      	ldr	r2, [pc, #520]	; (800109c <printTemplate+0x2cc>)
 8000e94:	2107      	movs	r1, #7
 8000e96:	2001      	movs	r0, #1
 8000e98:	f006 fd1c 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e9c:	4a80      	ldr	r2, [pc, #512]	; (80010a0 <printTemplate+0x2d0>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f006 fd17 	bl	80078d4 <lcd_print>
}
 8000ea6:	e0da      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 2) {
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d114      	bne.n	8000ed8 <printTemplate+0x108>
			lcd_clear();
 8000eae:	f006 fd3d 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000eb2:	2064      	movs	r0, #100	; 0x64
 8000eb4:	f007 fa4e 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb8:	4a77      	ldr	r2, [pc, #476]	; (8001098 <printTemplate+0x2c8>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f006 fd09 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ec2:	4a76      	ldr	r2, [pc, #472]	; (800109c <printTemplate+0x2cc>)
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f006 fd04 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ecc:	4a75      	ldr	r2, [pc, #468]	; (80010a4 <printTemplate+0x2d4>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f006 fcff 	bl	80078d4 <lcd_print>
}
 8000ed6:	e0c2      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 3) {
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d114      	bne.n	8000f08 <printTemplate+0x138>
			lcd_clear();
 8000ede:	f006 fd25 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f007 fa36 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ee8:	4a6b      	ldr	r2, [pc, #428]	; (8001098 <printTemplate+0x2c8>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2001      	movs	r0, #1
 8000eee:	f006 fcf1 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ef2:	4a6a      	ldr	r2, [pc, #424]	; (800109c <printTemplate+0x2cc>)
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f006 fcec 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000efc:	4a6a      	ldr	r2, [pc, #424]	; (80010a8 <printTemplate+0x2d8>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	2002      	movs	r0, #2
 8000f02:	f006 fce7 	bl	80078d4 <lcd_print>
}
 8000f06:	e0aa      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 4) {
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d114      	bne.n	8000f38 <printTemplate+0x168>
			lcd_clear();
 8000f0e:	f006 fd0d 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f007 fa1e 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f18:	4a5f      	ldr	r2, [pc, #380]	; (8001098 <printTemplate+0x2c8>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f006 fcd9 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f22:	4a5e      	ldr	r2, [pc, #376]	; (800109c <printTemplate+0x2cc>)
 8000f24:	2107      	movs	r1, #7
 8000f26:	2001      	movs	r0, #1
 8000f28:	f006 fcd4 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f2c:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <printTemplate+0x2dc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 fccf 	bl	80078d4 <lcd_print>
}
 8000f36:	e092      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 5) {
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b05      	cmp	r3, #5
 8000f3c:	f040 808f 	bne.w	800105e <printTemplate+0x28e>
			lcd_clear();
 8000f40:	f006 fcf4 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f007 fa05 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f4a:	4a53      	ldr	r2, [pc, #332]	; (8001098 <printTemplate+0x2c8>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f006 fcc0 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f54:	4a51      	ldr	r2, [pc, #324]	; (800109c <printTemplate+0x2cc>)
 8000f56:	2107      	movs	r1, #7
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 fcbb 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f5e:	4a54      	ldr	r2, [pc, #336]	; (80010b0 <printTemplate+0x2e0>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 fcb6 	bl	80078d4 <lcd_print>
}
 8000f68:	e079      	b.n	800105e <printTemplate+0x28e>
	} else if(type == 3) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d176      	bne.n	800105e <printTemplate+0x28e>
		if(page == 1) {
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d114      	bne.n	8000fa0 <printTemplate+0x1d0>
			lcd_clear();
 8000f76:	f006 fcd9 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f007 f9ea 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <printTemplate+0x2e4>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2001      	movs	r0, #1
 8000f86:	f006 fca5 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <printTemplate+0x2e8>)
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f006 fca0 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <printTemplate+0x2d0>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f006 fc9b 	bl	80078d4 <lcd_print>
}
 8000f9e:	e05e      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 2) {
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d114      	bne.n	8000fd0 <printTemplate+0x200>
			lcd_clear();
 8000fa6:	f006 fcc1 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f007 f9d2 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fb0:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <printTemplate+0x2e4>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f006 fc8d 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <printTemplate+0x2e8>)
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f006 fc88 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fc4:	4a37      	ldr	r2, [pc, #220]	; (80010a4 <printTemplate+0x2d4>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f006 fc83 	bl	80078d4 <lcd_print>
}
 8000fce:	e046      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 3) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d114      	bne.n	8001000 <printTemplate+0x230>
			lcd_clear();
 8000fd6:	f006 fca9 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f007 f9ba 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fe0:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <printTemplate+0x2e4>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f006 fc75 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fea:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <printTemplate+0x2e8>)
 8000fec:	2107      	movs	r1, #7
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f006 fc70 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <printTemplate+0x2d8>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f006 fc6b 	bl	80078d4 <lcd_print>
}
 8000ffe:	e02e      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 4) {
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d114      	bne.n	8001030 <printTemplate+0x260>
			lcd_clear();
 8001006:	f006 fc91 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 800100a:	2064      	movs	r0, #100	; 0x64
 800100c:	f007 f9a2 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001010:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <printTemplate+0x2e4>)
 8001012:	2101      	movs	r1, #1
 8001014:	2001      	movs	r0, #1
 8001016:	f006 fc5d 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <printTemplate+0x2e8>)
 800101c:	2107      	movs	r1, #7
 800101e:	2001      	movs	r0, #1
 8001020:	f006 fc58 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <printTemplate+0x2dc>)
 8001026:	2101      	movs	r1, #1
 8001028:	2002      	movs	r0, #2
 800102a:	f006 fc53 	bl	80078d4 <lcd_print>
}
 800102e:	e016      	b.n	800105e <printTemplate+0x28e>
		} else if(page == 5) {
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d113      	bne.n	800105e <printTemplate+0x28e>
			lcd_clear();
 8001036:	f006 fc79 	bl	800792c <lcd_clear>
			HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f007 f98a 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <printTemplate+0x2e4>)
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f006 fc45 	bl	80078d4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <printTemplate+0x2e8>)
 800104c:	2107      	movs	r1, #7
 800104e:	2001      	movs	r0, #1
 8001050:	f006 fc40 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <printTemplate+0x2e0>)
 8001056:	2101      	movs	r1, #1
 8001058:	2002      	movs	r0, #2
 800105a:	f006 fc3b 	bl	80078d4 <lcd_print>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800cbb8 	.word	0x0800cbb8
 800106c:	0800cbc0 	.word	0x0800cbc0
 8001070:	0800cbc4 	.word	0x0800cbc4
 8001074:	0800cbc8 	.word	0x0800cbc8
 8001078:	0800cbcc 	.word	0x0800cbcc
 800107c:	0800cbd0 	.word	0x0800cbd0
 8001080:	0800cbd4 	.word	0x0800cbd4
 8001084:	0800cbd8 	.word	0x0800cbd8
 8001088:	0800cbdc 	.word	0x0800cbdc
 800108c:	0800cbe0 	.word	0x0800cbe0
 8001090:	0800cbe4 	.word	0x0800cbe4
 8001094:	200001a4 	.word	0x200001a4
 8001098:	0800cbe8 	.word	0x0800cbe8
 800109c:	200001b0 	.word	0x200001b0
 80010a0:	0800cbf0 	.word	0x0800cbf0
 80010a4:	0800cc04 	.word	0x0800cc04
 80010a8:	0800cc18 	.word	0x0800cc18
 80010ac:	0800cc2c 	.word	0x0800cc2c
 80010b0:	0800cc40 	.word	0x0800cc40
 80010b4:	0800cc54 	.word	0x0800cc54
 80010b8:	200001c4 	.word	0x200001c4

080010bc <checkSlideVal>:

int checkSlideVal(int state) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d111      	bne.n	80010ee <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010ca:	2101      	movs	r1, #1
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <checkSlideVal+0x60>)
 80010ce:	f007 ff11 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <checkSlideVal+0x20>
			return 34;
 80010d8:	2322      	movs	r3, #34	; 0x22
 80010da:	e01b      	b.n	8001114 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010dc:	2108      	movs	r1, #8
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <checkSlideVal+0x64>)
 80010e0:	f007 ff08 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d113      	bne.n	8001112 <checkSlideVal+0x56>
			return 32;
 80010ea:	2320      	movs	r3, #32
 80010ec:	e012      	b.n	8001114 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010ee:	2101      	movs	r1, #1
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <checkSlideVal+0x60>)
 80010f2:	f007 feff 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <checkSlideVal+0x44>
			return 35;
 80010fc:	2323      	movs	r3, #35	; 0x23
 80010fe:	e009      	b.n	8001114 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001100:	2108      	movs	r1, #8
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <checkSlideVal+0x64>)
 8001104:	f007 fef6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <checkSlideVal+0x56>
			return 33;
 800110e:	2321      	movs	r3, #33	; 0x21
 8001110:	e000      	b.n	8001114 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010800 	.word	0x40010800
 8001120:	40011000 	.word	0x40011000

08001124 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff f876 	bl	8000224 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001140:	e08a      	b.n	8001258 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f7ff ffba 	bl	80010bc <checkSlideVal>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	dd07      	ble.n	800115e <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f7ff ffb4 	bl	80010bc <checkSlideVal>
 8001154:	4603      	mov	r3, r0
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <slideText+0x148>)
 800115a:	701a      	strb	r2, [r3, #0]
			break;
 800115c:	e081      	b.n	8001262 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
 8001162:	e075      	b.n	8001250 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f7ff ffa9 	bl	80010bc <checkSlideVal>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd09      	ble.n	8001184 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f7ff ffa3 	bl	80010bc <checkSlideVal>
 8001176:	4603      	mov	r3, r0
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <slideText+0x148>)
 800117c:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001182:	e069      	b.n	8001258 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	4413      	add	r3, r2
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	e029      	b.n	80011e2 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f7ff ff94 	bl	80010bc <checkSlideVal>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd0b      	ble.n	80011b2 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f7ff ff8e 	bl	80010bc <checkSlideVal>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b31      	ldr	r3, [pc, #196]	; (800126c <slideText+0x148>)
 80011a6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80011b0:	e01d      	b.n	80011ee <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	b2d9      	uxtb	r1, r3
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f006 fb94 	bl	80078fe <lcd_print_char>
				HAL_Delay(30);
 80011d6:	201e      	movs	r0, #30
 80011d8:	f007 f8bc 	bl	8008354 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	3301      	adds	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	7dfa      	ldrb	r2, [r7, #23]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4413      	add	r3, r2
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbcf      	blt.n	800118e <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	e023      	b.n	800123e <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f7ff ff60 	bl	80010bc <checkSlideVal>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd0b      	ble.n	800121a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff ff5a 	bl	80010bc <checkSlideVal>
 8001208:	4603      	mov	r3, r0
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <slideText+0x148>)
 800120e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001218:	e017      	b.n	800124a <slideText+0x126>
				}
			     if(j >= startPos) {
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	429a      	cmp	r2, r3
 8001220:	db0a      	blt.n	8001238 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	b2d1      	uxtb	r1, r2
 800122a:	2220      	movs	r2, #32
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fb66 	bl	80078fe <lcd_print_char>
			    	 HAL_Delay(30);
 8001232:	201e      	movs	r0, #30
 8001234:	f007 f88e 	bl	8008354 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3b01      	subs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	7dfa      	ldrb	r2, [r7, #23]
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	429a      	cmp	r2, r3
 8001248:	dad5      	bge.n	80011f6 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	3301      	adds	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	6a3a      	ldr	r2, [r7, #32]
 8001254:	429a      	cmp	r2, r3
 8001256:	db85      	blt.n	8001164 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	2b01      	cmp	r3, #1
 800125c:	f43f af71 	beq.w	8001142 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000200 	.word	0x20000200

08001270 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <__NVIC_SystemReset+0x24>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001282:	4904      	ldr	r1, [pc, #16]	; (8001294 <__NVIC_SystemReset+0x24>)
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_SystemReset+0x28>)
 8001286:	4313      	orrs	r3, r2
 8001288:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800128a:	f3bf 8f4f 	dsb	sy
}
 800128e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <__NVIC_SystemReset+0x20>
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	05fa0004 	.word	0x05fa0004

0800129c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012a2:	2101      	movs	r1, #1
 80012a4:	488e      	ldr	r0, [pc, #568]	; (80014e0 <menu+0x244>)
 80012a6:	f007 fe25 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	f040 808e 	bne.w	80013ce <menu+0x132>
 80012b2:	4b8c      	ldr	r3, [pc, #560]	; (80014e4 <menu+0x248>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f083 0301 	eor.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8086 	beq.w	80013ce <menu+0x132>
		menuSayac = menuSayac+1;
 80012c2:	4b89      	ldr	r3, [pc, #548]	; (80014e8 <menu+0x24c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b87      	ldr	r3, [pc, #540]	; (80014e8 <menu+0x24c>)
 80012cc:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012ce:	4b86      	ldr	r3, [pc, #536]	; (80014e8 <menu+0x24c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b24      	cmp	r3, #36	; 0x24
 80012d4:	d102      	bne.n	80012dc <menu+0x40>
			menuSayac = 1;
 80012d6:	4b84      	ldr	r3, [pc, #528]	; (80014e8 <menu+0x24c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012dc:	4b82      	ldr	r3, [pc, #520]	; (80014e8 <menu+0x24c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d106      	bne.n	80012f2 <menu+0x56>
 80012e4:	4b81      	ldr	r3, [pc, #516]	; (80014ec <menu+0x250>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <menu+0x56>
			menuSayac = 21;
 80012ec:	4b7e      	ldr	r3, [pc, #504]	; (80014e8 <menu+0x24c>)
 80012ee:	2215      	movs	r2, #21
 80012f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80012f2:	4b7d      	ldr	r3, [pc, #500]	; (80014e8 <menu+0x24c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d106      	bne.n	8001308 <menu+0x6c>
 80012fa:	4b7d      	ldr	r3, [pc, #500]	; (80014f0 <menu+0x254>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <menu+0x6c>
			menuSayac = 16;
 8001302:	4b79      	ldr	r3, [pc, #484]	; (80014e8 <menu+0x24c>)
 8001304:	2210      	movs	r2, #16
 8001306:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001308:	4b77      	ldr	r3, [pc, #476]	; (80014e8 <menu+0x24c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b0d      	cmp	r3, #13
 800130e:	d106      	bne.n	800131e <menu+0x82>
 8001310:	4b77      	ldr	r3, [pc, #476]	; (80014f0 <menu+0x254>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d102      	bne.n	800131e <menu+0x82>
			menuSayac = 16;
 8001318:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <menu+0x24c>)
 800131a:	2210      	movs	r2, #16
 800131c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800131e:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <menu+0x24c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b09      	cmp	r3, #9
 8001324:	d106      	bne.n	8001334 <menu+0x98>
 8001326:	4b72      	ldr	r3, [pc, #456]	; (80014f0 <menu+0x254>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d102      	bne.n	8001334 <menu+0x98>
			menuSayac = 13;
 800132e:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <menu+0x24c>)
 8001330:	220d      	movs	r2, #13
 8001332:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001334:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <menu+0x24c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b0a      	cmp	r3, #10
 800133a:	d10a      	bne.n	8001352 <menu+0xb6>
 800133c:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <menu+0x258>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <menu+0xb0>
 8001344:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <menu+0x258>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d102      	bne.n	8001352 <menu+0xb6>
			menuSayac = 11;
 800134c:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <menu+0x24c>)
 800134e:	220b      	movs	r2, #11
 8001350:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <menu+0x24c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d10e      	bne.n	8001378 <menu+0xdc>
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <menu+0x25c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d003      	beq.n	800136a <menu+0xce>
 8001362:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <menu+0x25c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d106      	bne.n	8001378 <menu+0xdc>
 800136a:	4b61      	ldr	r3, [pc, #388]	; (80014f0 <menu+0x254>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <menu+0xdc>
			menuSayac = 16;
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <menu+0x24c>)
 8001374:	2210      	movs	r2, #16
 8001376:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001378:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <menu+0x24c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d10e      	bne.n	800139e <menu+0x102>
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <menu+0x25c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d003      	beq.n	8001390 <menu+0xf4>
 8001388:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <menu+0x25c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d106      	bne.n	800139e <menu+0x102>
 8001390:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <menu+0x254>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d102      	bne.n	800139e <menu+0x102>
			menuSayac = 13;
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <menu+0x24c>)
 800139a:	220d      	movs	r2, #13
 800139c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800139e:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <menu+0x24c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d106      	bne.n	80013b4 <menu+0x118>
 80013a6:	4b55      	ldr	r3, [pc, #340]	; (80014fc <menu+0x260>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d102      	bne.n	80013b4 <menu+0x118>
			menuSayac = 16;
 80013ae:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <menu+0x24c>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <menu+0x24c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b18      	cmp	r3, #24
 80013ba:	d106      	bne.n	80013ca <menu+0x12e>
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <menu+0x250>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <menu+0x12e>
			menuSayac = 26;
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <menu+0x24c>)
 80013c6:	221a      	movs	r2, #26
 80013c8:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013ca:	f003 fb31 	bl	8004a30 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ce:	2108      	movs	r1, #8
 80013d0:	484b      	ldr	r0, [pc, #300]	; (8001500 <menu+0x264>)
 80013d2:	f007 fd8f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d175      	bne.n	80014c8 <menu+0x22c>
 80013dc:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <menu+0x248>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06e      	beq.n	80014c8 <menu+0x22c>
		if (menuSayac <= 1) {
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <menu+0x24c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d802      	bhi.n	80013f8 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <menu+0x24c>)
 80013f4:	2224      	movs	r2, #36	; 0x24
 80013f6:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <menu+0x24c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <menu+0x24c>)
 8001402:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001404:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <menu+0x24c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b14      	cmp	r3, #20
 800140a:	d106      	bne.n	800141a <menu+0x17e>
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <menu+0x250>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <menu+0x17e>
			menuSayac = 17;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <menu+0x24c>)
 8001416:	2211      	movs	r2, #17
 8001418:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <menu+0x24c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	d106      	bne.n	8001430 <menu+0x194>
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <menu+0x254>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <menu+0x194>
			menuSayac = 7;
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <menu+0x24c>)
 800142c:	2207      	movs	r2, #7
 800142e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <menu+0x24c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d106      	bne.n	8001446 <menu+0x1aa>
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <menu+0x254>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d102      	bne.n	8001446 <menu+0x1aa>
			menuSayac = 12;
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <menu+0x24c>)
 8001442:	220c      	movs	r2, #12
 8001444:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <menu+0x24c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d106      	bne.n	800145c <menu+0x1c0>
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <menu+0x254>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d102      	bne.n	800145c <menu+0x1c0>
			menuSayac = 8;
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <menu+0x24c>)
 8001458:	2208      	movs	r2, #8
 800145a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <menu+0x24c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b0a      	cmp	r3, #10
 8001462:	d10a      	bne.n	800147a <menu+0x1de>
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <menu+0x258>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d003      	beq.n	8001474 <menu+0x1d8>
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <menu+0x258>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d102      	bne.n	800147a <menu+0x1de>
			menuSayac = 9;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <menu+0x24c>)
 8001476:	2209      	movs	r2, #9
 8001478:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <menu+0x24c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d10a      	bne.n	8001498 <menu+0x1fc>
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <menu+0x25c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d003      	beq.n	8001492 <menu+0x1f6>
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <menu+0x25c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d102      	bne.n	8001498 <menu+0x1fc>
			menuSayac = 11;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <menu+0x24c>)
 8001494:	220b      	movs	r2, #11
 8001496:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <menu+0x24c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d106      	bne.n	80014ae <menu+0x212>
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <menu+0x260>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d102      	bne.n	80014ae <menu+0x212>
			menuSayac = 14;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <menu+0x24c>)
 80014aa:	220e      	movs	r2, #14
 80014ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <menu+0x24c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b19      	cmp	r3, #25
 80014b4:	d106      	bne.n	80014c4 <menu+0x228>
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <menu+0x250>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <menu+0x228>
			menuSayac = 23;
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <menu+0x24c>)
 80014c0:	2217      	movs	r2, #23
 80014c2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014c4:	f003 fab4 	bl	8004a30 <bekle>
	}

	if (menuSayac == 0) {
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <menu+0x24c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d133      	bne.n	8001538 <menu+0x29c>
		if(dilSecim == 0) {
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <menu+0x268>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d121      	bne.n	800151c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <menu+0x26c>)
 80014da:	2101      	movs	r1, #1
 80014dc:	2001      	movs	r0, #1
 80014de:	e015      	b.n	800150c <menu+0x270>
 80014e0:	40010800 	.word	0x40010800
 80014e4:	2000022f 	.word	0x2000022f
 80014e8:	20000200 	.word	0x20000200
 80014ec:	2000020f 	.word	0x2000020f
 80014f0:	20000208 	.word	0x20000208
 80014f4:	20000209 	.word	0x20000209
 80014f8:	2000020a 	.word	0x2000020a
 80014fc:	2000020b 	.word	0x2000020b
 8001500:	40011000 	.word	0x40011000
 8001504:	20000221 	.word	0x20000221
 8001508:	0800cc5c 	.word	0x0800cc5c
 800150c:	f006 f9e2 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001510:	4a94      	ldr	r2, [pc, #592]	; (8001764 <menu+0x4c8>)
 8001512:	2101      	movs	r1, #1
 8001514:	2002      	movs	r0, #2
 8001516:	f006 f9dd 	bl	80078d4 <lcd_print>
 800151a:	e00d      	b.n	8001538 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <menu+0x4cc>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d109      	bne.n	8001538 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001524:	4a91      	ldr	r2, [pc, #580]	; (800176c <menu+0x4d0>)
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f006 f9d3 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <menu+0x4d4>)
 8001530:	2101      	movs	r1, #1
 8001532:	2002      	movs	r0, #2
 8001534:	f006 f9ce 	bl	80078d4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001538:	4b8e      	ldr	r3, [pc, #568]	; (8001774 <menu+0x4d8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 82b5 	bne.w	8001aac <menu+0x810>
		if(dilSecim == 0) {
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <menu+0x4cc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800154a:	4a8b      	ldr	r2, [pc, #556]	; (8001778 <menu+0x4dc>)
 800154c:	2101      	movs	r1, #1
 800154e:	2001      	movs	r0, #1
 8001550:	f006 f9c0 	bl	80078d4 <lcd_print>
 8001554:	e008      	b.n	8001568 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001556:	4b84      	ldr	r3, [pc, #528]	; (8001768 <menu+0x4cc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d104      	bne.n	8001568 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800155e:	4a87      	ldr	r2, [pc, #540]	; (800177c <menu+0x4e0>)
 8001560:	2101      	movs	r1, #1
 8001562:	2001      	movs	r0, #1
 8001564:	f006 f9b6 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001568:	4b85      	ldr	r3, [pc, #532]	; (8001780 <menu+0x4e4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d123      	bne.n	80015b8 <menu+0x31c>
			if(dilSecim == 0) {
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <menu+0x4cc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001578:	4a82      	ldr	r2, [pc, #520]	; (8001784 <menu+0x4e8>)
 800157a:	2101      	movs	r1, #1
 800157c:	2002      	movs	r0, #2
 800157e:	f006 f9a9 	bl	80078d4 <lcd_print>
 8001582:	e008      	b.n	8001596 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001584:	4b78      	ldr	r3, [pc, #480]	; (8001768 <menu+0x4cc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d104      	bne.n	8001596 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 800158c:	4a7e      	ldr	r2, [pc, #504]	; (8001788 <menu+0x4ec>)
 800158e:	2101      	movs	r1, #1
 8001590:	2002      	movs	r0, #2
 8001592:	f006 f99f 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001596:	4a7d      	ldr	r2, [pc, #500]	; (800178c <menu+0x4f0>)
 8001598:	210f      	movs	r1, #15
 800159a:	2002      	movs	r0, #2
 800159c:	f006 f99a 	bl	80078d4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80015a0:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <menu+0x4f4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	220a      	movs	r2, #10
 80015a6:	497b      	ldr	r1, [pc, #492]	; (8001794 <menu+0x4f8>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00a fccf 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 80015ae:	4a79      	ldr	r2, [pc, #484]	; (8001794 <menu+0x4f8>)
 80015b0:	210e      	movs	r1, #14
 80015b2:	2002      	movs	r0, #2
 80015b4:	f006 f98e 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80015b8:	4b71      	ldr	r3, [pc, #452]	; (8001780 <menu+0x4e4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d123      	bne.n	8001608 <menu+0x36c>
			if(dilSecim == 0) {
 80015c0:	4b69      	ldr	r3, [pc, #420]	; (8001768 <menu+0x4cc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80015c8:	4a73      	ldr	r2, [pc, #460]	; (8001798 <menu+0x4fc>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	2002      	movs	r0, #2
 80015ce:	f006 f981 	bl	80078d4 <lcd_print>
 80015d2:	e008      	b.n	80015e6 <menu+0x34a>
			} else if(dilSecim == 1) {
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <menu+0x4cc>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d104      	bne.n	80015e6 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <menu+0x500>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f006 f977 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015e6:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <menu+0x504>)
 80015e8:	210f      	movs	r1, #15
 80015ea:	2002      	movs	r0, #2
 80015ec:	f006 f972 	bl	80078d4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80015f0:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <menu+0x508>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	220a      	movs	r2, #10
 80015f6:	4967      	ldr	r1, [pc, #412]	; (8001794 <menu+0x4f8>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00a fca7 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 80015fe:	4a65      	ldr	r2, [pc, #404]	; (8001794 <menu+0x4f8>)
 8001600:	210e      	movs	r1, #14
 8001602:	2002      	movs	r0, #2
 8001604:	f006 f966 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001608:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <menu+0x4e4>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <menu+0x3bc>
			if(dilSecim == 0) {
 8001610:	4b55      	ldr	r3, [pc, #340]	; (8001768 <menu+0x4cc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001618:	4a63      	ldr	r2, [pc, #396]	; (80017a8 <menu+0x50c>)
 800161a:	2101      	movs	r1, #1
 800161c:	2002      	movs	r0, #2
 800161e:	f006 f959 	bl	80078d4 <lcd_print>
 8001622:	e008      	b.n	8001636 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <menu+0x4cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d104      	bne.n	8001636 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800162c:	4a5f      	ldr	r2, [pc, #380]	; (80017ac <menu+0x510>)
 800162e:	2101      	movs	r1, #1
 8001630:	2002      	movs	r0, #2
 8001632:	f006 f94f 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001636:	4a5a      	ldr	r2, [pc, #360]	; (80017a0 <menu+0x504>)
 8001638:	210f      	movs	r1, #15
 800163a:	2002      	movs	r0, #2
 800163c:	f006 f94a 	bl	80078d4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001640:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <menu+0x514>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	220a      	movs	r2, #10
 8001646:	4953      	ldr	r1, [pc, #332]	; (8001794 <menu+0x4f8>)
 8001648:	4618      	mov	r0, r3
 800164a:	f00a fc7f 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 800164e:	4a51      	ldr	r2, [pc, #324]	; (8001794 <menu+0x4f8>)
 8001650:	210e      	movs	r1, #14
 8001652:	2002      	movs	r0, #2
 8001654:	f006 f93e 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <menu+0x4e4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d123      	bne.n	80016a8 <menu+0x40c>
			if(dilSecim == 0) {
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <menu+0x4cc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001668:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <menu+0x518>)
 800166a:	2101      	movs	r1, #1
 800166c:	2002      	movs	r0, #2
 800166e:	f006 f931 	bl	80078d4 <lcd_print>
 8001672:	e008      	b.n	8001686 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <menu+0x4cc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d104      	bne.n	8001686 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 800167c:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <menu+0x51c>)
 800167e:	2101      	movs	r1, #1
 8001680:	2002      	movs	r0, #2
 8001682:	f006 f927 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001686:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <menu+0x504>)
 8001688:	210f      	movs	r1, #15
 800168a:	2002      	movs	r0, #2
 800168c:	f006 f922 	bl	80078d4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <menu+0x520>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	220a      	movs	r2, #10
 8001696:	493f      	ldr	r1, [pc, #252]	; (8001794 <menu+0x4f8>)
 8001698:	4618      	mov	r0, r3
 800169a:	f00a fc57 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 800169e:	4a3d      	ldr	r2, [pc, #244]	; (8001794 <menu+0x4f8>)
 80016a0:	210e      	movs	r1, #14
 80016a2:	2002      	movs	r0, #2
 80016a4:	f006 f916 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <menu+0x4e4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d123      	bne.n	80016f8 <menu+0x45c>
			if(dilSecim == 0) {
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <menu+0x4cc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80016b8:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <menu+0x524>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	2002      	movs	r0, #2
 80016be:	f006 f909 	bl	80078d4 <lcd_print>
 80016c2:	e008      	b.n	80016d6 <menu+0x43a>
			} else if(dilSecim == 1) {
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <menu+0x4cc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d104      	bne.n	80016d6 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80016cc:	4a3d      	ldr	r2, [pc, #244]	; (80017c4 <menu+0x528>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2002      	movs	r0, #2
 80016d2:	f006 f8ff 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016d6:	4a32      	ldr	r2, [pc, #200]	; (80017a0 <menu+0x504>)
 80016d8:	210f      	movs	r1, #15
 80016da:	2002      	movs	r0, #2
 80016dc:	f006 f8fa 	bl	80078d4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <menu+0x52c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	220a      	movs	r2, #10
 80016e6:	492b      	ldr	r1, [pc, #172]	; (8001794 <menu+0x4f8>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00a fc2f 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 80016ee:	4a29      	ldr	r2, [pc, #164]	; (8001794 <menu+0x4f8>)
 80016f0:	210e      	movs	r1, #14
 80016f2:	2002      	movs	r0, #2
 80016f4:	f006 f8ee 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <menu+0x4e4>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d123      	bne.n	8001748 <menu+0x4ac>
			if(dilSecim == 0) {
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <menu+0x4cc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001708:	4a30      	ldr	r2, [pc, #192]	; (80017cc <menu+0x530>)
 800170a:	2101      	movs	r1, #1
 800170c:	2002      	movs	r0, #2
 800170e:	f006 f8e1 	bl	80078d4 <lcd_print>
 8001712:	e008      	b.n	8001726 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <menu+0x4cc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d104      	bne.n	8001726 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800171c:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <menu+0x534>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f006 f8d7 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <menu+0x504>)
 8001728:	210f      	movs	r1, #15
 800172a:	2002      	movs	r0, #2
 800172c:	f006 f8d2 	bl	80078d4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <menu+0x538>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	220a      	movs	r2, #10
 8001736:	4917      	ldr	r1, [pc, #92]	; (8001794 <menu+0x4f8>)
 8001738:	4618      	mov	r0, r3
 800173a:	f00a fc07 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <menu+0x4f8>)
 8001740:	210e      	movs	r1, #14
 8001742:	2002      	movs	r0, #2
 8001744:	f006 f8c6 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <menu+0x4e4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d15f      	bne.n	8001810 <menu+0x574>
			if(dilSecim == 0) {
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <menu+0x4cc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d141      	bne.n	80017dc <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <menu+0x53c>)
 800175a:	2101      	movs	r1, #1
 800175c:	2002      	movs	r0, #2
 800175e:	f006 f8b9 	bl	80078d4 <lcd_print>
 8001762:	e044      	b.n	80017ee <menu+0x552>
 8001764:	0800cc70 	.word	0x0800cc70
 8001768:	20000221 	.word	0x20000221
 800176c:	0800cc84 	.word	0x0800cc84
 8001770:	0800cc98 	.word	0x0800cc98
 8001774:	20000200 	.word	0x20000200
 8001778:	0800ccac 	.word	0x0800ccac
 800177c:	0800ccc0 	.word	0x0800ccc0
 8001780:	20000202 	.word	0x20000202
 8001784:	0800ccd4 	.word	0x0800ccd4
 8001788:	0800cce4 	.word	0x0800cce4
 800178c:	0800ccf4 	.word	0x0800ccf4
 8001790:	20000222 	.word	0x20000222
 8001794:	2000019c 	.word	0x2000019c
 8001798:	0800ccf8 	.word	0x0800ccf8
 800179c:	0800cd08 	.word	0x0800cd08
 80017a0:	0800cd18 	.word	0x0800cd18
 80017a4:	20000223 	.word	0x20000223
 80017a8:	0800cd1c 	.word	0x0800cd1c
 80017ac:	0800cd2c 	.word	0x0800cd2c
 80017b0:	20000224 	.word	0x20000224
 80017b4:	0800cd3c 	.word	0x0800cd3c
 80017b8:	0800cd4c 	.word	0x0800cd4c
 80017bc:	20000225 	.word	0x20000225
 80017c0:	0800cd5c 	.word	0x0800cd5c
 80017c4:	0800cd6c 	.word	0x0800cd6c
 80017c8:	20000226 	.word	0x20000226
 80017cc:	0800cd7c 	.word	0x0800cd7c
 80017d0:	0800cd8c 	.word	0x0800cd8c
 80017d4:	20000227 	.word	0x20000227
 80017d8:	0800cd9c 	.word	0x0800cd9c
			} else if(dilSecim == 1) {
 80017dc:	4b4f      	ldr	r3, [pc, #316]	; (800191c <menu+0x680>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d104      	bne.n	80017ee <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <menu+0x684>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2002      	movs	r0, #2
 80017ea:	f006 f873 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ee:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <menu+0x688>)
 80017f0:	210f      	movs	r1, #15
 80017f2:	2002      	movs	r0, #2
 80017f4:	f006 f86e 	bl	80078d4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <menu+0x68c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	220a      	movs	r2, #10
 80017fe:	494b      	ldr	r1, [pc, #300]	; (800192c <menu+0x690>)
 8001800:	4618      	mov	r0, r3
 8001802:	f00a fba3 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <menu+0x690>)
 8001808:	210e      	movs	r1, #14
 800180a:	2002      	movs	r0, #2
 800180c:	f006 f862 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <menu+0x694>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d123      	bne.n	8001860 <menu+0x5c4>
			if(dilSecim == 0) {
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <menu+0x680>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001820:	4a44      	ldr	r2, [pc, #272]	; (8001934 <menu+0x698>)
 8001822:	2101      	movs	r1, #1
 8001824:	2002      	movs	r0, #2
 8001826:	f006 f855 	bl	80078d4 <lcd_print>
 800182a:	e008      	b.n	800183e <menu+0x5a2>
			} else if(dilSecim == 1) {
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <menu+0x680>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d104      	bne.n	800183e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001834:	4a40      	ldr	r2, [pc, #256]	; (8001938 <menu+0x69c>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 f84b 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183e:	4a39      	ldr	r2, [pc, #228]	; (8001924 <menu+0x688>)
 8001840:	210f      	movs	r1, #15
 8001842:	2002      	movs	r0, #2
 8001844:	f006 f846 	bl	80078d4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001848:	4b3c      	ldr	r3, [pc, #240]	; (800193c <menu+0x6a0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	220a      	movs	r2, #10
 800184e:	4937      	ldr	r1, [pc, #220]	; (800192c <menu+0x690>)
 8001850:	4618      	mov	r0, r3
 8001852:	f00a fb7b 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 8001856:	4a35      	ldr	r2, [pc, #212]	; (800192c <menu+0x690>)
 8001858:	210e      	movs	r1, #14
 800185a:	2002      	movs	r0, #2
 800185c:	f006 f83a 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <menu+0x694>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d123      	bne.n	80018b0 <menu+0x614>
			if(dilSecim == 0) {
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <menu+0x680>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001870:	4a33      	ldr	r2, [pc, #204]	; (8001940 <menu+0x6a4>)
 8001872:	2101      	movs	r1, #1
 8001874:	2002      	movs	r0, #2
 8001876:	f006 f82d 	bl	80078d4 <lcd_print>
 800187a:	e008      	b.n	800188e <menu+0x5f2>
			} else if(dilSecim == 1) {
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <menu+0x680>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d104      	bne.n	800188e <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001884:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <menu+0x6a8>)
 8001886:	2101      	movs	r1, #1
 8001888:	2002      	movs	r0, #2
 800188a:	f006 f823 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <menu+0x688>)
 8001890:	210f      	movs	r1, #15
 8001892:	2002      	movs	r0, #2
 8001894:	f006 f81e 	bl	80078d4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <menu+0x6ac>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	220a      	movs	r2, #10
 800189e:	4923      	ldr	r1, [pc, #140]	; (800192c <menu+0x690>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00a fb53 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <menu+0x690>)
 80018a8:	210e      	movs	r1, #14
 80018aa:	2002      	movs	r0, #2
 80018ac:	f006 f812 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <menu+0x694>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d123      	bne.n	8001900 <menu+0x664>
			if(dilSecim == 0) {
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <menu+0x680>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80018c0:	4a22      	ldr	r2, [pc, #136]	; (800194c <menu+0x6b0>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	2002      	movs	r0, #2
 80018c6:	f006 f805 	bl	80078d4 <lcd_print>
 80018ca:	e008      	b.n	80018de <menu+0x642>
			} else if(dilSecim == 1) {
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <menu+0x680>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d104      	bne.n	80018de <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <menu+0x6b4>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2002      	movs	r0, #2
 80018da:	f005 fffb 	bl	80078d4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <menu+0x6b8>)
 80018e0:	2110      	movs	r1, #16
 80018e2:	2002      	movs	r0, #2
 80018e4:	f005 fff6 	bl	80078d4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <menu+0x6bc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	220a      	movs	r2, #10
 80018ee:	490f      	ldr	r1, [pc, #60]	; (800192c <menu+0x690>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00a fb2b 	bl	800bf4c <itoa>
			lcd_print(2, 15, snum);
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <menu+0x690>)
 80018f8:	210f      	movs	r1, #15
 80018fa:	2002      	movs	r0, #2
 80018fc:	f005 ffea 	bl	80078d4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <menu+0x694>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b0a      	cmp	r3, #10
 8001906:	d134      	bne.n	8001972 <menu+0x6d6>
			if(dilSecim == 0) {
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <menu+0x680>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d127      	bne.n	8001960 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <menu+0x6c0>)
 8001912:	2101      	movs	r1, #1
 8001914:	2002      	movs	r0, #2
 8001916:	f005 ffdd 	bl	80078d4 <lcd_print>
 800191a:	e02a      	b.n	8001972 <menu+0x6d6>
 800191c:	20000221 	.word	0x20000221
 8001920:	0800cdac 	.word	0x0800cdac
 8001924:	0800cd18 	.word	0x0800cd18
 8001928:	20000228 	.word	0x20000228
 800192c:	2000019c 	.word	0x2000019c
 8001930:	20000202 	.word	0x20000202
 8001934:	0800cdbc 	.word	0x0800cdbc
 8001938:	0800cdcc 	.word	0x0800cdcc
 800193c:	20000229 	.word	0x20000229
 8001940:	0800cddc 	.word	0x0800cddc
 8001944:	0800cdec 	.word	0x0800cdec
 8001948:	2000022a 	.word	0x2000022a
 800194c:	0800cdfc 	.word	0x0800cdfc
 8001950:	0800ce0c 	.word	0x0800ce0c
 8001954:	0800ce1c 	.word	0x0800ce1c
 8001958:	2000022b 	.word	0x2000022b
 800195c:	0800ce20 	.word	0x0800ce20
			} else if(dilSecim == 1) {
 8001960:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <menu+0x8d0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d104      	bne.n	8001972 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001968:	4a81      	ldr	r2, [pc, #516]	; (8001b70 <menu+0x8d4>)
 800196a:	2101      	movs	r1, #1
 800196c:	2002      	movs	r0, #2
 800196e:	f005 ffb1 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001972:	2102      	movs	r1, #2
 8001974:	487f      	ldr	r0, [pc, #508]	; (8001b74 <menu+0x8d8>)
 8001976:	f007 fabd 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	2b01      	cmp	r3, #1
 800197e:	d119      	bne.n	80019b4 <menu+0x718>
 8001980:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <menu+0x8dc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d012      	beq.n	80019b4 <menu+0x718>
 800198e:	4b7b      	ldr	r3, [pc, #492]	; (8001b7c <menu+0x8e0>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10e      	bne.n	80019b4 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001996:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <menu+0x8e4>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <menu+0x8e4>)
 80019a0:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <menu+0x8e4>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b0a      	cmp	r3, #10
 80019a8:	d902      	bls.n	80019b0 <menu+0x714>
				hataGostermeSirasi = 0;
 80019aa:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <menu+0x8e4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019b0:	f003 f83e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019b4:	2104      	movs	r1, #4
 80019b6:	486f      	ldr	r0, [pc, #444]	; (8001b74 <menu+0x8d8>)
 80019b8:	f007 fa9c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d119      	bne.n	80019f6 <menu+0x75a>
 80019c2:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <menu+0x8dc>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d012      	beq.n	80019f6 <menu+0x75a>
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <menu+0x8e0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10e      	bne.n	80019f6 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <menu+0x8e4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <menu+0x8e4>)
 80019e2:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <menu+0x8e4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b0b      	cmp	r3, #11
 80019ea:	d902      	bls.n	80019f2 <menu+0x756>
	    		hataGostermeSirasi = 10;
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <menu+0x8e4>)
 80019ee:	220a      	movs	r2, #10
 80019f0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80019f2:	f003 f81d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80019f6:	2108      	movs	r1, #8
 80019f8:	485e      	ldr	r0, [pc, #376]	; (8001b74 <menu+0x8d8>)
 80019fa:	f007 fa7b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d153      	bne.n	8001aac <menu+0x810>
 8001a04:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <menu+0x8dc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d04c      	beq.n	8001aac <menu+0x810>
 8001a12:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <menu+0x8e4>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d148      	bne.n	8001aac <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <menu+0x8e8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <menu+0x8ec>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a28:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <menu+0x8f0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <menu+0x8ec>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <menu+0x8f4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <menu+0x8ec>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <menu+0x8f8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <menu+0x8ec>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a52:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <menu+0x8fc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <menu+0x8ec>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a60:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <menu+0x900>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <menu+0x8ec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <menu+0x904>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <menu+0x8ec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <menu+0x908>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <menu+0x8ec>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <menu+0x90c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <menu+0x8ec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a98:	4b44      	ldr	r3, [pc, #272]	; (8001bac <menu+0x910>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <menu+0x8ec>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <menu+0x914>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001aac:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <menu+0x918>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f040 80fc 	bne.w	8001cae <menu+0xa12>
		if(dilSecim == 0) {
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <menu+0x8d0>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <menu+0x91c>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f005 ff06 	bl	80078d4 <lcd_print>
 8001ac8:	e008      	b.n	8001adc <menu+0x840>
		} else if(dilSecim == 1) {
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <menu+0x8d0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d104      	bne.n	8001adc <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001ad2:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <menu+0x920>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f005 fefc 	bl	80078d4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <menu+0x8e0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d003      	beq.n	8001aec <menu+0x850>
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <menu+0x8e0>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d112      	bne.n	8001b12 <menu+0x876>
			if(dilSecim == 0) {
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <menu+0x8d0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001af4:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <menu+0x924>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	2002      	movs	r0, #2
 8001afa:	f005 feeb 	bl	80078d4 <lcd_print>
 8001afe:	e008      	b.n	8001b12 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <menu+0x8d0>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d104      	bne.n	8001b12 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b08:	4a2e      	ldr	r2, [pc, #184]	; (8001bc4 <menu+0x928>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f005 fee1 	bl	80078d4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <menu+0x92c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <menu+0x8ac>
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <menu+0x8e0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d112      	bne.n	8001b48 <menu+0x8ac>
			if(dilSecim == 0) {
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <menu+0x8d0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b2a:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <menu+0x930>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f005 fed0 	bl	80078d4 <lcd_print>
 8001b34:	e008      	b.n	8001b48 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <menu+0x8d0>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d104      	bne.n	8001b48 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001b3e:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <menu+0x934>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	2002      	movs	r0, #2
 8001b44:	f005 fec6 	bl	80078d4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <menu+0x92c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d14c      	bne.n	8001bea <menu+0x94e>
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <menu+0x8e0>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d148      	bne.n	8001bea <menu+0x94e>
			if(dilSecim == 0) {
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <menu+0x8d0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d13b      	bne.n	8001bd8 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001b60:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <menu+0x938>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	2002      	movs	r0, #2
 8001b66:	f005 feb5 	bl	80078d4 <lcd_print>
 8001b6a:	e03e      	b.n	8001bea <menu+0x94e>
 8001b6c:	20000221 	.word	0x20000221
 8001b70:	0800ce34 	.word	0x0800ce34
 8001b74:	40010800 	.word	0x40010800
 8001b78:	2000022f 	.word	0x2000022f
 8001b7c:	2000020f 	.word	0x2000020f
 8001b80:	20000202 	.word	0x20000202
 8001b84:	20000222 	.word	0x20000222
 8001b88:	2000012c 	.word	0x2000012c
 8001b8c:	20000223 	.word	0x20000223
 8001b90:	20000224 	.word	0x20000224
 8001b94:	20000225 	.word	0x20000225
 8001b98:	20000226 	.word	0x20000226
 8001b9c:	20000227 	.word	0x20000227
 8001ba0:	20000228 	.word	0x20000228
 8001ba4:	20000229 	.word	0x20000229
 8001ba8:	2000022a 	.word	0x2000022a
 8001bac:	2000022b 	.word	0x2000022b
 8001bb0:	2000022c 	.word	0x2000022c
 8001bb4:	20000200 	.word	0x20000200
 8001bb8:	0800ce48 	.word	0x0800ce48
 8001bbc:	0800ce5c 	.word	0x0800ce5c
 8001bc0:	0800ce70 	.word	0x0800ce70
 8001bc4:	0800ce84 	.word	0x0800ce84
 8001bc8:	20000201 	.word	0x20000201
 8001bcc:	0800ce98 	.word	0x0800ce98
 8001bd0:	0800cea8 	.word	0x0800cea8
 8001bd4:	0800ceb8 	.word	0x0800ceb8
			} else if(dilSecim == 1) {
 8001bd8:	4b98      	ldr	r3, [pc, #608]	; (8001e3c <menu+0xba0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d104      	bne.n	8001bea <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001be0:	4a97      	ldr	r2, [pc, #604]	; (8001e40 <menu+0xba4>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2002      	movs	r0, #2
 8001be6:	f005 fe75 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bea:	2102      	movs	r1, #2
 8001bec:	4895      	ldr	r0, [pc, #596]	; (8001e44 <menu+0xba8>)
 8001bee:	f007 f981 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d119      	bne.n	8001c2c <menu+0x990>
 8001bf8:	4b93      	ldr	r3, [pc, #588]	; (8001e48 <menu+0xbac>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d012      	beq.n	8001c2c <menu+0x990>
 8001c06:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <menu+0xbb0>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c0e:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <menu+0xbb4>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <menu+0xbb4>)
 8001c18:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <menu+0xbb4>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d902      	bls.n	8001c28 <menu+0x98c>
				calismaSekli = 0;
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <menu+0xbb4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c28:	f002 ff02 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4885      	ldr	r0, [pc, #532]	; (8001e44 <menu+0xba8>)
 8001c30:	f007 f960 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d119      	bne.n	8001c6e <menu+0x9d2>
 8001c3a:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <menu+0xbac>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <menu+0x9d2>
 8001c48:	4b80      	ldr	r3, [pc, #512]	; (8001e4c <menu+0xbb0>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10e      	bne.n	8001c6e <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001c50:	4b7f      	ldr	r3, [pc, #508]	; (8001e50 <menu+0xbb4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b7d      	ldr	r3, [pc, #500]	; (8001e50 <menu+0xbb4>)
 8001c5a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001c5c:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <menu+0xbb4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <menu+0x9ce>
	    		calismaSekli = 1;
 8001c64:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <menu+0xbb4>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c6a:	f002 fee1 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c6e:	2108      	movs	r1, #8
 8001c70:	4874      	ldr	r0, [pc, #464]	; (8001e44 <menu+0xba8>)
 8001c72:	f007 f93f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d118      	bne.n	8001cae <menu+0xa12>
 8001c7c:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <menu+0xbac>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d011      	beq.n	8001cae <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <menu+0xbb4>)
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b71      	ldr	r3, [pc, #452]	; (8001e54 <menu+0xbb8>)
 8001c90:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <menu+0xbb4>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d106      	bne.n	8001ca8 <menu+0xa0c>
				altLimit = 1;
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <menu+0xbbc>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <menu+0xbbc>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <menu+0xbb8>)
 8001ca6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <menu+0xbc0>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001cae:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <menu+0xbc4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	f040 8083 	bne.w	8001dbe <menu+0xb22>
		if(dilSecim == 0) {
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <menu+0xba0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001cc0:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <menu+0xbc8>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 fe05 	bl	80078d4 <lcd_print>
 8001cca:	e008      	b.n	8001cde <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <menu+0xba0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d104      	bne.n	8001cde <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001cd4:	4a64      	ldr	r2, [pc, #400]	; (8001e68 <menu+0xbcc>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f005 fdfb 	bl	80078d4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <menu+0xbd0>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d113      	bne.n	8001d0e <menu+0xa72>
			if(dilSecim == 0) {
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <menu+0xba0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001cee:	4a60      	ldr	r2, [pc, #384]	; (8001e70 <menu+0xbd4>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f005 fdee 	bl	80078d4 <lcd_print>
 8001cf8:	e012      	b.n	8001d20 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <menu+0xba0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10e      	bne.n	8001d20 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d02:	4a5c      	ldr	r2, [pc, #368]	; (8001e74 <menu+0xbd8>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2002      	movs	r0, #2
 8001d08:	f005 fde4 	bl	80078d4 <lcd_print>
 8001d0c:	e008      	b.n	8001d20 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <menu+0xbd0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d104      	bne.n	8001d20 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <menu+0xbdc>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f005 fdda 	bl	80078d4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d20:	2102      	movs	r1, #2
 8001d22:	4848      	ldr	r0, [pc, #288]	; (8001e44 <menu+0xba8>)
 8001d24:	f007 f8e6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d115      	bne.n	8001d5a <menu+0xabe>
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <menu+0xbac>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <menu+0xbd0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <menu+0xbd0>)
 8001d46:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001d48:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <menu+0xbd0>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d902      	bls.n	8001d56 <menu+0xaba>
				emniyetCercevesi = 0;
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <menu+0xbd0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d56:	f002 fe6b 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4839      	ldr	r0, [pc, #228]	; (8001e44 <menu+0xba8>)
 8001d5e:	f007 f8c9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d115      	bne.n	8001d94 <menu+0xaf8>
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <menu+0xbac>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00e      	beq.n	8001d94 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <menu+0xbd0>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <menu+0xbd0>)
 8001d80:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <menu+0xbd0>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <menu+0xbd0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d90:	f002 fe4e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d94:	2108      	movs	r1, #8
 8001d96:	482b      	ldr	r0, [pc, #172]	; (8001e44 <menu+0xba8>)
 8001d98:	f007 f8ac 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10d      	bne.n	8001dbe <menu+0xb22>
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <menu+0xbac>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <menu+0xbd0>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <menu+0xbb8>)
 8001db6:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <menu+0xbc0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <menu+0xbc4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	f040 80ba 	bne.w	8001f3c <menu+0xca0>
		if(dilSecim == 0) {
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <menu+0xba0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <menu+0xbe0>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f005 fd7d 	bl	80078d4 <lcd_print>
 8001dda:	e008      	b.n	8001dee <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <menu+0xba0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d104      	bne.n	8001dee <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <menu+0xbe4>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2001      	movs	r0, #1
 8001dea:	f005 fd73 	bl	80078d4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <menu+0xbe8>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d113      	bne.n	8001e1e <menu+0xb82>
			if(dilSecim == 0) {
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <menu+0xba0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <menu+0xbd4>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	2002      	movs	r0, #2
 8001e04:	f005 fd66 	bl	80078d4 <lcd_print>
 8001e08:	e049      	b.n	8001e9e <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <menu+0xba0>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d145      	bne.n	8001e9e <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <menu+0xbd8>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	2002      	movs	r0, #2
 8001e18:	f005 fd5c 	bl	80078d4 <lcd_print>
 8001e1c:	e03f      	b.n	8001e9e <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <menu+0xbe8>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d13b      	bne.n	8001e9e <menu+0xc02>
			if(dilSecim == 0) {
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <menu+0xba0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d12e      	bne.n	8001e8c <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <menu+0xbec>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2002      	movs	r0, #2
 8001e34:	f005 fd4e 	bl	80078d4 <lcd_print>
 8001e38:	e031      	b.n	8001e9e <menu+0xc02>
 8001e3a:	bf00      	nop
 8001e3c:	20000221 	.word	0x20000221
 8001e40:	0800cec8 	.word	0x0800cec8
 8001e44:	40010800 	.word	0x40010800
 8001e48:	2000022f 	.word	0x2000022f
 8001e4c:	2000020f 	.word	0x2000020f
 8001e50:	20000201 	.word	0x20000201
 8001e54:	2000012c 	.word	0x2000012c
 8001e58:	20000206 	.word	0x20000206
 8001e5c:	2000022c 	.word	0x2000022c
 8001e60:	20000200 	.word	0x20000200
 8001e64:	0800ced8 	.word	0x0800ced8
 8001e68:	0800ceec 	.word	0x0800ceec
 8001e6c:	20000204 	.word	0x20000204
 8001e70:	0800cf00 	.word	0x0800cf00
 8001e74:	0800cf14 	.word	0x0800cf14
 8001e78:	0800cf28 	.word	0x0800cf28
 8001e7c:	0800cf38 	.word	0x0800cf38
 8001e80:	0800cf4c 	.word	0x0800cf4c
 8001e84:	20000205 	.word	0x20000205
 8001e88:	0800cf60 	.word	0x0800cf60
			} else if(dilSecim == 1) {
 8001e8c:	4b92      	ldr	r3, [pc, #584]	; (80020d8 <menu+0xe3c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d104      	bne.n	8001e9e <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001e94:	4a91      	ldr	r2, [pc, #580]	; (80020dc <menu+0xe40>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f005 fd1b 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	488f      	ldr	r0, [pc, #572]	; (80020e0 <menu+0xe44>)
 8001ea2:	f007 f827 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d115      	bne.n	8001ed8 <menu+0xc3c>
 8001eac:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <menu+0xe48>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f083 0301 	eor.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00e      	beq.n	8001ed8 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001eba:	4b8b      	ldr	r3, [pc, #556]	; (80020e8 <menu+0xe4c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b89      	ldr	r3, [pc, #548]	; (80020e8 <menu+0xe4c>)
 8001ec4:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <menu+0xe4c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d902      	bls.n	8001ed4 <menu+0xc38>
				yavaslamaLimit = 0;
 8001ece:	4b86      	ldr	r3, [pc, #536]	; (80020e8 <menu+0xe4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ed4:	f002 fdac 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4881      	ldr	r0, [pc, #516]	; (80020e0 <menu+0xe44>)
 8001edc:	f007 f80a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d115      	bne.n	8001f12 <menu+0xc76>
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <menu+0xe48>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ef4:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <menu+0xe4c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b7a      	ldr	r3, [pc, #488]	; (80020e8 <menu+0xe4c>)
 8001efe:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f00:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <menu+0xe4c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f08:	4b77      	ldr	r3, [pc, #476]	; (80020e8 <menu+0xe4c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f0e:	f002 fd8f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f12:	2108      	movs	r1, #8
 8001f14:	4872      	ldr	r0, [pc, #456]	; (80020e0 <menu+0xe44>)
 8001f16:	f006 ffed 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10d      	bne.n	8001f3c <menu+0xca0>
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <menu+0xe48>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <menu+0xe4c>)
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b6e      	ldr	r3, [pc, #440]	; (80020ec <menu+0xe50>)
 8001f34:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f36:	4b6e      	ldr	r3, [pc, #440]	; (80020f0 <menu+0xe54>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f3c:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <menu+0xe58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	f040 80b9 	bne.w	80020b8 <menu+0xe1c>
		if(dilSecim == 0) {
 8001f46:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <menu+0xe3c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d105      	bne.n	8001f5a <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001f4e:	4a6a      	ldr	r2, [pc, #424]	; (80020f8 <menu+0xe5c>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	2001      	movs	r0, #1
 8001f54:	f005 fcbe 	bl	80078d4 <lcd_print>
 8001f58:	e008      	b.n	8001f6c <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <menu+0xe3c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d104      	bne.n	8001f6c <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <menu+0xe60>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	2001      	movs	r0, #1
 8001f68:	f005 fcb4 	bl	80078d4 <lcd_print>
		}

		if(altLimit == 0) {
 8001f6c:	4b64      	ldr	r3, [pc, #400]	; (8002100 <menu+0xe64>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <menu+0xd00>
			if(dilSecim == 0) {
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <menu+0xe3c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001f7c:	4a61      	ldr	r2, [pc, #388]	; (8002104 <menu+0xe68>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2002      	movs	r0, #2
 8001f82:	f005 fca7 	bl	80078d4 <lcd_print>
 8001f86:	e020      	b.n	8001fca <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <menu+0xe3c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d11c      	bne.n	8001fca <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <menu+0xe6c>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	2002      	movs	r0, #2
 8001f96:	f005 fc9d 	bl	80078d4 <lcd_print>
 8001f9a:	e016      	b.n	8001fca <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f9c:	4b58      	ldr	r3, [pc, #352]	; (8002100 <menu+0xe64>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d112      	bne.n	8001fca <menu+0xd2e>
			if(dilSecim == 0){
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <menu+0xe3c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <menu+0xe70>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f005 fc8f 	bl	80078d4 <lcd_print>
 8001fb6:	e008      	b.n	8001fca <menu+0xd2e>
			} else if(dilSecim == 1){
 8001fb8:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <menu+0xe3c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d104      	bne.n	8001fca <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001fc0:	4a46      	ldr	r2, [pc, #280]	; (80020dc <menu+0xe40>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f005 fc85 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4844      	ldr	r0, [pc, #272]	; (80020e0 <menu+0xe44>)
 8001fce:	f006 ff91 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d119      	bne.n	800200c <menu+0xd70>
 8001fd8:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <menu+0xe48>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	f083 0301 	eor.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <menu+0xd70>
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <menu+0xe74>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10e      	bne.n	800200c <menu+0xd70>
			altLimit = altLimit + 1;
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <menu+0xe64>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b42      	ldr	r3, [pc, #264]	; (8002100 <menu+0xe64>)
 8001ff8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <menu+0xe64>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d902      	bls.n	8002008 <menu+0xd6c>
				altLimit = 0;
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <menu+0xe64>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002008:	f002 fd12 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800200c:	2104      	movs	r1, #4
 800200e:	4834      	ldr	r0, [pc, #208]	; (80020e0 <menu+0xe44>)
 8002010:	f006 ff70 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d119      	bne.n	800204e <menu+0xdb2>
 800201a:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <menu+0xe48>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <menu+0xdb2>
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <menu+0xe74>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10e      	bne.n	800204e <menu+0xdb2>
			altLimit = altLimit - 1;
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <menu+0xe64>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <menu+0xe64>)
 800203a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <menu+0xe64>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <menu+0xdae>
		   		altLimit = 1;
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <menu+0xe64>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204a:	f002 fcf1 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800204e:	2108      	movs	r1, #8
 8002050:	4823      	ldr	r0, [pc, #140]	; (80020e0 <menu+0xe44>)
 8002052:	f006 ff4f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d12d      	bne.n	80020b8 <menu+0xe1c>
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <menu+0xe48>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d026      	beq.n	80020b8 <menu+0xe1c>
			eepromData[5] = altLimit;
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <menu+0xe64>)
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <menu+0xe50>)
 8002070:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <menu+0xe64>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d110      	bne.n	800209c <menu+0xe00>
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <menu+0xe78>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <menu+0xdee>
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <menu+0xe78>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d108      	bne.n	800209c <menu+0xe00>
				kapiTablaAcKonum = 3;
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <menu+0xe78>)
 800208c:	2203      	movs	r2, #3
 800208e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <menu+0xe78>)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <menu+0xe50>)
 8002096:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800209a:	e00a      	b.n	80020b2 <menu+0xe16>
			} else if(altLimit == 0) {
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <menu+0xe64>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <menu+0xe16>
				platformSilindirTipi = 0;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <menu+0xe7c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <menu+0xe7c>)
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <menu+0xe50>)
 80020b0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <menu+0xe54>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <menu+0xe58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	f040 80b6 	bne.w	800222e <menu+0xf92>
		if(dilSecim == 0) {
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <menu+0xe3c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d12a      	bne.n	8002120 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <menu+0xe80>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	2001      	movs	r0, #1
 80020d0:	f005 fc00 	bl	80078d4 <lcd_print>
 80020d4:	e02d      	b.n	8002132 <menu+0xe96>
 80020d6:	bf00      	nop
 80020d8:	20000221 	.word	0x20000221
 80020dc:	0800cf74 	.word	0x0800cf74
 80020e0:	40010800 	.word	0x40010800
 80020e4:	2000022f 	.word	0x2000022f
 80020e8:	20000205 	.word	0x20000205
 80020ec:	2000012c 	.word	0x2000012c
 80020f0:	2000022c 	.word	0x2000022c
 80020f4:	20000200 	.word	0x20000200
 80020f8:	0800cf88 	.word	0x0800cf88
 80020fc:	0800cf9c 	.word	0x0800cf9c
 8002100:	20000206 	.word	0x20000206
 8002104:	0800cf00 	.word	0x0800cf00
 8002108:	0800cf14 	.word	0x0800cf14
 800210c:	0800cf60 	.word	0x0800cf60
 8002110:	20000201 	.word	0x20000201
 8002114:	2000020d 	.word	0x2000020d
 8002118:	20000213 	.word	0x20000213
 800211c:	0800cfb0 	.word	0x0800cfb0
		} else if(dilSecim == 1){
 8002120:	4b7a      	ldr	r3, [pc, #488]	; (800230c <menu+0x1070>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d104      	bne.n	8002132 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002128:	4a79      	ldr	r2, [pc, #484]	; (8002310 <menu+0x1074>)
 800212a:	2101      	movs	r1, #1
 800212c:	2001      	movs	r0, #1
 800212e:	f005 fbd1 	bl	80078d4 <lcd_print>
		}
		if(basincSalteri == 0){
 8002132:	4b78      	ldr	r3, [pc, #480]	; (8002314 <menu+0x1078>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d113      	bne.n	8002162 <menu+0xec6>
			if(dilSecim == 0) {
 800213a:	4b74      	ldr	r3, [pc, #464]	; (800230c <menu+0x1070>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002142:	4a75      	ldr	r2, [pc, #468]	; (8002318 <menu+0x107c>)
 8002144:	2101      	movs	r1, #1
 8002146:	2002      	movs	r0, #2
 8002148:	f005 fbc4 	bl	80078d4 <lcd_print>
 800214c:	e020      	b.n	8002190 <menu+0xef4>
			} else if(dilSecim == 1){
 800214e:	4b6f      	ldr	r3, [pc, #444]	; (800230c <menu+0x1070>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d11c      	bne.n	8002190 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <menu+0x1080>)
 8002158:	2101      	movs	r1, #1
 800215a:	2002      	movs	r0, #2
 800215c:	f005 fbba 	bl	80078d4 <lcd_print>
 8002160:	e016      	b.n	8002190 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002162:	4b6c      	ldr	r3, [pc, #432]	; (8002314 <menu+0x1078>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d112      	bne.n	8002190 <menu+0xef4>
			if(dilSecim == 0) {
 800216a:	4b68      	ldr	r3, [pc, #416]	; (800230c <menu+0x1070>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002172:	4a6b      	ldr	r2, [pc, #428]	; (8002320 <menu+0x1084>)
 8002174:	2101      	movs	r1, #1
 8002176:	2002      	movs	r0, #2
 8002178:	f005 fbac 	bl	80078d4 <lcd_print>
 800217c:	e008      	b.n	8002190 <menu+0xef4>
			} else if(dilSecim == 1) {
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <menu+0x1070>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d104      	bne.n	8002190 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002186:	4a67      	ldr	r2, [pc, #412]	; (8002324 <menu+0x1088>)
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f005 fba2 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002190:	2102      	movs	r1, #2
 8002192:	4865      	ldr	r0, [pc, #404]	; (8002328 <menu+0x108c>)
 8002194:	f006 feae 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d115      	bne.n	80021ca <menu+0xf2e>
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <menu+0x1090>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <menu+0x1078>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <menu+0x1078>)
 80021b6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <menu+0x1078>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d902      	bls.n	80021c6 <menu+0xf2a>
				basincSalteri = 0;
 80021c0:	4b54      	ldr	r3, [pc, #336]	; (8002314 <menu+0x1078>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021c6:	f002 fc33 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ca:	2104      	movs	r1, #4
 80021cc:	4856      	ldr	r0, [pc, #344]	; (8002328 <menu+0x108c>)
 80021ce:	f006 fe91 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d115      	bne.n	8002204 <menu+0xf68>
 80021d8:	4b54      	ldr	r3, [pc, #336]	; (800232c <menu+0x1090>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f083 0301 	eor.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80021e6:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <menu+0x1078>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b49      	ldr	r3, [pc, #292]	; (8002314 <menu+0x1078>)
 80021f0:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80021f2:	4b48      	ldr	r3, [pc, #288]	; (8002314 <menu+0x1078>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <menu+0xf64>
		   		basincSalteri = 1;
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <menu+0x1078>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002200:	f002 fc16 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002204:	2108      	movs	r1, #8
 8002206:	4848      	ldr	r0, [pc, #288]	; (8002328 <menu+0x108c>)
 8002208:	f006 fe74 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10d      	bne.n	800222e <menu+0xf92>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <menu+0x1090>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002220:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <menu+0x1078>)
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <menu+0x1094>)
 8002226:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002228:	4b42      	ldr	r3, [pc, #264]	; (8002334 <menu+0x1098>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800222e:	4b42      	ldr	r3, [pc, #264]	; (8002338 <menu+0x109c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b07      	cmp	r3, #7
 8002234:	f040 80f5 	bne.w	8002422 <menu+0x1186>
		if(dilSecim == 0) {
 8002238:	4b34      	ldr	r3, [pc, #208]	; (800230c <menu+0x1070>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002240:	4a3e      	ldr	r2, [pc, #248]	; (800233c <menu+0x10a0>)
 8002242:	2101      	movs	r1, #1
 8002244:	2001      	movs	r0, #1
 8002246:	f005 fb45 	bl	80078d4 <lcd_print>
 800224a:	e008      	b.n	800225e <menu+0xfc2>
		} else if(dilSecim == 1){
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <menu+0x1070>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d104      	bne.n	800225e <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002254:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <menu+0x10a4>)
 8002256:	2101      	movs	r1, #1
 8002258:	2001      	movs	r0, #1
 800225a:	f005 fb3b 	bl	80078d4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <menu+0x10a8>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d113      	bne.n	800228e <menu+0xff2>
			if(dilSecim == 0) {
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <menu+0x1070>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800226e:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <menu+0x107c>)
 8002270:	2101      	movs	r1, #1
 8002272:	2002      	movs	r0, #2
 8002274:	f005 fb2e 	bl	80078d4 <lcd_print>
 8002278:	e079      	b.n	800236e <menu+0x10d2>
			} else if(dilSecim == 1){
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <menu+0x1070>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d175      	bne.n	800236e <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <menu+0x1080>)
 8002284:	2101      	movs	r1, #1
 8002286:	2002      	movs	r0, #2
 8002288:	f005 fb24 	bl	80078d4 <lcd_print>
 800228c:	e06f      	b.n	800236e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <menu+0x10a8>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d113      	bne.n	80022be <menu+0x1022>
			if(dilSecim == 0) {
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <menu+0x1070>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <menu+0x10ac>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	2002      	movs	r0, #2
 80022a4:	f005 fb16 	bl	80078d4 <lcd_print>
 80022a8:	e061      	b.n	800236e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <menu+0x1070>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d15d      	bne.n	800236e <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80022b2:	4a26      	ldr	r2, [pc, #152]	; (800234c <menu+0x10b0>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2002      	movs	r0, #2
 80022b8:	f005 fb0c 	bl	80078d4 <lcd_print>
 80022bc:	e057      	b.n	800236e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <menu+0x10a8>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d113      	bne.n	80022ee <menu+0x1052>
			if(dilSecim == 0) {
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <menu+0x1070>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80022ce:	4a20      	ldr	r2, [pc, #128]	; (8002350 <menu+0x10b4>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	2002      	movs	r0, #2
 80022d4:	f005 fafe 	bl	80078d4 <lcd_print>
 80022d8:	e049      	b.n	800236e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <menu+0x1070>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d145      	bne.n	800236e <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <menu+0x10b8>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f005 faf4 	bl	80078d4 <lcd_print>
 80022ec:	e03f      	b.n	800236e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <menu+0x10a8>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d13b      	bne.n	800236e <menu+0x10d2>
			if(dilSecim == 0) {
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <menu+0x1070>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d12e      	bne.n	800235c <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <menu+0x10bc>)
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f005 fae6 	bl	80078d4 <lcd_print>
 8002308:	e031      	b.n	800236e <menu+0x10d2>
 800230a:	bf00      	nop
 800230c:	20000221 	.word	0x20000221
 8002310:	0800cfc0 	.word	0x0800cfc0
 8002314:	20000207 	.word	0x20000207
 8002318:	0800cf00 	.word	0x0800cf00
 800231c:	0800cf14 	.word	0x0800cf14
 8002320:	0800cf60 	.word	0x0800cf60
 8002324:	0800cf74 	.word	0x0800cf74
 8002328:	40010800 	.word	0x40010800
 800232c:	2000022f 	.word	0x2000022f
 8002330:	2000012c 	.word	0x2000012c
 8002334:	2000022c 	.word	0x2000022c
 8002338:	20000200 	.word	0x20000200
 800233c:	0800cfd0 	.word	0x0800cfd0
 8002340:	0800cfe4 	.word	0x0800cfe4
 8002344:	20000208 	.word	0x20000208
 8002348:	0800cff8 	.word	0x0800cff8
 800234c:	0800d00c 	.word	0x0800d00c
 8002350:	0800d020 	.word	0x0800d020
 8002354:	0800d034 	.word	0x0800d034
 8002358:	0800d048 	.word	0x0800d048
			} else if(dilSecim == 1){
 800235c:	4b99      	ldr	r3, [pc, #612]	; (80025c4 <menu+0x1328>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d104      	bne.n	800236e <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002364:	4a98      	ldr	r2, [pc, #608]	; (80025c8 <menu+0x132c>)
 8002366:	2101      	movs	r1, #1
 8002368:	2002      	movs	r0, #2
 800236a:	f005 fab3 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800236e:	2102      	movs	r1, #2
 8002370:	4896      	ldr	r0, [pc, #600]	; (80025cc <menu+0x1330>)
 8002372:	f006 fdbf 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002376:	4603      	mov	r3, r0
 8002378:	2b01      	cmp	r3, #1
 800237a:	d115      	bne.n	80023a8 <menu+0x110c>
 800237c:	4b94      	ldr	r3, [pc, #592]	; (80025d0 <menu+0x1334>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f083 0301 	eor.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00e      	beq.n	80023a8 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800238a:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <menu+0x1338>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b90      	ldr	r3, [pc, #576]	; (80025d4 <menu+0x1338>)
 8002394:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002396:	4b8f      	ldr	r3, [pc, #572]	; (80025d4 <menu+0x1338>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d902      	bls.n	80023a4 <menu+0x1108>
				kapiSecimleri = 0;
 800239e:	4b8d      	ldr	r3, [pc, #564]	; (80025d4 <menu+0x1338>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023a4:	f002 fb44 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023a8:	2104      	movs	r1, #4
 80023aa:	4888      	ldr	r0, [pc, #544]	; (80025cc <menu+0x1330>)
 80023ac:	f006 fda2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d115      	bne.n	80023e2 <menu+0x1146>
 80023b6:	4b86      	ldr	r3, [pc, #536]	; (80025d0 <menu+0x1334>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f083 0301 	eor.w	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80023c4:	4b83      	ldr	r3, [pc, #524]	; (80025d4 <menu+0x1338>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <menu+0x1338>)
 80023ce:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023d0:	4b80      	ldr	r3, [pc, #512]	; (80025d4 <menu+0x1338>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d902      	bls.n	80023de <menu+0x1142>
		   		kapiSecimleri = 3;
 80023d8:	4b7e      	ldr	r3, [pc, #504]	; (80025d4 <menu+0x1338>)
 80023da:	2203      	movs	r2, #3
 80023dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023de:	f002 fb27 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e2:	2108      	movs	r1, #8
 80023e4:	4879      	ldr	r0, [pc, #484]	; (80025cc <menu+0x1330>)
 80023e6:	f006 fd85 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d118      	bne.n	8002422 <menu+0x1186>
 80023f0:	4b77      	ldr	r3, [pc, #476]	; (80025d0 <menu+0x1334>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d011      	beq.n	8002422 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80023fe:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <menu+0x1338>)
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	4b75      	ldr	r3, [pc, #468]	; (80025d8 <menu+0x133c>)
 8002404:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <menu+0x1338>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <menu+0x1180>
				altLimit = 1;
 800240e:	4b73      	ldr	r3, [pc, #460]	; (80025dc <menu+0x1340>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002414:	4b71      	ldr	r3, [pc, #452]	; (80025dc <menu+0x1340>)
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <menu+0x133c>)
 800241a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800241c:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <menu+0x1344>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002422:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <menu+0x1348>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b08      	cmp	r3, #8
 8002428:	f040 8092 	bne.w	8002550 <menu+0x12b4>
		if(dilSecim == 0) {
 800242c:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <menu+0x1328>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002434:	4a6c      	ldr	r2, [pc, #432]	; (80025e8 <menu+0x134c>)
 8002436:	2101      	movs	r1, #1
 8002438:	2001      	movs	r0, #1
 800243a:	f005 fa4b 	bl	80078d4 <lcd_print>
 800243e:	e008      	b.n	8002452 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002440:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <menu+0x1328>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d104      	bne.n	8002452 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002448:	4a68      	ldr	r2, [pc, #416]	; (80025ec <menu+0x1350>)
 800244a:	2101      	movs	r1, #1
 800244c:	2001      	movs	r0, #1
 800244e:	f005 fa41 	bl	80078d4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <menu+0x1354>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <menu+0x11e6>
			if(dilSecim == 0) {
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <menu+0x1328>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002462:	4a64      	ldr	r2, [pc, #400]	; (80025f4 <menu+0x1358>)
 8002464:	2101      	movs	r1, #1
 8002466:	2002      	movs	r0, #2
 8002468:	f005 fa34 	bl	80078d4 <lcd_print>
 800246c:	e020      	b.n	80024b0 <menu+0x1214>
			} else if(dilSecim == 1) {
 800246e:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <menu+0x1328>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d11c      	bne.n	80024b0 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002476:	4a60      	ldr	r2, [pc, #384]	; (80025f8 <menu+0x135c>)
 8002478:	2101      	movs	r1, #1
 800247a:	2002      	movs	r0, #2
 800247c:	f005 fa2a 	bl	80078d4 <lcd_print>
 8002480:	e016      	b.n	80024b0 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002482:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <menu+0x1354>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d112      	bne.n	80024b0 <menu+0x1214>
			if(dilSecim == 0){
 800248a:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <menu+0x1328>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002492:	4a5a      	ldr	r2, [pc, #360]	; (80025fc <menu+0x1360>)
 8002494:	2101      	movs	r1, #1
 8002496:	2002      	movs	r0, #2
 8002498:	f005 fa1c 	bl	80078d4 <lcd_print>
 800249c:	e008      	b.n	80024b0 <menu+0x1214>
			} else if(dilSecim == 1){
 800249e:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <menu+0x1328>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d104      	bne.n	80024b0 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80024a6:	4a56      	ldr	r2, [pc, #344]	; (8002600 <menu+0x1364>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	2002      	movs	r0, #2
 80024ac:	f005 fa12 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b0:	2102      	movs	r1, #2
 80024b2:	4846      	ldr	r0, [pc, #280]	; (80025cc <menu+0x1330>)
 80024b4:	f006 fd1e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d115      	bne.n	80024ea <menu+0x124e>
 80024be:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <menu+0x1334>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	f083 0301 	eor.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <menu+0x1354>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <menu+0x1354>)
 80024d6:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <menu+0x1354>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d902      	bls.n	80024e6 <menu+0x124a>
				kapiAcTipi = 0;
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <menu+0x1354>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024e6:	f002 faa3 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ea:	2104      	movs	r1, #4
 80024ec:	4837      	ldr	r0, [pc, #220]	; (80025cc <menu+0x1330>)
 80024ee:	f006 fd01 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d115      	bne.n	8002524 <menu+0x1288>
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <menu+0x1334>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00e      	beq.n	8002524 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <menu+0x1354>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <menu+0x1354>)
 8002510:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002512:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <menu+0x1354>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <menu+0x1284>
		   		kapiAcTipi = 1;
 800251a:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <menu+0x1354>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002520:	f002 fa86 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002524:	2108      	movs	r1, #8
 8002526:	4829      	ldr	r0, [pc, #164]	; (80025cc <menu+0x1330>)
 8002528:	f006 fce4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800252c:	4603      	mov	r3, r0
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10e      	bne.n	8002550 <menu+0x12b4>
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <menu+0x1334>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	f083 0301 	eor.w	r3, r3, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <menu+0x1354>)
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <menu+0x133c>)
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <menu+0x1344>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <menu+0x1348>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b09      	cmp	r3, #9
 8002556:	f040 80b9 	bne.w	80026cc <menu+0x1430>
		if(dilSecim == 0){
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <menu+0x1328>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002562:	4a28      	ldr	r2, [pc, #160]	; (8002604 <menu+0x1368>)
 8002564:	2101      	movs	r1, #1
 8002566:	2001      	movs	r0, #1
 8002568:	f005 f9b4 	bl	80078d4 <lcd_print>
 800256c:	e008      	b.n	8002580 <menu+0x12e4>
		} else if(dilSecim == 1) {
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <menu+0x1328>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d104      	bne.n	8002580 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002576:	4a24      	ldr	r2, [pc, #144]	; (8002608 <menu+0x136c>)
 8002578:	2101      	movs	r1, #1
 800257a:	2001      	movs	r0, #1
 800257c:	f005 f9aa 	bl	80078d4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <menu+0x1370>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002588:	4a21      	ldr	r2, [pc, #132]	; (8002610 <menu+0x1374>)
 800258a:	2101      	movs	r1, #1
 800258c:	2002      	movs	r0, #2
 800258e:	f005 f9a1 	bl	80078d4 <lcd_print>
 8002592:	e04c      	b.n	800262e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <menu+0x1370>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d13f      	bne.n	800261c <menu+0x1380>
			if(dilSecim == 0){
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <menu+0x1328>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <menu+0x1378>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	2002      	movs	r0, #2
 80025aa:	f005 f993 	bl	80078d4 <lcd_print>
 80025ae:	e03e      	b.n	800262e <menu+0x1392>
			} else if(dilSecim == 1) {
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <menu+0x1328>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d13a      	bne.n	800262e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80025b8:	4a17      	ldr	r2, [pc, #92]	; (8002618 <menu+0x137c>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f005 f989 	bl	80078d4 <lcd_print>
 80025c2:	e034      	b.n	800262e <menu+0x1392>
 80025c4:	20000221 	.word	0x20000221
 80025c8:	0800d05c 	.word	0x0800d05c
 80025cc:	40010800 	.word	0x40010800
 80025d0:	2000022f 	.word	0x2000022f
 80025d4:	20000208 	.word	0x20000208
 80025d8:	2000012c 	.word	0x2000012c
 80025dc:	20000206 	.word	0x20000206
 80025e0:	2000022c 	.word	0x2000022c
 80025e4:	20000200 	.word	0x20000200
 80025e8:	0800d070 	.word	0x0800d070
 80025ec:	0800d084 	.word	0x0800d084
 80025f0:	2000020c 	.word	0x2000020c
 80025f4:	0800d098 	.word	0x0800d098
 80025f8:	0800d0a8 	.word	0x0800d0a8
 80025fc:	0800d0b8 	.word	0x0800d0b8
 8002600:	0800d0cc 	.word	0x0800d0cc
 8002604:	0800d0e0 	.word	0x0800d0e0
 8002608:	0800d0f4 	.word	0x0800d0f4
 800260c:	20000209 	.word	0x20000209
 8002610:	0800d108 	.word	0x0800d108
 8002614:	0800d11c 	.word	0x0800d11c
 8002618:	0800d12c 	.word	0x0800d12c
			}
		} else if(kapi1Tip == 2) {
 800261c:	4b8a      	ldr	r3, [pc, #552]	; (8002848 <menu+0x15ac>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d104      	bne.n	800262e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002624:	4a89      	ldr	r2, [pc, #548]	; (800284c <menu+0x15b0>)
 8002626:	2101      	movs	r1, #1
 8002628:	2002      	movs	r0, #2
 800262a:	f005 f953 	bl	80078d4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800262e:	2102      	movs	r1, #2
 8002630:	4887      	ldr	r0, [pc, #540]	; (8002850 <menu+0x15b4>)
 8002632:	f006 fc5f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d115      	bne.n	8002668 <menu+0x13cc>
 800263c:	4b85      	ldr	r3, [pc, #532]	; (8002854 <menu+0x15b8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <menu+0x15ac>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <menu+0x15ac>)
 8002654:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <menu+0x15ac>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d902      	bls.n	8002664 <menu+0x13c8>
				kapi1Tip = 0;
 800265e:	4b7a      	ldr	r3, [pc, #488]	; (8002848 <menu+0x15ac>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002664:	f002 f9e4 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002668:	2104      	movs	r1, #4
 800266a:	4879      	ldr	r0, [pc, #484]	; (8002850 <menu+0x15b4>)
 800266c:	f006 fc42 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d115      	bne.n	80026a2 <menu+0x1406>
 8002676:	4b77      	ldr	r3, [pc, #476]	; (8002854 <menu+0x15b8>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002684:	4b70      	ldr	r3, [pc, #448]	; (8002848 <menu+0x15ac>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3b01      	subs	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b6e      	ldr	r3, [pc, #440]	; (8002848 <menu+0x15ac>)
 800268e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002690:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <menu+0x15ac>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d902      	bls.n	800269e <menu+0x1402>
		   		kapi1Tip = 2;
 8002698:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <menu+0x15ac>)
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800269e:	f002 f9c7 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a2:	2108      	movs	r1, #8
 80026a4:	486a      	ldr	r0, [pc, #424]	; (8002850 <menu+0x15b4>)
 80026a6:	f006 fc25 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10d      	bne.n	80026cc <menu+0x1430>
 80026b0:	4b68      	ldr	r3, [pc, #416]	; (8002854 <menu+0x15b8>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80026be:	4b62      	ldr	r3, [pc, #392]	; (8002848 <menu+0x15ac>)
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <menu+0x15bc>)
 80026c4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <menu+0x15c0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80026cc:	4b64      	ldr	r3, [pc, #400]	; (8002860 <menu+0x15c4>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b0a      	cmp	r3, #10
 80026d2:	d17f      	bne.n	80027d4 <menu+0x1538>
		if(dilSecim == 0) {
 80026d4:	4b63      	ldr	r3, [pc, #396]	; (8002864 <menu+0x15c8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80026dc:	4a62      	ldr	r2, [pc, #392]	; (8002868 <menu+0x15cc>)
 80026de:	2101      	movs	r1, #1
 80026e0:	2001      	movs	r0, #1
 80026e2:	f005 f8f7 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80026e6:	4a61      	ldr	r2, [pc, #388]	; (800286c <menu+0x15d0>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	2002      	movs	r0, #2
 80026ec:	f005 f8f2 	bl	80078d4 <lcd_print>
 80026f0:	e00d      	b.n	800270e <menu+0x1472>
		} else if(dilSecim == 1) {
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <menu+0x15c8>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d109      	bne.n	800270e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80026fa:	4a5d      	ldr	r2, [pc, #372]	; (8002870 <menu+0x15d4>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2001      	movs	r0, #1
 8002700:	f005 f8e8 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002704:	4a5b      	ldr	r2, [pc, #364]	; (8002874 <menu+0x15d8>)
 8002706:	2101      	movs	r1, #1
 8002708:	2002      	movs	r0, #2
 800270a:	f005 f8e3 	bl	80078d4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <menu+0x15dc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	220a      	movs	r2, #10
 8002714:	4959      	ldr	r1, [pc, #356]	; (800287c <menu+0x15e0>)
 8002716:	4618      	mov	r0, r3
 8002718:	f009 fc18 	bl	800bf4c <itoa>
		lcd_print(2,16,snum);
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <menu+0x15e0>)
 800271e:	2110      	movs	r1, #16
 8002720:	2002      	movs	r0, #2
 8002722:	f005 f8d7 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002726:	2102      	movs	r1, #2
 8002728:	4849      	ldr	r0, [pc, #292]	; (8002850 <menu+0x15b4>)
 800272a:	f006 fbe3 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d119      	bne.n	8002768 <menu+0x14cc>
 8002734:	4b47      	ldr	r3, [pc, #284]	; (8002854 <menu+0x15b8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <menu+0x14cc>
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <menu+0x15ac>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <menu+0x15dc>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <menu+0x15dc>)
 8002754:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002756:	4b48      	ldr	r3, [pc, #288]	; (8002878 <menu+0x15dc>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d902      	bls.n	8002764 <menu+0x14c8>
				kapi1AcSure = 0;
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <menu+0x15dc>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002764:	f002 f964 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002768:	2104      	movs	r1, #4
 800276a:	4839      	ldr	r0, [pc, #228]	; (8002850 <menu+0x15b4>)
 800276c:	f006 fbc2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d119      	bne.n	80027aa <menu+0x150e>
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <menu+0x15b8>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d012      	beq.n	80027aa <menu+0x150e>
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <menu+0x15ac>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10e      	bne.n	80027aa <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 800278c:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <menu+0x15dc>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b38      	ldr	r3, [pc, #224]	; (8002878 <menu+0x15dc>)
 8002796:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <menu+0x15dc>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d902      	bls.n	80027a6 <menu+0x150a>
		   		kapi1AcSure = 5;
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <menu+0x15dc>)
 80027a2:	2205      	movs	r2, #5
 80027a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a6:	f002 f943 	bl	8004a30 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027aa:	2108      	movs	r1, #8
 80027ac:	4828      	ldr	r0, [pc, #160]	; (8002850 <menu+0x15b4>)
 80027ae:	f006 fba1 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10d      	bne.n	80027d4 <menu+0x1538>
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <menu+0x15b8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <menu+0x15dc>)
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <menu+0x15bc>)
 80027cc:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <menu+0x15c0>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <menu+0x15c4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b0b      	cmp	r3, #11
 80027da:	f040 80b5 	bne.w	8002948 <menu+0x16ac>
		if(dilSecim == 0) {
 80027de:	4b21      	ldr	r3, [pc, #132]	; (8002864 <menu+0x15c8>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80027e6:	4a26      	ldr	r2, [pc, #152]	; (8002880 <menu+0x15e4>)
 80027e8:	2101      	movs	r1, #1
 80027ea:	2001      	movs	r0, #1
 80027ec:	f005 f872 	bl	80078d4 <lcd_print>
 80027f0:	e008      	b.n	8002804 <menu+0x1568>
		} else if(dilSecim == 1) {
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <menu+0x15c8>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d104      	bne.n	8002804 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <menu+0x15e8>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2001      	movs	r0, #1
 8002800:	f005 f868 	bl	80078d4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <menu+0x15ec>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <menu+0x15f0>)
 800280e:	2101      	movs	r1, #1
 8002810:	2002      	movs	r0, #2
 8002812:	f005 f85f 	bl	80078d4 <lcd_print>
 8002816:	e048      	b.n	80028aa <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <menu+0x15ec>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d13b      	bne.n	8002898 <menu+0x15fc>
			if(dilSecim == 0) {
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <menu+0x15c8>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <menu+0x15f4>)
 800282a:	2101      	movs	r1, #1
 800282c:	2002      	movs	r0, #2
 800282e:	f005 f851 	bl	80078d4 <lcd_print>
 8002832:	e03a      	b.n	80028aa <menu+0x160e>
			} else if(dilSecim == 1) {
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <menu+0x15c8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d136      	bne.n	80028aa <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <menu+0x15f8>)
 800283e:	2101      	movs	r1, #1
 8002840:	2002      	movs	r0, #2
 8002842:	f005 f847 	bl	80078d4 <lcd_print>
 8002846:	e030      	b.n	80028aa <menu+0x160e>
 8002848:	20000209 	.word	0x20000209
 800284c:	0800d140 	.word	0x0800d140
 8002850:	40010800 	.word	0x40010800
 8002854:	2000022f 	.word	0x2000022f
 8002858:	2000012c 	.word	0x2000012c
 800285c:	2000022c 	.word	0x2000022c
 8002860:	20000200 	.word	0x20000200
 8002864:	20000221 	.word	0x20000221
 8002868:	0800d150 	.word	0x0800d150
 800286c:	0800d164 	.word	0x0800d164
 8002870:	0800d174 	.word	0x0800d174
 8002874:	0800d188 	.word	0x0800d188
 8002878:	20000219 	.word	0x20000219
 800287c:	2000019c 	.word	0x2000019c
 8002880:	0800d198 	.word	0x0800d198
 8002884:	0800d1ac 	.word	0x0800d1ac
 8002888:	2000020a 	.word	0x2000020a
 800288c:	0800d108 	.word	0x0800d108
 8002890:	0800d11c 	.word	0x0800d11c
 8002894:	0800d12c 	.word	0x0800d12c
			}
		} else if(kapi2Tip == 2) {
 8002898:	4b8a      	ldr	r3, [pc, #552]	; (8002ac4 <menu+0x1828>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d104      	bne.n	80028aa <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80028a0:	4a89      	ldr	r2, [pc, #548]	; (8002ac8 <menu+0x182c>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	2002      	movs	r0, #2
 80028a6:	f005 f815 	bl	80078d4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028aa:	2102      	movs	r1, #2
 80028ac:	4887      	ldr	r0, [pc, #540]	; (8002acc <menu+0x1830>)
 80028ae:	f006 fb21 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d115      	bne.n	80028e4 <menu+0x1648>
 80028b8:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <menu+0x1834>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f083 0301 	eor.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00e      	beq.n	80028e4 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80028c6:	4b7f      	ldr	r3, [pc, #508]	; (8002ac4 <menu+0x1828>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4b7d      	ldr	r3, [pc, #500]	; (8002ac4 <menu+0x1828>)
 80028d0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <menu+0x1828>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <menu+0x1644>
				kapi2Tip = 0;
 80028da:	4b7a      	ldr	r3, [pc, #488]	; (8002ac4 <menu+0x1828>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028e0:	f002 f8a6 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028e4:	2104      	movs	r1, #4
 80028e6:	4879      	ldr	r0, [pc, #484]	; (8002acc <menu+0x1830>)
 80028e8:	f006 fb04 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d115      	bne.n	800291e <menu+0x1682>
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <menu+0x1834>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f083 0301 	eor.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002900:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <menu+0x1828>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3b01      	subs	r3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <menu+0x1828>)
 800290a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800290c:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <menu+0x1828>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d902      	bls.n	800291a <menu+0x167e>
		   		kapi2Tip = 2;
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <menu+0x1828>)
 8002916:	2202      	movs	r2, #2
 8002918:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800291a:	f002 f889 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800291e:	2108      	movs	r1, #8
 8002920:	486a      	ldr	r0, [pc, #424]	; (8002acc <menu+0x1830>)
 8002922:	f006 fae7 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10d      	bne.n	8002948 <menu+0x16ac>
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <menu+0x1834>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	f083 0301 	eor.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <menu+0x1828>)
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <menu+0x1838>)
 8002940:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <menu+0x183c>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002948:	4b64      	ldr	r3, [pc, #400]	; (8002adc <menu+0x1840>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d17f      	bne.n	8002a50 <menu+0x17b4>
		if(dilSecim == 0) {
 8002950:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <menu+0x1844>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002958:	4a62      	ldr	r2, [pc, #392]	; (8002ae4 <menu+0x1848>)
 800295a:	2101      	movs	r1, #1
 800295c:	2001      	movs	r0, #1
 800295e:	f004 ffb9 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002962:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <menu+0x184c>)
 8002964:	2101      	movs	r1, #1
 8002966:	2002      	movs	r0, #2
 8002968:	f004 ffb4 	bl	80078d4 <lcd_print>
 800296c:	e00d      	b.n	800298a <menu+0x16ee>
		} else if(dilSecim == 1) {
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <menu+0x1844>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d109      	bne.n	800298a <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002976:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <menu+0x1850>)
 8002978:	2101      	movs	r1, #1
 800297a:	2001      	movs	r0, #1
 800297c:	f004 ffaa 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002980:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <menu+0x1854>)
 8002982:	2101      	movs	r1, #1
 8002984:	2002      	movs	r0, #2
 8002986:	f004 ffa5 	bl	80078d4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800298a:	4b5a      	ldr	r3, [pc, #360]	; (8002af4 <menu+0x1858>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	220a      	movs	r2, #10
 8002990:	4959      	ldr	r1, [pc, #356]	; (8002af8 <menu+0x185c>)
 8002992:	4618      	mov	r0, r3
 8002994:	f009 fada 	bl	800bf4c <itoa>
		lcd_print(2,16,snum);
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <menu+0x185c>)
 800299a:	2110      	movs	r1, #16
 800299c:	2002      	movs	r0, #2
 800299e:	f004 ff99 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029a2:	2102      	movs	r1, #2
 80029a4:	4849      	ldr	r0, [pc, #292]	; (8002acc <menu+0x1830>)
 80029a6:	f006 faa5 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d119      	bne.n	80029e4 <menu+0x1748>
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <menu+0x1834>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <menu+0x1748>
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <menu+0x1828>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80029c6:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <menu+0x1858>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <menu+0x1858>)
 80029d0:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80029d2:	4b48      	ldr	r3, [pc, #288]	; (8002af4 <menu+0x1858>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d902      	bls.n	80029e0 <menu+0x1744>
				kapi2AcSure = 0;
 80029da:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <menu+0x1858>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029e0:	f002 f826 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029e4:	2104      	movs	r1, #4
 80029e6:	4839      	ldr	r0, [pc, #228]	; (8002acc <menu+0x1830>)
 80029e8:	f006 fa84 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d119      	bne.n	8002a26 <menu+0x178a>
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <menu+0x1834>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f083 0301 	eor.w	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <menu+0x178a>
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <menu+0x1828>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10e      	bne.n	8002a26 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <menu+0x1858>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <menu+0x1858>)
 8002a12:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <menu+0x1858>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d902      	bls.n	8002a22 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a1c:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <menu+0x1858>)
 8002a1e:	2205      	movs	r2, #5
 8002a20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a22:	f002 f805 	bl	8004a30 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a26:	2108      	movs	r1, #8
 8002a28:	4828      	ldr	r0, [pc, #160]	; (8002acc <menu+0x1830>)
 8002a2a:	f006 fa63 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10d      	bne.n	8002a50 <menu+0x17b4>
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <menu+0x1834>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <menu+0x1858>)
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <menu+0x1838>)
 8002a48:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <menu+0x183c>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <menu+0x1840>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b0d      	cmp	r3, #13
 8002a56:	f040 80b5 	bne.w	8002bc4 <menu+0x1928>
		if(dilSecim == 0) {
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <menu+0x1844>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002a62:	4a26      	ldr	r2, [pc, #152]	; (8002afc <menu+0x1860>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2001      	movs	r0, #1
 8002a68:	f004 ff34 	bl	80078d4 <lcd_print>
 8002a6c:	e008      	b.n	8002a80 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <menu+0x1844>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d104      	bne.n	8002a80 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002a76:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <menu+0x1864>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f004 ff2a 	bl	80078d4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <menu+0x1868>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <menu+0x186c>)
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f004 ff21 	bl	80078d4 <lcd_print>
 8002a92:	e048      	b.n	8002b26 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <menu+0x1868>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d13b      	bne.n	8002b14 <menu+0x1878>
			if(dilSecim == 0) {
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <menu+0x1844>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <menu+0x1870>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f004 ff13 	bl	80078d4 <lcd_print>
 8002aae:	e03a      	b.n	8002b26 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <menu+0x1844>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d136      	bne.n	8002b26 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <menu+0x1874>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	2002      	movs	r0, #2
 8002abe:	f004 ff09 	bl	80078d4 <lcd_print>
 8002ac2:	e030      	b.n	8002b26 <menu+0x188a>
 8002ac4:	2000020a 	.word	0x2000020a
 8002ac8:	0800d140 	.word	0x0800d140
 8002acc:	40010800 	.word	0x40010800
 8002ad0:	2000022f 	.word	0x2000022f
 8002ad4:	2000012c 	.word	0x2000012c
 8002ad8:	2000022c 	.word	0x2000022c
 8002adc:	20000200 	.word	0x20000200
 8002ae0:	20000221 	.word	0x20000221
 8002ae4:	0800d1c0 	.word	0x0800d1c0
 8002ae8:	0800d164 	.word	0x0800d164
 8002aec:	0800d1d4 	.word	0x0800d1d4
 8002af0:	0800d188 	.word	0x0800d188
 8002af4:	2000021a 	.word	0x2000021a
 8002af8:	2000019c 	.word	0x2000019c
 8002afc:	0800d1e8 	.word	0x0800d1e8
 8002b00:	0800d1fc 	.word	0x0800d1fc
 8002b04:	2000020b 	.word	0x2000020b
 8002b08:	0800d108 	.word	0x0800d108
 8002b0c:	0800d11c 	.word	0x0800d11c
 8002b10:	0800d12c 	.word	0x0800d12c
			}
		} else if(kapitablaTip == 2) {
 8002b14:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <menu+0x19e8>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d104      	bne.n	8002b26 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b1c:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <menu+0x19ec>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	2002      	movs	r0, #2
 8002b22:	f004 fed7 	bl	80078d4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b26:	2102      	movs	r1, #2
 8002b28:	4858      	ldr	r0, [pc, #352]	; (8002c8c <menu+0x19f0>)
 8002b2a:	f006 f9e3 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d115      	bne.n	8002b60 <menu+0x18c4>
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <menu+0x19f4>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <menu+0x19e8>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <menu+0x19e8>)
 8002b4c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <menu+0x19e8>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d902      	bls.n	8002b5c <menu+0x18c0>
				kapitablaTip = 0;
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <menu+0x19e8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b5c:	f001 ff68 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b60:	2104      	movs	r1, #4
 8002b62:	484a      	ldr	r0, [pc, #296]	; (8002c8c <menu+0x19f0>)
 8002b64:	f006 f9c6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d115      	bne.n	8002b9a <menu+0x18fe>
 8002b6e:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <menu+0x19f4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002b7c:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <menu+0x19e8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <menu+0x19e8>)
 8002b86:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <menu+0x19e8>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d902      	bls.n	8002b96 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002b90:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <menu+0x19e8>)
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b96:	f001 ff4b 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	483b      	ldr	r0, [pc, #236]	; (8002c8c <menu+0x19f0>)
 8002b9e:	f006 f9a9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10d      	bne.n	8002bc4 <menu+0x1928>
 8002ba8:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <menu+0x19f4>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <menu+0x19e8>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <menu+0x19f8>)
 8002bbc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <menu+0x19fc>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <menu+0x1a00>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b0e      	cmp	r3, #14
 8002bca:	f040 80f2 	bne.w	8002db2 <menu+0x1b16>
		if(dilSecim == 0) {
 8002bce:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <menu+0x1a04>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002bd6:	4a33      	ldr	r2, [pc, #204]	; (8002ca4 <menu+0x1a08>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f004 fe7a 	bl	80078d4 <lcd_print>
 8002be0:	e008      	b.n	8002bf4 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <menu+0x1a04>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002bea:	4a2f      	ldr	r2, [pc, #188]	; (8002ca8 <menu+0x1a0c>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f004 fe70 	bl	80078d4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <menu+0x1a10>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d113      	bne.n	8002c24 <menu+0x1988>
			if(dilSecim == 0){
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <menu+0x1a04>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <menu+0x1a14>)
 8002c06:	2101      	movs	r1, #1
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f004 fe63 	bl	80078d4 <lcd_print>
 8002c0e:	e071      	b.n	8002cf4 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <menu+0x1a04>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d16d      	bne.n	8002cf4 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <menu+0x1a18>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f004 fe59 	bl	80078d4 <lcd_print>
 8002c22:	e067      	b.n	8002cf4 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <menu+0x1a10>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d112      	bne.n	8002c52 <menu+0x19b6>
			if(dilSecim == 0){
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <menu+0x1a04>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002c34:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <menu+0x1a1c>)
 8002c36:	2101      	movs	r1, #1
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f004 fe4b 	bl	80078d4 <lcd_print>
			}
			if(dilSecim == 1){
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <menu+0x1a04>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d156      	bne.n	8002cf4 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <menu+0x1a20>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f004 fe42 	bl	80078d4 <lcd_print>
 8002c50:	e050      	b.n	8002cf4 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <menu+0x1a10>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d136      	bne.n	8002cc8 <menu+0x1a2c>
			if(dilSecim == 0){
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <menu+0x1a04>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <menu+0x1a24>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2002      	movs	r0, #2
 8002c68:	f004 fe34 	bl	80078d4 <lcd_print>
 8002c6c:	e042      	b.n	8002cf4 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <menu+0x1a04>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d13e      	bne.n	8002cf4 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <menu+0x1a28>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f004 fe2a 	bl	80078d4 <lcd_print>
 8002c80:	e038      	b.n	8002cf4 <menu+0x1a58>
 8002c82:	bf00      	nop
 8002c84:	2000020b 	.word	0x2000020b
 8002c88:	0800d140 	.word	0x0800d140
 8002c8c:	40010800 	.word	0x40010800
 8002c90:	2000022f 	.word	0x2000022f
 8002c94:	2000012c 	.word	0x2000012c
 8002c98:	2000022c 	.word	0x2000022c
 8002c9c:	20000200 	.word	0x20000200
 8002ca0:	20000221 	.word	0x20000221
 8002ca4:	0800d210 	.word	0x0800d210
 8002ca8:	0800d224 	.word	0x0800d224
 8002cac:	2000020d 	.word	0x2000020d
 8002cb0:	0800d238 	.word	0x0800d238
 8002cb4:	0800d248 	.word	0x0800d248
 8002cb8:	0800d258 	.word	0x0800d258
 8002cbc:	0800d268 	.word	0x0800d268
 8002cc0:	0800d278 	.word	0x0800d278
 8002cc4:	0800d28c 	.word	0x0800d28c
			}
		} else if(kapiTablaAcKonum == 3) {
 8002cc8:	4b9b      	ldr	r3, [pc, #620]	; (8002f38 <menu+0x1c9c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d111      	bne.n	8002cf4 <menu+0x1a58>
			if(dilSecim == 0) {
 8002cd0:	4b9a      	ldr	r3, [pc, #616]	; (8002f3c <menu+0x1ca0>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002cd8:	4a99      	ldr	r2, [pc, #612]	; (8002f40 <menu+0x1ca4>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f004 fdf9 	bl	80078d4 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ce2:	4b96      	ldr	r3, [pc, #600]	; (8002f3c <menu+0x1ca0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d104      	bne.n	8002cf4 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002cea:	4a96      	ldr	r2, [pc, #600]	; (8002f44 <menu+0x1ca8>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	2002      	movs	r0, #2
 8002cf0:	f004 fdf0 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4894      	ldr	r0, [pc, #592]	; (8002f48 <menu+0x1cac>)
 8002cf8:	f006 f8fc 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d115      	bne.n	8002d2e <menu+0x1a92>
 8002d02:	4b92      	ldr	r3, [pc, #584]	; (8002f4c <menu+0x1cb0>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d10:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <menu+0x1c9c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b87      	ldr	r3, [pc, #540]	; (8002f38 <menu+0x1c9c>)
 8002d1a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d1c:	4b86      	ldr	r3, [pc, #536]	; (8002f38 <menu+0x1c9c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d902      	bls.n	8002d2a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002d24:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <menu+0x1c9c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d2a:	f001 fe81 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2e:	2104      	movs	r1, #4
 8002d30:	4885      	ldr	r0, [pc, #532]	; (8002f48 <menu+0x1cac>)
 8002d32:	f006 f8df 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d115      	bne.n	8002d68 <menu+0x1acc>
 8002d3c:	4b83      	ldr	r3, [pc, #524]	; (8002f4c <menu+0x1cb0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <menu+0x1c9c>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <menu+0x1c9c>)
 8002d54:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002d56:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <menu+0x1c9c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d902      	bls.n	8002d64 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <menu+0x1c9c>)
 8002d60:	2202      	movs	r2, #2
 8002d62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d64:	f001 fe64 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d68:	2108      	movs	r1, #8
 8002d6a:	4877      	ldr	r0, [pc, #476]	; (8002f48 <menu+0x1cac>)
 8002d6c:	f006 f8c2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d11d      	bne.n	8002db2 <menu+0x1b16>
 8002d76:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <menu+0x1cb0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	f083 0301 	eor.w	r3, r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002d84:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <menu+0x1c9c>)
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <menu+0x1cb4>)
 8002d8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <menu+0x1c9c>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <menu+0x1b02>
 8002d96:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <menu+0x1c9c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d106      	bne.n	8002dac <menu+0x1b10>
				altLimit = 1;
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <menu+0x1cb8>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002da4:	4b6b      	ldr	r3, [pc, #428]	; (8002f54 <menu+0x1cb8>)
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <menu+0x1cb4>)
 8002daa:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <menu+0x1cbc>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <menu+0x1cc0>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	d17f      	bne.n	8002eba <menu+0x1c1e>
		if(dilSecim == 0) {
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <menu+0x1ca0>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002dc2:	4a67      	ldr	r2, [pc, #412]	; (8002f60 <menu+0x1cc4>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f004 fd84 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <menu+0x1cc8>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f004 fd7f 	bl	80078d4 <lcd_print>
 8002dd6:	e00d      	b.n	8002df4 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002dd8:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <menu+0x1ca0>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d109      	bne.n	8002df4 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <menu+0x1ccc>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2001      	movs	r0, #1
 8002de6:	f004 fd75 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002dea:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <menu+0x1cd0>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	2002      	movs	r0, #2
 8002df0:	f004 fd70 	bl	80078d4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002df4:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <menu+0x1cd4>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	220a      	movs	r2, #10
 8002dfa:	495e      	ldr	r1, [pc, #376]	; (8002f74 <menu+0x1cd8>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f009 f8a5 	bl	800bf4c <itoa>
		lcd_print(2,16,snum);
 8002e02:	4a5c      	ldr	r2, [pc, #368]	; (8002f74 <menu+0x1cd8>)
 8002e04:	2110      	movs	r1, #16
 8002e06:	2002      	movs	r0, #2
 8002e08:	f004 fd64 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	484e      	ldr	r0, [pc, #312]	; (8002f48 <menu+0x1cac>)
 8002e10:	f006 f870 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d119      	bne.n	8002e4e <menu+0x1bb2>
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <menu+0x1cb0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d012      	beq.n	8002e4e <menu+0x1bb2>
 8002e28:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <menu+0x1cdc>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10e      	bne.n	8002e4e <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002e30:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <menu+0x1cd4>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <menu+0x1cd4>)
 8002e3a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002e3c:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <menu+0x1cd4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d902      	bls.n	8002e4a <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002e44:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <menu+0x1cd4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e4a:	f001 fdf1 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e4e:	2104      	movs	r1, #4
 8002e50:	483d      	ldr	r0, [pc, #244]	; (8002f48 <menu+0x1cac>)
 8002e52:	f006 f84f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d119      	bne.n	8002e90 <menu+0x1bf4>
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <menu+0x1cb0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <menu+0x1bf4>
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <menu+0x1cdc>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10e      	bne.n	8002e90 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002e72:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <menu+0x1cd4>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <menu+0x1cd4>)
 8002e7c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <menu+0x1cd4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002e86:	4b3a      	ldr	r3, [pc, #232]	; (8002f70 <menu+0x1cd4>)
 8002e88:	2205      	movs	r2, #5
 8002e8a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002e8c:	f001 fdd0 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e90:	2108      	movs	r1, #8
 8002e92:	482d      	ldr	r0, [pc, #180]	; (8002f48 <menu+0x1cac>)
 8002e94:	f006 f82e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10d      	bne.n	8002eba <menu+0x1c1e>
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <menu+0x1cb0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002eac:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <menu+0x1cd4>)
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <menu+0x1cb4>)
 8002eb2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <menu+0x1cbc>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <menu+0x1cc0>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	f040 80bc 	bne.w	800303c <menu+0x1da0>
		if(dilSecim == 0) {
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <menu+0x1ca0>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <menu+0x1ce0>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f004 fcff 	bl	80078d4 <lcd_print>
 8002ed6:	e008      	b.n	8002eea <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <menu+0x1ca0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d104      	bne.n	8002eea <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ee0:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <menu+0x1ce4>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f004 fcf5 	bl	80078d4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <menu+0x1ce8>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <menu+0x1c7e>
			if(dilSecim == 0) {
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <menu+0x1ca0>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002efa:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <menu+0x1ca4>)
 8002efc:	2101      	movs	r1, #1
 8002efe:	2002      	movs	r0, #2
 8002f00:	f004 fce8 	bl	80078d4 <lcd_print>
 8002f04:	e04b      	b.n	8002f9e <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <menu+0x1ca0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d147      	bne.n	8002f9e <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <menu+0x1ca8>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	2002      	movs	r0, #2
 8002f14:	f004 fcde 	bl	80078d4 <lcd_print>
 8002f18:	e041      	b.n	8002f9e <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <menu+0x1ce8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d13d      	bne.n	8002f9e <menu+0x1d02>
			if(dilSecim == 0) {
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <menu+0x1ca0>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d130      	bne.n	8002f8c <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <menu+0x1cec>)
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f004 fcd0 	bl	80078d4 <lcd_print>
 8002f34:	e033      	b.n	8002f9e <menu+0x1d02>
 8002f36:	bf00      	nop
 8002f38:	2000020d 	.word	0x2000020d
 8002f3c:	20000221 	.word	0x20000221
 8002f40:	0800cf00 	.word	0x0800cf00
 8002f44:	0800cf14 	.word	0x0800cf14
 8002f48:	40010800 	.word	0x40010800
 8002f4c:	2000022f 	.word	0x2000022f
 8002f50:	2000012c 	.word	0x2000012c
 8002f54:	20000206 	.word	0x20000206
 8002f58:	2000022c 	.word	0x2000022c
 8002f5c:	20000200 	.word	0x20000200
 8002f60:	0800d2a0 	.word	0x0800d2a0
 8002f64:	0800d164 	.word	0x0800d164
 8002f68:	0800d2b4 	.word	0x0800d2b4
 8002f6c:	0800d188 	.word	0x0800d188
 8002f70:	2000021b 	.word	0x2000021b
 8002f74:	2000019c 	.word	0x2000019c
 8002f78:	2000020b 	.word	0x2000020b
 8002f7c:	0800d2c8 	.word	0x0800d2c8
 8002f80:	0800d2dc 	.word	0x0800d2dc
 8002f84:	2000020e 	.word	0x2000020e
 8002f88:	0800cf60 	.word	0x0800cf60
			} else if(dilSecim == 1) {
 8002f8c:	4b99      	ldr	r3, [pc, #612]	; (80031f4 <menu+0x1f58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d104      	bne.n	8002f9e <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002f94:	4a98      	ldr	r2, [pc, #608]	; (80031f8 <menu+0x1f5c>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f004 fc9b 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	4896      	ldr	r0, [pc, #600]	; (80031fc <menu+0x1f60>)
 8002fa2:	f005 ffa7 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d115      	bne.n	8002fd8 <menu+0x1d3c>
 8002fac:	4b94      	ldr	r3, [pc, #592]	; (8003200 <menu+0x1f64>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	f083 0301 	eor.w	r3, r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002fba:	4b92      	ldr	r3, [pc, #584]	; (8003204 <menu+0x1f68>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b90      	ldr	r3, [pc, #576]	; (8003204 <menu+0x1f68>)
 8002fc4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002fc6:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <menu+0x1f68>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d902      	bls.n	8002fd4 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002fce:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <menu+0x1f68>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fd4:	f001 fd2c 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd8:	2104      	movs	r1, #4
 8002fda:	4888      	ldr	r0, [pc, #544]	; (80031fc <menu+0x1f60>)
 8002fdc:	f005 ff8a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d115      	bne.n	8003012 <menu+0x1d76>
 8002fe6:	4b86      	ldr	r3, [pc, #536]	; (8003200 <menu+0x1f64>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ff4:	4b83      	ldr	r3, [pc, #524]	; (8003204 <menu+0x1f68>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <menu+0x1f68>)
 8002ffe:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003000:	4b80      	ldr	r3, [pc, #512]	; (8003204 <menu+0x1f68>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <menu+0x1f68>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800300e:	f001 fd0f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003012:	2108      	movs	r1, #8
 8003014:	4879      	ldr	r0, [pc, #484]	; (80031fc <menu+0x1f60>)
 8003016:	f005 ff6d 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10d      	bne.n	800303c <menu+0x1da0>
 8003020:	4b77      	ldr	r3, [pc, #476]	; (8003200 <menu+0x1f64>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800302e:	4b75      	ldr	r3, [pc, #468]	; (8003204 <menu+0x1f68>)
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	4b75      	ldr	r3, [pc, #468]	; (8003208 <menu+0x1f6c>)
 8003034:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003036:	4b75      	ldr	r3, [pc, #468]	; (800320c <menu+0x1f70>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800303c:	4b74      	ldr	r3, [pc, #464]	; (8003210 <menu+0x1f74>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b11      	cmp	r3, #17
 8003042:	f040 80c3 	bne.w	80031cc <menu+0x1f30>
		if(dilSecim == 0) {
 8003046:	4b6b      	ldr	r3, [pc, #428]	; (80031f4 <menu+0x1f58>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800304e:	4a71      	ldr	r2, [pc, #452]	; (8003214 <menu+0x1f78>)
 8003050:	2101      	movs	r1, #1
 8003052:	2001      	movs	r0, #1
 8003054:	f004 fc3e 	bl	80078d4 <lcd_print>
 8003058:	e008      	b.n	800306c <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800305a:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <menu+0x1f58>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d104      	bne.n	800306c <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003062:	4a6d      	ldr	r2, [pc, #436]	; (8003218 <menu+0x1f7c>)
 8003064:	2101      	movs	r1, #1
 8003066:	2001      	movs	r0, #1
 8003068:	f004 fc34 	bl	80078d4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 800306c:	4b6b      	ldr	r3, [pc, #428]	; (800321c <menu+0x1f80>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d113      	bne.n	800309c <menu+0x1e00>
			if(dilSecim == 0){
 8003074:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <menu+0x1f58>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 800307c:	4a68      	ldr	r2, [pc, #416]	; (8003220 <menu+0x1f84>)
 800307e:	2101      	movs	r1, #1
 8003080:	2002      	movs	r0, #2
 8003082:	f004 fc27 	bl	80078d4 <lcd_print>
 8003086:	e038      	b.n	80030fa <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003088:	4b5a      	ldr	r3, [pc, #360]	; (80031f4 <menu+0x1f58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d134      	bne.n	80030fa <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003090:	4a64      	ldr	r2, [pc, #400]	; (8003224 <menu+0x1f88>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f004 fc1d 	bl	80078d4 <lcd_print>
 800309a:	e02e      	b.n	80030fa <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800309c:	4b5f      	ldr	r3, [pc, #380]	; (800321c <menu+0x1f80>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d113      	bne.n	80030cc <menu+0x1e30>
			if(dilSecim == 0){
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <menu+0x1f58>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80030ac:	4a5e      	ldr	r2, [pc, #376]	; (8003228 <menu+0x1f8c>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	2002      	movs	r0, #2
 80030b2:	f004 fc0f 	bl	80078d4 <lcd_print>
 80030b6:	e020      	b.n	80030fa <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030b8:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <menu+0x1f58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d11c      	bne.n	80030fa <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80030c0:	4a5a      	ldr	r2, [pc, #360]	; (800322c <menu+0x1f90>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	2002      	movs	r0, #2
 80030c6:	f004 fc05 	bl	80078d4 <lcd_print>
 80030ca:	e016      	b.n	80030fa <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <menu+0x1f80>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d112      	bne.n	80030fa <menu+0x1e5e>
			if(dilSecim == 0) {
 80030d4:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <menu+0x1f58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80030dc:	4a54      	ldr	r2, [pc, #336]	; (8003230 <menu+0x1f94>)
 80030de:	2101      	movs	r1, #1
 80030e0:	2002      	movs	r0, #2
 80030e2:	f004 fbf7 	bl	80078d4 <lcd_print>
 80030e6:	e008      	b.n	80030fa <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030e8:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <menu+0x1f58>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d104      	bne.n	80030fa <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <menu+0x1f98>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	2002      	movs	r0, #2
 80030f6:	f004 fbed 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fa:	2102      	movs	r1, #2
 80030fc:	483f      	ldr	r0, [pc, #252]	; (80031fc <menu+0x1f60>)
 80030fe:	f005 fef9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <menu+0x1e98>
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <menu+0x1f64>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <menu+0x1f80>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <menu+0x1f80>)
 8003120:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <menu+0x1f80>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800312a:	4b3c      	ldr	r3, [pc, #240]	; (800321c <menu+0x1f80>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003130:	f001 fc7e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2104      	movs	r1, #4
 8003136:	4831      	ldr	r0, [pc, #196]	; (80031fc <menu+0x1f60>)
 8003138:	f005 fedc 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d115      	bne.n	800316e <menu+0x1ed2>
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <menu+0x1f64>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <menu+0x1f80>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <menu+0x1f80>)
 800315a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <menu+0x1f80>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d902      	bls.n	800316a <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <menu+0x1f80>)
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800316a:	f001 fc61 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800316e:	2108      	movs	r1, #8
 8003170:	4822      	ldr	r0, [pc, #136]	; (80031fc <menu+0x1f60>)
 8003172:	f005 febf 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d127      	bne.n	80031cc <menu+0x1f30>
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <menu+0x1f64>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d020      	beq.n	80031cc <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <menu+0x1f80>)
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <menu+0x1f6c>)
 8003190:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <menu+0x1f80>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d003      	beq.n	80031a2 <menu+0x1f06>
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <menu+0x1f80>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d106      	bne.n	80031b0 <menu+0x1f14>
				calismaSekli = 0;
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <menu+0x1f9c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <menu+0x1f9c>)
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	4b16      	ldr	r3, [pc, #88]	; (8003208 <menu+0x1f6c>)
 80031ae:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <menu+0x1f80>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80031b8:	4b20      	ldr	r3, [pc, #128]	; (800323c <menu+0x1fa0>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <menu+0x1fa0>)
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <menu+0x1f6c>)
 80031c4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <menu+0x1f70>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <menu+0x1f74>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b12      	cmp	r3, #18
 80031d2:	f040 80d5 	bne.w	8003380 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <menu+0x1f80>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d13c      	bne.n	8003258 <menu+0x1fbc>
			if(dilSecim == 0) {
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <menu+0x1f58>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d12e      	bne.n	8003244 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80031e6:	4a16      	ldr	r2, [pc, #88]	; (8003240 <menu+0x1fa4>)
 80031e8:	2101      	movs	r1, #1
 80031ea:	2001      	movs	r0, #1
 80031ec:	f004 fb72 	bl	80078d4 <lcd_print>
 80031f0:	e048      	b.n	8003284 <menu+0x1fe8>
 80031f2:	bf00      	nop
 80031f4:	20000221 	.word	0x20000221
 80031f8:	0800cf74 	.word	0x0800cf74
 80031fc:	40010800 	.word	0x40010800
 8003200:	2000022f 	.word	0x2000022f
 8003204:	2000020e 	.word	0x2000020e
 8003208:	2000012c 	.word	0x2000012c
 800320c:	2000022c 	.word	0x2000022c
 8003210:	20000200 	.word	0x20000200
 8003214:	0800d2f0 	.word	0x0800d2f0
 8003218:	0800d304 	.word	0x0800d304
 800321c:	2000020f 	.word	0x2000020f
 8003220:	0800d318 	.word	0x0800d318
 8003224:	0800d328 	.word	0x0800d328
 8003228:	0800d338 	.word	0x0800d338
 800322c:	0800d348 	.word	0x0800d348
 8003230:	0800cf00 	.word	0x0800cf00
 8003234:	0800cf14 	.word	0x0800cf14
 8003238:	20000201 	.word	0x20000201
 800323c:	20000212 	.word	0x20000212
 8003240:	0800d358 	.word	0x0800d358
			} else if(dilSecim == 1) {
 8003244:	4b7b      	ldr	r3, [pc, #492]	; (8003434 <menu+0x2198>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11b      	bne.n	8003284 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800324c:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <menu+0x219c>)
 800324e:	2101      	movs	r1, #1
 8003250:	2001      	movs	r0, #1
 8003252:	f004 fb3f 	bl	80078d4 <lcd_print>
 8003256:	e015      	b.n	8003284 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003258:	4b78      	ldr	r3, [pc, #480]	; (800343c <menu+0x21a0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d111      	bne.n	8003284 <menu+0x1fe8>
			if(dilSecim == 0){
 8003260:	4b74      	ldr	r3, [pc, #464]	; (8003434 <menu+0x2198>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003268:	4a75      	ldr	r2, [pc, #468]	; (8003440 <menu+0x21a4>)
 800326a:	2101      	movs	r1, #1
 800326c:	2001      	movs	r0, #1
 800326e:	f004 fb31 	bl	80078d4 <lcd_print>
			}
			if(dilSecim == 1){
 8003272:	4b70      	ldr	r3, [pc, #448]	; (8003434 <menu+0x2198>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d104      	bne.n	8003284 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800327a:	4a72      	ldr	r2, [pc, #456]	; (8003444 <menu+0x21a8>)
 800327c:	2101      	movs	r1, #1
 800327e:	2001      	movs	r0, #1
 8003280:	f004 fb28 	bl	80078d4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003284:	4b70      	ldr	r3, [pc, #448]	; (8003448 <menu+0x21ac>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d113      	bne.n	80032b4 <menu+0x2018>
			if(dilSecim == 0) {
 800328c:	4b69      	ldr	r3, [pc, #420]	; (8003434 <menu+0x2198>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003294:	4a6d      	ldr	r2, [pc, #436]	; (800344c <menu+0x21b0>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f004 fb1b 	bl	80078d4 <lcd_print>
 800329e:	e020      	b.n	80032e2 <menu+0x2046>
			} else if(dilSecim == 1){
 80032a0:	4b64      	ldr	r3, [pc, #400]	; (8003434 <menu+0x2198>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d11c      	bne.n	80032e2 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80032a8:	4a69      	ldr	r2, [pc, #420]	; (8003450 <menu+0x21b4>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f004 fb11 	bl	80078d4 <lcd_print>
 80032b2:	e016      	b.n	80032e2 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80032b4:	4b64      	ldr	r3, [pc, #400]	; (8003448 <menu+0x21ac>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d112      	bne.n	80032e2 <menu+0x2046>
			if(dilSecim == 0){
 80032bc:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <menu+0x2198>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80032c4:	4a63      	ldr	r2, [pc, #396]	; (8003454 <menu+0x21b8>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	2002      	movs	r0, #2
 80032ca:	f004 fb03 	bl	80078d4 <lcd_print>
 80032ce:	e008      	b.n	80032e2 <menu+0x2046>
			} else if(dilSecim == 1){
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <menu+0x2198>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d104      	bne.n	80032e2 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80032d8:	4a5f      	ldr	r2, [pc, #380]	; (8003458 <menu+0x21bc>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2002      	movs	r0, #2
 80032de:	f004 faf9 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e2:	2102      	movs	r1, #2
 80032e4:	485d      	ldr	r0, [pc, #372]	; (800345c <menu+0x21c0>)
 80032e6:	f005 fe05 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d115      	bne.n	800331c <menu+0x2080>
 80032f0:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <menu+0x21c4>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f083 0301 	eor.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00e      	beq.n	800331c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80032fe:	4b52      	ldr	r3, [pc, #328]	; (8003448 <menu+0x21ac>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <menu+0x21ac>)
 8003308:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800330a:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <menu+0x21ac>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d902      	bls.n	8003318 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003312:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <menu+0x21ac>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003318:	f001 fb8a 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800331c:	2104      	movs	r1, #4
 800331e:	484f      	ldr	r0, [pc, #316]	; (800345c <menu+0x21c0>)
 8003320:	f005 fde8 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d115      	bne.n	8003356 <menu+0x20ba>
 800332a:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <menu+0x21c4>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	f083 0301 	eor.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003338:	4b43      	ldr	r3, [pc, #268]	; (8003448 <menu+0x21ac>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b41      	ldr	r3, [pc, #260]	; (8003448 <menu+0x21ac>)
 8003342:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003344:	4b40      	ldr	r3, [pc, #256]	; (8003448 <menu+0x21ac>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <menu+0x21ac>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003352:	f001 fb6d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003356:	2108      	movs	r1, #8
 8003358:	4840      	ldr	r0, [pc, #256]	; (800345c <menu+0x21c0>)
 800335a:	f005 fdcb 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800335e:	4603      	mov	r3, r0
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10d      	bne.n	8003380 <menu+0x20e4>
 8003364:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <menu+0x21c4>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003372:	4b35      	ldr	r3, [pc, #212]	; (8003448 <menu+0x21ac>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <menu+0x21c8>)
 8003378:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <menu+0x21cc>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <menu+0x21d0>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b13      	cmp	r3, #19
 8003386:	f040 80d5 	bne.w	8003534 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <menu+0x21a0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d113      	bne.n	80033ba <menu+0x211e>
			if(dilSecim == 0) {
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <menu+0x2198>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800339a:	4a35      	ldr	r2, [pc, #212]	; (8003470 <menu+0x21d4>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f004 fa98 	bl	80078d4 <lcd_print>
 80033a4:	e01f      	b.n	80033e6 <menu+0x214a>
			} else if(dilSecim == 1) {
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <menu+0x2198>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11b      	bne.n	80033e6 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80033ae:	4a31      	ldr	r2, [pc, #196]	; (8003474 <menu+0x21d8>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	2001      	movs	r0, #1
 80033b4:	f004 fa8e 	bl	80078d4 <lcd_print>
 80033b8:	e015      	b.n	80033e6 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <menu+0x21a0>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d111      	bne.n	80033e6 <menu+0x214a>
			if(dilSecim == 0) {
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <menu+0x2198>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <menu+0x21dc>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	2001      	movs	r0, #1
 80033d0:	f004 fa80 	bl	80078d4 <lcd_print>
			}
			if(dilSecim == 1) {
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <menu+0x2198>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d104      	bne.n	80033e6 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <menu+0x21e0>)
 80033de:	2101      	movs	r1, #1
 80033e0:	2001      	movs	r0, #1
 80033e2:	f004 fa77 	bl	80078d4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <menu+0x21e4>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d113      	bne.n	8003416 <menu+0x217a>
			if(dilSecim == 0) {
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <menu+0x2198>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <menu+0x21b0>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	2002      	movs	r0, #2
 80033fc:	f004 fa6a 	bl	80078d4 <lcd_print>
 8003400:	e049      	b.n	8003496 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <menu+0x2198>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d145      	bne.n	8003496 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800340a:	4a11      	ldr	r2, [pc, #68]	; (8003450 <menu+0x21b4>)
 800340c:	2101      	movs	r1, #1
 800340e:	2002      	movs	r0, #2
 8003410:	f004 fa60 	bl	80078d4 <lcd_print>
 8003414:	e03f      	b.n	8003496 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <menu+0x21e4>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d13b      	bne.n	8003496 <menu+0x21fa>
			if(dilSecim == 0) {
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <menu+0x2198>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d12e      	bne.n	8003484 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003426:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <menu+0x21b8>)
 8003428:	2101      	movs	r1, #1
 800342a:	2002      	movs	r0, #2
 800342c:	f004 fa52 	bl	80078d4 <lcd_print>
 8003430:	e031      	b.n	8003496 <menu+0x21fa>
 8003432:	bf00      	nop
 8003434:	20000221 	.word	0x20000221
 8003438:	0800d36c 	.word	0x0800d36c
 800343c:	2000020f 	.word	0x2000020f
 8003440:	0800d37c 	.word	0x0800d37c
 8003444:	0800d390 	.word	0x0800d390
 8003448:	20000210 	.word	0x20000210
 800344c:	0800cf00 	.word	0x0800cf00
 8003450:	0800cf14 	.word	0x0800cf14
 8003454:	0800cf60 	.word	0x0800cf60
 8003458:	0800cf74 	.word	0x0800cf74
 800345c:	40010800 	.word	0x40010800
 8003460:	2000022f 	.word	0x2000022f
 8003464:	2000012c 	.word	0x2000012c
 8003468:	2000022c 	.word	0x2000022c
 800346c:	20000200 	.word	0x20000200
 8003470:	0800d3a4 	.word	0x0800d3a4
 8003474:	0800d3b8 	.word	0x0800d3b8
 8003478:	0800d3cc 	.word	0x0800d3cc
 800347c:	0800d3e0 	.word	0x0800d3e0
 8003480:	20000211 	.word	0x20000211
			} else if(dilSecim == 1) {
 8003484:	4b90      	ldr	r3, [pc, #576]	; (80036c8 <menu+0x242c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d104      	bne.n	8003496 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 800348c:	4a8f      	ldr	r2, [pc, #572]	; (80036cc <menu+0x2430>)
 800348e:	2101      	movs	r1, #1
 8003490:	2002      	movs	r0, #2
 8003492:	f004 fa1f 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2102      	movs	r1, #2
 8003498:	488d      	ldr	r0, [pc, #564]	; (80036d0 <menu+0x2434>)
 800349a:	f005 fd2b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d115      	bne.n	80034d0 <menu+0x2234>
 80034a4:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <menu+0x2438>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80034b2:	4b89      	ldr	r3, [pc, #548]	; (80036d8 <menu+0x243c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b87      	ldr	r3, [pc, #540]	; (80036d8 <menu+0x243c>)
 80034bc:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80034be:	4b86      	ldr	r3, [pc, #536]	; (80036d8 <menu+0x243c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d902      	bls.n	80034cc <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80034c6:	4b84      	ldr	r3, [pc, #528]	; (80036d8 <menu+0x243c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034cc:	f001 fab0 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d0:	2104      	movs	r1, #4
 80034d2:	487f      	ldr	r0, [pc, #508]	; (80036d0 <menu+0x2434>)
 80034d4:	f005 fd0e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d115      	bne.n	800350a <menu+0x226e>
 80034de:	4b7d      	ldr	r3, [pc, #500]	; (80036d4 <menu+0x2438>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80034ec:	4b7a      	ldr	r3, [pc, #488]	; (80036d8 <menu+0x243c>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b78      	ldr	r3, [pc, #480]	; (80036d8 <menu+0x243c>)
 80034f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80034f8:	4b77      	ldr	r3, [pc, #476]	; (80036d8 <menu+0x243c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003500:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <menu+0x243c>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003506:	f001 fa93 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800350a:	2108      	movs	r1, #8
 800350c:	4870      	ldr	r0, [pc, #448]	; (80036d0 <menu+0x2434>)
 800350e:	f005 fcf1 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10d      	bne.n	8003534 <menu+0x2298>
 8003518:	4b6e      	ldr	r3, [pc, #440]	; (80036d4 <menu+0x2438>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <menu+0x243c>)
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <menu+0x2440>)
 800352c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <menu+0x2444>)
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003534:	4b6b      	ldr	r3, [pc, #428]	; (80036e4 <menu+0x2448>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b14      	cmp	r3, #20
 800353a:	f040 80b5 	bne.w	80036a8 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800353e:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <menu+0x244c>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d113      	bne.n	800356e <menu+0x22d2>
			if(dilSecim == 0) {
 8003546:	4b60      	ldr	r3, [pc, #384]	; (80036c8 <menu+0x242c>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800354e:	4a67      	ldr	r2, [pc, #412]	; (80036ec <menu+0x2450>)
 8003550:	2101      	movs	r1, #1
 8003552:	2001      	movs	r0, #1
 8003554:	f004 f9be 	bl	80078d4 <lcd_print>
 8003558:	e020      	b.n	800359c <menu+0x2300>
			} else if(dilSecim == 1) {
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <menu+0x242c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d11c      	bne.n	800359c <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003562:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <menu+0x2454>)
 8003564:	2101      	movs	r1, #1
 8003566:	2001      	movs	r0, #1
 8003568:	f004 f9b4 	bl	80078d4 <lcd_print>
 800356c:	e016      	b.n	800359c <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800356e:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <menu+0x244c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d112      	bne.n	800359c <menu+0x2300>
			if(dilSecim == 0) {
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <menu+0x242c>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800357e:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <menu+0x2458>)
 8003580:	2101      	movs	r1, #1
 8003582:	2001      	movs	r0, #1
 8003584:	f004 f9a6 	bl	80078d4 <lcd_print>
 8003588:	e008      	b.n	800359c <menu+0x2300>
			} else if(dilSecim == 1) {
 800358a:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <menu+0x242c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d104      	bne.n	800359c <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003592:	4a59      	ldr	r2, [pc, #356]	; (80036f8 <menu+0x245c>)
 8003594:	2101      	movs	r1, #1
 8003596:	2001      	movs	r0, #1
 8003598:	f004 f99c 	bl	80078d4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 800359c:	4b57      	ldr	r3, [pc, #348]	; (80036fc <menu+0x2460>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d113      	bne.n	80035cc <menu+0x2330>
			if(dilSecim == 0) {
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <menu+0x242c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80035ac:	4a54      	ldr	r2, [pc, #336]	; (8003700 <menu+0x2464>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	2002      	movs	r0, #2
 80035b2:	f004 f98f 	bl	80078d4 <lcd_print>
 80035b6:	e020      	b.n	80035fa <menu+0x235e>
			} else if(dilSecim == 1) {
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <menu+0x242c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11c      	bne.n	80035fa <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80035c0:	4a50      	ldr	r2, [pc, #320]	; (8003704 <menu+0x2468>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2002      	movs	r0, #2
 80035c6:	f004 f985 	bl	80078d4 <lcd_print>
 80035ca:	e016      	b.n	80035fa <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <menu+0x2460>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d112      	bne.n	80035fa <menu+0x235e>
			if(dilSecim == 0) {
 80035d4:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <menu+0x242c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80035dc:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <menu+0x246c>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2002      	movs	r0, #2
 80035e2:	f004 f977 	bl	80078d4 <lcd_print>
 80035e6:	e008      	b.n	80035fa <menu+0x235e>
			} else if(dilSecim == 1) {
 80035e8:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <menu+0x242c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d104      	bne.n	80035fa <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80035f0:	4a46      	ldr	r2, [pc, #280]	; (800370c <menu+0x2470>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2002      	movs	r0, #2
 80035f6:	f004 f96d 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035fa:	2102      	movs	r1, #2
 80035fc:	4834      	ldr	r0, [pc, #208]	; (80036d0 <menu+0x2434>)
 80035fe:	f005 fc79 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d119      	bne.n	800363c <menu+0x23a0>
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <menu+0x2438>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d012      	beq.n	800363c <menu+0x23a0>
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <menu+0x244c>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d10e      	bne.n	800363c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <menu+0x2460>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4b35      	ldr	r3, [pc, #212]	; (80036fc <menu+0x2460>)
 8003628:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <menu+0x2460>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d902      	bls.n	8003638 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003632:	4b32      	ldr	r3, [pc, #200]	; (80036fc <menu+0x2460>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003638:	f001 f9fa 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800363c:	2104      	movs	r1, #4
 800363e:	4824      	ldr	r0, [pc, #144]	; (80036d0 <menu+0x2434>)
 8003640:	f005 fc58 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d119      	bne.n	800367e <menu+0x23e2>
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <menu+0x2438>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	f083 0301 	eor.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <menu+0x23e2>
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <menu+0x244c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d10e      	bne.n	800367e <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <menu+0x2460>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	3b01      	subs	r3, #1
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <menu+0x2460>)
 800366a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <menu+0x2460>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <menu+0x2460>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800367a:	f001 f9d9 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800367e:	2108      	movs	r1, #8
 8003680:	4813      	ldr	r0, [pc, #76]	; (80036d0 <menu+0x2434>)
 8003682:	f005 fc37 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10d      	bne.n	80036a8 <menu+0x240c>
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <menu+0x2438>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800369a:	4b18      	ldr	r3, [pc, #96]	; (80036fc <menu+0x2460>)
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <menu+0x2440>)
 80036a0:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <menu+0x2444>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <menu+0x2448>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b15      	cmp	r3, #21
 80036ae:	f040 80c2 	bne.w	8003836 <menu+0x259a>
		if(dilSecim == 0) {
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <menu+0x242c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d12c      	bne.n	8003714 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80036ba:	4a15      	ldr	r2, [pc, #84]	; (8003710 <menu+0x2474>)
 80036bc:	2101      	movs	r1, #1
 80036be:	2001      	movs	r0, #1
 80036c0:	f004 f908 	bl	80078d4 <lcd_print>
 80036c4:	e02f      	b.n	8003726 <menu+0x248a>
 80036c6:	bf00      	nop
 80036c8:	20000221 	.word	0x20000221
 80036cc:	0800cf74 	.word	0x0800cf74
 80036d0:	40010800 	.word	0x40010800
 80036d4:	2000022f 	.word	0x2000022f
 80036d8:	20000211 	.word	0x20000211
 80036dc:	2000012c 	.word	0x2000012c
 80036e0:	2000022c 	.word	0x2000022c
 80036e4:	20000200 	.word	0x20000200
 80036e8:	2000020f 	.word	0x2000020f
 80036ec:	0800d3f4 	.word	0x0800d3f4
 80036f0:	0800d408 	.word	0x0800d408
 80036f4:	0800d41c 	.word	0x0800d41c
 80036f8:	0800d430 	.word	0x0800d430
 80036fc:	20000212 	.word	0x20000212
 8003700:	0800d444 	.word	0x0800d444
 8003704:	0800d458 	.word	0x0800d458
 8003708:	0800d468 	.word	0x0800d468
 800370c:	0800d47c 	.word	0x0800d47c
 8003710:	0800d48c 	.word	0x0800d48c
		} else if(dilSecim == 1) {
 8003714:	4b9c      	ldr	r3, [pc, #624]	; (8003988 <menu+0x26ec>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d104      	bne.n	8003726 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800371c:	4a9b      	ldr	r2, [pc, #620]	; (800398c <menu+0x26f0>)
 800371e:	2101      	movs	r1, #1
 8003720:	2001      	movs	r0, #1
 8003722:	f004 f8d7 	bl	80078d4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003726:	4b9a      	ldr	r3, [pc, #616]	; (8003990 <menu+0x26f4>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d112      	bne.n	8003754 <menu+0x24b8>
			if(dilSecim == 0) {
 800372e:	4b96      	ldr	r3, [pc, #600]	; (8003988 <menu+0x26ec>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003736:	4a97      	ldr	r2, [pc, #604]	; (8003994 <menu+0x26f8>)
 8003738:	2101      	movs	r1, #1
 800373a:	2002      	movs	r0, #2
 800373c:	f004 f8ca 	bl	80078d4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003740:	4b91      	ldr	r3, [pc, #580]	; (8003988 <menu+0x26ec>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d11c      	bne.n	8003782 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003748:	4a93      	ldr	r2, [pc, #588]	; (8003998 <menu+0x26fc>)
 800374a:	2101      	movs	r1, #1
 800374c:	2002      	movs	r0, #2
 800374e:	f004 f8c1 	bl	80078d4 <lcd_print>
 8003752:	e016      	b.n	8003782 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003754:	4b8e      	ldr	r3, [pc, #568]	; (8003990 <menu+0x26f4>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d112      	bne.n	8003782 <menu+0x24e6>
			if(dilSecim == 0) {
 800375c:	4b8a      	ldr	r3, [pc, #552]	; (8003988 <menu+0x26ec>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003764:	4a8d      	ldr	r2, [pc, #564]	; (800399c <menu+0x2700>)
 8003766:	2101      	movs	r1, #1
 8003768:	2002      	movs	r0, #2
 800376a:	f004 f8b3 	bl	80078d4 <lcd_print>
 800376e:	e008      	b.n	8003782 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003770:	4b85      	ldr	r3, [pc, #532]	; (8003988 <menu+0x26ec>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d104      	bne.n	8003782 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003778:	4a89      	ldr	r2, [pc, #548]	; (80039a0 <menu+0x2704>)
 800377a:	2101      	movs	r1, #1
 800377c:	2002      	movs	r0, #2
 800377e:	f004 f8a9 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003782:	2102      	movs	r1, #2
 8003784:	4887      	ldr	r0, [pc, #540]	; (80039a4 <menu+0x2708>)
 8003786:	f005 fbb5 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800378a:	4603      	mov	r3, r0
 800378c:	2b01      	cmp	r3, #1
 800378e:	d115      	bne.n	80037bc <menu+0x2520>
 8003790:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <menu+0x270c>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <menu+0x26f4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b7a      	ldr	r3, [pc, #488]	; (8003990 <menu+0x26f4>)
 80037a8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80037aa:	4b79      	ldr	r3, [pc, #484]	; (8003990 <menu+0x26f4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d902      	bls.n	80037b8 <menu+0x251c>
				platformSilindirTipi = 0;
 80037b2:	4b77      	ldr	r3, [pc, #476]	; (8003990 <menu+0x26f4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037b8:	f001 f93a 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037bc:	2104      	movs	r1, #4
 80037be:	4879      	ldr	r0, [pc, #484]	; (80039a4 <menu+0x2708>)
 80037c0:	f005 fb98 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d115      	bne.n	80037f6 <menu+0x255a>
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <menu+0x270c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	f083 0301 	eor.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80037d8:	4b6d      	ldr	r3, [pc, #436]	; (8003990 <menu+0x26f4>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3b01      	subs	r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b6b      	ldr	r3, [pc, #428]	; (8003990 <menu+0x26f4>)
 80037e2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80037e4:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <menu+0x26f4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80037ec:	4b68      	ldr	r3, [pc, #416]	; (8003990 <menu+0x26f4>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037f2:	f001 f91d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f6:	2108      	movs	r1, #8
 80037f8:	486a      	ldr	r0, [pc, #424]	; (80039a4 <menu+0x2708>)
 80037fa:	f005 fb7b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d118      	bne.n	8003836 <menu+0x259a>
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <menu+0x270c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003812:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <menu+0x26f4>)
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <menu+0x2710>)
 8003818:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800381a:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <menu+0x26f4>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d106      	bne.n	8003830 <menu+0x2594>
				altLimit = 1;
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <menu+0x2714>)
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <menu+0x2714>)
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <menu+0x2710>)
 800382e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003830:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <menu+0x2718>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003836:	4b60      	ldr	r3, [pc, #384]	; (80039b8 <menu+0x271c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b16      	cmp	r3, #22
 800383c:	f040 8081 	bne.w	8003942 <menu+0x26a6>
		if(dilSecim == 0) {
 8003840:	4b51      	ldr	r3, [pc, #324]	; (8003988 <menu+0x26ec>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003848:	4a5c      	ldr	r2, [pc, #368]	; (80039bc <menu+0x2720>)
 800384a:	2101      	movs	r1, #1
 800384c:	2001      	movs	r0, #1
 800384e:	f004 f841 	bl	80078d4 <lcd_print>
 8003852:	e008      	b.n	8003866 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003854:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d104      	bne.n	8003866 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 800385c:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <menu+0x2724>)
 800385e:	2101      	movs	r1, #1
 8003860:	2001      	movs	r0, #1
 8003862:	f004 f837 	bl	80078d4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003866:	4b48      	ldr	r3, [pc, #288]	; (8003988 <menu+0x26ec>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800386e:	4a55      	ldr	r2, [pc, #340]	; (80039c4 <menu+0x2728>)
 8003870:	2101      	movs	r1, #1
 8003872:	2002      	movs	r0, #2
 8003874:	f004 f82e 	bl	80078d4 <lcd_print>
 8003878:	e008      	b.n	800388c <menu+0x25f0>
			} else if(dilSecim == 1){
 800387a:	4b43      	ldr	r3, [pc, #268]	; (8003988 <menu+0x26ec>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d104      	bne.n	800388c <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003882:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <menu+0x272c>)
 8003884:	2101      	movs	r1, #1
 8003886:	2002      	movs	r0, #2
 8003888:	f004 f824 	bl	80078d4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 800388c:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <menu+0x2730>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	220a      	movs	r2, #10
 8003892:	494f      	ldr	r1, [pc, #316]	; (80039d0 <menu+0x2734>)
 8003894:	4618      	mov	r0, r3
 8003896:	f008 fb59 	bl	800bf4c <itoa>
		lcd_print(2,16,snum);
 800389a:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <menu+0x2734>)
 800389c:	2110      	movs	r1, #16
 800389e:	2002      	movs	r0, #2
 80038a0:	f004 f818 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038a4:	2102      	movs	r1, #2
 80038a6:	483f      	ldr	r0, [pc, #252]	; (80039a4 <menu+0x2708>)
 80038a8:	f005 fb24 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d115      	bne.n	80038de <menu+0x2642>
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <menu+0x270c>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	f083 0301 	eor.w	r3, r3, #1
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00e      	beq.n	80038de <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <menu+0x2730>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	4b40      	ldr	r3, [pc, #256]	; (80039cc <menu+0x2730>)
 80038ca:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80038cc:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <menu+0x2730>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	d902      	bls.n	80038da <menu+0x263e>
				yukariValfTmr = 0;
 80038d4:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <menu+0x2730>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038da:	f001 f8a9 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038de:	2104      	movs	r1, #4
 80038e0:	4830      	ldr	r0, [pc, #192]	; (80039a4 <menu+0x2708>)
 80038e2:	f005 fb07 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d115      	bne.n	8003918 <menu+0x267c>
 80038ec:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <menu+0x270c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	f083 0301 	eor.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00e      	beq.n	8003918 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <menu+0x2730>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <menu+0x2730>)
 8003904:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <menu+0x2730>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <menu+0x2678>
		   		yukariValfTmr = 5;
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <menu+0x2730>)
 8003910:	2205      	movs	r2, #5
 8003912:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003914:	f001 f88c 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003918:	2108      	movs	r1, #8
 800391a:	4822      	ldr	r0, [pc, #136]	; (80039a4 <menu+0x2708>)
 800391c:	f005 faea 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003920:	4603      	mov	r3, r0
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10d      	bne.n	8003942 <menu+0x26a6>
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <menu+0x270c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f083 0301 	eor.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <menu+0x2730>)
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <menu+0x2710>)
 800393a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <menu+0x2718>)
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <menu+0x271c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b17      	cmp	r3, #23
 8003948:	f040 80ac 	bne.w	8003aa4 <menu+0x2808>
		if(dilSecim == 0) {
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <menu+0x26ec>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <menu+0x2738>)
 8003956:	2101      	movs	r1, #1
 8003958:	2001      	movs	r0, #1
 800395a:	f003 ffbb 	bl	80078d4 <lcd_print>
 800395e:	e008      	b.n	8003972 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <menu+0x26ec>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d104      	bne.n	8003972 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003968:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <menu+0x273c>)
 800396a:	2101      	movs	r1, #1
 800396c:	2001      	movs	r0, #1
 800396e:	f003 ffb1 	bl	80078d4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <menu+0x26ec>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d130      	bne.n	80039dc <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <menu+0x2728>)
 800397c:	2101      	movs	r1, #1
 800397e:	2002      	movs	r0, #2
 8003980:	f003 ffa8 	bl	80078d4 <lcd_print>
 8003984:	e033      	b.n	80039ee <menu+0x2752>
 8003986:	bf00      	nop
 8003988:	20000221 	.word	0x20000221
 800398c:	0800d4a0 	.word	0x0800d4a0
 8003990:	20000213 	.word	0x20000213
 8003994:	0800d444 	.word	0x0800d444
 8003998:	0800d458 	.word	0x0800d458
 800399c:	0800d468 	.word	0x0800d468
 80039a0:	0800d47c 	.word	0x0800d47c
 80039a4:	40010800 	.word	0x40010800
 80039a8:	2000022f 	.word	0x2000022f
 80039ac:	2000012c 	.word	0x2000012c
 80039b0:	20000206 	.word	0x20000206
 80039b4:	2000022c 	.word	0x2000022c
 80039b8:	20000200 	.word	0x20000200
 80039bc:	0800d4b0 	.word	0x0800d4b0
 80039c0:	0800d4c4 	.word	0x0800d4c4
 80039c4:	0800d164 	.word	0x0800d164
 80039c8:	0800d4d8 	.word	0x0800d4d8
 80039cc:	20000214 	.word	0x20000214
 80039d0:	2000019c 	.word	0x2000019c
 80039d4:	0800d4e8 	.word	0x0800d4e8
 80039d8:	0800d4fc 	.word	0x0800d4fc
			} else if(dilSecim == 1) {
 80039dc:	4b98      	ldr	r3, [pc, #608]	; (8003c40 <menu+0x29a4>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d104      	bne.n	80039ee <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80039e4:	4a97      	ldr	r2, [pc, #604]	; (8003c44 <menu+0x29a8>)
 80039e6:	2101      	movs	r1, #1
 80039e8:	2002      	movs	r0, #2
 80039ea:	f003 ff73 	bl	80078d4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80039ee:	4b96      	ldr	r3, [pc, #600]	; (8003c48 <menu+0x29ac>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	220a      	movs	r2, #10
 80039f4:	4995      	ldr	r1, [pc, #596]	; (8003c4c <menu+0x29b0>)
 80039f6:	4618      	mov	r0, r3
 80039f8:	f008 faa8 	bl	800bf4c <itoa>
		lcd_print(2,16,snum);
 80039fc:	4a93      	ldr	r2, [pc, #588]	; (8003c4c <menu+0x29b0>)
 80039fe:	2110      	movs	r1, #16
 8003a00:	2002      	movs	r0, #2
 8003a02:	f003 ff67 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a06:	2102      	movs	r1, #2
 8003a08:	4891      	ldr	r0, [pc, #580]	; (8003c50 <menu+0x29b4>)
 8003a0a:	f005 fa73 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d115      	bne.n	8003a40 <menu+0x27a4>
 8003a14:	4b8f      	ldr	r3, [pc, #572]	; (8003c54 <menu+0x29b8>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00e      	beq.n	8003a40 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003a22:	4b89      	ldr	r3, [pc, #548]	; (8003c48 <menu+0x29ac>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4b87      	ldr	r3, [pc, #540]	; (8003c48 <menu+0x29ac>)
 8003a2c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003a2e:	4b86      	ldr	r3, [pc, #536]	; (8003c48 <menu+0x29ac>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d902      	bls.n	8003a3c <menu+0x27a0>
				asagiValfTmr = 0;
 8003a36:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <menu+0x29ac>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a3c:	f000 fff8 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a40:	2104      	movs	r1, #4
 8003a42:	4883      	ldr	r0, [pc, #524]	; (8003c50 <menu+0x29b4>)
 8003a44:	f005 fa56 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d115      	bne.n	8003a7a <menu+0x27de>
 8003a4e:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <menu+0x29b8>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003a5c:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <menu+0x29ac>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	4b78      	ldr	r3, [pc, #480]	; (8003c48 <menu+0x29ac>)
 8003a66:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003a68:	4b77      	ldr	r3, [pc, #476]	; (8003c48 <menu+0x29ac>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d902      	bls.n	8003a76 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003a70:	4b75      	ldr	r3, [pc, #468]	; (8003c48 <menu+0x29ac>)
 8003a72:	2205      	movs	r2, #5
 8003a74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a76:	f000 ffdb 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a7a:	2108      	movs	r1, #8
 8003a7c:	4874      	ldr	r0, [pc, #464]	; (8003c50 <menu+0x29b4>)
 8003a7e:	f005 fa39 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10d      	bne.n	8003aa4 <menu+0x2808>
 8003a88:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <menu+0x29b8>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f083 0301 	eor.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <menu+0x29ac>)
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <menu+0x29bc>)
 8003a9c:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a9e:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <menu+0x29c0>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003aa4:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <menu+0x29c4>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b18      	cmp	r3, #24
 8003aaa:	f040 809d 	bne.w	8003be8 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003aae:	4b6d      	ldr	r3, [pc, #436]	; (8003c64 <menu+0x29c8>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d113      	bne.n	8003ade <menu+0x2842>
			if(dilSecim == 0) {
 8003ab6:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <menu+0x29a4>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003abe:	4a6a      	ldr	r2, [pc, #424]	; (8003c68 <menu+0x29cc>)
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f003 ff06 	bl	80078d4 <lcd_print>
 8003ac8:	e020      	b.n	8003b0c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003aca:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <menu+0x29a4>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d11c      	bne.n	8003b0c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003ad2:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <menu+0x29d0>)
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f003 fefc 	bl	80078d4 <lcd_print>
 8003adc:	e016      	b.n	8003b0c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ade:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <menu+0x29c8>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d112      	bne.n	8003b0c <menu+0x2870>
			if(dilSecim == 0) {
 8003ae6:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <menu+0x29a4>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d105      	bne.n	8003afa <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003aee:	4a60      	ldr	r2, [pc, #384]	; (8003c70 <menu+0x29d4>)
 8003af0:	2101      	movs	r1, #1
 8003af2:	2001      	movs	r0, #1
 8003af4:	f003 feee 	bl	80078d4 <lcd_print>
 8003af8:	e008      	b.n	8003b0c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003afa:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <menu+0x29a4>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d104      	bne.n	8003b0c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b02:	4a5c      	ldr	r2, [pc, #368]	; (8003c74 <menu+0x29d8>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	2001      	movs	r0, #1
 8003b08:	f003 fee4 	bl	80078d4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <menu+0x29a4>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b14:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <menu+0x29dc>)
 8003b16:	2101      	movs	r1, #1
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f003 fedb 	bl	80078d4 <lcd_print>
 8003b1e:	e008      	b.n	8003b32 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <menu+0x29a4>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d104      	bne.n	8003b32 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003b28:	4a46      	ldr	r2, [pc, #280]	; (8003c44 <menu+0x29a8>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f003 fed1 	bl	80078d4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003b32:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <menu+0x29e0>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	220a      	movs	r2, #10
 8003b38:	4944      	ldr	r1, [pc, #272]	; (8003c4c <menu+0x29b0>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f008 fa06 	bl	800bf4c <itoa>
		lcd_print(2, 16, snum);
 8003b40:	4a42      	ldr	r2, [pc, #264]	; (8003c4c <menu+0x29b0>)
 8003b42:	2110      	movs	r1, #16
 8003b44:	2002      	movs	r0, #2
 8003b46:	f003 fec5 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4840      	ldr	r0, [pc, #256]	; (8003c50 <menu+0x29b4>)
 8003b4e:	f005 f9d1 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d115      	bne.n	8003b84 <menu+0x28e8>
 8003b58:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <menu+0x29b8>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003b66:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <menu+0x29e0>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <menu+0x29e0>)
 8003b70:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003b72:	4b42      	ldr	r3, [pc, #264]	; (8003c7c <menu+0x29e0>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d902      	bls.n	8003b80 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003b7a:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <menu+0x29e0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b80:	f000 ff56 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b84:	2104      	movs	r1, #4
 8003b86:	4832      	ldr	r0, [pc, #200]	; (8003c50 <menu+0x29b4>)
 8003b88:	f005 f9b4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d115      	bne.n	8003bbe <menu+0x2922>
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <menu+0x29b8>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ba0:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <menu+0x29e0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <menu+0x29e0>)
 8003baa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003bac:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <menu+0x29e0>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d902      	bls.n	8003bba <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <menu+0x29e0>)
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bba:	f000 ff39 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bbe:	2108      	movs	r1, #8
 8003bc0:	4823      	ldr	r0, [pc, #140]	; (8003c50 <menu+0x29b4>)
 8003bc2:	f005 f997 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10d      	bne.n	8003be8 <menu+0x294c>
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <menu+0x29b8>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003bda:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <menu+0x29e0>)
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <menu+0x29bc>)
 8003be0:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <menu+0x29c0>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <menu+0x29c4>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b19      	cmp	r3, #25
 8003bee:	f040 80c4 	bne.w	8003d7a <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <menu+0x29c8>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d113      	bne.n	8003c22 <menu+0x2986>
			if(dilSecim == 0) {
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <menu+0x29a4>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c02:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <menu+0x29e4>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	2001      	movs	r0, #1
 8003c08:	f003 fe64 	bl	80078d4 <lcd_print>
 8003c0c:	e047      	b.n	8003c9e <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <menu+0x29a4>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d143      	bne.n	8003c9e <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <menu+0x29e8>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f003 fe5a 	bl	80078d4 <lcd_print>
 8003c20:	e03d      	b.n	8003c9e <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <menu+0x29c8>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d139      	bne.n	8003c9e <menu+0x2a02>
			if(dilSecim == 0) {
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <menu+0x29a4>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d12c      	bne.n	8003c8c <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <menu+0x29ec>)
 8003c34:	2101      	movs	r1, #1
 8003c36:	2001      	movs	r0, #1
 8003c38:	f003 fe4c 	bl	80078d4 <lcd_print>
 8003c3c:	e02f      	b.n	8003c9e <menu+0x2a02>
 8003c3e:	bf00      	nop
 8003c40:	20000221 	.word	0x20000221
 8003c44:	0800d4d8 	.word	0x0800d4d8
 8003c48:	20000215 	.word	0x20000215
 8003c4c:	2000019c 	.word	0x2000019c
 8003c50:	40010800 	.word	0x40010800
 8003c54:	2000022f 	.word	0x2000022f
 8003c58:	2000012c 	.word	0x2000012c
 8003c5c:	2000022c 	.word	0x2000022c
 8003c60:	20000200 	.word	0x20000200
 8003c64:	2000020f 	.word	0x2000020f
 8003c68:	0800d510 	.word	0x0800d510
 8003c6c:	0800d524 	.word	0x0800d524
 8003c70:	0800d538 	.word	0x0800d538
 8003c74:	0800d54c 	.word	0x0800d54c
 8003c78:	0800d164 	.word	0x0800d164
 8003c7c:	20000216 	.word	0x20000216
 8003c80:	0800d560 	.word	0x0800d560
 8003c84:	0800d574 	.word	0x0800d574
 8003c88:	0800d588 	.word	0x0800d588
			} else if(dilSecim == 1) {
 8003c8c:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <menu+0x2bc0>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d104      	bne.n	8003c9e <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003c94:	4a72      	ldr	r2, [pc, #456]	; (8003e60 <menu+0x2bc4>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f003 fe1b 	bl	80078d4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <menu+0x2bc0>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ca6:	4a6f      	ldr	r2, [pc, #444]	; (8003e64 <menu+0x2bc8>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2002      	movs	r0, #2
 8003cac:	f003 fe12 	bl	80078d4 <lcd_print>
 8003cb0:	e008      	b.n	8003cc4 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <menu+0x2bc0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d104      	bne.n	8003cc4 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003cba:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <menu+0x2bcc>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f003 fe08 	bl	80078d4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003cc4:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <menu+0x2bd0>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	220a      	movs	r2, #10
 8003cca:	4969      	ldr	r1, [pc, #420]	; (8003e70 <menu+0x2bd4>)
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f008 f93d 	bl	800bf4c <itoa>
		lcd_print(2,16,snum);
 8003cd2:	4a67      	ldr	r2, [pc, #412]	; (8003e70 <menu+0x2bd4>)
 8003cd4:	2110      	movs	r1, #16
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f003 fdfc 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4865      	ldr	r0, [pc, #404]	; (8003e74 <menu+0x2bd8>)
 8003ce0:	f005 f908 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d115      	bne.n	8003d16 <menu+0x2a7a>
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <menu+0x2bdc>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	f083 0301 	eor.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003cf8:	4b5c      	ldr	r3, [pc, #368]	; (8003e6c <menu+0x2bd0>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	4b5a      	ldr	r3, [pc, #360]	; (8003e6c <menu+0x2bd0>)
 8003d02:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <menu+0x2bd0>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d902      	bls.n	8003d12 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d0c:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <menu+0x2bd0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d12:	f000 fe8d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d16:	2104      	movs	r1, #4
 8003d18:	4856      	ldr	r0, [pc, #344]	; (8003e74 <menu+0x2bd8>)
 8003d1a:	f005 f8eb 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d115      	bne.n	8003d50 <menu+0x2ab4>
 8003d24:	4b54      	ldr	r3, [pc, #336]	; (8003e78 <menu+0x2bdc>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	f083 0301 	eor.w	r3, r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003d32:	4b4e      	ldr	r3, [pc, #312]	; (8003e6c <menu+0x2bd0>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <menu+0x2bd0>)
 8003d3c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <menu+0x2bd0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <menu+0x2bd0>)
 8003d48:	2205      	movs	r2, #5
 8003d4a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d4c:	f000 fe70 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d50:	2108      	movs	r1, #8
 8003d52:	4848      	ldr	r0, [pc, #288]	; (8003e74 <menu+0x2bd8>)
 8003d54:	f005 f8ce 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10d      	bne.n	8003d7a <menu+0x2ade>
 8003d5e:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <menu+0x2bdc>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <menu+0x2bd0>)
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <menu+0x2be0>)
 8003d72:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003d74:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <menu+0x2be4>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003d7a:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <menu+0x2be8>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b1a      	cmp	r3, #26
 8003d80:	f040 80ec 	bne.w	8003f5c <menu+0x2cc0>
		if(dilSecim == 0) {
 8003d84:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <menu+0x2bc0>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003d8c:	4a3e      	ldr	r2, [pc, #248]	; (8003e88 <menu+0x2bec>)
 8003d8e:	2101      	movs	r1, #1
 8003d90:	2001      	movs	r0, #1
 8003d92:	f003 fd9f 	bl	80078d4 <lcd_print>
 8003d96:	e008      	b.n	8003daa <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003d98:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <menu+0x2bc0>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d104      	bne.n	8003daa <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003da0:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <menu+0x2bf0>)
 8003da2:	2101      	movs	r1, #1
 8003da4:	2001      	movs	r0, #1
 8003da6:	f003 fd95 	bl	80078d4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003daa:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <menu+0x2bf4>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b63      	cmp	r3, #99	; 0x63
 8003db0:	d91e      	bls.n	8003df0 <menu+0x2b54>
			if(dilSecim == 0) {
 8003db2:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <menu+0x2bc0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <menu+0x2bc8>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f003 fd88 	bl	80078d4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <menu+0x2bc0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d104      	bne.n	8003dd6 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003dcc:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <menu+0x2bcc>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f003 fd7f 	bl	80078d4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <menu+0x2bf4>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	220a      	movs	r2, #10
 8003ddc:	4924      	ldr	r1, [pc, #144]	; (8003e70 <menu+0x2bd4>)
 8003dde:	4618      	mov	r0, r3
 8003de0:	f008 f8b4 	bl	800bf4c <itoa>
			lcd_print(2,14,snum);
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <menu+0x2bd4>)
 8003de6:	210e      	movs	r1, #14
 8003de8:	2002      	movs	r0, #2
 8003dea:	f003 fd73 	bl	80078d4 <lcd_print>
 8003dee:	e066      	b.n	8003ebe <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <menu+0x2bf4>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b09      	cmp	r3, #9
 8003df6:	d923      	bls.n	8003e40 <menu+0x2ba4>
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <menu+0x2bf4>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b63      	cmp	r3, #99	; 0x63
 8003dfe:	d81f      	bhi.n	8003e40 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <menu+0x2bc0>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e08:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <menu+0x2bc8>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	2002      	movs	r0, #2
 8003e0e:	f003 fd61 	bl	80078d4 <lcd_print>
 8003e12:	e008      	b.n	8003e26 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <menu+0x2bc0>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d104      	bne.n	8003e26 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e1c:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <menu+0x2bcc>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	2002      	movs	r0, #2
 8003e22:	f003 fd57 	bl	80078d4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e26:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <menu+0x2bf4>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	220a      	movs	r2, #10
 8003e2c:	4910      	ldr	r1, [pc, #64]	; (8003e70 <menu+0x2bd4>)
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f008 f88c 	bl	800bf4c <itoa>
			lcd_print(2, 15, snum);
 8003e34:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <menu+0x2bd4>)
 8003e36:	210f      	movs	r1, #15
 8003e38:	2002      	movs	r0, #2
 8003e3a:	f003 fd4b 	bl	80078d4 <lcd_print>
 8003e3e:	e03e      	b.n	8003ebe <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <menu+0x2bf4>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b09      	cmp	r3, #9
 8003e46:	d83a      	bhi.n	8003ebe <menu+0x2c22>
			if(dilSecim == 0) {
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <menu+0x2bc0>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d121      	bne.n	8003e94 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <menu+0x2bc8>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	2002      	movs	r0, #2
 8003e56:	f003 fd3d 	bl	80078d4 <lcd_print>
 8003e5a:	e024      	b.n	8003ea6 <menu+0x2c0a>
 8003e5c:	20000221 	.word	0x20000221
 8003e60:	0800d59c 	.word	0x0800d59c
 8003e64:	0800d164 	.word	0x0800d164
 8003e68:	0800d4d8 	.word	0x0800d4d8
 8003e6c:	20000217 	.word	0x20000217
 8003e70:	2000019c 	.word	0x2000019c
 8003e74:	40010800 	.word	0x40010800
 8003e78:	2000022f 	.word	0x2000022f
 8003e7c:	2000012c 	.word	0x2000012c
 8003e80:	2000022c 	.word	0x2000022c
 8003e84:	20000200 	.word	0x20000200
 8003e88:	0800d5b0 	.word	0x0800d5b0
 8003e8c:	0800d5c4 	.word	0x0800d5c4
 8003e90:	20000218 	.word	0x20000218
			} else if(dilSecim == 1) {
 8003e94:	4b8f      	ldr	r3, [pc, #572]	; (80040d4 <menu+0x2e38>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d104      	bne.n	8003ea6 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e9c:	4a8e      	ldr	r2, [pc, #568]	; (80040d8 <menu+0x2e3c>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f003 fd17 	bl	80078d4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ea6:	4b8d      	ldr	r3, [pc, #564]	; (80040dc <menu+0x2e40>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	220a      	movs	r2, #10
 8003eac:	498c      	ldr	r1, [pc, #560]	; (80040e0 <menu+0x2e44>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f008 f84c 	bl	800bf4c <itoa>
			lcd_print(2, 16, snum);
 8003eb4:	4a8a      	ldr	r2, [pc, #552]	; (80040e0 <menu+0x2e44>)
 8003eb6:	2110      	movs	r1, #16
 8003eb8:	2002      	movs	r0, #2
 8003eba:	f003 fd0b 	bl	80078d4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	4888      	ldr	r0, [pc, #544]	; (80040e4 <menu+0x2e48>)
 8003ec2:	f005 f817 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d115      	bne.n	8003ef8 <menu+0x2c5c>
 8003ecc:	4b86      	ldr	r3, [pc, #536]	; (80040e8 <menu+0x2e4c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00e      	beq.n	8003ef8 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003eda:	4b80      	ldr	r3, [pc, #512]	; (80040dc <menu+0x2e40>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b7e      	ldr	r3, [pc, #504]	; (80040dc <menu+0x2e40>)
 8003ee4:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ee6:	4b7d      	ldr	r3, [pc, #500]	; (80040dc <menu+0x2e40>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2bb4      	cmp	r3, #180	; 0xb4
 8003eec:	d902      	bls.n	8003ef4 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003eee:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <menu+0x2e40>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ef4:	f000 fd9c 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ef8:	2104      	movs	r1, #4
 8003efa:	487a      	ldr	r0, [pc, #488]	; (80040e4 <menu+0x2e48>)
 8003efc:	f004 fffa 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d115      	bne.n	8003f32 <menu+0x2c96>
 8003f06:	4b78      	ldr	r3, [pc, #480]	; (80040e8 <menu+0x2e4c>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	f083 0301 	eor.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f14:	4b71      	ldr	r3, [pc, #452]	; (80040dc <menu+0x2e40>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <menu+0x2e40>)
 8003f1e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003f20:	4b6e      	ldr	r3, [pc, #440]	; (80040dc <menu+0x2e40>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2bb5      	cmp	r3, #181	; 0xb5
 8003f26:	d902      	bls.n	8003f2e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003f28:	4b6c      	ldr	r3, [pc, #432]	; (80040dc <menu+0x2e40>)
 8003f2a:	22b4      	movs	r2, #180	; 0xb4
 8003f2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f2e:	f000 fd7f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f32:	2108      	movs	r1, #8
 8003f34:	486b      	ldr	r0, [pc, #428]	; (80040e4 <menu+0x2e48>)
 8003f36:	f004 ffdd 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10d      	bne.n	8003f5c <menu+0x2cc0>
 8003f40:	4b69      	ldr	r3, [pc, #420]	; (80040e8 <menu+0x2e4c>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	f083 0301 	eor.w	r3, r3, #1
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d006      	beq.n	8003f5c <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003f4e:	4b63      	ldr	r3, [pc, #396]	; (80040dc <menu+0x2e40>)
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <menu+0x2e50>)
 8003f54:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003f56:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <menu+0x2e54>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003f5c:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <menu+0x2e58>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b1b      	cmp	r3, #27
 8003f62:	f040 8083 	bne.w	800406c <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003f66:	4a64      	ldr	r2, [pc, #400]	; (80040f8 <menu+0x2e5c>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	f003 fcb2 	bl	80078d4 <lcd_print>

		if(buzzer == 0) {
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <menu+0x2e60>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d113      	bne.n	8003fa0 <menu+0x2d04>
			if(dilSecim == 0) {
 8003f78:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <menu+0x2e38>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003f80:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <menu+0x2e64>)
 8003f82:	2101      	movs	r1, #1
 8003f84:	2002      	movs	r0, #2
 8003f86:	f003 fca5 	bl	80078d4 <lcd_print>
 8003f8a:	e020      	b.n	8003fce <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f8c:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <menu+0x2e38>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d11c      	bne.n	8003fce <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003f94:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <menu+0x2e68>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f003 fc9b 	bl	80078d4 <lcd_print>
 8003f9e:	e016      	b.n	8003fce <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003fa0:	4b56      	ldr	r3, [pc, #344]	; (80040fc <menu+0x2e60>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d112      	bne.n	8003fce <menu+0x2d32>
			if(dilSecim == 0) {
 8003fa8:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <menu+0x2e38>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003fb0:	4a55      	ldr	r2, [pc, #340]	; (8004108 <menu+0x2e6c>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f003 fc8d 	bl	80078d4 <lcd_print>
 8003fba:	e008      	b.n	8003fce <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003fbc:	4b45      	ldr	r3, [pc, #276]	; (80040d4 <menu+0x2e38>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d104      	bne.n	8003fce <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003fc4:	4a51      	ldr	r2, [pc, #324]	; (800410c <menu+0x2e70>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	2002      	movs	r0, #2
 8003fca:	f003 fc83 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4844      	ldr	r0, [pc, #272]	; (80040e4 <menu+0x2e48>)
 8003fd2:	f004 ff8f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d115      	bne.n	8004008 <menu+0x2d6c>
 8003fdc:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <menu+0x2e4c>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f083 0301 	eor.w	r3, r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <menu+0x2e60>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b42      	ldr	r3, [pc, #264]	; (80040fc <menu+0x2e60>)
 8003ff4:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <menu+0x2e60>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d902      	bls.n	8004004 <menu+0x2d68>
				buzzer = 0;
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <menu+0x2e60>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004004:	f000 fd14 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004008:	2104      	movs	r1, #4
 800400a:	4836      	ldr	r0, [pc, #216]	; (80040e4 <menu+0x2e48>)
 800400c:	f004 ff72 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d115      	bne.n	8004042 <menu+0x2da6>
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <menu+0x2e4c>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	f083 0301 	eor.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004024:	4b35      	ldr	r3, [pc, #212]	; (80040fc <menu+0x2e60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	3b01      	subs	r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	4b33      	ldr	r3, [pc, #204]	; (80040fc <menu+0x2e60>)
 800402e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <menu+0x2e60>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <menu+0x2da2>
		   		buzzer = 1;
 8004038:	4b30      	ldr	r3, [pc, #192]	; (80040fc <menu+0x2e60>)
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800403e:	f000 fcf7 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004042:	2108      	movs	r1, #8
 8004044:	4827      	ldr	r0, [pc, #156]	; (80040e4 <menu+0x2e48>)
 8004046:	f004 ff55 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800404a:	4603      	mov	r3, r0
 800404c:	2b01      	cmp	r3, #1
 800404e:	d10d      	bne.n	800406c <menu+0x2dd0>
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <menu+0x2e4c>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f083 0301 	eor.w	r3, r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d006      	beq.n	800406c <menu+0x2dd0>
			eepromData[25] = buzzer;
 800405e:	4b27      	ldr	r3, [pc, #156]	; (80040fc <menu+0x2e60>)
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <menu+0x2e50>)
 8004064:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004066:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <menu+0x2e54>)
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <menu+0x2e58>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b1c      	cmp	r3, #28
 8004072:	f040 80ab 	bne.w	80041cc <menu+0x2f30>
		calismaSayModu = 0;
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <menu+0x2e74>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <menu+0x2e78>)
 800407e:	2101      	movs	r1, #1
 8004080:	2001      	movs	r0, #1
 8004082:	f003 fc27 	bl	80078d4 <lcd_print>

		if(demoMode == 0) {
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <menu+0x2e7c>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d113      	bne.n	80040b6 <menu+0x2e1a>
			if(dilSecim == 0) {
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <menu+0x2e38>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <menu+0x2e64>)
 8004098:	2101      	movs	r1, #1
 800409a:	2002      	movs	r0, #2
 800409c:	f003 fc1a 	bl	80078d4 <lcd_print>
 80040a0:	e045      	b.n	800412e <menu+0x2e92>
			} else if(dilSecim == 1) {
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <menu+0x2e38>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d141      	bne.n	800412e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <menu+0x2e68>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	2002      	movs	r0, #2
 80040b0:	f003 fc10 	bl	80078d4 <lcd_print>
 80040b4:	e03b      	b.n	800412e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <menu+0x2e7c>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d137      	bne.n	800412e <menu+0x2e92>
			if(dilSecim == 0){
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <menu+0x2e38>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d12a      	bne.n	800411c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <menu+0x2e6c>)
 80040c8:	2101      	movs	r1, #1
 80040ca:	2002      	movs	r0, #2
 80040cc:	f003 fc02 	bl	80078d4 <lcd_print>
 80040d0:	e02d      	b.n	800412e <menu+0x2e92>
 80040d2:	bf00      	nop
 80040d4:	20000221 	.word	0x20000221
 80040d8:	0800d4d8 	.word	0x0800d4d8
 80040dc:	20000218 	.word	0x20000218
 80040e0:	2000019c 	.word	0x2000019c
 80040e4:	40010800 	.word	0x40010800
 80040e8:	2000022f 	.word	0x2000022f
 80040ec:	2000012c 	.word	0x2000012c
 80040f0:	2000022c 	.word	0x2000022c
 80040f4:	20000200 	.word	0x20000200
 80040f8:	0800d5d8 	.word	0x0800d5d8
 80040fc:	2000021c 	.word	0x2000021c
 8004100:	0800cf00 	.word	0x0800cf00
 8004104:	0800cf14 	.word	0x0800cf14
 8004108:	0800cf60 	.word	0x0800cf60
 800410c:	0800cf74 	.word	0x0800cf74
 8004110:	20000220 	.word	0x20000220
 8004114:	0800d5ec 	.word	0x0800d5ec
 8004118:	2000021e 	.word	0x2000021e
			} else if(dilSecim == 1) {
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <menu+0x3048>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d104      	bne.n	800412e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004124:	4a70      	ldr	r2, [pc, #448]	; (80042e8 <menu+0x304c>)
 8004126:	2101      	movs	r1, #1
 8004128:	2002      	movs	r0, #2
 800412a:	f003 fbd3 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800412e:	2102      	movs	r1, #2
 8004130:	486e      	ldr	r0, [pc, #440]	; (80042ec <menu+0x3050>)
 8004132:	f004 fedf 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d115      	bne.n	8004168 <menu+0x2ecc>
 800413c:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <menu+0x3054>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f083 0301 	eor.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <menu+0x2ecc>
			demoMode = demoMode + 1;
 800414a:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <menu+0x3058>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <menu+0x3058>)
 8004154:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004156:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <menu+0x3058>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d902      	bls.n	8004164 <menu+0x2ec8>
				demoMode = 0;
 800415e:	4b65      	ldr	r3, [pc, #404]	; (80042f4 <menu+0x3058>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004164:	f000 fc64 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004168:	2104      	movs	r1, #4
 800416a:	4860      	ldr	r0, [pc, #384]	; (80042ec <menu+0x3050>)
 800416c:	f004 fec2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004170:	4603      	mov	r3, r0
 8004172:	2b01      	cmp	r3, #1
 8004174:	d115      	bne.n	80041a2 <menu+0x2f06>
 8004176:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <menu+0x3054>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	f083 0301 	eor.w	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <menu+0x3058>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	3b01      	subs	r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <menu+0x3058>)
 800418e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004190:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <menu+0x3058>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <menu+0x2f02>
		   		demoMode = 1;
 8004198:	4b56      	ldr	r3, [pc, #344]	; (80042f4 <menu+0x3058>)
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800419e:	f000 fc47 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041a2:	2108      	movs	r1, #8
 80041a4:	4851      	ldr	r0, [pc, #324]	; (80042ec <menu+0x3050>)
 80041a6:	f004 fea5 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10d      	bne.n	80041cc <menu+0x2f30>
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <menu+0x3054>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <menu+0x2f30>
			eepromData[26] = demoMode;
 80041be:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <menu+0x3058>)
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <menu+0x305c>)
 80041c4:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80041c6:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <menu+0x3060>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80041cc:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <menu+0x3064>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b1d      	cmp	r3, #29
 80041d2:	f040 8132 	bne.w	800443a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80041d6:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <menu+0x3068>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d113      	bne.n	8004206 <menu+0x2f6a>
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <menu+0x306c>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <menu+0x2f6a>
 80041e6:	4b49      	ldr	r3, [pc, #292]	; (800430c <menu+0x3070>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <menu+0x2f6a>
 80041ee:	4b48      	ldr	r3, [pc, #288]	; (8004310 <menu+0x3074>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d107      	bne.n	8004206 <menu+0x2f6a>
 80041f6:	4b47      	ldr	r3, [pc, #284]	; (8004314 <menu+0x3078>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80041fe:	4b46      	ldr	r3, [pc, #280]	; (8004318 <menu+0x307c>)
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	e002      	b.n	800420c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004206:	4b44      	ldr	r3, [pc, #272]	; (8004318 <menu+0x307c>)
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <menu+0x3080>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d154      	bne.n	80042be <menu+0x3022>
			if(dilSecim == 0) {
 8004214:	4b33      	ldr	r3, [pc, #204]	; (80042e4 <menu+0x3048>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800421c:	4a40      	ldr	r2, [pc, #256]	; (8004320 <menu+0x3084>)
 800421e:	2101      	movs	r1, #1
 8004220:	2001      	movs	r0, #1
 8004222:	f003 fb57 	bl	80078d4 <lcd_print>
 8004226:	e008      	b.n	800423a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004228:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <menu+0x3048>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d104      	bne.n	800423a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004230:	4a3c      	ldr	r2, [pc, #240]	; (8004324 <menu+0x3088>)
 8004232:	2101      	movs	r1, #1
 8004234:	2001      	movs	r0, #1
 8004236:	f003 fb4d 	bl	80078d4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <menu+0x3078>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	220a      	movs	r2, #10
 8004240:	4939      	ldr	r1, [pc, #228]	; (8004328 <menu+0x308c>)
 8004242:	4618      	mov	r0, r3
 8004244:	f007 fe82 	bl	800bf4c <itoa>
			lcd_print(2, 12, snum);
 8004248:	4a37      	ldr	r2, [pc, #220]	; (8004328 <menu+0x308c>)
 800424a:	210c      	movs	r1, #12
 800424c:	2002      	movs	r0, #2
 800424e:	f003 fb41 	bl	80078d4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004252:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <menu+0x3074>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	220a      	movs	r2, #10
 8004258:	4933      	ldr	r1, [pc, #204]	; (8004328 <menu+0x308c>)
 800425a:	4618      	mov	r0, r3
 800425c:	f007 fe76 	bl	800bf4c <itoa>
			lcd_print(2, 13, snum);
 8004260:	4a31      	ldr	r2, [pc, #196]	; (8004328 <menu+0x308c>)
 8004262:	210d      	movs	r1, #13
 8004264:	2002      	movs	r0, #2
 8004266:	f003 fb35 	bl	80078d4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800426a:	4b28      	ldr	r3, [pc, #160]	; (800430c <menu+0x3070>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	220a      	movs	r2, #10
 8004270:	492d      	ldr	r1, [pc, #180]	; (8004328 <menu+0x308c>)
 8004272:	4618      	mov	r0, r3
 8004274:	f007 fe6a 	bl	800bf4c <itoa>
			lcd_print(2, 14, snum);
 8004278:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <menu+0x308c>)
 800427a:	210e      	movs	r1, #14
 800427c:	2002      	movs	r0, #2
 800427e:	f003 fb29 	bl	80078d4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004282:	4b21      	ldr	r3, [pc, #132]	; (8004308 <menu+0x306c>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	220a      	movs	r2, #10
 8004288:	4927      	ldr	r1, [pc, #156]	; (8004328 <menu+0x308c>)
 800428a:	4618      	mov	r0, r3
 800428c:	f007 fe5e 	bl	800bf4c <itoa>
			lcd_print(2, 15, snum);
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <menu+0x308c>)
 8004292:	210f      	movs	r1, #15
 8004294:	2002      	movs	r0, #2
 8004296:	f003 fb1d 	bl	80078d4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <menu+0x3068>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	220a      	movs	r2, #10
 80042a0:	4921      	ldr	r1, [pc, #132]	; (8004328 <menu+0x308c>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	f007 fe52 	bl	800bf4c <itoa>
			lcd_print(2, 16, snum);
 80042a8:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <menu+0x308c>)
 80042aa:	2110      	movs	r1, #16
 80042ac:	2002      	movs	r0, #2
 80042ae:	f003 fb11 	bl	80078d4 <lcd_print>

			lcd_print(2, 1, "           ");
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <menu+0x3090>)
 80042b4:	2101      	movs	r1, #1
 80042b6:	2002      	movs	r0, #2
 80042b8:	f003 fb0c 	bl	80078d4 <lcd_print>
 80042bc:	e048      	b.n	8004350 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <menu+0x3080>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d144      	bne.n	8004350 <menu+0x30b4>
			if(dilSecim == 0) {
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <menu+0x3048>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d132      	bne.n	8004334 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042ce:	4a14      	ldr	r2, [pc, #80]	; (8004320 <menu+0x3084>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	2001      	movs	r0, #1
 80042d4:	f003 fafe 	bl	80078d4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <menu+0x3094>)
 80042da:	2101      	movs	r1, #1
 80042dc:	2002      	movs	r0, #2
 80042de:	f003 faf9 	bl	80078d4 <lcd_print>
 80042e2:	e035      	b.n	8004350 <menu+0x30b4>
 80042e4:	20000221 	.word	0x20000221
 80042e8:	0800cf74 	.word	0x0800cf74
 80042ec:	40010800 	.word	0x40010800
 80042f0:	2000022f 	.word	0x2000022f
 80042f4:	2000021e 	.word	0x2000021e
 80042f8:	2000012c 	.word	0x2000012c
 80042fc:	2000022c 	.word	0x2000022c
 8004300:	20000200 	.word	0x20000200
 8004304:	200001fd 	.word	0x200001fd
 8004308:	200001fe 	.word	0x200001fe
 800430c:	20000000 	.word	0x20000000
 8004310:	20000001 	.word	0x20000001
 8004314:	200001ff 	.word	0x200001ff
 8004318:	20000241 	.word	0x20000241
 800431c:	20000220 	.word	0x20000220
 8004320:	0800d5fc 	.word	0x0800d5fc
 8004324:	0800d610 	.word	0x0800d610
 8004328:	2000019c 	.word	0x2000019c
 800432c:	0800d624 	.word	0x0800d624
 8004330:	0800d630 	.word	0x0800d630
			} else if(dilSecim == 1) {
 8004334:	4b94      	ldr	r3, [pc, #592]	; (8004588 <menu+0x32ec>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d109      	bne.n	8004350 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800433c:	4a93      	ldr	r2, [pc, #588]	; (800458c <menu+0x32f0>)
 800433e:	2101      	movs	r1, #1
 8004340:	2001      	movs	r0, #1
 8004342:	f003 fac7 	bl	80078d4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004346:	4a92      	ldr	r2, [pc, #584]	; (8004590 <menu+0x32f4>)
 8004348:	2101      	movs	r1, #1
 800434a:	2002      	movs	r0, #2
 800434c:	f003 fac2 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004350:	2102      	movs	r1, #2
 8004352:	4890      	ldr	r0, [pc, #576]	; (8004594 <menu+0x32f8>)
 8004354:	f004 fdce 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d119      	bne.n	8004392 <menu+0x30f6>
 800435e:	4b8e      	ldr	r3, [pc, #568]	; (8004598 <menu+0x32fc>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	f083 0301 	eor.w	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <menu+0x30f6>
 800436c:	4b8b      	ldr	r3, [pc, #556]	; (800459c <menu+0x3300>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004374:	4b8a      	ldr	r3, [pc, #552]	; (80045a0 <menu+0x3304>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b88      	ldr	r3, [pc, #544]	; (80045a0 <menu+0x3304>)
 800437e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004380:	4b87      	ldr	r3, [pc, #540]	; (80045a0 <menu+0x3304>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d902      	bls.n	800438e <menu+0x30f2>
				calismaSayModu = 0;
 8004388:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <menu+0x3304>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800438e:	f000 fb4f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004392:	2104      	movs	r1, #4
 8004394:	487f      	ldr	r0, [pc, #508]	; (8004594 <menu+0x32f8>)
 8004396:	f004 fdad 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800439a:	4603      	mov	r3, r0
 800439c:	2b01      	cmp	r3, #1
 800439e:	d119      	bne.n	80043d4 <menu+0x3138>
 80043a0:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <menu+0x32fc>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <menu+0x3138>
 80043ae:	4b7b      	ldr	r3, [pc, #492]	; (800459c <menu+0x3300>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80043b6:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <menu+0x3304>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b78      	ldr	r3, [pc, #480]	; (80045a0 <menu+0x3304>)
 80043c0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80043c2:	4b77      	ldr	r3, [pc, #476]	; (80045a0 <menu+0x3304>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <menu+0x3134>
		   		calismaSayModu = 1;
 80043ca:	4b75      	ldr	r3, [pc, #468]	; (80045a0 <menu+0x3304>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043d0:	f000 fb2e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043d4:	2108      	movs	r1, #8
 80043d6:	486f      	ldr	r0, [pc, #444]	; (8004594 <menu+0x32f8>)
 80043d8:	f004 fd8c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d12b      	bne.n	800443a <menu+0x319e>
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <menu+0x32fc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d024      	beq.n	800443a <menu+0x319e>
			eepromData[32] = 0;
 80043f0:	4b6c      	ldr	r3, [pc, #432]	; (80045a4 <menu+0x3308>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80043f8:	4b6a      	ldr	r3, [pc, #424]	; (80045a4 <menu+0x3308>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80043fe:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <menu+0x3308>)
 8004400:	2200      	movs	r2, #0
 8004402:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004404:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <menu+0x3308>)
 8004406:	2200      	movs	r2, #0
 8004408:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <menu+0x3308>)
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004410:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <menu+0x330c>)
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004416:	4b65      	ldr	r3, [pc, #404]	; (80045ac <menu+0x3310>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800441c:	4b64      	ldr	r3, [pc, #400]	; (80045b0 <menu+0x3314>)
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004422:	4b64      	ldr	r3, [pc, #400]	; (80045b4 <menu+0x3318>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004428:	4b63      	ldr	r3, [pc, #396]	; (80045b8 <menu+0x331c>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800442e:	4b5c      	ldr	r3, [pc, #368]	; (80045a0 <menu+0x3304>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <menu+0x3320>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800443a:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <menu+0x3324>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b1e      	cmp	r3, #30
 8004440:	d16f      	bne.n	8004522 <menu+0x3286>
		calismaSayModu = 0;
 8004442:	4b57      	ldr	r3, [pc, #348]	; (80045a0 <menu+0x3304>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004448:	4b4f      	ldr	r3, [pc, #316]	; (8004588 <menu+0x32ec>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004450:	4a5c      	ldr	r2, [pc, #368]	; (80045c4 <menu+0x3328>)
 8004452:	2101      	movs	r1, #1
 8004454:	2001      	movs	r0, #1
 8004456:	f003 fa3d 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800445a:	4a5b      	ldr	r2, [pc, #364]	; (80045c8 <menu+0x332c>)
 800445c:	2101      	movs	r1, #1
 800445e:	2002      	movs	r0, #2
 8004460:	f003 fa38 	bl	80078d4 <lcd_print>
 8004464:	e00d      	b.n	8004482 <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004466:	4b48      	ldr	r3, [pc, #288]	; (8004588 <menu+0x32ec>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d109      	bne.n	8004482 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800446e:	4a57      	ldr	r2, [pc, #348]	; (80045cc <menu+0x3330>)
 8004470:	2101      	movs	r1, #1
 8004472:	2001      	movs	r0, #1
 8004474:	f003 fa2e 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004478:	4a55      	ldr	r2, [pc, #340]	; (80045d0 <menu+0x3334>)
 800447a:	2101      	movs	r1, #1
 800447c:	2002      	movs	r0, #2
 800447e:	f003 fa29 	bl	80078d4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004482:	2102      	movs	r1, #2
 8004484:	4843      	ldr	r0, [pc, #268]	; (8004594 <menu+0x32f8>)
 8004486:	f004 fd35 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800448a:	4603      	mov	r3, r0
 800448c:	2b01      	cmp	r3, #1
 800448e:	d115      	bne.n	80044bc <menu+0x3220>
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <menu+0x32fc>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f083 0301 	eor.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <menu+0x3220>
			dilSecim = dilSecim + 1;
 800449e:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <menu+0x32ec>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b38      	ldr	r3, [pc, #224]	; (8004588 <menu+0x32ec>)
 80044a8:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80044aa:	4b37      	ldr	r3, [pc, #220]	; (8004588 <menu+0x32ec>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d902      	bls.n	80044b8 <menu+0x321c>
				dilSecim = 0;
 80044b2:	4b35      	ldr	r3, [pc, #212]	; (8004588 <menu+0x32ec>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044b8:	f000 faba 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044bc:	2104      	movs	r1, #4
 80044be:	4835      	ldr	r0, [pc, #212]	; (8004594 <menu+0x32f8>)
 80044c0:	f004 fd18 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d115      	bne.n	80044f6 <menu+0x325a>
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <menu+0x32fc>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	f083 0301 	eor.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80044d8:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <menu+0x32ec>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	4b29      	ldr	r3, [pc, #164]	; (8004588 <menu+0x32ec>)
 80044e2:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80044e4:	4b28      	ldr	r3, [pc, #160]	; (8004588 <menu+0x32ec>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <menu+0x3256>
		   		dilSecim = 1;
 80044ec:	4b26      	ldr	r3, [pc, #152]	; (8004588 <menu+0x32ec>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80044f2:	f000 fa9d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044f6:	2108      	movs	r1, #8
 80044f8:	4826      	ldr	r0, [pc, #152]	; (8004594 <menu+0x32f8>)
 80044fa:	f004 fcfb 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10e      	bne.n	8004522 <menu+0x3286>
 8004504:	4b24      	ldr	r3, [pc, #144]	; (8004598 <menu+0x32fc>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <menu+0x32ec>)
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <menu+0x3308>)
 8004518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <menu+0x3320>)
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <menu+0x3324>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b1f      	cmp	r3, #31
 8004528:	f040 80b7 	bne.w	800469a <menu+0x33fe>
		calismaSayModu = 0;
 800452c:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <menu+0x3304>)
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004532:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <menu+0x3338>)
 8004534:	2101      	movs	r1, #1
 8004536:	2001      	movs	r0, #1
 8004538:	f003 f9cc 	bl	80078d4 <lcd_print>

		if(iotMode == 0) {
 800453c:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <menu+0x333c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d113      	bne.n	800456c <menu+0x32d0>
			if(dilSecim == 0) {
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <menu+0x32ec>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 800454c:	4a23      	ldr	r2, [pc, #140]	; (80045dc <menu+0x3340>)
 800454e:	2101      	movs	r1, #1
 8004550:	2002      	movs	r0, #2
 8004552:	f003 f9bf 	bl	80078d4 <lcd_print>
 8004556:	e050      	b.n	80045fa <menu+0x335e>
			} else if(dilSecim == 1) {
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <menu+0x32ec>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d14c      	bne.n	80045fa <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <menu+0x3344>)
 8004562:	2101      	movs	r1, #1
 8004564:	2002      	movs	r0, #2
 8004566:	f003 f9b5 	bl	80078d4 <lcd_print>
 800456a:	e046      	b.n	80045fa <menu+0x335e>
			}
		} else if(iotMode == 1) {
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <menu+0x333c>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d142      	bne.n	80045fa <menu+0x335e>
			if(dilSecim == 0) {
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <menu+0x32ec>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d135      	bne.n	80045e8 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <menu+0x3348>)
 800457e:	2101      	movs	r1, #1
 8004580:	2002      	movs	r0, #2
 8004582:	f003 f9a7 	bl	80078d4 <lcd_print>
 8004586:	e038      	b.n	80045fa <menu+0x335e>
 8004588:	20000221 	.word	0x20000221
 800458c:	0800d610 	.word	0x0800d610
 8004590:	0800d644 	.word	0x0800d644
 8004594:	40010800 	.word	0x40010800
 8004598:	2000022f 	.word	0x2000022f
 800459c:	20000241 	.word	0x20000241
 80045a0:	20000220 	.word	0x20000220
 80045a4:	2000012c 	.word	0x2000012c
 80045a8:	200001ff 	.word	0x200001ff
 80045ac:	20000001 	.word	0x20000001
 80045b0:	20000000 	.word	0x20000000
 80045b4:	200001fe 	.word	0x200001fe
 80045b8:	200001fd 	.word	0x200001fd
 80045bc:	2000022c 	.word	0x2000022c
 80045c0:	20000200 	.word	0x20000200
 80045c4:	0800d658 	.word	0x0800d658
 80045c8:	0800d66c 	.word	0x0800d66c
 80045cc:	0800d680 	.word	0x0800d680
 80045d0:	0800d694 	.word	0x0800d694
 80045d4:	0800d6a8 	.word	0x0800d6a8
 80045d8:	2000021f 	.word	0x2000021f
 80045dc:	0800cf00 	.word	0x0800cf00
 80045e0:	0800cf14 	.word	0x0800cf14
 80045e4:	0800cf60 	.word	0x0800cf60
			} else if(dilSecim == 1) {
 80045e8:	4baa      	ldr	r3, [pc, #680]	; (8004894 <menu+0x35f8>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d104      	bne.n	80045fa <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80045f0:	4aa9      	ldr	r2, [pc, #676]	; (8004898 <menu+0x35fc>)
 80045f2:	2101      	movs	r1, #1
 80045f4:	2002      	movs	r0, #2
 80045f6:	f003 f96d 	bl	80078d4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80045fa:	2102      	movs	r1, #2
 80045fc:	48a7      	ldr	r0, [pc, #668]	; (800489c <menu+0x3600>)
 80045fe:	f004 fc79 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004602:	4603      	mov	r3, r0
 8004604:	2b01      	cmp	r3, #1
 8004606:	d115      	bne.n	8004634 <menu+0x3398>
 8004608:	4ba5      	ldr	r3, [pc, #660]	; (80048a0 <menu+0x3604>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f083 0301 	eor.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <menu+0x3398>
			iotMode = iotMode + 1;
 8004616:	4ba3      	ldr	r3, [pc, #652]	; (80048a4 <menu+0x3608>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4ba1      	ldr	r3, [pc, #644]	; (80048a4 <menu+0x3608>)
 8004620:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004622:	4ba0      	ldr	r3, [pc, #640]	; (80048a4 <menu+0x3608>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d902      	bls.n	8004630 <menu+0x3394>
				iotMode = 0;
 800462a:	4b9e      	ldr	r3, [pc, #632]	; (80048a4 <menu+0x3608>)
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004630:	f000 f9fe 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004634:	2104      	movs	r1, #4
 8004636:	4899      	ldr	r0, [pc, #612]	; (800489c <menu+0x3600>)
 8004638:	f004 fc5c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d115      	bne.n	800466e <menu+0x33d2>
 8004642:	4b97      	ldr	r3, [pc, #604]	; (80048a0 <menu+0x3604>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	f083 0301 	eor.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <menu+0x33d2>
			iotMode = iotMode - 1;
 8004650:	4b94      	ldr	r3, [pc, #592]	; (80048a4 <menu+0x3608>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	4b92      	ldr	r3, [pc, #584]	; (80048a4 <menu+0x3608>)
 800465a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800465c:	4b91      	ldr	r3, [pc, #580]	; (80048a4 <menu+0x3608>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <menu+0x33ce>
		   		iotMode = 1;
 8004664:	4b8f      	ldr	r3, [pc, #572]	; (80048a4 <menu+0x3608>)
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800466a:	f000 f9e1 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800466e:	2108      	movs	r1, #8
 8004670:	488a      	ldr	r0, [pc, #552]	; (800489c <menu+0x3600>)
 8004672:	f004 fc3f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004676:	4603      	mov	r3, r0
 8004678:	2b01      	cmp	r3, #1
 800467a:	d10e      	bne.n	800469a <menu+0x33fe>
 800467c:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <menu+0x3604>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f083 0301 	eor.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <menu+0x33fe>
			eepromData[48] = iotMode;
 800468a:	4b86      	ldr	r3, [pc, #536]	; (80048a4 <menu+0x3608>)
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	4b86      	ldr	r3, [pc, #536]	; (80048a8 <menu+0x360c>)
 8004690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004694:	4b85      	ldr	r3, [pc, #532]	; (80048ac <menu+0x3610>)
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800469a:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <menu+0x3614>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d13e      	bne.n	8004720 <menu+0x3484>
		calismaSayModu = 0;
 80046a2:	4b84      	ldr	r3, [pc, #528]	; (80048b4 <menu+0x3618>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80046a8:	4b7a      	ldr	r3, [pc, #488]	; (8004894 <menu+0x35f8>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80046b0:	4a81      	ldr	r2, [pc, #516]	; (80048b8 <menu+0x361c>)
 80046b2:	2101      	movs	r1, #1
 80046b4:	2001      	movs	r0, #1
 80046b6:	f003 f90d 	bl	80078d4 <lcd_print>
 80046ba:	e004      	b.n	80046c6 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80046bc:	4a7f      	ldr	r2, [pc, #508]	; (80048bc <menu+0x3620>)
 80046be:	2101      	movs	r1, #1
 80046c0:	2001      	movs	r0, #1
 80046c2:	f003 f907 	bl	80078d4 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80046c6:	4a7e      	ldr	r2, [pc, #504]	; (80048c0 <menu+0x3624>)
 80046c8:	2101      	movs	r1, #1
 80046ca:	2002      	movs	r0, #2
 80046cc:	f003 f902 	bl	80078d4 <lcd_print>
		lcd_print(2, 13, "    ");
 80046d0:	4a7c      	ldr	r2, [pc, #496]	; (80048c4 <menu+0x3628>)
 80046d2:	210d      	movs	r1, #13
 80046d4:	2002      	movs	r0, #2
 80046d6:	f003 f8fd 	bl	80078d4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046da:	2102      	movs	r1, #2
 80046dc:	486f      	ldr	r0, [pc, #444]	; (800489c <menu+0x3600>)
 80046de:	f004 fc09 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d11b      	bne.n	8004720 <menu+0x3484>
 80046e8:	2104      	movs	r1, #4
 80046ea:	486c      	ldr	r0, [pc, #432]	; (800489c <menu+0x3600>)
 80046ec:	f004 fc02 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d114      	bne.n	8004720 <menu+0x3484>
 80046f6:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <menu+0x3604>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <menu+0x3484>
			takeMachineID();
 8004704:	f002 faa0 	bl	8006c48 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004708:	4a6d      	ldr	r2, [pc, #436]	; (80048c0 <menu+0x3624>)
 800470a:	2101      	movs	r1, #1
 800470c:	2002      	movs	r0, #2
 800470e:	f003 f8e1 	bl	80078d4 <lcd_print>
			lcd_print(2, 13, "    ");
 8004712:	4a6c      	ldr	r2, [pc, #432]	; (80048c4 <menu+0x3628>)
 8004714:	210d      	movs	r1, #13
 8004716:	2002      	movs	r0, #2
 8004718:	f003 f8dc 	bl	80078d4 <lcd_print>

			bekle();
 800471c:	f000 f988 	bl	8004a30 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004720:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <menu+0x3614>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b21      	cmp	r3, #33	; 0x21
 8004726:	d14e      	bne.n	80047c6 <menu+0x352a>
		calismaSayModu = 0;
 8004728:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <menu+0x3618>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 800472e:	4866      	ldr	r0, [pc, #408]	; (80048c8 <menu+0x362c>)
 8004730:	f7fb fd78 	bl	8000224 <strlen>
 8004734:	4603      	mov	r3, r0
 8004736:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004738:	4a64      	ldr	r2, [pc, #400]	; (80048cc <menu+0x3630>)
 800473a:	2101      	movs	r1, #1
 800473c:	2001      	movs	r0, #1
 800473e:	f003 f8c9 	bl	80078d4 <lcd_print>
		if(ssidLength <=16) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b10      	cmp	r3, #16
 8004746:	dc0e      	bgt.n	8004766 <menu+0x34ca>
			lcd_print(2, 1, wifiSSID);
 8004748:	4a5f      	ldr	r2, [pc, #380]	; (80048c8 <menu+0x362c>)
 800474a:	2101      	movs	r1, #1
 800474c:	2002      	movs	r0, #2
 800474e:	f003 f8c1 	bl	80078d4 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	3301      	adds	r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	4a5d      	ldr	r2, [pc, #372]	; (80048d0 <menu+0x3634>)
 800475c:	4619      	mov	r1, r3
 800475e:	2002      	movs	r0, #2
 8004760:	f003 f8b8 	bl	80078d4 <lcd_print>
 8004764:	e005      	b.n	8004772 <menu+0x34d6>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004766:	2300      	movs	r3, #0
 8004768:	2202      	movs	r2, #2
 800476a:	2101      	movs	r1, #1
 800476c:	4856      	ldr	r0, [pc, #344]	; (80048c8 <menu+0x362c>)
 800476e:	f7fc fcd9 	bl	8001124 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004772:	2102      	movs	r1, #2
 8004774:	4849      	ldr	r0, [pc, #292]	; (800489c <menu+0x3600>)
 8004776:	f004 fbbd 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800477a:	4603      	mov	r3, r0
 800477c:	2b01      	cmp	r3, #1
 800477e:	d122      	bne.n	80047c6 <menu+0x352a>
 8004780:	2104      	movs	r1, #4
 8004782:	4846      	ldr	r0, [pc, #280]	; (800489c <menu+0x3600>)
 8004784:	f004 fbb6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004788:	4603      	mov	r3, r0
 800478a:	2b01      	cmp	r3, #1
 800478c:	d11b      	bne.n	80047c6 <menu+0x352a>
 800478e:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <menu+0x3604>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f083 0301 	eor.w	r3, r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d014      	beq.n	80047c6 <menu+0x352a>
			takeWifiSSID();
 800479c:	f002 face 	bl	8006d3c <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 80047a0:	4a49      	ldr	r2, [pc, #292]	; (80048c8 <menu+0x362c>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	2002      	movs	r0, #2
 80047a6:	f003 f895 	bl	80078d4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80047aa:	4847      	ldr	r0, [pc, #284]	; (80048c8 <menu+0x362c>)
 80047ac:	f7fb fd3a 	bl	8000224 <strlen>
 80047b0:	4603      	mov	r3, r0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4a45      	ldr	r2, [pc, #276]	; (80048d0 <menu+0x3634>)
 80047ba:	4619      	mov	r1, r3
 80047bc:	2002      	movs	r0, #2
 80047be:	f003 f889 	bl	80078d4 <lcd_print>

			bekle();
 80047c2:	f000 f935 	bl	8004a30 <bekle>
		}
	}

	if (menuSayac == 34) {
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <menu+0x3614>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b22      	cmp	r3, #34	; 0x22
 80047cc:	d14e      	bne.n	800486c <menu+0x35d0>
		calismaSayModu = 0;
 80047ce:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <menu+0x3618>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80047d4:	483f      	ldr	r0, [pc, #252]	; (80048d4 <menu+0x3638>)
 80047d6:	f7fb fd25 	bl	8000224 <strlen>
 80047da:	4603      	mov	r3, r0
 80047dc:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80047de:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <menu+0x363c>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	2001      	movs	r0, #1
 80047e4:	f003 f876 	bl	80078d4 <lcd_print>

		if(passLength <= 16) {
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	dc0e      	bgt.n	800480c <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 80047ee:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <menu+0x3638>)
 80047f0:	2101      	movs	r1, #1
 80047f2:	2002      	movs	r0, #2
 80047f4:	f003 f86e 	bl	80078d4 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <menu+0x3634>)
 8004802:	4619      	mov	r1, r3
 8004804:	2002      	movs	r0, #2
 8004806:	f003 f865 	bl	80078d4 <lcd_print>
 800480a:	e005      	b.n	8004818 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 800480c:	2301      	movs	r3, #1
 800480e:	2202      	movs	r2, #2
 8004810:	2101      	movs	r1, #1
 8004812:	4830      	ldr	r0, [pc, #192]	; (80048d4 <menu+0x3638>)
 8004814:	f7fc fc86 	bl	8001124 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004818:	2102      	movs	r1, #2
 800481a:	4820      	ldr	r0, [pc, #128]	; (800489c <menu+0x3600>)
 800481c:	f004 fb6a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d122      	bne.n	800486c <menu+0x35d0>
 8004826:	2104      	movs	r1, #4
 8004828:	481c      	ldr	r0, [pc, #112]	; (800489c <menu+0x3600>)
 800482a:	f004 fb63 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11b      	bne.n	800486c <menu+0x35d0>
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <menu+0x3604>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d014      	beq.n	800486c <menu+0x35d0>
			takeWifiPass();
 8004842:	f002 faf5 	bl	8006e30 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8004846:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <menu+0x3638>)
 8004848:	2101      	movs	r1, #1
 800484a:	2002      	movs	r0, #2
 800484c:	f003 f842 	bl	80078d4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004850:	4820      	ldr	r0, [pc, #128]	; (80048d4 <menu+0x3638>)
 8004852:	f7fb fce7 	bl	8000224 <strlen>
 8004856:	4603      	mov	r3, r0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	3301      	adds	r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <menu+0x3634>)
 8004860:	4619      	mov	r1, r3
 8004862:	2002      	movs	r0, #2
 8004864:	f003 f836 	bl	80078d4 <lcd_print>

			bekle();
 8004868:	f000 f8e2 	bl	8004a30 <bekle>
		}
	}

	if (menuSayac == 35) {
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <menu+0x3614>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b23      	cmp	r3, #35	; 0x23
 8004872:	d176      	bne.n	8004962 <menu+0x36c6>
		if(dilSecim == 0) {
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <menu+0x35f8>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d133      	bne.n	80048e4 <menu+0x3648>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800487c:	4a17      	ldr	r2, [pc, #92]	; (80048dc <menu+0x3640>)
 800487e:	2101      	movs	r1, #1
 8004880:	2001      	movs	r0, #1
 8004882:	f003 f827 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <menu+0x3644>)
 8004888:	2101      	movs	r1, #1
 800488a:	2002      	movs	r0, #2
 800488c:	f003 f822 	bl	80078d4 <lcd_print>
 8004890:	e036      	b.n	8004900 <menu+0x3664>
 8004892:	bf00      	nop
 8004894:	20000221 	.word	0x20000221
 8004898:	0800cf74 	.word	0x0800cf74
 800489c:	40010800 	.word	0x40010800
 80048a0:	2000022f 	.word	0x2000022f
 80048a4:	2000021f 	.word	0x2000021f
 80048a8:	2000012c 	.word	0x2000012c
 80048ac:	2000022c 	.word	0x2000022c
 80048b0:	20000200 	.word	0x20000200
 80048b4:	20000220 	.word	0x20000220
 80048b8:	0800d6bc 	.word	0x0800d6bc
 80048bc:	0800d6d0 	.word	0x0800d6d0
 80048c0:	200001a4 	.word	0x200001a4
 80048c4:	0800d6e4 	.word	0x0800d6e4
 80048c8:	200001b0 	.word	0x200001b0
 80048cc:	0800d6ec 	.word	0x0800d6ec
 80048d0:	20000010 	.word	0x20000010
 80048d4:	200001c4 	.word	0x200001c4
 80048d8:	0800d700 	.word	0x0800d700
 80048dc:	0800d714 	.word	0x0800d714
 80048e0:	0800d728 	.word	0x0800d728
		} else if(dilSecim == 1) {
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <menu+0x36d0>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d109      	bne.n	8004900 <menu+0x3664>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <menu+0x36d4>)
 80048ee:	2101      	movs	r1, #1
 80048f0:	2001      	movs	r0, #1
 80048f2:	f002 ffef 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <menu+0x36d8>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	2002      	movs	r0, #2
 80048fc:	f002 ffea 	bl	80078d4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004900:	2108      	movs	r1, #8
 8004902:	481d      	ldr	r0, [pc, #116]	; (8004978 <menu+0x36dc>)
 8004904:	f004 faf6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d129      	bne.n	8004962 <menu+0x36c6>
			menuGiris = 0;
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <menu+0x36e0>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004914:	bf00      	nop
 8004916:	481a      	ldr	r0, [pc, #104]	; (8004980 <menu+0x36e4>)
 8004918:	f005 f915 	bl	8009b46 <HAL_I2C_GetError>
 800491c:	4603      	mov	r3, r0
 800491e:	2b04      	cmp	r3, #4
 8004920:	d0f9      	beq.n	8004916 <menu+0x367a>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004922:	bf00      	nop
 8004924:	4816      	ldr	r0, [pc, #88]	; (8004980 <menu+0x36e4>)
 8004926:	f005 f901 	bl	8009b2c <HAL_I2C_GetState>
 800492a:	4603      	mov	r3, r0
 800492c:	2b20      	cmp	r3, #32
 800492e:	d1f9      	bne.n	8004924 <menu+0x3688>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004930:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	236e      	movs	r3, #110	; 0x6e
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <menu+0x36e8>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	236e      	movs	r3, #110	; 0x6e
 8004940:	2200      	movs	r2, #0
 8004942:	21a0      	movs	r1, #160	; 0xa0
 8004944:	480e      	ldr	r0, [pc, #56]	; (8004980 <menu+0x36e4>)
 8004946:	f004 fd8f 	bl	8009468 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800494a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800494e:	f003 fd01 	bl	8008354 <HAL_Delay>

			lcd_clear();
 8004952:	f002 ffeb 	bl	800792c <lcd_clear>
			HAL_Delay(500);
 8004956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800495a:	f003 fcfb 	bl	8008354 <HAL_Delay>
			NVIC_SystemReset();
 800495e:	f7fc fc87 	bl	8001270 <__NVIC_SystemReset>
		}
	}
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000221 	.word	0x20000221
 8004970:	0800d73c 	.word	0x0800d73c
 8004974:	0800d750 	.word	0x0800d750
 8004978:	40010800 	.word	0x40010800
 800497c:	2000021d 	.word	0x2000021d
 8004980:	20000290 	.word	0x20000290
 8004984:	2000012c 	.word	0x2000012c

08004988 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d105      	bne.n	80049a4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <lcdUpdate+0x9c>)
 800499a:	2101      	movs	r1, #1
 800499c:	2002      	movs	r0, #2
 800499e:	f002 ff99 	bl	80078d4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80049a2:	e03b      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==2) {
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d105      	bne.n	80049b6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <lcdUpdate+0x9c>)
 80049ac:	2102      	movs	r1, #2
 80049ae:	2002      	movs	r0, #2
 80049b0:	f002 ff90 	bl	80078d4 <lcd_print>
}
 80049b4:	e032      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==3) {
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d105      	bne.n	80049c8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <lcdUpdate+0x9c>)
 80049be:	2103      	movs	r1, #3
 80049c0:	2002      	movs	r0, #2
 80049c2:	f002 ff87 	bl	80078d4 <lcd_print>
}
 80049c6:	e029      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==4) {
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d105      	bne.n	80049da <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80049ce:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <lcdUpdate+0x9c>)
 80049d0:	2104      	movs	r1, #4
 80049d2:	2002      	movs	r0, #2
 80049d4:	f002 ff7e 	bl	80078d4 <lcd_print>
}
 80049d8:	e020      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==5) {
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d105      	bne.n	80049ec <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80049e0:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <lcdUpdate+0x9c>)
 80049e2:	2105      	movs	r1, #5
 80049e4:	2002      	movs	r0, #2
 80049e6:	f002 ff75 	bl	80078d4 <lcd_print>
}
 80049ea:	e017      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==6) {
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d105      	bne.n	80049fe <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <lcdUpdate+0x9c>)
 80049f4:	2106      	movs	r1, #6
 80049f6:	2002      	movs	r0, #2
 80049f8:	f002 ff6c 	bl	80078d4 <lcd_print>
}
 80049fc:	e00e      	b.n	8004a1c <lcdUpdate+0x94>
	} else if (y==7) {
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	2b07      	cmp	r3, #7
 8004a02:	d10b      	bne.n	8004a1c <lcdUpdate+0x94>
		lcd_clear();
 8004a04:	f002 ff92 	bl	800792c <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <lcdUpdate+0xa0>)
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	f002 ff61 	bl	80078d4 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a12:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <lcdUpdate+0xa4>)
 8004a14:	2106      	movs	r1, #6
 8004a16:	2002      	movs	r0, #2
 8004a18:	f002 ff5c 	bl	80078d4 <lcd_print>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	0800d764 	.word	0x0800d764
 8004a28:	0800d768 	.word	0x0800d768
 8004a2c:	0800d770 	.word	0x0800d770

08004a30 <bekle>:

void bekle() {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	timer1=millis;
 8004a34:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <bekle+0x124>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a47      	ldr	r2, [pc, #284]	; (8004b58 <bekle+0x128>)
 8004a3a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a3c:	e002      	b.n	8004a44 <bekle+0x14>
    	butonKontrol = 1;
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <bekle+0x12c>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a44:	2101      	movs	r1, #1
 8004a46:	4846      	ldr	r0, [pc, #280]	; (8004b60 <bekle+0x130>)
 8004a48:	f004 fa54 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d109      	bne.n	8004a66 <bekle+0x36>
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <bekle+0x124>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b40      	ldr	r3, [pc, #256]	; (8004b58 <bekle+0x128>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d0ef      	beq.n	8004a3e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a5e:	e002      	b.n	8004a66 <bekle+0x36>
    	butonKontrol = 1;
 8004a60:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <bekle+0x12c>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a66:	2108      	movs	r1, #8
 8004a68:	483e      	ldr	r0, [pc, #248]	; (8004b64 <bekle+0x134>)
 8004a6a:	f004 fa43 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d109      	bne.n	8004a88 <bekle+0x58>
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <bekle+0x124>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <bekle+0x128>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d0ef      	beq.n	8004a60 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a80:	e002      	b.n	8004a88 <bekle+0x58>
    	butonKontrol = 1;
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <bekle+0x12c>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4835      	ldr	r0, [pc, #212]	; (8004b60 <bekle+0x130>)
 8004a8c:	f004 fa32 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d109      	bne.n	8004aaa <bekle+0x7a>
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <bekle+0x124>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <bekle+0x128>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d0ef      	beq.n	8004a82 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aa2:	e002      	b.n	8004aaa <bekle+0x7a>
    	butonKontrol = 1;
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <bekle+0x12c>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aaa:	2104      	movs	r1, #4
 8004aac:	482c      	ldr	r0, [pc, #176]	; (8004b60 <bekle+0x130>)
 8004aae:	f004 fa21 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d109      	bne.n	8004acc <bekle+0x9c>
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <bekle+0x124>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <bekle+0x128>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0ef      	beq.n	8004aa4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac4:	e002      	b.n	8004acc <bekle+0x9c>
    	butonKontrol = 1;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <bekle+0x12c>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004acc:	2108      	movs	r1, #8
 8004ace:	4824      	ldr	r0, [pc, #144]	; (8004b60 <bekle+0x130>)
 8004ad0:	f004 fa10 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d109      	bne.n	8004aee <bekle+0xbe>
 8004ada:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <bekle+0x124>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <bekle+0x128>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d0ef      	beq.n	8004ac6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ae6:	e002      	b.n	8004aee <bekle+0xbe>
    	butonKontrol = 1;
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <bekle+0x12c>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	481c      	ldr	r0, [pc, #112]	; (8004b64 <bekle+0x134>)
 8004af2:	f004 f9ff 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <bekle+0xe0>
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <bekle+0x124>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <bekle+0x128>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d0ef      	beq.n	8004ae8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b08:	e002      	b.n	8004b10 <bekle+0xe0>
    	butonKontrol = 1;
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <bekle+0x12c>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b14:	4813      	ldr	r0, [pc, #76]	; (8004b64 <bekle+0x134>)
 8004b16:	f004 f9ed 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <bekle+0x104>
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <bekle+0x124>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <bekle+0x128>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d0ee      	beq.n	8004b0a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b2c:	e002      	b.n	8004b34 <bekle+0x104>
    	butonKontrol = 1;
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <bekle+0x12c>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b38:	480a      	ldr	r0, [pc, #40]	; (8004b64 <bekle+0x134>)
 8004b3a:	f004 f9db 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <bekle+0x120>
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <bekle+0x124>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <bekle+0x128>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d0ee      	beq.n	8004b2e <bekle+0xfe>
    }

}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	200001dc 	.word	0x200001dc
 8004b58:	200001e4 	.word	0x200001e4
 8004b5c:	2000022f 	.word	0x2000022f
 8004b60:	40010800 	.word	0x40010800
 8004b64:	40011000 	.word	0x40011000

08004b68 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <checkLCDBacklight+0x24>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <checkLCDBacklight+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b3b      	cmp	r3, #59	; 0x3b
 8004b78:	d903      	bls.n	8004b82 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f002 fef6 	bl	800796c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004b80:	e002      	b.n	8004b88 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004b82:	2001      	movs	r0, #1
 8004b84:	f002 fef2 	bl	800796c <lcd_backlight>
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200001dc 	.word	0x200001dc
 8004b90:	200001f8 	.word	0x200001f8

08004b94 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <checkBasincSalteri+0x54>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <checkBasincSalteri+0x12>
		basincVar=1;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <checkBasincSalteri+0x58>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <checkBasincSalteri+0x54>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d119      	bne.n	8004be2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb2:	480f      	ldr	r0, [pc, #60]	; (8004bf0 <checkBasincSalteri+0x5c>)
 8004bb4:	f004 f99e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <checkBasincSalteri+0x60>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <checkBasincSalteri+0x64>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d90a      	bls.n	8004be2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <checkBasincSalteri+0x58>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004bd2:	e006      	b.n	8004be2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <checkBasincSalteri+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <checkBasincSalteri+0x64>)
 8004bda:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <checkBasincSalteri+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000207 	.word	0x20000207
 8004bec:	20000203 	.word	0x20000203
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	200001dc 	.word	0x200001dc
 8004bf8:	200001f4 	.word	0x200001f4

08004bfc <checkBasGonder>:

void checkBasGonder() {
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <checkBasGonder+0x74>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10b      	bne.n	8004c20 <checkBasGonder+0x24>
 8004c08:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <checkBasGonder+0x78>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <checkBasGonder+0x24>
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <checkBasGonder+0x7c>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <checkBasGonder+0x80>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e009      	b.n	8004c34 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <checkBasGonder+0x78>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f083 0301 	eor.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <checkBasGonder+0x80>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c34:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <checkBasGonder+0x74>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d10b      	bne.n	8004c54 <checkBasGonder+0x58>
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <checkBasGonder+0x84>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <checkBasGonder+0x58>
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <checkBasGonder+0x7c>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <checkBasGonder+0x88>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004c52:	e009      	b.n	8004c68 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <checkBasGonder+0x84>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f083 0301 	eor.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <checkBasGonder+0x88>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	20000201 	.word	0x20000201
 8004c74:	20000235 	.word	0x20000235
 8004c78:	2000020f 	.word	0x2000020f
 8004c7c:	2000023c 	.word	0x2000023c
 8004c80:	20000238 	.word	0x20000238
 8004c84:	2000023d 	.word	0x2000023d

08004c88 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004c94:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10e      	bne.n	8004cc0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ca6:	4820      	ldr	r0, [pc, #128]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004ca8:	f004 f924 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e002      	b.n	8004cc0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d10e      	bne.n	8004ce6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ccc:	4816      	ldr	r0, [pc, #88]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004cce:	f004 f911 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d116      	bne.n	8004d1c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf2:	480d      	ldr	r0, [pc, #52]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004cf4:	f004 f8fe 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <checkKapiSecimleri+0x8e>
 8004cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d02:	4809      	ldr	r0, [pc, #36]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004d04:	f004 f8f6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d14:	e002      	b.n	8004d1c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d16:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000208 	.word	0x20000208
 8004d24:	20000253 	.word	0x20000253
 8004d28:	40010800 	.word	0x40010800

08004d2c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004d30:	4b62      	ldr	r3, [pc, #392]	; (8004ebc <checkAktifCalisma+0x190>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f041 833e 	bne.w	80063b6 <checkAktifCalisma+0x168a>
 8004d3a:	4b61      	ldr	r3, [pc, #388]	; (8004ec0 <checkAktifCalisma+0x194>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f041 8339 	bne.w	80063b6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11a      	bne.n	8004d82 <checkAktifCalisma+0x56>
 8004d4c:	4b5e      	ldr	r3, [pc, #376]	; (8004ec8 <checkAktifCalisma+0x19c>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <checkAktifCalisma+0x56>
 8004d54:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <checkAktifCalisma+0x1a0>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <checkAktifCalisma+0x46>
 8004d5c:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <checkAktifCalisma+0x1a4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <checkAktifCalisma+0x46>
 8004d6a:	4b5a      	ldr	r3, [pc, #360]	; (8004ed4 <checkAktifCalisma+0x1a8>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d007      	beq.n	8004d82 <checkAktifCalisma+0x56>
 8004d72:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <checkAktifCalisma+0x1ac>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <checkAktifCalisma+0x80>
 8004d7a:	4b58      	ldr	r3, [pc, #352]	; (8004edc <checkAktifCalisma+0x1b0>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d114      	bne.n	8004dac <checkAktifCalisma+0x80>
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <checkAktifCalisma+0x1b4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <checkAktifCalisma+0x80>
 8004d8a:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <checkAktifCalisma+0x1b8>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004d92:	2201      	movs	r2, #1
 8004d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d98:	4853      	ldr	r0, [pc, #332]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004d9a:	f004 f8c2 	bl	8008f22 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004d9e:	4b53      	ldr	r3, [pc, #332]	; (8004eec <checkAktifCalisma+0x1c0>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004da4:	4b52      	ldr	r3, [pc, #328]	; (8004ef0 <checkAktifCalisma+0x1c4>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e008      	b.n	8004dbe <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004db2:	484d      	ldr	r0, [pc, #308]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004db4:	f004 f8b5 	bl	8008f22 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <checkAktifCalisma+0x1c0>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004dbe:	4b40      	ldr	r3, [pc, #256]	; (8004ec0 <checkAktifCalisma+0x194>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d160      	bne.n	8004e88 <checkAktifCalisma+0x15c>
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <checkAktifCalisma+0x1b4>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d05c      	beq.n	8004e88 <checkAktifCalisma+0x15c>
 8004dce:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <checkAktifCalisma+0x1b8>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d058      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dda:	4843      	ldr	r0, [pc, #268]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004ddc:	f004 f88a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <checkAktifCalisma+0xc2>
 8004de6:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <checkAktifCalisma+0x1c8>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04c      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004dee:	2102      	movs	r1, #2
 8004df0:	4841      	ldr	r0, [pc, #260]	; (8004ef8 <checkAktifCalisma+0x1cc>)
 8004df2:	f004 f87f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d145      	bne.n	8004e88 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <checkAktifCalisma+0x1d0>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d041      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e08:	4837      	ldr	r0, [pc, #220]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004e0a:	f004 f873 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10e      	bne.n	8004e32 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e18:	4833      	ldr	r0, [pc, #204]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004e1a:	f004 f86b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4834      	ldr	r0, [pc, #208]	; (8004ef8 <checkAktifCalisma+0x1cc>)
 8004e28:	f004 f864 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d003      	beq.n	8004e3a <checkAktifCalisma+0x10e>
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d026      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <checkAktifCalisma+0x1a0>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f083 0301 	eor.w	r3, r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01f      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004e48:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <checkAktifCalisma+0x19c>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f083 0301 	eor.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <checkAktifCalisma+0x1ac>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f083 0301 	eor.w	r3, r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004e64:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <checkAktifCalisma+0x1d4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f083 0301 	eor.w	r3, r3, #1
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <checkAktifCalisma+0x1d8>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004e80:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e002      	b.n	8004e8e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004e88:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03a      	beq.n	8004f0c <checkAktifCalisma+0x1e0>
 8004e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e9a:	4817      	ldr	r0, [pc, #92]	; (8004ef8 <checkAktifCalisma+0x1cc>)
 8004e9c:	f004 f82a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d132      	bne.n	8004f0c <checkAktifCalisma+0x1e0>
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <checkAktifCalisma+0x1dc>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02e      	beq.n	8004f0c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eb4:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004eb6:	f004 f834 	bl	8008f22 <HAL_GPIO_WritePin>
 8004eba:	e02d      	b.n	8004f18 <checkAktifCalisma+0x1ec>
 8004ebc:	2000021e 	.word	0x2000021e
 8004ec0:	2000021d 	.word	0x2000021d
 8004ec4:	20000235 	.word	0x20000235
 8004ec8:	20000236 	.word	0x20000236
 8004ecc:	20000238 	.word	0x20000238
 8004ed0:	20000230 	.word	0x20000230
 8004ed4:	20000213 	.word	0x20000213
 8004ed8:	20000237 	.word	0x20000237
 8004edc:	20000212 	.word	0x20000212
 8004ee0:	20000252 	.word	0x20000252
 8004ee4:	20000253 	.word	0x20000253
 8004ee8:	40010c00 	.word	0x40010c00
 8004eec:	20000254 	.word	0x20000254
 8004ef0:	2000023f 	.word	0x2000023f
 8004ef4:	2000023c 	.word	0x2000023c
 8004ef8:	40011000 	.word	0x40011000
 8004efc:	20000203 	.word	0x20000203
 8004f00:	2000023a 	.word	0x2000023a
 8004f04:	2000023b 	.word	0x2000023b
 8004f08:	2000020e 	.word	0x2000020e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f12:	4860      	ldr	r0, [pc, #384]	; (8005094 <checkAktifCalisma+0x368>)
 8004f14:	f004 f805 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f18:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <checkAktifCalisma+0x36c>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <checkAktifCalisma+0x21c>
 8004f20:	4b5e      	ldr	r3, [pc, #376]	; (800509c <checkAktifCalisma+0x370>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d007      	beq.n	8004f38 <checkAktifCalisma+0x20c>
 8004f28:	4b5c      	ldr	r3, [pc, #368]	; (800509c <checkAktifCalisma+0x370>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d003      	beq.n	8004f38 <checkAktifCalisma+0x20c>
 8004f30:	4b5b      	ldr	r3, [pc, #364]	; (80050a0 <checkAktifCalisma+0x374>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4855      	ldr	r0, [pc, #340]	; (8005094 <checkAktifCalisma+0x368>)
 8004f3e:	f003 fff0 	bl	8008f22 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004f42:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <checkAktifCalisma+0x378>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004f48:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <checkAktifCalisma+0x378>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02f      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f54:	484f      	ldr	r0, [pc, #316]	; (8005094 <checkAktifCalisma+0x368>)
 8004f56:	f003 ffcd 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <checkAktifCalisma+0x242>
 8004f60:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <checkAktifCalisma+0x37c>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f083 0301 	eor.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <checkAktifCalisma+0x250>
 8004f6e:	2102      	movs	r1, #2
 8004f70:	484e      	ldr	r0, [pc, #312]	; (80050ac <checkAktifCalisma+0x380>)
 8004f72:	f003 ffbf 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d119      	bne.n	8004fb0 <checkAktifCalisma+0x284>
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <checkAktifCalisma+0x384>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f84:	4b4b      	ldr	r3, [pc, #300]	; (80050b4 <checkAktifCalisma+0x388>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d011      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f8c:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <checkAktifCalisma+0x38c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f94:	4b49      	ldr	r3, [pc, #292]	; (80050bc <checkAktifCalisma+0x390>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f083 0301 	eor.w	r3, r3, #1
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <checkAktifCalisma+0x394>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a47      	ldr	r2, [pc, #284]	; (80050c4 <checkAktifCalisma+0x398>)
 8004fa8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004faa:	4b44      	ldr	r3, [pc, #272]	; (80050bc <checkAktifCalisma+0x390>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004fb0:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <checkAktifCalisma+0x394>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <checkAktifCalisma+0x398>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	4a43      	ldr	r2, [pc, #268]	; (80050c8 <checkAktifCalisma+0x39c>)
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d303      	bcc.n	8004fca <checkAktifCalisma+0x29e>
 8004fc2:	4b3e      	ldr	r3, [pc, #248]	; (80050bc <checkAktifCalisma+0x390>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d111      	bne.n	8004fee <checkAktifCalisma+0x2c2>
 8004fca:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <checkAktifCalisma+0x384>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	f083 0301 	eor.w	r3, r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <checkAktifCalisma+0x2c2>
 8004fd8:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <checkAktifCalisma+0x388>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f083 0301 	eor.w	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <checkAktifCalisma+0x2c2>
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <checkAktifCalisma+0x38c>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	4828      	ldr	r0, [pc, #160]	; (8005094 <checkAktifCalisma+0x368>)
 8004ff4:	f003 ff95 	bl	8008f22 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004ff8:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <checkAktifCalisma+0x378>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <checkAktifCalisma+0x390>)
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005004:	4b31      	ldr	r3, [pc, #196]	; (80050cc <checkAktifCalisma+0x3a0>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800500c:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <checkAktifCalisma+0x3a4>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <checkAktifCalisma+0x3a0>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d116      	bne.n	8005048 <checkAktifCalisma+0x31c>
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <checkAktifCalisma+0x3a8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d112      	bne.n	8005048 <checkAktifCalisma+0x31c>
 8005022:	2101      	movs	r1, #1
 8005024:	4821      	ldr	r0, [pc, #132]	; (80050ac <checkAktifCalisma+0x380>)
 8005026:	f003 ff65 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <checkAktifCalisma+0x31c>
 8005030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005034:	4817      	ldr	r0, [pc, #92]	; (8005094 <checkAktifCalisma+0x368>)
 8005036:	f003 ff5d 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005040:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <checkAktifCalisma+0x3a4>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e011      	b.n	800506c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <checkAktifCalisma+0x3a0>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10d      	bne.n	800506c <checkAktifCalisma+0x340>
 8005050:	2101      	movs	r1, #1
 8005052:	4816      	ldr	r0, [pc, #88]	; (80050ac <checkAktifCalisma+0x380>)
 8005054:	f003 ff4e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d106      	bne.n	800506c <checkAktifCalisma+0x340>
 800505e:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <checkAktifCalisma+0x3a8>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <checkAktifCalisma+0x3a4>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <checkAktifCalisma+0x3a0>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d134      	bne.n	80050de <checkAktifCalisma+0x3b2>
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <checkAktifCalisma+0x3a8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d130      	bne.n	80050de <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800507c:	2101      	movs	r1, #1
 800507e:	480b      	ldr	r0, [pc, #44]	; (80050ac <checkAktifCalisma+0x380>)
 8005080:	f003 ff38 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d126      	bne.n	80050d8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <checkAktifCalisma+0x3a4>)
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e025      	b.n	80050de <checkAktifCalisma+0x3b2>
 8005092:	bf00      	nop
 8005094:	40010c00 	.word	0x40010c00
 8005098:	20000235 	.word	0x20000235
 800509c:	2000020f 	.word	0x2000020f
 80050a0:	20000213 	.word	0x20000213
 80050a4:	20000239 	.word	0x20000239
 80050a8:	2000023c 	.word	0x2000023c
 80050ac:	40011000 	.word	0x40011000
 80050b0:	20000252 	.word	0x20000252
 80050b4:	20000253 	.word	0x20000253
 80050b8:	20000203 	.word	0x20000203
 80050bc:	20000231 	.word	0x20000231
 80050c0:	200001dc 	.word	0x200001dc
 80050c4:	200001e8 	.word	0x200001e8
 80050c8:	20000214 	.word	0x20000214
 80050cc:	20000204 	.word	0x20000204
 80050d0:	20000257 	.word	0x20000257
 80050d4:	20000201 	.word	0x20000201
			} else {
				cerceveVar=0;
 80050d8:	4b7f      	ldr	r3, [pc, #508]	; (80052d8 <checkAktifCalisma+0x5ac>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80050de:	4b7f      	ldr	r3, [pc, #508]	; (80052dc <checkAktifCalisma+0x5b0>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d17c      	bne.n	80051e0 <checkAktifCalisma+0x4b4>
 80050e6:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <checkAktifCalisma+0x5b4>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d078      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
 80050ee:	4b7d      	ldr	r3, [pc, #500]	; (80052e4 <checkAktifCalisma+0x5b8>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d074      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80050f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050fa:	487b      	ldr	r0, [pc, #492]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80050fc:	f003 fefa 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <checkAktifCalisma+0x3e2>
 8005106:	4b79      	ldr	r3, [pc, #484]	; (80052ec <checkAktifCalisma+0x5c0>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d068      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800510e:	4b72      	ldr	r3, [pc, #456]	; (80052d8 <checkAktifCalisma+0x5ac>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d064      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
 8005116:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <checkAktifCalisma+0x5c4>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	f083 0301 	eor.w	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d05d      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005124:	2104      	movs	r1, #4
 8005126:	4873      	ldr	r0, [pc, #460]	; (80052f4 <checkAktifCalisma+0x5c8>)
 8005128:	f003 fee4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <checkAktifCalisma+0x40e>
 8005132:	4b71      	ldr	r3, [pc, #452]	; (80052f8 <checkAktifCalisma+0x5cc>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d152      	bne.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800513a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800513e:	486a      	ldr	r0, [pc, #424]	; (80052e8 <checkAktifCalisma+0x5bc>)
 8005140:	f003 fed8 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10e      	bne.n	8005168 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800514a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800514e:	4866      	ldr	r0, [pc, #408]	; (80052e8 <checkAktifCalisma+0x5bc>)
 8005150:	f003 fed0 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d106      	bne.n	8005168 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800515a:	2140      	movs	r1, #64	; 0x40
 800515c:	4865      	ldr	r0, [pc, #404]	; (80052f4 <checkAktifCalisma+0x5c8>)
 800515e:	f003 fec9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d003      	beq.n	8005170 <checkAktifCalisma+0x444>
 8005168:	4b64      	ldr	r3, [pc, #400]	; (80052fc <checkAktifCalisma+0x5d0>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d037      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005170:	4b63      	ldr	r3, [pc, #396]	; (8005300 <checkAktifCalisma+0x5d4>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f083 0301 	eor.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d030      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800517e:	4b61      	ldr	r3, [pc, #388]	; (8005304 <checkAktifCalisma+0x5d8>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f083 0301 	eor.w	r3, r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d029      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800518c:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <checkAktifCalisma+0x5dc>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f083 0301 	eor.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d022      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800519a:	4b5c      	ldr	r3, [pc, #368]	; (800530c <checkAktifCalisma+0x5e0>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80051a8:	4b59      	ldr	r3, [pc, #356]	; (8005310 <checkAktifCalisma+0x5e4>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f083 0301 	eor.w	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d014      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80051b6:	4b57      	ldr	r3, [pc, #348]	; (8005314 <checkAktifCalisma+0x5e8>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f083 0301 	eor.w	r3, r3, #1
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80051c4:	2201      	movs	r2, #1
 80051c6:	2102      	movs	r1, #2
 80051c8:	4847      	ldr	r0, [pc, #284]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80051ca:	f003 feaa 	bl	8008f22 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80051ce:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <checkAktifCalisma+0x5d0>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <checkAktifCalisma+0x5ec>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80051da:	4b50      	ldr	r3, [pc, #320]	; (800531c <checkAktifCalisma+0x5f0>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <checkAktifCalisma+0x5d0>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d033      	beq.n	8005250 <checkAktifCalisma+0x524>
 80051e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051ec:	483e      	ldr	r0, [pc, #248]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80051ee:	f003 fe81 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <checkAktifCalisma+0x4da>
 80051f8:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <checkAktifCalisma+0x5c0>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f083 0301 	eor.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <checkAktifCalisma+0x4f0>
 8005206:	2104      	movs	r1, #4
 8005208:	483a      	ldr	r0, [pc, #232]	; (80052f4 <checkAktifCalisma+0x5c8>)
 800520a:	f003 fe73 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	d11d      	bne.n	8005250 <checkAktifCalisma+0x524>
 8005214:	4b38      	ldr	r3, [pc, #224]	; (80052f8 <checkAktifCalisma+0x5cc>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d019      	beq.n	8005250 <checkAktifCalisma+0x524>
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <checkAktifCalisma+0x5b4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <checkAktifCalisma+0x524>
 8005224:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <checkAktifCalisma+0x5b8>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <checkAktifCalisma+0x524>
 800522c:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <checkAktifCalisma+0x5ac>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <checkAktifCalisma+0x524>
 8005234:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <checkAktifCalisma+0x5f4>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f083 0301 	eor.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <checkAktifCalisma+0x524>
			timer2=millis;
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <checkAktifCalisma+0x5f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a38      	ldr	r2, [pc, #224]	; (8005328 <checkAktifCalisma+0x5fc>)
 8005248:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800524a:	4b35      	ldr	r3, [pc, #212]	; (8005320 <checkAktifCalisma+0x5f4>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <checkAktifCalisma+0x5f8>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <checkAktifCalisma+0x5fc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a34      	ldr	r2, [pc, #208]	; (800532c <checkAktifCalisma+0x600>)
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	4293      	cmp	r3, r2
 8005260:	d303      	bcc.n	800526a <checkAktifCalisma+0x53e>
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <checkAktifCalisma+0x5f4>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d114      	bne.n	8005294 <checkAktifCalisma+0x568>
 800526a:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <checkAktifCalisma+0x5b4>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f083 0301 	eor.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10d      	bne.n	8005294 <checkAktifCalisma+0x568>
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <checkAktifCalisma+0x5b8>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f083 0301 	eor.w	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <checkAktifCalisma+0x568>
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <checkAktifCalisma+0x5ac>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f083 0301 	eor.w	r3, r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005294:	2200      	movs	r2, #0
 8005296:	2102      	movs	r1, #2
 8005298:	4813      	ldr	r0, [pc, #76]	; (80052e8 <checkAktifCalisma+0x5bc>)
 800529a:	f003 fe42 	bl	8008f22 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800529e:	4b17      	ldr	r3, [pc, #92]	; (80052fc <checkAktifCalisma+0x5d0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80052a4:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <checkAktifCalisma+0x5f4>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <checkAktifCalisma+0x5d0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d040      	beq.n	8005334 <checkAktifCalisma+0x608>
 80052b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052b6:	480f      	ldr	r0, [pc, #60]	; (80052f4 <checkAktifCalisma+0x5c8>)
 80052b8:	f003 fe1c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d138      	bne.n	8005334 <checkAktifCalisma+0x608>
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <checkAktifCalisma+0x604>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d034      	beq.n	8005334 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80052ca:	2201      	movs	r2, #1
 80052cc:	2101      	movs	r1, #1
 80052ce:	4806      	ldr	r0, [pc, #24]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80052d0:	f003 fe27 	bl	8008f22 <HAL_GPIO_WritePin>
 80052d4:	e033      	b.n	800533e <checkAktifCalisma+0x612>
 80052d6:	bf00      	nop
 80052d8:	20000257 	.word	0x20000257
 80052dc:	2000021d 	.word	0x2000021d
 80052e0:	20000252 	.word	0x20000252
 80052e4:	20000253 	.word	0x20000253
 80052e8:	40010c00 	.word	0x40010c00
 80052ec:	2000023d 	.word	0x2000023d
 80052f0:	20000251 	.word	0x20000251
 80052f4:	40011000 	.word	0x40011000
 80052f8:	20000206 	.word	0x20000206
 80052fc:	20000238 	.word	0x20000238
 8005300:	20000235 	.word	0x20000235
 8005304:	20000239 	.word	0x20000239
 8005308:	20000236 	.word	0x20000236
 800530c:	20000237 	.word	0x20000237
 8005310:	2000023a 	.word	0x2000023a
 8005314:	2000023b 	.word	0x2000023b
 8005318:	20000240 	.word	0x20000240
 800531c:	20000261 	.word	0x20000261
 8005320:	20000230 	.word	0x20000230
 8005324:	200001dc 	.word	0x200001dc
 8005328:	200001e8 	.word	0x200001e8
 800532c:	20000215 	.word	0x20000215
 8005330:	20000205 	.word	0x20000205
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005334:	2200      	movs	r2, #0
 8005336:	2101      	movs	r1, #1
 8005338:	4836      	ldr	r0, [pc, #216]	; (8005414 <checkAktifCalisma+0x6e8>)
 800533a:	f003 fdf2 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800533e:	4b36      	ldr	r3, [pc, #216]	; (8005418 <checkAktifCalisma+0x6ec>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 8080 	bne.w	8005448 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005348:	4b34      	ldr	r3, [pc, #208]	; (800541c <checkAktifCalisma+0x6f0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d003      	beq.n	8005358 <checkAktifCalisma+0x62c>
 8005350:	4b32      	ldr	r3, [pc, #200]	; (800541c <checkAktifCalisma+0x6f0>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d177      	bne.n	8005448 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <checkAktifCalisma+0x6f4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d073      	beq.n	8005448 <checkAktifCalisma+0x71c>
 8005360:	4b30      	ldr	r3, [pc, #192]	; (8005424 <checkAktifCalisma+0x6f8>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d06f      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536c:	4829      	ldr	r0, [pc, #164]	; (8005414 <checkAktifCalisma+0x6e8>)
 800536e:	f003 fdc1 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d167      	bne.n	8005448 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800537c:	482a      	ldr	r0, [pc, #168]	; (8005428 <checkAktifCalisma+0x6fc>)
 800537e:	f003 fdb9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <checkAktifCalisma+0x664>
 8005388:	4b28      	ldr	r3, [pc, #160]	; (800542c <checkAktifCalisma+0x700>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d15b      	bne.n	8005448 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005390:	2140      	movs	r1, #64	; 0x40
 8005392:	4825      	ldr	r0, [pc, #148]	; (8005428 <checkAktifCalisma+0x6fc>)
 8005394:	f003 fdae 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10f      	bne.n	80053be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800539e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053a2:	481c      	ldr	r0, [pc, #112]	; (8005414 <checkAktifCalisma+0x6e8>)
 80053a4:	f003 fda6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80053ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053b2:	4818      	ldr	r0, [pc, #96]	; (8005414 <checkAktifCalisma+0x6e8>)
 80053b4:	f003 fd9e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d003      	beq.n	80053c6 <checkAktifCalisma+0x69a>
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <checkAktifCalisma+0x704>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d040      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <checkAktifCalisma+0x708>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f083 0301 	eor.w	r3, r3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d039      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <checkAktifCalisma+0x70c>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f083 0301 	eor.w	r3, r3, #1
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d032      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <checkAktifCalisma+0x710>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f083 0301 	eor.w	r3, r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02b      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <checkAktifCalisma+0x714>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d024      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <checkAktifCalisma+0x718>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	f083 0301 	eor.w	r3, r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01d      	beq.n	8005448 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <checkAktifCalisma+0x704>)
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e01c      	b.n	800544e <checkAktifCalisma+0x722>
 8005414:	40010c00 	.word	0x40010c00
 8005418:	2000021d 	.word	0x2000021d
 800541c:	2000020f 	.word	0x2000020f
 8005420:	20000252 	.word	0x20000252
 8005424:	20000253 	.word	0x20000253
 8005428:	40011000 	.word	0x40011000
 800542c:	20000210 	.word	0x20000210
 8005430:	20000236 	.word	0x20000236
 8005434:	20000235 	.word	0x20000235
 8005438:	20000239 	.word	0x20000239
 800543c:	20000238 	.word	0x20000238
 8005440:	20000237 	.word	0x20000237
 8005444:	2000023b 	.word	0x2000023b
		} else {
			devmotoryukaricalisiyor=0;
 8005448:	4b64      	ldr	r3, [pc, #400]	; (80055dc <checkAktifCalisma+0x8b0>)
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <checkAktifCalisma+0x8b0>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005456:	2201      	movs	r2, #1
 8005458:	2120      	movs	r1, #32
 800545a:	4861      	ldr	r0, [pc, #388]	; (80055e0 <checkAktifCalisma+0x8b4>)
 800545c:	f003 fd61 	bl	8008f22 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005460:	4b60      	ldr	r3, [pc, #384]	; (80055e4 <checkAktifCalisma+0x8b8>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005466:	4b5f      	ldr	r3, [pc, #380]	; (80055e4 <checkAktifCalisma+0x8b8>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d025      	beq.n	80054ba <checkAktifCalisma+0x78e>
 800546e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005472:	485d      	ldr	r0, [pc, #372]	; (80055e8 <checkAktifCalisma+0x8bc>)
 8005474:	f003 fd3e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d007      	beq.n	800548e <checkAktifCalisma+0x762>
 800547e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005482:	4857      	ldr	r0, [pc, #348]	; (80055e0 <checkAktifCalisma+0x8b4>)
 8005484:	f003 fd36 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d115      	bne.n	80054ba <checkAktifCalisma+0x78e>
 800548e:	4b57      	ldr	r3, [pc, #348]	; (80055ec <checkAktifCalisma+0x8c0>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d011      	beq.n	80054ba <checkAktifCalisma+0x78e>
 8005496:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <checkAktifCalisma+0x8c4>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <checkAktifCalisma+0x78e>
 800549e:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <checkAktifCalisma+0x8c8>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f083 0301 	eor.w	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <checkAktifCalisma+0x78e>
			timer2=millis;
 80054ac:	4b52      	ldr	r3, [pc, #328]	; (80055f8 <checkAktifCalisma+0x8cc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a52      	ldr	r2, [pc, #328]	; (80055fc <checkAktifCalisma+0x8d0>)
 80054b2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80054b4:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <checkAktifCalisma+0x8c8>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054ba:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <checkAktifCalisma+0x8cc>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <checkAktifCalisma+0x8d0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4a4e      	ldr	r2, [pc, #312]	; (8005600 <checkAktifCalisma+0x8d4>)
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d303      	bcc.n	80054d4 <checkAktifCalisma+0x7a8>
 80054cc:	4b49      	ldr	r3, [pc, #292]	; (80055f4 <checkAktifCalisma+0x8c8>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <checkAktifCalisma+0x7c4>
 80054d4:	4b45      	ldr	r3, [pc, #276]	; (80055ec <checkAktifCalisma+0x8c0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <checkAktifCalisma+0x7c4>
 80054e2:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <checkAktifCalisma+0x8c4>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80054f0:	2200      	movs	r2, #0
 80054f2:	2120      	movs	r1, #32
 80054f4:	483a      	ldr	r0, [pc, #232]	; (80055e0 <checkAktifCalisma+0x8b4>)
 80054f6:	f003 fd14 	bl	8008f22 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80054fa:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <checkAktifCalisma+0x8b8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005500:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <checkAktifCalisma+0x8c8>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <checkAktifCalisma+0x8d8>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8088 	bne.w	8005620 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <checkAktifCalisma+0x8dc>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d003      	beq.n	8005520 <checkAktifCalisma+0x7f4>
 8005518:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <checkAktifCalisma+0x8dc>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d17f      	bne.n	8005620 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <checkAktifCalisma+0x8c0>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d07b      	beq.n	8005620 <checkAktifCalisma+0x8f4>
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <checkAktifCalisma+0x8c4>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d077      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	482b      	ldr	r0, [pc, #172]	; (80055e0 <checkAktifCalisma+0x8b4>)
 8005534:	f003 fcde 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d170      	bne.n	8005620 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800553e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005542:	4827      	ldr	r0, [pc, #156]	; (80055e0 <checkAktifCalisma+0x8b4>)
 8005544:	f003 fcd6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <checkAktifCalisma+0x82a>
 800554e:	4b2f      	ldr	r3, [pc, #188]	; (800560c <checkAktifCalisma+0x8e0>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d164      	bne.n	8005620 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800555a:	4823      	ldr	r0, [pc, #140]	; (80055e8 <checkAktifCalisma+0x8bc>)
 800555c:	f003 fcca 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d10f      	bne.n	8005586 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800556a:	481f      	ldr	r0, [pc, #124]	; (80055e8 <checkAktifCalisma+0x8bc>)
 800556c:	f003 fcc2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800557a:	481b      	ldr	r0, [pc, #108]	; (80055e8 <checkAktifCalisma+0x8bc>)
 800557c:	f003 fcba 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d003      	beq.n	800558e <checkAktifCalisma+0x862>
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <checkAktifCalisma+0x8e4>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d048      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <checkAktifCalisma+0x8e8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f083 0301 	eor.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d041      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800559c:	4b1e      	ldr	r3, [pc, #120]	; (8005618 <checkAktifCalisma+0x8ec>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03a      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <checkAktifCalisma+0x8f0>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f083 0301 	eor.w	r3, r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d033      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <checkAktifCalisma+0x8b8>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02c      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <checkAktifCalisma+0x8b0>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d025      	beq.n	8005620 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <checkAktifCalisma+0x8e4>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e024      	b.n	8005626 <checkAktifCalisma+0x8fa>
 80055dc:	20000236 	.word	0x20000236
 80055e0:	40011000 	.word	0x40011000
 80055e4:	2000023a 	.word	0x2000023a
 80055e8:	40010c00 	.word	0x40010c00
 80055ec:	20000252 	.word	0x20000252
 80055f0:	20000253 	.word	0x20000253
 80055f4:	20000232 	.word	0x20000232
 80055f8:	200001dc 	.word	0x200001dc
 80055fc:	200001e8 	.word	0x200001e8
 8005600:	20000216 	.word	0x20000216
 8005604:	2000021d 	.word	0x2000021d
 8005608:	2000020f 	.word	0x2000020f
 800560c:	20000211 	.word	0x20000211
 8005610:	20000237 	.word	0x20000237
 8005614:	20000235 	.word	0x20000235
 8005618:	20000239 	.word	0x20000239
 800561c:	20000238 	.word	0x20000238
		} else {
			devmotorasagicalisiyor=0;
 8005620:	4b96      	ldr	r3, [pc, #600]	; (800587c <checkAktifCalisma+0xb50>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005626:	4b95      	ldr	r3, [pc, #596]	; (800587c <checkAktifCalisma+0xb50>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800562e:	2201      	movs	r2, #1
 8005630:	2110      	movs	r1, #16
 8005632:	4893      	ldr	r0, [pc, #588]	; (8005880 <checkAktifCalisma+0xb54>)
 8005634:	f003 fc75 	bl	8008f22 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005638:	4b92      	ldr	r3, [pc, #584]	; (8005884 <checkAktifCalisma+0xb58>)
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800563e:	4b91      	ldr	r3, [pc, #580]	; (8005884 <checkAktifCalisma+0xb58>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d024      	beq.n	8005690 <checkAktifCalisma+0x964>
 8005646:	2140      	movs	r1, #64	; 0x40
 8005648:	488d      	ldr	r0, [pc, #564]	; (8005880 <checkAktifCalisma+0xb54>)
 800564a:	f003 fc53 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d007      	beq.n	8005664 <checkAktifCalisma+0x938>
 8005654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005658:	4889      	ldr	r0, [pc, #548]	; (8005880 <checkAktifCalisma+0xb54>)
 800565a:	f003 fc4b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800565e:	4603      	mov	r3, r0
 8005660:	2b01      	cmp	r3, #1
 8005662:	d115      	bne.n	8005690 <checkAktifCalisma+0x964>
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <checkAktifCalisma+0xb5c>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d011      	beq.n	8005690 <checkAktifCalisma+0x964>
 800566c:	4b87      	ldr	r3, [pc, #540]	; (800588c <checkAktifCalisma+0xb60>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <checkAktifCalisma+0x964>
 8005674:	4b86      	ldr	r3, [pc, #536]	; (8005890 <checkAktifCalisma+0xb64>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <checkAktifCalisma+0x964>
			timer2=millis;
 8005682:	4b84      	ldr	r3, [pc, #528]	; (8005894 <checkAktifCalisma+0xb68>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a84      	ldr	r2, [pc, #528]	; (8005898 <checkAktifCalisma+0xb6c>)
 8005688:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800568a:	4b81      	ldr	r3, [pc, #516]	; (8005890 <checkAktifCalisma+0xb64>)
 800568c:	2201      	movs	r2, #1
 800568e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005690:	4b80      	ldr	r3, [pc, #512]	; (8005894 <checkAktifCalisma+0xb68>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4b80      	ldr	r3, [pc, #512]	; (8005898 <checkAktifCalisma+0xb6c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	4a80      	ldr	r2, [pc, #512]	; (800589c <checkAktifCalisma+0xb70>)
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	4293      	cmp	r3, r2
 80056a0:	d303      	bcc.n	80056aa <checkAktifCalisma+0x97e>
 80056a2:	4b7b      	ldr	r3, [pc, #492]	; (8005890 <checkAktifCalisma+0xb64>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <checkAktifCalisma+0x99a>
 80056aa:	4b77      	ldr	r3, [pc, #476]	; (8005888 <checkAktifCalisma+0xb5c>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <checkAktifCalisma+0x99a>
 80056b8:	4b74      	ldr	r3, [pc, #464]	; (800588c <checkAktifCalisma+0xb60>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f083 0301 	eor.w	r3, r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80056c6:	2200      	movs	r2, #0
 80056c8:	2110      	movs	r1, #16
 80056ca:	486d      	ldr	r0, [pc, #436]	; (8005880 <checkAktifCalisma+0xb54>)
 80056cc:	f003 fc29 	bl	8008f22 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80056d0:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <checkAktifCalisma+0xb58>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80056d6:	4b6e      	ldr	r3, [pc, #440]	; (8005890 <checkAktifCalisma+0xb64>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80056dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056e0:	486f      	ldr	r0, [pc, #444]	; (80058a0 <checkAktifCalisma+0xb74>)
 80056e2:	f003 fc07 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d120      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80056ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056f0:	486b      	ldr	r0, [pc, #428]	; (80058a0 <checkAktifCalisma+0xb74>)
 80056f2:	f003 fbff 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d118      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80056fc:	2104      	movs	r1, #4
 80056fe:	4868      	ldr	r0, [pc, #416]	; (80058a0 <checkAktifCalisma+0xb74>)
 8005700:	f003 fbf8 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d111      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800570a:	2102      	movs	r1, #2
 800570c:	4864      	ldr	r0, [pc, #400]	; (80058a0 <checkAktifCalisma+0xb74>)
 800570e:	f003 fbf1 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005718:	2101      	movs	r1, #1
 800571a:	4861      	ldr	r0, [pc, #388]	; (80058a0 <checkAktifCalisma+0xb74>)
 800571c:	f003 fbea 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005726:	4b5f      	ldr	r3, [pc, #380]	; (80058a4 <checkAktifCalisma+0xb78>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e002      	b.n	8005734 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800572e:	4b5d      	ldr	r3, [pc, #372]	; (80058a4 <checkAktifCalisma+0xb78>)
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005734:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <checkAktifCalisma+0xb7c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d144      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
 800573c:	4b5b      	ldr	r3, [pc, #364]	; (80058ac <checkAktifCalisma+0xb80>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d003      	beq.n	800574c <checkAktifCalisma+0xa20>
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <checkAktifCalisma+0xb80>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d13c      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	484c      	ldr	r0, [pc, #304]	; (8005880 <checkAktifCalisma+0xb54>)
 8005750:	f003 fbd0 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <checkAktifCalisma+0xa36>
 800575a:	4b55      	ldr	r3, [pc, #340]	; (80058b0 <checkAktifCalisma+0xb84>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <checkAktifCalisma+0xa4e>
 8005762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005766:	484e      	ldr	r0, [pc, #312]	; (80058a0 <checkAktifCalisma+0xb74>)
 8005768:	f003 fbc4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d129      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
 8005772:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <checkAktifCalisma+0xb84>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d125      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800577a:	2104      	movs	r1, #4
 800577c:	4840      	ldr	r0, [pc, #256]	; (8005880 <checkAktifCalisma+0xb54>)
 800577e:	f003 fbb9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d003      	beq.n	8005790 <checkAktifCalisma+0xa64>
 8005788:	4b4a      	ldr	r3, [pc, #296]	; (80058b4 <checkAktifCalisma+0xb88>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11a      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005790:	2102      	movs	r1, #2
 8005792:	483b      	ldr	r0, [pc, #236]	; (8005880 <checkAktifCalisma+0xb54>)
 8005794:	f003 fbae 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d113      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800579e:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <checkAktifCalisma+0xb8c>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	f083 0301 	eor.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80057ac:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <checkAktifCalisma+0xb78>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80057b4:	4b41      	ldr	r3, [pc, #260]	; (80058bc <checkAktifCalisma+0xb90>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <checkAktifCalisma+0xb68>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <checkAktifCalisma+0xb94>)
 80057c0:	6013      	str	r3, [r2, #0]
			bekle();
 80057c2:	f7ff f935 	bl	8004a30 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80057c6:	4b33      	ldr	r3, [pc, #204]	; (8005894 <checkAktifCalisma+0xb68>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b3d      	ldr	r3, [pc, #244]	; (80058c0 <checkAktifCalisma+0xb94>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <checkAktifCalisma+0xb98>)
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d211      	bcs.n	80057fc <checkAktifCalisma+0xad0>
 80057d8:	2104      	movs	r1, #4
 80057da:	4829      	ldr	r0, [pc, #164]	; (8005880 <checkAktifCalisma+0xb54>)
 80057dc:	f003 fb8a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <checkAktifCalisma+0xad0>
 80057e6:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <checkAktifCalisma+0xb88>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <checkAktifCalisma+0xad0>
 80057ee:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <checkAktifCalisma+0xb78>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <checkAktifCalisma+0xb90>)
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005802:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <checkAktifCalisma+0xb7c>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d160      	bne.n	80058cc <checkAktifCalisma+0xba0>
 800580a:	4b28      	ldr	r3, [pc, #160]	; (80058ac <checkAktifCalisma+0xb80>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d003      	beq.n	800581a <checkAktifCalisma+0xaee>
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <checkAktifCalisma+0xb80>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d158      	bne.n	80058cc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800581a:	2104      	movs	r1, #4
 800581c:	4818      	ldr	r0, [pc, #96]	; (8005880 <checkAktifCalisma+0xb54>)
 800581e:	f003 fb69 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d003      	beq.n	8005830 <checkAktifCalisma+0xb04>
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <checkAktifCalisma+0xb88>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d14d      	bne.n	80058cc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005830:	2102      	movs	r1, #2
 8005832:	4813      	ldr	r0, [pc, #76]	; (8005880 <checkAktifCalisma+0xb54>)
 8005834:	f003 fb5e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d146      	bne.n	80058cc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	480f      	ldr	r0, [pc, #60]	; (8005880 <checkAktifCalisma+0xb54>)
 8005842:	f003 fb57 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <checkAktifCalisma+0xb28>
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <checkAktifCalisma+0xb84>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <checkAktifCalisma+0xb40>
 8005854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005858:	4811      	ldr	r0, [pc, #68]	; (80058a0 <checkAktifCalisma+0xb74>)
 800585a:	f003 fb4b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d133      	bne.n	80058cc <checkAktifCalisma+0xba0>
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <checkAktifCalisma+0xb84>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d12f      	bne.n	80058cc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <checkAktifCalisma+0xb78>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02b      	beq.n	80058cc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005874:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <checkAktifCalisma+0xb9c>)
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e02a      	b.n	80058d2 <checkAktifCalisma+0xba6>
 800587c:	20000237 	.word	0x20000237
 8005880:	40011000 	.word	0x40011000
 8005884:	2000023b 	.word	0x2000023b
 8005888:	20000252 	.word	0x20000252
 800588c:	20000253 	.word	0x20000253
 8005890:	20000233 	.word	0x20000233
 8005894:	200001dc 	.word	0x200001dc
 8005898:	200001e8 	.word	0x200001e8
 800589c:	20000216 	.word	0x20000216
 80058a0:	40010c00 	.word	0x40010c00
 80058a4:	20000242 	.word	0x20000242
 80058a8:	20000209 	.word	0x20000209
 80058ac:	20000208 	.word	0x20000208
 80058b0:	2000020c 	.word	0x2000020c
 80058b4:	20000206 	.word	0x20000206
 80058b8:	2000022f 	.word	0x2000022f
 80058bc:	20000243 	.word	0x20000243
 80058c0:	200001e0 	.word	0x200001e0
 80058c4:	20000219 	.word	0x20000219
 80058c8:	20000244 	.word	0x20000244
		} else {
			kapi1butonkontrol=0;
 80058cc:	4b8b      	ldr	r3, [pc, #556]	; (8005afc <checkAktifCalisma+0xdd0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <checkAktifCalisma+0xdd4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d121      	bne.n	800591e <checkAktifCalisma+0xbf2>
 80058da:	4b8a      	ldr	r3, [pc, #552]	; (8005b04 <checkAktifCalisma+0xdd8>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d003      	beq.n	80058ea <checkAktifCalisma+0xbbe>
 80058e2:	4b88      	ldr	r3, [pc, #544]	; (8005b04 <checkAktifCalisma+0xdd8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d119      	bne.n	800591e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058ea:	2104      	movs	r1, #4
 80058ec:	4886      	ldr	r0, [pc, #536]	; (8005b08 <checkAktifCalisma+0xddc>)
 80058ee:	f003 fb01 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d003      	beq.n	8005900 <checkAktifCalisma+0xbd4>
 80058f8:	4b84      	ldr	r3, [pc, #528]	; (8005b0c <checkAktifCalisma+0xde0>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10e      	bne.n	800591e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005900:	2102      	movs	r1, #2
 8005902:	4881      	ldr	r0, [pc, #516]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005904:	f003 faf6 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <checkAktifCalisma+0xde8>)
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e002      	b.n	8005924 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800591e:	4b7d      	ldr	r3, [pc, #500]	; (8005b14 <checkAktifCalisma+0xde8>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005924:	4b75      	ldr	r3, [pc, #468]	; (8005afc <checkAktifCalisma+0xdd0>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d107      	bne.n	800593c <checkAktifCalisma+0xc10>
 800592c:	4b79      	ldr	r3, [pc, #484]	; (8005b14 <checkAktifCalisma+0xde8>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <checkAktifCalisma+0xc10>
 8005934:	4b78      	ldr	r3, [pc, #480]	; (8005b18 <checkAktifCalisma+0xdec>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800593c:	2201      	movs	r2, #1
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	4876      	ldr	r0, [pc, #472]	; (8005b1c <checkAktifCalisma+0xdf0>)
 8005942:	f003 faee 	bl	8008f22 <HAL_GPIO_WritePin>
 8005946:	e004      	b.n	8005952 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005948:	2200      	movs	r2, #0
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	4873      	ldr	r0, [pc, #460]	; (8005b1c <checkAktifCalisma+0xdf0>)
 800594e:	f003 fae8 	bl	8008f22 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005952:	4b73      	ldr	r3, [pc, #460]	; (8005b20 <checkAktifCalisma+0xdf4>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d141      	bne.n	80059de <checkAktifCalisma+0xcb2>
 800595a:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <checkAktifCalisma+0xdd8>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d003      	beq.n	800596a <checkAktifCalisma+0xc3e>
 8005962:	4b68      	ldr	r3, [pc, #416]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d139      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800596a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800596e:	4866      	ldr	r0, [pc, #408]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005970:	f003 fac0 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <checkAktifCalisma+0xc56>
 800597a:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <checkAktifCalisma+0xdf8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <checkAktifCalisma+0xc6e>
 8005982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005986:	4868      	ldr	r0, [pc, #416]	; (8005b28 <checkAktifCalisma+0xdfc>)
 8005988:	f003 fab4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d125      	bne.n	80059de <checkAktifCalisma+0xcb2>
 8005992:	4b64      	ldr	r3, [pc, #400]	; (8005b24 <checkAktifCalisma+0xdf8>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d121      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800599a:	2102      	movs	r1, #2
 800599c:	485a      	ldr	r0, [pc, #360]	; (8005b08 <checkAktifCalisma+0xddc>)
 800599e:	f003 faa9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d11a      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059a8:	2104      	movs	r1, #4
 80059aa:	4857      	ldr	r0, [pc, #348]	; (8005b08 <checkAktifCalisma+0xddc>)
 80059ac:	f003 faa2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d113      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80059b6:	4b56      	ldr	r3, [pc, #344]	; (8005b10 <checkAktifCalisma+0xde4>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00f      	beq.n	80059de <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80059be:	4b5b      	ldr	r3, [pc, #364]	; (8005b2c <checkAktifCalisma+0xe00>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f083 0301 	eor.w	r3, r3, #1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80059cc:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <checkAktifCalisma+0xe04>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059d2:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <checkAktifCalisma+0xe08>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <checkAktifCalisma+0xe0c>)
 80059d8:	6013      	str	r3, [r2, #0]
			bekle();
 80059da:	f7ff f829 	bl	8004a30 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80059de:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <checkAktifCalisma+0xe08>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b55      	ldr	r3, [pc, #340]	; (8005b38 <checkAktifCalisma+0xe0c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	4a54      	ldr	r2, [pc, #336]	; (8005b3c <checkAktifCalisma+0xe10>)
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d20d      	bcs.n	8005a0c <checkAktifCalisma+0xce0>
 80059f0:	2102      	movs	r1, #2
 80059f2:	4845      	ldr	r0, [pc, #276]	; (8005b08 <checkAktifCalisma+0xddc>)
 80059f4:	f003 fa7e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <checkAktifCalisma+0xce0>
 80059fe:	4b44      	ldr	r3, [pc, #272]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f083 0301 	eor.w	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a0c:	4b48      	ldr	r3, [pc, #288]	; (8005b30 <checkAktifCalisma+0xe04>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a12:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <checkAktifCalisma+0xdf4>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d135      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
 8005a1a:	4b3a      	ldr	r3, [pc, #232]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d003      	beq.n	8005a2a <checkAktifCalisma+0xcfe>
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d12d      	bne.n	8005a86 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a2e:	4836      	ldr	r0, [pc, #216]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005a30:	f003 fa60 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <checkAktifCalisma+0xd16>
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <checkAktifCalisma+0xdf8>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <checkAktifCalisma+0xd2e>
 8005a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a46:	4838      	ldr	r0, [pc, #224]	; (8005b28 <checkAktifCalisma+0xdfc>)
 8005a48:	f003 fa54 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d119      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
 8005a52:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <checkAktifCalisma+0xdf8>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d115      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	482a      	ldr	r0, [pc, #168]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005a5e:	f003 fa49 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10e      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a68:	2104      	movs	r1, #4
 8005a6a:	4827      	ldr	r0, [pc, #156]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005a6c:	f003 fa42 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005a76:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005a7e:	4b30      	ldr	r3, [pc, #192]	; (8005b40 <checkAktifCalisma+0xe14>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e002      	b.n	8005a8c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <checkAktifCalisma+0xe14>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a8c:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <checkAktifCalisma+0xdf4>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11d      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d003      	beq.n	8005aa4 <checkAktifCalisma+0xd78>
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d115      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4818      	ldr	r0, [pc, #96]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005aa8:	f003 fa24 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10e      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	4814      	ldr	r0, [pc, #80]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005ab6:	f003 fa1d 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <checkAktifCalisma+0xe18>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <checkAktifCalisma+0xe18>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <checkAktifCalisma+0xe14>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <checkAktifCalisma+0xdc2>
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <checkAktifCalisma+0xe18>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <checkAktifCalisma+0xdc2>
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <checkAktifCalisma+0xe04>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d02c      	beq.n	8005b48 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005aee:	2201      	movs	r2, #1
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	480a      	ldr	r0, [pc, #40]	; (8005b1c <checkAktifCalisma+0xdf0>)
 8005af4:	f003 fa15 	bl	8008f22 <HAL_GPIO_WritePin>
 8005af8:	e02b      	b.n	8005b52 <checkAktifCalisma+0xe26>
 8005afa:	bf00      	nop
 8005afc:	20000244 	.word	0x20000244
 8005b00:	20000209 	.word	0x20000209
 8005b04:	20000208 	.word	0x20000208
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	20000206 	.word	0x20000206
 8005b10:	20000242 	.word	0x20000242
 8005b14:	20000245 	.word	0x20000245
 8005b18:	20000243 	.word	0x20000243
 8005b1c:	40010800 	.word	0x40010800
 8005b20:	2000020a 	.word	0x2000020a
 8005b24:	2000020c 	.word	0x2000020c
 8005b28:	40010c00 	.word	0x40010c00
 8005b2c:	2000022f 	.word	0x2000022f
 8005b30:	20000246 	.word	0x20000246
 8005b34:	200001dc 	.word	0x200001dc
 8005b38:	200001e0 	.word	0x200001e0
 8005b3c:	2000021a 	.word	0x2000021a
 8005b40:	20000247 	.word	0x20000247
 8005b44:	20000248 	.word	0x20000248
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2140      	movs	r1, #64	; 0x40
 8005b4c:	488d      	ldr	r0, [pc, #564]	; (8005d84 <checkAktifCalisma+0x1058>)
 8005b4e:	f003 f9e8 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005b52:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <checkAktifCalisma+0xe36>
 8005b5a:	4b8b      	ldr	r3, [pc, #556]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d115      	bne.n	8005b8e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b62:	2104      	movs	r1, #4
 8005b64:	4889      	ldr	r0, [pc, #548]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005b66:	f003 f9c5 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d003      	beq.n	8005b78 <checkAktifCalisma+0xe4c>
 8005b70:	4b87      	ldr	r3, [pc, #540]	; (8005d90 <checkAktifCalisma+0x1064>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005b78:	2102      	movs	r1, #2
 8005b7a:	4884      	ldr	r0, [pc, #528]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005b7c:	f003 f9ba 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005b86:	4b83      	ldr	r3, [pc, #524]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	e002      	b.n	8005b94 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005b8e:	4b81      	ldr	r3, [pc, #516]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005b94:	4b7c      	ldr	r3, [pc, #496]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <checkAktifCalisma+0xe78>
 8005b9c:	4b7a      	ldr	r3, [pc, #488]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d111      	bne.n	8005bc8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	4879      	ldr	r0, [pc, #484]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005ba8:	f003 f9a4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10a      	bne.n	8005bc8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	4875      	ldr	r0, [pc, #468]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005bb6:	f003 f99d 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005bc0:	4b75      	ldr	r3, [pc, #468]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005bc8:	4b73      	ldr	r3, [pc, #460]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005bce:	4b71      	ldr	r3, [pc, #452]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00f      	beq.n	8005bf6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005bd6:	4b71      	ldr	r3, [pc, #452]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10b      	bne.n	8005bf6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005be2:	486f      	ldr	r0, [pc, #444]	; (8005da0 <checkAktifCalisma+0x1074>)
 8005be4:	f003 f986 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005bee:	4b6d      	ldr	r3, [pc, #436]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	e002      	b.n	8005bfc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005bf6:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005bfc:	4b66      	ldr	r3, [pc, #408]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c04:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10b      	bne.n	8005c24 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c10:	4863      	ldr	r0, [pc, #396]	; (8005da0 <checkAktifCalisma+0x1074>)
 8005c12:	f003 f96f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005c1c:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e002      	b.n	8005c2a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005c24:	4b60      	ldr	r3, [pc, #384]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c2a:	4b60      	ldr	r3, [pc, #384]	; (8005dac <checkAktifCalisma+0x1080>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d137      	bne.n	8005ca2 <checkAktifCalisma+0xf76>
 8005c32:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d003      	beq.n	8005c42 <checkAktifCalisma+0xf16>
 8005c3a:	4b5d      	ldr	r3, [pc, #372]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d12f      	bne.n	8005ca2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c42:	4b54      	ldr	r3, [pc, #336]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <checkAktifCalisma+0xf26>
 8005c4a:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d027      	beq.n	8005ca2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c56:	484d      	ldr	r0, [pc, #308]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005c58:	f003 f94c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <checkAktifCalisma+0xf3e>
 8005c62:	4b4e      	ldr	r3, [pc, #312]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c6a:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <checkAktifCalisma+0xf4e>
 8005c72:	4b4d      	ldr	r3, [pc, #308]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005c7a:	4b4e      	ldr	r3, [pc, #312]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00f      	beq.n	8005ca2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005c82:	4b4d      	ldr	r3, [pc, #308]	; (8005db8 <checkAktifCalisma+0x108c>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f083 0301 	eor.w	r3, r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005c90:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <checkAktifCalisma+0x1090>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c96:	4b4a      	ldr	r3, [pc, #296]	; (8005dc0 <checkAktifCalisma+0x1094>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4a      	ldr	r2, [pc, #296]	; (8005dc4 <checkAktifCalisma+0x1098>)
 8005c9c:	6013      	str	r3, [r2, #0]
			bekle();
 8005c9e:	f7fe fec7 	bl	8004a30 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005ca2:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <checkAktifCalisma+0x1094>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <checkAktifCalisma+0x1098>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	4a46      	ldr	r2, [pc, #280]	; (8005dc8 <checkAktifCalisma+0x109c>)
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d214      	bcs.n	8005cde <checkAktifCalisma+0xfb2>
 8005cb4:	4b37      	ldr	r3, [pc, #220]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <checkAktifCalisma+0xfa4>
 8005cc2:	4b35      	ldr	r3, [pc, #212]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <checkAktifCalisma+0xfb2>
 8005cd0:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <checkAktifCalisma+0x1090>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ce4:	4b31      	ldr	r3, [pc, #196]	; (8005dac <checkAktifCalisma+0x1080>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d12b      	bne.n	8005d44 <checkAktifCalisma+0x1018>
 8005cec:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d003      	beq.n	8005cfc <checkAktifCalisma+0xfd0>
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d123      	bne.n	8005d44 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <checkAktifCalisma+0xfe0>
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d10:	481e      	ldr	r0, [pc, #120]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005d12:	f003 f8ef 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d103      	bne.n	8005d24 <checkAktifCalisma+0xff8>
 8005d1c:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <checkAktifCalisma+0x1008>
 8005d2c:	4b1e      	ldr	r3, [pc, #120]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005d34:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005d3c:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <checkAktifCalisma+0x10a0>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <checkAktifCalisma+0x10a0>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <checkAktifCalisma+0x1080>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d140      	bne.n	8005dd4 <checkAktifCalisma+0x10a8>
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d003      	beq.n	8005d62 <checkAktifCalisma+0x1036>
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d138      	bne.n	8005dd4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <checkAktifCalisma+0x1046>
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d030      	beq.n	8005dd4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02c      	beq.n	8005dd4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <checkAktifCalisma+0x10a4>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e02b      	b.n	8005dda <checkAktifCalisma+0x10ae>
 8005d82:	bf00      	nop
 8005d84:	40010800 	.word	0x40010800
 8005d88:	2000020d 	.word	0x2000020d
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	20000206 	.word	0x20000206
 8005d94:	2000024c 	.word	0x2000024c
 8005d98:	2000024d 	.word	0x2000024d
 8005d9c:	2000020c 	.word	0x2000020c
 8005da0:	40010c00 	.word	0x40010c00
 8005da4:	2000025c 	.word	0x2000025c
 8005da8:	2000025d 	.word	0x2000025d
 8005dac:	2000020b 	.word	0x2000020b
 8005db0:	20000208 	.word	0x20000208
 8005db4:	20000242 	.word	0x20000242
 8005db8:	2000022f 	.word	0x2000022f
 8005dbc:	20000249 	.word	0x20000249
 8005dc0:	200001dc 	.word	0x200001dc
 8005dc4:	200001e0 	.word	0x200001e0
 8005dc8:	2000021b 	.word	0x2000021b
 8005dcc:	2000024a 	.word	0x2000024a
 8005dd0:	2000024b 	.word	0x2000024b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005dd4:	4b8b      	ldr	r3, [pc, #556]	; (8006004 <checkAktifCalisma+0x12d8>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005dda:	4b8b      	ldr	r3, [pc, #556]	; (8006008 <checkAktifCalisma+0x12dc>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <checkAktifCalisma+0x10c6>
 8005de2:	4b8a      	ldr	r3, [pc, #552]	; (800600c <checkAktifCalisma+0x12e0>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <checkAktifCalisma+0x10c6>
 8005dea:	4b86      	ldr	r3, [pc, #536]	; (8006004 <checkAktifCalisma+0x12d8>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005df2:	2201      	movs	r2, #1
 8005df4:	2120      	movs	r1, #32
 8005df6:	4886      	ldr	r0, [pc, #536]	; (8006010 <checkAktifCalisma+0x12e4>)
 8005df8:	f003 f893 	bl	8008f22 <HAL_GPIO_WritePin>
 8005dfc:	e004      	b.n	8005e08 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2120      	movs	r1, #32
 8005e02:	4883      	ldr	r0, [pc, #524]	; (8006010 <checkAktifCalisma+0x12e4>)
 8005e04:	f003 f88d 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e08:	4b82      	ldr	r3, [pc, #520]	; (8006014 <checkAktifCalisma+0x12e8>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <checkAktifCalisma+0x1102>
 8005e10:	2102      	movs	r1, #2
 8005e12:	4881      	ldr	r0, [pc, #516]	; (8006018 <checkAktifCalisma+0x12ec>)
 8005e14:	f003 f86e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d107      	bne.n	8005e2e <checkAktifCalisma+0x1102>
 8005e1e:	4b7f      	ldr	r3, [pc, #508]	; (800601c <checkAktifCalisma+0x12f0>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <checkAktifCalisma+0x1102>
 8005e26:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <checkAktifCalisma+0x12f4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d112      	bne.n	8005e54 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005e2e:	4b7d      	ldr	r3, [pc, #500]	; (8006024 <checkAktifCalisma+0x12f8>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d066      	beq.n	8005f04 <checkAktifCalisma+0x11d8>
 8005e36:	2104      	movs	r1, #4
 8005e38:	4877      	ldr	r0, [pc, #476]	; (8006018 <checkAktifCalisma+0x12ec>)
 8005e3a:	f003 f85b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d15f      	bne.n	8005f04 <checkAktifCalisma+0x11d8>
 8005e44:	4b75      	ldr	r3, [pc, #468]	; (800601c <checkAktifCalisma+0x12f0>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d05b      	beq.n	8005f04 <checkAktifCalisma+0x11d8>
 8005e4c:	4b74      	ldr	r3, [pc, #464]	; (8006020 <checkAktifCalisma+0x12f4>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d057      	beq.n	8005f04 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005e54:	4b74      	ldr	r3, [pc, #464]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b72      	ldr	r3, [pc, #456]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e5e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005e60:	4b71      	ldr	r3, [pc, #452]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d908      	bls.n	8005e7a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005e68:	4b6f      	ldr	r3, [pc, #444]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005e6e:	4b6f      	ldr	r3, [pc, #444]	; (800602c <checkAktifCalisma+0x1300>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	4b6d      	ldr	r3, [pc, #436]	; (800602c <checkAktifCalisma+0x1300>)
 8005e78:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005e7a:	4b6c      	ldr	r3, [pc, #432]	; (800602c <checkAktifCalisma+0x1300>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d908      	bls.n	8005e94 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005e82:	4b6a      	ldr	r3, [pc, #424]	; (800602c <checkAktifCalisma+0x1300>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005e88:	4b69      	ldr	r3, [pc, #420]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b67      	ldr	r3, [pc, #412]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e92:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005e94:	4b66      	ldr	r3, [pc, #408]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d908      	bls.n	8005eae <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005e9c:	4b64      	ldr	r3, [pc, #400]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005ea2:	4b64      	ldr	r3, [pc, #400]	; (8006034 <checkAktifCalisma+0x1308>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <checkAktifCalisma+0x1308>)
 8005eac:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <checkAktifCalisma+0x1308>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b09      	cmp	r3, #9
 8005eb4:	d908      	bls.n	8005ec8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005eb6:	4b5f      	ldr	r3, [pc, #380]	; (8006034 <checkAktifCalisma+0x1308>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005ebc:	4b5e      	ldr	r3, [pc, #376]	; (8006038 <checkAktifCalisma+0x130c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4b5c      	ldr	r3, [pc, #368]	; (8006038 <checkAktifCalisma+0x130c>)
 8005ec6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <checkAktifCalisma+0x130c>)
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	4b5b      	ldr	r3, [pc, #364]	; (800603c <checkAktifCalisma+0x1310>)
 8005ece:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005ed2:	4b58      	ldr	r3, [pc, #352]	; (8006034 <checkAktifCalisma+0x1308>)
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <checkAktifCalisma+0x1310>)
 8005ed8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005eda:	4b55      	ldr	r3, [pc, #340]	; (8006030 <checkAktifCalisma+0x1304>)
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	4b57      	ldr	r3, [pc, #348]	; (800603c <checkAktifCalisma+0x1310>)
 8005ee0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005ee2:	4b52      	ldr	r3, [pc, #328]	; (800602c <checkAktifCalisma+0x1300>)
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	4b55      	ldr	r3, [pc, #340]	; (800603c <checkAktifCalisma+0x1310>)
 8005ee8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005eea:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <checkAktifCalisma+0x1310>)
 8005ef0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005ef2:	4b53      	ldr	r3, [pc, #332]	; (8006040 <checkAktifCalisma+0x1314>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005ef8:	4b46      	ldr	r3, [pc, #280]	; (8006014 <checkAktifCalisma+0x12e8>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005efe:	4b49      	ldr	r3, [pc, #292]	; (8006024 <checkAktifCalisma+0x12f8>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f08:	484e      	ldr	r0, [pc, #312]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f0a:	f002 fff3 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f18:	484a      	ldr	r0, [pc, #296]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f1a:	f002 ffeb 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00e      	beq.n	8005f42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f28:	4846      	ldr	r0, [pc, #280]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f2a:	f002 ffe3 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	4838      	ldr	r0, [pc, #224]	; (8006018 <checkAktifCalisma+0x12ec>)
 8005f38:	f002 ffdc 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005f42:	4b41      	ldr	r3, [pc, #260]	; (8006048 <checkAktifCalisma+0x131c>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	e002      	b.n	8005f50 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <checkAktifCalisma+0x131c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005f50:	4b3d      	ldr	r3, [pc, #244]	; (8006048 <checkAktifCalisma+0x131c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d016      	beq.n	8005f86 <checkAktifCalisma+0x125a>
 8005f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f5c:	4839      	ldr	r0, [pc, #228]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f5e:	f002 ffc9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10e      	bne.n	8005f86 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005f68:	4b38      	ldr	r3, [pc, #224]	; (800604c <checkAktifCalisma+0x1320>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f7fa fd7c 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005f74:	2001      	movs	r0, #1
 8005f76:	f7fa fd1f 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005f7a:	f001 f8f5 	bl	8007168 <convertAndSendData>
			acilstophatasi=1;
 8005f7e:	4b34      	ldr	r3, [pc, #208]	; (8006050 <checkAktifCalisma+0x1324>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e018      	b.n	8005fb8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005f86:	4b32      	ldr	r3, [pc, #200]	; (8006050 <checkAktifCalisma+0x1324>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <checkAktifCalisma+0x128c>
 8005f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f92:	482c      	ldr	r0, [pc, #176]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f94:	f002 ffae 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <checkAktifCalisma+0x128c>
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <checkAktifCalisma+0x131c>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f083 0301 	eor.w	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005fac:	4b28      	ldr	r3, [pc, #160]	; (8006050 <checkAktifCalisma+0x1324>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f7fe fce8 	bl	8004988 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005fb8:	4b26      	ldr	r3, [pc, #152]	; (8006054 <checkAktifCalisma+0x1328>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f083 0301 	eor.w	r3, r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d04e      	beq.n	8006064 <checkAktifCalisma+0x1338>
 8005fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fca:	481e      	ldr	r0, [pc, #120]	; (8006044 <checkAktifCalisma+0x1318>)
 8005fcc:	f002 ff92 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <checkAktifCalisma+0x12b2>
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <checkAktifCalisma+0x132c>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d042      	beq.n	8006064 <checkAktifCalisma+0x1338>
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <checkAktifCalisma+0x1330>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d13e      	bne.n	8006064 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <checkAktifCalisma+0x1320>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005fec:	2002      	movs	r0, #2
 8005fee:	f7fa fd3d 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005ff2:	2002      	movs	r0, #2
 8005ff4:	f7fa fce0 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8005ff8:	f001 f8b6 	bl	8007168 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <checkAktifCalisma+0x1334>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e047      	b.n	8006094 <checkAktifCalisma+0x1368>
 8006004:	2000024b 	.word	0x2000024b
 8006008:	2000024a 	.word	0x2000024a
 800600c:	20000249 	.word	0x20000249
 8006010:	40010800 	.word	0x40010800
 8006014:	2000023f 	.word	0x2000023f
 8006018:	40011000 	.word	0x40011000
 800601c:	20000206 	.word	0x20000206
 8006020:	20000242 	.word	0x20000242
 8006024:	20000240 	.word	0x20000240
 8006028:	200001fd 	.word	0x200001fd
 800602c:	200001fe 	.word	0x200001fe
 8006030:	20000000 	.word	0x20000000
 8006034:	20000001 	.word	0x20000001
 8006038:	200001ff 	.word	0x200001ff
 800603c:	2000012c 	.word	0x2000012c
 8006040:	2000022c 	.word	0x2000022c
 8006044:	40010c00 	.word	0x40010c00
 8006048:	2000024e 	.word	0x2000024e
 800604c:	20000255 	.word	0x20000255
 8006050:	20000250 	.word	0x20000250
 8006054:	20000257 	.word	0x20000257
 8006058:	20000261 	.word	0x20000261
 800605c:	20000204 	.word	0x20000204
 8006060:	20000251 	.word	0x20000251
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006064:	4b9b      	ldr	r3, [pc, #620]	; (80062d4 <checkAktifCalisma+0x15a8>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d013      	beq.n	8006094 <checkAktifCalisma+0x1368>
 800606c:	4b9a      	ldr	r3, [pc, #616]	; (80062d8 <checkAktifCalisma+0x15ac>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00f      	beq.n	8006094 <checkAktifCalisma+0x1368>
 8006074:	4b99      	ldr	r3, [pc, #612]	; (80062dc <checkAktifCalisma+0x15b0>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f083 0301 	eor.w	r3, r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006082:	4b94      	ldr	r3, [pc, #592]	; (80062d4 <checkAktifCalisma+0x15a8>)
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006088:	4b95      	ldr	r3, [pc, #596]	; (80062e0 <checkAktifCalisma+0x15b4>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800608e:	2002      	movs	r0, #2
 8006090:	f7fe fc7a 	bl	8004988 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006094:	4b93      	ldr	r3, [pc, #588]	; (80062e4 <checkAktifCalisma+0x15b8>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11e      	bne.n	80060da <checkAktifCalisma+0x13ae>
 800609c:	4b92      	ldr	r3, [pc, #584]	; (80062e8 <checkAktifCalisma+0x15bc>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d11a      	bne.n	80060da <checkAktifCalisma+0x13ae>
 80060a4:	4b91      	ldr	r3, [pc, #580]	; (80062ec <checkAktifCalisma+0x15c0>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d016      	beq.n	80060da <checkAktifCalisma+0x13ae>
 80060ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060b0:	488f      	ldr	r0, [pc, #572]	; (80062f0 <checkAktifCalisma+0x15c4>)
 80060b2:	f002 ff1f 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d10e      	bne.n	80060da <checkAktifCalisma+0x13ae>
			hataVar=1;
 80060bc:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <checkAktifCalisma+0x15c8>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80060c2:	2003      	movs	r0, #3
 80060c4:	f7fa fcd2 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(3);
 80060c8:	2003      	movs	r0, #3
 80060ca:	f7fa fc75 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 80060ce:	f001 f84b 	bl	8007168 <convertAndSendData>
			basinchatasi=1;
 80060d2:	4b89      	ldr	r3, [pc, #548]	; (80062f8 <checkAktifCalisma+0x15cc>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e015      	b.n	8006106 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80060da:	4b87      	ldr	r3, [pc, #540]	; (80062f8 <checkAktifCalisma+0x15cc>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <checkAktifCalisma+0x13da>
 80060e2:	4b80      	ldr	r3, [pc, #512]	; (80062e4 <checkAktifCalisma+0x15b8>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d10d      	bne.n	8006106 <checkAktifCalisma+0x13da>
 80060ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ee:	4883      	ldr	r0, [pc, #524]	; (80062fc <checkAktifCalisma+0x15d0>)
 80060f0:	f002 ff00 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80060fa:	4b7f      	ldr	r3, [pc, #508]	; (80062f8 <checkAktifCalisma+0x15cc>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006100:	2003      	movs	r0, #3
 8006102:	f7fe fc41 	bl	8004988 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006106:	4b7e      	ldr	r3, [pc, #504]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <checkAktifCalisma+0x13ea>
 800610e:	4b7d      	ldr	r3, [pc, #500]	; (8006304 <checkAktifCalisma+0x15d8>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01e      	beq.n	8006154 <checkAktifCalisma+0x1428>
 8006116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800611a:	487b      	ldr	r0, [pc, #492]	; (8006308 <checkAktifCalisma+0x15dc>)
 800611c:	f002 feea 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d116      	bne.n	8006154 <checkAktifCalisma+0x1428>
 8006126:	4b79      	ldr	r3, [pc, #484]	; (800630c <checkAktifCalisma+0x15e0>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d003      	beq.n	8006136 <checkAktifCalisma+0x140a>
 800612e:	4b77      	ldr	r3, [pc, #476]	; (800630c <checkAktifCalisma+0x15e0>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d10e      	bne.n	8006154 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006136:	4b6f      	ldr	r3, [pc, #444]	; (80062f4 <checkAktifCalisma+0x15c8>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800613c:	2004      	movs	r0, #4
 800613e:	f7fa fc95 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006142:	2004      	movs	r0, #4
 8006144:	f7fa fc38 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 8006148:	f001 f80e 	bl	8007168 <convertAndSendData>
			katkapisivicihatasi=1;
 800614c:	4b70      	ldr	r3, [pc, #448]	; (8006310 <checkAktifCalisma+0x15e4>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e01f      	b.n	8006194 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006154:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <checkAktifCalisma+0x15e4>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <checkAktifCalisma+0x1468>
 800615c:	4b6d      	ldr	r3, [pc, #436]	; (8006314 <checkAktifCalisma+0x15e8>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d017      	beq.n	8006194 <checkAktifCalisma+0x1468>
 8006164:	4b66      	ldr	r3, [pc, #408]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d010      	beq.n	8006194 <checkAktifCalisma+0x1468>
 8006172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006176:	4864      	ldr	r0, [pc, #400]	; (8006308 <checkAktifCalisma+0x15dc>)
 8006178:	f002 febc 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006182:	4b63      	ldr	r3, [pc, #396]	; (8006310 <checkAktifCalisma+0x15e4>)
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006188:	4b5e      	ldr	r3, [pc, #376]	; (8006304 <checkAktifCalisma+0x15d8>)
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800618e:	2004      	movs	r0, #4
 8006190:	f7fe fbfa 	bl	8004988 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006194:	4b5a      	ldr	r3, [pc, #360]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d103      	bne.n	80061a4 <checkAktifCalisma+0x1478>
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <checkAktifCalisma+0x15ec>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01e      	beq.n	80061e2 <checkAktifCalisma+0x14b6>
 80061a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a8:	4857      	ldr	r0, [pc, #348]	; (8006308 <checkAktifCalisma+0x15dc>)
 80061aa:	f002 fea3 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d116      	bne.n	80061e2 <checkAktifCalisma+0x14b6>
 80061b4:	4b55      	ldr	r3, [pc, #340]	; (800630c <checkAktifCalisma+0x15e0>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d003      	beq.n	80061c4 <checkAktifCalisma+0x1498>
 80061bc:	4b53      	ldr	r3, [pc, #332]	; (800630c <checkAktifCalisma+0x15e0>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d10e      	bne.n	80061e2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80061c4:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <checkAktifCalisma+0x15c8>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80061ca:	2005      	movs	r0, #5
 80061cc:	f7fa fc4e 	bl	8000a6c <hataKoduLcdGoster>
			hata2EEPROM(5);
 80061d0:	2005      	movs	r0, #5
 80061d2:	f7fa fbf1 	bl	80009b8 <hata2EEPROM>
			convertAndSendData();
 80061d6:	f000 ffc7 	bl	8007168 <convertAndSendData>
			tablakapisivicihatasi=1;
 80061da:	4b50      	ldr	r3, [pc, #320]	; (800631c <checkAktifCalisma+0x15f0>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e023      	b.n	800622a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80061e2:	4b4e      	ldr	r3, [pc, #312]	; (800631c <checkAktifCalisma+0x15f0>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01f      	beq.n	800622a <checkAktifCalisma+0x14fe>
 80061ea:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <checkAktifCalisma+0x15e8>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <checkAktifCalisma+0x14fe>
 80061f2:	4b43      	ldr	r3, [pc, #268]	; (8006300 <checkAktifCalisma+0x15d4>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f083 0301 	eor.w	r3, r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <checkAktifCalisma+0x14fe>
 8006200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006204:	4840      	ldr	r0, [pc, #256]	; (8006308 <checkAktifCalisma+0x15dc>)
 8006206:	f002 fe75 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <checkAktifCalisma+0x14fe>
 8006210:	4b40      	ldr	r3, [pc, #256]	; (8006314 <checkAktifCalisma+0x15e8>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006218:	4b40      	ldr	r3, [pc, #256]	; (800631c <checkAktifCalisma+0x15f0>)
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800621e:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <checkAktifCalisma+0x15ec>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006224:	2005      	movs	r0, #5
 8006226:	f7fe fbaf 	bl	8004988 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800622a:	4b30      	ldr	r3, [pc, #192]	; (80062ec <checkAktifCalisma+0x15c0>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d107      	bne.n	8006242 <checkAktifCalisma+0x1516>
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <checkAktifCalisma+0x15b0>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <checkAktifCalisma+0x1516>
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <checkAktifCalisma+0x15f4>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006242:	4b38      	ldr	r3, [pc, #224]	; (8006324 <checkAktifCalisma+0x15f8>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b38      	ldr	r3, [pc, #224]	; (8006328 <checkAktifCalisma+0x15fc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	4a37      	ldr	r2, [pc, #220]	; (800632c <checkAktifCalisma+0x1600>)
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	4293      	cmp	r3, r2
 8006252:	d30d      	bcc.n	8006270 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <checkAktifCalisma+0x15c8>)
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800625a:	2006      	movs	r0, #6
 800625c:	f7fa fc06 	bl	8000a6c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006260:	2006      	movs	r0, #6
 8006262:	f7fa fba9 	bl	80009b8 <hata2EEPROM>
			  	convertAndSendData();
 8006266:	f000 ff7f 	bl	8007168 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800626a:	4b31      	ldr	r3, [pc, #196]	; (8006330 <checkAktifCalisma+0x1604>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006270:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <checkAktifCalisma+0x1604>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <checkAktifCalisma+0x1574>
 8006278:	2108      	movs	r1, #8
 800627a:	4823      	ldr	r0, [pc, #140]	; (8006308 <checkAktifCalisma+0x15dc>)
 800627c:	f002 fe3a 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <checkAktifCalisma+0x1574>
 8006286:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f083 0301 	eor.w	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006294:	4b26      	ldr	r3, [pc, #152]	; (8006330 <checkAktifCalisma+0x1604>)
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800629a:	2006      	movs	r0, #6
 800629c:	f7fe fb74 	bl	8004988 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <checkAktifCalisma+0x1608>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <checkAktifCalisma+0x1594>
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <checkAktifCalisma+0x15b0>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d107      	bne.n	80062c0 <checkAktifCalisma+0x1594>
 80062b0:	4b21      	ldr	r3, [pc, #132]	; (8006338 <checkAktifCalisma+0x160c>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <checkAktifCalisma+0x1594>
 80062b8:	4b19      	ldr	r3, [pc, #100]	; (8006320 <checkAktifCalisma+0x15f4>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d03f      	beq.n	8006340 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80062c0:	4b1e      	ldr	r3, [pc, #120]	; (800633c <checkAktifCalisma+0x1610>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <checkAktifCalisma+0x15d8>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <checkAktifCalisma+0x15ec>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e03c      	b.n	800634e <checkAktifCalisma+0x1622>
 80062d4:	20000251 	.word	0x20000251
 80062d8:	20000257 	.word	0x20000257
 80062dc:	20000238 	.word	0x20000238
 80062e0:	20000261 	.word	0x20000261
 80062e4:	20000203 	.word	0x20000203
 80062e8:	20000207 	.word	0x20000207
 80062ec:	20000254 	.word	0x20000254
 80062f0:	40011000 	.word	0x40011000
 80062f4:	20000255 	.word	0x20000255
 80062f8:	2000025e 	.word	0x2000025e
 80062fc:	40010c00 	.word	0x40010c00
 8006300:	2000024e 	.word	0x2000024e
 8006304:	20000262 	.word	0x20000262
 8006308:	40010800 	.word	0x40010800
 800630c:	20000208 	.word	0x20000208
 8006310:	2000025f 	.word	0x2000025f
 8006314:	20000242 	.word	0x20000242
 8006318:	20000263 	.word	0x20000263
 800631c:	20000260 	.word	0x20000260
 8006320:	20000237 	.word	0x20000237
 8006324:	200001dc 	.word	0x200001dc
 8006328:	200001f0 	.word	0x200001f0
 800632c:	20000218 	.word	0x20000218
 8006330:	2000024f 	.word	0x2000024f
 8006334:	20000235 	.word	0x20000235
 8006338:	20000236 	.word	0x20000236
 800633c:	20000256 	.word	0x20000256
		} else {
			makineCalisiyor=1;
 8006340:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <checkAktifCalisma+0x1690>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006346:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <checkAktifCalisma+0x1694>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <checkAktifCalisma+0x1698>)
 800634c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800634e:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <checkAktifCalisma+0x169c>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02f      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <checkAktifCalisma+0x16a0>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f083 0301 	eor.w	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d028      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 8006364:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <checkAktifCalisma+0x16a4>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f083 0301 	eor.w	r3, r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d021      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <checkAktifCalisma+0x16a8>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f083 0301 	eor.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01a      	beq.n	80063b6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006380:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <checkAktifCalisma+0x16ac>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f083 0301 	eor.w	r3, r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <checkAktifCalisma+0x16b0>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f083 0301 	eor.w	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <checkAktifCalisma+0x16b4>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f083 0301 	eor.w	r3, r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <checkAktifCalisma+0x169c>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80063b0:	2007      	movs	r0, #7
 80063b2:	f7fe fae9 	bl	8004988 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000256 	.word	0x20000256
 80063c0:	200001dc 	.word	0x200001dc
 80063c4:	200001f0 	.word	0x200001f0
 80063c8:	20000255 	.word	0x20000255
 80063cc:	20000250 	.word	0x20000250
 80063d0:	20000251 	.word	0x20000251
 80063d4:	2000025e 	.word	0x2000025e
 80063d8:	2000025f 	.word	0x2000025f
 80063dc:	20000260 	.word	0x20000260
 80063e0:	2000024f 	.word	0x2000024f

080063e4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80063e8:	4b8b      	ldr	r3, [pc, #556]	; (8006618 <checkDemoModCalisma+0x234>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	f040 8229 	bne.w	8006844 <checkDemoModCalisma+0x460>
 80063f2:	4b8a      	ldr	r3, [pc, #552]	; (800661c <checkDemoModCalisma+0x238>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8224 	beq.w	8006844 <checkDemoModCalisma+0x460>
 80063fc:	4b88      	ldr	r3, [pc, #544]	; (8006620 <checkDemoModCalisma+0x23c>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 821f 	bne.w	8006844 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006406:	2102      	movs	r1, #2
 8006408:	4886      	ldr	r0, [pc, #536]	; (8006624 <checkDemoModCalisma+0x240>)
 800640a:	f002 fd73 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11d      	bne.n	8006450 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006414:	4b84      	ldr	r3, [pc, #528]	; (8006628 <checkDemoModCalisma+0x244>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006422:	4b82      	ldr	r3, [pc, #520]	; (800662c <checkDemoModCalisma+0x248>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f083 0301 	eor.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006430:	4b7f      	ldr	r3, [pc, #508]	; (8006630 <checkDemoModCalisma+0x24c>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800643e:	2201      	movs	r2, #1
 8006440:	2104      	movs	r1, #4
 8006442:	487c      	ldr	r0, [pc, #496]	; (8006634 <checkDemoModCalisma+0x250>)
 8006444:	f002 fd6d 	bl	8008f22 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006448:	4b7b      	ldr	r3, [pc, #492]	; (8006638 <checkDemoModCalisma+0x254>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e00e      	b.n	800646e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006450:	2102      	movs	r1, #2
 8006452:	4874      	ldr	r0, [pc, #464]	; (8006624 <checkDemoModCalisma+0x240>)
 8006454:	f002 fd4e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006458:	4603      	mov	r3, r0
 800645a:	2b01      	cmp	r3, #1
 800645c:	d107      	bne.n	800646e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800645e:	2200      	movs	r2, #0
 8006460:	2104      	movs	r1, #4
 8006462:	4874      	ldr	r0, [pc, #464]	; (8006634 <checkDemoModCalisma+0x250>)
 8006464:	f002 fd5d 	bl	8008f22 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006468:	4b73      	ldr	r3, [pc, #460]	; (8006638 <checkDemoModCalisma+0x254>)
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800646e:	4b72      	ldr	r3, [pc, #456]	; (8006638 <checkDemoModCalisma+0x254>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <checkDemoModCalisma+0xaa>
 8006476:	4b6d      	ldr	r3, [pc, #436]	; (800662c <checkDemoModCalisma+0x248>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <checkDemoModCalisma+0xaa>
 800647e:	4b6c      	ldr	r3, [pc, #432]	; (8006630 <checkDemoModCalisma+0x24c>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <checkDemoModCalisma+0xaa>
 8006486:	4b68      	ldr	r3, [pc, #416]	; (8006628 <checkDemoModCalisma+0x244>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800648e:	2201      	movs	r2, #1
 8006490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006494:	4867      	ldr	r0, [pc, #412]	; (8006634 <checkDemoModCalisma+0x250>)
 8006496:	f002 fd44 	bl	8008f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800649a:	2201      	movs	r2, #1
 800649c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064a0:	4864      	ldr	r0, [pc, #400]	; (8006634 <checkDemoModCalisma+0x250>)
 80064a2:	f002 fd3e 	bl	8008f22 <HAL_GPIO_WritePin>
 80064a6:	e00b      	b.n	80064c0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064a8:	2200      	movs	r2, #0
 80064aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064ae:	4861      	ldr	r0, [pc, #388]	; (8006634 <checkDemoModCalisma+0x250>)
 80064b0:	f002 fd37 	bl	8008f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80064b4:	2200      	movs	r2, #0
 80064b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064ba:	485e      	ldr	r0, [pc, #376]	; (8006634 <checkDemoModCalisma+0x250>)
 80064bc:	f002 fd31 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064c0:	2102      	movs	r1, #2
 80064c2:	4858      	ldr	r0, [pc, #352]	; (8006624 <checkDemoModCalisma+0x240>)
 80064c4:	f002 fd16 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10d      	bne.n	80064ea <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064d2:	4854      	ldr	r0, [pc, #336]	; (8006624 <checkDemoModCalisma+0x240>)
 80064d4:	f002 fd0e 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80064de:	4b56      	ldr	r3, [pc, #344]	; (8006638 <checkDemoModCalisma+0x254>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f083 0301 	eor.w	r3, r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064ea:	2102      	movs	r1, #2
 80064ec:	484d      	ldr	r0, [pc, #308]	; (8006624 <checkDemoModCalisma+0x240>)
 80064ee:	f002 fd01 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d125      	bne.n	8006544 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064fc:	4849      	ldr	r0, [pc, #292]	; (8006624 <checkDemoModCalisma+0x240>)
 80064fe:	f002 fcf9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11d      	bne.n	8006544 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006508:	4b4b      	ldr	r3, [pc, #300]	; (8006638 <checkDemoModCalisma+0x254>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f083 0301 	eor.w	r3, r3, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006516:	4b44      	ldr	r3, [pc, #272]	; (8006628 <checkDemoModCalisma+0x244>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00f      	beq.n	8006544 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006524:	4b42      	ldr	r3, [pc, #264]	; (8006630 <checkDemoModCalisma+0x24c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006532:	2201      	movs	r2, #1
 8006534:	2120      	movs	r1, #32
 8006536:	483b      	ldr	r0, [pc, #236]	; (8006624 <checkDemoModCalisma+0x240>)
 8006538:	f002 fcf3 	bl	8008f22 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <checkDemoModCalisma+0x248>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e007      	b.n	8006554 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006544:	2200      	movs	r2, #0
 8006546:	2120      	movs	r1, #32
 8006548:	4836      	ldr	r0, [pc, #216]	; (8006624 <checkDemoModCalisma+0x240>)
 800654a:	f002 fcea 	bl	8008f22 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <checkDemoModCalisma+0x248>)
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006554:	2102      	movs	r1, #2
 8006556:	4833      	ldr	r0, [pc, #204]	; (8006624 <checkDemoModCalisma+0x240>)
 8006558:	f002 fccc 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d125      	bne.n	80065ae <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006566:	482f      	ldr	r0, [pc, #188]	; (8006624 <checkDemoModCalisma+0x240>)
 8006568:	f002 fcc4 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11d      	bne.n	80065ae <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006572:	4b31      	ldr	r3, [pc, #196]	; (8006638 <checkDemoModCalisma+0x254>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f083 0301 	eor.w	r3, r3, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d016      	beq.n	80065ae <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006580:	4b2a      	ldr	r3, [pc, #168]	; (800662c <checkDemoModCalisma+0x248>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800658e:	4b26      	ldr	r3, [pc, #152]	; (8006628 <checkDemoModCalisma+0x244>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f083 0301 	eor.w	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800659c:	2201      	movs	r2, #1
 800659e:	2110      	movs	r1, #16
 80065a0:	4820      	ldr	r0, [pc, #128]	; (8006624 <checkDemoModCalisma+0x240>)
 80065a2:	f002 fcbe 	bl	8008f22 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <checkDemoModCalisma+0x24c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e007      	b.n	80065be <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	2110      	movs	r1, #16
 80065b2:	481c      	ldr	r0, [pc, #112]	; (8006624 <checkDemoModCalisma+0x240>)
 80065b4:	f002 fcb5 	bl	8008f22 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80065b8:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <checkDemoModCalisma+0x24c>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80065be:	2104      	movs	r1, #4
 80065c0:	4818      	ldr	r0, [pc, #96]	; (8006624 <checkDemoModCalisma+0x240>)
 80065c2:	f002 fc97 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d139      	bne.n	8006640 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80065cc:	4b1a      	ldr	r3, [pc, #104]	; (8006638 <checkDemoModCalisma+0x254>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f083 0301 	eor.w	r3, r3, #1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d032      	beq.n	8006640 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <checkDemoModCalisma+0x24c>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f083 0301 	eor.w	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02b      	beq.n	8006640 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <checkDemoModCalisma+0x248>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d024      	beq.n	8006640 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80065f6:	2201      	movs	r2, #1
 80065f8:	2102      	movs	r1, #2
 80065fa:	480e      	ldr	r0, [pc, #56]	; (8006634 <checkDemoModCalisma+0x250>)
 80065fc:	f002 fc91 	bl	8008f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006600:	2201      	movs	r2, #1
 8006602:	2101      	movs	r1, #1
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <checkDemoModCalisma+0x250>)
 8006606:	f002 fc8c 	bl	8008f22 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <checkDemoModCalisma+0x244>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <checkDemoModCalisma+0x258>)
 8006612:	2201      	movs	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e027      	b.n	8006668 <checkDemoModCalisma+0x284>
 8006618:	2000021e 	.word	0x2000021e
 800661c:	20000252 	.word	0x20000252
 8006620:	2000021d 	.word	0x2000021d
 8006624:	40011000 	.word	0x40011000
 8006628:	20000259 	.word	0x20000259
 800662c:	2000025a 	.word	0x2000025a
 8006630:	2000025b 	.word	0x2000025b
 8006634:	40010c00 	.word	0x40010c00
 8006638:	20000258 	.word	0x20000258
 800663c:	2000023e 	.word	0x2000023e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006640:	2104      	movs	r1, #4
 8006642:	48a0      	ldr	r0, [pc, #640]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 8006644:	f002 fc56 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10c      	bne.n	8006668 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800664e:	2200      	movs	r2, #0
 8006650:	2102      	movs	r1, #2
 8006652:	489d      	ldr	r0, [pc, #628]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006654:	f002 fc65 	bl	8008f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006658:	2200      	movs	r2, #0
 800665a:	2101      	movs	r1, #1
 800665c:	489a      	ldr	r0, [pc, #616]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 800665e:	f002 fc60 	bl	8008f22 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006662:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <checkDemoModCalisma+0x4e8>)
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006668:	2104      	movs	r1, #4
 800666a:	4896      	ldr	r0, [pc, #600]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 800666c:	f002 fc42 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10d      	bne.n	8006692 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006676:	2201      	movs	r2, #1
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	4895      	ldr	r0, [pc, #596]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 800667c:	f002 fc51 	bl	8008f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006680:	2201      	movs	r2, #1
 8006682:	2120      	movs	r1, #32
 8006684:	4892      	ldr	r0, [pc, #584]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 8006686:	f002 fc4c 	bl	8008f22 <HAL_GPIO_WritePin>
			timer3 = millis;
 800668a:	4b92      	ldr	r3, [pc, #584]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a92      	ldr	r2, [pc, #584]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 8006690:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006692:	4b90      	ldr	r3, [pc, #576]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b90      	ldr	r3, [pc, #576]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b04      	cmp	r3, #4
 800669e:	d909      	bls.n	80066b4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	488a      	ldr	r0, [pc, #552]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066a6:	f002 fc3c 	bl	8008f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2120      	movs	r1, #32
 80066ae:	4888      	ldr	r0, [pc, #544]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066b0:	f002 fc37 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066b4:	2102      	movs	r1, #2
 80066b6:	4883      	ldr	r0, [pc, #524]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 80066b8:	f002 fc1c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d108      	bne.n	80066d4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80066c2:	2201      	movs	r2, #1
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	4882      	ldr	r0, [pc, #520]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066c8:	f002 fc2b 	bl	8008f22 <HAL_GPIO_WritePin>
			timer3 = millis;
 80066cc:	4b81      	ldr	r3, [pc, #516]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a81      	ldr	r2, [pc, #516]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 80066d2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80066d4:	4b7f      	ldr	r3, [pc, #508]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d904      	bls.n	80066ec <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066e2:	2200      	movs	r2, #0
 80066e4:	2140      	movs	r1, #64	; 0x40
 80066e6:	487a      	ldr	r0, [pc, #488]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066e8:	f002 fc1b 	bl	8008f22 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80066ec:	4b7b      	ldr	r3, [pc, #492]	; (80068dc <checkDemoModCalisma+0x4f8>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d058      	beq.n	80067a6 <checkDemoModCalisma+0x3c2>
 80066f4:	4b7a      	ldr	r3, [pc, #488]	; (80068e0 <checkDemoModCalisma+0x4fc>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d054      	beq.n	80067a6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80066fc:	4b79      	ldr	r3, [pc, #484]	; (80068e4 <checkDemoModCalisma+0x500>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4b77      	ldr	r3, [pc, #476]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006706:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006708:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <checkDemoModCalisma+0x500>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d908      	bls.n	8006722 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006710:	4b74      	ldr	r3, [pc, #464]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006716:	4b74      	ldr	r3, [pc, #464]	; (80068e8 <checkDemoModCalisma+0x504>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b72      	ldr	r3, [pc, #456]	; (80068e8 <checkDemoModCalisma+0x504>)
 8006720:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006722:	4b71      	ldr	r3, [pc, #452]	; (80068e8 <checkDemoModCalisma+0x504>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d908      	bls.n	800673c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800672a:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <checkDemoModCalisma+0x504>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006730:	4b6e      	ldr	r3, [pc, #440]	; (80068ec <checkDemoModCalisma+0x508>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	4b6c      	ldr	r3, [pc, #432]	; (80068ec <checkDemoModCalisma+0x508>)
 800673a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800673c:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <checkDemoModCalisma+0x508>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b09      	cmp	r3, #9
 8006742:	d908      	bls.n	8006756 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006744:	4b69      	ldr	r3, [pc, #420]	; (80068ec <checkDemoModCalisma+0x508>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800674a:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <checkDemoModCalisma+0x50c>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	3301      	adds	r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4b67      	ldr	r3, [pc, #412]	; (80068f0 <checkDemoModCalisma+0x50c>)
 8006754:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006756:	4b66      	ldr	r3, [pc, #408]	; (80068f0 <checkDemoModCalisma+0x50c>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b09      	cmp	r3, #9
 800675c:	d908      	bls.n	8006770 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800675e:	4b64      	ldr	r3, [pc, #400]	; (80068f0 <checkDemoModCalisma+0x50c>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006764:	4b63      	ldr	r3, [pc, #396]	; (80068f4 <checkDemoModCalisma+0x510>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	3301      	adds	r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	4b61      	ldr	r3, [pc, #388]	; (80068f4 <checkDemoModCalisma+0x510>)
 800676e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006770:	4b60      	ldr	r3, [pc, #384]	; (80068f4 <checkDemoModCalisma+0x510>)
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006776:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800677a:	4b5d      	ldr	r3, [pc, #372]	; (80068f0 <checkDemoModCalisma+0x50c>)
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	4b5e      	ldr	r3, [pc, #376]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006780:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006782:	4b5a      	ldr	r3, [pc, #360]	; (80068ec <checkDemoModCalisma+0x508>)
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	4b5c      	ldr	r3, [pc, #368]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006788:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800678a:	4b57      	ldr	r3, [pc, #348]	; (80068e8 <checkDemoModCalisma+0x504>)
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	4b5a      	ldr	r3, [pc, #360]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006790:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006792:	4b54      	ldr	r3, [pc, #336]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	4b58      	ldr	r3, [pc, #352]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006798:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800679a:	4b58      	ldr	r3, [pc, #352]	; (80068fc <checkDemoModCalisma+0x518>)
 800679c:	2201      	movs	r2, #1
 800679e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80067a0:	4b4f      	ldr	r3, [pc, #316]	; (80068e0 <checkDemoModCalisma+0x4fc>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80067a6:	4b56      	ldr	r3, [pc, #344]	; (8006900 <checkDemoModCalisma+0x51c>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8087 	bne.w	80068be <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80067b0:	4a54      	ldr	r2, [pc, #336]	; (8006904 <checkDemoModCalisma+0x520>)
 80067b2:	2101      	movs	r1, #1
 80067b4:	2002      	movs	r0, #2
 80067b6:	f001 f88d 	bl	80078d4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80067ba:	4a53      	ldr	r2, [pc, #332]	; (8006908 <checkDemoModCalisma+0x524>)
 80067bc:	2101      	movs	r1, #1
 80067be:	2001      	movs	r0, #1
 80067c0:	f001 f888 	bl	80078d4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80067c4:	4b4b      	ldr	r3, [pc, #300]	; (80068f4 <checkDemoModCalisma+0x510>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	220a      	movs	r2, #10
 80067ca:	4950      	ldr	r1, [pc, #320]	; (800690c <checkDemoModCalisma+0x528>)
 80067cc:	4618      	mov	r0, r3
 80067ce:	f005 fbbd 	bl	800bf4c <itoa>
			lcd_print(2,12,snum);
 80067d2:	4a4e      	ldr	r2, [pc, #312]	; (800690c <checkDemoModCalisma+0x528>)
 80067d4:	210c      	movs	r1, #12
 80067d6:	2002      	movs	r0, #2
 80067d8:	f001 f87c 	bl	80078d4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80067dc:	4b44      	ldr	r3, [pc, #272]	; (80068f0 <checkDemoModCalisma+0x50c>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	220a      	movs	r2, #10
 80067e2:	494a      	ldr	r1, [pc, #296]	; (800690c <checkDemoModCalisma+0x528>)
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 fbb1 	bl	800bf4c <itoa>
			lcd_print(2,13,snum);
 80067ea:	4a48      	ldr	r2, [pc, #288]	; (800690c <checkDemoModCalisma+0x528>)
 80067ec:	210d      	movs	r1, #13
 80067ee:	2002      	movs	r0, #2
 80067f0:	f001 f870 	bl	80078d4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80067f4:	4b3d      	ldr	r3, [pc, #244]	; (80068ec <checkDemoModCalisma+0x508>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	220a      	movs	r2, #10
 80067fa:	4944      	ldr	r1, [pc, #272]	; (800690c <checkDemoModCalisma+0x528>)
 80067fc:	4618      	mov	r0, r3
 80067fe:	f005 fba5 	bl	800bf4c <itoa>
			lcd_print(2,14,snum);
 8006802:	4a42      	ldr	r2, [pc, #264]	; (800690c <checkDemoModCalisma+0x528>)
 8006804:	210e      	movs	r1, #14
 8006806:	2002      	movs	r0, #2
 8006808:	f001 f864 	bl	80078d4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800680c:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <checkDemoModCalisma+0x504>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	220a      	movs	r2, #10
 8006812:	493e      	ldr	r1, [pc, #248]	; (800690c <checkDemoModCalisma+0x528>)
 8006814:	4618      	mov	r0, r3
 8006816:	f005 fb99 	bl	800bf4c <itoa>
			lcd_print(2,15,snum);
 800681a:	4a3c      	ldr	r2, [pc, #240]	; (800690c <checkDemoModCalisma+0x528>)
 800681c:	210f      	movs	r1, #15
 800681e:	2002      	movs	r0, #2
 8006820:	f001 f858 	bl	80078d4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006824:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	220a      	movs	r2, #10
 800682a:	4938      	ldr	r1, [pc, #224]	; (800690c <checkDemoModCalisma+0x528>)
 800682c:	4618      	mov	r0, r3
 800682e:	f005 fb8d 	bl	800bf4c <itoa>
			lcd_print(2,16,snum);
 8006832:	4a36      	ldr	r2, [pc, #216]	; (800690c <checkDemoModCalisma+0x528>)
 8006834:	2110      	movs	r1, #16
 8006836:	2002      	movs	r0, #2
 8006838:	f001 f84c 	bl	80078d4 <lcd_print>
			mesajYazildi=1;
 800683c:	4b34      	ldr	r3, [pc, #208]	; (8006910 <checkDemoModCalisma+0x52c>)
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006842:	e03c      	b.n	80068be <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <checkDemoModCalisma+0x530>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d003      	beq.n	8006854 <checkDemoModCalisma+0x470>
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <checkDemoModCalisma+0x51c>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d134      	bne.n	80068be <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006854:	2200      	movs	r2, #0
 8006856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800685a:	481b      	ldr	r0, [pc, #108]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 800685c:	f002 fb61 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006866:	4818      	ldr	r0, [pc, #96]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006868:	f002 fb5b 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800686c:	2200      	movs	r2, #0
 800686e:	2104      	movs	r1, #4
 8006870:	4815      	ldr	r0, [pc, #84]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006872:	f002 fb56 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006876:	2200      	movs	r2, #0
 8006878:	2102      	movs	r1, #2
 800687a:	4813      	ldr	r0, [pc, #76]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 800687c:	f002 fb51 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006880:	2200      	movs	r2, #0
 8006882:	2101      	movs	r1, #1
 8006884:	4810      	ldr	r0, [pc, #64]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006886:	f002 fb4c 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800688a:	2200      	movs	r2, #0
 800688c:	2120      	movs	r1, #32
 800688e:	480d      	ldr	r0, [pc, #52]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 8006890:	f002 fb47 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006894:	2200      	movs	r2, #0
 8006896:	2110      	movs	r1, #16
 8006898:	480a      	ldr	r0, [pc, #40]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 800689a:	f002 fb42 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800689e:	2200      	movs	r2, #0
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	480b      	ldr	r0, [pc, #44]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80068a4:	f002 fb3d 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2140      	movs	r1, #64	; 0x40
 80068ac:	4808      	ldr	r0, [pc, #32]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80068ae:	f002 fb38 	bl	8008f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2120      	movs	r1, #32
 80068b6:	4806      	ldr	r0, [pc, #24]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80068b8:	f002 fb33 	bl	8008f22 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80068bc:	e7ff      	b.n	80068be <checkDemoModCalisma+0x4da>
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40011000 	.word	0x40011000
 80068c8:	40010c00 	.word	0x40010c00
 80068cc:	20000259 	.word	0x20000259
 80068d0:	40010800 	.word	0x40010800
 80068d4:	200001dc 	.word	0x200001dc
 80068d8:	200001ec 	.word	0x200001ec
 80068dc:	20000258 	.word	0x20000258
 80068e0:	2000023e 	.word	0x2000023e
 80068e4:	200001fd 	.word	0x200001fd
 80068e8:	200001fe 	.word	0x200001fe
 80068ec:	20000000 	.word	0x20000000
 80068f0:	20000001 	.word	0x20000001
 80068f4:	200001ff 	.word	0x200001ff
 80068f8:	2000012c 	.word	0x2000012c
 80068fc:	2000022c 	.word	0x2000022c
 8006900:	2000021d 	.word	0x2000021d
 8006904:	0800d774 	.word	0x0800d774
 8006908:	0800d780 	.word	0x0800d780
 800690c:	2000019c 	.word	0x2000019c
 8006910:	20000234 	.word	0x20000234
 8006914:	2000021e 	.word	0x2000021e

08006918 <mainLoop>:

void mainLoop() {
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800691e:	f7fe f923 	bl	8004b68 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006922:	2101      	movs	r1, #1
 8006924:	48ac      	ldr	r0, [pc, #688]	; (8006bd8 <mainLoop+0x2c0>)
 8006926:	f002 fae5 	bl	8008ef4 <HAL_GPIO_ReadPin>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d136      	bne.n	800699e <mainLoop+0x86>
 8006930:	2108      	movs	r1, #8
 8006932:	48aa      	ldr	r0, [pc, #680]	; (8006bdc <mainLoop+0x2c4>)
 8006934:	f002 fade 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d12f      	bne.n	800699e <mainLoop+0x86>
 800693e:	2102      	movs	r1, #2
 8006940:	48a5      	ldr	r0, [pc, #660]	; (8006bd8 <mainLoop+0x2c0>)
 8006942:	f002 fad7 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d128      	bne.n	800699e <mainLoop+0x86>
 800694c:	2104      	movs	r1, #4
 800694e:	48a2      	ldr	r0, [pc, #648]	; (8006bd8 <mainLoop+0x2c0>)
 8006950:	f002 fad0 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d121      	bne.n	800699e <mainLoop+0x86>
 800695a:	2108      	movs	r1, #8
 800695c:	489e      	ldr	r0, [pc, #632]	; (8006bd8 <mainLoop+0x2c0>)
 800695e:	f002 fac9 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11a      	bne.n	800699e <mainLoop+0x86>
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	489c      	ldr	r0, [pc, #624]	; (8006bdc <mainLoop+0x2c4>)
 800696c:	f002 fac2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006970:	4603      	mov	r3, r0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d113      	bne.n	800699e <mainLoop+0x86>
 8006976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800697a:	4898      	ldr	r0, [pc, #608]	; (8006bdc <mainLoop+0x2c4>)
 800697c:	f002 faba 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10b      	bne.n	800699e <mainLoop+0x86>
 8006986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800698a:	4894      	ldr	r0, [pc, #592]	; (8006bdc <mainLoop+0x2c4>)
 800698c:	f002 fab2 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006990:	4603      	mov	r3, r0
 8006992:	2b01      	cmp	r3, #1
 8006994:	d103      	bne.n	800699e <mainLoop+0x86>
			butonKontrol=0;
 8006996:	4b92      	ldr	r3, [pc, #584]	; (8006be0 <mainLoop+0x2c8>)
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e003      	b.n	80069a6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800699e:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <mainLoop+0x2cc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a91      	ldr	r2, [pc, #580]	; (8006be8 <mainLoop+0x2d0>)
 80069a4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80069a6:	4b91      	ldr	r3, [pc, #580]	; (8006bec <mainLoop+0x2d4>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d03a      	beq.n	8006a24 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80069ae:	bf00      	nop
 80069b0:	488f      	ldr	r0, [pc, #572]	; (8006bf0 <mainLoop+0x2d8>)
 80069b2:	f003 f8c8 	bl	8009b46 <HAL_I2C_GetError>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d0f9      	beq.n	80069b0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80069bc:	bf00      	nop
 80069be:	488c      	ldr	r0, [pc, #560]	; (8006bf0 <mainLoop+0x2d8>)
 80069c0:	f003 f8b4 	bl	8009b2c <HAL_I2C_GetState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d1f9      	bne.n	80069be <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80069ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069ce:	9302      	str	r3, [sp, #8]
 80069d0:	236e      	movs	r3, #110	; 0x6e
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	4b87      	ldr	r3, [pc, #540]	; (8006bf4 <mainLoop+0x2dc>)
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	236e      	movs	r3, #110	; 0x6e
 80069da:	2200      	movs	r2, #0
 80069dc:	21a0      	movs	r1, #160	; 0xa0
 80069de:	4884      	ldr	r0, [pc, #528]	; (8006bf0 <mainLoop+0x2d8>)
 80069e0:	f002 fd42 	bl	8009468 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80069e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069e8:	f001 fcb4 	bl	8008354 <HAL_Delay>

		  hafizaYaz=0;
 80069ec:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <mainLoop+0x2d4>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80069f2:	4b81      	ldr	r3, [pc, #516]	; (8006bf8 <mainLoop+0x2e0>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80069fa:	4a80      	ldr	r2, [pc, #512]	; (8006bfc <mainLoop+0x2e4>)
 80069fc:	2101      	movs	r1, #1
 80069fe:	2002      	movs	r0, #2
 8006a00:	f000 ff68 	bl	80078d4 <lcd_print>
 8006a04:	e008      	b.n	8006a18 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a06:	4b7c      	ldr	r3, [pc, #496]	; (8006bf8 <mainLoop+0x2e0>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d104      	bne.n	8006a18 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a0e:	4a7c      	ldr	r2, [pc, #496]	; (8006c00 <mainLoop+0x2e8>)
 8006a10:	2101      	movs	r1, #1
 8006a12:	2002      	movs	r0, #2
 8006a14:	f000 ff5e 	bl	80078d4 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a1c:	f001 fc9a 	bl	8008354 <HAL_Delay>
		  lcd_clear();
 8006a20:	f000 ff84 	bl	800792c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a24:	4b77      	ldr	r3, [pc, #476]	; (8006c04 <mainLoop+0x2ec>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f083 0301 	eor.w	r3, r3, #1
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d06d      	beq.n	8006b0e <mainLoop+0x1f6>
 8006a32:	486f      	ldr	r0, [pc, #444]	; (8006bf0 <mainLoop+0x2d8>)
 8006a34:	f003 f87a 	bl	8009b2c <HAL_I2C_GetState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d167      	bne.n	8006b0e <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006a3e:	4b72      	ldr	r3, [pc, #456]	; (8006c08 <mainLoop+0x2f0>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f083 0301 	eor.w	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d044      	beq.n	8006ad6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006a4c:	4a6f      	ldr	r2, [pc, #444]	; (8006c0c <mainLoop+0x2f4>)
 8006a4e:	2101      	movs	r1, #1
 8006a50:	2001      	movs	r0, #1
 8006a52:	f000 ff3f 	bl	80078d4 <lcd_print>
			  if(dilSecim==0) {
 8006a56:	4b68      	ldr	r3, [pc, #416]	; (8006bf8 <mainLoop+0x2e0>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006a5e:	4a6c      	ldr	r2, [pc, #432]	; (8006c10 <mainLoop+0x2f8>)
 8006a60:	2101      	movs	r1, #1
 8006a62:	2002      	movs	r0, #2
 8006a64:	f000 ff36 	bl	80078d4 <lcd_print>
 8006a68:	e008      	b.n	8006a7c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006a6a:	4b63      	ldr	r3, [pc, #396]	; (8006bf8 <mainLoop+0x2e0>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d104      	bne.n	8006a7c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006a72:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <mainLoop+0x2fc>)
 8006a74:	2101      	movs	r1, #1
 8006a76:	2002      	movs	r0, #2
 8006a78:	f000 ff2c 	bl	80078d4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a80:	f001 fc68 	bl	8008354 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a84:	bf00      	nop
 8006a86:	485a      	ldr	r0, [pc, #360]	; (8006bf0 <mainLoop+0x2d8>)
 8006a88:	f003 f85d 	bl	8009b46 <HAL_I2C_GetError>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d0f9      	beq.n	8006a86 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a92:	e003      	b.n	8006a9c <mainLoop+0x184>
				  HAL_Delay(1000);
 8006a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a98:	f001 fc5c 	bl	8008354 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a9c:	4854      	ldr	r0, [pc, #336]	; (8006bf0 <mainLoop+0x2d8>)
 8006a9e:	f003 f845 	bl	8009b2c <HAL_I2C_GetState>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d1f5      	bne.n	8006a94 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006aa8:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <mainLoop+0x2e0>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006ab0:	4a59      	ldr	r2, [pc, #356]	; (8006c18 <mainLoop+0x300>)
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	2002      	movs	r0, #2
 8006ab6:	f000 ff0d 	bl	80078d4 <lcd_print>
 8006aba:	e008      	b.n	8006ace <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006abc:	4b4e      	ldr	r3, [pc, #312]	; (8006bf8 <mainLoop+0x2e0>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d104      	bne.n	8006ace <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006ac4:	4a55      	ldr	r2, [pc, #340]	; (8006c1c <mainLoop+0x304>)
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	2002      	movs	r0, #2
 8006aca:	f000 ff03 	bl	80078d4 <lcd_print>
			  }

			  ilkOkuma=1;
 8006ace:	4b4e      	ldr	r3, [pc, #312]	; (8006c08 <mainLoop+0x2f0>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e014      	b.n	8006b00 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006ad6:	4b48      	ldr	r3, [pc, #288]	; (8006bf8 <mainLoop+0x2e0>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006ade:	4a50      	ldr	r2, [pc, #320]	; (8006c20 <mainLoop+0x308>)
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	2002      	movs	r0, #2
 8006ae4:	f000 fef6 	bl	80078d4 <lcd_print>
 8006ae8:	e008      	b.n	8006afc <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006aea:	4b43      	ldr	r3, [pc, #268]	; (8006bf8 <mainLoop+0x2e0>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d104      	bne.n	8006afc <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006af2:	4a4c      	ldr	r2, [pc, #304]	; (8006c24 <mainLoop+0x30c>)
 8006af4:	2101      	movs	r1, #1
 8006af6:	2002      	movs	r0, #2
 8006af8:	f000 feec 	bl	80078d4 <lcd_print>
			  }
			  lcd_clear();
 8006afc:	f000 ff16 	bl	800792c <lcd_clear>
		  }

		  lcd_clear();
 8006b00:	f000 ff14 	bl	800792c <lcd_clear>

		  eepromKontrol();
 8006b04:	f7f9 fb96 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <mainLoop+0x2ec>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b0e:	4b46      	ldr	r3, [pc, #280]	; (8006c28 <mainLoop+0x310>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d11c      	bne.n	8006b50 <mainLoop+0x238>
 8006b16:	4b45      	ldr	r3, [pc, #276]	; (8006c2c <mainLoop+0x314>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f083 0301 	eor.w	r3, r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <mainLoop+0x238>
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <mainLoop+0x318>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d111      	bne.n	8006b50 <mainLoop+0x238>
			lcd_clear();
 8006b2c:	f000 fefe 	bl	800792c <lcd_clear>
			HAL_Delay(10);
 8006b30:	200a      	movs	r0, #10
 8006b32:	f001 fc0f 	bl	8008354 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006b36:	4a3f      	ldr	r2, [pc, #252]	; (8006c34 <mainLoop+0x31c>)
 8006b38:	2101      	movs	r1, #1
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f000 feca 	bl	80078d4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006b40:	4a3d      	ldr	r2, [pc, #244]	; (8006c38 <mainLoop+0x320>)
 8006b42:	2101      	movs	r1, #1
 8006b44:	2002      	movs	r0, #2
 8006b46:	f000 fec5 	bl	80078d4 <lcd_print>
			mesajYazildi=1;
 8006b4a:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <mainLoop+0x314>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <mainLoop+0x310>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <mainLoop+0x266>
 8006b58:	2102      	movs	r1, #2
 8006b5a:	481f      	ldr	r0, [pc, #124]	; (8006bd8 <mainLoop+0x2c0>)
 8006b5c:	f002 f9ca 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10b      	bne.n	8006b7e <mainLoop+0x266>
 8006b66:	2104      	movs	r1, #4
 8006b68:	481b      	ldr	r0, [pc, #108]	; (8006bd8 <mainLoop+0x2c0>)
 8006b6a:	f002 f9c3 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d104      	bne.n	8006b7e <mainLoop+0x266>
			menuGiris=1;
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <mainLoop+0x310>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b7a:	f000 fed7 	bl	800792c <lcd_clear>
		}

		if(menuGiris==1) {
 8006b7e:	4b2a      	ldr	r3, [pc, #168]	; (8006c28 <mainLoop+0x310>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <mainLoop+0x272>
			menu();
 8006b86:	f7fa fb89 	bl	800129c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b8e:	4813      	ldr	r0, [pc, #76]	; (8006bdc <mainLoop+0x2c4>)
 8006b90:	f002 f9df 	bl	8008f52 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b98:	4828      	ldr	r0, [pc, #160]	; (8006c3c <mainLoop+0x324>)
 8006b9a:	f002 f9ab 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <mainLoop+0x2a2>
 8006ba4:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <mainLoop+0x328>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <mainLoop+0x2a2>
			stopVar=1;
 8006bb2:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <mainLoop+0x32c>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e002      	b.n	8006bc0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <mainLoop+0x32c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006bc0:	f7fd ffe8 	bl	8004b94 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006bc4:	f7fe f81a 	bl	8004bfc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006bc8:	f7fe f85e 	bl	8004c88 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006bcc:	f7fe f8ae 	bl	8004d2c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006bd0:	f7ff fc08 	bl	80063e4 <checkDemoModCalisma>
		checkLCDBacklight();
 8006bd4:	e6a3      	b.n	800691e <mainLoop+0x6>
 8006bd6:	bf00      	nop
 8006bd8:	40010800 	.word	0x40010800
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	2000022f 	.word	0x2000022f
 8006be4:	200001dc 	.word	0x200001dc
 8006be8:	200001f8 	.word	0x200001f8
 8006bec:	2000022c 	.word	0x2000022c
 8006bf0:	20000290 	.word	0x20000290
 8006bf4:	2000012c 	.word	0x2000012c
 8006bf8:	20000221 	.word	0x20000221
 8006bfc:	0800d794 	.word	0x0800d794
 8006c00:	0800d7a8 	.word	0x0800d7a8
 8006c04:	2000022d 	.word	0x2000022d
 8006c08:	2000022e 	.word	0x2000022e
 8006c0c:	0800d7bc 	.word	0x0800d7bc
 8006c10:	0800d7d0 	.word	0x0800d7d0
 8006c14:	0800d7e4 	.word	0x0800d7e4
 8006c18:	0800d7f8 	.word	0x0800d7f8
 8006c1c:	0800d80c 	.word	0x0800d80c
 8006c20:	0800d820 	.word	0x0800d820
 8006c24:	0800d834 	.word	0x0800d834
 8006c28:	2000021d 	.word	0x2000021d
 8006c2c:	20000234 	.word	0x20000234
 8006c30:	2000021e 	.word	0x2000021e
 8006c34:	0800d848 	.word	0x0800d848
 8006c38:	0800d85c 	.word	0x0800d85c
 8006c3c:	40010c00 	.word	0x40010c00
 8006c40:	20000255 	.word	0x20000255
 8006c44:	20000252 	.word	0x20000252

08006c48 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af04      	add	r7, sp, #16
	bool validInput = false;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

	int loc = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]
	int writeLoc = 1;
 8006c56:	2301      	movs	r3, #1
 8006c58:	607b      	str	r3, [r7, #4]

	memset(machineID, 0, sizeof(machineID));
 8006c5a:	220c      	movs	r2, #12
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	482e      	ldr	r0, [pc, #184]	; (8006d18 <takeMachineID+0xd0>)
 8006c60:	f005 facf 	bl	800c202 <memset>

	while(!validInput) {
 8006c64:	e03c      	b.n	8006ce0 <takeMachineID+0x98>
		lcd_clear();
 8006c66:	f000 fe61 	bl	800792c <lcd_clear>

		saveCharacter(&loc, &writeLoc, machineID, idStartPos, 'M');
 8006c6a:	4b2c      	ldr	r3, [pc, #176]	; (8006d1c <takeMachineID+0xd4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1d39      	adds	r1, r7, #4
 8006c70:	f107 0008 	add.w	r0, r7, #8
 8006c74:	224d      	movs	r2, #77	; 0x4d
 8006c76:	9200      	str	r2, [sp, #0]
 8006c78:	4a27      	ldr	r2, [pc, #156]	; (8006d18 <takeMachineID+0xd0>)
 8006c7a:	f000 faf7 	bl	800726c <saveCharacter>

		if (strlen(machineID) == 12) {
 8006c7e:	4826      	ldr	r0, [pc, #152]	; (8006d18 <takeMachineID+0xd0>)
 8006c80:	f7f9 fad0 	bl	8000224 <strlen>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b0c      	cmp	r3, #12
 8006c88:	d102      	bne.n	8006c90 <takeMachineID+0x48>
		    validInput = true; // Doğru uzunlukta veri girildi
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
 8006c8e:	e027      	b.n	8006ce0 <takeMachineID+0x98>
		} else {
		    lcd_clear();
 8006c90:	f000 fe4c 	bl	800792c <lcd_clear>
		    if(dilSecim == 0) {
 8006c94:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <takeMachineID+0xd8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <takeMachineID+0x6a>
		    	lcd_print(1, 1, " ID 12 KARAKTER ");
 8006c9c:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <takeMachineID+0xdc>)
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	f000 fe17 	bl	80078d4 <lcd_print>
		    	lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006ca6:	4a20      	ldr	r2, [pc, #128]	; (8006d28 <takeMachineID+0xe0>)
 8006ca8:	2101      	movs	r1, #1
 8006caa:	2002      	movs	r0, #2
 8006cac:	f000 fe12 	bl	80078d4 <lcd_print>
 8006cb0:	e009      	b.n	8006cc6 <takeMachineID+0x7e>
		    } else {
		    	lcd_print(1, 1, "MACHINE ID MUST");
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <takeMachineID+0xe4>)
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	f000 fe0c 	bl	80078d4 <lcd_print>
		    	lcd_print(2, 1, "BE 12 CHARACTERS");
 8006cbc:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <takeMachineID+0xe8>)
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	2002      	movs	r0, #2
 8006cc2:	f000 fe07 	bl	80078d4 <lcd_print>
		    }
		    HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006cc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006cca:	f001 fb43 	bl	8008354 <HAL_Delay>
		    loc = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
		    writeLoc = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
		    memset(machineID, 0, sizeof(machineID));
 8006cd6:	220c      	movs	r2, #12
 8006cd8:	2100      	movs	r1, #0
 8006cda:	480f      	ldr	r0, [pc, #60]	; (8006d18 <takeMachineID+0xd0>)
 8006cdc:	f005 fa91 	bl	800c202 <memset>
	while(!validInput) {
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1bc      	bne.n	8006c66 <takeMachineID+0x1e>
		}
	}

	//EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006cec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cf0:	9302      	str	r3, [sp, #8]
 8006cf2:	236e      	movs	r3, #110	; 0x6e
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <takeMachineID+0xec>)
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	236e      	movs	r3, #110	; 0x6e
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	21a0      	movs	r1, #160	; 0xa0
 8006d00:	480d      	ldr	r0, [pc, #52]	; (8006d38 <takeMachineID+0xf0>)
 8006d02:	f002 fbb1 	bl	8009468 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006d06:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d0a:	f001 fb23 	bl	8008354 <HAL_Delay>
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	200001a4 	.word	0x200001a4
 8006d1c:	20000004 	.word	0x20000004
 8006d20:	20000221 	.word	0x20000221
 8006d24:	0800d870 	.word	0x0800d870
 8006d28:	0800d884 	.word	0x0800d884
 8006d2c:	0800d898 	.word	0x0800d898
 8006d30:	0800d8a8 	.word	0x0800d8a8
 8006d34:	2000012c 	.word	0x2000012c
 8006d38:	20000290 	.word	0x20000290

08006d3c <takeWifiSSID>:

void takeWifiSSID() {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af04      	add	r7, sp, #16
    bool validInput = false;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]

    int loc = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
    int writeLoc = 1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	607b      	str	r3, [r7, #4]

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006d4e:	2214      	movs	r2, #20
 8006d50:	2100      	movs	r1, #0
 8006d52:	482e      	ldr	r0, [pc, #184]	; (8006e0c <takeWifiSSID+0xd0>)
 8006d54:	f005 fa55 	bl	800c202 <memset>

    while(!validInput) {
 8006d58:	e03c      	b.n	8006dd4 <takeWifiSSID+0x98>
        lcd_clear();
 8006d5a:	f000 fde7 	bl	800792c <lcd_clear>

        saveCharacter(&loc, &writeLoc, wifiSSID, ssidStartPos, 'S');
 8006d5e:	4b2c      	ldr	r3, [pc, #176]	; (8006e10 <takeWifiSSID+0xd4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	1d39      	adds	r1, r7, #4
 8006d64:	f107 0008 	add.w	r0, r7, #8
 8006d68:	2253      	movs	r2, #83	; 0x53
 8006d6a:	9200      	str	r2, [sp, #0]
 8006d6c:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <takeWifiSSID+0xd0>)
 8006d6e:	f000 fa7d 	bl	800726c <saveCharacter>

        if (strlen(wifiSSID) <= 20) {
 8006d72:	4826      	ldr	r0, [pc, #152]	; (8006e0c <takeWifiSSID+0xd0>)
 8006d74:	f7f9 fa56 	bl	8000224 <strlen>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b14      	cmp	r3, #20
 8006d7c:	d802      	bhi.n	8006d84 <takeWifiSSID+0x48>
            validInput = true; // Uygun uzunlukta veri girildi
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
 8006d82:	e027      	b.n	8006dd4 <takeWifiSSID+0x98>
        } else {
            lcd_clear();
 8006d84:	f000 fdd2 	bl	800792c <lcd_clear>
            if(dilSecim == 0) {
 8006d88:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <takeWifiSSID+0xd8>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <takeWifiSSID+0x6a>
            	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006d90:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <takeWifiSSID+0xdc>)
 8006d92:	2101      	movs	r1, #1
 8006d94:	2001      	movs	r0, #1
 8006d96:	f000 fd9d 	bl	80078d4 <lcd_print>
            	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006d9a:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <takeWifiSSID+0xe0>)
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f000 fd98 	bl	80078d4 <lcd_print>
 8006da4:	e009      	b.n	8006dba <takeWifiSSID+0x7e>
            } else {
            	lcd_print(1, 1, "SSID CANT EXCEED");
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <takeWifiSSID+0xe4>)
 8006da8:	2101      	movs	r1, #1
 8006daa:	2001      	movs	r0, #1
 8006dac:	f000 fd92 	bl	80078d4 <lcd_print>
            	lcd_print(2, 1, " 20 CHARACTERS ");
 8006db0:	4a1c      	ldr	r2, [pc, #112]	; (8006e24 <takeWifiSSID+0xe8>)
 8006db2:	2101      	movs	r1, #1
 8006db4:	2002      	movs	r0, #2
 8006db6:	f000 fd8d 	bl	80078d4 <lcd_print>
            }
            HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006dba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006dbe:	f001 fac9 	bl	8008354 <HAL_Delay>
            // Uzunluğu sıfırla ve yeniden dene
            loc = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
            writeLoc = 1;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	607b      	str	r3, [r7, #4]
            memset(wifiSSID, 0, sizeof(wifiSSID));
 8006dca:	2214      	movs	r2, #20
 8006dcc:	2100      	movs	r1, #0
 8006dce:	480f      	ldr	r0, [pc, #60]	; (8006e0c <takeWifiSSID+0xd0>)
 8006dd0:	f005 fa17 	bl	800c202 <memset>
    while(!validInput) {
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	f083 0301 	eor.w	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1bc      	bne.n	8006d5a <takeWifiSSID+0x1e>
        }
    }

    // EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006de0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006de4:	9302      	str	r3, [sp, #8]
 8006de6:	236e      	movs	r3, #110	; 0x6e
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <takeWifiSSID+0xec>)
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	236e      	movs	r3, #110	; 0x6e
 8006df0:	2200      	movs	r2, #0
 8006df2:	21a0      	movs	r1, #160	; 0xa0
 8006df4:	480d      	ldr	r0, [pc, #52]	; (8006e2c <takeWifiSSID+0xf0>)
 8006df6:	f002 fb37 	bl	8009468 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006dfa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006dfe:	f001 faa9 	bl	8008354 <HAL_Delay>
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200001b0 	.word	0x200001b0
 8006e10:	20000008 	.word	0x20000008
 8006e14:	20000221 	.word	0x20000221
 8006e18:	0800d8bc 	.word	0x0800d8bc
 8006e1c:	0800d8d0 	.word	0x0800d8d0
 8006e20:	0800d8e4 	.word	0x0800d8e4
 8006e24:	0800d8f8 	.word	0x0800d8f8
 8006e28:	2000012c 	.word	0x2000012c
 8006e2c:	20000290 	.word	0x20000290

08006e30 <takeWifiPass>:

void takeWifiPass() {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af04      	add	r7, sp, #16
    bool validInput = false;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

    int loc = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
    int writeLoc = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	607b      	str	r3, [r7, #4]

    memset(wifiPass, 0, sizeof(wifiPass));
 8006e42:	2214      	movs	r2, #20
 8006e44:	2100      	movs	r1, #0
 8006e46:	482e      	ldr	r0, [pc, #184]	; (8006f00 <takeWifiPass+0xd0>)
 8006e48:	f005 f9db 	bl	800c202 <memset>

    while(!validInput) {
 8006e4c:	e03c      	b.n	8006ec8 <takeWifiPass+0x98>
        lcd_clear();
 8006e4e:	f000 fd6d 	bl	800792c <lcd_clear>

        saveCharacter(&loc, &writeLoc, wifiPass, passStartPos, 'S');
 8006e52:	4b2c      	ldr	r3, [pc, #176]	; (8006f04 <takeWifiPass+0xd4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	1d39      	adds	r1, r7, #4
 8006e58:	f107 0008 	add.w	r0, r7, #8
 8006e5c:	2253      	movs	r2, #83	; 0x53
 8006e5e:	9200      	str	r2, [sp, #0]
 8006e60:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <takeWifiPass+0xd0>)
 8006e62:	f000 fa03 	bl	800726c <saveCharacter>

        if (strlen(wifiPass) <= 20) {
 8006e66:	4826      	ldr	r0, [pc, #152]	; (8006f00 <takeWifiPass+0xd0>)
 8006e68:	f7f9 f9dc 	bl	8000224 <strlen>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b14      	cmp	r3, #20
 8006e70:	d802      	bhi.n	8006e78 <takeWifiPass+0x48>
            validInput = true; // Uygun uzunlukta veri girildi
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
 8006e76:	e027      	b.n	8006ec8 <takeWifiPass+0x98>
        } else {
            lcd_clear();
 8006e78:	f000 fd58 	bl	800792c <lcd_clear>
            if(dilSecim == 0) {
 8006e7c:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <takeWifiPass+0xd8>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <takeWifiPass+0x6a>
            	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006e84:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <takeWifiPass+0xdc>)
 8006e86:	2101      	movs	r1, #1
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f000 fd23 	bl	80078d4 <lcd_print>
            	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <takeWifiPass+0xe0>)
 8006e90:	2101      	movs	r1, #1
 8006e92:	2002      	movs	r0, #2
 8006e94:	f000 fd1e 	bl	80078d4 <lcd_print>
 8006e98:	e009      	b.n	8006eae <takeWifiPass+0x7e>
            } else {
            	lcd_print(1, 1, "PASS CANT EXCEED");
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <takeWifiPass+0xe4>)
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f000 fd18 	bl	80078d4 <lcd_print>
            	lcd_print(2, 1, " 20 CHARACTERS ");
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <takeWifiPass+0xe8>)
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	2002      	movs	r0, #2
 8006eaa:	f000 fd13 	bl	80078d4 <lcd_print>
            }
            HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006eae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006eb2:	f001 fa4f 	bl	8008354 <HAL_Delay>
            // Uzunluğu sıfırla ve yeniden dene
            loc = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
            writeLoc = 1;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	607b      	str	r3, [r7, #4]
            memset(wifiPass, 0, sizeof(wifiPass));
 8006ebe:	2214      	movs	r2, #20
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	480f      	ldr	r0, [pc, #60]	; (8006f00 <takeWifiPass+0xd0>)
 8006ec4:	f005 f99d 	bl	800c202 <memset>
    while(!validInput) {
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	f083 0301 	eor.w	r3, r3, #1
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1bc      	bne.n	8006e4e <takeWifiPass+0x1e>
        }
    }

    // EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ed4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	236e      	movs	r3, #110	; 0x6e
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <takeWifiPass+0xec>)
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	236e      	movs	r3, #110	; 0x6e
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	21a0      	movs	r1, #160	; 0xa0
 8006ee8:	480d      	ldr	r0, [pc, #52]	; (8006f20 <takeWifiPass+0xf0>)
 8006eea:	f002 fabd 	bl	8009468 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006eee:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006ef2:	f001 fa2f 	bl	8008354 <HAL_Delay>
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	200001c4 	.word	0x200001c4
 8006f04:	2000000c 	.word	0x2000000c
 8006f08:	20000221 	.word	0x20000221
 8006f0c:	0800d8bc 	.word	0x0800d8bc
 8006f10:	0800d908 	.word	0x0800d908
 8006f14:	0800d91c 	.word	0x0800d91c
 8006f18:	0800d8f8 	.word	0x0800d8f8
 8006f1c:	2000012c 	.word	0x2000012c
 8006f20:	20000290 	.word	0x20000290

08006f24 <mergeData>:

char* mergeData() {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b09c      	sub	sp, #112	; 0x70
 8006f28:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f32:	2228      	movs	r2, #40	; 0x28
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f005 f963 	bl	800c202 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8006f3c:	4b67      	ldr	r3, [pc, #412]	; (80070dc <mergeData+0x1b8>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	713b      	strb	r3, [r7, #4]
 8006f42:	4b67      	ldr	r3, [pc, #412]	; (80070e0 <mergeData+0x1bc>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	717b      	strb	r3, [r7, #5]
 8006f48:	4b66      	ldr	r3, [pc, #408]	; (80070e4 <mergeData+0x1c0>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	71bb      	strb	r3, [r7, #6]
 8006f4e:	4b66      	ldr	r3, [pc, #408]	; (80070e8 <mergeData+0x1c4>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
 8006f54:	4b65      	ldr	r3, [pc, #404]	; (80070ec <mergeData+0x1c8>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	723b      	strb	r3, [r7, #8]
 8006f5a:	4b65      	ldr	r3, [pc, #404]	; (80070f0 <mergeData+0x1cc>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	727b      	strb	r3, [r7, #9]
 8006f60:	4b64      	ldr	r3, [pc, #400]	; (80070f4 <mergeData+0x1d0>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	72bb      	strb	r3, [r7, #10]
 8006f66:	4b64      	ldr	r3, [pc, #400]	; (80070f8 <mergeData+0x1d4>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	72fb      	strb	r3, [r7, #11]
 8006f6c:	4b63      	ldr	r3, [pc, #396]	; (80070fc <mergeData+0x1d8>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	733b      	strb	r3, [r7, #12]
 8006f72:	4b63      	ldr	r3, [pc, #396]	; (8007100 <mergeData+0x1dc>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	737b      	strb	r3, [r7, #13]
 8006f78:	4b62      	ldr	r3, [pc, #392]	; (8007104 <mergeData+0x1e0>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	73bb      	strb	r3, [r7, #14]
 8006f7e:	4b62      	ldr	r3, [pc, #392]	; (8007108 <mergeData+0x1e4>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	73fb      	strb	r3, [r7, #15]
 8006f84:	4b61      	ldr	r3, [pc, #388]	; (800710c <mergeData+0x1e8>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	743b      	strb	r3, [r7, #16]
 8006f8a:	4b61      	ldr	r3, [pc, #388]	; (8007110 <mergeData+0x1ec>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	747b      	strb	r3, [r7, #17]
 8006f90:	4b60      	ldr	r3, [pc, #384]	; (8007114 <mergeData+0x1f0>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	74bb      	strb	r3, [r7, #18]
 8006f96:	4b60      	ldr	r3, [pc, #384]	; (8007118 <mergeData+0x1f4>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	74fb      	strb	r3, [r7, #19]
 8006f9c:	4b5f      	ldr	r3, [pc, #380]	; (800711c <mergeData+0x1f8>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	753b      	strb	r3, [r7, #20]
 8006fa2:	4b5f      	ldr	r3, [pc, #380]	; (8007120 <mergeData+0x1fc>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	757b      	strb	r3, [r7, #21]
 8006fa8:	4b5e      	ldr	r3, [pc, #376]	; (8007124 <mergeData+0x200>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	75bb      	strb	r3, [r7, #22]
 8006fae:	4b5e      	ldr	r3, [pc, #376]	; (8007128 <mergeData+0x204>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	75fb      	strb	r3, [r7, #23]
 8006fb4:	4b5d      	ldr	r3, [pc, #372]	; (800712c <mergeData+0x208>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	763b      	strb	r3, [r7, #24]
 8006fba:	4b5d      	ldr	r3, [pc, #372]	; (8007130 <mergeData+0x20c>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	767b      	strb	r3, [r7, #25]
 8006fc0:	4b5c      	ldr	r3, [pc, #368]	; (8007134 <mergeData+0x210>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	76bb      	strb	r3, [r7, #26]
 8006fc6:	4b5c      	ldr	r3, [pc, #368]	; (8007138 <mergeData+0x214>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	76fb      	strb	r3, [r7, #27]
 8006fcc:	4b5b      	ldr	r3, [pc, #364]	; (800713c <mergeData+0x218>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	773b      	strb	r3, [r7, #28]
 8006fd2:	4b5b      	ldr	r3, [pc, #364]	; (8007140 <mergeData+0x21c>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	777b      	strb	r3, [r7, #29]
 8006fd8:	4b5a      	ldr	r3, [pc, #360]	; (8007144 <mergeData+0x220>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	77bb      	strb	r3, [r7, #30]
 8006fde:	4b5a      	ldr	r3, [pc, #360]	; (8007148 <mergeData+0x224>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	4b59      	ldr	r3, [pc, #356]	; (800714c <mergeData+0x228>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	f887 3020 	strb.w	r3, [r7, #32]
 8006fec:	4b58      	ldr	r3, [pc, #352]	; (8007150 <mergeData+0x22c>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8006ff4:	4b57      	ldr	r3, [pc, #348]	; (8007154 <mergeData+0x230>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ffc:	4b56      	ldr	r3, [pc, #344]	; (8007158 <mergeData+0x234>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007004:	4b55      	ldr	r3, [pc, #340]	; (800715c <mergeData+0x238>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800700c:	4b54      	ldr	r3, [pc, #336]	; (8007160 <mergeData+0x23c>)
 800700e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007012:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007016:	4b52      	ldr	r3, [pc, #328]	; (8007160 <mergeData+0x23c>)
 8007018:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800701c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007020:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <mergeData+0x23c>)
 8007022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800702a:	4b4d      	ldr	r3, [pc, #308]	; (8007160 <mergeData+0x23c>)
 800702c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007030:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007034:	4b4a      	ldr	r3, [pc, #296]	; (8007160 <mergeData+0x23c>)
 8007036:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800703a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800703e:	4b48      	ldr	r3, [pc, #288]	; (8007160 <mergeData+0x23c>)
 8007040:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007048:	4b45      	ldr	r3, [pc, #276]	; (8007160 <mergeData+0x23c>)
 800704a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007052:	4b43      	ldr	r3, [pc, #268]	; (8007160 <mergeData+0x23c>)
 8007054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007058:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800705c:	4b40      	ldr	r3, [pc, #256]	; (8007160 <mergeData+0x23c>)
 800705e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007062:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007066:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <mergeData+0x23c>)
 8007068:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800706c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007070:	2306      	movs	r3, #6
 8007072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007076:	2300      	movs	r3, #0
 8007078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800707a:	e015      	b.n	80070a8 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800707c:	1d3a      	adds	r2, r7, #4
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	4413      	add	r3, r2
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800708a:	4936      	ldr	r1, [pc, #216]	; (8007164 <mergeData+0x240>)
 800708c:	4618      	mov	r0, r3
 800708e:	f005 f847 	bl	800c120 <siprintf>
	    strcat(combinedString, temp);
 8007092:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f005 f8a1 	bl	800c1e4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80070a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a4:	3301      	adds	r3, #1
 80070a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	2b2b      	cmp	r3, #43	; 0x2b
 80070ac:	d9e6      	bls.n	800707c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80070ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 f8b6 	bl	8000224 <strlen>
 80070b8:	4603      	mov	r3, r0
 80070ba:	3301      	adds	r3, #1
 80070bc:	4618      	mov	r0, r3
 80070be:	f004 ff47 	bl	800bf50 <malloc>
 80070c2:	4603      	mov	r3, r0
 80070c4:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80070c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070ca:	4619      	mov	r1, r3
 80070cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80070ce:	f005 f8dd 	bl	800c28c <strcpy>
	return result;
 80070d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3770      	adds	r7, #112	; 0x70
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	2000020f 	.word	0x2000020f
 80070e0:	20000201 	.word	0x20000201
 80070e4:	20000204 	.word	0x20000204
 80070e8:	20000205 	.word	0x20000205
 80070ec:	20000206 	.word	0x20000206
 80070f0:	2000020d 	.word	0x2000020d
 80070f4:	20000207 	.word	0x20000207
 80070f8:	20000208 	.word	0x20000208
 80070fc:	2000020c 	.word	0x2000020c
 8007100:	20000209 	.word	0x20000209
 8007104:	20000219 	.word	0x20000219
 8007108:	2000020a 	.word	0x2000020a
 800710c:	2000021a 	.word	0x2000021a
 8007110:	2000020b 	.word	0x2000020b
 8007114:	2000021b 	.word	0x2000021b
 8007118:	2000020e 	.word	0x2000020e
 800711c:	20000210 	.word	0x20000210
 8007120:	20000211 	.word	0x20000211
 8007124:	20000212 	.word	0x20000212
 8007128:	20000213 	.word	0x20000213
 800712c:	20000214 	.word	0x20000214
 8007130:	20000215 	.word	0x20000215
 8007134:	20000216 	.word	0x20000216
 8007138:	20000217 	.word	0x20000217
 800713c:	20000218 	.word	0x20000218
 8007140:	2000021c 	.word	0x2000021c
 8007144:	2000021e 	.word	0x2000021e
 8007148:	200001fd 	.word	0x200001fd
 800714c:	200001fe 	.word	0x200001fe
 8007150:	20000000 	.word	0x20000000
 8007154:	20000001 	.word	0x20000001
 8007158:	200001ff 	.word	0x200001ff
 800715c:	20000221 	.word	0x20000221
 8007160:	2000012c 	.word	0x2000012c
 8007164:	0800d930 	.word	0x0800d930

08007168 <convertAndSendData>:

void convertAndSendData() {
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800716e:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <convertAndSendData+0x70>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <convertAndSendData+0x74>)
 8007178:	2101      	movs	r1, #1
 800717a:	2001      	movs	r0, #1
 800717c:	f000 fbaa 	bl	80078d4 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007180:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <convertAndSendData+0x78>)
 8007182:	2101      	movs	r1, #1
 8007184:	2002      	movs	r0, #2
 8007186:	f000 fba5 	bl	80078d4 <lcd_print>
 800718a:	e009      	b.n	80071a0 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800718c:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <convertAndSendData+0x7c>)
 800718e:	2101      	movs	r1, #1
 8007190:	2001      	movs	r0, #1
 8007192:	f000 fb9f 	bl	80078d4 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <convertAndSendData+0x80>)
 8007198:	2101      	movs	r1, #1
 800719a:	2002      	movs	r0, #2
 800719c:	f000 fb9a 	bl	80078d4 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80071a0:	2300      	movs	r3, #0
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	e00a      	b.n	80071bc <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80071a6:	f7ff febd 	bl	8006f24 <mergeData>
 80071aa:	4603      	mov	r3, r0
 80071ac:	461a      	mov	r2, r3
 80071ae:	490f      	ldr	r1, [pc, #60]	; (80071ec <convertAndSendData+0x84>)
 80071b0:	480f      	ldr	r0, [pc, #60]	; (80071f0 <convertAndSendData+0x88>)
 80071b2:	f7f9 fb9b 	bl	80008ec <sendMachineData>
	for(int i=0; i<2; i++) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3301      	adds	r3, #1
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	ddf1      	ble.n	80071a6 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80071c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071c6:	f001 f8c5 	bl	8008354 <HAL_Delay>
	lcd_clear();
 80071ca:	f000 fbaf 	bl	800792c <lcd_clear>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000221 	.word	0x20000221
 80071dc:	0800d934 	.word	0x0800d934
 80071e0:	0800d948 	.word	0x0800d948
 80071e4:	0800d95c 	.word	0x0800d95c
 80071e8:	0800d970 	.word	0x0800d970
 80071ec:	200001a4 	.word	0x200001a4
 80071f0:	2000032c 	.word	0x2000032c

080071f4 <iotSetup>:

void iotSetup() {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80071f8:	4b17      	ldr	r3, [pc, #92]	; (8007258 <iotSetup+0x64>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01d      	beq.n	800723c <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 8007200:	4b16      	ldr	r3, [pc, #88]	; (800725c <iotSetup+0x68>)
 8007202:	7adb      	ldrb	r3, [r3, #11]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <iotSetup+0x18>
			takeMachineID();
 8007208:	f7ff fd1e 	bl	8006c48 <takeMachineID>
		}
		HAL_Delay(500);
 800720c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007210:	f001 f8a0 	bl	8008354 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007214:	4b12      	ldr	r3, [pc, #72]	; (8007260 <iotSetup+0x6c>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <iotSetup+0x2c>
			takeWifiSSID();
 800721c:	f7ff fd8e 	bl	8006d3c <takeWifiSSID>
		}
		HAL_Delay(500);
 8007220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007224:	f001 f896 	bl	8008354 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 8007228:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <iotSetup+0x70>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <iotSetup+0x40>
			takeWifiPass();
 8007230:	f7ff fdfe 	bl	8006e30 <takeWifiPass>
		}
		HAL_Delay(500);
 8007234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007238:	f001 f88c 	bl	8008354 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 800723c:	4a09      	ldr	r2, [pc, #36]	; (8007264 <iotSetup+0x70>)
 800723e:	4908      	ldr	r1, [pc, #32]	; (8007260 <iotSetup+0x6c>)
 8007240:	4809      	ldr	r0, [pc, #36]	; (8007268 <iotSetup+0x74>)
 8007242:	f7f9 fb15 	bl	8000870 <ESP8266_Init>
	HAL_Delay(500);
 8007246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800724a:	f001 f883 	bl	8008354 <HAL_Delay>
	convertAndSendData();
 800724e:	f7ff ff8b 	bl	8007168 <convertAndSendData>
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	2000021f 	.word	0x2000021f
 800725c:	200001a4 	.word	0x200001a4
 8007260:	200001b0 	.word	0x200001b0
 8007264:	200001c4 	.word	0x200001c4
 8007268:	2000032c 	.word	0x2000032c

0800726c <saveCharacter>:

void saveCharacter(int *loc, int *writeLoc, char *data, int startPos, char type) {
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
    int characterPos = 0; // Kullanıcının LCD üzerinde seçtiği karakterin pozisyonu
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
    char selectedChar;

    int charactersArrayLength = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]
    int page = 1; // SSID ve password için sayfa kontrolü
 8007282:	2301      	movs	r3, #1
 8007284:	613b      	str	r3, [r7, #16]

    lcd_clear();
 8007286:	f000 fb51 	bl	800792c <lcd_clear>
    if (type == 'M') {
 800728a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800728e:	2b4d      	cmp	r3, #77	; 0x4d
 8007290:	d109      	bne.n	80072a6 <saveCharacter+0x3a>
    	charactersArrayLength = strlen(idCharactersArray);
 8007292:	488d      	ldr	r0, [pc, #564]	; (80074c8 <saveCharacter+0x25c>)
 8007294:	f7f8 ffc6 	bl	8000224 <strlen>
 8007298:	4603      	mov	r3, r0
 800729a:	617b      	str	r3, [r7, #20]

    	printTemplate(1, 0);
 800729c:	2100      	movs	r1, #0
 800729e:	2001      	movs	r0, #1
 80072a0:	f7f9 fd96 	bl	8000dd0 <printTemplate>
 80072a4:	e00f      	b.n	80072c6 <saveCharacter+0x5a>
    } else {
    	charactersArrayLength = strlen(charactersArray);
 80072a6:	4889      	ldr	r0, [pc, #548]	; (80074cc <saveCharacter+0x260>)
 80072a8:	f7f8 ffbc 	bl	8000224 <strlen>
 80072ac:	4603      	mov	r3, r0
 80072ae:	617b      	str	r3, [r7, #20]

    	printTemplate(type == 'S' ? 2 : 3, page);
 80072b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072b4:	2b53      	cmp	r3, #83	; 0x53
 80072b6:	d101      	bne.n	80072bc <saveCharacter+0x50>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e000      	b.n	80072be <saveCharacter+0x52>
 80072bc:	2303      	movs	r3, #3
 80072be:	6939      	ldr	r1, [r7, #16]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7f9 fd85 	bl	8000dd0 <printTemplate>
    }

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80072c6:	2108      	movs	r1, #8
 80072c8:	4881      	ldr	r0, [pc, #516]	; (80074d0 <saveCharacter+0x264>)
 80072ca:	f001 fe13 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	f000 815b 	beq.w	800758c <saveCharacter+0x320>
            // Kaydetme işlemini bitir
            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072d6:	2101      	movs	r1, #1
 80072d8:	487d      	ldr	r0, [pc, #500]	; (80074d0 <saveCharacter+0x264>)
 80072da:	f001 fe0b 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d167      	bne.n	80073b4 <saveCharacter+0x148>
            characterPos = (characterPos + 1) % charactersArrayLength;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	fb01 f202 	mul.w	r2, r1, r2
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	61fb      	str	r3, [r7, #28]

            if (type == 'M') {
 80072f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072fc:	2b4d      	cmp	r3, #77	; 0x4d
 80072fe:	d115      	bne.n	800732c <saveCharacter+0xc0>
            	// Machine ID için özel cursor hareketi
            	if (*writeLoc == 7) *writeLoc = 10; // 7'den 10'a atla
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b07      	cmp	r3, #7
 8007306:	d103      	bne.n	8007310 <saveCharacter+0xa4>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	220a      	movs	r2, #10
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e02d      	b.n	800736c <saveCharacter+0x100>
            	else if (*writeLoc == 14) *writeLoc = 3; // 14'ten 3'e dön
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b0e      	cmp	r3, #14
 8007316:	d103      	bne.n	8007320 <saveCharacter+0xb4>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2203      	movs	r2, #3
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e025      	b.n	800736c <saveCharacter+0x100>
            	else (*writeLoc)++;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e01f      	b.n	800736c <saveCharacter+0x100>
            } else {
            	// SSID ve Password için sayfa kontrolü
            	if (*writeLoc >= 16) {
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b0f      	cmp	r3, #15
 8007332:	dd10      	ble.n	8007356 <saveCharacter+0xea>
            	    *writeLoc = 0; // İmleci sıfırla
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
            	    page++; // Sonraki sayfaya geç
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3301      	adds	r3, #1
 800733e:	613b      	str	r3, [r7, #16]
            	    printTemplate(type == 'S' ? 2 : 3, page);
 8007340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007344:	2b53      	cmp	r3, #83	; 0x53
 8007346:	d101      	bne.n	800734c <saveCharacter+0xe0>
 8007348:	2302      	movs	r3, #2
 800734a:	e000      	b.n	800734e <saveCharacter+0xe2>
 800734c:	2303      	movs	r3, #3
 800734e:	6939      	ldr	r1, [r7, #16]
 8007350:	4618      	mov	r0, r3
 8007352:	f7f9 fd3d 	bl	8000dd0 <printTemplate>
            	}
            	*writeLoc %= 16;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	425a      	negs	r2, r3
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	f002 020f 	and.w	r2, r2, #15
 8007364:	bf58      	it	pl
 8007366:	4253      	negpl	r3, r2
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	6013      	str	r3, [r2, #0]
            }
            lcd_gotoxy(2, *writeLoc % 16);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	425a      	negs	r2, r3
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	f002 020f 	and.w	r2, r2, #15
 800737a:	bf58      	it	pl
 800737c:	4253      	negpl	r3, r2
 800737e:	b2db      	uxtb	r3, r3
 8007380:	4619      	mov	r1, r3
 8007382:	2002      	movs	r0, #2
 8007384:	f000 fa87 	bl	8007896 <lcd_gotoxy>
            if(type == 'M') {
 8007388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800738c:	2b4d      	cmp	r3, #77	; 0x4d
 800738e:	d107      	bne.n	80073a0 <saveCharacter+0x134>
            	lcd_send_char(idCharactersArray[characterPos]);
 8007390:	4a4d      	ldr	r2, [pc, #308]	; (80074c8 <saveCharacter+0x25c>)
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f9f9 	bl	8007790 <lcd_send_char>
 800739e:	e006      	b.n	80073ae <saveCharacter+0x142>
            } else {
            	lcd_send_char(charactersArray[characterPos]);
 80073a0:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <saveCharacter+0x260>)
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f9f1 	bl	8007790 <lcd_send_char>
            }
            HAL_Delay(200); // Debouncing için gecikme
 80073ae:	20c8      	movs	r0, #200	; 0xc8
 80073b0:	f000 ffd0 	bl	8008354 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80073b4:	2108      	movs	r1, #8
 80073b6:	4847      	ldr	r0, [pc, #284]	; (80074d4 <saveCharacter+0x268>)
 80073b8:	f001 fd9c 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d170      	bne.n	80074a4 <saveCharacter+0x238>
            characterPos = (characterPos - 1 + charactersArrayLength) % charactersArrayLength;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	1e5a      	subs	r2, r3, #1
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	fb93 f2f2 	sdiv	r2, r3, r2
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	fb01 f202 	mul.w	r2, r1, r2
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	61fb      	str	r3, [r7, #28]

            if (type == 'M') {
 80073da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073de:	2b4d      	cmp	r3, #77	; 0x4d
 80073e0:	d115      	bne.n	800740e <saveCharacter+0x1a2>
            	// Machine ID için özel cursor hareketi
            	if (*writeLoc == 10) *writeLoc = 7; // 10'dan 7'ye atla
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b0a      	cmp	r3, #10
 80073e8:	d103      	bne.n	80073f2 <saveCharacter+0x186>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2207      	movs	r2, #7
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e033      	b.n	800745a <saveCharacter+0x1ee>
            	else if (*writeLoc == 3) *writeLoc = 14; // 3'ten 14'e dön
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d103      	bne.n	8007402 <saveCharacter+0x196>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	220e      	movs	r2, #14
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e02b      	b.n	800745a <saveCharacter+0x1ee>
            	else (*writeLoc)--;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e025      	b.n	800745a <saveCharacter+0x1ee>
            } else {
            	// SSID ve Password için sayfa kontrolü
            	if (*writeLoc <= 1 && page > 1) {
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	dc14      	bgt.n	8007440 <saveCharacter+0x1d4>
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b01      	cmp	r3, #1
 800741a:	dd11      	ble.n	8007440 <saveCharacter+0x1d4>
            	    *writeLoc = 16; // İmleci sayfanın sonuna taşı
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2210      	movs	r2, #16
 8007420:	601a      	str	r2, [r3, #0]
            	    page--; // Önceki sayfaya geç
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3b01      	subs	r3, #1
 8007426:	613b      	str	r3, [r7, #16]
            	    printTemplate(type == 'S' ? 2 : 3, page);
 8007428:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800742c:	2b53      	cmp	r3, #83	; 0x53
 800742e:	d101      	bne.n	8007434 <saveCharacter+0x1c8>
 8007430:	2302      	movs	r3, #2
 8007432:	e000      	b.n	8007436 <saveCharacter+0x1ca>
 8007434:	2303      	movs	r3, #3
 8007436:	6939      	ldr	r1, [r7, #16]
 8007438:	4618      	mov	r0, r3
 800743a:	f7f9 fcc9 	bl	8000dd0 <printTemplate>
 800743e:	e00c      	b.n	800745a <saveCharacter+0x1ee>
            	} else if (*writeLoc <= 1) {
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	dc03      	bgt.n	8007450 <saveCharacter+0x1e4>
            	    *writeLoc = 16;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2210      	movs	r2, #16
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e004      	b.n	800745a <saveCharacter+0x1ee>
            	} else {
            	    (*writeLoc)--;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	601a      	str	r2, [r3, #0]
            	}
            }
            lcd_gotoxy(2, (*writeLoc - 1) % 16);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3b01      	subs	r3, #1
 8007460:	425a      	negs	r2, r3
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	f002 020f 	and.w	r2, r2, #15
 800746a:	bf58      	it	pl
 800746c:	4253      	negpl	r3, r2
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	2002      	movs	r0, #2
 8007474:	f000 fa0f 	bl	8007896 <lcd_gotoxy>
            if(type == 'M') {
 8007478:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800747c:	2b4d      	cmp	r3, #77	; 0x4d
 800747e:	d107      	bne.n	8007490 <saveCharacter+0x224>
            	lcd_send_char(idCharactersArray[characterPos]);
 8007480:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <saveCharacter+0x25c>)
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	4618      	mov	r0, r3
 800748a:	f000 f981 	bl	8007790 <lcd_send_char>
 800748e:	e006      	b.n	800749e <saveCharacter+0x232>
            } else {
            	lcd_send_char(charactersArray[characterPos]);
 8007490:	4a0e      	ldr	r2, [pc, #56]	; (80074cc <saveCharacter+0x260>)
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f979 	bl	8007790 <lcd_send_char>
            }
            HAL_Delay(200); // Debouncing için gecikme
 800749e:	20c8      	movs	r0, #200	; 0xc8
 80074a0:	f000 ff58 	bl	8008354 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80074a4:	2102      	movs	r1, #2
 80074a6:	480a      	ldr	r0, [pc, #40]	; (80074d0 <saveCharacter+0x264>)
 80074a8:	f001 fd24 	bl	8008ef4 <HAL_GPIO_ReadPin>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d13b      	bne.n	800752a <saveCharacter+0x2be>
            // Karakteri seç ve kaydet
        	if(type == 'M') {
 80074b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074b6:	2b4d      	cmp	r3, #77	; 0x4d
 80074b8:	d10e      	bne.n	80074d8 <saveCharacter+0x26c>
        		selectedChar = idCharactersArray[characterPos];
 80074ba:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <saveCharacter+0x25c>)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	76fb      	strb	r3, [r7, #27]
 80074c4:	e00d      	b.n	80074e2 <saveCharacter+0x276>
 80074c6:	bf00      	nop
 80074c8:	20000024 	.word	0x20000024
 80074cc:	20000030 	.word	0x20000030
 80074d0:	40010800 	.word	0x40010800
 80074d4:	40011000 	.word	0x40011000
        	} else {
        		selectedChar = charactersArray[characterPos];
 80074d8:	4a2f      	ldr	r2, [pc, #188]	; (8007598 <saveCharacter+0x32c>)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	4413      	add	r3, r2
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	76fb      	strb	r3, [r7, #27]
        	}
            data[*loc] = selectedChar;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	7efa      	ldrb	r2, [r7, #27]
 80074ee:	701a      	strb	r2, [r3, #0]
            eepromData[startPos + *loc] = characterPos;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	4413      	add	r3, r2
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	b2d1      	uxtb	r1, r2
 80074fc:	4a27      	ldr	r2, [pc, #156]	; (800759c <saveCharacter+0x330>)
 80074fe:	54d1      	strb	r1, [r2, r3]
            (*loc)++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	601a      	str	r2, [r3, #0]
            (*writeLoc)++;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	601a      	str	r2, [r3, #0]
            lcd_print_char(2, *writeLoc, selectedChar);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	7efa      	ldrb	r2, [r7, #27]
 800751c:	4619      	mov	r1, r3
 800751e:	2002      	movs	r0, #2
 8007520:	f000 f9ed 	bl	80078fe <lcd_print_char>
            HAL_Delay(200); // Debouncing için gecikme
 8007524:	20c8      	movs	r0, #200	; 0xc8
 8007526:	f000 ff15 	bl	8008354 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800752a:	2104      	movs	r1, #4
 800752c:	481c      	ldr	r0, [pc, #112]	; (80075a0 <saveCharacter+0x334>)
 800752e:	f001 fce1 	bl	8008ef4 <HAL_GPIO_ReadPin>
 8007532:	4603      	mov	r3, r0
 8007534:	2b01      	cmp	r3, #1
 8007536:	f47f aec6 	bne.w	80072c6 <saveCharacter+0x5a>
            // Son karakteri sil
            if (*loc > 0) {
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd20      	ble.n	8007584 <saveCharacter+0x318>
                (*loc)--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]
                (*writeLoc)--;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	1e5a      	subs	r2, r3, #1
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	601a      	str	r2, [r3, #0]
                lcd_delete_char(2, *writeLoc + 1);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	3301      	adds	r3, #1
 800755e:	b2db      	uxtb	r3, r3
 8007560:	4619      	mov	r1, r3
 8007562:	2002      	movs	r0, #2
 8007564:	f000 f9ec 	bl	8007940 <lcd_delete_char>
                data[*loc] = '\0';
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4413      	add	r3, r2
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
                eepromData[startPos + *loc] = '\0';
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	4413      	add	r3, r2
 800757e:	4a07      	ldr	r2, [pc, #28]	; (800759c <saveCharacter+0x330>)
 8007580:	2100      	movs	r1, #0
 8007582:	54d1      	strb	r1, [r2, r3]
            }
            HAL_Delay(200); // Debouncing için gecikme
 8007584:	20c8      	movs	r0, #200	; 0xc8
 8007586:	f000 fee5 	bl	8008354 <HAL_Delay>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800758a:	e69c      	b.n	80072c6 <saveCharacter+0x5a>
            break;
 800758c:	bf00      	nop
        }
    }
}
 800758e:	bf00      	nop
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000030 	.word	0x20000030
 800759c:	2000012c 	.word	0x2000012c
 80075a0:	40010800 	.word	0x40010800

080075a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	4603      	mov	r3, r0
 80075ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	f023 030f 	bic.w	r3, r3, #15
 80075b4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80075bc:	7b7b      	ldrb	r3, [r7, #13]
 80075be:	f043 030c 	orr.w	r3, r3, #12
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80075c6:	7b7b      	ldrb	r3, [r7, #13]
 80075c8:	f043 0308 	orr.w	r3, r3, #8
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80075d0:	7b3b      	ldrb	r3, [r7, #12]
 80075d2:	f043 030c 	orr.w	r3, r3, #12
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80075da:	7b3b      	ldrb	r3, [r7, #12]
 80075dc:	f043 0308 	orr.w	r3, r3, #8
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80075e4:	bf00      	nop
 80075e6:	4825      	ldr	r0, [pc, #148]	; (800767c <lcd_send_cmd+0xd8>)
 80075e8:	f002 faad 	bl	8009b46 <HAL_I2C_GetError>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d0f9      	beq.n	80075e6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80075f2:	bf00      	nop
 80075f4:	4821      	ldr	r0, [pc, #132]	; (800767c <lcd_send_cmd+0xd8>)
 80075f6:	f002 fa99 	bl	8009b2c <HAL_I2C_GetState>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d1f9      	bne.n	80075f4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007600:	4b1f      	ldr	r3, [pc, #124]	; (8007680 <lcd_send_cmd+0xdc>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d116      	bne.n	8007636 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
 800760c:	e00f      	b.n	800762e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	3310      	adds	r3, #16
 8007612:	443b      	add	r3, r7
 8007614:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	f022 0208 	bic.w	r2, r2, #8
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	3310      	adds	r3, #16
 8007622:	443b      	add	r3, r7
 8007624:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	3301      	adds	r3, #1
 800762c:	73fb      	strb	r3, [r7, #15]
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d9ec      	bls.n	800760e <lcd_send_cmd+0x6a>
 8007634:	e015      	b.n	8007662 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007636:	2300      	movs	r3, #0
 8007638:	73bb      	strb	r3, [r7, #14]
 800763a:	e00f      	b.n	800765c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	3310      	adds	r3, #16
 8007640:	443b      	add	r3, r7
 8007642:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	f042 0208 	orr.w	r2, r2, #8
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	3310      	adds	r3, #16
 8007650:	443b      	add	r3, r7
 8007652:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	3301      	adds	r3, #1
 800765a:	73bb      	strb	r3, [r7, #14]
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d9ec      	bls.n	800763c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007662:	f107 0208 	add.w	r2, r7, #8
 8007666:	2364      	movs	r3, #100	; 0x64
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2304      	movs	r3, #4
 800766c:	214e      	movs	r1, #78	; 0x4e
 800766e:	4803      	ldr	r0, [pc, #12]	; (800767c <lcd_send_cmd+0xd8>)
 8007670:	f001 fdfc 	bl	800926c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000290 	.word	0x20000290
 8007680:	20000264 	.word	0x20000264

08007684 <lcd_send_data>:

void lcd_send_data (char data) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af02      	add	r7, sp, #8
 800768a:	4603      	mov	r3, r0
 800768c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	f023 030f 	bic.w	r3, r3, #15
 8007694:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800769c:	7b7b      	ldrb	r3, [r7, #13]
 800769e:	f043 030d 	orr.w	r3, r3, #13
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80076a6:	7b7b      	ldrb	r3, [r7, #13]
 80076a8:	f043 0309 	orr.w	r3, r3, #9
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80076b0:	7b3b      	ldrb	r3, [r7, #12]
 80076b2:	f043 030d 	orr.w	r3, r3, #13
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80076ba:	7b3b      	ldrb	r3, [r7, #12]
 80076bc:	f043 0309 	orr.w	r3, r3, #9
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80076c4:	bf00      	nop
 80076c6:	4825      	ldr	r0, [pc, #148]	; (800775c <lcd_send_data+0xd8>)
 80076c8:	f002 fa3d 	bl	8009b46 <HAL_I2C_GetError>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d0f9      	beq.n	80076c6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80076d2:	bf00      	nop
 80076d4:	4821      	ldr	r0, [pc, #132]	; (800775c <lcd_send_data+0xd8>)
 80076d6:	f002 fa29 	bl	8009b2c <HAL_I2C_GetState>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d1f9      	bne.n	80076d4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80076e0:	4b1f      	ldr	r3, [pc, #124]	; (8007760 <lcd_send_data+0xdc>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d116      	bne.n	8007716 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e00f      	b.n	800770e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	3310      	adds	r3, #16
 80076f2:	443b      	add	r3, r7
 80076f4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	f022 0208 	bic.w	r2, r2, #8
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	3310      	adds	r3, #16
 8007702:	443b      	add	r3, r7
 8007704:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	3301      	adds	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d9ec      	bls.n	80076ee <lcd_send_data+0x6a>
 8007714:	e015      	b.n	8007742 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007716:	2300      	movs	r3, #0
 8007718:	73bb      	strb	r3, [r7, #14]
 800771a:	e00f      	b.n	800773c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	3310      	adds	r3, #16
 8007720:	443b      	add	r3, r7
 8007722:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	f042 0208 	orr.w	r2, r2, #8
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	3310      	adds	r3, #16
 8007730:	443b      	add	r3, r7
 8007732:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	3301      	adds	r3, #1
 800773a:	73bb      	strb	r3, [r7, #14]
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d9ec      	bls.n	800771c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007742:	f107 0208 	add.w	r2, r7, #8
 8007746:	2364      	movs	r3, #100	; 0x64
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2304      	movs	r3, #4
 800774c:	214e      	movs	r1, #78	; 0x4e
 800774e:	4803      	ldr	r0, [pc, #12]	; (800775c <lcd_send_data+0xd8>)
 8007750:	f001 fd8c 	bl	800926c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000290 	.word	0x20000290
 8007760:	20000264 	.word	0x20000264

08007764 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800776c:	e006      	b.n	800777c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff ff84 	bl	8007684 <lcd_send_data>
	while (*str) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1f4      	bne.n	800776e <lcd_send_string+0xa>
	}
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af02      	add	r7, sp, #8
 8007796:	4603      	mov	r3, r0
 8007798:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	f023 030f 	bic.w	r3, r3, #15
 80077a0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80077a8:	7b7b      	ldrb	r3, [r7, #13]
 80077aa:	f043 030d 	orr.w	r3, r3, #13
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80077b2:	7b7b      	ldrb	r3, [r7, #13]
 80077b4:	f043 0309 	orr.w	r3, r3, #9
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80077bc:	7b3b      	ldrb	r3, [r7, #12]
 80077be:	f043 030d 	orr.w	r3, r3, #13
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80077c6:	7b3b      	ldrb	r3, [r7, #12]
 80077c8:	f043 0309 	orr.w	r3, r3, #9
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80077d0:	bf00      	nop
 80077d2:	4825      	ldr	r0, [pc, #148]	; (8007868 <lcd_send_char+0xd8>)
 80077d4:	f002 f9b7 	bl	8009b46 <HAL_I2C_GetError>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d0f9      	beq.n	80077d2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077de:	bf00      	nop
 80077e0:	4821      	ldr	r0, [pc, #132]	; (8007868 <lcd_send_char+0xd8>)
 80077e2:	f002 f9a3 	bl	8009b2c <HAL_I2C_GetState>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d1f9      	bne.n	80077e0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80077ec:	4b1f      	ldr	r3, [pc, #124]	; (800786c <lcd_send_char+0xdc>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d116      	bne.n	8007822 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
 80077f8:	e00f      	b.n	800781a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	3310      	adds	r3, #16
 80077fe:	443b      	add	r3, r7
 8007800:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	f022 0208 	bic.w	r2, r2, #8
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	3310      	adds	r3, #16
 800780e:	443b      	add	r3, r7
 8007810:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	3301      	adds	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d9ec      	bls.n	80077fa <lcd_send_char+0x6a>
 8007820:	e015      	b.n	800784e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007822:	2300      	movs	r3, #0
 8007824:	73bb      	strb	r3, [r7, #14]
 8007826:	e00f      	b.n	8007848 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	3310      	adds	r3, #16
 800782c:	443b      	add	r3, r7
 800782e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	f042 0208 	orr.w	r2, r2, #8
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	3310      	adds	r3, #16
 800783c:	443b      	add	r3, r7
 800783e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	3301      	adds	r3, #1
 8007846:	73bb      	strb	r3, [r7, #14]
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d9ec      	bls.n	8007828 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	2364      	movs	r3, #100	; 0x64
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	2304      	movs	r3, #4
 8007858:	214e      	movs	r1, #78	; 0x4e
 800785a:	4803      	ldr	r0, [pc, #12]	; (8007868 <lcd_send_char+0xd8>)
 800785c:	f001 fd06 	bl	800926c <HAL_I2C_Master_Transmit>
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000290 	.word	0x20000290
 800786c:	20000264 	.word	0x20000264

08007870 <lcd_init>:

void lcd_init (void) {
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007874:	2002      	movs	r0, #2
 8007876:	f7ff fe95 	bl	80075a4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800787a:	2028      	movs	r0, #40	; 0x28
 800787c:	f7ff fe92 	bl	80075a4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007880:	200c      	movs	r0, #12
 8007882:	f7ff fe8f 	bl	80075a4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007886:	2080      	movs	r0, #128	; 0x80
 8007888:	f7ff fe8c 	bl	80075a4 <lcd_send_cmd>
	lcd_backlight(1);
 800788c:	2001      	movs	r0, #1
 800788e:	f000 f86d 	bl	800796c <lcd_backlight>
}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}

08007896 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	4603      	mov	r3, r0
 800789e:	460a      	mov	r2, r1
 80078a0:	71fb      	strb	r3, [r7, #7]
 80078a2:	4613      	mov	r3, r2
 80078a4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d106      	bne.n	80078ba <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80078ac:	79bb      	ldrb	r3, [r7, #6]
 80078ae:	337f      	adds	r3, #127	; 0x7f
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fe76 	bl	80075a4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80078b8:	e008      	b.n	80078cc <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d105      	bne.n	80078cc <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80078c0:	79bb      	ldrb	r3, [r7, #6]
 80078c2:	3b41      	subs	r3, #65	; 0x41
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fe6c 	bl	80075a4 <lcd_send_cmd>
}
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	603a      	str	r2, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
 80078e0:	460b      	mov	r3, r1
 80078e2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80078e4:	79ba      	ldrb	r2, [r7, #6]
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	4611      	mov	r1, r2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff ffd3 	bl	8007896 <lcd_gotoxy>
	lcd_send_string(str);
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f7ff ff37 	bl	8007764 <lcd_send_string>
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	4603      	mov	r3, r0
 8007906:	71fb      	strb	r3, [r7, #7]
 8007908:	460b      	mov	r3, r1
 800790a:	71bb      	strb	r3, [r7, #6]
 800790c:	4613      	mov	r3, r2
 800790e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007910:	79ba      	ldrb	r2, [r7, #6]
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	4611      	mov	r1, r2
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff ffbd 	bl	8007896 <lcd_gotoxy>
    lcd_send_char(ch);
 800791c:	797b      	ldrb	r3, [r7, #5]
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff ff36 	bl	8007790 <lcd_send_char>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <lcd_clear>:

void lcd_clear(void) {
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007930:	2001      	movs	r0, #1
 8007932:	f7ff fe37 	bl	80075a4 <lcd_send_cmd>
    HAL_Delay(2);
 8007936:	2002      	movs	r0, #2
 8007938:	f000 fd0c 	bl	8008354 <HAL_Delay>
}
 800793c:	bf00      	nop
 800793e:	bd80      	pop	{r7, pc}

08007940 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	460a      	mov	r2, r1
 800794a:	71fb      	strb	r3, [r7, #7]
 800794c:	4613      	mov	r3, r2
 800794e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007950:	79ba      	ldrb	r2, [r7, #6]
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff ff9d 	bl	8007896 <lcd_gotoxy>

    lcd_send_char(' ');
 800795c:	2020      	movs	r0, #32
 800795e:	f7ff ff17 	bl	8007790 <lcd_send_char>
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007976:	4a05      	ldr	r2, [pc, #20]	; (800798c <lcd_backlight+0x20>)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800797c:	2000      	movs	r0, #0
 800797e:	f7ff fe11 	bl	80075a4 <lcd_send_cmd>
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000264 	.word	0x20000264

08007990 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	4a03      	ldr	r2, [pc, #12]	; (80079ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80079a0:	6013      	str	r3, [r2, #0]
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr
 80079ac:	200001dc 	.word	0x200001dc

080079b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079b4:	f000 fc6c 	bl	8008290 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80079b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079bc:	f000 fcca 	bl	8008354 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079c0:	f000 f89c 	bl	8007afc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079c4:	f000 f9be 	bl	8007d44 <MX_GPIO_Init>
  MX_CAN_Init();
 80079c8:	f000 f8de 	bl	8007b88 <MX_CAN_Init>
  MX_I2C1_Init();
 80079cc:	f000 f910 	bl	8007bf0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80079d0:	f000 f93c 	bl	8007c4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80079d4:	f000 f98c 	bl	8007cf0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80079d8:	2201      	movs	r2, #1
 80079da:	2140      	movs	r1, #64	; 0x40
 80079dc:	483e      	ldr	r0, [pc, #248]	; (8007ad8 <main+0x128>)
 80079de:	f001 faa0 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80079e2:	2201      	movs	r2, #1
 80079e4:	2180      	movs	r1, #128	; 0x80
 80079e6:	483c      	ldr	r0, [pc, #240]	; (8007ad8 <main+0x128>)
 80079e8:	f001 fa9b 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80079ec:	200a      	movs	r0, #10
 80079ee:	f000 fcb1 	bl	8008354 <HAL_Delay>
  lcd_init();
 80079f2:	f7ff ff3d 	bl	8007870 <lcd_init>
  HAL_Delay(10);
 80079f6:	200a      	movs	r0, #10
 80079f8:	f000 fcac 	bl	8008354 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80079fc:	4837      	ldr	r0, [pc, #220]	; (8007adc <main+0x12c>)
 80079fe:	f003 f943 	bl	800ac88 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a02:	bf00      	nop
 8007a04:	4836      	ldr	r0, [pc, #216]	; (8007ae0 <main+0x130>)
 8007a06:	f002 f89e 	bl	8009b46 <HAL_I2C_GetError>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d0f9      	beq.n	8007a04 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a10:	bf00      	nop
 8007a12:	4833      	ldr	r0, [pc, #204]	; (8007ae0 <main+0x130>)
 8007a14:	f002 f88a 	bl	8009b2c <HAL_I2C_GetState>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d1f9      	bne.n	8007a12 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a24:	482c      	ldr	r0, [pc, #176]	; (8007ad8 <main+0x128>)
 8007a26:	f001 fa7c 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a30:	4829      	ldr	r0, [pc, #164]	; (8007ad8 <main+0x128>)
 8007a32:	f001 fa76 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2104      	movs	r1, #4
 8007a3a:	4827      	ldr	r0, [pc, #156]	; (8007ad8 <main+0x128>)
 8007a3c:	f001 fa71 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007a40:	2200      	movs	r2, #0
 8007a42:	2102      	movs	r1, #2
 8007a44:	4824      	ldr	r0, [pc, #144]	; (8007ad8 <main+0x128>)
 8007a46:	f001 fa6c 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	4822      	ldr	r0, [pc, #136]	; (8007ad8 <main+0x128>)
 8007a50:	f001 fa67 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007a54:	2200      	movs	r2, #0
 8007a56:	2120      	movs	r1, #32
 8007a58:	4822      	ldr	r0, [pc, #136]	; (8007ae4 <main+0x134>)
 8007a5a:	f001 fa62 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2110      	movs	r1, #16
 8007a62:	4820      	ldr	r0, [pc, #128]	; (8007ae4 <main+0x134>)
 8007a64:	f001 fa5d 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2180      	movs	r1, #128	; 0x80
 8007a6c:	481e      	ldr	r0, [pc, #120]	; (8007ae8 <main+0x138>)
 8007a6e:	f001 fa58 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007a72:	2200      	movs	r2, #0
 8007a74:	2140      	movs	r1, #64	; 0x40
 8007a76:	481c      	ldr	r0, [pc, #112]	; (8007ae8 <main+0x138>)
 8007a78:	f001 fa53 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2120      	movs	r1, #32
 8007a80:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <main+0x138>)
 8007a82:	f001 fa4e 	bl	8008f22 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2110      	movs	r1, #16
 8007a8a:	4817      	ldr	r0, [pc, #92]	; (8007ae8 <main+0x138>)
 8007a8c:	f001 fa49 	bl	8008f22 <HAL_GPIO_WritePin>

  i2cTest();
 8007a90:	f7f9 f8f0 	bl	8000c74 <i2cTest>
  HAL_Delay(100);
 8007a94:	2064      	movs	r0, #100	; 0x64
 8007a96:	f000 fc5d 	bl	8008354 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007a9a:	4a14      	ldr	r2, [pc, #80]	; (8007aec <main+0x13c>)
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	f7ff ff18 	bl	80078d4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007aa4:	4a12      	ldr	r2, [pc, #72]	; (8007af0 <main+0x140>)
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	2002      	movs	r0, #2
 8007aaa:	f7ff ff13 	bl	80078d4 <lcd_print>
  HAL_Delay(1000);
 8007aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ab2:	f000 fc4f 	bl	8008354 <HAL_Delay>
  lcd_clear();
 8007ab6:	f7ff ff39 	bl	800792c <lcd_clear>

  eepromKontrol();
 8007aba:	f7f8 fbbb 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007abe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ac2:	f000 fc47 	bl	8008354 <HAL_Delay>

  backLightTimer = millis;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <main+0x144>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <main+0x148>)
 8007acc:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007ace:	f7ff fb91 	bl	80071f4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ad2:	f7fe ff21 	bl	8006918 <mainLoop>
 8007ad6:	e7fc      	b.n	8007ad2 <main+0x122>
 8007ad8:	40010c00 	.word	0x40010c00
 8007adc:	200002e4 	.word	0x200002e4
 8007ae0:	20000290 	.word	0x20000290
 8007ae4:	40011000 	.word	0x40011000
 8007ae8:	40010800 	.word	0x40010800
 8007aec:	0800d984 	.word	0x0800d984
 8007af0:	0800d998 	.word	0x0800d998
 8007af4:	200001dc 	.word	0x200001dc
 8007af8:	200001f8 	.word	0x200001f8

08007afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b090      	sub	sp, #64	; 0x40
 8007b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b02:	f107 0318 	add.w	r3, r7, #24
 8007b06:	2228      	movs	r2, #40	; 0x28
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f004 fb79 	bl	800c202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b10:	1d3b      	adds	r3, r7, #4
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	605a      	str	r2, [r3, #4]
 8007b18:	609a      	str	r2, [r3, #8]
 8007b1a:	60da      	str	r2, [r3, #12]
 8007b1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b30:	2302      	movs	r3, #2
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007b3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b40:	f107 0318 	add.w	r3, r7, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f002 fc3f 	bl	800a3c8 <HAL_RCC_OscConfig>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007b50:	f000 f9a2 	bl	8007e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b54:	230f      	movs	r3, #15
 8007b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	2102      	movs	r1, #2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 feac 	bl	800a8cc <HAL_RCC_ClockConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007b7a:	f000 f98d 	bl	8007e98 <Error_Handler>
  }
}
 8007b7e:	bf00      	nop
 8007b80:	3740      	adds	r7, #64	; 0x40
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <MX_CAN_Init+0x60>)
 8007b8e:	4a17      	ldr	r2, [pc, #92]	; (8007bec <MX_CAN_Init+0x64>)
 8007b90:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007b92:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <MX_CAN_Init+0x60>)
 8007b94:	2210      	movs	r2, #16
 8007b96:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007b98:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <MX_CAN_Init+0x60>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <MX_CAN_Init+0x60>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007ba4:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <MX_CAN_Init+0x60>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007bbc:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007bd4:	4804      	ldr	r0, [pc, #16]	; (8007be8 <MX_CAN_Init+0x60>)
 8007bd6:	f000 fbe1 	bl	800839c <HAL_CAN_Init>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007be0:	f000 f95a 	bl	8007e98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000268 	.word	0x20000268
 8007bec:	40006400 	.word	0x40006400

08007bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007bf6:	4a13      	ldr	r2, [pc, #76]	; (8007c44 <MX_I2C1_Init+0x54>)
 8007bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007bfa:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007bfc:	4a12      	ldr	r2, [pc, #72]	; (8007c48 <MX_I2C1_Init+0x58>)
 8007bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007c06:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c26:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007c2c:	4804      	ldr	r0, [pc, #16]	; (8007c40 <MX_I2C1_Init+0x50>)
 8007c2e:	f001 f9a9 	bl	8008f84 <HAL_I2C_Init>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007c38:	f000 f92e 	bl	8007e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007c3c:	bf00      	nop
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000290 	.word	0x20000290
 8007c44:	40005400 	.word	0x40005400
 8007c48:	00061a80 	.word	0x00061a80

08007c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c52:	f107 0308 	add.w	r3, r7, #8
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	609a      	str	r2, [r3, #8]
 8007c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c60:	463b      	mov	r3, r7
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007c68:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <MX_TIM1_Init+0xa0>)
 8007c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007c6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c70:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c7e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c84:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007c8a:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c90:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007c96:	4814      	ldr	r0, [pc, #80]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007c98:	f002 ffa6 	bl	800abe8 <HAL_TIM_Base_Init>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007ca2:	f000 f8f9 	bl	8007e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007cac:	f107 0308 	add.w	r3, r7, #8
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	480d      	ldr	r0, [pc, #52]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007cb4:	f003 f950 	bl	800af58 <HAL_TIM_ConfigClockSource>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007cbe:	f000 f8eb 	bl	8007e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007cca:	463b      	mov	r3, r7
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4806      	ldr	r0, [pc, #24]	; (8007ce8 <MX_TIM1_Init+0x9c>)
 8007cd0:	f003 fb3e 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007cda:	f000 f8dd 	bl	8007e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200002e4 	.word	0x200002e4
 8007cec:	40012c00 	.word	0x40012c00

08007cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007cf4:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007cf6:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <MX_USART1_UART_Init+0x50>)
 8007cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007cfa:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d02:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d16:	220c      	movs	r2, #12
 8007d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d1a:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d26:	4805      	ldr	r0, [pc, #20]	; (8007d3c <MX_USART1_UART_Init+0x4c>)
 8007d28:	f003 fb90 	bl	800b44c <HAL_UART_Init>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007d32:	f000 f8b1 	bl	8007e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000032c 	.word	0x2000032c
 8007d40:	40013800 	.word	0x40013800

08007d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	609a      	str	r2, [r3, #8]
 8007d56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d58:	4b4b      	ldr	r3, [pc, #300]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	4a4a      	ldr	r2, [pc, #296]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d5e:	f043 0310 	orr.w	r3, r3, #16
 8007d62:	6193      	str	r3, [r2, #24]
 8007d64:	4b48      	ldr	r3, [pc, #288]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d70:	4b45      	ldr	r3, [pc, #276]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	4a44      	ldr	r2, [pc, #272]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d76:	f043 0320 	orr.w	r3, r3, #32
 8007d7a:	6193      	str	r3, [r2, #24]
 8007d7c:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	60bb      	str	r3, [r7, #8]
 8007d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d88:	4b3f      	ldr	r3, [pc, #252]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	4a3e      	ldr	r2, [pc, #248]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d8e:	f043 0304 	orr.w	r3, r3, #4
 8007d92:	6193      	str	r3, [r2, #24]
 8007d94:	4b3c      	ldr	r3, [pc, #240]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007da6:	f043 0308 	orr.w	r3, r3, #8
 8007daa:	6193      	str	r3, [r2, #24]
 8007dac:	4b36      	ldr	r3, [pc, #216]	; (8007e88 <MX_GPIO_Init+0x144>)
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f003 0308 	and.w	r3, r3, #8
 8007db4:	603b      	str	r3, [r7, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007db8:	2200      	movs	r2, #0
 8007dba:	21f0      	movs	r1, #240	; 0xf0
 8007dbc:	4833      	ldr	r0, [pc, #204]	; (8007e8c <MX_GPIO_Init+0x148>)
 8007dbe:	f001 f8b0 	bl	8008f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f241 0130 	movw	r1, #4144	; 0x1030
 8007dc8:	4831      	ldr	r0, [pc, #196]	; (8007e90 <MX_GPIO_Init+0x14c>)
 8007dca:	f001 f8aa 	bl	8008f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f640 4107 	movw	r1, #3079	; 0xc07
 8007dd4:	482f      	ldr	r0, [pc, #188]	; (8007e94 <MX_GPIO_Init+0x150>)
 8007dd6:	f001 f8a4 	bl	8008f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007dda:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007dde:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007de8:	f107 0310 	add.w	r3, r7, #16
 8007dec:	4619      	mov	r1, r3
 8007dee:	4828      	ldr	r0, [pc, #160]	; (8007e90 <MX_GPIO_Init+0x14c>)
 8007df0:	f000 fe20 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007df4:	f248 130f 	movw	r3, #33039	; 0x810f
 8007df8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e02:	f107 0310 	add.w	r3, r7, #16
 8007e06:	4619      	mov	r1, r3
 8007e08:	4820      	ldr	r0, [pc, #128]	; (8007e8c <MX_GPIO_Init+0x148>)
 8007e0a:	f000 fe13 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007e0e:	23f0      	movs	r3, #240	; 0xf0
 8007e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e12:	2301      	movs	r3, #1
 8007e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e1e:	f107 0310 	add.w	r3, r7, #16
 8007e22:	4619      	mov	r1, r3
 8007e24:	4819      	ldr	r0, [pc, #100]	; (8007e8c <MX_GPIO_Init+0x148>)
 8007e26:	f000 fe05 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007e2a:	f241 0330 	movw	r3, #4144	; 0x1030
 8007e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e30:	2301      	movs	r3, #1
 8007e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	4619      	mov	r1, r3
 8007e42:	4813      	ldr	r0, [pc, #76]	; (8007e90 <MX_GPIO_Init+0x14c>)
 8007e44:	f000 fdf6 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007e48:	f640 4307 	movw	r3, #3079	; 0xc07
 8007e4c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e56:	2302      	movs	r3, #2
 8007e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e5a:	f107 0310 	add.w	r3, r7, #16
 8007e5e:	4619      	mov	r1, r3
 8007e60:	480c      	ldr	r0, [pc, #48]	; (8007e94 <MX_GPIO_Init+0x150>)
 8007e62:	f000 fde7 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007e66:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4806      	ldr	r0, [pc, #24]	; (8007e94 <MX_GPIO_Init+0x150>)
 8007e7c:	f000 fdda 	bl	8008a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007e80:	bf00      	nop
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	40010800 	.word	0x40010800
 8007e90:	40011000 	.word	0x40011000
 8007e94:	40010c00 	.word	0x40010c00

08007e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007e9c:	bf00      	nop
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <HAL_MspInit+0x5c>)
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	4a14      	ldr	r2, [pc, #80]	; (8007f00 <HAL_MspInit+0x5c>)
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	6193      	str	r3, [r2, #24]
 8007eb6:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <HAL_MspInit+0x5c>)
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <HAL_MspInit+0x5c>)
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <HAL_MspInit+0x5c>)
 8007ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	61d3      	str	r3, [r2, #28]
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <HAL_MspInit+0x5c>)
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed6:	607b      	str	r3, [r7, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007eda:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <HAL_MspInit+0x60>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	4a04      	ldr	r2, [pc, #16]	; (8007f04 <HAL_MspInit+0x60>)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr
 8007f00:	40021000 	.word	0x40021000
 8007f04:	40010000 	.word	0x40010000

08007f08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f10:	f107 0310 	add.w	r3, r7, #16
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	609a      	str	r2, [r3, #8]
 8007f1c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <HAL_CAN_MspInit+0x8c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d131      	bne.n	8007f8c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007f28:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <HAL_CAN_MspInit+0x90>)
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4a1a      	ldr	r2, [pc, #104]	; (8007f98 <HAL_CAN_MspInit+0x90>)
 8007f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f32:	61d3      	str	r3, [r2, #28]
 8007f34:	4b18      	ldr	r3, [pc, #96]	; (8007f98 <HAL_CAN_MspInit+0x90>)
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f40:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <HAL_CAN_MspInit+0x90>)
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <HAL_CAN_MspInit+0x90>)
 8007f46:	f043 0304 	orr.w	r3, r3, #4
 8007f4a:	6193      	str	r3, [r2, #24]
 8007f4c:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <HAL_CAN_MspInit+0x90>)
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f66:	f107 0310 	add.w	r3, r7, #16
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	480b      	ldr	r0, [pc, #44]	; (8007f9c <HAL_CAN_MspInit+0x94>)
 8007f6e:	f000 fd61 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	4619      	mov	r1, r3
 8007f86:	4805      	ldr	r0, [pc, #20]	; (8007f9c <HAL_CAN_MspInit+0x94>)
 8007f88:	f000 fd54 	bl	8008a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007f8c:	bf00      	nop
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40006400 	.word	0x40006400
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	40010800 	.word	0x40010800

08007fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fa8:	f107 0310 	add.w	r3, r7, #16
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a15      	ldr	r2, [pc, #84]	; (8008010 <HAL_I2C_MspInit+0x70>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d123      	bne.n	8008008 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fc0:	4b14      	ldr	r3, [pc, #80]	; (8008014 <HAL_I2C_MspInit+0x74>)
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	4a13      	ldr	r2, [pc, #76]	; (8008014 <HAL_I2C_MspInit+0x74>)
 8007fc6:	f043 0308 	orr.w	r3, r3, #8
 8007fca:	6193      	str	r3, [r2, #24]
 8007fcc:	4b11      	ldr	r3, [pc, #68]	; (8008014 <HAL_I2C_MspInit+0x74>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007fd8:	23c0      	movs	r3, #192	; 0xc0
 8007fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fdc:	2312      	movs	r3, #18
 8007fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fe4:	f107 0310 	add.w	r3, r7, #16
 8007fe8:	4619      	mov	r1, r3
 8007fea:	480b      	ldr	r0, [pc, #44]	; (8008018 <HAL_I2C_MspInit+0x78>)
 8007fec:	f000 fd22 	bl	8008a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ff0:	4b08      	ldr	r3, [pc, #32]	; (8008014 <HAL_I2C_MspInit+0x74>)
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	4a07      	ldr	r2, [pc, #28]	; (8008014 <HAL_I2C_MspInit+0x74>)
 8007ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ffa:	61d3      	str	r3, [r2, #28]
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_I2C_MspInit+0x74>)
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008004:	60bb      	str	r3, [r7, #8]
 8008006:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008008:	bf00      	nop
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40005400 	.word	0x40005400
 8008014:	40021000 	.word	0x40021000
 8008018:	40010c00 	.word	0x40010c00

0800801c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <HAL_I2C_MspDeInit+0x38>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d10d      	bne.n	800804a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800802e:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <HAL_I2C_MspDeInit+0x3c>)
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	4a09      	ldr	r2, [pc, #36]	; (8008058 <HAL_I2C_MspDeInit+0x3c>)
 8008034:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008038:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800803a:	2140      	movs	r1, #64	; 0x40
 800803c:	4807      	ldr	r0, [pc, #28]	; (800805c <HAL_I2C_MspDeInit+0x40>)
 800803e:	f000 fe8d 	bl	8008d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	4805      	ldr	r0, [pc, #20]	; (800805c <HAL_I2C_MspDeInit+0x40>)
 8008046:	f000 fe89 	bl	8008d5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	40005400 	.word	0x40005400
 8008058:	40021000 	.word	0x40021000
 800805c:	40010c00 	.word	0x40010c00

08008060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <HAL_TIM_Base_MspInit+0x44>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d113      	bne.n	800809a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008072:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <HAL_TIM_Base_MspInit+0x48>)
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	4a0c      	ldr	r2, [pc, #48]	; (80080a8 <HAL_TIM_Base_MspInit+0x48>)
 8008078:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800807c:	6193      	str	r3, [r2, #24]
 800807e:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <HAL_TIM_Base_MspInit+0x48>)
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	2019      	movs	r0, #25
 8008090:	f000 fb57 	bl	8008742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008094:	2019      	movs	r0, #25
 8008096:	f000 fb70 	bl	800877a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40021000 	.word	0x40021000

080080ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b4:	f107 0310 	add.w	r3, r7, #16
 80080b8:	2200      	movs	r2, #0
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	605a      	str	r2, [r3, #4]
 80080be:	609a      	str	r2, [r3, #8]
 80080c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a20      	ldr	r2, [pc, #128]	; (8008148 <HAL_UART_MspInit+0x9c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d139      	bne.n	8008140 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80080cc:	4b1f      	ldr	r3, [pc, #124]	; (800814c <HAL_UART_MspInit+0xa0>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	4a1e      	ldr	r2, [pc, #120]	; (800814c <HAL_UART_MspInit+0xa0>)
 80080d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080d6:	6193      	str	r3, [r2, #24]
 80080d8:	4b1c      	ldr	r3, [pc, #112]	; (800814c <HAL_UART_MspInit+0xa0>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080e4:	4b19      	ldr	r3, [pc, #100]	; (800814c <HAL_UART_MspInit+0xa0>)
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4a18      	ldr	r2, [pc, #96]	; (800814c <HAL_UART_MspInit+0xa0>)
 80080ea:	f043 0304 	orr.w	r3, r3, #4
 80080ee:	6193      	str	r3, [r2, #24]
 80080f0:	4b16      	ldr	r3, [pc, #88]	; (800814c <HAL_UART_MspInit+0xa0>)
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	60bb      	str	r3, [r7, #8]
 80080fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80080fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008102:	2302      	movs	r3, #2
 8008104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008106:	2303      	movs	r3, #3
 8008108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800810a:	f107 0310 	add.w	r3, r7, #16
 800810e:	4619      	mov	r1, r3
 8008110:	480f      	ldr	r0, [pc, #60]	; (8008150 <HAL_UART_MspInit+0xa4>)
 8008112:	f000 fc8f 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008124:	f107 0310 	add.w	r3, r7, #16
 8008128:	4619      	mov	r1, r3
 800812a:	4809      	ldr	r0, [pc, #36]	; (8008150 <HAL_UART_MspInit+0xa4>)
 800812c:	f000 fc82 	bl	8008a34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008130:	2200      	movs	r2, #0
 8008132:	2100      	movs	r1, #0
 8008134:	2025      	movs	r0, #37	; 0x25
 8008136:	f000 fb04 	bl	8008742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800813a:	2025      	movs	r0, #37	; 0x25
 800813c:	f000 fb1d 	bl	800877a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008140:	bf00      	nop
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40013800 	.word	0x40013800
 800814c:	40021000 	.word	0x40021000
 8008150:	40010800 	.word	0x40010800

08008154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008158:	e7fe      	b.n	8008158 <NMI_Handler+0x4>

0800815a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800815a:	b480      	push	{r7}
 800815c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800815e:	e7fe      	b.n	800815e <HardFault_Handler+0x4>

08008160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008164:	e7fe      	b.n	8008164 <MemManage_Handler+0x4>

08008166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008166:	b480      	push	{r7}
 8008168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800816a:	e7fe      	b.n	800816a <BusFault_Handler+0x4>

0800816c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008170:	e7fe      	b.n	8008170 <UsageFault_Handler+0x4>

08008172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008176:	bf00      	nop
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr

0800817e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800817e:	b480      	push	{r7}
 8008180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008182:	bf00      	nop
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800818a:	b480      	push	{r7}
 800818c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800818e:	bf00      	nop
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr

08008196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800819a:	f000 f8bf 	bl	800831c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80081a8:	4802      	ldr	r0, [pc, #8]	; (80081b4 <TIM1_UP_IRQHandler+0x10>)
 80081aa:	f002 fdcd 	bl	800ad48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200002e4 	.word	0x200002e4

080081b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80081bc:	4802      	ldr	r0, [pc, #8]	; (80081c8 <USART1_IRQHandler+0x10>)
 80081be:	f003 f9cb 	bl	800b558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80081c2:	bf00      	nop
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	2000032c 	.word	0x2000032c

080081cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081d4:	4a14      	ldr	r2, [pc, #80]	; (8008228 <_sbrk+0x5c>)
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <_sbrk+0x60>)
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081e0:	4b13      	ldr	r3, [pc, #76]	; (8008230 <_sbrk+0x64>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081e8:	4b11      	ldr	r3, [pc, #68]	; (8008230 <_sbrk+0x64>)
 80081ea:	4a12      	ldr	r2, [pc, #72]	; (8008234 <_sbrk+0x68>)
 80081ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <_sbrk+0x64>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d207      	bcs.n	800820c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80081fc:	f004 f81a 	bl	800c234 <__errno>
 8008200:	4603      	mov	r3, r0
 8008202:	220c      	movs	r2, #12
 8008204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800820a:	e009      	b.n	8008220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800820c:	4b08      	ldr	r3, [pc, #32]	; (8008230 <_sbrk+0x64>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008212:	4b07      	ldr	r3, [pc, #28]	; (8008230 <_sbrk+0x64>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4413      	add	r3, r2
 800821a:	4a05      	ldr	r2, [pc, #20]	; (8008230 <_sbrk+0x64>)
 800821c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800821e:	68fb      	ldr	r3, [r7, #12]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	2000c000 	.word	0x2000c000
 800822c:	00000400 	.word	0x00000400
 8008230:	20000374 	.word	0x20000374
 8008234:	200004c8 	.word	0x200004c8

08008238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800823c:	bf00      	nop
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008244:	480c      	ldr	r0, [pc, #48]	; (8008278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008246:	490d      	ldr	r1, [pc, #52]	; (800827c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008248:	4a0d      	ldr	r2, [pc, #52]	; (8008280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800824a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800824c:	e002      	b.n	8008254 <LoopCopyDataInit>

0800824e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800824e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008252:	3304      	adds	r3, #4

08008254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008258:	d3f9      	bcc.n	800824e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800825a:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800825c:	4c0a      	ldr	r4, [pc, #40]	; (8008288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800825e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008260:	e001      	b.n	8008266 <LoopFillZerobss>

08008262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008264:	3204      	adds	r2, #4

08008266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008268:	d3fb      	bcc.n	8008262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800826a:	f7ff ffe5 	bl	8008238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800826e:	f003 ffe7 	bl	800c240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008272:	f7ff fb9d 	bl	80079b0 <main>
  bx lr
 8008276:	4770      	bx	lr
  ldr r0, =_sdata
 8008278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800827c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008280:	0800da38 	.word	0x0800da38
  ldr r2, =_sbss
 8008284:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8008288:	200004c4 	.word	0x200004c4

0800828c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800828c:	e7fe      	b.n	800828c <ADC1_2_IRQHandler>
	...

08008290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008294:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_Init+0x28>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a07      	ldr	r2, [pc, #28]	; (80082b8 <HAL_Init+0x28>)
 800829a:	f043 0310 	orr.w	r3, r3, #16
 800829e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082a0:	2003      	movs	r0, #3
 80082a2:	f000 fa43 	bl	800872c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082a6:	200f      	movs	r0, #15
 80082a8:	f000 f808 	bl	80082bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082ac:	f7ff fdfa 	bl	8007ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40022000 	.word	0x40022000

080082bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082c4:	4b12      	ldr	r3, [pc, #72]	; (8008310 <HAL_InitTick+0x54>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b12      	ldr	r3, [pc, #72]	; (8008314 <HAL_InitTick+0x58>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	4619      	mov	r1, r3
 80082ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fa5b 	bl	8008796 <HAL_SYSTICK_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e00e      	b.n	8008308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b0f      	cmp	r3, #15
 80082ee:	d80a      	bhi.n	8008306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082f0:	2200      	movs	r2, #0
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f8:	f000 fa23 	bl	8008742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082fc:	4a06      	ldr	r2, [pc, #24]	; (8008318 <HAL_InitTick+0x5c>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e000      	b.n	8008308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	200000b4 	.word	0x200000b4
 8008314:	200000bc 	.word	0x200000bc
 8008318:	200000b8 	.word	0x200000b8

0800831c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <HAL_IncTick+0x1c>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <HAL_IncTick+0x20>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4413      	add	r3, r2
 800832c:	4a03      	ldr	r2, [pc, #12]	; (800833c <HAL_IncTick+0x20>)
 800832e:	6013      	str	r3, [r2, #0]
}
 8008330:	bf00      	nop
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr
 8008338:	200000bc 	.word	0x200000bc
 800833c:	20000378 	.word	0x20000378

08008340 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  return uwTick;
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <HAL_GetTick+0x10>)
 8008346:	681b      	ldr	r3, [r3, #0]
}
 8008348:	4618      	mov	r0, r3
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr
 8008350:	20000378 	.word	0x20000378

08008354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800835c:	f7ff fff0 	bl	8008340 <HAL_GetTick>
 8008360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800836c:	d005      	beq.n	800837a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800836e:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <HAL_Delay+0x44>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800837a:	bf00      	nop
 800837c:	f7ff ffe0 	bl	8008340 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	429a      	cmp	r2, r3
 800838a:	d8f7      	bhi.n	800837c <HAL_Delay+0x28>
  {
  }
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200000bc 	.word	0x200000bc

0800839c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e0ed      	b.n	800858a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff fda4 	bl	8007f08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0201 	orr.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083d0:	f7ff ffb6 	bl	8008340 <HAL_GetTick>
 80083d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80083d6:	e012      	b.n	80083fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80083d8:	f7ff ffb2 	bl	8008340 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b0a      	cmp	r3, #10
 80083e4:	d90b      	bls.n	80083fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2205      	movs	r2, #5
 80083f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e0c5      	b.n	800858a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0e5      	beq.n	80083d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0202 	bic.w	r2, r2, #2
 800841a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800841c:	f7ff ff90 	bl	8008340 <HAL_GetTick>
 8008420:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008422:	e012      	b.n	800844a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008424:	f7ff ff8c 	bl	8008340 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b0a      	cmp	r3, #10
 8008430:	d90b      	bls.n	800844a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2205      	movs	r2, #5
 8008442:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e09f      	b.n	800858a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e5      	bne.n	8008424 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7e1b      	ldrb	r3, [r3, #24]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d108      	bne.n	8008472 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	e007      	b.n	8008482 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7e5b      	ldrb	r3, [r3, #25]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d108      	bne.n	800849c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e007      	b.n	80084ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	7e9b      	ldrb	r3, [r3, #26]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d108      	bne.n	80084c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0220 	orr.w	r2, r2, #32
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e007      	b.n	80084d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0220 	bic.w	r2, r2, #32
 80084d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	7edb      	ldrb	r3, [r3, #27]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d108      	bne.n	80084f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0210 	bic.w	r2, r2, #16
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e007      	b.n	8008500 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0210 	orr.w	r2, r2, #16
 80084fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7f1b      	ldrb	r3, [r3, #28]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d108      	bne.n	800851a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0208 	orr.w	r2, r2, #8
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e007      	b.n	800852a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0208 	bic.w	r2, r2, #8
 8008528:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7f5b      	ldrb	r3, [r3, #29]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d108      	bne.n	8008544 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0204 	orr.w	r2, r2, #4
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	e007      	b.n	8008554 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0204 	bic.w	r2, r2, #4
 8008552:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	ea42 0103 	orr.w	r1, r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	1e5a      	subs	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <__NVIC_SetPriorityGrouping>:
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <__NVIC_SetPriorityGrouping+0x44>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085b0:	4013      	ands	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <__NVIC_SetPriorityGrouping+0x44>)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	60d3      	str	r3, [r2, #12]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	e000ed00 	.word	0xe000ed00

080085dc <__NVIC_GetPriorityGrouping>:
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <__NVIC_GetPriorityGrouping+0x18>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	f003 0307 	and.w	r3, r3, #7
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	e000ed00 	.word	0xe000ed00

080085f8 <__NVIC_EnableIRQ>:
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	db0b      	blt.n	8008622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	f003 021f 	and.w	r2, r3, #31
 8008610:	4906      	ldr	r1, [pc, #24]	; (800862c <__NVIC_EnableIRQ+0x34>)
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	2001      	movs	r0, #1
 800861a:	fa00 f202 	lsl.w	r2, r0, r2
 800861e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr
 800862c:	e000e100 	.word	0xe000e100

08008630 <__NVIC_SetPriority>:
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800863c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008640:	2b00      	cmp	r3, #0
 8008642:	db0a      	blt.n	800865a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	490c      	ldr	r1, [pc, #48]	; (800867c <__NVIC_SetPriority+0x4c>)
 800864a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864e:	0112      	lsls	r2, r2, #4
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	440b      	add	r3, r1
 8008654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008658:	e00a      	b.n	8008670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <__NVIC_SetPriority+0x50>)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	3b04      	subs	r3, #4
 8008668:	0112      	lsls	r2, r2, #4
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	440b      	add	r3, r1
 800866e:	761a      	strb	r2, [r3, #24]
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	e000e100 	.word	0xe000e100
 8008680:	e000ed00 	.word	0xe000ed00

08008684 <NVIC_EncodePriority>:
{
 8008684:	b480      	push	{r7}
 8008686:	b089      	sub	sp, #36	; 0x24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f1c3 0307 	rsb	r3, r3, #7
 800869e:	2b04      	cmp	r3, #4
 80086a0:	bf28      	it	cs
 80086a2:	2304      	movcs	r3, #4
 80086a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	3304      	adds	r3, #4
 80086aa:	2b06      	cmp	r3, #6
 80086ac:	d902      	bls.n	80086b4 <NVIC_EncodePriority+0x30>
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	3b03      	subs	r3, #3
 80086b2:	e000      	b.n	80086b6 <NVIC_EncodePriority+0x32>
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43da      	mvns	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	401a      	ands	r2, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	fa01 f303 	lsl.w	r3, r1, r3
 80086d6:	43d9      	mvns	r1, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086dc:	4313      	orrs	r3, r2
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3724      	adds	r7, #36	; 0x24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086f8:	d301      	bcc.n	80086fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086fa:	2301      	movs	r3, #1
 80086fc:	e00f      	b.n	800871e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086fe:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <SysTick_Config+0x40>)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3b01      	subs	r3, #1
 8008704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008706:	210f      	movs	r1, #15
 8008708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800870c:	f7ff ff90 	bl	8008630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <SysTick_Config+0x40>)
 8008712:	2200      	movs	r2, #0
 8008714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008716:	4b04      	ldr	r3, [pc, #16]	; (8008728 <SysTick_Config+0x40>)
 8008718:	2207      	movs	r2, #7
 800871a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	e000e010 	.word	0xe000e010

0800872c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ff2d 	bl	8008594 <__NVIC_SetPriorityGrouping>
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008742:	b580      	push	{r7, lr}
 8008744:	b086      	sub	sp, #24
 8008746:	af00      	add	r7, sp, #0
 8008748:	4603      	mov	r3, r0
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
 800874e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008754:	f7ff ff42 	bl	80085dc <__NVIC_GetPriorityGrouping>
 8008758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	6978      	ldr	r0, [r7, #20]
 8008760:	f7ff ff90 	bl	8008684 <NVIC_EncodePriority>
 8008764:	4602      	mov	r2, r0
 8008766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800876a:	4611      	mov	r1, r2
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff ff5f 	bl	8008630 <__NVIC_SetPriority>
}
 8008772:	bf00      	nop
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	4603      	mov	r3, r0
 8008782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff ff35 	bl	80085f8 <__NVIC_EnableIRQ>
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff ffa2 	bl	80086e8 <SysTick_Config>
 80087a4:	4603      	mov	r3, r0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b085      	sub	sp, #20
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d008      	beq.n	80087d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2204      	movs	r2, #4
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e020      	b.n	800881a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 020e 	bic.w	r2, r2, #14
 80087e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008800:	2101      	movs	r1, #1
 8008802:	fa01 f202 	lsl.w	r2, r1, r2
 8008806:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr

08008824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d005      	beq.n	8008848 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2204      	movs	r2, #4
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	e0d6      	b.n	80089f6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 020e 	bic.w	r2, r2, #14
 8008856:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	4b64      	ldr	r3, [pc, #400]	; (8008a00 <HAL_DMA_Abort_IT+0x1dc>)
 8008870:	429a      	cmp	r2, r3
 8008872:	d958      	bls.n	8008926 <HAL_DMA_Abort_IT+0x102>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a62      	ldr	r2, [pc, #392]	; (8008a04 <HAL_DMA_Abort_IT+0x1e0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d04f      	beq.n	800891e <HAL_DMA_Abort_IT+0xfa>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a61      	ldr	r2, [pc, #388]	; (8008a08 <HAL_DMA_Abort_IT+0x1e4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d048      	beq.n	800891a <HAL_DMA_Abort_IT+0xf6>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a5f      	ldr	r2, [pc, #380]	; (8008a0c <HAL_DMA_Abort_IT+0x1e8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d040      	beq.n	8008914 <HAL_DMA_Abort_IT+0xf0>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a5e      	ldr	r2, [pc, #376]	; (8008a10 <HAL_DMA_Abort_IT+0x1ec>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d038      	beq.n	800890e <HAL_DMA_Abort_IT+0xea>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a5c      	ldr	r2, [pc, #368]	; (8008a14 <HAL_DMA_Abort_IT+0x1f0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d030      	beq.n	8008908 <HAL_DMA_Abort_IT+0xe4>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a5b      	ldr	r2, [pc, #364]	; (8008a18 <HAL_DMA_Abort_IT+0x1f4>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d028      	beq.n	8008902 <HAL_DMA_Abort_IT+0xde>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a52      	ldr	r2, [pc, #328]	; (8008a00 <HAL_DMA_Abort_IT+0x1dc>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d020      	beq.n	80088fc <HAL_DMA_Abort_IT+0xd8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a57      	ldr	r2, [pc, #348]	; (8008a1c <HAL_DMA_Abort_IT+0x1f8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d019      	beq.n	80088f8 <HAL_DMA_Abort_IT+0xd4>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a55      	ldr	r2, [pc, #340]	; (8008a20 <HAL_DMA_Abort_IT+0x1fc>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d012      	beq.n	80088f4 <HAL_DMA_Abort_IT+0xd0>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a54      	ldr	r2, [pc, #336]	; (8008a24 <HAL_DMA_Abort_IT+0x200>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00a      	beq.n	80088ee <HAL_DMA_Abort_IT+0xca>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a52      	ldr	r2, [pc, #328]	; (8008a28 <HAL_DMA_Abort_IT+0x204>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d102      	bne.n	80088e8 <HAL_DMA_Abort_IT+0xc4>
 80088e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088e6:	e01b      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 80088e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088ec:	e018      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 80088ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088f2:	e015      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 80088f4:	2310      	movs	r3, #16
 80088f6:	e013      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e011      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 80088fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008900:	e00e      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 8008902:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008906:	e00b      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 8008908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800890c:	e008      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 800890e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008912:	e005      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 8008914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008918:	e002      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 800891a:	2310      	movs	r3, #16
 800891c:	e000      	b.n	8008920 <HAL_DMA_Abort_IT+0xfc>
 800891e:	2301      	movs	r3, #1
 8008920:	4a42      	ldr	r2, [pc, #264]	; (8008a2c <HAL_DMA_Abort_IT+0x208>)
 8008922:	6053      	str	r3, [r2, #4]
 8008924:	e057      	b.n	80089d6 <HAL_DMA_Abort_IT+0x1b2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a36      	ldr	r2, [pc, #216]	; (8008a04 <HAL_DMA_Abort_IT+0x1e0>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d04f      	beq.n	80089d0 <HAL_DMA_Abort_IT+0x1ac>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a34      	ldr	r2, [pc, #208]	; (8008a08 <HAL_DMA_Abort_IT+0x1e4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d048      	beq.n	80089cc <HAL_DMA_Abort_IT+0x1a8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a33      	ldr	r2, [pc, #204]	; (8008a0c <HAL_DMA_Abort_IT+0x1e8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d040      	beq.n	80089c6 <HAL_DMA_Abort_IT+0x1a2>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a31      	ldr	r2, [pc, #196]	; (8008a10 <HAL_DMA_Abort_IT+0x1ec>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d038      	beq.n	80089c0 <HAL_DMA_Abort_IT+0x19c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a30      	ldr	r2, [pc, #192]	; (8008a14 <HAL_DMA_Abort_IT+0x1f0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d030      	beq.n	80089ba <HAL_DMA_Abort_IT+0x196>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2e      	ldr	r2, [pc, #184]	; (8008a18 <HAL_DMA_Abort_IT+0x1f4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d028      	beq.n	80089b4 <HAL_DMA_Abort_IT+0x190>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <HAL_DMA_Abort_IT+0x1dc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d020      	beq.n	80089ae <HAL_DMA_Abort_IT+0x18a>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2a      	ldr	r2, [pc, #168]	; (8008a1c <HAL_DMA_Abort_IT+0x1f8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d019      	beq.n	80089aa <HAL_DMA_Abort_IT+0x186>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a29      	ldr	r2, [pc, #164]	; (8008a20 <HAL_DMA_Abort_IT+0x1fc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d012      	beq.n	80089a6 <HAL_DMA_Abort_IT+0x182>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <HAL_DMA_Abort_IT+0x200>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00a      	beq.n	80089a0 <HAL_DMA_Abort_IT+0x17c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a26      	ldr	r2, [pc, #152]	; (8008a28 <HAL_DMA_Abort_IT+0x204>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d102      	bne.n	800899a <HAL_DMA_Abort_IT+0x176>
 8008994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008998:	e01b      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 800899a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800899e:	e018      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089a4:	e015      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089a6:	2310      	movs	r3, #16
 80089a8:	e013      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e011      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089b2:	e00e      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089b8:	e00b      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089be:	e008      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089c4:	e005      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ca:	e002      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089cc:	2310      	movs	r3, #16
 80089ce:	e000      	b.n	80089d2 <HAL_DMA_Abort_IT+0x1ae>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4a17      	ldr	r2, [pc, #92]	; (8008a30 <HAL_DMA_Abort_IT+0x20c>)
 80089d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
    } 
  }
  return status;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40020080 	.word	0x40020080
 8008a04:	40020008 	.word	0x40020008
 8008a08:	4002001c 	.word	0x4002001c
 8008a0c:	40020030 	.word	0x40020030
 8008a10:	40020044 	.word	0x40020044
 8008a14:	40020058 	.word	0x40020058
 8008a18:	4002006c 	.word	0x4002006c
 8008a1c:	40020408 	.word	0x40020408
 8008a20:	4002041c 	.word	0x4002041c
 8008a24:	40020430 	.word	0x40020430
 8008a28:	40020444 	.word	0x40020444
 8008a2c:	40020400 	.word	0x40020400
 8008a30:	40020000 	.word	0x40020000

08008a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b08b      	sub	sp, #44	; 0x2c
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008a42:	2300      	movs	r3, #0
 8008a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a46:	e179      	b.n	8008d3c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008a48:	2201      	movs	r2, #1
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	f040 8168 	bne.w	8008d36 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4a96      	ldr	r2, [pc, #600]	; (8008cc4 <HAL_GPIO_Init+0x290>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d05e      	beq.n	8008b2e <HAL_GPIO_Init+0xfa>
 8008a70:	4a94      	ldr	r2, [pc, #592]	; (8008cc4 <HAL_GPIO_Init+0x290>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d875      	bhi.n	8008b62 <HAL_GPIO_Init+0x12e>
 8008a76:	4a94      	ldr	r2, [pc, #592]	; (8008cc8 <HAL_GPIO_Init+0x294>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d058      	beq.n	8008b2e <HAL_GPIO_Init+0xfa>
 8008a7c:	4a92      	ldr	r2, [pc, #584]	; (8008cc8 <HAL_GPIO_Init+0x294>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d86f      	bhi.n	8008b62 <HAL_GPIO_Init+0x12e>
 8008a82:	4a92      	ldr	r2, [pc, #584]	; (8008ccc <HAL_GPIO_Init+0x298>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d052      	beq.n	8008b2e <HAL_GPIO_Init+0xfa>
 8008a88:	4a90      	ldr	r2, [pc, #576]	; (8008ccc <HAL_GPIO_Init+0x298>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d869      	bhi.n	8008b62 <HAL_GPIO_Init+0x12e>
 8008a8e:	4a90      	ldr	r2, [pc, #576]	; (8008cd0 <HAL_GPIO_Init+0x29c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d04c      	beq.n	8008b2e <HAL_GPIO_Init+0xfa>
 8008a94:	4a8e      	ldr	r2, [pc, #568]	; (8008cd0 <HAL_GPIO_Init+0x29c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d863      	bhi.n	8008b62 <HAL_GPIO_Init+0x12e>
 8008a9a:	4a8e      	ldr	r2, [pc, #568]	; (8008cd4 <HAL_GPIO_Init+0x2a0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d046      	beq.n	8008b2e <HAL_GPIO_Init+0xfa>
 8008aa0:	4a8c      	ldr	r2, [pc, #560]	; (8008cd4 <HAL_GPIO_Init+0x2a0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d85d      	bhi.n	8008b62 <HAL_GPIO_Init+0x12e>
 8008aa6:	2b12      	cmp	r3, #18
 8008aa8:	d82a      	bhi.n	8008b00 <HAL_GPIO_Init+0xcc>
 8008aaa:	2b12      	cmp	r3, #18
 8008aac:	d859      	bhi.n	8008b62 <HAL_GPIO_Init+0x12e>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <HAL_GPIO_Init+0x80>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008b2f 	.word	0x08008b2f
 8008ab8:	08008b09 	.word	0x08008b09
 8008abc:	08008b1b 	.word	0x08008b1b
 8008ac0:	08008b5d 	.word	0x08008b5d
 8008ac4:	08008b63 	.word	0x08008b63
 8008ac8:	08008b63 	.word	0x08008b63
 8008acc:	08008b63 	.word	0x08008b63
 8008ad0:	08008b63 	.word	0x08008b63
 8008ad4:	08008b63 	.word	0x08008b63
 8008ad8:	08008b63 	.word	0x08008b63
 8008adc:	08008b63 	.word	0x08008b63
 8008ae0:	08008b63 	.word	0x08008b63
 8008ae4:	08008b63 	.word	0x08008b63
 8008ae8:	08008b63 	.word	0x08008b63
 8008aec:	08008b63 	.word	0x08008b63
 8008af0:	08008b63 	.word	0x08008b63
 8008af4:	08008b63 	.word	0x08008b63
 8008af8:	08008b11 	.word	0x08008b11
 8008afc:	08008b25 	.word	0x08008b25
 8008b00:	4a75      	ldr	r2, [pc, #468]	; (8008cd8 <HAL_GPIO_Init+0x2a4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008b06:	e02c      	b.n	8008b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	623b      	str	r3, [r7, #32]
          break;
 8008b0e:	e029      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	3304      	adds	r3, #4
 8008b16:	623b      	str	r3, [r7, #32]
          break;
 8008b18:	e024      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	623b      	str	r3, [r7, #32]
          break;
 8008b22:	e01f      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	623b      	str	r3, [r7, #32]
          break;
 8008b2c:	e01a      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008b36:	2304      	movs	r3, #4
 8008b38:	623b      	str	r3, [r7, #32]
          break;
 8008b3a:	e013      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d105      	bne.n	8008b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008b44:	2308      	movs	r3, #8
 8008b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	611a      	str	r2, [r3, #16]
          break;
 8008b4e:	e009      	b.n	8008b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008b50:	2308      	movs	r3, #8
 8008b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	615a      	str	r2, [r3, #20]
          break;
 8008b5a:	e003      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	623b      	str	r3, [r7, #32]
          break;
 8008b60:	e000      	b.n	8008b64 <HAL_GPIO_Init+0x130>
          break;
 8008b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	d801      	bhi.n	8008b6e <HAL_GPIO_Init+0x13a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	e001      	b.n	8008b72 <HAL_GPIO_Init+0x13e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3304      	adds	r3, #4
 8008b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2bff      	cmp	r3, #255	; 0xff
 8008b78:	d802      	bhi.n	8008b80 <HAL_GPIO_Init+0x14c>
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	e002      	b.n	8008b86 <HAL_GPIO_Init+0x152>
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	3b08      	subs	r3, #8
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	210f      	movs	r1, #15
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	fa01 f303 	lsl.w	r3, r1, r3
 8008b94:	43db      	mvns	r3, r3
 8008b96:	401a      	ands	r2, r3
 8008b98:	6a39      	ldr	r1, [r7, #32]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80c1 	beq.w	8008d36 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008bb4:	4b49      	ldr	r3, [pc, #292]	; (8008cdc <HAL_GPIO_Init+0x2a8>)
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	4a48      	ldr	r2, [pc, #288]	; (8008cdc <HAL_GPIO_Init+0x2a8>)
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	6193      	str	r3, [r2, #24]
 8008bc0:	4b46      	ldr	r3, [pc, #280]	; (8008cdc <HAL_GPIO_Init+0x2a8>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	60bb      	str	r3, [r7, #8]
 8008bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008bcc:	4a44      	ldr	r2, [pc, #272]	; (8008ce0 <HAL_GPIO_Init+0x2ac>)
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	089b      	lsrs	r3, r3, #2
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	220f      	movs	r2, #15
 8008be4:	fa02 f303 	lsl.w	r3, r2, r3
 8008be8:	43db      	mvns	r3, r3
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a3c      	ldr	r2, [pc, #240]	; (8008ce4 <HAL_GPIO_Init+0x2b0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d01f      	beq.n	8008c38 <HAL_GPIO_Init+0x204>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a3b      	ldr	r2, [pc, #236]	; (8008ce8 <HAL_GPIO_Init+0x2b4>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d019      	beq.n	8008c34 <HAL_GPIO_Init+0x200>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a3a      	ldr	r2, [pc, #232]	; (8008cec <HAL_GPIO_Init+0x2b8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <HAL_GPIO_Init+0x1fc>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a39      	ldr	r2, [pc, #228]	; (8008cf0 <HAL_GPIO_Init+0x2bc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00d      	beq.n	8008c2c <HAL_GPIO_Init+0x1f8>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a38      	ldr	r2, [pc, #224]	; (8008cf4 <HAL_GPIO_Init+0x2c0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d007      	beq.n	8008c28 <HAL_GPIO_Init+0x1f4>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a37      	ldr	r2, [pc, #220]	; (8008cf8 <HAL_GPIO_Init+0x2c4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d101      	bne.n	8008c24 <HAL_GPIO_Init+0x1f0>
 8008c20:	2305      	movs	r3, #5
 8008c22:	e00a      	b.n	8008c3a <HAL_GPIO_Init+0x206>
 8008c24:	2306      	movs	r3, #6
 8008c26:	e008      	b.n	8008c3a <HAL_GPIO_Init+0x206>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	e006      	b.n	8008c3a <HAL_GPIO_Init+0x206>
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e004      	b.n	8008c3a <HAL_GPIO_Init+0x206>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e002      	b.n	8008c3a <HAL_GPIO_Init+0x206>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <HAL_GPIO_Init+0x206>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	f002 0203 	and.w	r2, r2, #3
 8008c40:	0092      	lsls	r2, r2, #2
 8008c42:	4093      	lsls	r3, r2
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008c4a:	4925      	ldr	r1, [pc, #148]	; (8008ce0 <HAL_GPIO_Init+0x2ac>)
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	089b      	lsrs	r3, r3, #2
 8008c50:	3302      	adds	r3, #2
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008c64:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	4924      	ldr	r1, [pc, #144]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	608b      	str	r3, [r1, #8]
 8008c70:	e006      	b.n	8008c80 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008c72:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	4920      	ldr	r1, [pc, #128]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	491a      	ldr	r1, [pc, #104]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60cb      	str	r3, [r1, #12]
 8008c98:	e006      	b.n	8008ca8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008c9a:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	4916      	ldr	r1, [pc, #88]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d025      	beq.n	8008d00 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008cb4:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	4910      	ldr	r1, [pc, #64]	; (8008cfc <HAL_GPIO_Init+0x2c8>)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	604b      	str	r3, [r1, #4]
 8008cc0:	e025      	b.n	8008d0e <HAL_GPIO_Init+0x2da>
 8008cc2:	bf00      	nop
 8008cc4:	10320000 	.word	0x10320000
 8008cc8:	10310000 	.word	0x10310000
 8008ccc:	10220000 	.word	0x10220000
 8008cd0:	10210000 	.word	0x10210000
 8008cd4:	10120000 	.word	0x10120000
 8008cd8:	10110000 	.word	0x10110000
 8008cdc:	40021000 	.word	0x40021000
 8008ce0:	40010000 	.word	0x40010000
 8008ce4:	40010800 	.word	0x40010800
 8008ce8:	40010c00 	.word	0x40010c00
 8008cec:	40011000 	.word	0x40011000
 8008cf0:	40011400 	.word	0x40011400
 8008cf4:	40011800 	.word	0x40011800
 8008cf8:	40011c00 	.word	0x40011c00
 8008cfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008d00:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <HAL_GPIO_Init+0x324>)
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	43db      	mvns	r3, r3
 8008d08:	4913      	ldr	r1, [pc, #76]	; (8008d58 <HAL_GPIO_Init+0x324>)
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <HAL_GPIO_Init+0x324>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	490e      	ldr	r1, [pc, #56]	; (8008d58 <HAL_GPIO_Init+0x324>)
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]
 8008d26:	e006      	b.n	8008d36 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008d28:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <HAL_GPIO_Init+0x324>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	43db      	mvns	r3, r3
 8008d30:	4909      	ldr	r1, [pc, #36]	; (8008d58 <HAL_GPIO_Init+0x324>)
 8008d32:	4013      	ands	r3, r2
 8008d34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	3301      	adds	r3, #1
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	fa22 f303 	lsr.w	r3, r2, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f47f ae7e 	bne.w	8008a48 <HAL_GPIO_Init+0x14>
  }
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	372c      	adds	r7, #44	; 0x2c
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr
 8008d58:	40010400 	.word	0x40010400

08008d5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b089      	sub	sp, #36	; 0x24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008d6a:	e0a6      	b.n	8008eba <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	4013      	ands	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8099 	beq.w	8008eb4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008d82:	4a54      	ldr	r2, [pc, #336]	; (8008ed4 <HAL_GPIO_DeInit+0x178>)
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	3302      	adds	r3, #2
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	220f      	movs	r2, #15
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4013      	ands	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a4c      	ldr	r2, [pc, #304]	; (8008ed8 <HAL_GPIO_DeInit+0x17c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d01f      	beq.n	8008dec <HAL_GPIO_DeInit+0x90>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a4b      	ldr	r2, [pc, #300]	; (8008edc <HAL_GPIO_DeInit+0x180>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d019      	beq.n	8008de8 <HAL_GPIO_DeInit+0x8c>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a4a      	ldr	r2, [pc, #296]	; (8008ee0 <HAL_GPIO_DeInit+0x184>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d013      	beq.n	8008de4 <HAL_GPIO_DeInit+0x88>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a49      	ldr	r2, [pc, #292]	; (8008ee4 <HAL_GPIO_DeInit+0x188>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00d      	beq.n	8008de0 <HAL_GPIO_DeInit+0x84>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a48      	ldr	r2, [pc, #288]	; (8008ee8 <HAL_GPIO_DeInit+0x18c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d007      	beq.n	8008ddc <HAL_GPIO_DeInit+0x80>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a47      	ldr	r2, [pc, #284]	; (8008eec <HAL_GPIO_DeInit+0x190>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d101      	bne.n	8008dd8 <HAL_GPIO_DeInit+0x7c>
 8008dd4:	2305      	movs	r3, #5
 8008dd6:	e00a      	b.n	8008dee <HAL_GPIO_DeInit+0x92>
 8008dd8:	2306      	movs	r3, #6
 8008dda:	e008      	b.n	8008dee <HAL_GPIO_DeInit+0x92>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	e006      	b.n	8008dee <HAL_GPIO_DeInit+0x92>
 8008de0:	2303      	movs	r3, #3
 8008de2:	e004      	b.n	8008dee <HAL_GPIO_DeInit+0x92>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e002      	b.n	8008dee <HAL_GPIO_DeInit+0x92>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e000      	b.n	8008dee <HAL_GPIO_DeInit+0x92>
 8008dec:	2300      	movs	r3, #0
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	f002 0203 	and.w	r2, r2, #3
 8008df4:	0092      	lsls	r2, r2, #2
 8008df6:	4093      	lsls	r3, r2
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d132      	bne.n	8008e64 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008dfe:	4b3c      	ldr	r3, [pc, #240]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	43db      	mvns	r3, r3
 8008e06:	493a      	ldr	r1, [pc, #232]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008e0c:	4b38      	ldr	r3, [pc, #224]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	43db      	mvns	r3, r3
 8008e14:	4936      	ldr	r1, [pc, #216]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008e1a:	4b35      	ldr	r3, [pc, #212]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	43db      	mvns	r3, r3
 8008e22:	4933      	ldr	r1, [pc, #204]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008e28:	4b31      	ldr	r3, [pc, #196]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	492f      	ldr	r1, [pc, #188]	; (8008ef0 <HAL_GPIO_DeInit+0x194>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	220f      	movs	r2, #15
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008e46:	4a23      	ldr	r2, [pc, #140]	; (8008ed4 <HAL_GPIO_DeInit+0x178>)
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	43da      	mvns	r2, r3
 8008e56:	481f      	ldr	r0, [pc, #124]	; (8008ed4 <HAL_GPIO_DeInit+0x178>)
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	089b      	lsrs	r3, r3, #2
 8008e5c:	400a      	ands	r2, r1
 8008e5e:	3302      	adds	r3, #2
 8008e60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2bff      	cmp	r3, #255	; 0xff
 8008e68:	d801      	bhi.n	8008e6e <HAL_GPIO_DeInit+0x112>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	e001      	b.n	8008e72 <HAL_GPIO_DeInit+0x116>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	3304      	adds	r3, #4
 8008e72:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	2bff      	cmp	r3, #255	; 0xff
 8008e78:	d802      	bhi.n	8008e80 <HAL_GPIO_DeInit+0x124>
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	e002      	b.n	8008e86 <HAL_GPIO_DeInit+0x12a>
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3b08      	subs	r3, #8
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	210f      	movs	r1, #15
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	fa01 f303 	lsl.w	r3, r1, r3
 8008e94:	43db      	mvns	r3, r3
 8008e96:	401a      	ands	r2, r3
 8008e98:	2104      	movs	r1, #4
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	43db      	mvns	r3, r3
 8008eae:	401a      	ands	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f47f af52 	bne.w	8008d6c <HAL_GPIO_DeInit+0x10>
  }
}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	3724      	adds	r7, #36	; 0x24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr
 8008ed4:	40010000 	.word	0x40010000
 8008ed8:	40010800 	.word	0x40010800
 8008edc:	40010c00 	.word	0x40010c00
 8008ee0:	40011000 	.word	0x40011000
 8008ee4:	40011400 	.word	0x40011400
 8008ee8:	40011800 	.word	0x40011800
 8008eec:	40011c00 	.word	0x40011c00
 8008ef0:	40010400 	.word	0x40010400

08008ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	887b      	ldrh	r3, [r7, #2]
 8008f06:	4013      	ands	r3, r2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e001      	b.n	8008f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr

08008f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	807b      	strh	r3, [r7, #2]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f32:	787b      	ldrb	r3, [r7, #1]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f38:	887a      	ldrh	r2, [r7, #2]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008f3e:	e003      	b.n	8008f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008f40:	887b      	ldrh	r3, [r7, #2]
 8008f42:	041a      	lsls	r2, r3, #16
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	611a      	str	r2, [r3, #16]
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f64:	887a      	ldrh	r2, [r7, #2]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	041a      	lsls	r2, r3, #16
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	43d9      	mvns	r1, r3
 8008f70:	887b      	ldrh	r3, [r7, #2]
 8008f72:	400b      	ands	r3, r1
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	611a      	str	r2, [r3, #16]
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr

08008f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e12b      	b.n	80091ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fe fff8 	bl	8007fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2224      	movs	r2, #36	; 0x24
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0201 	bic.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008fe8:	f001 fdb8 	bl	800ab5c <HAL_RCC_GetPCLK1Freq>
 8008fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	4a81      	ldr	r2, [pc, #516]	; (80091f8 <HAL_I2C_Init+0x274>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d807      	bhi.n	8009008 <HAL_I2C_Init+0x84>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a80      	ldr	r2, [pc, #512]	; (80091fc <HAL_I2C_Init+0x278>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	bf94      	ite	ls
 8009000:	2301      	movls	r3, #1
 8009002:	2300      	movhi	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e006      	b.n	8009016 <HAL_I2C_Init+0x92>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4a7d      	ldr	r2, [pc, #500]	; (8009200 <HAL_I2C_Init+0x27c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	bf94      	ite	ls
 8009010:	2301      	movls	r3, #1
 8009012:	2300      	movhi	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e0e7      	b.n	80091ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4a78      	ldr	r2, [pc, #480]	; (8009204 <HAL_I2C_Init+0x280>)
 8009022:	fba2 2303 	umull	r2, r3, r2, r3
 8009026:	0c9b      	lsrs	r3, r3, #18
 8009028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	430a      	orrs	r2, r1
 800903c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4a6a      	ldr	r2, [pc, #424]	; (80091f8 <HAL_I2C_Init+0x274>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d802      	bhi.n	8009058 <HAL_I2C_Init+0xd4>
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	3301      	adds	r3, #1
 8009056:	e009      	b.n	800906c <HAL_I2C_Init+0xe8>
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	4a69      	ldr	r2, [pc, #420]	; (8009208 <HAL_I2C_Init+0x284>)
 8009064:	fba2 2303 	umull	r2, r3, r2, r3
 8009068:	099b      	lsrs	r3, r3, #6
 800906a:	3301      	adds	r3, #1
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	430b      	orrs	r3, r1
 8009072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800907e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	495c      	ldr	r1, [pc, #368]	; (80091f8 <HAL_I2C_Init+0x274>)
 8009088:	428b      	cmp	r3, r1
 800908a:	d819      	bhi.n	80090c0 <HAL_I2C_Init+0x13c>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	1e59      	subs	r1, r3, #1
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	fbb1 f3f3 	udiv	r3, r1, r3
 800909a:	1c59      	adds	r1, r3, #1
 800909c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090a0:	400b      	ands	r3, r1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <HAL_I2C_Init+0x138>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1e59      	subs	r1, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80090b4:	3301      	adds	r3, #1
 80090b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ba:	e051      	b.n	8009160 <HAL_I2C_Init+0x1dc>
 80090bc:	2304      	movs	r3, #4
 80090be:	e04f      	b.n	8009160 <HAL_I2C_Init+0x1dc>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d111      	bne.n	80090ec <HAL_I2C_Init+0x168>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	1e58      	subs	r0, r3, #1
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6859      	ldr	r1, [r3, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	440b      	add	r3, r1
 80090d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80090da:	3301      	adds	r3, #1
 80090dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bf0c      	ite	eq
 80090e4:	2301      	moveq	r3, #1
 80090e6:	2300      	movne	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	e012      	b.n	8009112 <HAL_I2C_Init+0x18e>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	1e58      	subs	r0, r3, #1
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6859      	ldr	r1, [r3, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	0099      	lsls	r1, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009102:	3301      	adds	r3, #1
 8009104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009108:	2b00      	cmp	r3, #0
 800910a:	bf0c      	ite	eq
 800910c:	2301      	moveq	r3, #1
 800910e:	2300      	movne	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <HAL_I2C_Init+0x196>
 8009116:	2301      	movs	r3, #1
 8009118:	e022      	b.n	8009160 <HAL_I2C_Init+0x1dc>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10e      	bne.n	8009140 <HAL_I2C_Init+0x1bc>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1e58      	subs	r0, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6859      	ldr	r1, [r3, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	440b      	add	r3, r1
 8009130:	fbb0 f3f3 	udiv	r3, r0, r3
 8009134:	3301      	adds	r3, #1
 8009136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800913a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800913e:	e00f      	b.n	8009160 <HAL_I2C_Init+0x1dc>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	1e58      	subs	r0, r3, #1
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6859      	ldr	r1, [r3, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	0099      	lsls	r1, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	fbb0 f3f3 	udiv	r3, r0, r3
 8009156:	3301      	adds	r3, #1
 8009158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800915c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	6809      	ldr	r1, [r1, #0]
 8009164:	4313      	orrs	r3, r2
 8009166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69da      	ldr	r2, [r3, #28]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800918e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6911      	ldr	r1, [r2, #16]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	68d2      	ldr	r2, [r2, #12]
 800919a:	4311      	orrs	r1, r2
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	430b      	orrs	r3, r1
 80091a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	000186a0 	.word	0x000186a0
 80091fc:	001e847f 	.word	0x001e847f
 8009200:	003d08ff 	.word	0x003d08ff
 8009204:	431bde83 	.word	0x431bde83
 8009208:	10624dd3 	.word	0x10624dd3

0800920c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e021      	b.n	8009262 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2224      	movs	r2, #36	; 0x24
 8009222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0201 	bic.w	r2, r2, #1
 8009234:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7fe fef0 	bl	800801c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	607a      	str	r2, [r7, #4]
 8009276:	461a      	mov	r2, r3
 8009278:	460b      	mov	r3, r1
 800927a:	817b      	strh	r3, [r7, #10]
 800927c:	4613      	mov	r3, r2
 800927e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009280:	f7ff f85e 	bl	8008340 <HAL_GetTick>
 8009284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b20      	cmp	r3, #32
 8009290:	f040 80e0 	bne.w	8009454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2319      	movs	r3, #25
 800929a:	2201      	movs	r2, #1
 800929c:	4970      	ldr	r1, [pc, #448]	; (8009460 <HAL_I2C_Master_Transmit+0x1f4>)
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fe5c 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80092aa:	2302      	movs	r3, #2
 80092ac:	e0d3      	b.n	8009456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_I2C_Master_Transmit+0x50>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e0cc      	b.n	8009456 <HAL_I2C_Master_Transmit+0x1ea>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d007      	beq.n	80092e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0201 	orr.w	r2, r2, #1
 80092e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2221      	movs	r2, #33	; 0x21
 80092f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2210      	movs	r2, #16
 80092fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	893a      	ldrh	r2, [r7, #8]
 8009312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4a50      	ldr	r2, [pc, #320]	; (8009464 <HAL_I2C_Master_Transmit+0x1f8>)
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009324:	8979      	ldrh	r1, [r7, #10]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	6a3a      	ldr	r2, [r7, #32]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fc16 	bl	8009b5c <I2C_MasterRequestWrite>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e08d      	b.n	8009456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009350:	e066      	b.n	8009420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	6a39      	ldr	r1, [r7, #32]
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 ff1a 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00d      	beq.n	800937e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	2b04      	cmp	r3, #4
 8009368:	d107      	bne.n	800937a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e06b      	b.n	8009456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d11b      	bne.n	80093f4 <HAL_I2C_Master_Transmit+0x188>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d017      	beq.n	80093f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093de:	b29b      	uxth	r3, r3
 80093e0:	3b01      	subs	r3, #1
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ec:	3b01      	subs	r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	6a39      	ldr	r1, [r7, #32]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 ff11 	bl	800a220 <I2C_WaitOnBTFFlagUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00d      	beq.n	8009420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009408:	2b04      	cmp	r3, #4
 800940a:	d107      	bne.n	800941c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800941a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e01a      	b.n	8009456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d194      	bne.n	8009352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2220      	movs	r2, #32
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	e000      	b.n	8009456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009454:	2302      	movs	r3, #2
  }
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	00100002 	.word	0x00100002
 8009464:	ffff0000 	.word	0xffff0000

08009468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af02      	add	r7, sp, #8
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	4603      	mov	r3, r0
 8009478:	817b      	strh	r3, [r7, #10]
 800947a:	460b      	mov	r3, r1
 800947c:	813b      	strh	r3, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009482:	f7fe ff5d 	bl	8008340 <HAL_GetTick>
 8009486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b20      	cmp	r3, #32
 8009492:	f040 80d9 	bne.w	8009648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	2319      	movs	r3, #25
 800949c:	2201      	movs	r2, #1
 800949e:	496d      	ldr	r1, [pc, #436]	; (8009654 <HAL_I2C_Mem_Write+0x1ec>)
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fd5b 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80094ac:	2302      	movs	r3, #2
 80094ae:	e0cc      	b.n	800964a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <HAL_I2C_Mem_Write+0x56>
 80094ba:	2302      	movs	r3, #2
 80094bc:	e0c5      	b.n	800964a <HAL_I2C_Mem_Write+0x1e2>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d007      	beq.n	80094e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0201 	orr.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2221      	movs	r2, #33	; 0x21
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2240      	movs	r2, #64	; 0x40
 8009500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a3a      	ldr	r2, [r7, #32]
 800950e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a4d      	ldr	r2, [pc, #308]	; (8009658 <HAL_I2C_Mem_Write+0x1f0>)
 8009524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009526:	88f8      	ldrh	r0, [r7, #6]
 8009528:	893a      	ldrh	r2, [r7, #8]
 800952a:	8979      	ldrh	r1, [r7, #10]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	4603      	mov	r3, r0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fb92 	bl	8009c60 <I2C_RequestMemoryWrite>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d052      	beq.n	80095e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e081      	b.n	800964a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fe20 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00d      	beq.n	8009572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	2b04      	cmp	r3, #4
 800955c:	d107      	bne.n	800956e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800956c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e06b      	b.n	800964a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958c:	3b01      	subs	r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d11b      	bne.n	80095e8 <HAL_I2C_Mem_Write+0x180>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d017      	beq.n	80095e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	781a      	ldrb	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095de:	b29b      	uxth	r3, r3
 80095e0:	3b01      	subs	r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1aa      	bne.n	8009546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 fe13 	bl	800a220 <I2C_WaitOnBTFFlagUntilTimeout>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00d      	beq.n	800961c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	2b04      	cmp	r3, #4
 8009606:	d107      	bne.n	8009618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e016      	b.n	800964a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800962a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2220      	movs	r2, #32
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	e000      	b.n	800964a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009648:	2302      	movs	r3, #2
  }
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	00100002 	.word	0x00100002
 8009658:	ffff0000 	.word	0xffff0000

0800965c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08c      	sub	sp, #48	; 0x30
 8009660:	af02      	add	r7, sp, #8
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	461a      	mov	r2, r3
 800966a:	4603      	mov	r3, r0
 800966c:	817b      	strh	r3, [r7, #10]
 800966e:	460b      	mov	r3, r1
 8009670:	813b      	strh	r3, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800967a:	f7fe fe61 	bl	8008340 <HAL_GetTick>
 800967e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b20      	cmp	r3, #32
 800968a:	f040 8244 	bne.w	8009b16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	2319      	movs	r3, #25
 8009694:	2201      	movs	r2, #1
 8009696:	4982      	ldr	r1, [pc, #520]	; (80098a0 <HAL_I2C_Mem_Read+0x244>)
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fc5f 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
 80096a6:	e237      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d101      	bne.n	80096b6 <HAL_I2C_Mem_Read+0x5a>
 80096b2:	2302      	movs	r3, #2
 80096b4:	e230      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d007      	beq.n	80096dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2222      	movs	r2, #34	; 0x22
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2240      	movs	r2, #64	; 0x40
 80096f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800970c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009712:	b29a      	uxth	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4a62      	ldr	r2, [pc, #392]	; (80098a4 <HAL_I2C_Mem_Read+0x248>)
 800971c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800971e:	88f8      	ldrh	r0, [r7, #6]
 8009720:	893a      	ldrh	r2, [r7, #8]
 8009722:	8979      	ldrh	r1, [r7, #10]
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	4603      	mov	r3, r0
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 fb2c 	bl	8009d8c <I2C_RequestMemoryRead>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e1ec      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	d113      	bne.n	800976e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	61fb      	str	r3, [r7, #28]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e1c0      	b.n	8009af0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009772:	2b01      	cmp	r3, #1
 8009774:	d11e      	bne.n	80097b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009784:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009786:	b672      	cpsid	i
}
 8009788:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800978a:	2300      	movs	r3, #0
 800978c:	61bb      	str	r3, [r7, #24]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	61bb      	str	r3, [r7, #24]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80097b0:	b662      	cpsie	i
}
 80097b2:	e035      	b.n	8009820 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d11e      	bne.n	80097fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80097cc:	b672      	cpsid	i
}
 80097ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80097f6:	b662      	cpsie	i
}
 80097f8:	e012      	b.n	8009820 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009808:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	613b      	str	r3, [r7, #16]
 800981e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009820:	e166      	b.n	8009af0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009826:	2b03      	cmp	r3, #3
 8009828:	f200 811f 	bhi.w	8009a6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009830:	2b01      	cmp	r3, #1
 8009832:	d123      	bne.n	800987c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fd39 	bl	800a2b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e167      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691a      	ldr	r2, [r3, #16]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009864:	3b01      	subs	r3, #1
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	855a      	strh	r2, [r3, #42]	; 0x2a
 800987a:	e139      	b.n	8009af0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009880:	2b02      	cmp	r3, #2
 8009882:	d152      	bne.n	800992a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	2200      	movs	r2, #0
 800988c:	4906      	ldr	r1, [pc, #24]	; (80098a8 <HAL_I2C_Mem_Read+0x24c>)
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 fb64 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e13c      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
 800989e:	bf00      	nop
 80098a0:	00100002 	.word	0x00100002
 80098a4:	ffff0000 	.word	0xffff0000
 80098a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80098ac:	b672      	cpsid	i
}
 80098ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691a      	ldr	r2, [r3, #16]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098dc:	3b01      	subs	r3, #1
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80098f2:	b662      	cpsie	i
}
 80098f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	b2d2      	uxtb	r2, r2
 8009902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009928:	e0e2      	b.n	8009af0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009930:	2200      	movs	r2, #0
 8009932:	497b      	ldr	r1, [pc, #492]	; (8009b20 <HAL_I2C_Mem_Read+0x4c4>)
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fb11 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e0e9      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009954:	b672      	cpsid	i
}
 8009956:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	691a      	ldr	r2, [r3, #16]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009974:	3b01      	subs	r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800998a:	4b66      	ldr	r3, [pc, #408]	; (8009b24 <HAL_I2C_Mem_Read+0x4c8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	08db      	lsrs	r3, r3, #3
 8009990:	4a65      	ldr	r2, [pc, #404]	; (8009b28 <HAL_I2C_Mem_Read+0x4cc>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	0a1a      	lsrs	r2, r3, #8
 8009998:	4613      	mov	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	00da      	lsls	r2, r3, #3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d118      	bne.n	80099e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80099d2:	b662      	cpsie	i
}
 80099d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e09a      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d1d9      	bne.n	80099a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009a32:	b662      	cpsie	i
}
 8009a34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	b2d2      	uxtb	r2, r2
 8009a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	3b01      	subs	r3, #1
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a68:	e042      	b.n	8009af0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fc1e 	bl	800a2b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e04c      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	b2d2      	uxtb	r2, r2
 8009a8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	f003 0304 	and.w	r3, r3, #4
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d118      	bne.n	8009af0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f47f ae94 	bne.w	8009822 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	e000      	b.n	8009b18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009b16:	2302      	movs	r3, #2
  }
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3728      	adds	r7, #40	; 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	00010004 	.word	0x00010004
 8009b24:	200000b4 	.word	0x200000b4
 8009b28:	14f8b589 	.word	0x14f8b589

08009b2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3a:	b2db      	uxtb	r3, r3
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr

08009b46 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d006      	beq.n	8009b86 <I2C_MasterRequestWrite+0x2a>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d003      	beq.n	8009b86 <I2C_MasterRequestWrite+0x2a>
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b84:	d108      	bne.n	8009b98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	e00b      	b.n	8009bb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9c:	2b12      	cmp	r3, #18
 8009b9e:	d107      	bne.n	8009bb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f9cd 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00d      	beq.n	8009be4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bd6:	d103      	bne.n	8009be0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e035      	b.n	8009c50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bec:	d108      	bne.n	8009c00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009bee:	897b      	ldrh	r3, [r7, #10]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009bfc:	611a      	str	r2, [r3, #16]
 8009bfe:	e01b      	b.n	8009c38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009c00:	897b      	ldrh	r3, [r7, #10]
 8009c02:	11db      	asrs	r3, r3, #7
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0306 	and.w	r3, r3, #6
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f063 030f 	orn	r3, r3, #15
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	490e      	ldr	r1, [pc, #56]	; (8009c58 <I2C_MasterRequestWrite+0xfc>)
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 fa16 	bl	800a050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e010      	b.n	8009c50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c2e:	897b      	ldrh	r3, [r7, #10]
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4907      	ldr	r1, [pc, #28]	; (8009c5c <I2C_MasterRequestWrite+0x100>)
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 fa06 	bl	800a050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	00010008 	.word	0x00010008
 8009c5c:	00010002 	.word	0x00010002

08009c60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	817b      	strh	r3, [r7, #10]
 8009c72:	460b      	mov	r3, r1
 8009c74:	813b      	strh	r3, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f960 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00d      	beq.n	8009cbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb0:	d103      	bne.n	8009cba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e05f      	b.n	8009d7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cbe:	897b      	ldrh	r3, [r7, #10]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ccc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	492d      	ldr	r1, [pc, #180]	; (8009d88 <I2C_RequestMemoryWrite+0x128>)
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f9bb 	bl	800a050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e04c      	b.n	8009d7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfc:	6a39      	ldr	r1, [r7, #32]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fa46 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00d      	beq.n	8009d26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d107      	bne.n	8009d22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e02b      	b.n	8009d7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d105      	bne.n	8009d38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d2c:	893b      	ldrh	r3, [r7, #8]
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	611a      	str	r2, [r3, #16]
 8009d36:	e021      	b.n	8009d7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d38:	893b      	ldrh	r3, [r7, #8]
 8009d3a:	0a1b      	lsrs	r3, r3, #8
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d48:	6a39      	ldr	r1, [r7, #32]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 fa20 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00d      	beq.n	8009d72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	d107      	bne.n	8009d6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e005      	b.n	8009d7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d72:	893b      	ldrh	r3, [r7, #8]
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	00010002 	.word	0x00010002

08009d8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	817b      	strh	r3, [r7, #10]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	813b      	strh	r3, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009db4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 f8c2 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00d      	beq.n	8009dfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dec:	d103      	bne.n	8009df6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e0aa      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009dfa:	897b      	ldrh	r3, [r7, #10]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	6a3a      	ldr	r2, [r7, #32]
 8009e0e:	4952      	ldr	r1, [pc, #328]	; (8009f58 <I2C_RequestMemoryRead+0x1cc>)
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f91d 	bl	800a050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e097      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e38:	6a39      	ldr	r1, [r7, #32]
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 f9a8 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00d      	beq.n	8009e62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d107      	bne.n	8009e5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e076      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d105      	bne.n	8009e74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e68:	893b      	ldrh	r3, [r7, #8]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	611a      	str	r2, [r3, #16]
 8009e72:	e021      	b.n	8009eb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e74:	893b      	ldrh	r3, [r7, #8]
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e84:	6a39      	ldr	r1, [r7, #32]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f982 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00d      	beq.n	8009eae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	2b04      	cmp	r3, #4
 8009e98:	d107      	bne.n	8009eaa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e050      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009eae:	893b      	ldrh	r3, [r7, #8]
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eba:	6a39      	ldr	r1, [r7, #32]
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 f967 	bl	800a190 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00d      	beq.n	8009ee4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d107      	bne.n	8009ee0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ede:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e035      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f82b 	bl	8009f5c <I2C_WaitOnFlagUntilTimeout>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00d      	beq.n	8009f28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1a:	d103      	bne.n	8009f24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e013      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f28:	897b      	ldrh	r3, [r7, #10]
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f043 0301 	orr.w	r3, r3, #1
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	6a3a      	ldr	r2, [r7, #32]
 8009f3c:	4906      	ldr	r1, [pc, #24]	; (8009f58 <I2C_RequestMemoryRead+0x1cc>)
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 f886 	bl	800a050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	00010002 	.word	0x00010002

08009f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f6c:	e048      	b.n	800a000 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f74:	d044      	beq.n	800a000 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f76:	f7fe f9e3 	bl	8008340 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d302      	bcc.n	8009f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d139      	bne.n	800a000 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	0c1b      	lsrs	r3, r3, #16
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d10d      	bne.n	8009fb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	43da      	mvns	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bf0c      	ite	eq
 8009fa8:	2301      	moveq	r3, #1
 8009faa:	2300      	movne	r3, #0
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	e00c      	b.n	8009fcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	43da      	mvns	r2, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2301      	moveq	r3, #1
 8009fc6:	2300      	movne	r3, #0
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d116      	bne.n	800a000 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	f043 0220 	orr.w	r2, r3, #32
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e023      	b.n	800a048 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	0c1b      	lsrs	r3, r3, #16
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b01      	cmp	r3, #1
 800a008:	d10d      	bne.n	800a026 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	43da      	mvns	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	4013      	ands	r3, r2
 800a016:	b29b      	uxth	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	bf0c      	ite	eq
 800a01c:	2301      	moveq	r3, #1
 800a01e:	2300      	movne	r3, #0
 800a020:	b2db      	uxtb	r3, r3
 800a022:	461a      	mov	r2, r3
 800a024:	e00c      	b.n	800a040 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	43da      	mvns	r2, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4013      	ands	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	bf0c      	ite	eq
 800a038:	2301      	moveq	r3, #1
 800a03a:	2300      	movne	r3, #0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	429a      	cmp	r2, r3
 800a044:	d093      	beq.n	8009f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a05e:	e071      	b.n	800a144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a06e:	d123      	bne.n	800a0b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a07e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	f043 0204 	orr.w	r2, r3, #4
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e067      	b.n	800a188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0be:	d041      	beq.n	800a144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c0:	f7fe f93e 	bl	8008340 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d302      	bcc.n	800a0d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d136      	bne.n	800a144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	0c1b      	lsrs	r3, r3, #16
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d10c      	bne.n	800a0fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	43da      	mvns	r2, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bf14      	ite	ne
 800a0f2:	2301      	movne	r3, #1
 800a0f4:	2300      	moveq	r3, #0
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	e00b      	b.n	800a112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	43da      	mvns	r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	4013      	ands	r3, r2
 800a106:	b29b      	uxth	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bf14      	ite	ne
 800a10c:	2301      	movne	r3, #1
 800a10e:	2300      	moveq	r3, #0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d016      	beq.n	800a144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a130:	f043 0220 	orr.w	r2, r3, #32
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e021      	b.n	800a188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	0c1b      	lsrs	r3, r3, #16
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d10c      	bne.n	800a168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	43da      	mvns	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4013      	ands	r3, r2
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bf14      	ite	ne
 800a160:	2301      	movne	r3, #1
 800a162:	2300      	moveq	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	e00b      	b.n	800a180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	43da      	mvns	r2, r3
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4013      	ands	r3, r2
 800a174:	b29b      	uxth	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	bf14      	ite	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	2300      	moveq	r3, #0
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b00      	cmp	r3, #0
 800a182:	f47f af6d 	bne.w	800a060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a19c:	e034      	b.n	800a208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f8e3 	bl	800a36a <I2C_IsAcknowledgeFailed>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e034      	b.n	800a218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b4:	d028      	beq.n	800a208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1b6:	f7fe f8c3 	bl	8008340 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d302      	bcc.n	800a1cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d11d      	bne.n	800a208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d6:	2b80      	cmp	r3, #128	; 0x80
 800a1d8:	d016      	beq.n	800a208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f4:	f043 0220 	orr.w	r2, r3, #32
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e007      	b.n	800a218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a212:	2b80      	cmp	r3, #128	; 0x80
 800a214:	d1c3      	bne.n	800a19e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a22c:	e034      	b.n	800a298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 f89b 	bl	800a36a <I2C_IsAcknowledgeFailed>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e034      	b.n	800a2a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a244:	d028      	beq.n	800a298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a246:	f7fe f87b 	bl	8008340 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	429a      	cmp	r2, r3
 800a254:	d302      	bcc.n	800a25c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d11d      	bne.n	800a298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	f003 0304 	and.w	r3, r3, #4
 800a266:	2b04      	cmp	r3, #4
 800a268:	d016      	beq.n	800a298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	f043 0220 	orr.w	r2, r3, #32
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e007      	b.n	800a2a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d1c3      	bne.n	800a22e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2bc:	e049      	b.n	800a352 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	f003 0310 	and.w	r3, r3, #16
 800a2c8:	2b10      	cmp	r3, #16
 800a2ca:	d119      	bne.n	800a300 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f06f 0210 	mvn.w	r2, #16
 800a2d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e030      	b.n	800a362 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a300:	f7fe f81e 	bl	8008340 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d11d      	bne.n	800a352 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	d016      	beq.n	800a352 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2220      	movs	r2, #32
 800a32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	f043 0220 	orr.w	r2, r3, #32
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e007      	b.n	800a362 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35c:	2b40      	cmp	r3, #64	; 0x40
 800a35e:	d1ae      	bne.n	800a2be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a380:	d11b      	bne.n	800a3ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a38a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	f043 0204 	orr.w	r2, r3, #4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bc80      	pop	{r7}
 800a3c4:	4770      	bx	lr
	...

0800a3c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e272      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 8087 	beq.w	800a4f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a3e8:	4b92      	ldr	r3, [pc, #584]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f003 030c 	and.w	r3, r3, #12
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d00c      	beq.n	800a40e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a3f4:	4b8f      	ldr	r3, [pc, #572]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f003 030c 	and.w	r3, r3, #12
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d112      	bne.n	800a426 <HAL_RCC_OscConfig+0x5e>
 800a400:	4b8c      	ldr	r3, [pc, #560]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40c:	d10b      	bne.n	800a426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a40e:	4b89      	ldr	r3, [pc, #548]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d06c      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x12c>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d168      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e24c      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a42e:	d106      	bne.n	800a43e <HAL_RCC_OscConfig+0x76>
 800a430:	4b80      	ldr	r3, [pc, #512]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a7f      	ldr	r2, [pc, #508]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	e02e      	b.n	800a49c <HAL_RCC_OscConfig+0xd4>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10c      	bne.n	800a460 <HAL_RCC_OscConfig+0x98>
 800a446:	4b7b      	ldr	r3, [pc, #492]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a7a      	ldr	r2, [pc, #488]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a44c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	4b78      	ldr	r3, [pc, #480]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a77      	ldr	r2, [pc, #476]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	e01d      	b.n	800a49c <HAL_RCC_OscConfig+0xd4>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a468:	d10c      	bne.n	800a484 <HAL_RCC_OscConfig+0xbc>
 800a46a:	4b72      	ldr	r3, [pc, #456]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a71      	ldr	r2, [pc, #452]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	4b6f      	ldr	r3, [pc, #444]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a6e      	ldr	r2, [pc, #440]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a47c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	e00b      	b.n	800a49c <HAL_RCC_OscConfig+0xd4>
 800a484:	4b6b      	ldr	r3, [pc, #428]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a6a      	ldr	r2, [pc, #424]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a48a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	4b68      	ldr	r3, [pc, #416]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a67      	ldr	r2, [pc, #412]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a49a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d013      	beq.n	800a4cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4a4:	f7fd ff4c 	bl	8008340 <HAL_GetTick>
 800a4a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4ac:	f7fd ff48 	bl	8008340 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b64      	cmp	r3, #100	; 0x64
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e200      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4be:	4b5d      	ldr	r3, [pc, #372]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0f0      	beq.n	800a4ac <HAL_RCC_OscConfig+0xe4>
 800a4ca:	e014      	b.n	800a4f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4cc:	f7fd ff38 	bl	8008340 <HAL_GetTick>
 800a4d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4d2:	e008      	b.n	800a4e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4d4:	f7fd ff34 	bl	8008340 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	2b64      	cmp	r3, #100	; 0x64
 800a4e0:	d901      	bls.n	800a4e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e1ec      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4e6:	4b53      	ldr	r3, [pc, #332]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f0      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x10c>
 800a4f2:	e000      	b.n	800a4f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d063      	beq.n	800a5ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a502:	4b4c      	ldr	r3, [pc, #304]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f003 030c 	and.w	r3, r3, #12
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a50e:	4b49      	ldr	r3, [pc, #292]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f003 030c 	and.w	r3, r3, #12
 800a516:	2b08      	cmp	r3, #8
 800a518:	d11c      	bne.n	800a554 <HAL_RCC_OscConfig+0x18c>
 800a51a:	4b46      	ldr	r3, [pc, #280]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d116      	bne.n	800a554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a526:	4b43      	ldr	r3, [pc, #268]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <HAL_RCC_OscConfig+0x176>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d001      	beq.n	800a53e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e1c0      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a53e:	4b3d      	ldr	r3, [pc, #244]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	4939      	ldr	r1, [pc, #228]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a552:	e03a      	b.n	800a5ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d020      	beq.n	800a59e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a55c:	4b36      	ldr	r3, [pc, #216]	; (800a638 <HAL_RCC_OscConfig+0x270>)
 800a55e:	2201      	movs	r2, #1
 800a560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a562:	f7fd feed 	bl	8008340 <HAL_GetTick>
 800a566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a568:	e008      	b.n	800a57c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a56a:	f7fd fee9 	bl	8008340 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b02      	cmp	r3, #2
 800a576:	d901      	bls.n	800a57c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e1a1      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a57c:	4b2d      	ldr	r3, [pc, #180]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0f0      	beq.n	800a56a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a588:	4b2a      	ldr	r3, [pc, #168]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	4927      	ldr	r1, [pc, #156]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	600b      	str	r3, [r1, #0]
 800a59c:	e015      	b.n	800a5ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a59e:	4b26      	ldr	r3, [pc, #152]	; (800a638 <HAL_RCC_OscConfig+0x270>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5a4:	f7fd fecc 	bl	8008340 <HAL_GetTick>
 800a5a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5aa:	e008      	b.n	800a5be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5ac:	f7fd fec8 	bl	8008340 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e180      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5be:	4b1d      	ldr	r3, [pc, #116]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f0      	bne.n	800a5ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d03a      	beq.n	800a64c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d019      	beq.n	800a612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5de:	4b17      	ldr	r3, [pc, #92]	; (800a63c <HAL_RCC_OscConfig+0x274>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5e4:	f7fd feac 	bl	8008340 <HAL_GetTick>
 800a5e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5ec:	f7fd fea8 	bl	8008340 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e160      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <HAL_RCC_OscConfig+0x26c>)
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0f0      	beq.n	800a5ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a60a:	2001      	movs	r0, #1
 800a60c:	f000 face 	bl	800abac <RCC_Delay>
 800a610:	e01c      	b.n	800a64c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a612:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <HAL_RCC_OscConfig+0x274>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a618:	f7fd fe92 	bl	8008340 <HAL_GetTick>
 800a61c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a61e:	e00f      	b.n	800a640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a620:	f7fd fe8e 	bl	8008340 <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d908      	bls.n	800a640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e146      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
 800a632:	bf00      	nop
 800a634:	40021000 	.word	0x40021000
 800a638:	42420000 	.word	0x42420000
 800a63c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a640:	4b92      	ldr	r3, [pc, #584]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e9      	bne.n	800a620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 80a6 	beq.w	800a7a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a65a:	2300      	movs	r3, #0
 800a65c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a65e:	4b8b      	ldr	r3, [pc, #556]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10d      	bne.n	800a686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a66a:	4b88      	ldr	r3, [pc, #544]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	4a87      	ldr	r2, [pc, #540]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a674:	61d3      	str	r3, [r2, #28]
 800a676:	4b85      	ldr	r3, [pc, #532]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a67e:	60bb      	str	r3, [r7, #8]
 800a680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a682:	2301      	movs	r3, #1
 800a684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a686:	4b82      	ldr	r3, [pc, #520]	; (800a890 <HAL_RCC_OscConfig+0x4c8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d118      	bne.n	800a6c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a692:	4b7f      	ldr	r3, [pc, #508]	; (800a890 <HAL_RCC_OscConfig+0x4c8>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a7e      	ldr	r2, [pc, #504]	; (800a890 <HAL_RCC_OscConfig+0x4c8>)
 800a698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a69c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a69e:	f7fd fe4f 	bl	8008340 <HAL_GetTick>
 800a6a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6a4:	e008      	b.n	800a6b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6a6:	f7fd fe4b 	bl	8008340 <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	2b64      	cmp	r3, #100	; 0x64
 800a6b2:	d901      	bls.n	800a6b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e103      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6b8:	4b75      	ldr	r3, [pc, #468]	; (800a890 <HAL_RCC_OscConfig+0x4c8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d0f0      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d106      	bne.n	800a6da <HAL_RCC_OscConfig+0x312>
 800a6cc:	4b6f      	ldr	r3, [pc, #444]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	4a6e      	ldr	r2, [pc, #440]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a6d2:	f043 0301 	orr.w	r3, r3, #1
 800a6d6:	6213      	str	r3, [r2, #32]
 800a6d8:	e02d      	b.n	800a736 <HAL_RCC_OscConfig+0x36e>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10c      	bne.n	800a6fc <HAL_RCC_OscConfig+0x334>
 800a6e2:	4b6a      	ldr	r3, [pc, #424]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	4a69      	ldr	r2, [pc, #420]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a6e8:	f023 0301 	bic.w	r3, r3, #1
 800a6ec:	6213      	str	r3, [r2, #32]
 800a6ee:	4b67      	ldr	r3, [pc, #412]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	4a66      	ldr	r2, [pc, #408]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a6f4:	f023 0304 	bic.w	r3, r3, #4
 800a6f8:	6213      	str	r3, [r2, #32]
 800a6fa:	e01c      	b.n	800a736 <HAL_RCC_OscConfig+0x36e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	2b05      	cmp	r3, #5
 800a702:	d10c      	bne.n	800a71e <HAL_RCC_OscConfig+0x356>
 800a704:	4b61      	ldr	r3, [pc, #388]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	4a60      	ldr	r2, [pc, #384]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a70a:	f043 0304 	orr.w	r3, r3, #4
 800a70e:	6213      	str	r3, [r2, #32]
 800a710:	4b5e      	ldr	r3, [pc, #376]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	4a5d      	ldr	r2, [pc, #372]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	6213      	str	r3, [r2, #32]
 800a71c:	e00b      	b.n	800a736 <HAL_RCC_OscConfig+0x36e>
 800a71e:	4b5b      	ldr	r3, [pc, #364]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	4a5a      	ldr	r2, [pc, #360]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a724:	f023 0301 	bic.w	r3, r3, #1
 800a728:	6213      	str	r3, [r2, #32]
 800a72a:	4b58      	ldr	r3, [pc, #352]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	4a57      	ldr	r2, [pc, #348]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a730:	f023 0304 	bic.w	r3, r3, #4
 800a734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d015      	beq.n	800a76a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a73e:	f7fd fdff 	bl	8008340 <HAL_GetTick>
 800a742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a744:	e00a      	b.n	800a75c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a746:	f7fd fdfb 	bl	8008340 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	f241 3288 	movw	r2, #5000	; 0x1388
 800a754:	4293      	cmp	r3, r2
 800a756:	d901      	bls.n	800a75c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e0b1      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a75c:	4b4b      	ldr	r3, [pc, #300]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0ee      	beq.n	800a746 <HAL_RCC_OscConfig+0x37e>
 800a768:	e014      	b.n	800a794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a76a:	f7fd fde9 	bl	8008340 <HAL_GetTick>
 800a76e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a770:	e00a      	b.n	800a788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a772:	f7fd fde5 	bl	8008340 <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a780:	4293      	cmp	r3, r2
 800a782:	d901      	bls.n	800a788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e09b      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a788:	4b40      	ldr	r3, [pc, #256]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1ee      	bne.n	800a772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a794:	7dfb      	ldrb	r3, [r7, #23]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d105      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a79a:	4b3c      	ldr	r3, [pc, #240]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	4a3b      	ldr	r2, [pc, #236]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a7a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 8087 	beq.w	800a8be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7b0:	4b36      	ldr	r3, [pc, #216]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f003 030c 	and.w	r3, r3, #12
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d061      	beq.n	800a880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d146      	bne.n	800a852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7c4:	4b33      	ldr	r3, [pc, #204]	; (800a894 <HAL_RCC_OscConfig+0x4cc>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ca:	f7fd fdb9 	bl	8008340 <HAL_GetTick>
 800a7ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7d0:	e008      	b.n	800a7e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7d2:	f7fd fdb5 	bl	8008340 <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d901      	bls.n	800a7e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e06d      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7e4:	4b29      	ldr	r3, [pc, #164]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1f0      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f8:	d108      	bne.n	800a80c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a7fa:	4b24      	ldr	r3, [pc, #144]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	4921      	ldr	r1, [pc, #132]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a80c:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a19      	ldr	r1, [r3, #32]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	430b      	orrs	r3, r1
 800a81e:	491b      	ldr	r1, [pc, #108]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a820:	4313      	orrs	r3, r2
 800a822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a824:	4b1b      	ldr	r3, [pc, #108]	; (800a894 <HAL_RCC_OscConfig+0x4cc>)
 800a826:	2201      	movs	r2, #1
 800a828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a82a:	f7fd fd89 	bl	8008340 <HAL_GetTick>
 800a82e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a830:	e008      	b.n	800a844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a832:	f7fd fd85 	bl	8008340 <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e03d      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a844:	4b11      	ldr	r3, [pc, #68]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0f0      	beq.n	800a832 <HAL_RCC_OscConfig+0x46a>
 800a850:	e035      	b.n	800a8be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a852:	4b10      	ldr	r3, [pc, #64]	; (800a894 <HAL_RCC_OscConfig+0x4cc>)
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a858:	f7fd fd72 	bl	8008340 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a860:	f7fd fd6e 	bl	8008340 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e026      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a872:	4b06      	ldr	r3, [pc, #24]	; (800a88c <HAL_RCC_OscConfig+0x4c4>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f0      	bne.n	800a860 <HAL_RCC_OscConfig+0x498>
 800a87e:	e01e      	b.n	800a8be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d107      	bne.n	800a898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e019      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
 800a88c:	40021000 	.word	0x40021000
 800a890:	40007000 	.word	0x40007000
 800a894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a898:	4b0b      	ldr	r3, [pc, #44]	; (800a8c8 <HAL_RCC_OscConfig+0x500>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a1b      	ldr	r3, [r3, #32]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d001      	beq.n	800a8be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40021000 	.word	0x40021000

0800a8cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0d0      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8e0:	4b6a      	ldr	r3, [pc, #424]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0307 	and.w	r3, r3, #7
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d910      	bls.n	800a910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ee:	4b67      	ldr	r3, [pc, #412]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f023 0207 	bic.w	r2, r3, #7
 800a8f6:	4965      	ldr	r1, [pc, #404]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8fe:	4b63      	ldr	r3, [pc, #396]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d001      	beq.n	800a910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e0b8      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d020      	beq.n	800a95e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d005      	beq.n	800a934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a928:	4b59      	ldr	r3, [pc, #356]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	4a58      	ldr	r2, [pc, #352]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a92e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a940:	4b53      	ldr	r3, [pc, #332]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	4a52      	ldr	r2, [pc, #328]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a94a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a94c:	4b50      	ldr	r3, [pc, #320]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	494d      	ldr	r1, [pc, #308]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a95a:	4313      	orrs	r3, r2
 800a95c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d040      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d107      	bne.n	800a982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a972:	4b47      	ldr	r3, [pc, #284]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d115      	bne.n	800a9aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e07f      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d107      	bne.n	800a99a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a98a:	4b41      	ldr	r3, [pc, #260]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d109      	bne.n	800a9aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e073      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a99a:	4b3d      	ldr	r3, [pc, #244]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0302 	and.w	r3, r3, #2
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e06b      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9aa:	4b39      	ldr	r3, [pc, #228]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f023 0203 	bic.w	r2, r3, #3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	4936      	ldr	r1, [pc, #216]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a9bc:	f7fd fcc0 	bl	8008340 <HAL_GetTick>
 800a9c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9c2:	e00a      	b.n	800a9da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9c4:	f7fd fcbc 	bl	8008340 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e053      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9da:	4b2d      	ldr	r3, [pc, #180]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f003 020c 	and.w	r2, r3, #12
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d1eb      	bne.n	800a9c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ec:	4b27      	ldr	r3, [pc, #156]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d210      	bcs.n	800aa1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9fa:	4b24      	ldr	r3, [pc, #144]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f023 0207 	bic.w	r2, r3, #7
 800aa02:	4922      	ldr	r1, [pc, #136]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa0a:	4b20      	ldr	r3, [pc, #128]	; (800aa8c <HAL_RCC_ClockConfig+0x1c0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d001      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e032      	b.n	800aa82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d008      	beq.n	800aa3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa28:	4b19      	ldr	r3, [pc, #100]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	4916      	ldr	r1, [pc, #88]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d009      	beq.n	800aa5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa46:	4b12      	ldr	r3, [pc, #72]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	490e      	ldr	r1, [pc, #56]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa5a:	f000 f821 	bl	800aaa0 <HAL_RCC_GetSysClockFreq>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <HAL_RCC_ClockConfig+0x1c4>)
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	091b      	lsrs	r3, r3, #4
 800aa66:	f003 030f 	and.w	r3, r3, #15
 800aa6a:	490a      	ldr	r1, [pc, #40]	; (800aa94 <HAL_RCC_ClockConfig+0x1c8>)
 800aa6c:	5ccb      	ldrb	r3, [r1, r3]
 800aa6e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa72:	4a09      	ldr	r2, [pc, #36]	; (800aa98 <HAL_RCC_ClockConfig+0x1cc>)
 800aa74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa76:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <HAL_RCC_ClockConfig+0x1d0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fd fc1e 	bl	80082bc <HAL_InitTick>

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40022000 	.word	0x40022000
 800aa90:	40021000 	.word	0x40021000
 800aa94:	0800d9ac 	.word	0x0800d9ac
 800aa98:	200000b4 	.word	0x200000b4
 800aa9c:	200000b8 	.word	0x200000b8

0800aaa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60bb      	str	r3, [r7, #8]
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]
 800aab2:	2300      	movs	r3, #0
 800aab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aaba:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <HAL_RCC_GetSysClockFreq+0x94>)
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f003 030c 	and.w	r3, r3, #12
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d002      	beq.n	800aad0 <HAL_RCC_GetSysClockFreq+0x30>
 800aaca:	2b08      	cmp	r3, #8
 800aacc:	d003      	beq.n	800aad6 <HAL_RCC_GetSysClockFreq+0x36>
 800aace:	e027      	b.n	800ab20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aad0:	4b19      	ldr	r3, [pc, #100]	; (800ab38 <HAL_RCC_GetSysClockFreq+0x98>)
 800aad2:	613b      	str	r3, [r7, #16]
      break;
 800aad4:	e027      	b.n	800ab26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	0c9b      	lsrs	r3, r3, #18
 800aada:	f003 030f 	and.w	r3, r3, #15
 800aade:	4a17      	ldr	r2, [pc, #92]	; (800ab3c <HAL_RCC_GetSysClockFreq+0x9c>)
 800aae0:	5cd3      	ldrb	r3, [r2, r3]
 800aae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d010      	beq.n	800ab10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aaee:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <HAL_RCC_GetSysClockFreq+0x94>)
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	0c5b      	lsrs	r3, r3, #17
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	4a11      	ldr	r2, [pc, #68]	; (800ab40 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aafa:	5cd3      	ldrb	r3, [r2, r3]
 800aafc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a0d      	ldr	r2, [pc, #52]	; (800ab38 <HAL_RCC_GetSysClockFreq+0x98>)
 800ab02:	fb03 f202 	mul.w	r2, r3, r2
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e004      	b.n	800ab1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a0c      	ldr	r2, [pc, #48]	; (800ab44 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ab14:	fb02 f303 	mul.w	r3, r2, r3
 800ab18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	613b      	str	r3, [r7, #16]
      break;
 800ab1e:	e002      	b.n	800ab26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ab20:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <HAL_RCC_GetSysClockFreq+0x98>)
 800ab22:	613b      	str	r3, [r7, #16]
      break;
 800ab24:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab26:	693b      	ldr	r3, [r7, #16]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	371c      	adds	r7, #28
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bc80      	pop	{r7}
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	40021000 	.word	0x40021000
 800ab38:	007a1200 	.word	0x007a1200
 800ab3c:	0800d9c4 	.word	0x0800d9c4
 800ab40:	0800d9d4 	.word	0x0800d9d4
 800ab44:	003d0900 	.word	0x003d0900

0800ab48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab4c:	4b02      	ldr	r3, [pc, #8]	; (800ab58 <HAL_RCC_GetHCLKFreq+0x10>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr
 800ab58:	200000b4 	.word	0x200000b4

0800ab5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab60:	f7ff fff2 	bl	800ab48 <HAL_RCC_GetHCLKFreq>
 800ab64:	4602      	mov	r2, r0
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	0a1b      	lsrs	r3, r3, #8
 800ab6c:	f003 0307 	and.w	r3, r3, #7
 800ab70:	4903      	ldr	r1, [pc, #12]	; (800ab80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab72:	5ccb      	ldrb	r3, [r1, r3]
 800ab74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	40021000 	.word	0x40021000
 800ab80:	0800d9bc 	.word	0x0800d9bc

0800ab84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab88:	f7ff ffde 	bl	800ab48 <HAL_RCC_GetHCLKFreq>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	0adb      	lsrs	r3, r3, #11
 800ab94:	f003 0307 	and.w	r3, r3, #7
 800ab98:	4903      	ldr	r1, [pc, #12]	; (800aba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab9a:	5ccb      	ldrb	r3, [r1, r3]
 800ab9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	40021000 	.word	0x40021000
 800aba8:	0800d9bc 	.word	0x0800d9bc

0800abac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <RCC_Delay+0x34>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a0a      	ldr	r2, [pc, #40]	; (800abe4 <RCC_Delay+0x38>)
 800abba:	fba2 2303 	umull	r2, r3, r2, r3
 800abbe:	0a5b      	lsrs	r3, r3, #9
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800abc8:	bf00      	nop
  }
  while (Delay --);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	1e5a      	subs	r2, r3, #1
 800abce:	60fa      	str	r2, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1f9      	bne.n	800abc8 <RCC_Delay+0x1c>
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	bc80      	pop	{r7}
 800abde:	4770      	bx	lr
 800abe0:	200000b4 	.word	0x200000b4
 800abe4:	10624dd3 	.word	0x10624dd3

0800abe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e041      	b.n	800ac7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7fd fa26 	bl	8008060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4619      	mov	r1, r3
 800ac26:	4610      	mov	r0, r2
 800ac28:	f000 fa82 	bl	800b130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d001      	beq.n	800aca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e044      	b.n	800ad2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2202      	movs	r2, #2
 800aca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68da      	ldr	r2, [r3, #12]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0201 	orr.w	r2, r2, #1
 800acb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <HAL_TIM_Base_Start_IT+0xac>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d018      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a1c      	ldr	r2, [pc, #112]	; (800ad38 <HAL_TIM_Base_Start_IT+0xb0>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d013      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd4:	d00e      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a18      	ldr	r2, [pc, #96]	; (800ad3c <HAL_TIM_Base_Start_IT+0xb4>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d009      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a16      	ldr	r2, [pc, #88]	; (800ad40 <HAL_TIM_Base_Start_IT+0xb8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d004      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a15      	ldr	r2, [pc, #84]	; (800ad44 <HAL_TIM_Base_Start_IT+0xbc>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d111      	bne.n	800ad18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d010      	beq.n	800ad28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad16:	e007      	b.n	800ad28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f042 0201 	orr.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bc80      	pop	{r7}
 800ad32:	4770      	bx	lr
 800ad34:	40012c00 	.word	0x40012c00
 800ad38:	40013400 	.word	0x40013400
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40000c00 	.word	0x40000c00

0800ad48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d122      	bne.n	800ada4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d11b      	bne.n	800ada4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f06f 0202 	mvn.w	r2, #2
 800ad74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f9b4 	bl	800b0f8 <HAL_TIM_IC_CaptureCallback>
 800ad90:	e005      	b.n	800ad9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f9a7 	bl	800b0e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f9b6 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f003 0304 	and.w	r3, r3, #4
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d122      	bne.n	800adf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d11b      	bne.n	800adf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f06f 0204 	mvn.w	r2, #4
 800adc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2202      	movs	r2, #2
 800adce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f98a 	bl	800b0f8 <HAL_TIM_IC_CaptureCallback>
 800ade4:	e005      	b.n	800adf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f97d 	bl	800b0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f98c 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	f003 0308 	and.w	r3, r3, #8
 800ae02:	2b08      	cmp	r3, #8
 800ae04:	d122      	bne.n	800ae4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f003 0308 	and.w	r3, r3, #8
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d11b      	bne.n	800ae4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f06f 0208 	mvn.w	r2, #8
 800ae1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2204      	movs	r2, #4
 800ae22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	f003 0303 	and.w	r3, r3, #3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f960 	bl	800b0f8 <HAL_TIM_IC_CaptureCallback>
 800ae38:	e005      	b.n	800ae46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f953 	bl	800b0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f962 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	f003 0310 	and.w	r3, r3, #16
 800ae56:	2b10      	cmp	r3, #16
 800ae58:	d122      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b10      	cmp	r3, #16
 800ae66:	d11b      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f06f 0210 	mvn.w	r2, #16
 800ae70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2208      	movs	r2, #8
 800ae76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f936 	bl	800b0f8 <HAL_TIM_IC_CaptureCallback>
 800ae8c:	e005      	b.n	800ae9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f929 	bl	800b0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f938 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d10e      	bne.n	800aecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d107      	bne.n	800aecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f06f 0201 	mvn.w	r2, #1
 800aec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7fc fd62 	bl	8007990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed6:	2b80      	cmp	r3, #128	; 0x80
 800aed8:	d10e      	bne.n	800aef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee4:	2b80      	cmp	r3, #128	; 0x80
 800aee6:	d107      	bne.n	800aef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 faa1 	bl	800b43a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af02:	2b40      	cmp	r3, #64	; 0x40
 800af04:	d10e      	bne.n	800af24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af10:	2b40      	cmp	r3, #64	; 0x40
 800af12:	d107      	bne.n	800af24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f8fc 	bl	800b11c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b20      	cmp	r3, #32
 800af30:	d10e      	bne.n	800af50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f003 0320 	and.w	r3, r3, #32
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	d107      	bne.n	800af50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f06f 0220 	mvn.w	r2, #32
 800af48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fa6c 	bl	800b428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d101      	bne.n	800af74 <HAL_TIM_ConfigClockSource+0x1c>
 800af70:	2302      	movs	r3, #2
 800af72:	e0b4      	b.n	800b0de <HAL_TIM_ConfigClockSource+0x186>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2202      	movs	r2, #2
 800af80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afac:	d03e      	beq.n	800b02c <HAL_TIM_ConfigClockSource+0xd4>
 800afae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb2:	f200 8087 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afba:	f000 8086 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x172>
 800afbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc2:	d87f      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afc4:	2b70      	cmp	r3, #112	; 0x70
 800afc6:	d01a      	beq.n	800affe <HAL_TIM_ConfigClockSource+0xa6>
 800afc8:	2b70      	cmp	r3, #112	; 0x70
 800afca:	d87b      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afcc:	2b60      	cmp	r3, #96	; 0x60
 800afce:	d050      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x11a>
 800afd0:	2b60      	cmp	r3, #96	; 0x60
 800afd2:	d877      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afd4:	2b50      	cmp	r3, #80	; 0x50
 800afd6:	d03c      	beq.n	800b052 <HAL_TIM_ConfigClockSource+0xfa>
 800afd8:	2b50      	cmp	r3, #80	; 0x50
 800afda:	d873      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afdc:	2b40      	cmp	r3, #64	; 0x40
 800afde:	d058      	beq.n	800b092 <HAL_TIM_ConfigClockSource+0x13a>
 800afe0:	2b40      	cmp	r3, #64	; 0x40
 800afe2:	d86f      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afe4:	2b30      	cmp	r3, #48	; 0x30
 800afe6:	d064      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x15a>
 800afe8:	2b30      	cmp	r3, #48	; 0x30
 800afea:	d86b      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800afec:	2b20      	cmp	r3, #32
 800afee:	d060      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x15a>
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d867      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d05c      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x15a>
 800aff8:	2b10      	cmp	r3, #16
 800affa:	d05a      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x15a>
 800affc:	e062      	b.n	800b0c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b00e:	f000 f980 	bl	800b312 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	609a      	str	r2, [r3, #8]
      break;
 800b02a:	e04f      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b03c:	f000 f969 	bl	800b312 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b04e:	609a      	str	r2, [r3, #8]
      break;
 800b050:	e03c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b05e:	461a      	mov	r2, r3
 800b060:	f000 f8e0 	bl	800b224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2150      	movs	r1, #80	; 0x50
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 f937 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800b070:	e02c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b07e:	461a      	mov	r2, r3
 800b080:	f000 f8fe 	bl	800b280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2160      	movs	r1, #96	; 0x60
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 f927 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800b090:	e01c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f000 f8c0 	bl	800b224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2140      	movs	r1, #64	; 0x40
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f917 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800b0b0:	e00c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f000 f90e 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800b0c2:	e003      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c8:	e000      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	bc80      	pop	{r7}
 800b108:	4770      	bx	lr

0800b10a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b10a:	b480      	push	{r7}
 800b10c:	b083      	sub	sp, #12
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	bc80      	pop	{r7}
 800b11a:	4770      	bx	lr

0800b11c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	bc80      	pop	{r7}
 800b12c:	4770      	bx	lr
	...

0800b130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a33      	ldr	r2, [pc, #204]	; (800b210 <TIM_Base_SetConfig+0xe0>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d013      	beq.n	800b170 <TIM_Base_SetConfig+0x40>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a32      	ldr	r2, [pc, #200]	; (800b214 <TIM_Base_SetConfig+0xe4>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d00f      	beq.n	800b170 <TIM_Base_SetConfig+0x40>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b156:	d00b      	beq.n	800b170 <TIM_Base_SetConfig+0x40>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a2f      	ldr	r2, [pc, #188]	; (800b218 <TIM_Base_SetConfig+0xe8>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d007      	beq.n	800b170 <TIM_Base_SetConfig+0x40>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a2e      	ldr	r2, [pc, #184]	; (800b21c <TIM_Base_SetConfig+0xec>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_Base_SetConfig+0x40>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a2d      	ldr	r2, [pc, #180]	; (800b220 <TIM_Base_SetConfig+0xf0>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d108      	bne.n	800b182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a22      	ldr	r2, [pc, #136]	; (800b210 <TIM_Base_SetConfig+0xe0>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d013      	beq.n	800b1b2 <TIM_Base_SetConfig+0x82>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a21      	ldr	r2, [pc, #132]	; (800b214 <TIM_Base_SetConfig+0xe4>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d00f      	beq.n	800b1b2 <TIM_Base_SetConfig+0x82>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b198:	d00b      	beq.n	800b1b2 <TIM_Base_SetConfig+0x82>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a1e      	ldr	r2, [pc, #120]	; (800b218 <TIM_Base_SetConfig+0xe8>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d007      	beq.n	800b1b2 <TIM_Base_SetConfig+0x82>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a1d      	ldr	r2, [pc, #116]	; (800b21c <TIM_Base_SetConfig+0xec>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d003      	beq.n	800b1b2 <TIM_Base_SetConfig+0x82>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a1c      	ldr	r2, [pc, #112]	; (800b220 <TIM_Base_SetConfig+0xf0>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d108      	bne.n	800b1c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a09      	ldr	r2, [pc, #36]	; (800b210 <TIM_Base_SetConfig+0xe0>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_Base_SetConfig+0xc8>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a08      	ldr	r2, [pc, #32]	; (800b214 <TIM_Base_SetConfig+0xe4>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d103      	bne.n	800b200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	615a      	str	r2, [r3, #20]
}
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bc80      	pop	{r7}
 800b20e:	4770      	bx	lr
 800b210:	40012c00 	.word	0x40012c00
 800b214:	40013400 	.word	0x40013400
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40000c00 	.word	0x40000c00

0800b224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6a1b      	ldr	r3, [r3, #32]
 800b234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	f023 0201 	bic.w	r2, r3, #1
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b24e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	011b      	lsls	r3, r3, #4
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	4313      	orrs	r3, r2
 800b258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f023 030a 	bic.w	r3, r3, #10
 800b260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4313      	orrs	r3, r2
 800b268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	621a      	str	r2, [r3, #32]
}
 800b276:	bf00      	nop
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bc80      	pop	{r7}
 800b27e:	4770      	bx	lr

0800b280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	f023 0210 	bic.w	r2, r3, #16
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	031b      	lsls	r3, r3, #12
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	011b      	lsls	r3, r3, #4
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	621a      	str	r2, [r3, #32]
}
 800b2d4:	bf00      	nop
 800b2d6:	371c      	adds	r7, #28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	f043 0307 	orr.w	r3, r3, #7
 800b300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	609a      	str	r2, [r3, #8]
}
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr

0800b312 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b312:	b480      	push	{r7}
 800b314:	b087      	sub	sp, #28
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
 800b31e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b32c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	021a      	lsls	r2, r3, #8
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	431a      	orrs	r2, r3
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	4313      	orrs	r3, r2
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	609a      	str	r2, [r3, #8]
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr

0800b350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b364:	2302      	movs	r3, #2
 800b366:	e050      	b.n	800b40a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a1b      	ldr	r2, [pc, #108]	; (800b414 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d018      	beq.n	800b3de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a19      	ldr	r2, [pc, #100]	; (800b418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d013      	beq.n	800b3de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3be:	d00e      	beq.n	800b3de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a15      	ldr	r2, [pc, #84]	; (800b41c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d009      	beq.n	800b3de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a14      	ldr	r2, [pc, #80]	; (800b420 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d004      	beq.n	800b3de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a12      	ldr	r2, [pc, #72]	; (800b424 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d10c      	bne.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	bc80      	pop	{r7}
 800b412:	4770      	bx	lr
 800b414:	40012c00 	.word	0x40012c00
 800b418:	40013400 	.word	0x40013400
 800b41c:	40000400 	.word	0x40000400
 800b420:	40000800 	.word	0x40000800
 800b424:	40000c00 	.word	0x40000c00

0800b428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	bc80      	pop	{r7}
 800b438:	4770      	bx	lr

0800b43a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b442:	bf00      	nop
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	bc80      	pop	{r7}
 800b44a:	4770      	bx	lr

0800b44c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e042      	b.n	800b4e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7fc fe1a 	bl	80080ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2224      	movs	r2, #36	; 0x24
 800b47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b48e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 fcb5 	bl	800be00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	691a      	ldr	r2, [r3, #16]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	695a      	ldr	r2, [r3, #20]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68da      	ldr	r2, [r3, #12]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2220      	movs	r2, #32
 800b4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b20      	cmp	r3, #32
 800b504:	d121      	bne.n	800b54a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <HAL_UART_Transmit_IT+0x26>
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e01a      	b.n	800b54c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	88fa      	ldrh	r2, [r7, #6]
 800b520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	88fa      	ldrh	r2, [r7, #6]
 800b526:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2221      	movs	r2, #33	; 0x21
 800b532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68da      	ldr	r2, [r3, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b544:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	e000      	b.n	800b54c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b54a:	2302      	movs	r3, #2
  }
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	bc80      	pop	{r7}
 800b554:	4770      	bx	lr
	...

0800b558 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b0ba      	sub	sp, #232	; 0xe8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b57e:	2300      	movs	r3, #0
 800b580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b584:	2300      	movs	r3, #0
 800b586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b58e:	f003 030f 	and.w	r3, r3, #15
 800b592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10f      	bne.n	800b5be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a2:	f003 0320 	and.w	r3, r3, #32
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <HAL_UART_IRQHandler+0x66>
 800b5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ae:	f003 0320 	and.w	r3, r3, #32
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fb63 	bl	800bc82 <UART_Receive_IT>
      return;
 800b5bc:	e25b      	b.n	800ba76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 80de 	beq.w	800b784 <HAL_UART_IRQHandler+0x22c>
 800b5c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 80d1 	beq.w	800b784 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00b      	beq.n	800b606 <HAL_UART_IRQHandler+0xae>
 800b5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d005      	beq.n	800b606 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fe:	f043 0201 	orr.w	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00b      	beq.n	800b62a <HAL_UART_IRQHandler+0xd2>
 800b612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d005      	beq.n	800b62a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b622:	f043 0202 	orr.w	r2, r3, #2
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <HAL_UART_IRQHandler+0xf6>
 800b636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b63a:	f003 0301 	and.w	r3, r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b646:	f043 0204 	orr.w	r2, r3, #4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b652:	f003 0308 	and.w	r3, r3, #8
 800b656:	2b00      	cmp	r3, #0
 800b658:	d011      	beq.n	800b67e <HAL_UART_IRQHandler+0x126>
 800b65a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b65e:	f003 0320 	and.w	r3, r3, #32
 800b662:	2b00      	cmp	r3, #0
 800b664:	d105      	bne.n	800b672 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b676:	f043 0208 	orr.w	r2, r3, #8
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 81f2 	beq.w	800ba6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b00      	cmp	r3, #0
 800b692:	d008      	beq.n	800b6a6 <HAL_UART_IRQHandler+0x14e>
 800b694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 faee 	bl	800bc82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	bf14      	ite	ne
 800b6b4:	2301      	movne	r3, #1
 800b6b6:	2300      	moveq	r3, #0
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c2:	f003 0308 	and.w	r3, r3, #8
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d103      	bne.n	800b6d2 <HAL_UART_IRQHandler+0x17a>
 800b6ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d04f      	beq.n	800b772 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f9f8 	bl	800bac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d041      	beq.n	800b76a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3314      	adds	r3, #20
 800b6ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6f4:	e853 3f00 	ldrex	r3, [r3]
 800b6f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b6fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3314      	adds	r3, #20
 800b70e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b712:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b71e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b722:	e841 2300 	strex	r3, r2, [r1]
 800b726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b72a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1d9      	bne.n	800b6e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d013      	beq.n	800b762 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73e:	4a7e      	ldr	r2, [pc, #504]	; (800b938 <HAL_UART_IRQHandler+0x3e0>)
 800b740:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b746:	4618      	mov	r0, r3
 800b748:	f7fd f86c 	bl	8008824 <HAL_DMA_Abort_IT>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d016      	beq.n	800b780 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b75c:	4610      	mov	r0, r2
 800b75e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b760:	e00e      	b.n	800b780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f99c 	bl	800baa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b768:	e00a      	b.n	800b780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f998 	bl	800baa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b770:	e006      	b.n	800b780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f994 	bl	800baa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b77e:	e175      	b.n	800ba6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b780:	bf00      	nop
    return;
 800b782:	e173      	b.n	800ba6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b788:	2b01      	cmp	r3, #1
 800b78a:	f040 814f 	bne.w	800ba2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b792:	f003 0310 	and.w	r3, r3, #16
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 8148 	beq.w	800ba2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7a0:	f003 0310 	and.w	r3, r3, #16
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 8141 	beq.w	800ba2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60bb      	str	r3, [r7, #8]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60bb      	str	r3, [r7, #8]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	60bb      	str	r3, [r7, #8]
 800b7be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80b6 	beq.w	800b93c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 8145 	beq.w	800ba70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	f080 813e 	bcs.w	800ba70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	2b20      	cmp	r3, #32
 800b804:	f000 8088 	beq.w	800b918 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	330c      	adds	r3, #12
 800b80e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b816:	e853 3f00 	ldrex	r3, [r3]
 800b81a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b81e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	330c      	adds	r3, #12
 800b830:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b834:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b840:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b84c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1d9      	bne.n	800b808 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3314      	adds	r3, #20
 800b85a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b866:	f023 0301 	bic.w	r3, r3, #1
 800b86a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3314      	adds	r3, #20
 800b874:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b878:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b87c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b880:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b88a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e1      	bne.n	800b854 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3314      	adds	r3, #20
 800b896:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e3      	bne.n	800b890 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8e8:	f023 0310 	bic.w	r3, r3, #16
 800b8ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8fa:	65ba      	str	r2, [r7, #88]	; 0x58
 800b8fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e3      	bne.n	800b8d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b912:	4618      	mov	r0, r3
 800b914:	f7fc ff4b 	bl	80087ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b926:	b29b      	uxth	r3, r3
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f8bf 	bl	800bab2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b934:	e09c      	b.n	800ba70 <HAL_UART_IRQHandler+0x518>
 800b936:	bf00      	nop
 800b938:	0800bb8d 	.word	0x0800bb8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b944:	b29b      	uxth	r3, r3
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	f000 808e 	beq.w	800ba74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8089 	beq.w	800ba74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	330c      	adds	r3, #12
 800b968:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	330c      	adds	r3, #12
 800b982:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b986:	647a      	str	r2, [r7, #68]	; 0x44
 800b988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b98c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b98e:	e841 2300 	strex	r3, r2, [r1]
 800b992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1e3      	bne.n	800b962 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3314      	adds	r3, #20
 800b9a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	e853 3f00 	ldrex	r3, [r3]
 800b9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	f023 0301 	bic.w	r3, r3, #1
 800b9b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9be:	633a      	str	r2, [r7, #48]	; 0x30
 800b9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e3      	bne.n	800b99a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	330c      	adds	r3, #12
 800b9e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f023 0310 	bic.w	r3, r3, #16
 800b9f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	330c      	adds	r3, #12
 800ba00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba04:	61fa      	str	r2, [r7, #28]
 800ba06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba08:	69b9      	ldr	r1, [r7, #24]
 800ba0a:	69fa      	ldr	r2, [r7, #28]
 800ba0c:	e841 2300 	strex	r3, r2, [r1]
 800ba10:	617b      	str	r3, [r7, #20]
   return(result);
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e3      	bne.n	800b9e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f844 	bl	800bab2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba2a:	e023      	b.n	800ba74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <HAL_UART_IRQHandler+0x4f4>
 800ba38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f8b5 	bl	800bbb4 <UART_Transmit_IT>
    return;
 800ba4a:	e014      	b.n	800ba76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00e      	beq.n	800ba76 <HAL_UART_IRQHandler+0x51e>
 800ba58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d008      	beq.n	800ba76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f8f4 	bl	800bc52 <UART_EndTransmit_IT>
    return;
 800ba6a:	e004      	b.n	800ba76 <HAL_UART_IRQHandler+0x51e>
    return;
 800ba6c:	bf00      	nop
 800ba6e:	e002      	b.n	800ba76 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba70:	bf00      	nop
 800ba72:	e000      	b.n	800ba76 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba74:	bf00      	nop
  }
}
 800ba76:	37e8      	adds	r7, #232	; 0xe8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bc80      	pop	{r7}
 800ba8c:	4770      	bx	lr

0800ba8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b083      	sub	sp, #12
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ba96:	bf00      	nop
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bc80      	pop	{r7}
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	bc80      	pop	{r7}
 800bab0:	4770      	bx	lr

0800bab2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b083      	sub	sp, #12
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	460b      	mov	r3, r1
 800babc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800babe:	bf00      	nop
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bc80      	pop	{r7}
 800bac6:	4770      	bx	lr

0800bac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b095      	sub	sp, #84	; 0x54
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	330c      	adds	r3, #12
 800bad6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800baf0:	643a      	str	r2, [r7, #64]	; 0x40
 800baf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800baf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baf8:	e841 2300 	strex	r3, r2, [r1]
 800bafc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e5      	bne.n	800bad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3314      	adds	r3, #20
 800bb0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f023 0301 	bic.w	r3, r3, #1
 800bb1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3314      	adds	r3, #20
 800bb22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2c:	e841 2300 	strex	r3, r2, [r1]
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e5      	bne.n	800bb04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d119      	bne.n	800bb74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	330c      	adds	r3, #12
 800bb46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f023 0310 	bic.w	r3, r3, #16
 800bb56:	647b      	str	r3, [r7, #68]	; 0x44
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	330c      	adds	r3, #12
 800bb5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb60:	61ba      	str	r2, [r7, #24]
 800bb62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb64:	6979      	ldr	r1, [r7, #20]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	e841 2300 	strex	r3, r2, [r1]
 800bb6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e5      	bne.n	800bb40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2220      	movs	r2, #32
 800bb78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bb82:	bf00      	nop
 800bb84:	3754      	adds	r7, #84	; 0x54
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bc80      	pop	{r7}
 800bb8a:	4770      	bx	lr

0800bb8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff ff7a 	bl	800baa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbac:	bf00      	nop
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b21      	cmp	r3, #33	; 0x21
 800bbc6:	d13e      	bne.n	800bc46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbd0:	d114      	bne.n	800bbfc <UART_Transmit_IT+0x48>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d110      	bne.n	800bbfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	1c9a      	adds	r2, r3, #2
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	621a      	str	r2, [r3, #32]
 800bbfa:	e008      	b.n	800bc0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a1b      	ldr	r3, [r3, #32]
 800bc00:	1c59      	adds	r1, r3, #1
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	6211      	str	r1, [r2, #32]
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	3b01      	subs	r3, #1
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10f      	bne.n	800bc42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68da      	ldr	r2, [r3, #12]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	e000      	b.n	800bc48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bc46:	2302      	movs	r3, #2
  }
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bc80      	pop	{r7}
 800bc50:	4770      	bx	lr

0800bc52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ff02 	bl	800ba7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b08c      	sub	sp, #48	; 0x30
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b22      	cmp	r3, #34	; 0x22
 800bc94:	f040 80ae 	bne.w	800bdf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bca0:	d117      	bne.n	800bcd2 <UART_Receive_IT+0x50>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d113      	bne.n	800bcd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcca:	1c9a      	adds	r2, r3, #2
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	629a      	str	r2, [r3, #40]	; 0x28
 800bcd0:	e026      	b.n	800bd20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce4:	d007      	beq.n	800bcf6 <UART_Receive_IT+0x74>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <UART_Receive_IT+0x82>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d106      	bne.n	800bd04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	701a      	strb	r2, [r3, #0]
 800bd02:	e008      	b.n	800bd16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d15d      	bne.n	800bdf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f022 0220 	bic.w	r2, r2, #32
 800bd42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68da      	ldr	r2, [r3, #12]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	695a      	ldr	r2, [r3, #20]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 0201 	bic.w	r2, r2, #1
 800bd62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d135      	bne.n	800bde6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	330c      	adds	r3, #12
 800bd86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f023 0310 	bic.w	r3, r3, #16
 800bd96:	627b      	str	r3, [r7, #36]	; 0x24
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	330c      	adds	r3, #12
 800bd9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda0:	623a      	str	r2, [r7, #32]
 800bda2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	6a3a      	ldr	r2, [r7, #32]
 800bda8:	e841 2300 	strex	r3, r2, [r1]
 800bdac:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1e5      	bne.n	800bd80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0310 	and.w	r3, r3, #16
 800bdbe:	2b10      	cmp	r3, #16
 800bdc0:	d10a      	bne.n	800bdd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff fe67 	bl	800bab2 <HAL_UARTEx_RxEventCallback>
 800bde4:	e002      	b.n	800bdec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff fe51 	bl	800ba8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	e002      	b.n	800bdf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e000      	b.n	800bdf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bdf4:	2302      	movs	r3, #2
  }
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3730      	adds	r7, #48	; 0x30
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68da      	ldr	r2, [r3, #12]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	689a      	ldr	r2, [r3, #8]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	431a      	orrs	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800be3a:	f023 030c 	bic.w	r3, r3, #12
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	6812      	ldr	r2, [r2, #0]
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	430b      	orrs	r3, r1
 800be46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	699a      	ldr	r2, [r3, #24]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a2c      	ldr	r2, [pc, #176]	; (800bf14 <UART_SetConfig+0x114>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d103      	bne.n	800be70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800be68:	f7fe fe8c 	bl	800ab84 <HAL_RCC_GetPCLK2Freq>
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	e002      	b.n	800be76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800be70:	f7fe fe74 	bl	800ab5c <HAL_RCC_GetPCLK1Freq>
 800be74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4613      	mov	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	009a      	lsls	r2, r3, #2
 800be80:	441a      	add	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	fbb2 f3f3 	udiv	r3, r2, r3
 800be8c:	4a22      	ldr	r2, [pc, #136]	; (800bf18 <UART_SetConfig+0x118>)
 800be8e:	fba2 2303 	umull	r2, r3, r2, r3
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	0119      	lsls	r1, r3, #4
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009a      	lsls	r2, r3, #2
 800bea0:	441a      	add	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	fbb2 f2f3 	udiv	r2, r2, r3
 800beac:	4b1a      	ldr	r3, [pc, #104]	; (800bf18 <UART_SetConfig+0x118>)
 800beae:	fba3 0302 	umull	r0, r3, r3, r2
 800beb2:	095b      	lsrs	r3, r3, #5
 800beb4:	2064      	movs	r0, #100	; 0x64
 800beb6:	fb00 f303 	mul.w	r3, r0, r3
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	3332      	adds	r3, #50	; 0x32
 800bec0:	4a15      	ldr	r2, [pc, #84]	; (800bf18 <UART_SetConfig+0x118>)
 800bec2:	fba2 2303 	umull	r2, r3, r2, r3
 800bec6:	095b      	lsrs	r3, r3, #5
 800bec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800becc:	4419      	add	r1, r3
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009a      	lsls	r2, r3, #2
 800bed8:	441a      	add	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	fbb2 f2f3 	udiv	r2, r2, r3
 800bee4:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <UART_SetConfig+0x118>)
 800bee6:	fba3 0302 	umull	r0, r3, r3, r2
 800beea:	095b      	lsrs	r3, r3, #5
 800beec:	2064      	movs	r0, #100	; 0x64
 800beee:	fb00 f303 	mul.w	r3, r0, r3
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	011b      	lsls	r3, r3, #4
 800bef6:	3332      	adds	r3, #50	; 0x32
 800bef8:	4a07      	ldr	r2, [pc, #28]	; (800bf18 <UART_SetConfig+0x118>)
 800befa:	fba2 2303 	umull	r2, r3, r2, r3
 800befe:	095b      	lsrs	r3, r3, #5
 800bf00:	f003 020f 	and.w	r2, r3, #15
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	440a      	add	r2, r1
 800bf0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bf0c:	bf00      	nop
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	40013800 	.word	0x40013800
 800bf18:	51eb851f 	.word	0x51eb851f

0800bf1c <__itoa>:
 800bf1c:	1e93      	subs	r3, r2, #2
 800bf1e:	2b22      	cmp	r3, #34	; 0x22
 800bf20:	b510      	push	{r4, lr}
 800bf22:	460c      	mov	r4, r1
 800bf24:	d904      	bls.n	800bf30 <__itoa+0x14>
 800bf26:	2300      	movs	r3, #0
 800bf28:	461c      	mov	r4, r3
 800bf2a:	700b      	strb	r3, [r1, #0]
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	bd10      	pop	{r4, pc}
 800bf30:	2a0a      	cmp	r2, #10
 800bf32:	d109      	bne.n	800bf48 <__itoa+0x2c>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	da07      	bge.n	800bf48 <__itoa+0x2c>
 800bf38:	232d      	movs	r3, #45	; 0x2d
 800bf3a:	700b      	strb	r3, [r1, #0]
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	4240      	negs	r0, r0
 800bf40:	4421      	add	r1, r4
 800bf42:	f000 f90d 	bl	800c160 <__utoa>
 800bf46:	e7f1      	b.n	800bf2c <__itoa+0x10>
 800bf48:	2100      	movs	r1, #0
 800bf4a:	e7f9      	b.n	800bf40 <__itoa+0x24>

0800bf4c <itoa>:
 800bf4c:	f7ff bfe6 	b.w	800bf1c <__itoa>

0800bf50 <malloc>:
 800bf50:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <malloc+0xc>)
 800bf52:	4601      	mov	r1, r0
 800bf54:	6818      	ldr	r0, [r3, #0]
 800bf56:	f000 b823 	b.w	800bfa0 <_malloc_r>
 800bf5a:	bf00      	nop
 800bf5c:	2000010c 	.word	0x2000010c

0800bf60 <sbrk_aligned>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4e0e      	ldr	r6, [pc, #56]	; (800bf9c <sbrk_aligned+0x3c>)
 800bf64:	460c      	mov	r4, r1
 800bf66:	6831      	ldr	r1, [r6, #0]
 800bf68:	4605      	mov	r5, r0
 800bf6a:	b911      	cbnz	r1, 800bf72 <sbrk_aligned+0x12>
 800bf6c:	f000 f952 	bl	800c214 <_sbrk_r>
 800bf70:	6030      	str	r0, [r6, #0]
 800bf72:	4621      	mov	r1, r4
 800bf74:	4628      	mov	r0, r5
 800bf76:	f000 f94d 	bl	800c214 <_sbrk_r>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	d00a      	beq.n	800bf94 <sbrk_aligned+0x34>
 800bf7e:	1cc4      	adds	r4, r0, #3
 800bf80:	f024 0403 	bic.w	r4, r4, #3
 800bf84:	42a0      	cmp	r0, r4
 800bf86:	d007      	beq.n	800bf98 <sbrk_aligned+0x38>
 800bf88:	1a21      	subs	r1, r4, r0
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f000 f942 	bl	800c214 <_sbrk_r>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d101      	bne.n	800bf98 <sbrk_aligned+0x38>
 800bf94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf98:	4620      	mov	r0, r4
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	20000380 	.word	0x20000380

0800bfa0 <_malloc_r>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	1ccd      	adds	r5, r1, #3
 800bfa6:	f025 0503 	bic.w	r5, r5, #3
 800bfaa:	3508      	adds	r5, #8
 800bfac:	2d0c      	cmp	r5, #12
 800bfae:	bf38      	it	cc
 800bfb0:	250c      	movcc	r5, #12
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	db01      	blt.n	800bfbc <_malloc_r+0x1c>
 800bfb8:	42a9      	cmp	r1, r5
 800bfba:	d905      	bls.n	800bfc8 <_malloc_r+0x28>
 800bfbc:	230c      	movs	r3, #12
 800bfbe:	2600      	movs	r6, #0
 800bfc0:	603b      	str	r3, [r7, #0]
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c09c <_malloc_r+0xfc>
 800bfcc:	f000 f89c 	bl	800c108 <__malloc_lock>
 800bfd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	bb5c      	cbnz	r4, 800c030 <_malloc_r+0x90>
 800bfd8:	4629      	mov	r1, r5
 800bfda:	4638      	mov	r0, r7
 800bfdc:	f7ff ffc0 	bl	800bf60 <sbrk_aligned>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	d155      	bne.n	800c092 <_malloc_r+0xf2>
 800bfe6:	f8d8 4000 	ldr.w	r4, [r8]
 800bfea:	4626      	mov	r6, r4
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	d145      	bne.n	800c07c <_malloc_r+0xdc>
 800bff0:	2c00      	cmp	r4, #0
 800bff2:	d048      	beq.n	800c086 <_malloc_r+0xe6>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	4631      	mov	r1, r6
 800bff8:	4638      	mov	r0, r7
 800bffa:	eb04 0903 	add.w	r9, r4, r3
 800bffe:	f000 f909 	bl	800c214 <_sbrk_r>
 800c002:	4581      	cmp	r9, r0
 800c004:	d13f      	bne.n	800c086 <_malloc_r+0xe6>
 800c006:	6821      	ldr	r1, [r4, #0]
 800c008:	4638      	mov	r0, r7
 800c00a:	1a6d      	subs	r5, r5, r1
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7ff ffa7 	bl	800bf60 <sbrk_aligned>
 800c012:	3001      	adds	r0, #1
 800c014:	d037      	beq.n	800c086 <_malloc_r+0xe6>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	442b      	add	r3, r5
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	f8d8 3000 	ldr.w	r3, [r8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d038      	beq.n	800c096 <_malloc_r+0xf6>
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	42a2      	cmp	r2, r4
 800c028:	d12b      	bne.n	800c082 <_malloc_r+0xe2>
 800c02a:	2200      	movs	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
 800c02e:	e00f      	b.n	800c050 <_malloc_r+0xb0>
 800c030:	6822      	ldr	r2, [r4, #0]
 800c032:	1b52      	subs	r2, r2, r5
 800c034:	d41f      	bmi.n	800c076 <_malloc_r+0xd6>
 800c036:	2a0b      	cmp	r2, #11
 800c038:	d917      	bls.n	800c06a <_malloc_r+0xca>
 800c03a:	1961      	adds	r1, r4, r5
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	6025      	str	r5, [r4, #0]
 800c040:	bf18      	it	ne
 800c042:	6059      	strne	r1, [r3, #4]
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	bf08      	it	eq
 800c048:	f8c8 1000 	streq.w	r1, [r8]
 800c04c:	5162      	str	r2, [r4, r5]
 800c04e:	604b      	str	r3, [r1, #4]
 800c050:	4638      	mov	r0, r7
 800c052:	f104 060b 	add.w	r6, r4, #11
 800c056:	f000 f85d 	bl	800c114 <__malloc_unlock>
 800c05a:	f026 0607 	bic.w	r6, r6, #7
 800c05e:	1d23      	adds	r3, r4, #4
 800c060:	1af2      	subs	r2, r6, r3
 800c062:	d0ae      	beq.n	800bfc2 <_malloc_r+0x22>
 800c064:	1b9b      	subs	r3, r3, r6
 800c066:	50a3      	str	r3, [r4, r2]
 800c068:	e7ab      	b.n	800bfc2 <_malloc_r+0x22>
 800c06a:	42a3      	cmp	r3, r4
 800c06c:	6862      	ldr	r2, [r4, #4]
 800c06e:	d1dd      	bne.n	800c02c <_malloc_r+0x8c>
 800c070:	f8c8 2000 	str.w	r2, [r8]
 800c074:	e7ec      	b.n	800c050 <_malloc_r+0xb0>
 800c076:	4623      	mov	r3, r4
 800c078:	6864      	ldr	r4, [r4, #4]
 800c07a:	e7ac      	b.n	800bfd6 <_malloc_r+0x36>
 800c07c:	4634      	mov	r4, r6
 800c07e:	6876      	ldr	r6, [r6, #4]
 800c080:	e7b4      	b.n	800bfec <_malloc_r+0x4c>
 800c082:	4613      	mov	r3, r2
 800c084:	e7cc      	b.n	800c020 <_malloc_r+0x80>
 800c086:	230c      	movs	r3, #12
 800c088:	4638      	mov	r0, r7
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	f000 f842 	bl	800c114 <__malloc_unlock>
 800c090:	e797      	b.n	800bfc2 <_malloc_r+0x22>
 800c092:	6025      	str	r5, [r4, #0]
 800c094:	e7dc      	b.n	800c050 <_malloc_r+0xb0>
 800c096:	605b      	str	r3, [r3, #4]
 800c098:	deff      	udf	#255	; 0xff
 800c09a:	bf00      	nop
 800c09c:	2000037c 	.word	0x2000037c

0800c0a0 <sniprintf>:
 800c0a0:	b40c      	push	{r2, r3}
 800c0a2:	b530      	push	{r4, r5, lr}
 800c0a4:	4b17      	ldr	r3, [pc, #92]	; (800c104 <sniprintf+0x64>)
 800c0a6:	1e0c      	subs	r4, r1, #0
 800c0a8:	681d      	ldr	r5, [r3, #0]
 800c0aa:	b09d      	sub	sp, #116	; 0x74
 800c0ac:	da08      	bge.n	800c0c0 <sniprintf+0x20>
 800c0ae:	238b      	movs	r3, #139	; 0x8b
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	b01d      	add	sp, #116	; 0x74
 800c0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0bc:	b002      	add	sp, #8
 800c0be:	4770      	bx	lr
 800c0c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c0c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c0c8:	bf0c      	ite	eq
 800c0ca:	4623      	moveq	r3, r4
 800c0cc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0d8:	9002      	str	r0, [sp, #8]
 800c0da:	9006      	str	r0, [sp, #24]
 800c0dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	ab21      	add	r3, sp, #132	; 0x84
 800c0e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0e6:	a902      	add	r1, sp, #8
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	f000 f979 	bl	800c3e0 <_svfiprintf_r>
 800c0ee:	1c43      	adds	r3, r0, #1
 800c0f0:	bfbc      	itt	lt
 800c0f2:	238b      	movlt	r3, #139	; 0x8b
 800c0f4:	602b      	strlt	r3, [r5, #0]
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d0dd      	beq.n	800c0b6 <sniprintf+0x16>
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	701a      	strb	r2, [r3, #0]
 800c100:	e7d9      	b.n	800c0b6 <sniprintf+0x16>
 800c102:	bf00      	nop
 800c104:	2000010c 	.word	0x2000010c

0800c108 <__malloc_lock>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__malloc_lock+0x8>)
 800c10a:	f000 b8bd 	b.w	800c288 <__retarget_lock_acquire_recursive>
 800c10e:	bf00      	nop
 800c110:	200004bc 	.word	0x200004bc

0800c114 <__malloc_unlock>:
 800c114:	4801      	ldr	r0, [pc, #4]	; (800c11c <__malloc_unlock+0x8>)
 800c116:	f000 b8b8 	b.w	800c28a <__retarget_lock_release_recursive>
 800c11a:	bf00      	nop
 800c11c:	200004bc 	.word	0x200004bc

0800c120 <siprintf>:
 800c120:	b40e      	push	{r1, r2, r3}
 800c122:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c126:	b500      	push	{lr}
 800c128:	b09c      	sub	sp, #112	; 0x70
 800c12a:	ab1d      	add	r3, sp, #116	; 0x74
 800c12c:	9002      	str	r0, [sp, #8]
 800c12e:	9006      	str	r0, [sp, #24]
 800c130:	9107      	str	r1, [sp, #28]
 800c132:	9104      	str	r1, [sp, #16]
 800c134:	4808      	ldr	r0, [pc, #32]	; (800c158 <siprintf+0x38>)
 800c136:	4909      	ldr	r1, [pc, #36]	; (800c15c <siprintf+0x3c>)
 800c138:	f853 2b04 	ldr.w	r2, [r3], #4
 800c13c:	9105      	str	r1, [sp, #20]
 800c13e:	6800      	ldr	r0, [r0, #0]
 800c140:	a902      	add	r1, sp, #8
 800c142:	9301      	str	r3, [sp, #4]
 800c144:	f000 f94c 	bl	800c3e0 <_svfiprintf_r>
 800c148:	2200      	movs	r2, #0
 800c14a:	9b02      	ldr	r3, [sp, #8]
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	b01c      	add	sp, #112	; 0x70
 800c150:	f85d eb04 	ldr.w	lr, [sp], #4
 800c154:	b003      	add	sp, #12
 800c156:	4770      	bx	lr
 800c158:	2000010c 	.word	0x2000010c
 800c15c:	ffff0208 	.word	0xffff0208

0800c160 <__utoa>:
 800c160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c162:	b08b      	sub	sp, #44	; 0x2c
 800c164:	4605      	mov	r5, r0
 800c166:	460b      	mov	r3, r1
 800c168:	466e      	mov	r6, sp
 800c16a:	4c1d      	ldr	r4, [pc, #116]	; (800c1e0 <__utoa+0x80>)
 800c16c:	f104 0c20 	add.w	ip, r4, #32
 800c170:	4637      	mov	r7, r6
 800c172:	6820      	ldr	r0, [r4, #0]
 800c174:	6861      	ldr	r1, [r4, #4]
 800c176:	3408      	adds	r4, #8
 800c178:	c703      	stmia	r7!, {r0, r1}
 800c17a:	4564      	cmp	r4, ip
 800c17c:	463e      	mov	r6, r7
 800c17e:	d1f7      	bne.n	800c170 <__utoa+0x10>
 800c180:	7921      	ldrb	r1, [r4, #4]
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	7139      	strb	r1, [r7, #4]
 800c186:	1e91      	subs	r1, r2, #2
 800c188:	2922      	cmp	r1, #34	; 0x22
 800c18a:	6038      	str	r0, [r7, #0]
 800c18c:	f04f 0100 	mov.w	r1, #0
 800c190:	d904      	bls.n	800c19c <__utoa+0x3c>
 800c192:	7019      	strb	r1, [r3, #0]
 800c194:	460b      	mov	r3, r1
 800c196:	4618      	mov	r0, r3
 800c198:	b00b      	add	sp, #44	; 0x2c
 800c19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19c:	1e58      	subs	r0, r3, #1
 800c19e:	4684      	mov	ip, r0
 800c1a0:	fbb5 f7f2 	udiv	r7, r5, r2
 800c1a4:	fb02 5617 	mls	r6, r2, r7, r5
 800c1a8:	3628      	adds	r6, #40	; 0x28
 800c1aa:	446e      	add	r6, sp
 800c1ac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c1b6:	462e      	mov	r6, r5
 800c1b8:	42b2      	cmp	r2, r6
 800c1ba:	463d      	mov	r5, r7
 800c1bc:	f101 0101 	add.w	r1, r1, #1
 800c1c0:	d9ee      	bls.n	800c1a0 <__utoa+0x40>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	545a      	strb	r2, [r3, r1]
 800c1c6:	1919      	adds	r1, r3, r4
 800c1c8:	1aa5      	subs	r5, r4, r2
 800c1ca:	42aa      	cmp	r2, r5
 800c1cc:	dae3      	bge.n	800c196 <__utoa+0x36>
 800c1ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c1d2:	780e      	ldrb	r6, [r1, #0]
 800c1d4:	3201      	adds	r2, #1
 800c1d6:	7006      	strb	r6, [r0, #0]
 800c1d8:	f801 5901 	strb.w	r5, [r1], #-1
 800c1dc:	e7f4      	b.n	800c1c8 <__utoa+0x68>
 800c1de:	bf00      	nop
 800c1e0:	0800d9d6 	.word	0x0800d9d6

0800c1e4 <strcat>:
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	7814      	ldrb	r4, [r2, #0]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	2c00      	cmp	r4, #0
 800c1f0:	d1fa      	bne.n	800c1e8 <strcat+0x4>
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1fc:	2a00      	cmp	r2, #0
 800c1fe:	d1f9      	bne.n	800c1f4 <strcat+0x10>
 800c200:	bd10      	pop	{r4, pc}

0800c202 <memset>:
 800c202:	4603      	mov	r3, r0
 800c204:	4402      	add	r2, r0
 800c206:	4293      	cmp	r3, r2
 800c208:	d100      	bne.n	800c20c <memset+0xa>
 800c20a:	4770      	bx	lr
 800c20c:	f803 1b01 	strb.w	r1, [r3], #1
 800c210:	e7f9      	b.n	800c206 <memset+0x4>
	...

0800c214 <_sbrk_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	2300      	movs	r3, #0
 800c218:	4d05      	ldr	r5, [pc, #20]	; (800c230 <_sbrk_r+0x1c>)
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	f7fb ffd4 	bl	80081cc <_sbrk>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_sbrk_r+0x1a>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_sbrk_r+0x1a>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	200004c0 	.word	0x200004c0

0800c234 <__errno>:
 800c234:	4b01      	ldr	r3, [pc, #4]	; (800c23c <__errno+0x8>)
 800c236:	6818      	ldr	r0, [r3, #0]
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	2000010c 	.word	0x2000010c

0800c240 <__libc_init_array>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	2600      	movs	r6, #0
 800c244:	4d0c      	ldr	r5, [pc, #48]	; (800c278 <__libc_init_array+0x38>)
 800c246:	4c0d      	ldr	r4, [pc, #52]	; (800c27c <__libc_init_array+0x3c>)
 800c248:	1b64      	subs	r4, r4, r5
 800c24a:	10a4      	asrs	r4, r4, #2
 800c24c:	42a6      	cmp	r6, r4
 800c24e:	d109      	bne.n	800c264 <__libc_init_array+0x24>
 800c250:	f000 fbc6 	bl	800c9e0 <_init>
 800c254:	2600      	movs	r6, #0
 800c256:	4d0a      	ldr	r5, [pc, #40]	; (800c280 <__libc_init_array+0x40>)
 800c258:	4c0a      	ldr	r4, [pc, #40]	; (800c284 <__libc_init_array+0x44>)
 800c25a:	1b64      	subs	r4, r4, r5
 800c25c:	10a4      	asrs	r4, r4, #2
 800c25e:	42a6      	cmp	r6, r4
 800c260:	d105      	bne.n	800c26e <__libc_init_array+0x2e>
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	f855 3b04 	ldr.w	r3, [r5], #4
 800c268:	4798      	blx	r3
 800c26a:	3601      	adds	r6, #1
 800c26c:	e7ee      	b.n	800c24c <__libc_init_array+0xc>
 800c26e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c272:	4798      	blx	r3
 800c274:	3601      	adds	r6, #1
 800c276:	e7f2      	b.n	800c25e <__libc_init_array+0x1e>
 800c278:	0800da30 	.word	0x0800da30
 800c27c:	0800da30 	.word	0x0800da30
 800c280:	0800da30 	.word	0x0800da30
 800c284:	0800da34 	.word	0x0800da34

0800c288 <__retarget_lock_acquire_recursive>:
 800c288:	4770      	bx	lr

0800c28a <__retarget_lock_release_recursive>:
 800c28a:	4770      	bx	lr

0800c28c <strcpy>:
 800c28c:	4603      	mov	r3, r0
 800c28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c292:	f803 2b01 	strb.w	r2, [r3], #1
 800c296:	2a00      	cmp	r2, #0
 800c298:	d1f9      	bne.n	800c28e <strcpy+0x2>
 800c29a:	4770      	bx	lr

0800c29c <_free_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4605      	mov	r5, r0
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	d040      	beq.n	800c326 <_free_r+0x8a>
 800c2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a8:	1f0c      	subs	r4, r1, #4
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bfb8      	it	lt
 800c2ae:	18e4      	addlt	r4, r4, r3
 800c2b0:	f7ff ff2a 	bl	800c108 <__malloc_lock>
 800c2b4:	4a1c      	ldr	r2, [pc, #112]	; (800c328 <_free_r+0x8c>)
 800c2b6:	6813      	ldr	r3, [r2, #0]
 800c2b8:	b933      	cbnz	r3, 800c2c8 <_free_r+0x2c>
 800c2ba:	6063      	str	r3, [r4, #4]
 800c2bc:	6014      	str	r4, [r2, #0]
 800c2be:	4628      	mov	r0, r5
 800c2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c4:	f7ff bf26 	b.w	800c114 <__malloc_unlock>
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	d908      	bls.n	800c2de <_free_r+0x42>
 800c2cc:	6820      	ldr	r0, [r4, #0]
 800c2ce:	1821      	adds	r1, r4, r0
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	bf01      	itttt	eq
 800c2d4:	6819      	ldreq	r1, [r3, #0]
 800c2d6:	685b      	ldreq	r3, [r3, #4]
 800c2d8:	1809      	addeq	r1, r1, r0
 800c2da:	6021      	streq	r1, [r4, #0]
 800c2dc:	e7ed      	b.n	800c2ba <_free_r+0x1e>
 800c2de:	461a      	mov	r2, r3
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	b10b      	cbz	r3, 800c2e8 <_free_r+0x4c>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d9fa      	bls.n	800c2de <_free_r+0x42>
 800c2e8:	6811      	ldr	r1, [r2, #0]
 800c2ea:	1850      	adds	r0, r2, r1
 800c2ec:	42a0      	cmp	r0, r4
 800c2ee:	d10b      	bne.n	800c308 <_free_r+0x6c>
 800c2f0:	6820      	ldr	r0, [r4, #0]
 800c2f2:	4401      	add	r1, r0
 800c2f4:	1850      	adds	r0, r2, r1
 800c2f6:	4283      	cmp	r3, r0
 800c2f8:	6011      	str	r1, [r2, #0]
 800c2fa:	d1e0      	bne.n	800c2be <_free_r+0x22>
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4408      	add	r0, r1
 800c302:	6010      	str	r0, [r2, #0]
 800c304:	6053      	str	r3, [r2, #4]
 800c306:	e7da      	b.n	800c2be <_free_r+0x22>
 800c308:	d902      	bls.n	800c310 <_free_r+0x74>
 800c30a:	230c      	movs	r3, #12
 800c30c:	602b      	str	r3, [r5, #0]
 800c30e:	e7d6      	b.n	800c2be <_free_r+0x22>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	1821      	adds	r1, r4, r0
 800c314:	428b      	cmp	r3, r1
 800c316:	bf01      	itttt	eq
 800c318:	6819      	ldreq	r1, [r3, #0]
 800c31a:	685b      	ldreq	r3, [r3, #4]
 800c31c:	1809      	addeq	r1, r1, r0
 800c31e:	6021      	streq	r1, [r4, #0]
 800c320:	6063      	str	r3, [r4, #4]
 800c322:	6054      	str	r4, [r2, #4]
 800c324:	e7cb      	b.n	800c2be <_free_r+0x22>
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	2000037c 	.word	0x2000037c

0800c32c <__ssputs_r>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	461f      	mov	r7, r3
 800c332:	688e      	ldr	r6, [r1, #8]
 800c334:	4682      	mov	sl, r0
 800c336:	42be      	cmp	r6, r7
 800c338:	460c      	mov	r4, r1
 800c33a:	4690      	mov	r8, r2
 800c33c:	680b      	ldr	r3, [r1, #0]
 800c33e:	d82c      	bhi.n	800c39a <__ssputs_r+0x6e>
 800c340:	898a      	ldrh	r2, [r1, #12]
 800c342:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c346:	d026      	beq.n	800c396 <__ssputs_r+0x6a>
 800c348:	6965      	ldr	r5, [r4, #20]
 800c34a:	6909      	ldr	r1, [r1, #16]
 800c34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c350:	eba3 0901 	sub.w	r9, r3, r1
 800c354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c358:	1c7b      	adds	r3, r7, #1
 800c35a:	444b      	add	r3, r9
 800c35c:	106d      	asrs	r5, r5, #1
 800c35e:	429d      	cmp	r5, r3
 800c360:	bf38      	it	cc
 800c362:	461d      	movcc	r5, r3
 800c364:	0553      	lsls	r3, r2, #21
 800c366:	d527      	bpl.n	800c3b8 <__ssputs_r+0x8c>
 800c368:	4629      	mov	r1, r5
 800c36a:	f7ff fe19 	bl	800bfa0 <_malloc_r>
 800c36e:	4606      	mov	r6, r0
 800c370:	b360      	cbz	r0, 800c3cc <__ssputs_r+0xa0>
 800c372:	464a      	mov	r2, r9
 800c374:	6921      	ldr	r1, [r4, #16]
 800c376:	f000 fb1c 	bl	800c9b2 <memcpy>
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	6126      	str	r6, [r4, #16]
 800c388:	444e      	add	r6, r9
 800c38a:	6026      	str	r6, [r4, #0]
 800c38c:	463e      	mov	r6, r7
 800c38e:	6165      	str	r5, [r4, #20]
 800c390:	eba5 0509 	sub.w	r5, r5, r9
 800c394:	60a5      	str	r5, [r4, #8]
 800c396:	42be      	cmp	r6, r7
 800c398:	d900      	bls.n	800c39c <__ssputs_r+0x70>
 800c39a:	463e      	mov	r6, r7
 800c39c:	4632      	mov	r2, r6
 800c39e:	4641      	mov	r1, r8
 800c3a0:	6820      	ldr	r0, [r4, #0]
 800c3a2:	f000 fade 	bl	800c962 <memmove>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	68a3      	ldr	r3, [r4, #8]
 800c3aa:	1b9b      	subs	r3, r3, r6
 800c3ac:	60a3      	str	r3, [r4, #8]
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	4433      	add	r3, r6
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	f000 faa3 	bl	800c904 <_realloc_r>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d1e0      	bne.n	800c386 <__ssputs_r+0x5a>
 800c3c4:	4650      	mov	r0, sl
 800c3c6:	6921      	ldr	r1, [r4, #16]
 800c3c8:	f7ff ff68 	bl	800c29c <_free_r>
 800c3cc:	230c      	movs	r3, #12
 800c3ce:	f8ca 3000 	str.w	r3, [sl]
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	e7e9      	b.n	800c3b4 <__ssputs_r+0x88>

0800c3e0 <_svfiprintf_r>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	4698      	mov	r8, r3
 800c3e6:	898b      	ldrh	r3, [r1, #12]
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	061b      	lsls	r3, r3, #24
 800c3ec:	460d      	mov	r5, r1
 800c3ee:	4614      	mov	r4, r2
 800c3f0:	b09d      	sub	sp, #116	; 0x74
 800c3f2:	d50e      	bpl.n	800c412 <_svfiprintf_r+0x32>
 800c3f4:	690b      	ldr	r3, [r1, #16]
 800c3f6:	b963      	cbnz	r3, 800c412 <_svfiprintf_r+0x32>
 800c3f8:	2140      	movs	r1, #64	; 0x40
 800c3fa:	f7ff fdd1 	bl	800bfa0 <_malloc_r>
 800c3fe:	6028      	str	r0, [r5, #0]
 800c400:	6128      	str	r0, [r5, #16]
 800c402:	b920      	cbnz	r0, 800c40e <_svfiprintf_r+0x2e>
 800c404:	230c      	movs	r3, #12
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40c:	e0d0      	b.n	800c5b0 <_svfiprintf_r+0x1d0>
 800c40e:	2340      	movs	r3, #64	; 0x40
 800c410:	616b      	str	r3, [r5, #20]
 800c412:	2300      	movs	r3, #0
 800c414:	9309      	str	r3, [sp, #36]	; 0x24
 800c416:	2320      	movs	r3, #32
 800c418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c41c:	2330      	movs	r3, #48	; 0x30
 800c41e:	f04f 0901 	mov.w	r9, #1
 800c422:	f8cd 800c 	str.w	r8, [sp, #12]
 800c426:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c5c8 <_svfiprintf_r+0x1e8>
 800c42a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c42e:	4623      	mov	r3, r4
 800c430:	469a      	mov	sl, r3
 800c432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c436:	b10a      	cbz	r2, 800c43c <_svfiprintf_r+0x5c>
 800c438:	2a25      	cmp	r2, #37	; 0x25
 800c43a:	d1f9      	bne.n	800c430 <_svfiprintf_r+0x50>
 800c43c:	ebba 0b04 	subs.w	fp, sl, r4
 800c440:	d00b      	beq.n	800c45a <_svfiprintf_r+0x7a>
 800c442:	465b      	mov	r3, fp
 800c444:	4622      	mov	r2, r4
 800c446:	4629      	mov	r1, r5
 800c448:	4638      	mov	r0, r7
 800c44a:	f7ff ff6f 	bl	800c32c <__ssputs_r>
 800c44e:	3001      	adds	r0, #1
 800c450:	f000 80a9 	beq.w	800c5a6 <_svfiprintf_r+0x1c6>
 800c454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c456:	445a      	add	r2, fp
 800c458:	9209      	str	r2, [sp, #36]	; 0x24
 800c45a:	f89a 3000 	ldrb.w	r3, [sl]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 80a1 	beq.w	800c5a6 <_svfiprintf_r+0x1c6>
 800c464:	2300      	movs	r3, #0
 800c466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c46e:	f10a 0a01 	add.w	sl, sl, #1
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	9307      	str	r3, [sp, #28]
 800c476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c47a:	931a      	str	r3, [sp, #104]	; 0x68
 800c47c:	4654      	mov	r4, sl
 800c47e:	2205      	movs	r2, #5
 800c480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c484:	4850      	ldr	r0, [pc, #320]	; (800c5c8 <_svfiprintf_r+0x1e8>)
 800c486:	f000 fa86 	bl	800c996 <memchr>
 800c48a:	9a04      	ldr	r2, [sp, #16]
 800c48c:	b9d8      	cbnz	r0, 800c4c6 <_svfiprintf_r+0xe6>
 800c48e:	06d0      	lsls	r0, r2, #27
 800c490:	bf44      	itt	mi
 800c492:	2320      	movmi	r3, #32
 800c494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c498:	0711      	lsls	r1, r2, #28
 800c49a:	bf44      	itt	mi
 800c49c:	232b      	movmi	r3, #43	; 0x2b
 800c49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a8:	d015      	beq.n	800c4d6 <_svfiprintf_r+0xf6>
 800c4aa:	4654      	mov	r4, sl
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	f04f 0c0a 	mov.w	ip, #10
 800c4b2:	9a07      	ldr	r2, [sp, #28]
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ba:	3b30      	subs	r3, #48	; 0x30
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d94d      	bls.n	800c55c <_svfiprintf_r+0x17c>
 800c4c0:	b1b0      	cbz	r0, 800c4f0 <_svfiprintf_r+0x110>
 800c4c2:	9207      	str	r2, [sp, #28]
 800c4c4:	e014      	b.n	800c4f0 <_svfiprintf_r+0x110>
 800c4c6:	eba0 0308 	sub.w	r3, r0, r8
 800c4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	46a2      	mov	sl, r4
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	e7d2      	b.n	800c47c <_svfiprintf_r+0x9c>
 800c4d6:	9b03      	ldr	r3, [sp, #12]
 800c4d8:	1d19      	adds	r1, r3, #4
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	9103      	str	r1, [sp, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	bfbb      	ittet	lt
 800c4e2:	425b      	neglt	r3, r3
 800c4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4e8:	9307      	strge	r3, [sp, #28]
 800c4ea:	9307      	strlt	r3, [sp, #28]
 800c4ec:	bfb8      	it	lt
 800c4ee:	9204      	strlt	r2, [sp, #16]
 800c4f0:	7823      	ldrb	r3, [r4, #0]
 800c4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f4:	d10c      	bne.n	800c510 <_svfiprintf_r+0x130>
 800c4f6:	7863      	ldrb	r3, [r4, #1]
 800c4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fa:	d134      	bne.n	800c566 <_svfiprintf_r+0x186>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	3402      	adds	r4, #2
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	9203      	str	r2, [sp, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	bfb8      	it	lt
 800c50a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c50e:	9305      	str	r3, [sp, #20]
 800c510:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c5cc <_svfiprintf_r+0x1ec>
 800c514:	2203      	movs	r2, #3
 800c516:	4650      	mov	r0, sl
 800c518:	7821      	ldrb	r1, [r4, #0]
 800c51a:	f000 fa3c 	bl	800c996 <memchr>
 800c51e:	b138      	cbz	r0, 800c530 <_svfiprintf_r+0x150>
 800c520:	2240      	movs	r2, #64	; 0x40
 800c522:	9b04      	ldr	r3, [sp, #16]
 800c524:	eba0 000a 	sub.w	r0, r0, sl
 800c528:	4082      	lsls	r2, r0
 800c52a:	4313      	orrs	r3, r2
 800c52c:	3401      	adds	r4, #1
 800c52e:	9304      	str	r3, [sp, #16]
 800c530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c534:	2206      	movs	r2, #6
 800c536:	4826      	ldr	r0, [pc, #152]	; (800c5d0 <_svfiprintf_r+0x1f0>)
 800c538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c53c:	f000 fa2b 	bl	800c996 <memchr>
 800c540:	2800      	cmp	r0, #0
 800c542:	d038      	beq.n	800c5b6 <_svfiprintf_r+0x1d6>
 800c544:	4b23      	ldr	r3, [pc, #140]	; (800c5d4 <_svfiprintf_r+0x1f4>)
 800c546:	bb1b      	cbnz	r3, 800c590 <_svfiprintf_r+0x1b0>
 800c548:	9b03      	ldr	r3, [sp, #12]
 800c54a:	3307      	adds	r3, #7
 800c54c:	f023 0307 	bic.w	r3, r3, #7
 800c550:	3308      	adds	r3, #8
 800c552:	9303      	str	r3, [sp, #12]
 800c554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c556:	4433      	add	r3, r6
 800c558:	9309      	str	r3, [sp, #36]	; 0x24
 800c55a:	e768      	b.n	800c42e <_svfiprintf_r+0x4e>
 800c55c:	460c      	mov	r4, r1
 800c55e:	2001      	movs	r0, #1
 800c560:	fb0c 3202 	mla	r2, ip, r2, r3
 800c564:	e7a6      	b.n	800c4b4 <_svfiprintf_r+0xd4>
 800c566:	2300      	movs	r3, #0
 800c568:	f04f 0c0a 	mov.w	ip, #10
 800c56c:	4619      	mov	r1, r3
 800c56e:	3401      	adds	r4, #1
 800c570:	9305      	str	r3, [sp, #20]
 800c572:	4620      	mov	r0, r4
 800c574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c578:	3a30      	subs	r2, #48	; 0x30
 800c57a:	2a09      	cmp	r2, #9
 800c57c:	d903      	bls.n	800c586 <_svfiprintf_r+0x1a6>
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0c6      	beq.n	800c510 <_svfiprintf_r+0x130>
 800c582:	9105      	str	r1, [sp, #20]
 800c584:	e7c4      	b.n	800c510 <_svfiprintf_r+0x130>
 800c586:	4604      	mov	r4, r0
 800c588:	2301      	movs	r3, #1
 800c58a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c58e:	e7f0      	b.n	800c572 <_svfiprintf_r+0x192>
 800c590:	ab03      	add	r3, sp, #12
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	462a      	mov	r2, r5
 800c596:	4638      	mov	r0, r7
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <_svfiprintf_r+0x1f8>)
 800c59a:	a904      	add	r1, sp, #16
 800c59c:	f3af 8000 	nop.w
 800c5a0:	1c42      	adds	r2, r0, #1
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	d1d6      	bne.n	800c554 <_svfiprintf_r+0x174>
 800c5a6:	89ab      	ldrh	r3, [r5, #12]
 800c5a8:	065b      	lsls	r3, r3, #25
 800c5aa:	f53f af2d 	bmi.w	800c408 <_svfiprintf_r+0x28>
 800c5ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b0:	b01d      	add	sp, #116	; 0x74
 800c5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b6:	ab03      	add	r3, sp, #12
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4638      	mov	r0, r7
 800c5be:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <_svfiprintf_r+0x1f8>)
 800c5c0:	a904      	add	r1, sp, #16
 800c5c2:	f000 f87d 	bl	800c6c0 <_printf_i>
 800c5c6:	e7eb      	b.n	800c5a0 <_svfiprintf_r+0x1c0>
 800c5c8:	0800d9fb 	.word	0x0800d9fb
 800c5cc:	0800da01 	.word	0x0800da01
 800c5d0:	0800da05 	.word	0x0800da05
 800c5d4:	00000000 	.word	0x00000000
 800c5d8:	0800c32d 	.word	0x0800c32d

0800c5dc <_printf_common>:
 800c5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	4699      	mov	r9, r3
 800c5e4:	688a      	ldr	r2, [r1, #8]
 800c5e6:	690b      	ldr	r3, [r1, #16]
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	bfb8      	it	lt
 800c5ee:	4613      	movlt	r3, r2
 800c5f0:	6033      	str	r3, [r6, #0]
 800c5f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5fc:	b10a      	cbz	r2, 800c602 <_printf_common+0x26>
 800c5fe:	3301      	adds	r3, #1
 800c600:	6033      	str	r3, [r6, #0]
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	0699      	lsls	r1, r3, #26
 800c606:	bf42      	ittt	mi
 800c608:	6833      	ldrmi	r3, [r6, #0]
 800c60a:	3302      	addmi	r3, #2
 800c60c:	6033      	strmi	r3, [r6, #0]
 800c60e:	6825      	ldr	r5, [r4, #0]
 800c610:	f015 0506 	ands.w	r5, r5, #6
 800c614:	d106      	bne.n	800c624 <_printf_common+0x48>
 800c616:	f104 0a19 	add.w	sl, r4, #25
 800c61a:	68e3      	ldr	r3, [r4, #12]
 800c61c:	6832      	ldr	r2, [r6, #0]
 800c61e:	1a9b      	subs	r3, r3, r2
 800c620:	42ab      	cmp	r3, r5
 800c622:	dc2b      	bgt.n	800c67c <_printf_common+0xa0>
 800c624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c628:	1e13      	subs	r3, r2, #0
 800c62a:	6822      	ldr	r2, [r4, #0]
 800c62c:	bf18      	it	ne
 800c62e:	2301      	movne	r3, #1
 800c630:	0692      	lsls	r2, r2, #26
 800c632:	d430      	bmi.n	800c696 <_printf_common+0xba>
 800c634:	4649      	mov	r1, r9
 800c636:	4638      	mov	r0, r7
 800c638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c63c:	47c0      	blx	r8
 800c63e:	3001      	adds	r0, #1
 800c640:	d023      	beq.n	800c68a <_printf_common+0xae>
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	6922      	ldr	r2, [r4, #16]
 800c646:	f003 0306 	and.w	r3, r3, #6
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	bf14      	ite	ne
 800c64e:	2500      	movne	r5, #0
 800c650:	6833      	ldreq	r3, [r6, #0]
 800c652:	f04f 0600 	mov.w	r6, #0
 800c656:	bf08      	it	eq
 800c658:	68e5      	ldreq	r5, [r4, #12]
 800c65a:	f104 041a 	add.w	r4, r4, #26
 800c65e:	bf08      	it	eq
 800c660:	1aed      	subeq	r5, r5, r3
 800c662:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c666:	bf08      	it	eq
 800c668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c66c:	4293      	cmp	r3, r2
 800c66e:	bfc4      	itt	gt
 800c670:	1a9b      	subgt	r3, r3, r2
 800c672:	18ed      	addgt	r5, r5, r3
 800c674:	42b5      	cmp	r5, r6
 800c676:	d11a      	bne.n	800c6ae <_printf_common+0xd2>
 800c678:	2000      	movs	r0, #0
 800c67a:	e008      	b.n	800c68e <_printf_common+0xb2>
 800c67c:	2301      	movs	r3, #1
 800c67e:	4652      	mov	r2, sl
 800c680:	4649      	mov	r1, r9
 800c682:	4638      	mov	r0, r7
 800c684:	47c0      	blx	r8
 800c686:	3001      	adds	r0, #1
 800c688:	d103      	bne.n	800c692 <_printf_common+0xb6>
 800c68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c692:	3501      	adds	r5, #1
 800c694:	e7c1      	b.n	800c61a <_printf_common+0x3e>
 800c696:	2030      	movs	r0, #48	; 0x30
 800c698:	18e1      	adds	r1, r4, r3
 800c69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6a4:	4422      	add	r2, r4
 800c6a6:	3302      	adds	r3, #2
 800c6a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6ac:	e7c2      	b.n	800c634 <_printf_common+0x58>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	47c0      	blx	r8
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d0e6      	beq.n	800c68a <_printf_common+0xae>
 800c6bc:	3601      	adds	r6, #1
 800c6be:	e7d9      	b.n	800c674 <_printf_common+0x98>

0800c6c0 <_printf_i>:
 800c6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c4:	7e0f      	ldrb	r7, [r1, #24]
 800c6c6:	4691      	mov	r9, r2
 800c6c8:	2f78      	cmp	r7, #120	; 0x78
 800c6ca:	4680      	mov	r8, r0
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	469a      	mov	sl, r3
 800c6d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c6d6:	d807      	bhi.n	800c6e8 <_printf_i+0x28>
 800c6d8:	2f62      	cmp	r7, #98	; 0x62
 800c6da:	d80a      	bhi.n	800c6f2 <_printf_i+0x32>
 800c6dc:	2f00      	cmp	r7, #0
 800c6de:	f000 80d5 	beq.w	800c88c <_printf_i+0x1cc>
 800c6e2:	2f58      	cmp	r7, #88	; 0x58
 800c6e4:	f000 80c1 	beq.w	800c86a <_printf_i+0x1aa>
 800c6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6f0:	e03a      	b.n	800c768 <_printf_i+0xa8>
 800c6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6f6:	2b15      	cmp	r3, #21
 800c6f8:	d8f6      	bhi.n	800c6e8 <_printf_i+0x28>
 800c6fa:	a101      	add	r1, pc, #4	; (adr r1, 800c700 <_printf_i+0x40>)
 800c6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c700:	0800c759 	.word	0x0800c759
 800c704:	0800c76d 	.word	0x0800c76d
 800c708:	0800c6e9 	.word	0x0800c6e9
 800c70c:	0800c6e9 	.word	0x0800c6e9
 800c710:	0800c6e9 	.word	0x0800c6e9
 800c714:	0800c6e9 	.word	0x0800c6e9
 800c718:	0800c76d 	.word	0x0800c76d
 800c71c:	0800c6e9 	.word	0x0800c6e9
 800c720:	0800c6e9 	.word	0x0800c6e9
 800c724:	0800c6e9 	.word	0x0800c6e9
 800c728:	0800c6e9 	.word	0x0800c6e9
 800c72c:	0800c873 	.word	0x0800c873
 800c730:	0800c799 	.word	0x0800c799
 800c734:	0800c82d 	.word	0x0800c82d
 800c738:	0800c6e9 	.word	0x0800c6e9
 800c73c:	0800c6e9 	.word	0x0800c6e9
 800c740:	0800c895 	.word	0x0800c895
 800c744:	0800c6e9 	.word	0x0800c6e9
 800c748:	0800c799 	.word	0x0800c799
 800c74c:	0800c6e9 	.word	0x0800c6e9
 800c750:	0800c6e9 	.word	0x0800c6e9
 800c754:	0800c835 	.word	0x0800c835
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	1d1a      	adds	r2, r3, #4
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	602a      	str	r2, [r5, #0]
 800c760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c768:	2301      	movs	r3, #1
 800c76a:	e0a0      	b.n	800c8ae <_printf_i+0x1ee>
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	682b      	ldr	r3, [r5, #0]
 800c770:	0607      	lsls	r7, r0, #24
 800c772:	f103 0104 	add.w	r1, r3, #4
 800c776:	6029      	str	r1, [r5, #0]
 800c778:	d501      	bpl.n	800c77e <_printf_i+0xbe>
 800c77a:	681e      	ldr	r6, [r3, #0]
 800c77c:	e003      	b.n	800c786 <_printf_i+0xc6>
 800c77e:	0646      	lsls	r6, r0, #25
 800c780:	d5fb      	bpl.n	800c77a <_printf_i+0xba>
 800c782:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c786:	2e00      	cmp	r6, #0
 800c788:	da03      	bge.n	800c792 <_printf_i+0xd2>
 800c78a:	232d      	movs	r3, #45	; 0x2d
 800c78c:	4276      	negs	r6, r6
 800c78e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c792:	230a      	movs	r3, #10
 800c794:	4859      	ldr	r0, [pc, #356]	; (800c8fc <_printf_i+0x23c>)
 800c796:	e012      	b.n	800c7be <_printf_i+0xfe>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	6820      	ldr	r0, [r4, #0]
 800c79c:	1d19      	adds	r1, r3, #4
 800c79e:	6029      	str	r1, [r5, #0]
 800c7a0:	0605      	lsls	r5, r0, #24
 800c7a2:	d501      	bpl.n	800c7a8 <_printf_i+0xe8>
 800c7a4:	681e      	ldr	r6, [r3, #0]
 800c7a6:	e002      	b.n	800c7ae <_printf_i+0xee>
 800c7a8:	0641      	lsls	r1, r0, #25
 800c7aa:	d5fb      	bpl.n	800c7a4 <_printf_i+0xe4>
 800c7ac:	881e      	ldrh	r6, [r3, #0]
 800c7ae:	2f6f      	cmp	r7, #111	; 0x6f
 800c7b0:	bf0c      	ite	eq
 800c7b2:	2308      	moveq	r3, #8
 800c7b4:	230a      	movne	r3, #10
 800c7b6:	4851      	ldr	r0, [pc, #324]	; (800c8fc <_printf_i+0x23c>)
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7be:	6865      	ldr	r5, [r4, #4]
 800c7c0:	2d00      	cmp	r5, #0
 800c7c2:	bfa8      	it	ge
 800c7c4:	6821      	ldrge	r1, [r4, #0]
 800c7c6:	60a5      	str	r5, [r4, #8]
 800c7c8:	bfa4      	itt	ge
 800c7ca:	f021 0104 	bicge.w	r1, r1, #4
 800c7ce:	6021      	strge	r1, [r4, #0]
 800c7d0:	b90e      	cbnz	r6, 800c7d6 <_printf_i+0x116>
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	d04b      	beq.n	800c86e <_printf_i+0x1ae>
 800c7d6:	4615      	mov	r5, r2
 800c7d8:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7dc:	fb03 6711 	mls	r7, r3, r1, r6
 800c7e0:	5dc7      	ldrb	r7, [r0, r7]
 800c7e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7e6:	4637      	mov	r7, r6
 800c7e8:	42bb      	cmp	r3, r7
 800c7ea:	460e      	mov	r6, r1
 800c7ec:	d9f4      	bls.n	800c7d8 <_printf_i+0x118>
 800c7ee:	2b08      	cmp	r3, #8
 800c7f0:	d10b      	bne.n	800c80a <_printf_i+0x14a>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	07de      	lsls	r6, r3, #31
 800c7f6:	d508      	bpl.n	800c80a <_printf_i+0x14a>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	6861      	ldr	r1, [r4, #4]
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	bfde      	ittt	le
 800c800:	2330      	movle	r3, #48	; 0x30
 800c802:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c806:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c80a:	1b52      	subs	r2, r2, r5
 800c80c:	6122      	str	r2, [r4, #16]
 800c80e:	464b      	mov	r3, r9
 800c810:	4621      	mov	r1, r4
 800c812:	4640      	mov	r0, r8
 800c814:	f8cd a000 	str.w	sl, [sp]
 800c818:	aa03      	add	r2, sp, #12
 800c81a:	f7ff fedf 	bl	800c5dc <_printf_common>
 800c81e:	3001      	adds	r0, #1
 800c820:	d14a      	bne.n	800c8b8 <_printf_i+0x1f8>
 800c822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c826:	b004      	add	sp, #16
 800c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	f043 0320 	orr.w	r3, r3, #32
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	2778      	movs	r7, #120	; 0x78
 800c836:	4832      	ldr	r0, [pc, #200]	; (800c900 <_printf_i+0x240>)
 800c838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	6829      	ldr	r1, [r5, #0]
 800c840:	061f      	lsls	r7, r3, #24
 800c842:	f851 6b04 	ldr.w	r6, [r1], #4
 800c846:	d402      	bmi.n	800c84e <_printf_i+0x18e>
 800c848:	065f      	lsls	r7, r3, #25
 800c84a:	bf48      	it	mi
 800c84c:	b2b6      	uxthmi	r6, r6
 800c84e:	07df      	lsls	r7, r3, #31
 800c850:	bf48      	it	mi
 800c852:	f043 0320 	orrmi.w	r3, r3, #32
 800c856:	6029      	str	r1, [r5, #0]
 800c858:	bf48      	it	mi
 800c85a:	6023      	strmi	r3, [r4, #0]
 800c85c:	b91e      	cbnz	r6, 800c866 <_printf_i+0x1a6>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	f023 0320 	bic.w	r3, r3, #32
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	2310      	movs	r3, #16
 800c868:	e7a6      	b.n	800c7b8 <_printf_i+0xf8>
 800c86a:	4824      	ldr	r0, [pc, #144]	; (800c8fc <_printf_i+0x23c>)
 800c86c:	e7e4      	b.n	800c838 <_printf_i+0x178>
 800c86e:	4615      	mov	r5, r2
 800c870:	e7bd      	b.n	800c7ee <_printf_i+0x12e>
 800c872:	682b      	ldr	r3, [r5, #0]
 800c874:	6826      	ldr	r6, [r4, #0]
 800c876:	1d18      	adds	r0, r3, #4
 800c878:	6961      	ldr	r1, [r4, #20]
 800c87a:	6028      	str	r0, [r5, #0]
 800c87c:	0635      	lsls	r5, r6, #24
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	d501      	bpl.n	800c886 <_printf_i+0x1c6>
 800c882:	6019      	str	r1, [r3, #0]
 800c884:	e002      	b.n	800c88c <_printf_i+0x1cc>
 800c886:	0670      	lsls	r0, r6, #25
 800c888:	d5fb      	bpl.n	800c882 <_printf_i+0x1c2>
 800c88a:	8019      	strh	r1, [r3, #0]
 800c88c:	2300      	movs	r3, #0
 800c88e:	4615      	mov	r5, r2
 800c890:	6123      	str	r3, [r4, #16]
 800c892:	e7bc      	b.n	800c80e <_printf_i+0x14e>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	2100      	movs	r1, #0
 800c898:	1d1a      	adds	r2, r3, #4
 800c89a:	602a      	str	r2, [r5, #0]
 800c89c:	681d      	ldr	r5, [r3, #0]
 800c89e:	6862      	ldr	r2, [r4, #4]
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f000 f878 	bl	800c996 <memchr>
 800c8a6:	b108      	cbz	r0, 800c8ac <_printf_i+0x1ec>
 800c8a8:	1b40      	subs	r0, r0, r5
 800c8aa:	6060      	str	r0, [r4, #4]
 800c8ac:	6863      	ldr	r3, [r4, #4]
 800c8ae:	6123      	str	r3, [r4, #16]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8b6:	e7aa      	b.n	800c80e <_printf_i+0x14e>
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	4649      	mov	r1, r9
 800c8bc:	4640      	mov	r0, r8
 800c8be:	6923      	ldr	r3, [r4, #16]
 800c8c0:	47d0      	blx	sl
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d0ad      	beq.n	800c822 <_printf_i+0x162>
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	079b      	lsls	r3, r3, #30
 800c8ca:	d413      	bmi.n	800c8f4 <_printf_i+0x234>
 800c8cc:	68e0      	ldr	r0, [r4, #12]
 800c8ce:	9b03      	ldr	r3, [sp, #12]
 800c8d0:	4298      	cmp	r0, r3
 800c8d2:	bfb8      	it	lt
 800c8d4:	4618      	movlt	r0, r3
 800c8d6:	e7a6      	b.n	800c826 <_printf_i+0x166>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4632      	mov	r2, r6
 800c8dc:	4649      	mov	r1, r9
 800c8de:	4640      	mov	r0, r8
 800c8e0:	47d0      	blx	sl
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	d09d      	beq.n	800c822 <_printf_i+0x162>
 800c8e6:	3501      	adds	r5, #1
 800c8e8:	68e3      	ldr	r3, [r4, #12]
 800c8ea:	9903      	ldr	r1, [sp, #12]
 800c8ec:	1a5b      	subs	r3, r3, r1
 800c8ee:	42ab      	cmp	r3, r5
 800c8f0:	dcf2      	bgt.n	800c8d8 <_printf_i+0x218>
 800c8f2:	e7eb      	b.n	800c8cc <_printf_i+0x20c>
 800c8f4:	2500      	movs	r5, #0
 800c8f6:	f104 0619 	add.w	r6, r4, #25
 800c8fa:	e7f5      	b.n	800c8e8 <_printf_i+0x228>
 800c8fc:	0800da0c 	.word	0x0800da0c
 800c900:	0800da1d 	.word	0x0800da1d

0800c904 <_realloc_r>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	4680      	mov	r8, r0
 800c90a:	4614      	mov	r4, r2
 800c90c:	460e      	mov	r6, r1
 800c90e:	b921      	cbnz	r1, 800c91a <_realloc_r+0x16>
 800c910:	4611      	mov	r1, r2
 800c912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c916:	f7ff bb43 	b.w	800bfa0 <_malloc_r>
 800c91a:	b92a      	cbnz	r2, 800c928 <_realloc_r+0x24>
 800c91c:	f7ff fcbe 	bl	800c29c <_free_r>
 800c920:	4625      	mov	r5, r4
 800c922:	4628      	mov	r0, r5
 800c924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c928:	f000 f851 	bl	800c9ce <_malloc_usable_size_r>
 800c92c:	4284      	cmp	r4, r0
 800c92e:	4607      	mov	r7, r0
 800c930:	d802      	bhi.n	800c938 <_realloc_r+0x34>
 800c932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c936:	d812      	bhi.n	800c95e <_realloc_r+0x5a>
 800c938:	4621      	mov	r1, r4
 800c93a:	4640      	mov	r0, r8
 800c93c:	f7ff fb30 	bl	800bfa0 <_malloc_r>
 800c940:	4605      	mov	r5, r0
 800c942:	2800      	cmp	r0, #0
 800c944:	d0ed      	beq.n	800c922 <_realloc_r+0x1e>
 800c946:	42bc      	cmp	r4, r7
 800c948:	4622      	mov	r2, r4
 800c94a:	4631      	mov	r1, r6
 800c94c:	bf28      	it	cs
 800c94e:	463a      	movcs	r2, r7
 800c950:	f000 f82f 	bl	800c9b2 <memcpy>
 800c954:	4631      	mov	r1, r6
 800c956:	4640      	mov	r0, r8
 800c958:	f7ff fca0 	bl	800c29c <_free_r>
 800c95c:	e7e1      	b.n	800c922 <_realloc_r+0x1e>
 800c95e:	4635      	mov	r5, r6
 800c960:	e7df      	b.n	800c922 <_realloc_r+0x1e>

0800c962 <memmove>:
 800c962:	4288      	cmp	r0, r1
 800c964:	b510      	push	{r4, lr}
 800c966:	eb01 0402 	add.w	r4, r1, r2
 800c96a:	d902      	bls.n	800c972 <memmove+0x10>
 800c96c:	4284      	cmp	r4, r0
 800c96e:	4623      	mov	r3, r4
 800c970:	d807      	bhi.n	800c982 <memmove+0x20>
 800c972:	1e43      	subs	r3, r0, #1
 800c974:	42a1      	cmp	r1, r4
 800c976:	d008      	beq.n	800c98a <memmove+0x28>
 800c978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c97c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c980:	e7f8      	b.n	800c974 <memmove+0x12>
 800c982:	4601      	mov	r1, r0
 800c984:	4402      	add	r2, r0
 800c986:	428a      	cmp	r2, r1
 800c988:	d100      	bne.n	800c98c <memmove+0x2a>
 800c98a:	bd10      	pop	{r4, pc}
 800c98c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c990:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c994:	e7f7      	b.n	800c986 <memmove+0x24>

0800c996 <memchr>:
 800c996:	4603      	mov	r3, r0
 800c998:	b510      	push	{r4, lr}
 800c99a:	b2c9      	uxtb	r1, r1
 800c99c:	4402      	add	r2, r0
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	d101      	bne.n	800c9a8 <memchr+0x12>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e003      	b.n	800c9b0 <memchr+0x1a>
 800c9a8:	7804      	ldrb	r4, [r0, #0]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	428c      	cmp	r4, r1
 800c9ae:	d1f6      	bne.n	800c99e <memchr+0x8>
 800c9b0:	bd10      	pop	{r4, pc}

0800c9b2 <memcpy>:
 800c9b2:	440a      	add	r2, r1
 800c9b4:	4291      	cmp	r1, r2
 800c9b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c9ba:	d100      	bne.n	800c9be <memcpy+0xc>
 800c9bc:	4770      	bx	lr
 800c9be:	b510      	push	{r4, lr}
 800c9c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9c4:	4291      	cmp	r1, r2
 800c9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ca:	d1f9      	bne.n	800c9c0 <memcpy+0xe>
 800c9cc:	bd10      	pop	{r4, pc}

0800c9ce <_malloc_usable_size_r>:
 800c9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d2:	1f18      	subs	r0, r3, #4
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bfbc      	itt	lt
 800c9d8:	580b      	ldrlt	r3, [r1, r0]
 800c9da:	18c0      	addlt	r0, r0, r3
 800c9dc:	4770      	bx	lr
	...

0800c9e0 <_init>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr

0800c9ec <_fini>:
 800c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ee:	bf00      	nop
 800c9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f2:	bc08      	pop	{r3}
 800c9f4:	469e      	mov	lr, r3
 800c9f6:	4770      	bx	lr
