
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d000  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000107c  0800d1e4  0800d1e4  0001d1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e260  0800e260  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e260  0800e260  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e260  0800e260  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e260  0800e260  0001e260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e264  0800e264  0001e264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800e268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  2000013c  0800e3a4  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800e3a4  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001744e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357a  00000000  00000000  000375f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e96  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c77d  00000000  00000000  0003ccce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c907  00000000  00000000  0005944b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fa82  00000000  00000000  00075d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d0  00000000  00000000  001157d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000013c 	.word	0x2000013c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d1cc 	.word	0x0800d1cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000140 	.word	0x20000140
 8000220:	0800d1cc 	.word	0x0800d1cc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fdaa 	bl	8009da8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fc22 	bl	8008aa0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000158 	.word	0x20000158
 80004bc:	200003b4 	.word	0x200003b4
 80004c0:	20000205 	.word	0x20000205
 80004c4:	2000022d 	.word	0x2000022d
 80004c8:	20000230 	.word	0x20000230
 80004cc:	20000231 	.word	0x20000231
 80004d0:	20000232 	.word	0x20000232
 80004d4:	20000233 	.word	0x20000233
 80004d8:	20000234 	.word	0x20000234
 80004dc:	20000235 	.word	0x20000235
 80004e0:	20000245 	.word	0x20000245
 80004e4:	20000236 	.word	0x20000236
 80004e8:	20000246 	.word	0x20000246
 80004ec:	20000237 	.word	0x20000237
 80004f0:	20000247 	.word	0x20000247
 80004f4:	2000023a 	.word	0x2000023a
 80004f8:	2000023b 	.word	0x2000023b
 80004fc:	2000023c 	.word	0x2000023c
 8000500:	2000023d 	.word	0x2000023d
 8000504:	2000023e 	.word	0x2000023e
 8000508:	2000023f 	.word	0x2000023f
 800050c:	20000240 	.word	0x20000240
 8000510:	20000241 	.word	0x20000241
 8000514:	20000242 	.word	0x20000242
 8000518:	20000243 	.word	0x20000243
 800051c:	20000244 	.word	0x20000244
 8000520:	20000248 	.word	0x20000248
 8000524:	2000024a 	.word	0x2000024a
 8000528:	20000228 	.word	0x20000228
 800052c:	20000229 	.word	0x20000229
 8000530:	2000022a 	.word	0x2000022a
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000022b 	.word	0x2000022b
 8000540:	2000024d 	.word	0x2000024d
 8000544:	2000024b 	.word	0x2000024b
 8000548:	20000239 	.word	0x20000239
 800054c:	2000024c 	.word	0x2000024c
 8000550:	20000238 	.word	0x20000238
 8000554:	2000024e 	.word	0x2000024e
 8000558:	2000024f 	.word	0x2000024f
 800055c:	20000250 	.word	0x20000250
 8000560:	20000251 	.word	0x20000251
 8000564:	20000252 	.word	0x20000252
 8000568:	20000253 	.word	0x20000253
 800056c:	20000254 	.word	0x20000254
 8000570:	20000255 	.word	0x20000255
 8000574:	20000256 	.word	0x20000256
 8000578:	20000257 	.word	0x20000257
 800057c:	20000204 	.word	0x20000204
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	; (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	; (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	; (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	; (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	; (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	; (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	; (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f9f0 	bl	8008aa0 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f9ea 	bl	8008aa0 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f9e4 	bl	8008aa0 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fc0d 	bl	8006efc <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000245 	.word	0x20000245
 80006ec:	20000236 	.word	0x20000236
 80006f0:	20000246 	.word	0x20000246
 80006f4:	20000237 	.word	0x20000237
 80006f8:	20000239 	.word	0x20000239
 80006fc:	20000247 	.word	0x20000247
 8000700:	2000023a 	.word	0x2000023a
 8000704:	2000023b 	.word	0x2000023b
 8000708:	2000023c 	.word	0x2000023c
 800070c:	2000023d 	.word	0x2000023d
 8000710:	2000023e 	.word	0x2000023e
 8000714:	2000023f 	.word	0x2000023f
 8000718:	20000240 	.word	0x20000240
 800071c:	20000241 	.word	0x20000241
 8000720:	20000242 	.word	0x20000242
 8000724:	20000243 	.word	0x20000243
 8000728:	20000244 	.word	0x20000244
 800072c:	20000248 	.word	0x20000248
 8000730:	2000024a 	.word	0x2000024a
 8000734:	2000024c 	.word	0x2000024c
 8000738:	2000024d 	.word	0x2000024d
 800073c:	2000024b 	.word	0x2000024b

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	; 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	; (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	; (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	; (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	; 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000158 	.word	0x20000158
 8000828:	20000010 	.word	0x20000010
 800082c:	200001d0 	.word	0x200001d0
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	200001dc 	.word	0x200001dc
 800083c:	2000000c 	.word	0x2000000c
 8000840:	200001f0 	.word	0x200001f0

08000844 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b09f      	sub	sp, #124	; 0x7c
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000850:	4948      	ldr	r1, [pc, #288]	; (8000974 <ESP8266_Init+0x130>)
 8000852:	4849      	ldr	r0, [pc, #292]	; (8000978 <ESP8266_Init+0x134>)
 8000854:	f00c f832 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <ESP8266_Init+0x134>)
 800085a:	f7ff fce3 	bl	8000224 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4944      	ldr	r1, [pc, #272]	; (8000978 <ESP8266_Init+0x134>)
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f00b f9e6 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f008 f916 	bl	8008aa0 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000874:	4941      	ldr	r1, [pc, #260]	; (800097c <ESP8266_Init+0x138>)
 8000876:	4840      	ldr	r0, [pc, #256]	; (8000978 <ESP8266_Init+0x134>)
 8000878:	f00c f820 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800087c:	483e      	ldr	r0, [pc, #248]	; (8000978 <ESP8266_Init+0x134>)
 800087e:	f7ff fcd1 	bl	8000224 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	493b      	ldr	r1, [pc, #236]	; (8000978 <ESP8266_Init+0x134>)
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f00b f9d4 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000894:	f008 f904 	bl	8008aa0 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000898:	4939      	ldr	r1, [pc, #228]	; (8000980 <ESP8266_Init+0x13c>)
 800089a:	4837      	ldr	r0, [pc, #220]	; (8000978 <ESP8266_Init+0x134>)
 800089c:	f00c f80e 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a0:	4835      	ldr	r0, [pc, #212]	; (8000978 <ESP8266_Init+0x134>)
 80008a2:	f7ff fcbf 	bl	8000224 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4932      	ldr	r1, [pc, #200]	; (8000978 <ESP8266_Init+0x134>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f00b f9c2 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b8:	f008 f8f2 	bl	8008aa0 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008bc:	4931      	ldr	r1, [pc, #196]	; (8000984 <ESP8266_Init+0x140>)
 80008be:	482e      	ldr	r0, [pc, #184]	; (8000978 <ESP8266_Init+0x134>)
 80008c0:	f00b fffc 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <ESP8266_Init+0x134>)
 80008c6:	f7ff fcad 	bl	8000224 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4929      	ldr	r1, [pc, #164]	; (8000978 <ESP8266_Init+0x134>)
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f00b f9b0 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008dc:	f008 f8e0 	bl	8008aa0 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <ESP8266_Init+0x144>)
 80008e6:	461c      	mov	r4, r3
 80008e8:	4613      	mov	r3, r2
 80008ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ec:	c407      	stmia	r4!, {r0, r1, r2}
 80008ee:	8023      	strh	r3, [r4, #0]
 80008f0:	3402      	adds	r4, #2
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00c f83f 	bl	800c980 <strcat>
	strcat(str, "\",\"");
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8c 	bl	8000224 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4413      	add	r3, r2
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <ESP8266_Init+0x148>)
 8000918:	6810      	ldr	r0, [r2, #0]
 800091a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f00c f82c 	bl	800c980 <strcat>
	strcat(str, "\"\r\n");
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc79 	bl	8000224 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4413      	add	r3, r2
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <ESP8266_Init+0x14c>)
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	461a      	mov	r2, r3
 8000948:	4912      	ldr	r1, [pc, #72]	; (8000994 <ESP8266_Init+0x150>)
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <ESP8266_Init+0x134>)
 800094c:	f00b ffb6 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <ESP8266_Init+0x134>)
 8000952:	f7ff fc67 	bl	8000224 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29b      	uxth	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <ESP8266_Init+0x134>)
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f00b f96a 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000964:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000968:	f008 f89a 	bl	8008aa0 <HAL_Delay>
}
 800096c:	bf00      	nop
 800096e:	377c      	adds	r7, #124	; 0x7c
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	0800d1e4 	.word	0x0800d1e4
 8000978:	20000290 	.word	0x20000290
 800097c:	0800d1f4 	.word	0x0800d1f4
 8000980:	0800d200 	.word	0x0800d200
 8000984:	0800d208 	.word	0x0800d208
 8000988:	0800d218 	.word	0x0800d218
 800098c:	0800d228 	.word	0x0800d228
 8000990:	0800d22c 	.word	0x0800d22c
 8000994:	0800d230 	.word	0x0800d230

08000998 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800099e:	af04      	add	r7, sp, #16
 80009a0:	f507 7414 	add.w	r4, r7, #592	; 0x250
 80009a4:	f5a4 7411 	sub.w	r4, r4, #580	; 0x244
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80009ae:	f5a0 7012 	sub.w	r0, r0, #584	; 0x248
 80009b2:	6001      	str	r1, [r0, #0]
 80009b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80009b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80009bc:	600a      	str	r2, [r1, #0]
 80009be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80009c2:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80009c6:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 80009c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009cc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80009d0:	f107 0014 	add.w	r0, r7, #20
 80009d4:	220c      	movs	r2, #12
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	f00b ffe1 	bl	800c99e <strncpy>
	subMachineID[12] = '\0';
 80009dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009e0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e8:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <sendMachineData+0x128>)
 80009ea:	4936      	ldr	r1, [pc, #216]	; (8000ac4 <sendMachineData+0x12c>)
 80009ec:	4836      	ldr	r0, [pc, #216]	; (8000ac8 <sendMachineData+0x130>)
 80009ee:	f00b ff65 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f2:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <sendMachineData+0x130>)
 80009f4:	f7ff fc16 	bl	8000224 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a00:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a04:	4930      	ldr	r1, [pc, #192]	; (8000ac8 <sendMachineData+0x130>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f00b f916 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a0c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a10:	f008 f846 	bl	8008aa0 <HAL_Delay>

	sprintf(local_txA,
 8000a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000a1c:	f107 0114 	add.w	r1, r7, #20
 8000a20:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000a24:	4a29      	ldr	r2, [pc, #164]	; (8000acc <sendMachineData+0x134>)
 8000a26:	9202      	str	r2, [sp, #8]
 8000a28:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000a32:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	4924      	ldr	r1, [pc, #144]	; (8000ad0 <sendMachineData+0x138>)
 8000a40:	f00b ff3c 	bl	800c8bc <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbeb 	bl	8000224 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000a5c:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <sendMachineData+0x13c>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00b ff2c 	bl	800c8bc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbdb 	bl	8000224 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00b f8da 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a84:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a88:	f008 f80a 	bl	8008aa0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbc7 	bl	8000224 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000aa2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f00b f8c6 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ab0:	f007 fff6 	bl	8008aa0 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0800d234 	.word	0x0800d234
 8000ac4:	0800d244 	.word	0x0800d244
 8000ac8:	20000290 	.word	0x20000290
 8000acc:	0800d2d8 	.word	0x0800d2d8
 8000ad0:	0800d264 	.word	0x0800d264
 8000ad4:	0800d2ec 	.word	0x0800d2ec

08000ad8 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	f6ad 2d18 	subw	sp, sp, #2584	; 0xa18
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000ae4:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000ae8:	6018      	str	r0, [r3, #0]
 8000aea:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000aee:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000af2:	6019      	str	r1, [r3, #0]
	int len;

	char bufferRX[2000];

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000af4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000af8:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	220c      	movs	r2, #12
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	f00b ff4b 	bl	800c99e <strncpy>
	subMachineID[12] = '\0';
 8000b08:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b0c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8000b10:	2200      	movs	r2, #0
 8000b12:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b14:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <checkMachineID+0x13c>)
 8000b16:	4940      	ldr	r1, [pc, #256]	; (8000c18 <checkMachineID+0x140>)
 8000b18:	4840      	ldr	r0, [pc, #256]	; (8000c1c <checkMachineID+0x144>)
 8000b1a:	f00b fecf 	bl	800c8bc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b1e:	483f      	ldr	r0, [pc, #252]	; (8000c1c <checkMachineID+0x144>)
 8000b20:	f7ff fb80 	bl	8000224 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b2c:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b30:	493a      	ldr	r1, [pc, #232]	; (8000c1c <checkMachineID+0x144>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	f00b f880 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f007 ffb0 	bl	8008aa0 <HAL_Delay>

	sprintf(local_txA,
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f507 6002 	add.w	r0, r7, #2080	; 0x820
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <checkMachineID+0x148>)
 8000b4a:	4936      	ldr	r1, [pc, #216]	; (8000c24 <checkMachineID+0x14c>)
 8000b4c:	f00b feb6 	bl	800c8bc <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);
	len = strlen(local_txA);
 8000b50:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b60:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b64:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 8000b68:	492f      	ldr	r1, [pc, #188]	; (8000c28 <checkMachineID+0x150>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00b fea6 	bl	800c8bc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b70:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb55 	bl	8000224 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f207 71ec 	addw	r1, r7, #2028	; 0x7ec
 8000b82:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b86:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f00b f854 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b90:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b94:	f007 ff84 	bl	8008aa0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b98:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb41 	bl	8000224 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8000baa:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bae:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	f00b f840 	bl	800bc38 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000bb8:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bbc:	f007 ff70 	bl	8008aa0 <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000bc0:	f107 011c 	add.w	r1, r7, #28
 8000bc4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bc8:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f00b f866 	bl	800bca2 <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000bd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bda:	f007 ff61 	bl	8008aa0 <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") || strstr(bufferRX, "HTTP/1.0 200 OK")) {
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4912      	ldr	r1, [pc, #72]	; (8000c2c <checkMachineID+0x154>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00b feed 	bl	800c9c4 <strstr>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d108      	bne.n	8000c02 <checkMachineID+0x12a>
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	490e      	ldr	r1, [pc, #56]	; (8000c30 <checkMachineID+0x158>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00b fee4 	bl	800c9c4 <strstr>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <checkMachineID+0x12e>
	    return 1; // Başarılı yanıt
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <checkMachineID+0x130>
	}

	return 0; // Yanıt başarısız
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f607 2718 	addw	r7, r7, #2584	; 0xa18
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800d234 	.word	0x0800d234
 8000c18:	0800d244 	.word	0x0800d244
 8000c1c:	20000290 	.word	0x20000290
 8000c20:	0800d2d8 	.word	0x0800d2d8
 8000c24:	0800d2fc 	.word	0x0800d2fc
 8000c28:	0800d2ec 	.word	0x0800d2ec
 8000c2c:	0800d340 	.word	0x0800d340
 8000c30:	0800d350 	.word	0x0800d350

08000c34 <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c52:	f000 f929 	bl	8000ea8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c56:	e000      	b.n	8000c5a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c58:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e012      	b.n	8000c86 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	4918      	ldr	r1, [pc, #96]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	54ca      	strb	r2, [r1, r3]
					break;
 8000c7e:	e007      	b.n	8000c90 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbe7      	blt.n	8000c60 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <hata2EEPROM+0xa8>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	b292      	uxth	r2, r2
 8000caa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000cae:	9402      	str	r4, [sp, #8]
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	21a0      	movs	r1, #160	; 0xa0
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <hata2EEPROM+0xac>)
 8000cbc:	f008 ff7a 	bl	8009bb4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc4:	f007 feec 	bl	8008aa0 <HAL_Delay>
	eepromKontrol();
 8000cc8:	f7ff fab4 	bl	8000234 <eepromKontrol>
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000098 	.word	0x20000098
 8000cd8:	2000009c 	.word	0x2000009c
 8000cdc:	20000158 	.word	0x20000158
 8000ce0:	200003b4 	.word	0x200003b4

08000ce4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d11d      	bne.n	8000d30 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000cf4:	4b62      	ldr	r3, [pc, #392]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000cfc:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2001      	movs	r0, #1
 8000d02:	f007 f977 	bl	8007ff4 <lcd_print>
 8000d06:	e008      	b.n	8000d1a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000d08:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d104      	bne.n	8000d1a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000d10:	4a5d      	ldr	r2, [pc, #372]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	2001      	movs	r0, #1
 8000d16:	f007 f96d 	bl	8007ff4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000d1a:	4a5c      	ldr	r2, [pc, #368]	; (8000e8c <hataKoduLcdGoster+0x1a8>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f007 f968 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d24:	4a5a      	ldr	r2, [pc, #360]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d26:	2107      	movs	r1, #7
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f007 f963 	bl	8007ff4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d2e:	e0a3      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d11d      	bne.n	8000d72 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000d3e:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	2001      	movs	r0, #1
 8000d44:	f007 f956 	bl	8007ff4 <lcd_print>
 8000d48:	e008      	b.n	8000d5c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000d52:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	2001      	movs	r0, #1
 8000d58:	f007 f94c 	bl	8007ff4 <lcd_print>
		lcd_print(2, 2, "2");
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <hataKoduLcdGoster+0x1b0>)
 8000d5e:	2102      	movs	r1, #2
 8000d60:	2002      	movs	r0, #2
 8000d62:	f007 f947 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d68:	2107      	movs	r1, #7
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f007 f942 	bl	8007ff4 <lcd_print>
}
 8000d70:	e082      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d11d      	bne.n	8000db4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d78:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 f935 	bl	8007ff4 <lcd_print>
 8000d8a:	e008      	b.n	8000d9e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d104      	bne.n	8000d9e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f007 f92b 	bl	8007ff4 <lcd_print>
		lcd_print(2, 3, "3");
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <hataKoduLcdGoster+0x1b4>)
 8000da0:	2103      	movs	r1, #3
 8000da2:	2002      	movs	r0, #2
 8000da4:	f007 f926 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000daa:	2107      	movs	r1, #7
 8000dac:	2002      	movs	r0, #2
 8000dae:	f007 f921 	bl	8007ff4 <lcd_print>
}
 8000db2:	e061      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d11d      	bne.n	8000df6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f007 f914 	bl	8007ff4 <lcd_print>
 8000dcc:	e008      	b.n	8000de0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f007 f90a 	bl	8007ff4 <lcd_print>
		lcd_print(2, 4, "4");
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <hataKoduLcdGoster+0x1b8>)
 8000de2:	2104      	movs	r1, #4
 8000de4:	2002      	movs	r0, #2
 8000de6:	f007 f905 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000dec:	2107      	movs	r1, #7
 8000dee:	2002      	movs	r0, #2
 8000df0:	f007 f900 	bl	8007ff4 <lcd_print>
}
 8000df4:	e040      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d11d      	bne.n	8000e38 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f007 f8f3 	bl	8007ff4 <lcd_print>
 8000e0e:	e008      	b.n	8000e22 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d104      	bne.n	8000e22 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 f8e9 	bl	8007ff4 <lcd_print>
		lcd_print(2, 5, "5");
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <hataKoduLcdGoster+0x1bc>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	2002      	movs	r0, #2
 8000e28:	f007 f8e4 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e2e:	2107      	movs	r1, #7
 8000e30:	2002      	movs	r0, #2
 8000e32:	f007 f8df 	bl	8007ff4 <lcd_print>
}
 8000e36:	e01f      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d11c      	bne.n	8000e78 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f007 f8d2 	bl	8007ff4 <lcd_print>
 8000e50:	e008      	b.n	8000e64 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d104      	bne.n	8000e64 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f007 f8c8 	bl	8007ff4 <lcd_print>
		lcd_print(2, 6, "6");
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <hataKoduLcdGoster+0x1c0>)
 8000e66:	2106      	movs	r1, #6
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 f8c3 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e70:	2107      	movs	r1, #7
 8000e72:	2002      	movs	r0, #2
 8000e74:	f007 f8be 	bl	8007ff4 <lcd_print>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000024d 	.word	0x2000024d
 8000e84:	0800d360 	.word	0x0800d360
 8000e88:	0800d370 	.word	0x0800d370
 8000e8c:	0800d380 	.word	0x0800d380
 8000e90:	0800d384 	.word	0x0800d384
 8000e94:	0800d390 	.word	0x0800d390
 8000e98:	0800d394 	.word	0x0800d394
 8000e9c:	0800d398 	.word	0x0800d398
 8000ea0:	0800d39c 	.word	0x0800d39c
 8000ea4:	0800d3a0 	.word	0x0800d3a0

08000ea8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e009      	b.n	8000ec8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <eepromDataFillWithEmpty+0x38>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <eepromDataFillWithEmpty+0x3c>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <eepromDataFillWithEmpty+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbf0      	blt.n	8000eb4 <eepromDataFillWithEmpty+0xc>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000070 	.word	0x20000070
 8000ee4:	20000158 	.word	0x20000158
 8000ee8:	20000098 	.word	0x20000098

08000eec <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <i2cTest+0x154>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <i2cTest+0x154>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f0e:	484c      	ldr	r0, [pc, #304]	; (8001040 <i2cTest+0x154>)
 8000f10:	f008 fd22 	bl	8009958 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f14:	23c0      	movs	r3, #192	; 0xc0
 8000f16:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f18:	2311      	movs	r3, #17
 8000f1a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4846      	ldr	r0, [pc, #280]	; (8001044 <i2cTest+0x158>)
 8000f2a:	f008 f929 	bl	8009180 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <i2cTest+0x158>)
 8000f34:	f008 fb9b 	bl	800966e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4841      	ldr	r0, [pc, #260]	; (8001044 <i2cTest+0x158>)
 8000f3e:	f008 fb96 	bl	800966e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f007 fdac 	bl	8008aa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f48:	bf00      	nop
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	483d      	ldr	r0, [pc, #244]	; (8001044 <i2cTest+0x158>)
 8000f4e:	f008 fb77 	bl	8009640 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d006      	beq.n	8000f66 <i2cTest+0x7a>
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	483a      	ldr	r0, [pc, #232]	; (8001044 <i2cTest+0x158>)
 8000f5c:	f008 fb70 	bl	8009640 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d1f1      	bne.n	8000f4a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4836      	ldr	r0, [pc, #216]	; (8001044 <i2cTest+0x158>)
 8000f6c:	f008 fb7f 	bl	800966e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f007 fd95 	bl	8008aa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f76:	bf00      	nop
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <i2cTest+0x158>)
 8000f7c:	f008 fb60 	bl	8009640 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d0f8      	beq.n	8000f78 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <i2cTest+0x158>)
 8000f8c:	f008 fb6f 	bl	800966e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f007 fd85 	bl	8008aa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f96:	bf00      	nop
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <i2cTest+0x158>)
 8000f9c:	f008 fb50 	bl	8009640 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d0f8      	beq.n	8000f98 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <i2cTest+0x158>)
 8000fac:	f008 fb5f 	bl	800966e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f007 fd75 	bl	8008aa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000fb6:	bf00      	nop
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <i2cTest+0x158>)
 8000fbc:	f008 fb40 	bl	8009640 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d1f8      	bne.n	8000fb8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <i2cTest+0x158>)
 8000fcc:	f008 fb4f 	bl	800966e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f007 fd65 	bl	8008aa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fd6:	bf00      	nop
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	481a      	ldr	r0, [pc, #104]	; (8001044 <i2cTest+0x158>)
 8000fdc:	f008 fb30 	bl	8009640 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d1f8      	bne.n	8000fd8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <i2cTest+0x158>)
 8000ffc:	f008 f8c0 	bl	8009180 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <i2cTest+0x154>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <i2cTest+0x154>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800100e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <i2cTest+0x154>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <i2cTest+0x154>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800101e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <i2cTest+0x154>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <i2cTest+0x154>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <i2cTest+0x154>)
 8001032:	f008 fb4d 	bl	80096d0 <HAL_I2C_Init>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003b4 	.word	0x200003b4
 8001044:	40010c00 	.word	0x40010c00

08001048 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f007 fd24 	bl	8008aa0 <HAL_Delay>
	lcd_clear();
 8001058:	f006 fff8 	bl	800804c <lcd_clear>
	if(type == 1 && page == 0) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d13e      	bne.n	80010e0 <printTemplate+0x98>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d13b      	bne.n	80010e0 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001068:	4a81      	ldr	r2, [pc, #516]	; (8001270 <printTemplate+0x228>)
 800106a:	2101      	movs	r1, #1
 800106c:	2001      	movs	r0, #1
 800106e:	f006 ffc1 	bl	8007ff4 <lcd_print>
		lcd_print(2, 3, "0");
 8001072:	4a80      	ldr	r2, [pc, #512]	; (8001274 <printTemplate+0x22c>)
 8001074:	2103      	movs	r1, #3
 8001076:	2002      	movs	r0, #2
 8001078:	f006 ffbc 	bl	8007ff4 <lcd_print>
		lcd_print(2, 4, "1");
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <printTemplate+0x230>)
 800107e:	2104      	movs	r1, #4
 8001080:	2002      	movs	r0, #2
 8001082:	f006 ffb7 	bl	8007ff4 <lcd_print>
		lcd_print(2, 5, "2");
 8001086:	4a7d      	ldr	r2, [pc, #500]	; (800127c <printTemplate+0x234>)
 8001088:	2105      	movs	r1, #5
 800108a:	2002      	movs	r0, #2
 800108c:	f006 ffb2 	bl	8007ff4 <lcd_print>
		lcd_print(2, 6, "3");
 8001090:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <printTemplate+0x238>)
 8001092:	2106      	movs	r1, #6
 8001094:	2002      	movs	r0, #2
 8001096:	f006 ffad 	bl	8007ff4 <lcd_print>
		lcd_print(2, 7, "4");
 800109a:	4a7a      	ldr	r2, [pc, #488]	; (8001284 <printTemplate+0x23c>)
 800109c:	2107      	movs	r1, #7
 800109e:	2002      	movs	r0, #2
 80010a0:	f006 ffa8 	bl	8007ff4 <lcd_print>
		lcd_print(2, 10, "5");
 80010a4:	4a78      	ldr	r2, [pc, #480]	; (8001288 <printTemplate+0x240>)
 80010a6:	210a      	movs	r1, #10
 80010a8:	2002      	movs	r0, #2
 80010aa:	f006 ffa3 	bl	8007ff4 <lcd_print>
		lcd_print(2, 11, "6");
 80010ae:	4a77      	ldr	r2, [pc, #476]	; (800128c <printTemplate+0x244>)
 80010b0:	210b      	movs	r1, #11
 80010b2:	2002      	movs	r0, #2
 80010b4:	f006 ff9e 	bl	8007ff4 <lcd_print>
		lcd_print(2, 12, "7");
 80010b8:	4a75      	ldr	r2, [pc, #468]	; (8001290 <printTemplate+0x248>)
 80010ba:	210c      	movs	r1, #12
 80010bc:	2002      	movs	r0, #2
 80010be:	f006 ff99 	bl	8007ff4 <lcd_print>
		lcd_print(2, 13, "8");
 80010c2:	4a74      	ldr	r2, [pc, #464]	; (8001294 <printTemplate+0x24c>)
 80010c4:	210d      	movs	r1, #13
 80010c6:	2002      	movs	r0, #2
 80010c8:	f006 ff94 	bl	8007ff4 <lcd_print>
		lcd_print(2, 14, "9");
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <printTemplate+0x250>)
 80010ce:	210e      	movs	r1, #14
 80010d0:	2002      	movs	r0, #2
 80010d2:	f006 ff8f 	bl	8007ff4 <lcd_print>
		lcd_gotoxy(2, 3);
 80010d6:	2103      	movs	r1, #3
 80010d8:	2002      	movs	r0, #2
 80010da:	f006 ff6c 	bl	8007fb6 <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80010de:	e0c2      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d15e      	bne.n	80011a4 <printTemplate+0x15c>
		if(page == 1) {
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10f      	bne.n	800110c <printTemplate+0xc4>
			lcd_clear();
 80010ec:	f006 ffae 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f007 fcd5 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <printTemplate+0x254>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2001      	movs	r0, #1
 80010fc:	f006 ff7a 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <printTemplate+0x258>)
 8001102:	2101      	movs	r1, #1
 8001104:	2002      	movs	r0, #2
 8001106:	f006 ff75 	bl	8007ff4 <lcd_print>
}
 800110a:	e0ac      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10f      	bne.n	8001132 <printTemplate+0xea>
			lcd_clear();
 8001112:	f006 ff9b 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f007 fcc2 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800111c:	4a5f      	ldr	r2, [pc, #380]	; (800129c <printTemplate+0x254>)
 800111e:	2101      	movs	r1, #1
 8001120:	2001      	movs	r0, #1
 8001122:	f006 ff67 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <printTemplate+0x25c>)
 8001128:	2101      	movs	r1, #1
 800112a:	2002      	movs	r0, #2
 800112c:	f006 ff62 	bl	8007ff4 <lcd_print>
}
 8001130:	e099      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d10f      	bne.n	8001158 <printTemplate+0x110>
			lcd_clear();
 8001138:	f006 ff88 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f007 fcaf 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <printTemplate+0x254>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f006 ff54 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800114c:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <printTemplate+0x260>)
 800114e:	2101      	movs	r1, #1
 8001150:	2002      	movs	r0, #2
 8001152:	f006 ff4f 	bl	8007ff4 <lcd_print>
}
 8001156:	e086      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d10f      	bne.n	800117e <printTemplate+0x136>
			lcd_clear();
 800115e:	f006 ff75 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f007 fc9c 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <printTemplate+0x254>)
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f006 ff41 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <printTemplate+0x264>)
 8001174:	2101      	movs	r1, #1
 8001176:	2002      	movs	r0, #2
 8001178:	f006 ff3c 	bl	8007ff4 <lcd_print>
}
 800117c:	e073      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d170      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001184:	f006 ff62 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f007 fc89 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <printTemplate+0x254>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f006 ff2e 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001198:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <printTemplate+0x268>)
 800119a:	2101      	movs	r1, #1
 800119c:	2002      	movs	r0, #2
 800119e:	f006 ff29 	bl	8007ff4 <lcd_print>
}
 80011a2:	e060      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 3) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d15d      	bne.n	8001266 <printTemplate+0x21e>
		if(page == 1) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10f      	bne.n	80011d0 <printTemplate+0x188>
			lcd_clear();
 80011b0:	f006 ff4c 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f007 fc73 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011ba:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <printTemplate+0x26c>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2001      	movs	r0, #1
 80011c0:	f006 ff18 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <printTemplate+0x258>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2002      	movs	r0, #2
 80011ca:	f006 ff13 	bl	8007ff4 <lcd_print>
}
 80011ce:	e04a      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d10f      	bne.n	80011f6 <printTemplate+0x1ae>
			lcd_clear();
 80011d6:	f006 ff39 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 80011da:	2064      	movs	r0, #100	; 0x64
 80011dc:	f007 fc60 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011e0:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <printTemplate+0x26c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	2001      	movs	r0, #1
 80011e6:	f006 ff05 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011ea:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <printTemplate+0x25c>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	2002      	movs	r0, #2
 80011f0:	f006 ff00 	bl	8007ff4 <lcd_print>
}
 80011f4:	e037      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d10f      	bne.n	800121c <printTemplate+0x1d4>
			lcd_clear();
 80011fc:	f006 ff26 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	f007 fc4d 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001206:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <printTemplate+0x26c>)
 8001208:	2101      	movs	r1, #1
 800120a:	2001      	movs	r0, #1
 800120c:	f006 fef2 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001210:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <printTemplate+0x260>)
 8001212:	2101      	movs	r1, #1
 8001214:	2002      	movs	r0, #2
 8001216:	f006 feed 	bl	8007ff4 <lcd_print>
}
 800121a:	e024      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d10f      	bne.n	8001242 <printTemplate+0x1fa>
			lcd_clear();
 8001222:	f006 ff13 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f007 fc3a 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <printTemplate+0x26c>)
 800122e:	2101      	movs	r1, #1
 8001230:	2001      	movs	r0, #1
 8001232:	f006 fedf 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <printTemplate+0x264>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f006 feda 	bl	8007ff4 <lcd_print>
}
 8001240:	e011      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d10e      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001248:	f006 ff00 	bl	800804c <lcd_clear>
			HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f007 fc27 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <printTemplate+0x26c>)
 8001254:	2101      	movs	r1, #1
 8001256:	2001      	movs	r0, #1
 8001258:	f006 fecc 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <printTemplate+0x268>)
 800125e:	2101      	movs	r1, #1
 8001260:	2002      	movs	r0, #2
 8001262:	f006 fec7 	bl	8007ff4 <lcd_print>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800d3a4 	.word	0x0800d3a4
 8001274:	0800d3ac 	.word	0x0800d3ac
 8001278:	0800d3b0 	.word	0x0800d3b0
 800127c:	0800d3b4 	.word	0x0800d3b4
 8001280:	0800d3b8 	.word	0x0800d3b8
 8001284:	0800d3bc 	.word	0x0800d3bc
 8001288:	0800d3c0 	.word	0x0800d3c0
 800128c:	0800d3c4 	.word	0x0800d3c4
 8001290:	0800d3c8 	.word	0x0800d3c8
 8001294:	0800d3cc 	.word	0x0800d3cc
 8001298:	0800d3d0 	.word	0x0800d3d0
 800129c:	0800d3d4 	.word	0x0800d3d4
 80012a0:	0800d3dc 	.word	0x0800d3dc
 80012a4:	0800d3f0 	.word	0x0800d3f0
 80012a8:	0800d404 	.word	0x0800d404
 80012ac:	0800d418 	.word	0x0800d418
 80012b0:	0800d42c 	.word	0x0800d42c
 80012b4:	0800d440 	.word	0x0800d440

080012b8 <checkSlideVal>:

int checkSlideVal(int state) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d111      	bne.n	80012ea <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012c6:	2101      	movs	r1, #1
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <checkSlideVal+0x60>)
 80012ca:	f008 f9b9 	bl	8009640 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <checkSlideVal+0x20>
			return 34;
 80012d4:	2322      	movs	r3, #34	; 0x22
 80012d6:	e01b      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012d8:	2108      	movs	r1, #8
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <checkSlideVal+0x64>)
 80012dc:	f008 f9b0 	bl	8009640 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <checkSlideVal+0x56>
			return 32;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e012      	b.n	8001310 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012ea:	2101      	movs	r1, #1
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <checkSlideVal+0x60>)
 80012ee:	f008 f9a7 	bl	8009640 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <checkSlideVal+0x44>
			return 35;
 80012f8:	2323      	movs	r3, #35	; 0x23
 80012fa:	e009      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012fc:	2108      	movs	r1, #8
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <checkSlideVal+0x64>)
 8001300:	f008 f99e 	bl	8009640 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <checkSlideVal+0x56>
			return 33;
 800130a:	2321      	movs	r3, #33	; 0x21
 800130c:	e000      	b.n	8001310 <checkSlideVal+0x58>
		}
	}
	return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010800 	.word	0x40010800
 800131c:	40011000 	.word	0x40011000

08001320 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7fe ff78 	bl	8000224 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800133c:	e08a      	b.n	8001454 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff ffba 	bl	80012b8 <checkSlideVal>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd07      	ble.n	800135a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff ffb4 	bl	80012b8 <checkSlideVal>
 8001350:	4603      	mov	r3, r0
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <slideText+0x148>)
 8001356:	701a      	strb	r2, [r3, #0]
			break;
 8001358:	e081      	b.n	800145e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	e075      	b.n	800144c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff ffa9 	bl	80012b8 <checkSlideVal>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd09      	ble.n	8001380 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff ffa3 	bl	80012b8 <checkSlideVal>
 8001372:	4603      	mov	r3, r0
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <slideText+0x148>)
 8001378:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800137e:	e069      	b.n	8001454 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	4413      	add	r3, r2
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e029      	b.n	80013de <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800138a:	6838      	ldr	r0, [r7, #0]
 800138c:	f7ff ff94 	bl	80012b8 <checkSlideVal>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd0b      	ble.n	80013ae <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f7ff ff8e 	bl	80012b8 <checkSlideVal>
 800139c:	4603      	mov	r3, r0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <slideText+0x148>)
 80013a2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013ac:	e01d      	b.n	80013ea <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f006 fe26 	bl	800801e <lcd_print_char>
				HAL_Delay(30);
 80013d2:	201e      	movs	r0, #30
 80013d4:	f007 fb64 	bl	8008aa0 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3301      	adds	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	7dfa      	ldrb	r2, [r7, #23]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbcf      	blt.n	800138a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	e023      	b.n	800143a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff ff60 	bl	80012b8 <checkSlideVal>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd0b      	ble.n	8001416 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f7ff ff5a 	bl	80012b8 <checkSlideVal>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <slideText+0x148>)
 800140a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001414:	e017      	b.n	8001446 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	db0a      	blt.n	8001434 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	2220      	movs	r2, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f006 fdf8 	bl	800801e <lcd_print_char>
			    	 HAL_Delay(30);
 800142e:	201e      	movs	r0, #30
 8001430:	f007 fb36 	bl	8008aa0 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3b01      	subs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	429a      	cmp	r2, r3
 8001444:	dad5      	bge.n	80013f2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3301      	adds	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	db85      	blt.n	8001360 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b01      	cmp	r3, #1
 8001458:	f43f af71 	beq.w	800133e <slideText+0x1e>
			     }
			}
		}
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000022c 	.word	0x2000022c

0800146c <printCredentials>:

void printCredentials(int type) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d119      	bne.n	80014ae <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <printCredentials+0xf0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <printCredentials+0xf4>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f006 fdb4 	bl	8007ff4 <lcd_print>
 800148c:	e004      	b.n	8001498 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <printCredentials+0xf8>)
 8001490:	2101      	movs	r1, #1
 8001492:	2001      	movs	r0, #1
 8001494:	f006 fdae 	bl	8007ff4 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001498:	4a33      	ldr	r2, [pc, #204]	; (8001568 <printCredentials+0xfc>)
 800149a:	2101      	movs	r1, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f006 fda9 	bl	8007ff4 <lcd_print>
		lcd_print(2, 13, "    ");
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <printCredentials+0x100>)
 80014a4:	210d      	movs	r1, #13
 80014a6:	2002      	movs	r0, #2
 80014a8:	f006 fda4 	bl	8007ff4 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80014ac:	e051      	b.n	8001552 <printCredentials+0xe6>
	} else if(type == 2) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d127      	bne.n	8001504 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <printCredentials+0x104>)
 80014b6:	f7fe feb5 	bl	8000224 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <printCredentials+0x108>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f006 fd96 	bl	8007ff4 <lcd_print>
		if(ssidLength == 16) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d105      	bne.n	80014da <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 80014ce:	4a28      	ldr	r2, [pc, #160]	; (8001570 <printCredentials+0x104>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f006 fd8e 	bl	8007ff4 <lcd_print>
}
 80014d8:	e03b      	b.n	8001552 <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	dc0a      	bgt.n	80014f6 <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <printCredentials+0x10c>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f006 fd85 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <printCredentials+0x104>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f006 fd80 	bl	8007ff4 <lcd_print>
}
 80014f4:	e02d      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 80014f6:	2300      	movs	r3, #0
 80014f8:	2202      	movs	r2, #2
 80014fa:	2101      	movs	r1, #1
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <printCredentials+0x104>)
 80014fe:	f7ff ff0f 	bl	8001320 <slideText>
}
 8001502:	e026      	b.n	8001552 <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <printCredentials+0x110>)
 8001506:	f7fe fe8d 	bl	8000224 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <printCredentials+0x114>)
 8001510:	2101      	movs	r1, #1
 8001512:	2001      	movs	r0, #1
 8001514:	f006 fd6e 	bl	8007ff4 <lcd_print>
		if(passLength == 16) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d105      	bne.n	800152a <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <printCredentials+0x110>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f006 fd66 	bl	8007ff4 <lcd_print>
}
 8001528:	e013      	b.n	8001552 <printCredentials+0xe6>
		} else if(passLength < 16) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	dc0a      	bgt.n	8001546 <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <printCredentials+0x10c>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 fd5d 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <printCredentials+0x110>)
 800153c:	2101      	movs	r1, #1
 800153e:	2002      	movs	r0, #2
 8001540:	f006 fd58 	bl	8007ff4 <lcd_print>
}
 8001544:	e005      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 8001546:	2301      	movs	r3, #1
 8001548:	2202      	movs	r2, #2
 800154a:	2101      	movs	r1, #1
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <printCredentials+0x110>)
 800154e:	f7ff fee7 	bl	8001320 <slideText>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000024d 	.word	0x2000024d
 8001560:	0800d448 	.word	0x0800d448
 8001564:	0800d45c 	.word	0x0800d45c
 8001568:	200001d0 	.word	0x200001d0
 800156c:	0800d470 	.word	0x0800d470
 8001570:	200001dc 	.word	0x200001dc
 8001574:	0800d478 	.word	0x0800d478
 8001578:	0800d48c 	.word	0x0800d48c
 800157c:	200001f0 	.word	0x200001f0
 8001580:	0800d4a0 	.word	0x0800d4a0

08001584 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001596:	4904      	ldr	r1, [pc, #16]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_SystemReset+0x28>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
}
 80015a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <__NVIC_SystemReset+0x20>
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0004 	.word	0x05fa0004

080015b0 <menu>:
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "Translation.h"

void menu() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015b6:	2101      	movs	r1, #1
 80015b8:	488e      	ldr	r0, [pc, #568]	; (80017f4 <menu+0x244>)
 80015ba:	f008 f841 	bl	8009640 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 808e 	bne.w	80016e2 <menu+0x132>
 80015c6:	4b8c      	ldr	r3, [pc, #560]	; (80017f8 <menu+0x248>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8086 	beq.w	80016e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80015d6:	4b89      	ldr	r3, [pc, #548]	; (80017fc <menu+0x24c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b87      	ldr	r3, [pc, #540]	; (80017fc <menu+0x24c>)
 80015e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015e2:	4b86      	ldr	r3, [pc, #536]	; (80017fc <menu+0x24c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b24      	cmp	r3, #36	; 0x24
 80015e8:	d102      	bne.n	80015f0 <menu+0x40>
			menuSayac = 1;
 80015ea:	4b84      	ldr	r3, [pc, #528]	; (80017fc <menu+0x24c>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015f0:	4b82      	ldr	r3, [pc, #520]	; (80017fc <menu+0x24c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d106      	bne.n	8001606 <menu+0x56>
 80015f8:	4b81      	ldr	r3, [pc, #516]	; (8001800 <menu+0x250>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <menu+0x56>
			menuSayac = 21;
 8001600:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <menu+0x24c>)
 8001602:	2215      	movs	r2, #21
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001606:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <menu+0x24c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d106      	bne.n	800161c <menu+0x6c>
 800160e:	4b7d      	ldr	r3, [pc, #500]	; (8001804 <menu+0x254>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <menu+0x6c>
			menuSayac = 16;
 8001616:	4b79      	ldr	r3, [pc, #484]	; (80017fc <menu+0x24c>)
 8001618:	2210      	movs	r2, #16
 800161a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800161c:	4b77      	ldr	r3, [pc, #476]	; (80017fc <menu+0x24c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b0d      	cmp	r3, #13
 8001622:	d106      	bne.n	8001632 <menu+0x82>
 8001624:	4b77      	ldr	r3, [pc, #476]	; (8001804 <menu+0x254>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <menu+0x82>
			menuSayac = 16;
 800162c:	4b73      	ldr	r3, [pc, #460]	; (80017fc <menu+0x24c>)
 800162e:	2210      	movs	r2, #16
 8001630:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <menu+0x24c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d106      	bne.n	8001648 <menu+0x98>
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <menu+0x254>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d102      	bne.n	8001648 <menu+0x98>
			menuSayac = 13;
 8001642:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <menu+0x24c>)
 8001644:	220d      	movs	r2, #13
 8001646:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001648:	4b6c      	ldr	r3, [pc, #432]	; (80017fc <menu+0x24c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b0a      	cmp	r3, #10
 800164e:	d10a      	bne.n	8001666 <menu+0xb6>
 8001650:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <menu+0x258>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <menu+0xb0>
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <menu+0x258>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d102      	bne.n	8001666 <menu+0xb6>
			menuSayac = 11;
 8001660:	4b66      	ldr	r3, [pc, #408]	; (80017fc <menu+0x24c>)
 8001662:	220b      	movs	r2, #11
 8001664:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001666:	4b65      	ldr	r3, [pc, #404]	; (80017fc <menu+0x24c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10e      	bne.n	800168c <menu+0xdc>
 800166e:	4b67      	ldr	r3, [pc, #412]	; (800180c <menu+0x25c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d003      	beq.n	800167e <menu+0xce>
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <menu+0x25c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d106      	bne.n	800168c <menu+0xdc>
 800167e:	4b61      	ldr	r3, [pc, #388]	; (8001804 <menu+0x254>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <menu+0xdc>
			menuSayac = 16;
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <menu+0x24c>)
 8001688:	2210      	movs	r2, #16
 800168a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800168c:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <menu+0x24c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d10e      	bne.n	80016b2 <menu+0x102>
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <menu+0x25c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <menu+0xf4>
 800169c:	4b5b      	ldr	r3, [pc, #364]	; (800180c <menu+0x25c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <menu+0x102>
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <menu+0x254>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d102      	bne.n	80016b2 <menu+0x102>
			menuSayac = 13;
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <menu+0x24c>)
 80016ae:	220d      	movs	r2, #13
 80016b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016b2:	4b52      	ldr	r3, [pc, #328]	; (80017fc <menu+0x24c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d106      	bne.n	80016c8 <menu+0x118>
 80016ba:	4b55      	ldr	r3, [pc, #340]	; (8001810 <menu+0x260>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <menu+0x118>
			menuSayac = 16;
 80016c2:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <menu+0x24c>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c8:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <menu+0x24c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d106      	bne.n	80016de <menu+0x12e>
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <menu+0x250>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <menu+0x12e>
			menuSayac = 26;
 80016d8:	4b48      	ldr	r3, [pc, #288]	; (80017fc <menu+0x24c>)
 80016da:	221a      	movs	r2, #26
 80016dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016de:	f003 fac3 	bl	8004c68 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e2:	2108      	movs	r1, #8
 80016e4:	484b      	ldr	r0, [pc, #300]	; (8001814 <menu+0x264>)
 80016e6:	f007 ffab 	bl	8009640 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d175      	bne.n	80017dc <menu+0x22c>
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <menu+0x248>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06e      	beq.n	80017dc <menu+0x22c>
		if (menuSayac <= 1) {
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <menu+0x24c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d802      	bhi.n	800170c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <menu+0x24c>)
 8001708:	2224      	movs	r2, #36	; 0x24
 800170a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800170c:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <menu+0x24c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <menu+0x24c>)
 8001716:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <menu+0x24c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b14      	cmp	r3, #20
 800171e:	d106      	bne.n	800172e <menu+0x17e>
 8001720:	4b37      	ldr	r3, [pc, #220]	; (8001800 <menu+0x250>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <menu+0x17e>
			menuSayac = 17;
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <menu+0x24c>)
 800172a:	2211      	movs	r2, #17
 800172c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <menu+0x24c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	d106      	bne.n	8001744 <menu+0x194>
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <menu+0x254>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <menu+0x194>
			menuSayac = 7;
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <menu+0x24c>)
 8001740:	2207      	movs	r2, #7
 8001742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <menu+0x24c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d106      	bne.n	800175a <menu+0x1aa>
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <menu+0x254>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <menu+0x1aa>
			menuSayac = 12;
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <menu+0x24c>)
 8001756:	220c      	movs	r2, #12
 8001758:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <menu+0x24c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d106      	bne.n	8001770 <menu+0x1c0>
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <menu+0x254>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d102      	bne.n	8001770 <menu+0x1c0>
			menuSayac = 8;
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <menu+0x24c>)
 800176c:	2208      	movs	r2, #8
 800176e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <menu+0x24c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d10a      	bne.n	800178e <menu+0x1de>
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <menu+0x258>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <menu+0x1d8>
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <menu+0x258>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <menu+0x1de>
			menuSayac = 9;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <menu+0x24c>)
 800178a:	2209      	movs	r2, #9
 800178c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <menu+0x24c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d10a      	bne.n	80017ac <menu+0x1fc>
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <menu+0x25c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <menu+0x1f6>
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <menu+0x25c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <menu+0x1fc>
			menuSayac = 11;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <menu+0x24c>)
 80017a8:	220b      	movs	r2, #11
 80017aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <menu+0x24c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d106      	bne.n	80017c2 <menu+0x212>
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <menu+0x260>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <menu+0x212>
			menuSayac = 14;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <menu+0x24c>)
 80017be:	220e      	movs	r2, #14
 80017c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <menu+0x24c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b19      	cmp	r3, #25
 80017c8:	d106      	bne.n	80017d8 <menu+0x228>
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <menu+0x250>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <menu+0x228>
			menuSayac = 23;
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <menu+0x24c>)
 80017d4:	2217      	movs	r2, #23
 80017d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017d8:	f003 fa46 	bl	8004c68 <bekle>
	}

	if (menuSayac == 0) {
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <menu+0x24c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d133      	bne.n	800184c <menu+0x29c>
		if(dilSecim == 0) {
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <menu+0x268>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d121      	bne.n	8001830 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <menu+0x26c>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	2001      	movs	r0, #1
 80017f2:	e015      	b.n	8001820 <menu+0x270>
 80017f4:	40010800 	.word	0x40010800
 80017f8:	2000025b 	.word	0x2000025b
 80017fc:	2000022c 	.word	0x2000022c
 8001800:	2000023b 	.word	0x2000023b
 8001804:	20000234 	.word	0x20000234
 8001808:	20000235 	.word	0x20000235
 800180c:	20000236 	.word	0x20000236
 8001810:	20000237 	.word	0x20000237
 8001814:	40011000 	.word	0x40011000
 8001818:	2000024d 	.word	0x2000024d
 800181c:	0800d4b4 	.word	0x0800d4b4
 8001820:	f006 fbe8 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001824:	4a94      	ldr	r2, [pc, #592]	; (8001a78 <menu+0x4c8>)
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f006 fbe3 	bl	8007ff4 <lcd_print>
 800182e:	e00d      	b.n	800184c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001830:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <menu+0x4cc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d109      	bne.n	800184c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001838:	4a91      	ldr	r2, [pc, #580]	; (8001a80 <menu+0x4d0>)
 800183a:	2101      	movs	r1, #1
 800183c:	2001      	movs	r0, #1
 800183e:	f006 fbd9 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001842:	4a90      	ldr	r2, [pc, #576]	; (8001a84 <menu+0x4d4>)
 8001844:	2101      	movs	r1, #1
 8001846:	2002      	movs	r0, #2
 8001848:	f006 fbd4 	bl	8007ff4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800184c:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <menu+0x4d8>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 82b5 	bne.w	8001dc0 <menu+0x810>
		if(dilSecim == 0) {
 8001856:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <menu+0x4cc>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800185e:	4a8b      	ldr	r2, [pc, #556]	; (8001a8c <menu+0x4dc>)
 8001860:	2101      	movs	r1, #1
 8001862:	2001      	movs	r0, #1
 8001864:	f006 fbc6 	bl	8007ff4 <lcd_print>
 8001868:	e008      	b.n	800187c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800186a:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <menu+0x4cc>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d104      	bne.n	800187c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001872:	4a87      	ldr	r2, [pc, #540]	; (8001a90 <menu+0x4e0>)
 8001874:	2101      	movs	r1, #1
 8001876:	2001      	movs	r0, #1
 8001878:	f006 fbbc 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800187c:	4b85      	ldr	r3, [pc, #532]	; (8001a94 <menu+0x4e4>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d123      	bne.n	80018cc <menu+0x31c>
			if(dilSecim == 0) {
 8001884:	4b7d      	ldr	r3, [pc, #500]	; (8001a7c <menu+0x4cc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800188c:	4a82      	ldr	r2, [pc, #520]	; (8001a98 <menu+0x4e8>)
 800188e:	2101      	movs	r1, #1
 8001890:	2002      	movs	r0, #2
 8001892:	f006 fbaf 	bl	8007ff4 <lcd_print>
 8001896:	e008      	b.n	80018aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001898:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <menu+0x4cc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d104      	bne.n	80018aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80018a0:	4a7e      	ldr	r2, [pc, #504]	; (8001a9c <menu+0x4ec>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f006 fba5 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018aa:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <menu+0x4f0>)
 80018ac:	210f      	movs	r1, #15
 80018ae:	2002      	movs	r0, #2
 80018b0:	f006 fba0 	bl	8007ff4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018b4:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <menu+0x4f4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	220a      	movs	r2, #10
 80018ba:	497b      	ldr	r1, [pc, #492]	; (8001aa8 <menu+0x4f8>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f00a ff47 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 80018c2:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <menu+0x4f8>)
 80018c4:	210e      	movs	r1, #14
 80018c6:	2002      	movs	r0, #2
 80018c8:	f006 fb94 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018cc:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <menu+0x4e4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d123      	bne.n	800191c <menu+0x36c>
			if(dilSecim == 0) {
 80018d4:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <menu+0x4cc>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018dc:	4a73      	ldr	r2, [pc, #460]	; (8001aac <menu+0x4fc>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2002      	movs	r0, #2
 80018e2:	f006 fb87 	bl	8007ff4 <lcd_print>
 80018e6:	e008      	b.n	80018fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <menu+0x4cc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80018f0:	4a6f      	ldr	r2, [pc, #444]	; (8001ab0 <menu+0x500>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f006 fb7d 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <menu+0x504>)
 80018fc:	210f      	movs	r1, #15
 80018fe:	2002      	movs	r0, #2
 8001900:	f006 fb78 	bl	8007ff4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <menu+0x508>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	220a      	movs	r2, #10
 800190a:	4967      	ldr	r1, [pc, #412]	; (8001aa8 <menu+0x4f8>)
 800190c:	4618      	mov	r0, r3
 800190e:	f00a ff1f 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <menu+0x4f8>)
 8001914:	210e      	movs	r1, #14
 8001916:	2002      	movs	r0, #2
 8001918:	f006 fb6c 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800191c:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <menu+0x4e4>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <menu+0x3bc>
			if(dilSecim == 0) {
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <menu+0x4cc>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800192c:	4a63      	ldr	r2, [pc, #396]	; (8001abc <menu+0x50c>)
 800192e:	2101      	movs	r1, #1
 8001930:	2002      	movs	r0, #2
 8001932:	f006 fb5f 	bl	8007ff4 <lcd_print>
 8001936:	e008      	b.n	800194a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <menu+0x4cc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001940:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <menu+0x510>)
 8001942:	2101      	movs	r1, #1
 8001944:	2002      	movs	r0, #2
 8001946:	f006 fb55 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <menu+0x504>)
 800194c:	210f      	movs	r1, #15
 800194e:	2002      	movs	r0, #2
 8001950:	f006 fb50 	bl	8007ff4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001954:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <menu+0x514>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	220a      	movs	r2, #10
 800195a:	4953      	ldr	r1, [pc, #332]	; (8001aa8 <menu+0x4f8>)
 800195c:	4618      	mov	r0, r3
 800195e:	f00a fef7 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001962:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <menu+0x4f8>)
 8001964:	210e      	movs	r1, #14
 8001966:	2002      	movs	r0, #2
 8001968:	f006 fb44 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800196c:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <menu+0x4e4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d123      	bne.n	80019bc <menu+0x40c>
			if(dilSecim == 0) {
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <menu+0x4cc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <menu+0x518>)
 800197e:	2101      	movs	r1, #1
 8001980:	2002      	movs	r0, #2
 8001982:	f006 fb37 	bl	8007ff4 <lcd_print>
 8001986:	e008      	b.n	800199a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <menu+0x4cc>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d104      	bne.n	800199a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <menu+0x51c>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f006 fb2d 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800199a:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <menu+0x504>)
 800199c:	210f      	movs	r1, #15
 800199e:	2002      	movs	r0, #2
 80019a0:	f006 fb28 	bl	8007ff4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <menu+0x520>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	220a      	movs	r2, #10
 80019aa:	493f      	ldr	r1, [pc, #252]	; (8001aa8 <menu+0x4f8>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00a fecf 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 80019b2:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <menu+0x4f8>)
 80019b4:	210e      	movs	r1, #14
 80019b6:	2002      	movs	r0, #2
 80019b8:	f006 fb1c 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <menu+0x4e4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d123      	bne.n	8001a0c <menu+0x45c>
			if(dilSecim == 0) {
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <menu+0x4cc>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <menu+0x524>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	2002      	movs	r0, #2
 80019d2:	f006 fb0f 	bl	8007ff4 <lcd_print>
 80019d6:	e008      	b.n	80019ea <menu+0x43a>
			} else if(dilSecim == 1) {
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <menu+0x4cc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d104      	bne.n	80019ea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80019e0:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <menu+0x528>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	2002      	movs	r0, #2
 80019e6:	f006 fb05 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019ea:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <menu+0x504>)
 80019ec:	210f      	movs	r1, #15
 80019ee:	2002      	movs	r0, #2
 80019f0:	f006 fb00 	bl	8007ff4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <menu+0x52c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	220a      	movs	r2, #10
 80019fa:	492b      	ldr	r1, [pc, #172]	; (8001aa8 <menu+0x4f8>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00a fea7 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <menu+0x4f8>)
 8001a04:	210e      	movs	r1, #14
 8001a06:	2002      	movs	r0, #2
 8001a08:	f006 faf4 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <menu+0x4e4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d123      	bne.n	8001a5c <menu+0x4ac>
			if(dilSecim == 0) {
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <menu+0x4cc>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <menu+0x530>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f006 fae7 	bl	8007ff4 <lcd_print>
 8001a26:	e008      	b.n	8001a3a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <menu+0x4cc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d104      	bne.n	8001a3a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001a30:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <menu+0x534>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f006 fadd 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <menu+0x504>)
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f006 fad8 	bl	8007ff4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <menu+0x538>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	220a      	movs	r2, #10
 8001a4a:	4917      	ldr	r1, [pc, #92]	; (8001aa8 <menu+0x4f8>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00a fe7f 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <menu+0x4f8>)
 8001a54:	210e      	movs	r1, #14
 8001a56:	2002      	movs	r0, #2
 8001a58:	f006 facc 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <menu+0x4e4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d15f      	bne.n	8001b24 <menu+0x574>
			if(dilSecim == 0) {
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <menu+0x4cc>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d141      	bne.n	8001af0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <menu+0x53c>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2002      	movs	r0, #2
 8001a72:	f006 fabf 	bl	8007ff4 <lcd_print>
 8001a76:	e044      	b.n	8001b02 <menu+0x552>
 8001a78:	0800d4c8 	.word	0x0800d4c8
 8001a7c:	2000024d 	.word	0x2000024d
 8001a80:	0800d4dc 	.word	0x0800d4dc
 8001a84:	0800d4f0 	.word	0x0800d4f0
 8001a88:	2000022c 	.word	0x2000022c
 8001a8c:	0800d504 	.word	0x0800d504
 8001a90:	0800d518 	.word	0x0800d518
 8001a94:	2000022e 	.word	0x2000022e
 8001a98:	0800d52c 	.word	0x0800d52c
 8001a9c:	0800d53c 	.word	0x0800d53c
 8001aa0:	0800d54c 	.word	0x0800d54c
 8001aa4:	2000024e 	.word	0x2000024e
 8001aa8:	200001c8 	.word	0x200001c8
 8001aac:	0800d550 	.word	0x0800d550
 8001ab0:	0800d560 	.word	0x0800d560
 8001ab4:	0800d570 	.word	0x0800d570
 8001ab8:	2000024f 	.word	0x2000024f
 8001abc:	0800d574 	.word	0x0800d574
 8001ac0:	0800d584 	.word	0x0800d584
 8001ac4:	20000250 	.word	0x20000250
 8001ac8:	0800d594 	.word	0x0800d594
 8001acc:	0800d5a4 	.word	0x0800d5a4
 8001ad0:	20000251 	.word	0x20000251
 8001ad4:	0800d5b4 	.word	0x0800d5b4
 8001ad8:	0800d5c4 	.word	0x0800d5c4
 8001adc:	20000252 	.word	0x20000252
 8001ae0:	0800d5d4 	.word	0x0800d5d4
 8001ae4:	0800d5e4 	.word	0x0800d5e4
 8001ae8:	20000253 	.word	0x20000253
 8001aec:	0800d5f4 	.word	0x0800d5f4
			} else if(dilSecim == 1) {
 8001af0:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <menu+0x680>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <menu+0x684>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2002      	movs	r0, #2
 8001afe:	f006 fa79 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b02:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <menu+0x688>)
 8001b04:	210f      	movs	r1, #15
 8001b06:	2002      	movs	r0, #2
 8001b08:	f006 fa74 	bl	8007ff4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <menu+0x68c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	220a      	movs	r2, #10
 8001b12:	494b      	ldr	r1, [pc, #300]	; (8001c40 <menu+0x690>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00a fe1b 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001b1a:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <menu+0x690>)
 8001b1c:	210e      	movs	r1, #14
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f006 fa68 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <menu+0x694>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d123      	bne.n	8001b74 <menu+0x5c4>
			if(dilSecim == 0) {
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <menu+0x680>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <menu+0x698>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f006 fa5b 	bl	8007ff4 <lcd_print>
 8001b3e:	e008      	b.n	8001b52 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <menu+0x680>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d104      	bne.n	8001b52 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001b48:	4a40      	ldr	r2, [pc, #256]	; (8001c4c <menu+0x69c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f006 fa51 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b52:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <menu+0x688>)
 8001b54:	210f      	movs	r1, #15
 8001b56:	2002      	movs	r0, #2
 8001b58:	f006 fa4c 	bl	8007ff4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <menu+0x6a0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	220a      	movs	r2, #10
 8001b62:	4937      	ldr	r1, [pc, #220]	; (8001c40 <menu+0x690>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00a fdf3 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001b6a:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <menu+0x690>)
 8001b6c:	210e      	movs	r1, #14
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f006 fa40 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <menu+0x694>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d123      	bne.n	8001bc4 <menu+0x614>
			if(dilSecim == 0) {
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <menu+0x680>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b84:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <menu+0x6a4>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f006 fa33 	bl	8007ff4 <lcd_print>
 8001b8e:	e008      	b.n	8001ba2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <menu+0x680>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d104      	bne.n	8001ba2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <menu+0x6a8>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f006 fa29 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <menu+0x688>)
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f006 fa24 	bl	8007ff4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <menu+0x6ac>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	4923      	ldr	r1, [pc, #140]	; (8001c40 <menu+0x690>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00a fdcb 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <menu+0x690>)
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f006 fa18 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <menu+0x694>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d123      	bne.n	8001c14 <menu+0x664>
			if(dilSecim == 0) {
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <menu+0x680>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <menu+0x6b0>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f006 fa0b 	bl	8007ff4 <lcd_print>
 8001bde:	e008      	b.n	8001bf2 <menu+0x642>
			} else if(dilSecim == 1) {
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <menu+0x680>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d104      	bne.n	8001bf2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <menu+0x6b4>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	2002      	movs	r0, #2
 8001bee:	f006 fa01 	bl	8007ff4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <menu+0x6b8>)
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f006 f9fc 	bl	8007ff4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <menu+0x6bc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	220a      	movs	r2, #10
 8001c02:	490f      	ldr	r1, [pc, #60]	; (8001c40 <menu+0x690>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00a fda3 	bl	800c750 <itoa>
			lcd_print(2, 15, snum);
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <menu+0x690>)
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f006 f9f0 	bl	8007ff4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <menu+0x694>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b0a      	cmp	r3, #10
 8001c1a:	d134      	bne.n	8001c86 <menu+0x6d6>
			if(dilSecim == 0) {
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <menu+0x680>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d127      	bne.n	8001c74 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <menu+0x6c0>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f006 f9e3 	bl	8007ff4 <lcd_print>
 8001c2e:	e02a      	b.n	8001c86 <menu+0x6d6>
 8001c30:	2000024d 	.word	0x2000024d
 8001c34:	0800d604 	.word	0x0800d604
 8001c38:	0800d570 	.word	0x0800d570
 8001c3c:	20000254 	.word	0x20000254
 8001c40:	200001c8 	.word	0x200001c8
 8001c44:	2000022e 	.word	0x2000022e
 8001c48:	0800d614 	.word	0x0800d614
 8001c4c:	0800d624 	.word	0x0800d624
 8001c50:	20000255 	.word	0x20000255
 8001c54:	0800d634 	.word	0x0800d634
 8001c58:	0800d644 	.word	0x0800d644
 8001c5c:	20000256 	.word	0x20000256
 8001c60:	0800d654 	.word	0x0800d654
 8001c64:	0800d664 	.word	0x0800d664
 8001c68:	0800d674 	.word	0x0800d674
 8001c6c:	20000257 	.word	0x20000257
 8001c70:	0800d678 	.word	0x0800d678
			} else if(dilSecim == 1) {
 8001c74:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <menu+0x8d0>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d104      	bne.n	8001c86 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001c7c:	4a81      	ldr	r2, [pc, #516]	; (8001e84 <menu+0x8d4>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2002      	movs	r0, #2
 8001c82:	f006 f9b7 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c86:	2102      	movs	r1, #2
 8001c88:	487f      	ldr	r0, [pc, #508]	; (8001e88 <menu+0x8d8>)
 8001c8a:	f007 fcd9 	bl	8009640 <HAL_GPIO_ReadPin>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <menu+0x718>
 8001c94:	4b7d      	ldr	r3, [pc, #500]	; (8001e8c <menu+0x8dc>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <menu+0x718>
 8001ca2:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <menu+0x8e0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001caa:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <menu+0x8e4>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <menu+0x8e4>)
 8001cb4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cb6:	4b77      	ldr	r3, [pc, #476]	; (8001e94 <menu+0x8e4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	d902      	bls.n	8001cc4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <menu+0x8e4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc4:	f002 ffd0 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc8:	2104      	movs	r1, #4
 8001cca:	486f      	ldr	r0, [pc, #444]	; (8001e88 <menu+0x8d8>)
 8001ccc:	f007 fcb8 	bl	8009640 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d119      	bne.n	8001d0a <menu+0x75a>
 8001cd6:	4b6d      	ldr	r3, [pc, #436]	; (8001e8c <menu+0x8dc>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d012      	beq.n	8001d0a <menu+0x75a>
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <menu+0x8e0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10e      	bne.n	8001d0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001cec:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <menu+0x8e4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <menu+0x8e4>)
 8001cf6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <menu+0x8e4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0b      	cmp	r3, #11
 8001cfe:	d902      	bls.n	8001d06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001d00:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <menu+0x8e4>)
 8001d02:	220a      	movs	r2, #10
 8001d04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d06:	f002 ffaf 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	485e      	ldr	r0, [pc, #376]	; (8001e88 <menu+0x8d8>)
 8001d0e:	f007 fc97 	bl	8009640 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d153      	bne.n	8001dc0 <menu+0x810>
 8001d18:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <menu+0x8dc>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d04c      	beq.n	8001dc0 <menu+0x810>
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <menu+0x8e4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d148      	bne.n	8001dc0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <menu+0x8e8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <menu+0x8ec>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <menu+0x8f0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <menu+0x8ec>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d4a:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <menu+0x8f4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	4b52      	ldr	r3, [pc, #328]	; (8001e9c <menu+0x8ec>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <menu+0x8f8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <menu+0x8ec>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d66:	4b51      	ldr	r3, [pc, #324]	; (8001eac <menu+0x8fc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <menu+0x8ec>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d74:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <menu+0x900>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <menu+0x8ec>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <menu+0x904>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <menu+0x8ec>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d90:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <menu+0x908>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <menu+0x8ec>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <menu+0x90c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <menu+0x8ec>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001dac:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <menu+0x910>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <menu+0x8ec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <menu+0x914>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <menu+0x918>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	f040 80fc 	bne.w	8001fc2 <menu+0xa12>
		if(dilSecim == 0) {
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <menu+0x8d0>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <menu+0x91c>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f006 f90c 	bl	8007ff4 <lcd_print>
 8001ddc:	e008      	b.n	8001df0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <menu+0x8d0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d104      	bne.n	8001df0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <menu+0x920>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	2001      	movs	r0, #1
 8001dec:	f006 f902 	bl	8007ff4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <menu+0x8e0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d003      	beq.n	8001e00 <menu+0x850>
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <menu+0x8e0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d112      	bne.n	8001e26 <menu+0x876>
			if(dilSecim == 0) {
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <menu+0x8d0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e08:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <menu+0x924>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f006 f8f1 	bl	8007ff4 <lcd_print>
 8001e12:	e008      	b.n	8001e26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <menu+0x8d0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d104      	bne.n	8001e26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <menu+0x928>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2002      	movs	r0, #2
 8001e22:	f006 f8e7 	bl	8007ff4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <menu+0x92c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <menu+0x8ac>
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <menu+0x8e0>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d112      	bne.n	8001e5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <menu+0x8d0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <menu+0x930>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	2002      	movs	r0, #2
 8001e44:	f006 f8d6 	bl	8007ff4 <lcd_print>
 8001e48:	e008      	b.n	8001e5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <menu+0x8d0>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d104      	bne.n	8001e5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <menu+0x934>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	2002      	movs	r0, #2
 8001e58:	f006 f8cc 	bl	8007ff4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <menu+0x92c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d14c      	bne.n	8001efe <menu+0x94e>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <menu+0x8e0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d148      	bne.n	8001efe <menu+0x94e>
			if(dilSecim == 0) {
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <menu+0x8d0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d13b      	bne.n	8001eec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <menu+0x938>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f006 f8bb 	bl	8007ff4 <lcd_print>
 8001e7e:	e03e      	b.n	8001efe <menu+0x94e>
 8001e80:	2000024d 	.word	0x2000024d
 8001e84:	0800d68c 	.word	0x0800d68c
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	2000025b 	.word	0x2000025b
 8001e90:	2000023b 	.word	0x2000023b
 8001e94:	2000022e 	.word	0x2000022e
 8001e98:	2000024e 	.word	0x2000024e
 8001e9c:	20000158 	.word	0x20000158
 8001ea0:	2000024f 	.word	0x2000024f
 8001ea4:	20000250 	.word	0x20000250
 8001ea8:	20000251 	.word	0x20000251
 8001eac:	20000252 	.word	0x20000252
 8001eb0:	20000253 	.word	0x20000253
 8001eb4:	20000254 	.word	0x20000254
 8001eb8:	20000255 	.word	0x20000255
 8001ebc:	20000256 	.word	0x20000256
 8001ec0:	20000257 	.word	0x20000257
 8001ec4:	20000258 	.word	0x20000258
 8001ec8:	2000022c 	.word	0x2000022c
 8001ecc:	0800d6a0 	.word	0x0800d6a0
 8001ed0:	0800d6b4 	.word	0x0800d6b4
 8001ed4:	0800d6c8 	.word	0x0800d6c8
 8001ed8:	0800d6dc 	.word	0x0800d6dc
 8001edc:	2000022d 	.word	0x2000022d
 8001ee0:	0800d6f0 	.word	0x0800d6f0
 8001ee4:	0800d700 	.word	0x0800d700
 8001ee8:	0800d710 	.word	0x0800d710
			} else if(dilSecim == 1) {
 8001eec:	4b98      	ldr	r3, [pc, #608]	; (8002150 <menu+0xba0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d104      	bne.n	8001efe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001ef4:	4a97      	ldr	r2, [pc, #604]	; (8002154 <menu+0xba4>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f006 f87b 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001efe:	2102      	movs	r1, #2
 8001f00:	4895      	ldr	r0, [pc, #596]	; (8002158 <menu+0xba8>)
 8001f02:	f007 fb9d 	bl	8009640 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d119      	bne.n	8001f40 <menu+0x990>
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <menu+0xbac>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <menu+0x990>
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <menu+0xbb0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001f22:	4b90      	ldr	r3, [pc, #576]	; (8002164 <menu+0xbb4>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <menu+0xbb4>)
 8001f2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <menu+0xbb4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d902      	bls.n	8001f3c <menu+0x98c>
				calismaSekli = 0;
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <menu+0xbb4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f3c:	f002 fe94 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f40:	2104      	movs	r1, #4
 8001f42:	4885      	ldr	r0, [pc, #532]	; (8002158 <menu+0xba8>)
 8001f44:	f007 fb7c 	bl	8009640 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d119      	bne.n	8001f82 <menu+0x9d2>
 8001f4e:	4b83      	ldr	r3, [pc, #524]	; (800215c <menu+0xbac>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d012      	beq.n	8001f82 <menu+0x9d2>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <menu+0xbb0>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <menu+0xbb4>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <menu+0xbb4>)
 8001f6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f70:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <menu+0xbb4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <menu+0x9ce>
	    		calismaSekli = 1;
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <menu+0xbb4>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f7e:	f002 fe73 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f82:	2108      	movs	r1, #8
 8001f84:	4874      	ldr	r0, [pc, #464]	; (8002158 <menu+0xba8>)
 8001f86:	f007 fb5b 	bl	8009640 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d118      	bne.n	8001fc2 <menu+0xa12>
 8001f90:	4b72      	ldr	r3, [pc, #456]	; (800215c <menu+0xbac>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f083 0301 	eor.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d011      	beq.n	8001fc2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001f9e:	4b71      	ldr	r3, [pc, #452]	; (8002164 <menu+0xbb4>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b71      	ldr	r3, [pc, #452]	; (8002168 <menu+0xbb8>)
 8001fa4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <menu+0xbb4>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <menu+0xa0c>
				altLimit = 1;
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <menu+0xbbc>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <menu+0xbbc>)
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <menu+0xbb8>)
 8001fba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fbc:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <menu+0xbc0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001fc2:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <menu+0xbc4>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	f040 8083 	bne.w	80020d2 <menu+0xb22>
		if(dilSecim == 0) {
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <menu+0xba0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001fd4:	4a68      	ldr	r2, [pc, #416]	; (8002178 <menu+0xbc8>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f006 f80b 	bl	8007ff4 <lcd_print>
 8001fde:	e008      	b.n	8001ff2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <menu+0xba0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d104      	bne.n	8001ff2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001fe8:	4a64      	ldr	r2, [pc, #400]	; (800217c <menu+0xbcc>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	2001      	movs	r0, #1
 8001fee:	f006 f801 	bl	8007ff4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <menu+0xbd0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <menu+0xa72>
			if(dilSecim == 0) {
 8001ffa:	4b55      	ldr	r3, [pc, #340]	; (8002150 <menu+0xba0>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8002002:	4a60      	ldr	r2, [pc, #384]	; (8002184 <menu+0xbd4>)
 8002004:	2101      	movs	r1, #1
 8002006:	2002      	movs	r0, #2
 8002008:	f005 fff4 	bl	8007ff4 <lcd_print>
 800200c:	e012      	b.n	8002034 <menu+0xa84>
			} else if(dilSecim == 1) {
 800200e:	4b50      	ldr	r3, [pc, #320]	; (8002150 <menu+0xba0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10e      	bne.n	8002034 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <menu+0xbd8>)
 8002018:	2101      	movs	r1, #1
 800201a:	2002      	movs	r0, #2
 800201c:	f005 ffea 	bl	8007ff4 <lcd_print>
 8002020:	e008      	b.n	8002034 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <menu+0xbd0>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d104      	bne.n	8002034 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <menu+0xbdc>)
 800202c:	2101      	movs	r1, #1
 800202e:	2002      	movs	r0, #2
 8002030:	f005 ffe0 	bl	8007ff4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002034:	2102      	movs	r1, #2
 8002036:	4848      	ldr	r0, [pc, #288]	; (8002158 <menu+0xba8>)
 8002038:	f007 fb02 	bl	8009640 <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d115      	bne.n	800206e <menu+0xabe>
 8002042:	4b46      	ldr	r3, [pc, #280]	; (800215c <menu+0xbac>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00e      	beq.n	800206e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <menu+0xbd0>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <menu+0xbd0>)
 800205a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <menu+0xbd0>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d902      	bls.n	800206a <menu+0xaba>
				emniyetCercevesi = 0;
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <menu+0xbd0>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800206a:	f002 fdfd 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800206e:	2104      	movs	r1, #4
 8002070:	4839      	ldr	r0, [pc, #228]	; (8002158 <menu+0xba8>)
 8002072:	f007 fae5 	bl	8009640 <HAL_GPIO_ReadPin>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d115      	bne.n	80020a8 <menu+0xaf8>
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <menu+0xbac>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <menu+0xbd0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3b01      	subs	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <menu+0xbd0>)
 8002094:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <menu+0xbd0>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <menu+0xbd0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020a4:	f002 fde0 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020a8:	2108      	movs	r1, #8
 80020aa:	482b      	ldr	r0, [pc, #172]	; (8002158 <menu+0xba8>)
 80020ac:	f007 fac8 	bl	8009640 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10d      	bne.n	80020d2 <menu+0xb22>
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <menu+0xbac>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <menu+0xbd0>)
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <menu+0xbb8>)
 80020ca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <menu+0xbc0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <menu+0xbc4>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f040 80ba 	bne.w	8002250 <menu+0xca0>
		if(dilSecim == 0) {
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <menu+0xba0>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80020e4:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <menu+0xbe0>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	2001      	movs	r0, #1
 80020ea:	f005 ff83 	bl	8007ff4 <lcd_print>
 80020ee:	e008      	b.n	8002102 <menu+0xb52>
		} else if(dilSecim == 1) {
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <menu+0xba0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d104      	bne.n	8002102 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <menu+0xbe4>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	2001      	movs	r0, #1
 80020fe:	f005 ff79 	bl	8007ff4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <menu+0xbe8>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <menu+0xb82>
			if(dilSecim == 0) {
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <menu+0xba0>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <menu+0xbd4>)
 8002114:	2101      	movs	r1, #1
 8002116:	2002      	movs	r0, #2
 8002118:	f005 ff6c 	bl	8007ff4 <lcd_print>
 800211c:	e049      	b.n	80021b2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <menu+0xba0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d145      	bne.n	80021b2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <menu+0xbd8>)
 8002128:	2101      	movs	r1, #1
 800212a:	2002      	movs	r0, #2
 800212c:	f005 ff62 	bl	8007ff4 <lcd_print>
 8002130:	e03f      	b.n	80021b2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <menu+0xbe8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d13b      	bne.n	80021b2 <menu+0xc02>
			if(dilSecim == 0) {
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <menu+0xba0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d12e      	bne.n	80021a0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <menu+0xbec>)
 8002144:	2101      	movs	r1, #1
 8002146:	2002      	movs	r0, #2
 8002148:	f005 ff54 	bl	8007ff4 <lcd_print>
 800214c:	e031      	b.n	80021b2 <menu+0xc02>
 800214e:	bf00      	nop
 8002150:	2000024d 	.word	0x2000024d
 8002154:	0800d720 	.word	0x0800d720
 8002158:	40010800 	.word	0x40010800
 800215c:	2000025b 	.word	0x2000025b
 8002160:	2000023b 	.word	0x2000023b
 8002164:	2000022d 	.word	0x2000022d
 8002168:	20000158 	.word	0x20000158
 800216c:	20000232 	.word	0x20000232
 8002170:	20000258 	.word	0x20000258
 8002174:	2000022c 	.word	0x2000022c
 8002178:	0800d730 	.word	0x0800d730
 800217c:	0800d744 	.word	0x0800d744
 8002180:	20000230 	.word	0x20000230
 8002184:	0800d758 	.word	0x0800d758
 8002188:	0800d76c 	.word	0x0800d76c
 800218c:	0800d780 	.word	0x0800d780
 8002190:	0800d790 	.word	0x0800d790
 8002194:	0800d7a4 	.word	0x0800d7a4
 8002198:	20000231 	.word	0x20000231
 800219c:	0800d7b8 	.word	0x0800d7b8
			} else if(dilSecim == 1) {
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <menu+0xe3c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d104      	bne.n	80021b2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80021a8:	4a91      	ldr	r2, [pc, #580]	; (80023f0 <menu+0xe40>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	2002      	movs	r0, #2
 80021ae:	f005 ff21 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b2:	2102      	movs	r1, #2
 80021b4:	488f      	ldr	r0, [pc, #572]	; (80023f4 <menu+0xe44>)
 80021b6:	f007 fa43 	bl	8009640 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d115      	bne.n	80021ec <menu+0xc3c>
 80021c0:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <menu+0xe48>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <menu+0xe4c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <menu+0xe4c>)
 80021d8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <menu+0xe4c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d902      	bls.n	80021e8 <menu+0xc38>
				yavaslamaLimit = 0;
 80021e2:	4b86      	ldr	r3, [pc, #536]	; (80023fc <menu+0xe4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021e8:	f002 fd3e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ec:	2104      	movs	r1, #4
 80021ee:	4881      	ldr	r0, [pc, #516]	; (80023f4 <menu+0xe44>)
 80021f0:	f007 fa26 	bl	8009640 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d115      	bne.n	8002226 <menu+0xc76>
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <menu+0xe48>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00e      	beq.n	8002226 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002208:	4b7c      	ldr	r3, [pc, #496]	; (80023fc <menu+0xe4c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <menu+0xe4c>)
 8002212:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002214:	4b79      	ldr	r3, [pc, #484]	; (80023fc <menu+0xe4c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800221c:	4b77      	ldr	r3, [pc, #476]	; (80023fc <menu+0xe4c>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002222:	f002 fd21 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002226:	2108      	movs	r1, #8
 8002228:	4872      	ldr	r0, [pc, #456]	; (80023f4 <menu+0xe44>)
 800222a:	f007 fa09 	bl	8009640 <HAL_GPIO_ReadPin>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10d      	bne.n	8002250 <menu+0xca0>
 8002234:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <menu+0xe48>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002242:	4b6e      	ldr	r3, [pc, #440]	; (80023fc <menu+0xe4c>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <menu+0xe50>)
 8002248:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <menu+0xe54>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002250:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <menu+0xe58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b05      	cmp	r3, #5
 8002256:	f040 80b9 	bne.w	80023cc <menu+0xe1c>
		if(dilSecim == 0) {
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <menu+0xe3c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d105      	bne.n	800226e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002262:	4a6a      	ldr	r2, [pc, #424]	; (800240c <menu+0xe5c>)
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f005 fec4 	bl	8007ff4 <lcd_print>
 800226c:	e008      	b.n	8002280 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <menu+0xe3c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d104      	bne.n	8002280 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002276:	4a66      	ldr	r2, [pc, #408]	; (8002410 <menu+0xe60>)
 8002278:	2101      	movs	r1, #1
 800227a:	2001      	movs	r0, #1
 800227c:	f005 feba 	bl	8007ff4 <lcd_print>
		}

		if(altLimit == 0) {
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <menu+0xe64>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <menu+0xd00>
			if(dilSecim == 0) {
 8002288:	4b58      	ldr	r3, [pc, #352]	; (80023ec <menu+0xe3c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002290:	4a61      	ldr	r2, [pc, #388]	; (8002418 <menu+0xe68>)
 8002292:	2101      	movs	r1, #1
 8002294:	2002      	movs	r0, #2
 8002296:	f005 fead 	bl	8007ff4 <lcd_print>
 800229a:	e020      	b.n	80022de <menu+0xd2e>
			} else if(dilSecim == 1) {
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <menu+0xe3c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d11c      	bne.n	80022de <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80022a4:	4a5d      	ldr	r2, [pc, #372]	; (800241c <menu+0xe6c>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	2002      	movs	r0, #2
 80022aa:	f005 fea3 	bl	8007ff4 <lcd_print>
 80022ae:	e016      	b.n	80022de <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <menu+0xe64>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d112      	bne.n	80022de <menu+0xd2e>
			if(dilSecim == 0){
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <menu+0xe3c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80022c0:	4a57      	ldr	r2, [pc, #348]	; (8002420 <menu+0xe70>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	2002      	movs	r0, #2
 80022c6:	f005 fe95 	bl	8007ff4 <lcd_print>
 80022ca:	e008      	b.n	80022de <menu+0xd2e>
			} else if(dilSecim == 1){
 80022cc:	4b47      	ldr	r3, [pc, #284]	; (80023ec <menu+0xe3c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d104      	bne.n	80022de <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <menu+0xe40>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	2002      	movs	r0, #2
 80022da:	f005 fe8b 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80022de:	2102      	movs	r1, #2
 80022e0:	4844      	ldr	r0, [pc, #272]	; (80023f4 <menu+0xe44>)
 80022e2:	f007 f9ad 	bl	8009640 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d119      	bne.n	8002320 <menu+0xd70>
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <menu+0xe48>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <menu+0xd70>
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <menu+0xe74>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <menu+0xd70>
			altLimit = altLimit + 1;
 8002302:	4b44      	ldr	r3, [pc, #272]	; (8002414 <menu+0xe64>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b42      	ldr	r3, [pc, #264]	; (8002414 <menu+0xe64>)
 800230c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <menu+0xe64>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d902      	bls.n	800231c <menu+0xd6c>
				altLimit = 0;
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <menu+0xe64>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800231c:	f002 fca4 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002320:	2104      	movs	r1, #4
 8002322:	4834      	ldr	r0, [pc, #208]	; (80023f4 <menu+0xe44>)
 8002324:	f007 f98c 	bl	8009640 <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d119      	bne.n	8002362 <menu+0xdb2>
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <menu+0xe48>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d012      	beq.n	8002362 <menu+0xdb2>
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <menu+0xe74>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <menu+0xe64>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <menu+0xe64>)
 800234e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002350:	4b30      	ldr	r3, [pc, #192]	; (8002414 <menu+0xe64>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <menu+0xdae>
		   		altLimit = 1;
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <menu+0xe64>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800235e:	f002 fc83 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2108      	movs	r1, #8
 8002364:	4823      	ldr	r0, [pc, #140]	; (80023f4 <menu+0xe44>)
 8002366:	f007 f96b 	bl	8009640 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d12d      	bne.n	80023cc <menu+0xe1c>
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <menu+0xe48>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d026      	beq.n	80023cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <menu+0xe64>)
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <menu+0xe50>)
 8002384:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <menu+0xe64>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d110      	bne.n	80023b0 <menu+0xe00>
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <menu+0xe78>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <menu+0xdee>
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <menu+0xe78>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d108      	bne.n	80023b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <menu+0xe78>)
 80023a0:	2203      	movs	r2, #3
 80023a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <menu+0xe78>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <menu+0xe50>)
 80023aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023ae:	e00a      	b.n	80023c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <menu+0xe64>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <menu+0xe7c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <menu+0xe7c>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <menu+0xe50>)
 80023c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <menu+0xe54>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <menu+0xe58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	f040 80b6 	bne.w	8002542 <menu+0xf92>
		if(dilSecim == 0) {
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <menu+0xe3c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12a      	bne.n	8002434 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <menu+0xe80>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	2001      	movs	r0, #1
 80023e4:	f005 fe06 	bl	8007ff4 <lcd_print>
 80023e8:	e02d      	b.n	8002446 <menu+0xe96>
 80023ea:	bf00      	nop
 80023ec:	2000024d 	.word	0x2000024d
 80023f0:	0800d7cc 	.word	0x0800d7cc
 80023f4:	40010800 	.word	0x40010800
 80023f8:	2000025b 	.word	0x2000025b
 80023fc:	20000231 	.word	0x20000231
 8002400:	20000158 	.word	0x20000158
 8002404:	20000258 	.word	0x20000258
 8002408:	2000022c 	.word	0x2000022c
 800240c:	0800d7e0 	.word	0x0800d7e0
 8002410:	0800d7f4 	.word	0x0800d7f4
 8002414:	20000232 	.word	0x20000232
 8002418:	0800d758 	.word	0x0800d758
 800241c:	0800d76c 	.word	0x0800d76c
 8002420:	0800d7b8 	.word	0x0800d7b8
 8002424:	2000022d 	.word	0x2000022d
 8002428:	20000239 	.word	0x20000239
 800242c:	2000023f 	.word	0x2000023f
 8002430:	0800d808 	.word	0x0800d808
		} else if(dilSecim == 1){
 8002434:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <menu+0x1070>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d104      	bne.n	8002446 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800243c:	4a79      	ldr	r2, [pc, #484]	; (8002624 <menu+0x1074>)
 800243e:	2101      	movs	r1, #1
 8002440:	2001      	movs	r0, #1
 8002442:	f005 fdd7 	bl	8007ff4 <lcd_print>
		}
		if(basincSalteri == 0){
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <menu+0x1078>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <menu+0xec6>
			if(dilSecim == 0) {
 800244e:	4b74      	ldr	r3, [pc, #464]	; (8002620 <menu+0x1070>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002456:	4a75      	ldr	r2, [pc, #468]	; (800262c <menu+0x107c>)
 8002458:	2101      	movs	r1, #1
 800245a:	2002      	movs	r0, #2
 800245c:	f005 fdca 	bl	8007ff4 <lcd_print>
 8002460:	e020      	b.n	80024a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <menu+0x1070>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d11c      	bne.n	80024a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <menu+0x1080>)
 800246c:	2101      	movs	r1, #1
 800246e:	2002      	movs	r0, #2
 8002470:	f005 fdc0 	bl	8007ff4 <lcd_print>
 8002474:	e016      	b.n	80024a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002476:	4b6c      	ldr	r3, [pc, #432]	; (8002628 <menu+0x1078>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d112      	bne.n	80024a4 <menu+0xef4>
			if(dilSecim == 0) {
 800247e:	4b68      	ldr	r3, [pc, #416]	; (8002620 <menu+0x1070>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002486:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <menu+0x1084>)
 8002488:	2101      	movs	r1, #1
 800248a:	2002      	movs	r0, #2
 800248c:	f005 fdb2 	bl	8007ff4 <lcd_print>
 8002490:	e008      	b.n	80024a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <menu+0x1070>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d104      	bne.n	80024a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800249a:	4a67      	ldr	r2, [pc, #412]	; (8002638 <menu+0x1088>)
 800249c:	2101      	movs	r1, #1
 800249e:	2002      	movs	r0, #2
 80024a0:	f005 fda8 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024a4:	2102      	movs	r1, #2
 80024a6:	4865      	ldr	r0, [pc, #404]	; (800263c <menu+0x108c>)
 80024a8:	f007 f8ca 	bl	8009640 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d115      	bne.n	80024de <menu+0xf2e>
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <menu+0x1090>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <menu+0x1078>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <menu+0x1078>)
 80024ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80024cc:	4b56      	ldr	r3, [pc, #344]	; (8002628 <menu+0x1078>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d902      	bls.n	80024da <menu+0xf2a>
				basincSalteri = 0;
 80024d4:	4b54      	ldr	r3, [pc, #336]	; (8002628 <menu+0x1078>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024da:	f002 fbc5 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024de:	2104      	movs	r1, #4
 80024e0:	4856      	ldr	r0, [pc, #344]	; (800263c <menu+0x108c>)
 80024e2:	f007 f8ad 	bl	8009640 <HAL_GPIO_ReadPin>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d115      	bne.n	8002518 <menu+0xf68>
 80024ec:	4b54      	ldr	r3, [pc, #336]	; (8002640 <menu+0x1090>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f083 0301 	eor.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00e      	beq.n	8002518 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <menu+0x1078>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <menu+0x1078>)
 8002504:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <menu+0x1078>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <menu+0xf64>
		   		basincSalteri = 1;
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <menu+0x1078>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002514:	f002 fba8 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002518:	2108      	movs	r1, #8
 800251a:	4848      	ldr	r0, [pc, #288]	; (800263c <menu+0x108c>)
 800251c:	f007 f890 	bl	8009640 <HAL_GPIO_ReadPin>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10d      	bne.n	8002542 <menu+0xf92>
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <menu+0x1090>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002534:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <menu+0x1078>)
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <menu+0x1094>)
 800253a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <menu+0x1098>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002542:	4b42      	ldr	r3, [pc, #264]	; (800264c <menu+0x109c>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b07      	cmp	r3, #7
 8002548:	f040 80f5 	bne.w	8002736 <menu+0x1186>
		if(dilSecim == 0) {
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <menu+0x1070>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002554:	4a3e      	ldr	r2, [pc, #248]	; (8002650 <menu+0x10a0>)
 8002556:	2101      	movs	r1, #1
 8002558:	2001      	movs	r0, #1
 800255a:	f005 fd4b 	bl	8007ff4 <lcd_print>
 800255e:	e008      	b.n	8002572 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <menu+0x1070>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d104      	bne.n	8002572 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002568:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <menu+0x10a4>)
 800256a:	2101      	movs	r1, #1
 800256c:	2001      	movs	r0, #1
 800256e:	f005 fd41 	bl	8007ff4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <menu+0x10a8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d113      	bne.n	80025a2 <menu+0xff2>
			if(dilSecim == 0) {
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <menu+0x1070>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002582:	4a2a      	ldr	r2, [pc, #168]	; (800262c <menu+0x107c>)
 8002584:	2101      	movs	r1, #1
 8002586:	2002      	movs	r0, #2
 8002588:	f005 fd34 	bl	8007ff4 <lcd_print>
 800258c:	e079      	b.n	8002682 <menu+0x10d2>
			} else if(dilSecim == 1){
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <menu+0x1070>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d175      	bne.n	8002682 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002596:	4a26      	ldr	r2, [pc, #152]	; (8002630 <menu+0x1080>)
 8002598:	2101      	movs	r1, #1
 800259a:	2002      	movs	r0, #2
 800259c:	f005 fd2a 	bl	8007ff4 <lcd_print>
 80025a0:	e06f      	b.n	8002682 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <menu+0x10a8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d113      	bne.n	80025d2 <menu+0x1022>
			if(dilSecim == 0) {
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <menu+0x1070>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <menu+0x10ac>)
 80025b4:	2101      	movs	r1, #1
 80025b6:	2002      	movs	r0, #2
 80025b8:	f005 fd1c 	bl	8007ff4 <lcd_print>
 80025bc:	e061      	b.n	8002682 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <menu+0x1070>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d15d      	bne.n	8002682 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <menu+0x10b0>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	2002      	movs	r0, #2
 80025cc:	f005 fd12 	bl	8007ff4 <lcd_print>
 80025d0:	e057      	b.n	8002682 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <menu+0x10a8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d113      	bne.n	8002602 <menu+0x1052>
			if(dilSecim == 0) {
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <menu+0x1070>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <menu+0x10b4>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2002      	movs	r0, #2
 80025e8:	f005 fd04 	bl	8007ff4 <lcd_print>
 80025ec:	e049      	b.n	8002682 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <menu+0x1070>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d145      	bne.n	8002682 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <menu+0x10b8>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2002      	movs	r0, #2
 80025fc:	f005 fcfa 	bl	8007ff4 <lcd_print>
 8002600:	e03f      	b.n	8002682 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <menu+0x10a8>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d13b      	bne.n	8002682 <menu+0x10d2>
			if(dilSecim == 0) {
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <menu+0x1070>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12e      	bne.n	8002670 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <menu+0x10bc>)
 8002614:	2101      	movs	r1, #1
 8002616:	2002      	movs	r0, #2
 8002618:	f005 fcec 	bl	8007ff4 <lcd_print>
 800261c:	e031      	b.n	8002682 <menu+0x10d2>
 800261e:	bf00      	nop
 8002620:	2000024d 	.word	0x2000024d
 8002624:	0800d818 	.word	0x0800d818
 8002628:	20000233 	.word	0x20000233
 800262c:	0800d758 	.word	0x0800d758
 8002630:	0800d76c 	.word	0x0800d76c
 8002634:	0800d7b8 	.word	0x0800d7b8
 8002638:	0800d7cc 	.word	0x0800d7cc
 800263c:	40010800 	.word	0x40010800
 8002640:	2000025b 	.word	0x2000025b
 8002644:	20000158 	.word	0x20000158
 8002648:	20000258 	.word	0x20000258
 800264c:	2000022c 	.word	0x2000022c
 8002650:	0800d828 	.word	0x0800d828
 8002654:	0800d83c 	.word	0x0800d83c
 8002658:	20000234 	.word	0x20000234
 800265c:	0800d850 	.word	0x0800d850
 8002660:	0800d864 	.word	0x0800d864
 8002664:	0800d878 	.word	0x0800d878
 8002668:	0800d88c 	.word	0x0800d88c
 800266c:	0800d8a0 	.word	0x0800d8a0
			} else if(dilSecim == 1){
 8002670:	4b99      	ldr	r3, [pc, #612]	; (80028d8 <menu+0x1328>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d104      	bne.n	8002682 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002678:	4a98      	ldr	r2, [pc, #608]	; (80028dc <menu+0x132c>)
 800267a:	2101      	movs	r1, #1
 800267c:	2002      	movs	r0, #2
 800267e:	f005 fcb9 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002682:	2102      	movs	r1, #2
 8002684:	4896      	ldr	r0, [pc, #600]	; (80028e0 <menu+0x1330>)
 8002686:	f006 ffdb 	bl	8009640 <HAL_GPIO_ReadPin>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d115      	bne.n	80026bc <menu+0x110c>
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <menu+0x1334>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800269e:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <menu+0x1338>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <menu+0x1338>)
 80026a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026aa:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <menu+0x1338>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d902      	bls.n	80026b8 <menu+0x1108>
				kapiSecimleri = 0;
 80026b2:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <menu+0x1338>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026b8:	f002 fad6 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026bc:	2104      	movs	r1, #4
 80026be:	4888      	ldr	r0, [pc, #544]	; (80028e0 <menu+0x1330>)
 80026c0:	f006 ffbe 	bl	8009640 <HAL_GPIO_ReadPin>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d115      	bne.n	80026f6 <menu+0x1146>
 80026ca:	4b86      	ldr	r3, [pc, #536]	; (80028e4 <menu+0x1334>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <menu+0x1338>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b81      	ldr	r3, [pc, #516]	; (80028e8 <menu+0x1338>)
 80026e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <menu+0x1338>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d902      	bls.n	80026f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80026ec:	4b7e      	ldr	r3, [pc, #504]	; (80028e8 <menu+0x1338>)
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026f2:	f002 fab9 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f6:	2108      	movs	r1, #8
 80026f8:	4879      	ldr	r0, [pc, #484]	; (80028e0 <menu+0x1330>)
 80026fa:	f006 ffa1 	bl	8009640 <HAL_GPIO_ReadPin>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d118      	bne.n	8002736 <menu+0x1186>
 8002704:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <menu+0x1334>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002712:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <menu+0x1338>)
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	4b75      	ldr	r3, [pc, #468]	; (80028ec <menu+0x133c>)
 8002718:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <menu+0x1338>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <menu+0x1180>
				altLimit = 1;
 8002722:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <menu+0x1340>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <menu+0x1340>)
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <menu+0x133c>)
 800272e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002730:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <menu+0x1344>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002736:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <menu+0x1348>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	f040 8092 	bne.w	8002864 <menu+0x12b4>
		if(dilSecim == 0) {
 8002740:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <menu+0x1328>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002748:	4a6c      	ldr	r2, [pc, #432]	; (80028fc <menu+0x134c>)
 800274a:	2101      	movs	r1, #1
 800274c:	2001      	movs	r0, #1
 800274e:	f005 fc51 	bl	8007ff4 <lcd_print>
 8002752:	e008      	b.n	8002766 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002754:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <menu+0x1328>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d104      	bne.n	8002766 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <menu+0x1350>)
 800275e:	2101      	movs	r1, #1
 8002760:	2001      	movs	r0, #1
 8002762:	f005 fc47 	bl	8007ff4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <menu+0x1354>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <menu+0x11e6>
			if(dilSecim == 0) {
 800276e:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <menu+0x1328>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002776:	4a64      	ldr	r2, [pc, #400]	; (8002908 <menu+0x1358>)
 8002778:	2101      	movs	r1, #1
 800277a:	2002      	movs	r0, #2
 800277c:	f005 fc3a 	bl	8007ff4 <lcd_print>
 8002780:	e020      	b.n	80027c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002782:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <menu+0x1328>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11c      	bne.n	80027c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800278a:	4a60      	ldr	r2, [pc, #384]	; (800290c <menu+0x135c>)
 800278c:	2101      	movs	r1, #1
 800278e:	2002      	movs	r0, #2
 8002790:	f005 fc30 	bl	8007ff4 <lcd_print>
 8002794:	e016      	b.n	80027c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <menu+0x1354>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d112      	bne.n	80027c4 <menu+0x1214>
			if(dilSecim == 0){
 800279e:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <menu+0x1328>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80027a6:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <menu+0x1360>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	2002      	movs	r0, #2
 80027ac:	f005 fc22 	bl	8007ff4 <lcd_print>
 80027b0:	e008      	b.n	80027c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <menu+0x1328>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d104      	bne.n	80027c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <menu+0x1364>)
 80027bc:	2101      	movs	r1, #1
 80027be:	2002      	movs	r0, #2
 80027c0:	f005 fc18 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c4:	2102      	movs	r1, #2
 80027c6:	4846      	ldr	r0, [pc, #280]	; (80028e0 <menu+0x1330>)
 80027c8:	f006 ff3a 	bl	8009640 <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d115      	bne.n	80027fe <menu+0x124e>
 80027d2:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <menu+0x1334>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80027e0:	4b48      	ldr	r3, [pc, #288]	; (8002904 <menu+0x1354>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <menu+0x1354>)
 80027ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80027ec:	4b45      	ldr	r3, [pc, #276]	; (8002904 <menu+0x1354>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d902      	bls.n	80027fa <menu+0x124a>
				kapiAcTipi = 0;
 80027f4:	4b43      	ldr	r3, [pc, #268]	; (8002904 <menu+0x1354>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027fa:	f002 fa35 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fe:	2104      	movs	r1, #4
 8002800:	4837      	ldr	r0, [pc, #220]	; (80028e0 <menu+0x1330>)
 8002802:	f006 ff1d 	bl	8009640 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d115      	bne.n	8002838 <menu+0x1288>
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <menu+0x1334>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <menu+0x1354>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3b01      	subs	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <menu+0x1354>)
 8002824:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <menu+0x1354>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <menu+0x1284>
		   		kapiAcTipi = 1;
 800282e:	4b35      	ldr	r3, [pc, #212]	; (8002904 <menu+0x1354>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002834:	f002 fa18 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002838:	2108      	movs	r1, #8
 800283a:	4829      	ldr	r0, [pc, #164]	; (80028e0 <menu+0x1330>)
 800283c:	f006 ff00 	bl	8009640 <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10e      	bne.n	8002864 <menu+0x12b4>
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <menu+0x1334>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <menu+0x1354>)
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <menu+0x133c>)
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <menu+0x1344>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <menu+0x1348>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b09      	cmp	r3, #9
 800286a:	f040 80b9 	bne.w	80029e0 <menu+0x1430>
		if(dilSecim == 0){
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <menu+0x1328>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002876:	4a28      	ldr	r2, [pc, #160]	; (8002918 <menu+0x1368>)
 8002878:	2101      	movs	r1, #1
 800287a:	2001      	movs	r0, #1
 800287c:	f005 fbba 	bl	8007ff4 <lcd_print>
 8002880:	e008      	b.n	8002894 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <menu+0x1328>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d104      	bne.n	8002894 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <menu+0x136c>)
 800288c:	2101      	movs	r1, #1
 800288e:	2001      	movs	r0, #1
 8002890:	f005 fbb0 	bl	8007ff4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <menu+0x1370>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800289c:	4a21      	ldr	r2, [pc, #132]	; (8002924 <menu+0x1374>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2002      	movs	r0, #2
 80028a2:	f005 fba7 	bl	8007ff4 <lcd_print>
 80028a6:	e04c      	b.n	8002942 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <menu+0x1370>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d13f      	bne.n	8002930 <menu+0x1380>
			if(dilSecim == 0){
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <menu+0x1328>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <menu+0x1378>)
 80028ba:	2101      	movs	r1, #1
 80028bc:	2002      	movs	r0, #2
 80028be:	f005 fb99 	bl	8007ff4 <lcd_print>
 80028c2:	e03e      	b.n	8002942 <menu+0x1392>
			} else if(dilSecim == 1) {
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <menu+0x1328>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d13a      	bne.n	8002942 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <menu+0x137c>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2002      	movs	r0, #2
 80028d2:	f005 fb8f 	bl	8007ff4 <lcd_print>
 80028d6:	e034      	b.n	8002942 <menu+0x1392>
 80028d8:	2000024d 	.word	0x2000024d
 80028dc:	0800d8b4 	.word	0x0800d8b4
 80028e0:	40010800 	.word	0x40010800
 80028e4:	2000025b 	.word	0x2000025b
 80028e8:	20000234 	.word	0x20000234
 80028ec:	20000158 	.word	0x20000158
 80028f0:	20000232 	.word	0x20000232
 80028f4:	20000258 	.word	0x20000258
 80028f8:	2000022c 	.word	0x2000022c
 80028fc:	0800d8c8 	.word	0x0800d8c8
 8002900:	0800d8dc 	.word	0x0800d8dc
 8002904:	20000238 	.word	0x20000238
 8002908:	0800d8f0 	.word	0x0800d8f0
 800290c:	0800d900 	.word	0x0800d900
 8002910:	0800d910 	.word	0x0800d910
 8002914:	0800d924 	.word	0x0800d924
 8002918:	0800d938 	.word	0x0800d938
 800291c:	0800d94c 	.word	0x0800d94c
 8002920:	20000235 	.word	0x20000235
 8002924:	0800d960 	.word	0x0800d960
 8002928:	0800d974 	.word	0x0800d974
 800292c:	0800d984 	.word	0x0800d984
			}
		} else if(kapi1Tip == 2) {
 8002930:	4b8a      	ldr	r3, [pc, #552]	; (8002b5c <menu+0x15ac>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d104      	bne.n	8002942 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002938:	4a89      	ldr	r2, [pc, #548]	; (8002b60 <menu+0x15b0>)
 800293a:	2101      	movs	r1, #1
 800293c:	2002      	movs	r0, #2
 800293e:	f005 fb59 	bl	8007ff4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002942:	2102      	movs	r1, #2
 8002944:	4887      	ldr	r0, [pc, #540]	; (8002b64 <menu+0x15b4>)
 8002946:	f006 fe7b 	bl	8009640 <HAL_GPIO_ReadPin>
 800294a:	4603      	mov	r3, r0
 800294c:	2b01      	cmp	r3, #1
 800294e:	d115      	bne.n	800297c <menu+0x13cc>
 8002950:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <menu+0x15b8>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800295e:	4b7f      	ldr	r3, [pc, #508]	; (8002b5c <menu+0x15ac>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <menu+0x15ac>)
 8002968:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800296a:	4b7c      	ldr	r3, [pc, #496]	; (8002b5c <menu+0x15ac>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <menu+0x13c8>
				kapi1Tip = 0;
 8002972:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <menu+0x15ac>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002978:	f002 f976 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800297c:	2104      	movs	r1, #4
 800297e:	4879      	ldr	r0, [pc, #484]	; (8002b64 <menu+0x15b4>)
 8002980:	f006 fe5e 	bl	8009640 <HAL_GPIO_ReadPin>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d115      	bne.n	80029b6 <menu+0x1406>
 800298a:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <menu+0x15b8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <menu+0x15ac>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <menu+0x15ac>)
 80029a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <menu+0x15ac>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d902      	bls.n	80029b2 <menu+0x1402>
		   		kapi1Tip = 2;
 80029ac:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <menu+0x15ac>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029b2:	f002 f959 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b6:	2108      	movs	r1, #8
 80029b8:	486a      	ldr	r0, [pc, #424]	; (8002b64 <menu+0x15b4>)
 80029ba:	f006 fe41 	bl	8009640 <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10d      	bne.n	80029e0 <menu+0x1430>
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <menu+0x15b8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80029d2:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <menu+0x15ac>)
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <menu+0x15bc>)
 80029d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <menu+0x15c0>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <menu+0x15c4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b0a      	cmp	r3, #10
 80029e6:	d17f      	bne.n	8002ae8 <menu+0x1538>
		if(dilSecim == 0) {
 80029e8:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <menu+0x15c8>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80029f0:	4a62      	ldr	r2, [pc, #392]	; (8002b7c <menu+0x15cc>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2001      	movs	r0, #1
 80029f6:	f005 fafd 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029fa:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <menu+0x15d0>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2002      	movs	r0, #2
 8002a00:	f005 faf8 	bl	8007ff4 <lcd_print>
 8002a04:	e00d      	b.n	8002a22 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002a06:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <menu+0x15c8>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d109      	bne.n	8002a22 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	; (8002b84 <menu+0x15d4>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	2001      	movs	r0, #1
 8002a14:	f005 faee 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a18:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <menu+0x15d8>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f005 fae9 	bl	8007ff4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a22:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <menu+0x15dc>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	220a      	movs	r2, #10
 8002a28:	4959      	ldr	r1, [pc, #356]	; (8002b90 <menu+0x15e0>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f009 fe90 	bl	800c750 <itoa>
		lcd_print(2,16,snum);
 8002a30:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <menu+0x15e0>)
 8002a32:	2110      	movs	r1, #16
 8002a34:	2002      	movs	r0, #2
 8002a36:	f005 fadd 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4849      	ldr	r0, [pc, #292]	; (8002b64 <menu+0x15b4>)
 8002a3e:	f006 fdff 	bl	8009640 <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d119      	bne.n	8002a7c <menu+0x14cc>
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <menu+0x15b8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d012      	beq.n	8002a7c <menu+0x14cc>
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <menu+0x15ac>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <menu+0x15dc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <menu+0x15dc>)
 8002a68:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a6a:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <menu+0x15dc>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d902      	bls.n	8002a78 <menu+0x14c8>
				kapi1AcSure = 0;
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <menu+0x15dc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a78:	f002 f8f6 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	4839      	ldr	r0, [pc, #228]	; (8002b64 <menu+0x15b4>)
 8002a80:	f006 fdde 	bl	8009640 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d119      	bne.n	8002abe <menu+0x150e>
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <menu+0x15b8>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <menu+0x150e>
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <menu+0x15ac>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10e      	bne.n	8002abe <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <menu+0x15dc>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <menu+0x15dc>)
 8002aaa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002aac:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <menu+0x15dc>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d902      	bls.n	8002aba <menu+0x150a>
		   		kapi1AcSure = 5;
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <menu+0x15dc>)
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aba:	f002 f8d5 	bl	8004c68 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002abe:	2108      	movs	r1, #8
 8002ac0:	4828      	ldr	r0, [pc, #160]	; (8002b64 <menu+0x15b4>)
 8002ac2:	f006 fdbd 	bl	8009640 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10d      	bne.n	8002ae8 <menu+0x1538>
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <menu+0x15b8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <menu+0x15dc>)
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <menu+0x15bc>)
 8002ae0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <menu+0x15c0>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <menu+0x15c4>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	f040 80b5 	bne.w	8002c5c <menu+0x16ac>
		if(dilSecim == 0) {
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <menu+0x15c8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <menu+0x15e4>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2001      	movs	r0, #1
 8002b00:	f005 fa78 	bl	8007ff4 <lcd_print>
 8002b04:	e008      	b.n	8002b18 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <menu+0x15c8>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d104      	bne.n	8002b18 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <menu+0x15e8>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	2001      	movs	r0, #1
 8002b14:	f005 fa6e 	bl	8007ff4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <menu+0x15ec>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <menu+0x15f0>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	2002      	movs	r0, #2
 8002b26:	f005 fa65 	bl	8007ff4 <lcd_print>
 8002b2a:	e048      	b.n	8002bbe <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <menu+0x15ec>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d13b      	bne.n	8002bac <menu+0x15fc>
			if(dilSecim == 0) {
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <menu+0x15c8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <menu+0x15f4>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f005 fa57 	bl	8007ff4 <lcd_print>
 8002b46:	e03a      	b.n	8002bbe <menu+0x160e>
			} else if(dilSecim == 1) {
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <menu+0x15c8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d136      	bne.n	8002bbe <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <menu+0x15f8>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	2002      	movs	r0, #2
 8002b56:	f005 fa4d 	bl	8007ff4 <lcd_print>
 8002b5a:	e030      	b.n	8002bbe <menu+0x160e>
 8002b5c:	20000235 	.word	0x20000235
 8002b60:	0800d998 	.word	0x0800d998
 8002b64:	40010800 	.word	0x40010800
 8002b68:	2000025b 	.word	0x2000025b
 8002b6c:	20000158 	.word	0x20000158
 8002b70:	20000258 	.word	0x20000258
 8002b74:	2000022c 	.word	0x2000022c
 8002b78:	2000024d 	.word	0x2000024d
 8002b7c:	0800d9a8 	.word	0x0800d9a8
 8002b80:	0800d9bc 	.word	0x0800d9bc
 8002b84:	0800d9cc 	.word	0x0800d9cc
 8002b88:	0800d9e0 	.word	0x0800d9e0
 8002b8c:	20000245 	.word	0x20000245
 8002b90:	200001c8 	.word	0x200001c8
 8002b94:	0800d9f0 	.word	0x0800d9f0
 8002b98:	0800da04 	.word	0x0800da04
 8002b9c:	20000236 	.word	0x20000236
 8002ba0:	0800d960 	.word	0x0800d960
 8002ba4:	0800d974 	.word	0x0800d974
 8002ba8:	0800d984 	.word	0x0800d984
			}
		} else if(kapi2Tip == 2) {
 8002bac:	4b8a      	ldr	r3, [pc, #552]	; (8002dd8 <menu+0x1828>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d104      	bne.n	8002bbe <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002bb4:	4a89      	ldr	r2, [pc, #548]	; (8002ddc <menu+0x182c>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f005 fa1b 	bl	8007ff4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4887      	ldr	r0, [pc, #540]	; (8002de0 <menu+0x1830>)
 8002bc2:	f006 fd3d 	bl	8009640 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d115      	bne.n	8002bf8 <menu+0x1648>
 8002bcc:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <menu+0x1834>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00e      	beq.n	8002bf8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <menu+0x1828>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <menu+0x1828>)
 8002be4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002be6:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <menu+0x1828>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <menu+0x1644>
				kapi2Tip = 0;
 8002bee:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <menu+0x1828>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bf4:	f002 f838 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	4879      	ldr	r0, [pc, #484]	; (8002de0 <menu+0x1830>)
 8002bfc:	f006 fd20 	bl	8009640 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d115      	bne.n	8002c32 <menu+0x1682>
 8002c06:	4b77      	ldr	r3, [pc, #476]	; (8002de4 <menu+0x1834>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002c14:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <menu+0x1828>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <menu+0x1828>)
 8002c1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c20:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <menu+0x1828>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d902      	bls.n	8002c2e <menu+0x167e>
		   		kapi2Tip = 2;
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <menu+0x1828>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c2e:	f002 f81b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c32:	2108      	movs	r1, #8
 8002c34:	486a      	ldr	r0, [pc, #424]	; (8002de0 <menu+0x1830>)
 8002c36:	f006 fd03 	bl	8009640 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10d      	bne.n	8002c5c <menu+0x16ac>
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <menu+0x1834>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002c4e:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <menu+0x1828>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <menu+0x1838>)
 8002c54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <menu+0x183c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <menu+0x1840>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d17f      	bne.n	8002d64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002c64:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <menu+0x1844>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c6c:	4a62      	ldr	r2, [pc, #392]	; (8002df8 <menu+0x1848>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2001      	movs	r0, #1
 8002c72:	f005 f9bf 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c76:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <menu+0x184c>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f005 f9ba 	bl	8007ff4 <lcd_print>
 8002c80:	e00d      	b.n	8002c9e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002c82:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <menu+0x1844>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d109      	bne.n	8002c9e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c8a:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <menu+0x1850>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f005 f9b0 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c94:	4a5b      	ldr	r2, [pc, #364]	; (8002e04 <menu+0x1854>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f005 f9ab 	bl	8007ff4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <menu+0x1858>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	220a      	movs	r2, #10
 8002ca4:	4959      	ldr	r1, [pc, #356]	; (8002e0c <menu+0x185c>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f009 fd52 	bl	800c750 <itoa>
		lcd_print(2,16,snum);
 8002cac:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <menu+0x185c>)
 8002cae:	2110      	movs	r1, #16
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f005 f99f 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4849      	ldr	r0, [pc, #292]	; (8002de0 <menu+0x1830>)
 8002cba:	f006 fcc1 	bl	8009640 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d119      	bne.n	8002cf8 <menu+0x1748>
 8002cc4:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <menu+0x1834>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <menu+0x1748>
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <menu+0x1828>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10e      	bne.n	8002cf8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <menu+0x1858>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <menu+0x1858>)
 8002ce4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ce6:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <menu+0x1858>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d902      	bls.n	8002cf4 <menu+0x1744>
				kapi2AcSure = 0;
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <menu+0x1858>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf4:	f001 ffb8 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	4839      	ldr	r0, [pc, #228]	; (8002de0 <menu+0x1830>)
 8002cfc:	f006 fca0 	bl	8009640 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d119      	bne.n	8002d3a <menu+0x178a>
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <menu+0x1834>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <menu+0x178a>
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <menu+0x1828>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10e      	bne.n	8002d3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <menu+0x1858>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <menu+0x1858>)
 8002d26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <menu+0x1858>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b06      	cmp	r3, #6
 8002d2e:	d902      	bls.n	8002d36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <menu+0x1858>)
 8002d32:	2205      	movs	r2, #5
 8002d34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d36:	f001 ff97 	bl	8004c68 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	4828      	ldr	r0, [pc, #160]	; (8002de0 <menu+0x1830>)
 8002d3e:	f006 fc7f 	bl	8009640 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10d      	bne.n	8002d64 <menu+0x17b4>
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <menu+0x1834>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <menu+0x1858>)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <menu+0x1838>)
 8002d5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <menu+0x183c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <menu+0x1840>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b0d      	cmp	r3, #13
 8002d6a:	f040 80b5 	bne.w	8002ed8 <menu+0x1928>
		if(dilSecim == 0) {
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <menu+0x1844>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <menu+0x1860>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f005 f93a 	bl	8007ff4 <lcd_print>
 8002d80:	e008      	b.n	8002d94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <menu+0x1844>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d104      	bne.n	8002d94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <menu+0x1864>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f005 f930 	bl	8007ff4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <menu+0x1868>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <menu+0x186c>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f005 f927 	bl	8007ff4 <lcd_print>
 8002da6:	e048      	b.n	8002e3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <menu+0x1868>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d13b      	bne.n	8002e28 <menu+0x1878>
			if(dilSecim == 0) {
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <menu+0x1844>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <menu+0x1870>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f005 f919 	bl	8007ff4 <lcd_print>
 8002dc2:	e03a      	b.n	8002e3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <menu+0x1844>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d136      	bne.n	8002e3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <menu+0x1874>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f005 f90f 	bl	8007ff4 <lcd_print>
 8002dd6:	e030      	b.n	8002e3a <menu+0x188a>
 8002dd8:	20000236 	.word	0x20000236
 8002ddc:	0800d998 	.word	0x0800d998
 8002de0:	40010800 	.word	0x40010800
 8002de4:	2000025b 	.word	0x2000025b
 8002de8:	20000158 	.word	0x20000158
 8002dec:	20000258 	.word	0x20000258
 8002df0:	2000022c 	.word	0x2000022c
 8002df4:	2000024d 	.word	0x2000024d
 8002df8:	0800da18 	.word	0x0800da18
 8002dfc:	0800d9bc 	.word	0x0800d9bc
 8002e00:	0800da2c 	.word	0x0800da2c
 8002e04:	0800d9e0 	.word	0x0800d9e0
 8002e08:	20000246 	.word	0x20000246
 8002e0c:	200001c8 	.word	0x200001c8
 8002e10:	0800da40 	.word	0x0800da40
 8002e14:	0800da54 	.word	0x0800da54
 8002e18:	20000237 	.word	0x20000237
 8002e1c:	0800d960 	.word	0x0800d960
 8002e20:	0800d974 	.word	0x0800d974
 8002e24:	0800d984 	.word	0x0800d984
			}
		} else if(kapitablaTip == 2) {
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <menu+0x19e8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d104      	bne.n	8002e3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002e30:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <menu+0x19ec>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	2002      	movs	r0, #2
 8002e36:	f005 f8dd 	bl	8007ff4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4858      	ldr	r0, [pc, #352]	; (8002fa0 <menu+0x19f0>)
 8002e3e:	f006 fbff 	bl	8009640 <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d115      	bne.n	8002e74 <menu+0x18c4>
 8002e48:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <menu+0x19f4>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00e      	beq.n	8002e74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002e56:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <menu+0x19e8>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <menu+0x19e8>)
 8002e60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e62:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <menu+0x19e8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <menu+0x18c0>
				kapitablaTip = 0;
 8002e6a:	4b4b      	ldr	r3, [pc, #300]	; (8002f98 <menu+0x19e8>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e70:	f001 fefa 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e74:	2104      	movs	r1, #4
 8002e76:	484a      	ldr	r0, [pc, #296]	; (8002fa0 <menu+0x19f0>)
 8002e78:	f006 fbe2 	bl	8009640 <HAL_GPIO_ReadPin>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d115      	bne.n	8002eae <menu+0x18fe>
 8002e82:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <menu+0x19f4>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002e90:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <menu+0x19e8>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <menu+0x19e8>)
 8002e9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <menu+0x19e8>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d902      	bls.n	8002eaa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ea4:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <menu+0x19e8>)
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eaa:	f001 fedd 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eae:	2108      	movs	r1, #8
 8002eb0:	483b      	ldr	r0, [pc, #236]	; (8002fa0 <menu+0x19f0>)
 8002eb2:	f006 fbc5 	bl	8009640 <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10d      	bne.n	8002ed8 <menu+0x1928>
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <menu+0x19f4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <menu+0x19e8>)
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <menu+0x19f8>)
 8002ed0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <menu+0x19fc>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <menu+0x1a00>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b0e      	cmp	r3, #14
 8002ede:	f040 80f2 	bne.w	80030c6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002ee2:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <menu+0x1a04>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <menu+0x1a08>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f005 f880 	bl	8007ff4 <lcd_print>
 8002ef4:	e008      	b.n	8002f08 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <menu+0x1a04>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <menu+0x1a0c>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2001      	movs	r0, #1
 8002f04:	f005 f876 	bl	8007ff4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f08:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <menu+0x1a10>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <menu+0x1988>
			if(dilSecim == 0){
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <menu+0x1a04>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <menu+0x1a14>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f005 f869 	bl	8007ff4 <lcd_print>
 8002f22:	e071      	b.n	8003008 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <menu+0x1a04>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d16d      	bne.n	8003008 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <menu+0x1a18>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f005 f85f 	bl	8007ff4 <lcd_print>
 8002f36:	e067      	b.n	8003008 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <menu+0x1a10>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d112      	bne.n	8002f66 <menu+0x19b6>
			if(dilSecim == 0){
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <menu+0x1a04>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <menu+0x1a1c>)
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f005 f851 	bl	8007ff4 <lcd_print>
			}
			if(dilSecim == 1){
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <menu+0x1a04>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d156      	bne.n	8003008 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <menu+0x1a20>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f005 f848 	bl	8007ff4 <lcd_print>
 8002f64:	e050      	b.n	8003008 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <menu+0x1a10>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d136      	bne.n	8002fdc <menu+0x1a2c>
			if(dilSecim == 0){
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <menu+0x1a04>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <menu+0x1a24>)
 8002f78:	2101      	movs	r1, #1
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f005 f83a 	bl	8007ff4 <lcd_print>
 8002f80:	e042      	b.n	8003008 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <menu+0x1a04>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d13e      	bne.n	8003008 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f8a:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <menu+0x1a28>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f005 f830 	bl	8007ff4 <lcd_print>
 8002f94:	e038      	b.n	8003008 <menu+0x1a58>
 8002f96:	bf00      	nop
 8002f98:	20000237 	.word	0x20000237
 8002f9c:	0800d998 	.word	0x0800d998
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	2000025b 	.word	0x2000025b
 8002fa8:	20000158 	.word	0x20000158
 8002fac:	20000258 	.word	0x20000258
 8002fb0:	2000022c 	.word	0x2000022c
 8002fb4:	2000024d 	.word	0x2000024d
 8002fb8:	0800da68 	.word	0x0800da68
 8002fbc:	0800da7c 	.word	0x0800da7c
 8002fc0:	20000239 	.word	0x20000239
 8002fc4:	0800da90 	.word	0x0800da90
 8002fc8:	0800daa0 	.word	0x0800daa0
 8002fcc:	0800dab0 	.word	0x0800dab0
 8002fd0:	0800dac0 	.word	0x0800dac0
 8002fd4:	0800dad0 	.word	0x0800dad0
 8002fd8:	0800dae4 	.word	0x0800dae4
			}
		} else if(kapiTablaAcKonum == 3) {
 8002fdc:	4b9b      	ldr	r3, [pc, #620]	; (800324c <menu+0x1c9c>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d111      	bne.n	8003008 <menu+0x1a58>
			if(dilSecim == 0) {
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <menu+0x1ca0>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002fec:	4a99      	ldr	r2, [pc, #612]	; (8003254 <menu+0x1ca4>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f004 ffff 	bl	8007ff4 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ff6:	4b96      	ldr	r3, [pc, #600]	; (8003250 <menu+0x1ca0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d104      	bne.n	8003008 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002ffe:	4a96      	ldr	r2, [pc, #600]	; (8003258 <menu+0x1ca8>)
 8003000:	2101      	movs	r1, #1
 8003002:	2002      	movs	r0, #2
 8003004:	f004 fff6 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003008:	2102      	movs	r1, #2
 800300a:	4894      	ldr	r0, [pc, #592]	; (800325c <menu+0x1cac>)
 800300c:	f006 fb18 	bl	8009640 <HAL_GPIO_ReadPin>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d115      	bne.n	8003042 <menu+0x1a92>
 8003016:	4b92      	ldr	r3, [pc, #584]	; (8003260 <menu+0x1cb0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003024:	4b89      	ldr	r3, [pc, #548]	; (800324c <menu+0x1c9c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b87      	ldr	r3, [pc, #540]	; (800324c <menu+0x1c9c>)
 800302e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003030:	4b86      	ldr	r3, [pc, #536]	; (800324c <menu+0x1c9c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <menu+0x1c9c>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800303e:	f001 fe13 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003042:	2104      	movs	r1, #4
 8003044:	4885      	ldr	r0, [pc, #532]	; (800325c <menu+0x1cac>)
 8003046:	f006 fafb 	bl	8009640 <HAL_GPIO_ReadPin>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d115      	bne.n	800307c <menu+0x1acc>
 8003050:	4b83      	ldr	r3, [pc, #524]	; (8003260 <menu+0x1cb0>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	f083 0301 	eor.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00e      	beq.n	800307c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800305e:	4b7b      	ldr	r3, [pc, #492]	; (800324c <menu+0x1c9c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b79      	ldr	r3, [pc, #484]	; (800324c <menu+0x1c9c>)
 8003068:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800306a:	4b78      	ldr	r3, [pc, #480]	; (800324c <menu+0x1c9c>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d902      	bls.n	8003078 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <menu+0x1c9c>)
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003078:	f001 fdf6 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800307c:	2108      	movs	r1, #8
 800307e:	4877      	ldr	r0, [pc, #476]	; (800325c <menu+0x1cac>)
 8003080:	f006 fade 	bl	8009640 <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d11d      	bne.n	80030c6 <menu+0x1b16>
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <menu+0x1cb0>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	f083 0301 	eor.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <menu+0x1c9c>)
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	4b71      	ldr	r3, [pc, #452]	; (8003264 <menu+0x1cb4>)
 800309e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <menu+0x1c9c>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <menu+0x1b02>
 80030aa:	4b68      	ldr	r3, [pc, #416]	; (800324c <menu+0x1c9c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d106      	bne.n	80030c0 <menu+0x1b10>
				altLimit = 1;
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <menu+0x1cb8>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <menu+0x1cb8>)
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	4b69      	ldr	r3, [pc, #420]	; (8003264 <menu+0x1cb4>)
 80030be:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <menu+0x1cbc>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030c6:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <menu+0x1cc0>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d17f      	bne.n	80031ce <menu+0x1c1e>
		if(dilSecim == 0) {
 80030ce:	4b60      	ldr	r3, [pc, #384]	; (8003250 <menu+0x1ca0>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80030d6:	4a67      	ldr	r2, [pc, #412]	; (8003274 <menu+0x1cc4>)
 80030d8:	2101      	movs	r1, #1
 80030da:	2001      	movs	r0, #1
 80030dc:	f004 ff8a 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <menu+0x1cc8>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2002      	movs	r0, #2
 80030e6:	f004 ff85 	bl	8007ff4 <lcd_print>
 80030ea:	e00d      	b.n	8003108 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <menu+0x1ca0>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d109      	bne.n	8003108 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80030f4:	4a61      	ldr	r2, [pc, #388]	; (800327c <menu+0x1ccc>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	2001      	movs	r0, #1
 80030fa:	f004 ff7b 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80030fe:	4a60      	ldr	r2, [pc, #384]	; (8003280 <menu+0x1cd0>)
 8003100:	2101      	movs	r1, #1
 8003102:	2002      	movs	r0, #2
 8003104:	f004 ff76 	bl	8007ff4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <menu+0x1cd4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	220a      	movs	r2, #10
 800310e:	495e      	ldr	r1, [pc, #376]	; (8003288 <menu+0x1cd8>)
 8003110:	4618      	mov	r0, r3
 8003112:	f009 fb1d 	bl	800c750 <itoa>
		lcd_print(2,16,snum);
 8003116:	4a5c      	ldr	r2, [pc, #368]	; (8003288 <menu+0x1cd8>)
 8003118:	2110      	movs	r1, #16
 800311a:	2002      	movs	r0, #2
 800311c:	f004 ff6a 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003120:	2102      	movs	r1, #2
 8003122:	484e      	ldr	r0, [pc, #312]	; (800325c <menu+0x1cac>)
 8003124:	f006 fa8c 	bl	8009640 <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d119      	bne.n	8003162 <menu+0x1bb2>
 800312e:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <menu+0x1cb0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <menu+0x1bb2>
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <menu+0x1cdc>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10e      	bne.n	8003162 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003144:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <menu+0x1cd4>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <menu+0x1cd4>)
 800314e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <menu+0x1cd4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d902      	bls.n	800315e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003158:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <menu+0x1cd4>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800315e:	f001 fd83 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003162:	2104      	movs	r1, #4
 8003164:	483d      	ldr	r0, [pc, #244]	; (800325c <menu+0x1cac>)
 8003166:	f006 fa6b 	bl	8009640 <HAL_GPIO_ReadPin>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d119      	bne.n	80031a4 <menu+0x1bf4>
 8003170:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <menu+0x1cb0>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	f083 0301 	eor.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <menu+0x1bf4>
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <menu+0x1cdc>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <menu+0x1cd4>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	3b01      	subs	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <menu+0x1cd4>)
 8003190:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003192:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <menu+0x1cd4>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <menu+0x1cd4>)
 800319c:	2205      	movs	r2, #5
 800319e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80031a0:	f001 fd62 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a4:	2108      	movs	r1, #8
 80031a6:	482d      	ldr	r0, [pc, #180]	; (800325c <menu+0x1cac>)
 80031a8:	f006 fa4a 	bl	8009640 <HAL_GPIO_ReadPin>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <menu+0x1c1e>
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <menu+0x1cb0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <menu+0x1cd4>)
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <menu+0x1cb4>)
 80031c6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <menu+0x1cbc>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <menu+0x1cc0>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	f040 80bc 	bne.w	8003350 <menu+0x1da0>
		if(dilSecim == 0) {
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <menu+0x1ca0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <menu+0x1ce0>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2001      	movs	r0, #1
 80031e6:	f004 ff05 	bl	8007ff4 <lcd_print>
 80031ea:	e008      	b.n	80031fe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <menu+0x1ca0>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d104      	bne.n	80031fe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <menu+0x1ce4>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	2001      	movs	r0, #1
 80031fa:	f004 fefb 	bl	8007ff4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <menu+0x1ce8>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d113      	bne.n	800322e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <menu+0x1ca0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <menu+0x1ca4>)
 8003210:	2101      	movs	r1, #1
 8003212:	2002      	movs	r0, #2
 8003214:	f004 feee 	bl	8007ff4 <lcd_print>
 8003218:	e04b      	b.n	80032b2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <menu+0x1ca0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d147      	bne.n	80032b2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <menu+0x1ca8>)
 8003224:	2101      	movs	r1, #1
 8003226:	2002      	movs	r0, #2
 8003228:	f004 fee4 	bl	8007ff4 <lcd_print>
 800322c:	e041      	b.n	80032b2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <menu+0x1ce8>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d13d      	bne.n	80032b2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <menu+0x1ca0>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d130      	bne.n	80032a0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <menu+0x1cec>)
 8003240:	2101      	movs	r1, #1
 8003242:	2002      	movs	r0, #2
 8003244:	f004 fed6 	bl	8007ff4 <lcd_print>
 8003248:	e033      	b.n	80032b2 <menu+0x1d02>
 800324a:	bf00      	nop
 800324c:	20000239 	.word	0x20000239
 8003250:	2000024d 	.word	0x2000024d
 8003254:	0800d758 	.word	0x0800d758
 8003258:	0800d76c 	.word	0x0800d76c
 800325c:	40010800 	.word	0x40010800
 8003260:	2000025b 	.word	0x2000025b
 8003264:	20000158 	.word	0x20000158
 8003268:	20000232 	.word	0x20000232
 800326c:	20000258 	.word	0x20000258
 8003270:	2000022c 	.word	0x2000022c
 8003274:	0800daf8 	.word	0x0800daf8
 8003278:	0800d9bc 	.word	0x0800d9bc
 800327c:	0800db0c 	.word	0x0800db0c
 8003280:	0800d9e0 	.word	0x0800d9e0
 8003284:	20000247 	.word	0x20000247
 8003288:	200001c8 	.word	0x200001c8
 800328c:	20000237 	.word	0x20000237
 8003290:	0800db20 	.word	0x0800db20
 8003294:	0800db34 	.word	0x0800db34
 8003298:	2000023a 	.word	0x2000023a
 800329c:	0800d7b8 	.word	0x0800d7b8
			} else if(dilSecim == 1) {
 80032a0:	4b99      	ldr	r3, [pc, #612]	; (8003508 <menu+0x1f58>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d104      	bne.n	80032b2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80032a8:	4a98      	ldr	r2, [pc, #608]	; (800350c <menu+0x1f5c>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f004 fea1 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2102      	movs	r1, #2
 80032b4:	4896      	ldr	r0, [pc, #600]	; (8003510 <menu+0x1f60>)
 80032b6:	f006 f9c3 	bl	8009640 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <menu+0x1d3c>
 80032c0:	4b94      	ldr	r3, [pc, #592]	; (8003514 <menu+0x1f64>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <menu+0x1f68>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b90      	ldr	r3, [pc, #576]	; (8003518 <menu+0x1f68>)
 80032d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80032da:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <menu+0x1f68>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d902      	bls.n	80032e8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80032e2:	4b8d      	ldr	r3, [pc, #564]	; (8003518 <menu+0x1f68>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e8:	f001 fcbe 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ec:	2104      	movs	r1, #4
 80032ee:	4888      	ldr	r0, [pc, #544]	; (8003510 <menu+0x1f60>)
 80032f0:	f006 f9a6 	bl	8009640 <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d115      	bne.n	8003326 <menu+0x1d76>
 80032fa:	4b86      	ldr	r3, [pc, #536]	; (8003514 <menu+0x1f64>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003308:	4b83      	ldr	r3, [pc, #524]	; (8003518 <menu+0x1f68>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b81      	ldr	r3, [pc, #516]	; (8003518 <menu+0x1f68>)
 8003312:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003314:	4b80      	ldr	r3, [pc, #512]	; (8003518 <menu+0x1f68>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800331c:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <menu+0x1f68>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003322:	f001 fca1 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003326:	2108      	movs	r1, #8
 8003328:	4879      	ldr	r0, [pc, #484]	; (8003510 <menu+0x1f60>)
 800332a:	f006 f989 	bl	8009640 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <menu+0x1da0>
 8003334:	4b77      	ldr	r3, [pc, #476]	; (8003514 <menu+0x1f64>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003342:	4b75      	ldr	r3, [pc, #468]	; (8003518 <menu+0x1f68>)
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b75      	ldr	r3, [pc, #468]	; (800351c <menu+0x1f6c>)
 8003348:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800334a:	4b75      	ldr	r3, [pc, #468]	; (8003520 <menu+0x1f70>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <menu+0x1f74>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b11      	cmp	r3, #17
 8003356:	f040 80c3 	bne.w	80034e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800335a:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <menu+0x1f58>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003362:	4a71      	ldr	r2, [pc, #452]	; (8003528 <menu+0x1f78>)
 8003364:	2101      	movs	r1, #1
 8003366:	2001      	movs	r0, #1
 8003368:	f004 fe44 	bl	8007ff4 <lcd_print>
 800336c:	e008      	b.n	8003380 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800336e:	4b66      	ldr	r3, [pc, #408]	; (8003508 <menu+0x1f58>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003376:	4a6d      	ldr	r2, [pc, #436]	; (800352c <menu+0x1f7c>)
 8003378:	2101      	movs	r1, #1
 800337a:	2001      	movs	r0, #1
 800337c:	f004 fe3a 	bl	8007ff4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003380:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <menu+0x1f80>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d113      	bne.n	80033b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003388:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <menu+0x1f58>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003390:	4a68      	ldr	r2, [pc, #416]	; (8003534 <menu+0x1f84>)
 8003392:	2101      	movs	r1, #1
 8003394:	2002      	movs	r0, #2
 8003396:	f004 fe2d 	bl	8007ff4 <lcd_print>
 800339a:	e038      	b.n	800340e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <menu+0x1f58>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d134      	bne.n	800340e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80033a4:	4a64      	ldr	r2, [pc, #400]	; (8003538 <menu+0x1f88>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2002      	movs	r0, #2
 80033aa:	f004 fe23 	bl	8007ff4 <lcd_print>
 80033ae:	e02e      	b.n	800340e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033b0:	4b5f      	ldr	r3, [pc, #380]	; (8003530 <menu+0x1f80>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d113      	bne.n	80033e0 <menu+0x1e30>
			if(dilSecim == 0){
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <menu+0x1f58>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033c0:	4a5e      	ldr	r2, [pc, #376]	; (800353c <menu+0x1f8c>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	2002      	movs	r0, #2
 80033c6:	f004 fe15 	bl	8007ff4 <lcd_print>
 80033ca:	e020      	b.n	800340e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033cc:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <menu+0x1f58>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d11c      	bne.n	800340e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <menu+0x1f90>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	2002      	movs	r0, #2
 80033da:	f004 fe0b 	bl	8007ff4 <lcd_print>
 80033de:	e016      	b.n	800340e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <menu+0x1f80>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d112      	bne.n	800340e <menu+0x1e5e>
			if(dilSecim == 0) {
 80033e8:	4b47      	ldr	r3, [pc, #284]	; (8003508 <menu+0x1f58>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80033f0:	4a54      	ldr	r2, [pc, #336]	; (8003544 <menu+0x1f94>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2002      	movs	r0, #2
 80033f6:	f004 fdfd 	bl	8007ff4 <lcd_print>
 80033fa:	e008      	b.n	800340e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <menu+0x1f58>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d104      	bne.n	800340e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003404:	4a50      	ldr	r2, [pc, #320]	; (8003548 <menu+0x1f98>)
 8003406:	2101      	movs	r1, #1
 8003408:	2002      	movs	r0, #2
 800340a:	f004 fdf3 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800340e:	2102      	movs	r1, #2
 8003410:	483f      	ldr	r0, [pc, #252]	; (8003510 <menu+0x1f60>)
 8003412:	f006 f915 	bl	8009640 <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	d115      	bne.n	8003448 <menu+0x1e98>
 800341c:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <menu+0x1f64>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	f083 0301 	eor.w	r3, r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00e      	beq.n	8003448 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <menu+0x1f80>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <menu+0x1f80>)
 8003434:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <menu+0x1f80>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <menu+0x1f80>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003444:	f001 fc10 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003448:	2104      	movs	r1, #4
 800344a:	4831      	ldr	r0, [pc, #196]	; (8003510 <menu+0x1f60>)
 800344c:	f006 f8f8 	bl	8009640 <HAL_GPIO_ReadPin>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d115      	bne.n	8003482 <menu+0x1ed2>
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <menu+0x1f64>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f083 0301 	eor.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <menu+0x1f80>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b30      	ldr	r3, [pc, #192]	; (8003530 <menu+0x1f80>)
 800346e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <menu+0x1f80>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d902      	bls.n	800347e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <menu+0x1f80>)
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800347e:	f001 fbf3 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003482:	2108      	movs	r1, #8
 8003484:	4822      	ldr	r0, [pc, #136]	; (8003510 <menu+0x1f60>)
 8003486:	f006 f8db 	bl	8009640 <HAL_GPIO_ReadPin>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d127      	bne.n	80034e0 <menu+0x1f30>
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <menu+0x1f64>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <menu+0x1f80>)
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	4b1e      	ldr	r3, [pc, #120]	; (800351c <menu+0x1f6c>)
 80034a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <menu+0x1f80>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <menu+0x1f06>
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <menu+0x1f80>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d106      	bne.n	80034c4 <menu+0x1f14>
				calismaSekli = 0;
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <menu+0x1f9c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034bc:	4b23      	ldr	r3, [pc, #140]	; (800354c <menu+0x1f9c>)
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <menu+0x1f6c>)
 80034c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <menu+0x1f80>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80034cc:	4b20      	ldr	r3, [pc, #128]	; (8003550 <menu+0x1fa0>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <menu+0x1fa0>)
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <menu+0x1f6c>)
 80034d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <menu+0x1f70>)
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <menu+0x1f74>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b12      	cmp	r3, #18
 80034e6:	f040 80d5 	bne.w	8003694 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <menu+0x1f80>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d13c      	bne.n	800356c <menu+0x1fbc>
			if(dilSecim == 0) {
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <menu+0x1f58>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d12e      	bne.n	8003558 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <menu+0x1fa4>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	2001      	movs	r0, #1
 8003500:	f004 fd78 	bl	8007ff4 <lcd_print>
 8003504:	e048      	b.n	8003598 <menu+0x1fe8>
 8003506:	bf00      	nop
 8003508:	2000024d 	.word	0x2000024d
 800350c:	0800d7cc 	.word	0x0800d7cc
 8003510:	40010800 	.word	0x40010800
 8003514:	2000025b 	.word	0x2000025b
 8003518:	2000023a 	.word	0x2000023a
 800351c:	20000158 	.word	0x20000158
 8003520:	20000258 	.word	0x20000258
 8003524:	2000022c 	.word	0x2000022c
 8003528:	0800db48 	.word	0x0800db48
 800352c:	0800db5c 	.word	0x0800db5c
 8003530:	2000023b 	.word	0x2000023b
 8003534:	0800db70 	.word	0x0800db70
 8003538:	0800db80 	.word	0x0800db80
 800353c:	0800db90 	.word	0x0800db90
 8003540:	0800dba0 	.word	0x0800dba0
 8003544:	0800d758 	.word	0x0800d758
 8003548:	0800d76c 	.word	0x0800d76c
 800354c:	2000022d 	.word	0x2000022d
 8003550:	2000023e 	.word	0x2000023e
 8003554:	0800dbb0 	.word	0x0800dbb0
			} else if(dilSecim == 1) {
 8003558:	4b7b      	ldr	r3, [pc, #492]	; (8003748 <menu+0x2198>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d11b      	bne.n	8003598 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003560:	4a7a      	ldr	r2, [pc, #488]	; (800374c <menu+0x219c>)
 8003562:	2101      	movs	r1, #1
 8003564:	2001      	movs	r0, #1
 8003566:	f004 fd45 	bl	8007ff4 <lcd_print>
 800356a:	e015      	b.n	8003598 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800356c:	4b78      	ldr	r3, [pc, #480]	; (8003750 <menu+0x21a0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d111      	bne.n	8003598 <menu+0x1fe8>
			if(dilSecim == 0){
 8003574:	4b74      	ldr	r3, [pc, #464]	; (8003748 <menu+0x2198>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800357c:	4a75      	ldr	r2, [pc, #468]	; (8003754 <menu+0x21a4>)
 800357e:	2101      	movs	r1, #1
 8003580:	2001      	movs	r0, #1
 8003582:	f004 fd37 	bl	8007ff4 <lcd_print>
			}
			if(dilSecim == 1){
 8003586:	4b70      	ldr	r3, [pc, #448]	; (8003748 <menu+0x2198>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800358e:	4a72      	ldr	r2, [pc, #456]	; (8003758 <menu+0x21a8>)
 8003590:	2101      	movs	r1, #1
 8003592:	2001      	movs	r0, #1
 8003594:	f004 fd2e 	bl	8007ff4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003598:	4b70      	ldr	r3, [pc, #448]	; (800375c <menu+0x21ac>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <menu+0x2018>
			if(dilSecim == 0) {
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <menu+0x2198>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80035a8:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <menu+0x21b0>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	2002      	movs	r0, #2
 80035ae:	f004 fd21 	bl	8007ff4 <lcd_print>
 80035b2:	e020      	b.n	80035f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80035b4:	4b64      	ldr	r3, [pc, #400]	; (8003748 <menu+0x2198>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d11c      	bne.n	80035f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80035bc:	4a69      	ldr	r2, [pc, #420]	; (8003764 <menu+0x21b4>)
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f004 fd17 	bl	8007ff4 <lcd_print>
 80035c6:	e016      	b.n	80035f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80035c8:	4b64      	ldr	r3, [pc, #400]	; (800375c <menu+0x21ac>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d112      	bne.n	80035f6 <menu+0x2046>
			if(dilSecim == 0){
 80035d0:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <menu+0x2198>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80035d8:	4a63      	ldr	r2, [pc, #396]	; (8003768 <menu+0x21b8>)
 80035da:	2101      	movs	r1, #1
 80035dc:	2002      	movs	r0, #2
 80035de:	f004 fd09 	bl	8007ff4 <lcd_print>
 80035e2:	e008      	b.n	80035f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <menu+0x2198>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d104      	bne.n	80035f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80035ec:	4a5f      	ldr	r2, [pc, #380]	; (800376c <menu+0x21bc>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	2002      	movs	r0, #2
 80035f2:	f004 fcff 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f6:	2102      	movs	r1, #2
 80035f8:	485d      	ldr	r0, [pc, #372]	; (8003770 <menu+0x21c0>)
 80035fa:	f006 f821 	bl	8009640 <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d115      	bne.n	8003630 <menu+0x2080>
 8003604:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <menu+0x21c4>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003612:	4b52      	ldr	r3, [pc, #328]	; (800375c <menu+0x21ac>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <menu+0x21ac>)
 800361c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <menu+0x21ac>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d902      	bls.n	800362c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <menu+0x21ac>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800362c:	f001 fb1c 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003630:	2104      	movs	r1, #4
 8003632:	484f      	ldr	r0, [pc, #316]	; (8003770 <menu+0x21c0>)
 8003634:	f006 f804 	bl	8009640 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d115      	bne.n	800366a <menu+0x20ba>
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <menu+0x21c4>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <menu+0x21ac>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <menu+0x21ac>)
 8003656:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003658:	4b40      	ldr	r3, [pc, #256]	; (800375c <menu+0x21ac>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003660:	4b3e      	ldr	r3, [pc, #248]	; (800375c <menu+0x21ac>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003666:	f001 faff 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800366a:	2108      	movs	r1, #8
 800366c:	4840      	ldr	r0, [pc, #256]	; (8003770 <menu+0x21c0>)
 800366e:	f005 ffe7 	bl	8009640 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <menu+0x20e4>
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <menu+0x21c4>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003686:	4b35      	ldr	r3, [pc, #212]	; (800375c <menu+0x21ac>)
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <menu+0x21c8>)
 800368c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <menu+0x21cc>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <menu+0x21d0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b13      	cmp	r3, #19
 800369a:	f040 80d5 	bne.w	8003848 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <menu+0x21a0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d113      	bne.n	80036ce <menu+0x211e>
			if(dilSecim == 0) {
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <menu+0x2198>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036ae:	4a35      	ldr	r2, [pc, #212]	; (8003784 <menu+0x21d4>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	2001      	movs	r0, #1
 80036b4:	f004 fc9e 	bl	8007ff4 <lcd_print>
 80036b8:	e01f      	b.n	80036fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <menu+0x2198>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d11b      	bne.n	80036fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036c2:	4a31      	ldr	r2, [pc, #196]	; (8003788 <menu+0x21d8>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	2001      	movs	r0, #1
 80036c8:	f004 fc94 	bl	8007ff4 <lcd_print>
 80036cc:	e015      	b.n	80036fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <menu+0x21a0>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d111      	bne.n	80036fa <menu+0x214a>
			if(dilSecim == 0) {
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <menu+0x2198>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80036de:	4a2b      	ldr	r2, [pc, #172]	; (800378c <menu+0x21dc>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	2001      	movs	r0, #1
 80036e4:	f004 fc86 	bl	8007ff4 <lcd_print>
			}
			if(dilSecim == 1) {
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <menu+0x2198>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d104      	bne.n	80036fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <menu+0x21e0>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2001      	movs	r0, #1
 80036f6:	f004 fc7d 	bl	8007ff4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <menu+0x21e4>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <menu+0x217a>
			if(dilSecim == 0) {
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <menu+0x2198>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <menu+0x21b0>)
 800370c:	2101      	movs	r1, #1
 800370e:	2002      	movs	r0, #2
 8003710:	f004 fc70 	bl	8007ff4 <lcd_print>
 8003714:	e049      	b.n	80037aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <menu+0x2198>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d145      	bne.n	80037aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800371e:	4a11      	ldr	r2, [pc, #68]	; (8003764 <menu+0x21b4>)
 8003720:	2101      	movs	r1, #1
 8003722:	2002      	movs	r0, #2
 8003724:	f004 fc66 	bl	8007ff4 <lcd_print>
 8003728:	e03f      	b.n	80037aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <menu+0x21e4>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d13b      	bne.n	80037aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <menu+0x2198>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12e      	bne.n	8003798 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800373a:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <menu+0x21b8>)
 800373c:	2101      	movs	r1, #1
 800373e:	2002      	movs	r0, #2
 8003740:	f004 fc58 	bl	8007ff4 <lcd_print>
 8003744:	e031      	b.n	80037aa <menu+0x21fa>
 8003746:	bf00      	nop
 8003748:	2000024d 	.word	0x2000024d
 800374c:	0800dbc4 	.word	0x0800dbc4
 8003750:	2000023b 	.word	0x2000023b
 8003754:	0800dbd4 	.word	0x0800dbd4
 8003758:	0800dbe8 	.word	0x0800dbe8
 800375c:	2000023c 	.word	0x2000023c
 8003760:	0800d758 	.word	0x0800d758
 8003764:	0800d76c 	.word	0x0800d76c
 8003768:	0800d7b8 	.word	0x0800d7b8
 800376c:	0800d7cc 	.word	0x0800d7cc
 8003770:	40010800 	.word	0x40010800
 8003774:	2000025b 	.word	0x2000025b
 8003778:	20000158 	.word	0x20000158
 800377c:	20000258 	.word	0x20000258
 8003780:	2000022c 	.word	0x2000022c
 8003784:	0800dbfc 	.word	0x0800dbfc
 8003788:	0800dc10 	.word	0x0800dc10
 800378c:	0800dc24 	.word	0x0800dc24
 8003790:	0800dc38 	.word	0x0800dc38
 8003794:	2000023d 	.word	0x2000023d
			} else if(dilSecim == 1) {
 8003798:	4b90      	ldr	r3, [pc, #576]	; (80039dc <menu+0x242c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d104      	bne.n	80037aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80037a0:	4a8f      	ldr	r2, [pc, #572]	; (80039e0 <menu+0x2430>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	2002      	movs	r0, #2
 80037a6:	f004 fc25 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037aa:	2102      	movs	r1, #2
 80037ac:	488d      	ldr	r0, [pc, #564]	; (80039e4 <menu+0x2434>)
 80037ae:	f005 ff47 	bl	8009640 <HAL_GPIO_ReadPin>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d115      	bne.n	80037e4 <menu+0x2234>
 80037b8:	4b8b      	ldr	r3, [pc, #556]	; (80039e8 <menu+0x2438>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	f083 0301 	eor.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <menu+0x243c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b87      	ldr	r3, [pc, #540]	; (80039ec <menu+0x243c>)
 80037d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80037d2:	4b86      	ldr	r3, [pc, #536]	; (80039ec <menu+0x243c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d902      	bls.n	80037e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80037da:	4b84      	ldr	r3, [pc, #528]	; (80039ec <menu+0x243c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037e0:	f001 fa42 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e4:	2104      	movs	r1, #4
 80037e6:	487f      	ldr	r0, [pc, #508]	; (80039e4 <menu+0x2434>)
 80037e8:	f005 ff2a 	bl	8009640 <HAL_GPIO_ReadPin>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d115      	bne.n	800381e <menu+0x226e>
 80037f2:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <menu+0x2438>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f083 0301 	eor.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003800:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <menu+0x243c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b78      	ldr	r3, [pc, #480]	; (80039ec <menu+0x243c>)
 800380a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800380c:	4b77      	ldr	r3, [pc, #476]	; (80039ec <menu+0x243c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003814:	4b75      	ldr	r3, [pc, #468]	; (80039ec <menu+0x243c>)
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800381a:	f001 fa25 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800381e:	2108      	movs	r1, #8
 8003820:	4870      	ldr	r0, [pc, #448]	; (80039e4 <menu+0x2434>)
 8003822:	f005 ff0d 	bl	8009640 <HAL_GPIO_ReadPin>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10d      	bne.n	8003848 <menu+0x2298>
 800382c:	4b6e      	ldr	r3, [pc, #440]	; (80039e8 <menu+0x2438>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f083 0301 	eor.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <menu+0x243c>)
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <menu+0x2440>)
 8003840:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003842:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <menu+0x2444>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <menu+0x2448>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b14      	cmp	r3, #20
 800384e:	f040 80b5 	bne.w	80039bc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <menu+0x244c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d113      	bne.n	8003882 <menu+0x22d2>
			if(dilSecim == 0) {
 800385a:	4b60      	ldr	r3, [pc, #384]	; (80039dc <menu+0x242c>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003862:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <menu+0x2450>)
 8003864:	2101      	movs	r1, #1
 8003866:	2001      	movs	r0, #1
 8003868:	f004 fbc4 	bl	8007ff4 <lcd_print>
 800386c:	e020      	b.n	80038b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800386e:	4b5b      	ldr	r3, [pc, #364]	; (80039dc <menu+0x242c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d11c      	bne.n	80038b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003876:	4a63      	ldr	r2, [pc, #396]	; (8003a04 <menu+0x2454>)
 8003878:	2101      	movs	r1, #1
 800387a:	2001      	movs	r0, #1
 800387c:	f004 fbba 	bl	8007ff4 <lcd_print>
 8003880:	e016      	b.n	80038b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003882:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <menu+0x244c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d112      	bne.n	80038b0 <menu+0x2300>
			if(dilSecim == 0) {
 800388a:	4b54      	ldr	r3, [pc, #336]	; (80039dc <menu+0x242c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003892:	4a5d      	ldr	r2, [pc, #372]	; (8003a08 <menu+0x2458>)
 8003894:	2101      	movs	r1, #1
 8003896:	2001      	movs	r0, #1
 8003898:	f004 fbac 	bl	8007ff4 <lcd_print>
 800389c:	e008      	b.n	80038b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800389e:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <menu+0x242c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d104      	bne.n	80038b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <menu+0x245c>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	2001      	movs	r0, #1
 80038ac:	f004 fba2 	bl	8007ff4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <menu+0x2460>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d113      	bne.n	80038e0 <menu+0x2330>
			if(dilSecim == 0) {
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <menu+0x242c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80038c0:	4a54      	ldr	r2, [pc, #336]	; (8003a14 <menu+0x2464>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	2002      	movs	r0, #2
 80038c6:	f004 fb95 	bl	8007ff4 <lcd_print>
 80038ca:	e020      	b.n	800390e <menu+0x235e>
			} else if(dilSecim == 1) {
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <menu+0x242c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d11c      	bne.n	800390e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80038d4:	4a50      	ldr	r2, [pc, #320]	; (8003a18 <menu+0x2468>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	2002      	movs	r0, #2
 80038da:	f004 fb8b 	bl	8007ff4 <lcd_print>
 80038de:	e016      	b.n	800390e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80038e0:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <menu+0x2460>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d112      	bne.n	800390e <menu+0x235e>
			if(dilSecim == 0) {
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <menu+0x242c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <menu+0x246c>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	2002      	movs	r0, #2
 80038f6:	f004 fb7d 	bl	8007ff4 <lcd_print>
 80038fa:	e008      	b.n	800390e <menu+0x235e>
			} else if(dilSecim == 1) {
 80038fc:	4b37      	ldr	r3, [pc, #220]	; (80039dc <menu+0x242c>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d104      	bne.n	800390e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003904:	4a46      	ldr	r2, [pc, #280]	; (8003a20 <menu+0x2470>)
 8003906:	2101      	movs	r1, #1
 8003908:	2002      	movs	r0, #2
 800390a:	f004 fb73 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800390e:	2102      	movs	r1, #2
 8003910:	4834      	ldr	r0, [pc, #208]	; (80039e4 <menu+0x2434>)
 8003912:	f005 fe95 	bl	8009640 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d119      	bne.n	8003950 <menu+0x23a0>
 800391c:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <menu+0x2438>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <menu+0x23a0>
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <menu+0x244c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d10e      	bne.n	8003950 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <menu+0x2460>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <menu+0x2460>)
 800393c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800393e:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <menu+0x2460>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d902      	bls.n	800394c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003946:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <menu+0x2460>)
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800394c:	f001 f98c 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003950:	2104      	movs	r1, #4
 8003952:	4824      	ldr	r0, [pc, #144]	; (80039e4 <menu+0x2434>)
 8003954:	f005 fe74 	bl	8009640 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d119      	bne.n	8003992 <menu+0x23e2>
 800395e:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <menu+0x2438>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <menu+0x23e2>
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <menu+0x244c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d10e      	bne.n	8003992 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003974:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <menu+0x2460>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	3b01      	subs	r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <menu+0x2460>)
 800397e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003980:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <menu+0x2460>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <menu+0x2460>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800398e:	f001 f96b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003992:	2108      	movs	r1, #8
 8003994:	4813      	ldr	r0, [pc, #76]	; (80039e4 <menu+0x2434>)
 8003996:	f005 fe53 	bl	8009640 <HAL_GPIO_ReadPin>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10d      	bne.n	80039bc <menu+0x240c>
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <menu+0x2438>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <menu+0x2460>)
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <menu+0x2440>)
 80039b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <menu+0x2444>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <menu+0x2448>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b15      	cmp	r3, #21
 80039c2:	f040 80c2 	bne.w	8003b4a <menu+0x259a>
		if(dilSecim == 0) {
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <menu+0x242c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d12c      	bne.n	8003a28 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <menu+0x2474>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	2001      	movs	r0, #1
 80039d4:	f004 fb0e 	bl	8007ff4 <lcd_print>
 80039d8:	e02f      	b.n	8003a3a <menu+0x248a>
 80039da:	bf00      	nop
 80039dc:	2000024d 	.word	0x2000024d
 80039e0:	0800d7cc 	.word	0x0800d7cc
 80039e4:	40010800 	.word	0x40010800
 80039e8:	2000025b 	.word	0x2000025b
 80039ec:	2000023d 	.word	0x2000023d
 80039f0:	20000158 	.word	0x20000158
 80039f4:	20000258 	.word	0x20000258
 80039f8:	2000022c 	.word	0x2000022c
 80039fc:	2000023b 	.word	0x2000023b
 8003a00:	0800dc4c 	.word	0x0800dc4c
 8003a04:	0800dc60 	.word	0x0800dc60
 8003a08:	0800dc74 	.word	0x0800dc74
 8003a0c:	0800dc88 	.word	0x0800dc88
 8003a10:	2000023e 	.word	0x2000023e
 8003a14:	0800dc9c 	.word	0x0800dc9c
 8003a18:	0800dcb0 	.word	0x0800dcb0
 8003a1c:	0800dcc0 	.word	0x0800dcc0
 8003a20:	0800dcd4 	.word	0x0800dcd4
 8003a24:	0800dce4 	.word	0x0800dce4
		} else if(dilSecim == 1) {
 8003a28:	4b9c      	ldr	r3, [pc, #624]	; (8003c9c <menu+0x26ec>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d104      	bne.n	8003a3a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a30:	4a9b      	ldr	r2, [pc, #620]	; (8003ca0 <menu+0x26f0>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2001      	movs	r0, #1
 8003a36:	f004 fadd 	bl	8007ff4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a3a:	4b9a      	ldr	r3, [pc, #616]	; (8003ca4 <menu+0x26f4>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d112      	bne.n	8003a68 <menu+0x24b8>
			if(dilSecim == 0) {
 8003a42:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <menu+0x26ec>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003a4a:	4a97      	ldr	r2, [pc, #604]	; (8003ca8 <menu+0x26f8>)
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f004 fad0 	bl	8007ff4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a54:	4b91      	ldr	r3, [pc, #580]	; (8003c9c <menu+0x26ec>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d11c      	bne.n	8003a96 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003a5c:	4a93      	ldr	r2, [pc, #588]	; (8003cac <menu+0x26fc>)
 8003a5e:	2101      	movs	r1, #1
 8003a60:	2002      	movs	r0, #2
 8003a62:	f004 fac7 	bl	8007ff4 <lcd_print>
 8003a66:	e016      	b.n	8003a96 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003a68:	4b8e      	ldr	r3, [pc, #568]	; (8003ca4 <menu+0x26f4>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d112      	bne.n	8003a96 <menu+0x24e6>
			if(dilSecim == 0) {
 8003a70:	4b8a      	ldr	r3, [pc, #552]	; (8003c9c <menu+0x26ec>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003a78:	4a8d      	ldr	r2, [pc, #564]	; (8003cb0 <menu+0x2700>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	f004 fab9 	bl	8007ff4 <lcd_print>
 8003a82:	e008      	b.n	8003a96 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003a84:	4b85      	ldr	r3, [pc, #532]	; (8003c9c <menu+0x26ec>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d104      	bne.n	8003a96 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003a8c:	4a89      	ldr	r2, [pc, #548]	; (8003cb4 <menu+0x2704>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2002      	movs	r0, #2
 8003a92:	f004 faaf 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a96:	2102      	movs	r1, #2
 8003a98:	4887      	ldr	r0, [pc, #540]	; (8003cb8 <menu+0x2708>)
 8003a9a:	f005 fdd1 	bl	8009640 <HAL_GPIO_ReadPin>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d115      	bne.n	8003ad0 <menu+0x2520>
 8003aa4:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <menu+0x270c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	f083 0301 	eor.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003ab2:	4b7c      	ldr	r3, [pc, #496]	; (8003ca4 <menu+0x26f4>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <menu+0x26f4>)
 8003abc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003abe:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <menu+0x26f4>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d902      	bls.n	8003acc <menu+0x251c>
				platformSilindirTipi = 0;
 8003ac6:	4b77      	ldr	r3, [pc, #476]	; (8003ca4 <menu+0x26f4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003acc:	f001 f8cc 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	4879      	ldr	r0, [pc, #484]	; (8003cb8 <menu+0x2708>)
 8003ad4:	f005 fdb4 	bl	8009640 <HAL_GPIO_ReadPin>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d115      	bne.n	8003b0a <menu+0x255a>
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <menu+0x270c>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f083 0301 	eor.w	r3, r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003aec:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <menu+0x26f4>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <menu+0x26f4>)
 8003af6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <menu+0x26f4>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003b00:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <menu+0x26f4>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b06:	f001 f8af 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b0a:	2108      	movs	r1, #8
 8003b0c:	486a      	ldr	r0, [pc, #424]	; (8003cb8 <menu+0x2708>)
 8003b0e:	f005 fd97 	bl	8009640 <HAL_GPIO_ReadPin>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d118      	bne.n	8003b4a <menu+0x259a>
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <menu+0x270c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f083 0301 	eor.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <menu+0x26f4>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <menu+0x2710>)
 8003b2c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <menu+0x26f4>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <menu+0x2594>
				altLimit = 1;
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <menu+0x2714>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <menu+0x2714>)
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <menu+0x2710>)
 8003b42:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b44:	4b60      	ldr	r3, [pc, #384]	; (8003cc8 <menu+0x2718>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b4a:	4b60      	ldr	r3, [pc, #384]	; (8003ccc <menu+0x271c>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b16      	cmp	r3, #22
 8003b50:	f040 8081 	bne.w	8003c56 <menu+0x26a6>
		if(dilSecim == 0) {
 8003b54:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <menu+0x26ec>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b5c:	4a5c      	ldr	r2, [pc, #368]	; (8003cd0 <menu+0x2720>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	2001      	movs	r0, #1
 8003b62:	f004 fa47 	bl	8007ff4 <lcd_print>
 8003b66:	e008      	b.n	8003b7a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <menu+0x26ec>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d104      	bne.n	8003b7a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b70:	4a58      	ldr	r2, [pc, #352]	; (8003cd4 <menu+0x2724>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	2001      	movs	r0, #1
 8003b76:	f004 fa3d 	bl	8007ff4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b7a:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <menu+0x26ec>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b82:	4a55      	ldr	r2, [pc, #340]	; (8003cd8 <menu+0x2728>)
 8003b84:	2101      	movs	r1, #1
 8003b86:	2002      	movs	r0, #2
 8003b88:	f004 fa34 	bl	8007ff4 <lcd_print>
 8003b8c:	e008      	b.n	8003ba0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003b8e:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <menu+0x26ec>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d104      	bne.n	8003ba0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003b96:	4a51      	ldr	r2, [pc, #324]	; (8003cdc <menu+0x272c>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	f004 fa2a 	bl	8007ff4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <menu+0x2730>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	220a      	movs	r2, #10
 8003ba6:	494f      	ldr	r1, [pc, #316]	; (8003ce4 <menu+0x2734>)
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f008 fdd1 	bl	800c750 <itoa>
		lcd_print(2,16,snum);
 8003bae:	4a4d      	ldr	r2, [pc, #308]	; (8003ce4 <menu+0x2734>)
 8003bb0:	2110      	movs	r1, #16
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f004 fa1e 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb8:	2102      	movs	r1, #2
 8003bba:	483f      	ldr	r0, [pc, #252]	; (8003cb8 <menu+0x2708>)
 8003bbc:	f005 fd40 	bl	8009640 <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d115      	bne.n	8003bf2 <menu+0x2642>
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <menu+0x270c>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <menu+0x2730>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <menu+0x2730>)
 8003bde:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003be0:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <menu+0x2730>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d902      	bls.n	8003bee <menu+0x263e>
				yukariValfTmr = 0;
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <menu+0x2730>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bee:	f001 f83b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	4830      	ldr	r0, [pc, #192]	; (8003cb8 <menu+0x2708>)
 8003bf6:	f005 fd23 	bl	8009640 <HAL_GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d115      	bne.n	8003c2c <menu+0x267c>
 8003c00:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <menu+0x270c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	f083 0301 	eor.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <menu+0x2730>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <menu+0x2730>)
 8003c18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <menu+0x2730>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003c22:	4b2f      	ldr	r3, [pc, #188]	; (8003ce0 <menu+0x2730>)
 8003c24:	2205      	movs	r2, #5
 8003c26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c28:	f001 f81e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2c:	2108      	movs	r1, #8
 8003c2e:	4822      	ldr	r0, [pc, #136]	; (8003cb8 <menu+0x2708>)
 8003c30:	f005 fd06 	bl	8009640 <HAL_GPIO_ReadPin>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10d      	bne.n	8003c56 <menu+0x26a6>
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <menu+0x270c>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <menu+0x2730>)
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <menu+0x2710>)
 8003c4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <menu+0x2718>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <menu+0x271c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b17      	cmp	r3, #23
 8003c5c:	f040 80ac 	bne.w	8003db8 <menu+0x2808>
		if(dilSecim == 0) {
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <menu+0x26ec>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <menu+0x2738>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f004 f9c1 	bl	8007ff4 <lcd_print>
 8003c72:	e008      	b.n	8003c86 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <menu+0x26ec>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d104      	bne.n	8003c86 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <menu+0x273c>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	2001      	movs	r0, #1
 8003c82:	f004 f9b7 	bl	8007ff4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <menu+0x26ec>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d130      	bne.n	8003cf0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <menu+0x2728>)
 8003c90:	2101      	movs	r1, #1
 8003c92:	2002      	movs	r0, #2
 8003c94:	f004 f9ae 	bl	8007ff4 <lcd_print>
 8003c98:	e033      	b.n	8003d02 <menu+0x2752>
 8003c9a:	bf00      	nop
 8003c9c:	2000024d 	.word	0x2000024d
 8003ca0:	0800dcf8 	.word	0x0800dcf8
 8003ca4:	2000023f 	.word	0x2000023f
 8003ca8:	0800dc9c 	.word	0x0800dc9c
 8003cac:	0800dcb0 	.word	0x0800dcb0
 8003cb0:	0800dcc0 	.word	0x0800dcc0
 8003cb4:	0800dcd4 	.word	0x0800dcd4
 8003cb8:	40010800 	.word	0x40010800
 8003cbc:	2000025b 	.word	0x2000025b
 8003cc0:	20000158 	.word	0x20000158
 8003cc4:	20000232 	.word	0x20000232
 8003cc8:	20000258 	.word	0x20000258
 8003ccc:	2000022c 	.word	0x2000022c
 8003cd0:	0800dd08 	.word	0x0800dd08
 8003cd4:	0800dd1c 	.word	0x0800dd1c
 8003cd8:	0800d9bc 	.word	0x0800d9bc
 8003cdc:	0800dd30 	.word	0x0800dd30
 8003ce0:	20000240 	.word	0x20000240
 8003ce4:	200001c8 	.word	0x200001c8
 8003ce8:	0800dd40 	.word	0x0800dd40
 8003cec:	0800dd54 	.word	0x0800dd54
			} else if(dilSecim == 1) {
 8003cf0:	4b98      	ldr	r3, [pc, #608]	; (8003f54 <menu+0x29a4>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d104      	bne.n	8003d02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003cf8:	4a97      	ldr	r2, [pc, #604]	; (8003f58 <menu+0x29a8>)
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f004 f979 	bl	8007ff4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003d02:	4b96      	ldr	r3, [pc, #600]	; (8003f5c <menu+0x29ac>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	220a      	movs	r2, #10
 8003d08:	4995      	ldr	r1, [pc, #596]	; (8003f60 <menu+0x29b0>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f008 fd20 	bl	800c750 <itoa>
		lcd_print(2,16,snum);
 8003d10:	4a93      	ldr	r2, [pc, #588]	; (8003f60 <menu+0x29b0>)
 8003d12:	2110      	movs	r1, #16
 8003d14:	2002      	movs	r0, #2
 8003d16:	f004 f96d 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4891      	ldr	r0, [pc, #580]	; (8003f64 <menu+0x29b4>)
 8003d1e:	f005 fc8f 	bl	8009640 <HAL_GPIO_ReadPin>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d115      	bne.n	8003d54 <menu+0x27a4>
 8003d28:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <menu+0x29b8>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	f083 0301 	eor.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003d36:	4b89      	ldr	r3, [pc, #548]	; (8003f5c <menu+0x29ac>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b87      	ldr	r3, [pc, #540]	; (8003f5c <menu+0x29ac>)
 8003d40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d42:	4b86      	ldr	r3, [pc, #536]	; (8003f5c <menu+0x29ac>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d902      	bls.n	8003d50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003d4a:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <menu+0x29ac>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d50:	f000 ff8a 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d54:	2104      	movs	r1, #4
 8003d56:	4883      	ldr	r0, [pc, #524]	; (8003f64 <menu+0x29b4>)
 8003d58:	f005 fc72 	bl	8009640 <HAL_GPIO_ReadPin>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d115      	bne.n	8003d8e <menu+0x27de>
 8003d62:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <menu+0x29b8>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f083 0301 	eor.w	r3, r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003d70:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <menu+0x29ac>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <menu+0x29ac>)
 8003d7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d7c:	4b77      	ldr	r3, [pc, #476]	; (8003f5c <menu+0x29ac>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d902      	bls.n	8003d8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003d84:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <menu+0x29ac>)
 8003d86:	2205      	movs	r2, #5
 8003d88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d8a:	f000 ff6d 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d8e:	2108      	movs	r1, #8
 8003d90:	4874      	ldr	r0, [pc, #464]	; (8003f64 <menu+0x29b4>)
 8003d92:	f005 fc55 	bl	8009640 <HAL_GPIO_ReadPin>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10d      	bne.n	8003db8 <menu+0x2808>
 8003d9c:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <menu+0x29b8>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f083 0301 	eor.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d006      	beq.n	8003db8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003daa:	4b6c      	ldr	r3, [pc, #432]	; (8003f5c <menu+0x29ac>)
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <menu+0x29bc>)
 8003db0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003db2:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <menu+0x29c0>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003db8:	4b6e      	ldr	r3, [pc, #440]	; (8003f74 <menu+0x29c4>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b18      	cmp	r3, #24
 8003dbe:	f040 809d 	bne.w	8003efc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <menu+0x29c8>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d113      	bne.n	8003df2 <menu+0x2842>
			if(dilSecim == 0) {
 8003dca:	4b62      	ldr	r3, [pc, #392]	; (8003f54 <menu+0x29a4>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003dd2:	4a6a      	ldr	r2, [pc, #424]	; (8003f7c <menu+0x29cc>)
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f004 f90c 	bl	8007ff4 <lcd_print>
 8003ddc:	e020      	b.n	8003e20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003dde:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <menu+0x29a4>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11c      	bne.n	8003e20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003de6:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <menu+0x29d0>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	2001      	movs	r0, #1
 8003dec:	f004 f902 	bl	8007ff4 <lcd_print>
 8003df0:	e016      	b.n	8003e20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003df2:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <menu+0x29c8>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d112      	bne.n	8003e20 <menu+0x2870>
			if(dilSecim == 0) {
 8003dfa:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <menu+0x29a4>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003e02:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <menu+0x29d4>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	2001      	movs	r0, #1
 8003e08:	f004 f8f4 	bl	8007ff4 <lcd_print>
 8003e0c:	e008      	b.n	8003e20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e0e:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <menu+0x29a4>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d104      	bne.n	8003e20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e16:	4a5c      	ldr	r2, [pc, #368]	; (8003f88 <menu+0x29d8>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f004 f8ea 	bl	8007ff4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e20:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <menu+0x29a4>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <menu+0x29dc>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	2002      	movs	r0, #2
 8003e2e:	f004 f8e1 	bl	8007ff4 <lcd_print>
 8003e32:	e008      	b.n	8003e46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003e34:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <menu+0x29a4>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d104      	bne.n	8003e46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003e3c:	4a46      	ldr	r2, [pc, #280]	; (8003f58 <menu+0x29a8>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f004 f8d7 	bl	8007ff4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e46:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <menu+0x29e0>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	220a      	movs	r2, #10
 8003e4c:	4944      	ldr	r1, [pc, #272]	; (8003f60 <menu+0x29b0>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f008 fc7e 	bl	800c750 <itoa>
		lcd_print(2, 16, snum);
 8003e54:	4a42      	ldr	r2, [pc, #264]	; (8003f60 <menu+0x29b0>)
 8003e56:	2110      	movs	r1, #16
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f004 f8cb 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4840      	ldr	r0, [pc, #256]	; (8003f64 <menu+0x29b4>)
 8003e62:	f005 fbed 	bl	8009640 <HAL_GPIO_ReadPin>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d115      	bne.n	8003e98 <menu+0x28e8>
 8003e6c:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <menu+0x29b8>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e7a:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <menu+0x29e0>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <menu+0x29e0>)
 8003e84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e86:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <menu+0x29e0>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d902      	bls.n	8003e94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003e8e:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <menu+0x29e0>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e94:	f000 fee8 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e98:	2104      	movs	r1, #4
 8003e9a:	4832      	ldr	r0, [pc, #200]	; (8003f64 <menu+0x29b4>)
 8003e9c:	f005 fbd0 	bl	8009640 <HAL_GPIO_ReadPin>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d115      	bne.n	8003ed2 <menu+0x2922>
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <menu+0x29b8>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	f083 0301 	eor.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00e      	beq.n	8003ed2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <menu+0x29e0>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <menu+0x29e0>)
 8003ebe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <menu+0x29e0>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d902      	bls.n	8003ece <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <menu+0x29e0>)
 8003eca:	2205      	movs	r2, #5
 8003ecc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ece:	f000 fecb 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed2:	2108      	movs	r1, #8
 8003ed4:	4823      	ldr	r0, [pc, #140]	; (8003f64 <menu+0x29b4>)
 8003ed6:	f005 fbb3 	bl	8009640 <HAL_GPIO_ReadPin>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10d      	bne.n	8003efc <menu+0x294c>
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <menu+0x29b8>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f083 0301 	eor.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <menu+0x29e0>)
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <menu+0x29bc>)
 8003ef4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <menu+0x29c0>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <menu+0x29c4>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b19      	cmp	r3, #25
 8003f02:	f040 80c4 	bne.w	800408e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <menu+0x29c8>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d113      	bne.n	8003f36 <menu+0x2986>
			if(dilSecim == 0) {
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <menu+0x29a4>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <menu+0x29e4>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f004 f86a 	bl	8007ff4 <lcd_print>
 8003f20:	e047      	b.n	8003fb2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <menu+0x29a4>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d143      	bne.n	8003fb2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <menu+0x29e8>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f004 f860 	bl	8007ff4 <lcd_print>
 8003f34:	e03d      	b.n	8003fb2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <menu+0x29c8>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d139      	bne.n	8003fb2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <menu+0x29a4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d12c      	bne.n	8003fa0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f46:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <menu+0x29ec>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	f004 f852 	bl	8007ff4 <lcd_print>
 8003f50:	e02f      	b.n	8003fb2 <menu+0x2a02>
 8003f52:	bf00      	nop
 8003f54:	2000024d 	.word	0x2000024d
 8003f58:	0800dd30 	.word	0x0800dd30
 8003f5c:	20000241 	.word	0x20000241
 8003f60:	200001c8 	.word	0x200001c8
 8003f64:	40010800 	.word	0x40010800
 8003f68:	2000025b 	.word	0x2000025b
 8003f6c:	20000158 	.word	0x20000158
 8003f70:	20000258 	.word	0x20000258
 8003f74:	2000022c 	.word	0x2000022c
 8003f78:	2000023b 	.word	0x2000023b
 8003f7c:	0800dd68 	.word	0x0800dd68
 8003f80:	0800dd7c 	.word	0x0800dd7c
 8003f84:	0800dd90 	.word	0x0800dd90
 8003f88:	0800dda4 	.word	0x0800dda4
 8003f8c:	0800d9bc 	.word	0x0800d9bc
 8003f90:	20000242 	.word	0x20000242
 8003f94:	0800ddb8 	.word	0x0800ddb8
 8003f98:	0800ddcc 	.word	0x0800ddcc
 8003f9c:	0800dde0 	.word	0x0800dde0
			} else if(dilSecim == 1) {
 8003fa0:	4b73      	ldr	r3, [pc, #460]	; (8004170 <menu+0x2bc0>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d104      	bne.n	8003fb2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003fa8:	4a72      	ldr	r2, [pc, #456]	; (8004174 <menu+0x2bc4>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	2001      	movs	r0, #1
 8003fae:	f004 f821 	bl	8007ff4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <menu+0x2bc0>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fba:	4a6f      	ldr	r2, [pc, #444]	; (8004178 <menu+0x2bc8>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	f004 f818 	bl	8007ff4 <lcd_print>
 8003fc4:	e008      	b.n	8003fd8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <menu+0x2bc0>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d104      	bne.n	8003fd8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003fce:	4a6b      	ldr	r2, [pc, #428]	; (800417c <menu+0x2bcc>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f004 f80e 	bl	8007ff4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <menu+0x2bd0>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	220a      	movs	r2, #10
 8003fde:	4969      	ldr	r1, [pc, #420]	; (8004184 <menu+0x2bd4>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f008 fbb5 	bl	800c750 <itoa>
		lcd_print(2,16,snum);
 8003fe6:	4a67      	ldr	r2, [pc, #412]	; (8004184 <menu+0x2bd4>)
 8003fe8:	2110      	movs	r1, #16
 8003fea:	2002      	movs	r0, #2
 8003fec:	f004 f802 	bl	8007ff4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4865      	ldr	r0, [pc, #404]	; (8004188 <menu+0x2bd8>)
 8003ff4:	f005 fb24 	bl	8009640 <HAL_GPIO_ReadPin>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d115      	bne.n	800402a <menu+0x2a7a>
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <menu+0x2bdc>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800400c:	4b5c      	ldr	r3, [pc, #368]	; (8004180 <menu+0x2bd0>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <menu+0x2bd0>)
 8004016:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <menu+0x2bd0>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d902      	bls.n	8004026 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004020:	4b57      	ldr	r3, [pc, #348]	; (8004180 <menu+0x2bd0>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004026:	f000 fe1f 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800402a:	2104      	movs	r1, #4
 800402c:	4856      	ldr	r0, [pc, #344]	; (8004188 <menu+0x2bd8>)
 800402e:	f005 fb07 	bl	8009640 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d115      	bne.n	8004064 <menu+0x2ab4>
 8004038:	4b54      	ldr	r3, [pc, #336]	; (800418c <menu+0x2bdc>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f083 0301 	eor.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8004046:	4b4e      	ldr	r3, [pc, #312]	; (8004180 <menu+0x2bd0>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <menu+0x2bd0>)
 8004050:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <menu+0x2bd0>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d902      	bls.n	8004060 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800405a:	4b49      	ldr	r3, [pc, #292]	; (8004180 <menu+0x2bd0>)
 800405c:	2205      	movs	r2, #5
 800405e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004060:	f000 fe02 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004064:	2108      	movs	r1, #8
 8004066:	4848      	ldr	r0, [pc, #288]	; (8004188 <menu+0x2bd8>)
 8004068:	f005 faea 	bl	8009640 <HAL_GPIO_ReadPin>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10d      	bne.n	800408e <menu+0x2ade>
 8004072:	4b46      	ldr	r3, [pc, #280]	; (800418c <menu+0x2bdc>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f083 0301 	eor.w	r3, r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004080:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <menu+0x2bd0>)
 8004082:	781a      	ldrb	r2, [r3, #0]
 8004084:	4b42      	ldr	r3, [pc, #264]	; (8004190 <menu+0x2be0>)
 8004086:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <menu+0x2be4>)
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800408e:	4b42      	ldr	r3, [pc, #264]	; (8004198 <menu+0x2be8>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b1a      	cmp	r3, #26
 8004094:	f040 80ec 	bne.w	8004270 <menu+0x2cc0>
		if(dilSecim == 0) {
 8004098:	4b35      	ldr	r3, [pc, #212]	; (8004170 <menu+0x2bc0>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80040a0:	4a3e      	ldr	r2, [pc, #248]	; (800419c <menu+0x2bec>)
 80040a2:	2101      	movs	r1, #1
 80040a4:	2001      	movs	r0, #1
 80040a6:	f003 ffa5 	bl	8007ff4 <lcd_print>
 80040aa:	e008      	b.n	80040be <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80040ac:	4b30      	ldr	r3, [pc, #192]	; (8004170 <menu+0x2bc0>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d104      	bne.n	80040be <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80040b4:	4a3a      	ldr	r2, [pc, #232]	; (80041a0 <menu+0x2bf0>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	2001      	movs	r0, #1
 80040ba:	f003 ff9b 	bl	8007ff4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <menu+0x2bf4>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b63      	cmp	r3, #99	; 0x63
 80040c4:	d91e      	bls.n	8004104 <menu+0x2b54>
			if(dilSecim == 0) {
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <menu+0x2bc0>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80040ce:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <menu+0x2bc8>)
 80040d0:	2101      	movs	r1, #1
 80040d2:	2002      	movs	r0, #2
 80040d4:	f003 ff8e 	bl	8007ff4 <lcd_print>
			}
			if(dilSecim == 1) {
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <menu+0x2bc0>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d104      	bne.n	80040ea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <menu+0x2bcc>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f003 ff85 	bl	8007ff4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <menu+0x2bf4>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	220a      	movs	r2, #10
 80040f0:	4924      	ldr	r1, [pc, #144]	; (8004184 <menu+0x2bd4>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f008 fb2c 	bl	800c750 <itoa>
			lcd_print(2,14,snum);
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <menu+0x2bd4>)
 80040fa:	210e      	movs	r1, #14
 80040fc:	2002      	movs	r0, #2
 80040fe:	f003 ff79 	bl	8007ff4 <lcd_print>
 8004102:	e066      	b.n	80041d2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <menu+0x2bf4>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b09      	cmp	r3, #9
 800410a:	d923      	bls.n	8004154 <menu+0x2ba4>
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <menu+0x2bf4>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b63      	cmp	r3, #99	; 0x63
 8004112:	d81f      	bhi.n	8004154 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004114:	4b16      	ldr	r3, [pc, #88]	; (8004170 <menu+0x2bc0>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <menu+0x2bc8>)
 800411e:	2101      	movs	r1, #1
 8004120:	2002      	movs	r0, #2
 8004122:	f003 ff67 	bl	8007ff4 <lcd_print>
 8004126:	e008      	b.n	800413a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <menu+0x2bc0>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d104      	bne.n	800413a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <menu+0x2bcc>)
 8004132:	2101      	movs	r1, #1
 8004134:	2002      	movs	r0, #2
 8004136:	f003 ff5d 	bl	8007ff4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <menu+0x2bf4>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	220a      	movs	r2, #10
 8004140:	4910      	ldr	r1, [pc, #64]	; (8004184 <menu+0x2bd4>)
 8004142:	4618      	mov	r0, r3
 8004144:	f008 fb04 	bl	800c750 <itoa>
			lcd_print(2, 15, snum);
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <menu+0x2bd4>)
 800414a:	210f      	movs	r1, #15
 800414c:	2002      	movs	r0, #2
 800414e:	f003 ff51 	bl	8007ff4 <lcd_print>
 8004152:	e03e      	b.n	80041d2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <menu+0x2bf4>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b09      	cmp	r3, #9
 800415a:	d83a      	bhi.n	80041d2 <menu+0x2c22>
			if(dilSecim == 0) {
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <menu+0x2bc0>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d121      	bne.n	80041a8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <menu+0x2bc8>)
 8004166:	2101      	movs	r1, #1
 8004168:	2002      	movs	r0, #2
 800416a:	f003 ff43 	bl	8007ff4 <lcd_print>
 800416e:	e024      	b.n	80041ba <menu+0x2c0a>
 8004170:	2000024d 	.word	0x2000024d
 8004174:	0800ddf4 	.word	0x0800ddf4
 8004178:	0800d9bc 	.word	0x0800d9bc
 800417c:	0800dd30 	.word	0x0800dd30
 8004180:	20000243 	.word	0x20000243
 8004184:	200001c8 	.word	0x200001c8
 8004188:	40010800 	.word	0x40010800
 800418c:	2000025b 	.word	0x2000025b
 8004190:	20000158 	.word	0x20000158
 8004194:	20000258 	.word	0x20000258
 8004198:	2000022c 	.word	0x2000022c
 800419c:	0800de08 	.word	0x0800de08
 80041a0:	0800de1c 	.word	0x0800de1c
 80041a4:	20000244 	.word	0x20000244
			} else if(dilSecim == 1) {
 80041a8:	4b8f      	ldr	r3, [pc, #572]	; (80043e8 <menu+0x2e38>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d104      	bne.n	80041ba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80041b0:	4a8e      	ldr	r2, [pc, #568]	; (80043ec <menu+0x2e3c>)
 80041b2:	2101      	movs	r1, #1
 80041b4:	2002      	movs	r0, #2
 80041b6:	f003 ff1d 	bl	8007ff4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041ba:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <menu+0x2e40>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	220a      	movs	r2, #10
 80041c0:	498c      	ldr	r1, [pc, #560]	; (80043f4 <menu+0x2e44>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f008 fac4 	bl	800c750 <itoa>
			lcd_print(2, 16, snum);
 80041c8:	4a8a      	ldr	r2, [pc, #552]	; (80043f4 <menu+0x2e44>)
 80041ca:	2110      	movs	r1, #16
 80041cc:	2002      	movs	r0, #2
 80041ce:	f003 ff11 	bl	8007ff4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041d2:	2102      	movs	r1, #2
 80041d4:	4888      	ldr	r0, [pc, #544]	; (80043f8 <menu+0x2e48>)
 80041d6:	f005 fa33 	bl	8009640 <HAL_GPIO_ReadPin>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d115      	bne.n	800420c <menu+0x2c5c>
 80041e0:	4b86      	ldr	r3, [pc, #536]	; (80043fc <menu+0x2e4c>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f083 0301 	eor.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80041ee:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <menu+0x2e40>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b7e      	ldr	r3, [pc, #504]	; (80043f0 <menu+0x2e40>)
 80041f8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80041fa:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <menu+0x2e40>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2bb4      	cmp	r3, #180	; 0xb4
 8004200:	d902      	bls.n	8004208 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <menu+0x2e40>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004208:	f000 fd2e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800420c:	2104      	movs	r1, #4
 800420e:	487a      	ldr	r0, [pc, #488]	; (80043f8 <menu+0x2e48>)
 8004210:	f005 fa16 	bl	8009640 <HAL_GPIO_ReadPin>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	d115      	bne.n	8004246 <menu+0x2c96>
 800421a:	4b78      	ldr	r3, [pc, #480]	; (80043fc <menu+0x2e4c>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	f083 0301 	eor.w	r3, r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004228:	4b71      	ldr	r3, [pc, #452]	; (80043f0 <menu+0x2e40>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <menu+0x2e40>)
 8004232:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004234:	4b6e      	ldr	r3, [pc, #440]	; (80043f0 <menu+0x2e40>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2bb5      	cmp	r3, #181	; 0xb5
 800423a:	d902      	bls.n	8004242 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800423c:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <menu+0x2e40>)
 800423e:	22b4      	movs	r2, #180	; 0xb4
 8004240:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004242:	f000 fd11 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004246:	2108      	movs	r1, #8
 8004248:	486b      	ldr	r0, [pc, #428]	; (80043f8 <menu+0x2e48>)
 800424a:	f005 f9f9 	bl	8009640 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10d      	bne.n	8004270 <menu+0x2cc0>
 8004254:	4b69      	ldr	r3, [pc, #420]	; (80043fc <menu+0x2e4c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <menu+0x2e40>)
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <menu+0x2e50>)
 8004268:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800426a:	4b66      	ldr	r3, [pc, #408]	; (8004404 <menu+0x2e54>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004270:	4b65      	ldr	r3, [pc, #404]	; (8004408 <menu+0x2e58>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b1b      	cmp	r3, #27
 8004276:	f040 8083 	bne.w	8004380 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800427a:	4a64      	ldr	r2, [pc, #400]	; (800440c <menu+0x2e5c>)
 800427c:	2101      	movs	r1, #1
 800427e:	2001      	movs	r0, #1
 8004280:	f003 feb8 	bl	8007ff4 <lcd_print>

		if(buzzer == 0) {
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <menu+0x2e60>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <menu+0x2d04>
			if(dilSecim == 0) {
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <menu+0x2e38>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <menu+0x2e64>)
 8004296:	2101      	movs	r1, #1
 8004298:	2002      	movs	r0, #2
 800429a:	f003 feab 	bl	8007ff4 <lcd_print>
 800429e:	e020      	b.n	80042e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042a0:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <menu+0x2e38>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d11c      	bne.n	80042e2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80042a8:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <menu+0x2e68>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	2002      	movs	r0, #2
 80042ae:	f003 fea1 	bl	8007ff4 <lcd_print>
 80042b2:	e016      	b.n	80042e2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <menu+0x2e60>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d112      	bne.n	80042e2 <menu+0x2d32>
			if(dilSecim == 0) {
 80042bc:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <menu+0x2e38>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80042c4:	4a55      	ldr	r2, [pc, #340]	; (800441c <menu+0x2e6c>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	2002      	movs	r0, #2
 80042ca:	f003 fe93 	bl	8007ff4 <lcd_print>
 80042ce:	e008      	b.n	80042e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042d0:	4b45      	ldr	r3, [pc, #276]	; (80043e8 <menu+0x2e38>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d104      	bne.n	80042e2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80042d8:	4a51      	ldr	r2, [pc, #324]	; (8004420 <menu+0x2e70>)
 80042da:	2101      	movs	r1, #1
 80042dc:	2002      	movs	r0, #2
 80042de:	f003 fe89 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042e2:	2102      	movs	r1, #2
 80042e4:	4844      	ldr	r0, [pc, #272]	; (80043f8 <menu+0x2e48>)
 80042e6:	f005 f9ab 	bl	8009640 <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d115      	bne.n	800431c <menu+0x2d6c>
 80042f0:	4b42      	ldr	r3, [pc, #264]	; (80043fc <menu+0x2e4c>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00e      	beq.n	800431c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <menu+0x2e60>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b42      	ldr	r3, [pc, #264]	; (8004410 <menu+0x2e60>)
 8004308:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <menu+0x2e60>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d902      	bls.n	8004318 <menu+0x2d68>
				buzzer = 0;
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <menu+0x2e60>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004318:	f000 fca6 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800431c:	2104      	movs	r1, #4
 800431e:	4836      	ldr	r0, [pc, #216]	; (80043f8 <menu+0x2e48>)
 8004320:	f005 f98e 	bl	8009640 <HAL_GPIO_ReadPin>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d115      	bne.n	8004356 <menu+0x2da6>
 800432a:	4b34      	ldr	r3, [pc, #208]	; (80043fc <menu+0x2e4c>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f083 0301 	eor.w	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <menu+0x2e60>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b33      	ldr	r3, [pc, #204]	; (8004410 <menu+0x2e60>)
 8004342:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004344:	4b32      	ldr	r3, [pc, #200]	; (8004410 <menu+0x2e60>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <menu+0x2da2>
		   		buzzer = 1;
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <menu+0x2e60>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004352:	f000 fc89 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004356:	2108      	movs	r1, #8
 8004358:	4827      	ldr	r0, [pc, #156]	; (80043f8 <menu+0x2e48>)
 800435a:	f005 f971 	bl	8009640 <HAL_GPIO_ReadPin>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10d      	bne.n	8004380 <menu+0x2dd0>
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <menu+0x2e4c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f083 0301 	eor.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <menu+0x2e60>)
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <menu+0x2e50>)
 8004378:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <menu+0x2e54>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <menu+0x2e58>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b1c      	cmp	r3, #28
 8004386:	f040 80ab 	bne.w	80044e0 <menu+0x2f30>
		calismaSayModu = 0;
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <menu+0x2e74>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <menu+0x2e78>)
 8004392:	2101      	movs	r1, #1
 8004394:	2001      	movs	r0, #1
 8004396:	f003 fe2d 	bl	8007ff4 <lcd_print>

		if(demoMode == 0) {
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <menu+0x2e7c>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <menu+0x2e38>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80043aa:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <menu+0x2e64>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	2002      	movs	r0, #2
 80043b0:	f003 fe20 	bl	8007ff4 <lcd_print>
 80043b4:	e045      	b.n	8004442 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <menu+0x2e38>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d141      	bne.n	8004442 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80043be:	4a16      	ldr	r2, [pc, #88]	; (8004418 <menu+0x2e68>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	2002      	movs	r0, #2
 80043c4:	f003 fe16 	bl	8007ff4 <lcd_print>
 80043c8:	e03b      	b.n	8004442 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <menu+0x2e7c>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d137      	bne.n	8004442 <menu+0x2e92>
			if(dilSecim == 0){
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <menu+0x2e38>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d12a      	bne.n	8004430 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <menu+0x2e6c>)
 80043dc:	2101      	movs	r1, #1
 80043de:	2002      	movs	r0, #2
 80043e0:	f003 fe08 	bl	8007ff4 <lcd_print>
 80043e4:	e02d      	b.n	8004442 <menu+0x2e92>
 80043e6:	bf00      	nop
 80043e8:	2000024d 	.word	0x2000024d
 80043ec:	0800dd30 	.word	0x0800dd30
 80043f0:	20000244 	.word	0x20000244
 80043f4:	200001c8 	.word	0x200001c8
 80043f8:	40010800 	.word	0x40010800
 80043fc:	2000025b 	.word	0x2000025b
 8004400:	20000158 	.word	0x20000158
 8004404:	20000258 	.word	0x20000258
 8004408:	2000022c 	.word	0x2000022c
 800440c:	0800de30 	.word	0x0800de30
 8004410:	20000248 	.word	0x20000248
 8004414:	0800d758 	.word	0x0800d758
 8004418:	0800d76c 	.word	0x0800d76c
 800441c:	0800d7b8 	.word	0x0800d7b8
 8004420:	0800d7cc 	.word	0x0800d7cc
 8004424:	2000024c 	.word	0x2000024c
 8004428:	0800de44 	.word	0x0800de44
 800442c:	2000024a 	.word	0x2000024a
			} else if(dilSecim == 1) {
 8004430:	4b71      	ldr	r3, [pc, #452]	; (80045f8 <menu+0x3048>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d104      	bne.n	8004442 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004438:	4a70      	ldr	r2, [pc, #448]	; (80045fc <menu+0x304c>)
 800443a:	2101      	movs	r1, #1
 800443c:	2002      	movs	r0, #2
 800443e:	f003 fdd9 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004442:	2102      	movs	r1, #2
 8004444:	486e      	ldr	r0, [pc, #440]	; (8004600 <menu+0x3050>)
 8004446:	f005 f8fb 	bl	8009640 <HAL_GPIO_ReadPin>
 800444a:	4603      	mov	r3, r0
 800444c:	2b01      	cmp	r3, #1
 800444e:	d115      	bne.n	800447c <menu+0x2ecc>
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <menu+0x3054>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f083 0301 	eor.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00e      	beq.n	800447c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800445e:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <menu+0x3058>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b68      	ldr	r3, [pc, #416]	; (8004608 <menu+0x3058>)
 8004468:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800446a:	4b67      	ldr	r3, [pc, #412]	; (8004608 <menu+0x3058>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d902      	bls.n	8004478 <menu+0x2ec8>
				demoMode = 0;
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <menu+0x3058>)
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004478:	f000 fbf6 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800447c:	2104      	movs	r1, #4
 800447e:	4860      	ldr	r0, [pc, #384]	; (8004600 <menu+0x3050>)
 8004480:	f005 f8de 	bl	8009640 <HAL_GPIO_ReadPin>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d115      	bne.n	80044b6 <menu+0x2f06>
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <menu+0x3054>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004498:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <menu+0x3058>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <menu+0x3058>)
 80044a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80044a4:	4b58      	ldr	r3, [pc, #352]	; (8004608 <menu+0x3058>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <menu+0x2f02>
		   		demoMode = 1;
 80044ac:	4b56      	ldr	r3, [pc, #344]	; (8004608 <menu+0x3058>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044b2:	f000 fbd9 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b6:	2108      	movs	r1, #8
 80044b8:	4851      	ldr	r0, [pc, #324]	; (8004600 <menu+0x3050>)
 80044ba:	f005 f8c1 	bl	8009640 <HAL_GPIO_ReadPin>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10d      	bne.n	80044e0 <menu+0x2f30>
 80044c4:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <menu+0x3054>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f083 0301 	eor.w	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80044d2:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <menu+0x3058>)
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <menu+0x305c>)
 80044d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80044da:	4b4d      	ldr	r3, [pc, #308]	; (8004610 <menu+0x3060>)
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <menu+0x3064>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b1d      	cmp	r3, #29
 80044e6:	f040 8132 	bne.w	800474e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80044ea:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <menu+0x3068>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <menu+0x2f6a>
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <menu+0x306c>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <menu+0x2f6a>
 80044fa:	4b49      	ldr	r3, [pc, #292]	; (8004620 <menu+0x3070>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <menu+0x2f6a>
 8004502:	4b48      	ldr	r3, [pc, #288]	; (8004624 <menu+0x3074>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <menu+0x2f6a>
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <menu+0x3078>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <menu+0x307c>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e002      	b.n	8004520 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800451a:	4b44      	ldr	r3, [pc, #272]	; (800462c <menu+0x307c>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <menu+0x3080>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d154      	bne.n	80045d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004528:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <menu+0x3048>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004530:	4a40      	ldr	r2, [pc, #256]	; (8004634 <menu+0x3084>)
 8004532:	2101      	movs	r1, #1
 8004534:	2001      	movs	r0, #1
 8004536:	f003 fd5d 	bl	8007ff4 <lcd_print>
 800453a:	e008      	b.n	800454e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <menu+0x3048>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d104      	bne.n	800454e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004544:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <menu+0x3088>)
 8004546:	2101      	movs	r1, #1
 8004548:	2001      	movs	r0, #1
 800454a:	f003 fd53 	bl	8007ff4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <menu+0x3078>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	220a      	movs	r2, #10
 8004554:	4939      	ldr	r1, [pc, #228]	; (800463c <menu+0x308c>)
 8004556:	4618      	mov	r0, r3
 8004558:	f008 f8fa 	bl	800c750 <itoa>
			lcd_print(2, 12, snum);
 800455c:	4a37      	ldr	r2, [pc, #220]	; (800463c <menu+0x308c>)
 800455e:	210c      	movs	r1, #12
 8004560:	2002      	movs	r0, #2
 8004562:	f003 fd47 	bl	8007ff4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004566:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <menu+0x3074>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	220a      	movs	r2, #10
 800456c:	4933      	ldr	r1, [pc, #204]	; (800463c <menu+0x308c>)
 800456e:	4618      	mov	r0, r3
 8004570:	f008 f8ee 	bl	800c750 <itoa>
			lcd_print(2, 13, snum);
 8004574:	4a31      	ldr	r2, [pc, #196]	; (800463c <menu+0x308c>)
 8004576:	210d      	movs	r1, #13
 8004578:	2002      	movs	r0, #2
 800457a:	f003 fd3b 	bl	8007ff4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <menu+0x3070>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	220a      	movs	r2, #10
 8004584:	492d      	ldr	r1, [pc, #180]	; (800463c <menu+0x308c>)
 8004586:	4618      	mov	r0, r3
 8004588:	f008 f8e2 	bl	800c750 <itoa>
			lcd_print(2, 14, snum);
 800458c:	4a2b      	ldr	r2, [pc, #172]	; (800463c <menu+0x308c>)
 800458e:	210e      	movs	r1, #14
 8004590:	2002      	movs	r0, #2
 8004592:	f003 fd2f 	bl	8007ff4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <menu+0x306c>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	220a      	movs	r2, #10
 800459c:	4927      	ldr	r1, [pc, #156]	; (800463c <menu+0x308c>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f008 f8d6 	bl	800c750 <itoa>
			lcd_print(2, 15, snum);
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <menu+0x308c>)
 80045a6:	210f      	movs	r1, #15
 80045a8:	2002      	movs	r0, #2
 80045aa:	f003 fd23 	bl	8007ff4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <menu+0x3068>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	220a      	movs	r2, #10
 80045b4:	4921      	ldr	r1, [pc, #132]	; (800463c <menu+0x308c>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f008 f8ca 	bl	800c750 <itoa>
			lcd_print(2, 16, snum);
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <menu+0x308c>)
 80045be:	2110      	movs	r1, #16
 80045c0:	2002      	movs	r0, #2
 80045c2:	f003 fd17 	bl	8007ff4 <lcd_print>

			lcd_print(2, 1, "           ");
 80045c6:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <menu+0x3090>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	2002      	movs	r0, #2
 80045cc:	f003 fd12 	bl	8007ff4 <lcd_print>
 80045d0:	e048      	b.n	8004664 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <menu+0x3080>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d144      	bne.n	8004664 <menu+0x30b4>
			if(dilSecim == 0) {
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <menu+0x3048>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d132      	bne.n	8004648 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <menu+0x3084>)
 80045e4:	2101      	movs	r1, #1
 80045e6:	2001      	movs	r0, #1
 80045e8:	f003 fd04 	bl	8007ff4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <menu+0x3094>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	2002      	movs	r0, #2
 80045f2:	f003 fcff 	bl	8007ff4 <lcd_print>
 80045f6:	e035      	b.n	8004664 <menu+0x30b4>
 80045f8:	2000024d 	.word	0x2000024d
 80045fc:	0800d7cc 	.word	0x0800d7cc
 8004600:	40010800 	.word	0x40010800
 8004604:	2000025b 	.word	0x2000025b
 8004608:	2000024a 	.word	0x2000024a
 800460c:	20000158 	.word	0x20000158
 8004610:	20000258 	.word	0x20000258
 8004614:	2000022c 	.word	0x2000022c
 8004618:	20000229 	.word	0x20000229
 800461c:	2000022a 	.word	0x2000022a
 8004620:	20000000 	.word	0x20000000
 8004624:	20000001 	.word	0x20000001
 8004628:	2000022b 	.word	0x2000022b
 800462c:	2000026d 	.word	0x2000026d
 8004630:	2000024c 	.word	0x2000024c
 8004634:	0800de54 	.word	0x0800de54
 8004638:	0800de68 	.word	0x0800de68
 800463c:	200001c8 	.word	0x200001c8
 8004640:	0800de7c 	.word	0x0800de7c
 8004644:	0800de88 	.word	0x0800de88
			} else if(dilSecim == 1) {
 8004648:	4b94      	ldr	r3, [pc, #592]	; (800489c <menu+0x32ec>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d109      	bne.n	8004664 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004650:	4a93      	ldr	r2, [pc, #588]	; (80048a0 <menu+0x32f0>)
 8004652:	2101      	movs	r1, #1
 8004654:	2001      	movs	r0, #1
 8004656:	f003 fccd 	bl	8007ff4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800465a:	4a92      	ldr	r2, [pc, #584]	; (80048a4 <menu+0x32f4>)
 800465c:	2101      	movs	r1, #1
 800465e:	2002      	movs	r0, #2
 8004660:	f003 fcc8 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004664:	2102      	movs	r1, #2
 8004666:	4890      	ldr	r0, [pc, #576]	; (80048a8 <menu+0x32f8>)
 8004668:	f004 ffea 	bl	8009640 <HAL_GPIO_ReadPin>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d119      	bne.n	80046a6 <menu+0x30f6>
 8004672:	4b8e      	ldr	r3, [pc, #568]	; (80048ac <menu+0x32fc>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f083 0301 	eor.w	r3, r3, #1
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <menu+0x30f6>
 8004680:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <menu+0x3300>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004688:	4b8a      	ldr	r3, [pc, #552]	; (80048b4 <menu+0x3304>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	4b88      	ldr	r3, [pc, #544]	; (80048b4 <menu+0x3304>)
 8004692:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004694:	4b87      	ldr	r3, [pc, #540]	; (80048b4 <menu+0x3304>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d902      	bls.n	80046a2 <menu+0x30f2>
				calismaSayModu = 0;
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <menu+0x3304>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046a2:	f000 fae1 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046a6:	2104      	movs	r1, #4
 80046a8:	487f      	ldr	r0, [pc, #508]	; (80048a8 <menu+0x32f8>)
 80046aa:	f004 ffc9 	bl	8009640 <HAL_GPIO_ReadPin>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d119      	bne.n	80046e8 <menu+0x3138>
 80046b4:	4b7d      	ldr	r3, [pc, #500]	; (80048ac <menu+0x32fc>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <menu+0x3138>
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <menu+0x3300>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80046ca:	4b7a      	ldr	r3, [pc, #488]	; (80048b4 <menu+0x3304>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <menu+0x3304>)
 80046d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80046d6:	4b77      	ldr	r3, [pc, #476]	; (80048b4 <menu+0x3304>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80046de:	4b75      	ldr	r3, [pc, #468]	; (80048b4 <menu+0x3304>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046e4:	f000 fac0 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e8:	2108      	movs	r1, #8
 80046ea:	486f      	ldr	r0, [pc, #444]	; (80048a8 <menu+0x32f8>)
 80046ec:	f004 ffa8 	bl	8009640 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12b      	bne.n	800474e <menu+0x319e>
 80046f6:	4b6d      	ldr	r3, [pc, #436]	; (80048ac <menu+0x32fc>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d024      	beq.n	800474e <menu+0x319e>
			eepromData[32] = 0;
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <menu+0x3308>)
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800470c:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <menu+0x3308>)
 800470e:	2200      	movs	r2, #0
 8004710:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004712:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <menu+0x3308>)
 8004714:	2200      	movs	r2, #0
 8004716:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004718:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <menu+0x3308>)
 800471a:	2200      	movs	r2, #0
 800471c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800471e:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <menu+0x3308>)
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004724:	4b65      	ldr	r3, [pc, #404]	; (80048bc <menu+0x330c>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <menu+0x3310>)
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004730:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <menu+0x3314>)
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004736:	4b64      	ldr	r3, [pc, #400]	; (80048c8 <menu+0x3318>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800473c:	4b63      	ldr	r3, [pc, #396]	; (80048cc <menu+0x331c>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004742:	4b5c      	ldr	r3, [pc, #368]	; (80048b4 <menu+0x3304>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004748:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <menu+0x3320>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800474e:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <menu+0x3324>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d16f      	bne.n	8004836 <menu+0x3286>
		calismaSayModu = 0;
 8004756:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <menu+0x3304>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800475c:	4b4f      	ldr	r3, [pc, #316]	; (800489c <menu+0x32ec>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004764:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <menu+0x3328>)
 8004766:	2101      	movs	r1, #1
 8004768:	2001      	movs	r0, #1
 800476a:	f003 fc43 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800476e:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <menu+0x332c>)
 8004770:	2101      	movs	r1, #1
 8004772:	2002      	movs	r0, #2
 8004774:	f003 fc3e 	bl	8007ff4 <lcd_print>
 8004778:	e00d      	b.n	8004796 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800477a:	4b48      	ldr	r3, [pc, #288]	; (800489c <menu+0x32ec>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d109      	bne.n	8004796 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004782:	4a57      	ldr	r2, [pc, #348]	; (80048e0 <menu+0x3330>)
 8004784:	2101      	movs	r1, #1
 8004786:	2001      	movs	r0, #1
 8004788:	f003 fc34 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800478c:	4a55      	ldr	r2, [pc, #340]	; (80048e4 <menu+0x3334>)
 800478e:	2101      	movs	r1, #1
 8004790:	2002      	movs	r0, #2
 8004792:	f003 fc2f 	bl	8007ff4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004796:	2102      	movs	r1, #2
 8004798:	4843      	ldr	r0, [pc, #268]	; (80048a8 <menu+0x32f8>)
 800479a:	f004 ff51 	bl	8009640 <HAL_GPIO_ReadPin>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d115      	bne.n	80047d0 <menu+0x3220>
 80047a4:	4b41      	ldr	r3, [pc, #260]	; (80048ac <menu+0x32fc>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	f083 0301 	eor.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80047b2:	4b3a      	ldr	r3, [pc, #232]	; (800489c <menu+0x32ec>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <menu+0x32ec>)
 80047bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <menu+0x32ec>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d902      	bls.n	80047cc <menu+0x321c>
				dilSecim = 0;
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <menu+0x32ec>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047cc:	f000 fa4c 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047d0:	2104      	movs	r1, #4
 80047d2:	4835      	ldr	r0, [pc, #212]	; (80048a8 <menu+0x32f8>)
 80047d4:	f004 ff34 	bl	8009640 <HAL_GPIO_ReadPin>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d115      	bne.n	800480a <menu+0x325a>
 80047de:	4b33      	ldr	r3, [pc, #204]	; (80048ac <menu+0x32fc>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	f083 0301 	eor.w	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <menu+0x32ec>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	4b29      	ldr	r3, [pc, #164]	; (800489c <menu+0x32ec>)
 80047f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <menu+0x32ec>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <menu+0x3256>
		   		dilSecim = 1;
 8004800:	4b26      	ldr	r3, [pc, #152]	; (800489c <menu+0x32ec>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004806:	f000 fa2f 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800480a:	2108      	movs	r1, #8
 800480c:	4826      	ldr	r0, [pc, #152]	; (80048a8 <menu+0x32f8>)
 800480e:	f004 ff17 	bl	8009640 <HAL_GPIO_ReadPin>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10e      	bne.n	8004836 <menu+0x3286>
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <menu+0x32fc>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	f083 0301 	eor.w	r3, r3, #1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <menu+0x32ec>)
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <menu+0x3308>)
 800482c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004830:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <menu+0x3320>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004836:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <menu+0x3324>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b1f      	cmp	r3, #31
 800483c:	f040 80b7 	bne.w	80049ae <menu+0x33fe>
		calismaSayModu = 0;
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <menu+0x3304>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004846:	4a28      	ldr	r2, [pc, #160]	; (80048e8 <menu+0x3338>)
 8004848:	2101      	movs	r1, #1
 800484a:	2001      	movs	r0, #1
 800484c:	f003 fbd2 	bl	8007ff4 <lcd_print>

		if(iotMode == 0) {
 8004850:	4b26      	ldr	r3, [pc, #152]	; (80048ec <menu+0x333c>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d113      	bne.n	8004880 <menu+0x32d0>
			if(dilSecim == 0) {
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <menu+0x32ec>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004860:	4a23      	ldr	r2, [pc, #140]	; (80048f0 <menu+0x3340>)
 8004862:	2101      	movs	r1, #1
 8004864:	2002      	movs	r0, #2
 8004866:	f003 fbc5 	bl	8007ff4 <lcd_print>
 800486a:	e050      	b.n	800490e <menu+0x335e>
			} else if(dilSecim == 1) {
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <menu+0x32ec>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d14c      	bne.n	800490e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <menu+0x3344>)
 8004876:	2101      	movs	r1, #1
 8004878:	2002      	movs	r0, #2
 800487a:	f003 fbbb 	bl	8007ff4 <lcd_print>
 800487e:	e046      	b.n	800490e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <menu+0x333c>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d142      	bne.n	800490e <menu+0x335e>
			if(dilSecim == 0) {
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <menu+0x32ec>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d135      	bne.n	80048fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <menu+0x3348>)
 8004892:	2101      	movs	r1, #1
 8004894:	2002      	movs	r0, #2
 8004896:	f003 fbad 	bl	8007ff4 <lcd_print>
 800489a:	e038      	b.n	800490e <menu+0x335e>
 800489c:	2000024d 	.word	0x2000024d
 80048a0:	0800de68 	.word	0x0800de68
 80048a4:	0800de9c 	.word	0x0800de9c
 80048a8:	40010800 	.word	0x40010800
 80048ac:	2000025b 	.word	0x2000025b
 80048b0:	2000026d 	.word	0x2000026d
 80048b4:	2000024c 	.word	0x2000024c
 80048b8:	20000158 	.word	0x20000158
 80048bc:	2000022b 	.word	0x2000022b
 80048c0:	20000001 	.word	0x20000001
 80048c4:	20000000 	.word	0x20000000
 80048c8:	2000022a 	.word	0x2000022a
 80048cc:	20000229 	.word	0x20000229
 80048d0:	20000258 	.word	0x20000258
 80048d4:	2000022c 	.word	0x2000022c
 80048d8:	0800deb0 	.word	0x0800deb0
 80048dc:	0800dec4 	.word	0x0800dec4
 80048e0:	0800ded8 	.word	0x0800ded8
 80048e4:	0800deec 	.word	0x0800deec
 80048e8:	0800df00 	.word	0x0800df00
 80048ec:	2000024b 	.word	0x2000024b
 80048f0:	0800d758 	.word	0x0800d758
 80048f4:	0800d76c 	.word	0x0800d76c
 80048f8:	0800d7b8 	.word	0x0800d7b8
			} else if(dilSecim == 1) {
 80048fc:	4ba1      	ldr	r3, [pc, #644]	; (8004b84 <menu+0x35d4>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d104      	bne.n	800490e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004904:	4aa0      	ldr	r2, [pc, #640]	; (8004b88 <menu+0x35d8>)
 8004906:	2101      	movs	r1, #1
 8004908:	2002      	movs	r0, #2
 800490a:	f003 fb73 	bl	8007ff4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800490e:	2102      	movs	r1, #2
 8004910:	489e      	ldr	r0, [pc, #632]	; (8004b8c <menu+0x35dc>)
 8004912:	f004 fe95 	bl	8009640 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d115      	bne.n	8004948 <menu+0x3398>
 800491c:	4b9c      	ldr	r3, [pc, #624]	; (8004b90 <menu+0x35e0>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f083 0301 	eor.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00e      	beq.n	8004948 <menu+0x3398>
			iotMode = iotMode + 1;
 800492a:	4b9a      	ldr	r3, [pc, #616]	; (8004b94 <menu+0x35e4>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b98      	ldr	r3, [pc, #608]	; (8004b94 <menu+0x35e4>)
 8004934:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004936:	4b97      	ldr	r3, [pc, #604]	; (8004b94 <menu+0x35e4>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d902      	bls.n	8004944 <menu+0x3394>
				iotMode = 0;
 800493e:	4b95      	ldr	r3, [pc, #596]	; (8004b94 <menu+0x35e4>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004944:	f000 f990 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004948:	2104      	movs	r1, #4
 800494a:	4890      	ldr	r0, [pc, #576]	; (8004b8c <menu+0x35dc>)
 800494c:	f004 fe78 	bl	8009640 <HAL_GPIO_ReadPin>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d115      	bne.n	8004982 <menu+0x33d2>
 8004956:	4b8e      	ldr	r3, [pc, #568]	; (8004b90 <menu+0x35e0>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f083 0301 	eor.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004964:	4b8b      	ldr	r3, [pc, #556]	; (8004b94 <menu+0x35e4>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	b2da      	uxtb	r2, r3
 800496c:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <menu+0x35e4>)
 800496e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004970:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <menu+0x35e4>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <menu+0x33ce>
		   		iotMode = 1;
 8004978:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <menu+0x35e4>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800497e:	f000 f973 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004982:	2108      	movs	r1, #8
 8004984:	4881      	ldr	r0, [pc, #516]	; (8004b8c <menu+0x35dc>)
 8004986:	f004 fe5b 	bl	8009640 <HAL_GPIO_ReadPin>
 800498a:	4603      	mov	r3, r0
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10e      	bne.n	80049ae <menu+0x33fe>
 8004990:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <menu+0x35e0>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f083 0301 	eor.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <menu+0x33fe>
			eepromData[48] = iotMode;
 800499e:	4b7d      	ldr	r3, [pc, #500]	; (8004b94 <menu+0x35e4>)
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	4b7d      	ldr	r3, [pc, #500]	; (8004b98 <menu+0x35e8>)
 80049a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80049a8:	4b7c      	ldr	r3, [pc, #496]	; (8004b9c <menu+0x35ec>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049ae:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <menu+0x35f0>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d12b      	bne.n	8004a0e <menu+0x345e>
		calismaSayModu = 0;
 80049b6:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <menu+0x35f4>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 80049bc:	2001      	movs	r0, #1
 80049be:	f7fb febf 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 80049c2:	2032      	movs	r0, #50	; 0x32
 80049c4:	f004 f86c 	bl	8008aa0 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80049c8:	2001      	movs	r0, #1
 80049ca:	f7fc fd4f 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ce:	2102      	movs	r1, #2
 80049d0:	486e      	ldr	r0, [pc, #440]	; (8004b8c <menu+0x35dc>)
 80049d2:	f004 fe35 	bl	8009640 <HAL_GPIO_ReadPin>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d118      	bne.n	8004a0e <menu+0x345e>
 80049dc:	2104      	movs	r1, #4
 80049de:	486b      	ldr	r0, [pc, #428]	; (8004b8c <menu+0x35dc>)
 80049e0:	f004 fe2e 	bl	8009640 <HAL_GPIO_ReadPin>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d111      	bne.n	8004a0e <menu+0x345e>
 80049ea:	4b69      	ldr	r3, [pc, #420]	; (8004b90 <menu+0x35e0>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f083 0301 	eor.w	r3, r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <menu+0x345e>
			takeMachineID();
 80049f8:	f002 fa8a 	bl	8006f10 <takeMachineID>

			convertArrays(1);
 80049fc:	2001      	movs	r0, #1
 80049fe:	f7fb fe9f 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8004a02:	2032      	movs	r0, #50	; 0x32
 8004a04:	f004 f84c 	bl	8008aa0 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f7fc fd2f 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 33) {
 8004a0e:	4b64      	ldr	r3, [pc, #400]	; (8004ba0 <menu+0x35f0>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b21      	cmp	r3, #33	; 0x21
 8004a14:	d12e      	bne.n	8004a74 <menu+0x34c4>
		calismaSayModu = 0;
 8004a16:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <menu+0x35f4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f003 fb35 	bl	800808c <lcd_backlight>

		convertArrays(2);
 8004a22:	2002      	movs	r0, #2
 8004a24:	f7fb fe8c 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8004a28:	2032      	movs	r0, #50	; 0x32
 8004a2a:	f004 f839 	bl	8008aa0 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8004a2e:	2002      	movs	r0, #2
 8004a30:	f7fc fd1c 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a34:	2102      	movs	r1, #2
 8004a36:	4855      	ldr	r0, [pc, #340]	; (8004b8c <menu+0x35dc>)
 8004a38:	f004 fe02 	bl	8009640 <HAL_GPIO_ReadPin>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d118      	bne.n	8004a74 <menu+0x34c4>
 8004a42:	2104      	movs	r1, #4
 8004a44:	4851      	ldr	r0, [pc, #324]	; (8004b8c <menu+0x35dc>)
 8004a46:	f004 fdfb 	bl	8009640 <HAL_GPIO_ReadPin>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d111      	bne.n	8004a74 <menu+0x34c4>
 8004a50:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <menu+0x35e0>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f083 0301 	eor.w	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <menu+0x34c4>
			takeWifiSSID();
 8004a5e:	f002 fbef 	bl	8007240 <takeWifiSSID>

			convertArrays(2);
 8004a62:	2002      	movs	r0, #2
 8004a64:	f7fb fe6c 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8004a68:	2032      	movs	r0, #50	; 0x32
 8004a6a:	f004 f819 	bl	8008aa0 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f7fc fcfc 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8004a74:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <menu+0x35f0>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b22      	cmp	r3, #34	; 0x22
 8004a7a:	d12e      	bne.n	8004ada <menu+0x352a>
		calismaSayModu = 0;
 8004a7c:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <menu+0x35f4>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004a82:	2001      	movs	r0, #1
 8004a84:	f003 fb02 	bl	800808c <lcd_backlight>

		convertArrays(3);
 8004a88:	2003      	movs	r0, #3
 8004a8a:	f7fb fe59 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8004a8e:	2032      	movs	r0, #50	; 0x32
 8004a90:	f004 f806 	bl	8008aa0 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004a94:	2003      	movs	r0, #3
 8004a96:	f7fc fce9 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	483b      	ldr	r0, [pc, #236]	; (8004b8c <menu+0x35dc>)
 8004a9e:	f004 fdcf 	bl	8009640 <HAL_GPIO_ReadPin>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d118      	bne.n	8004ada <menu+0x352a>
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	4838      	ldr	r0, [pc, #224]	; (8004b8c <menu+0x35dc>)
 8004aac:	f004 fdc8 	bl	8009640 <HAL_GPIO_ReadPin>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d111      	bne.n	8004ada <menu+0x352a>
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <menu+0x35e0>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	f083 0301 	eor.w	r3, r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <menu+0x352a>
			takeWifiPass();
 8004ac4:	f002 fd4a 	bl	800755c <takeWifiPass>

			convertArrays(3);
 8004ac8:	2003      	movs	r0, #3
 8004aca:	f7fb fe39 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8004ace:	2032      	movs	r0, #50	; 0x32
 8004ad0:	f003 ffe6 	bl	8008aa0 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	f7fc fcc9 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <menu+0x35f0>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b23      	cmp	r3, #35	; 0x23
 8004ae0:	d14d      	bne.n	8004b7e <menu+0x35ce>
		if(dilSecim == 0) {
 8004ae2:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <menu+0x35d4>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <menu+0x3550>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004aea:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <menu+0x35f8>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	2001      	movs	r0, #1
 8004af0:	f003 fa80 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004af4:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <menu+0x35fc>)
 8004af6:	2101      	movs	r1, #1
 8004af8:	2002      	movs	r0, #2
 8004afa:	f003 fa7b 	bl	8007ff4 <lcd_print>
 8004afe:	e00d      	b.n	8004b1c <menu+0x356c>
		} else if(dilSecim == 1) {
 8004b00:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <menu+0x35d4>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d109      	bne.n	8004b1c <menu+0x356c>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b08:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <menu+0x3600>)
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f003 fa71 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b12:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <menu+0x3604>)
 8004b14:	2101      	movs	r1, #1
 8004b16:	2002      	movs	r0, #2
 8004b18:	f003 fa6c 	bl	8007ff4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b1c:	2108      	movs	r1, #8
 8004b1e:	481b      	ldr	r0, [pc, #108]	; (8004b8c <menu+0x35dc>)
 8004b20:	f004 fd8e 	bl	8009640 <HAL_GPIO_ReadPin>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d129      	bne.n	8004b7e <menu+0x35ce>
			menuGiris = 0;
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <menu+0x3608>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004b30:	bf00      	nop
 8004b32:	4822      	ldr	r0, [pc, #136]	; (8004bbc <menu+0x360c>)
 8004b34:	f005 fbad 	bl	800a292 <HAL_I2C_GetError>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d0f9      	beq.n	8004b32 <menu+0x3582>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004b3e:	bf00      	nop
 8004b40:	481e      	ldr	r0, [pc, #120]	; (8004bbc <menu+0x360c>)
 8004b42:	f005 fb99 	bl	800a278 <HAL_I2C_GetState>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d1f9      	bne.n	8004b40 <menu+0x3590>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004b4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	236e      	movs	r3, #110	; 0x6e
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <menu+0x35e8>)
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	236e      	movs	r3, #110	; 0x6e
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	21a0      	movs	r1, #160	; 0xa0
 8004b60:	4816      	ldr	r0, [pc, #88]	; (8004bbc <menu+0x360c>)
 8004b62:	f005 f827 	bl	8009bb4 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004b66:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004b6a:	f003 ff99 	bl	8008aa0 <HAL_Delay>

			lcd_clear();
 8004b6e:	f003 fa6d 	bl	800804c <lcd_clear>
			HAL_Delay(500);
 8004b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b76:	f003 ff93 	bl	8008aa0 <HAL_Delay>
			NVIC_SystemReset();
 8004b7a:	f7fc fd03 	bl	8001584 <__NVIC_SystemReset>
		}
	}
}
 8004b7e:	bf00      	nop
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	2000024d 	.word	0x2000024d
 8004b88:	0800d7cc 	.word	0x0800d7cc
 8004b8c:	40010800 	.word	0x40010800
 8004b90:	2000025b 	.word	0x2000025b
 8004b94:	2000024b 	.word	0x2000024b
 8004b98:	20000158 	.word	0x20000158
 8004b9c:	20000258 	.word	0x20000258
 8004ba0:	2000022c 	.word	0x2000022c
 8004ba4:	2000024c 	.word	0x2000024c
 8004ba8:	0800df14 	.word	0x0800df14
 8004bac:	0800df28 	.word	0x0800df28
 8004bb0:	0800df3c 	.word	0x0800df3c
 8004bb4:	0800df50 	.word	0x0800df50
 8004bb8:	20000249 	.word	0x20000249
 8004bbc:	200003b4 	.word	0x200003b4

08004bc0 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"

void lcdUpdate(uint8_t y) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d105      	bne.n	8004bdc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004bd0:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <lcdUpdate+0x9c>)
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	2002      	movs	r0, #2
 8004bd6:	f003 fa0d 	bl	8007ff4 <lcd_print>
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		//lcd_print(1, 4, "ESP-RMK");
		//lcd_print(2, 6, "RUN");
	}
}
 8004bda:	e03b      	b.n	8004c54 <lcdUpdate+0x94>
	} else if(y==2) {
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d105      	bne.n	8004bee <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <lcdUpdate+0x9c>)
 8004be4:	2102      	movs	r1, #2
 8004be6:	2002      	movs	r0, #2
 8004be8:	f003 fa04 	bl	8007ff4 <lcd_print>
}
 8004bec:	e032      	b.n	8004c54 <lcdUpdate+0x94>
	} else if(y==3) {
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d105      	bne.n	8004c00 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <lcdUpdate+0x9c>)
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	2002      	movs	r0, #2
 8004bfa:	f003 f9fb 	bl	8007ff4 <lcd_print>
}
 8004bfe:	e029      	b.n	8004c54 <lcdUpdate+0x94>
	} else if(y==4) {
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d105      	bne.n	8004c12 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <lcdUpdate+0x9c>)
 8004c08:	2104      	movs	r1, #4
 8004c0a:	2002      	movs	r0, #2
 8004c0c:	f003 f9f2 	bl	8007ff4 <lcd_print>
}
 8004c10:	e020      	b.n	8004c54 <lcdUpdate+0x94>
	} else if(y==5) {
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d105      	bne.n	8004c24 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004c18:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <lcdUpdate+0x9c>)
 8004c1a:	2105      	movs	r1, #5
 8004c1c:	2002      	movs	r0, #2
 8004c1e:	f003 f9e9 	bl	8007ff4 <lcd_print>
}
 8004c22:	e017      	b.n	8004c54 <lcdUpdate+0x94>
	} else if(y==6) {
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d105      	bne.n	8004c36 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <lcdUpdate+0x9c>)
 8004c2c:	2106      	movs	r1, #6
 8004c2e:	2002      	movs	r0, #2
 8004c30:	f003 f9e0 	bl	8007ff4 <lcd_print>
}
 8004c34:	e00e      	b.n	8004c54 <lcdUpdate+0x94>
	} else if (y==7) {
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b07      	cmp	r3, #7
 8004c3a:	d10b      	bne.n	8004c54 <lcdUpdate+0x94>
		lcd_clear();
 8004c3c:	f003 fa06 	bl	800804c <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8004c40:	4a07      	ldr	r2, [pc, #28]	; (8004c60 <lcdUpdate+0xa0>)
 8004c42:	2101      	movs	r1, #1
 8004c44:	2001      	movs	r0, #1
 8004c46:	f003 f9d5 	bl	8007ff4 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8004c4a:	4a06      	ldr	r2, [pc, #24]	; (8004c64 <lcdUpdate+0xa4>)
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	2002      	movs	r0, #2
 8004c50:	f003 f9d0 	bl	8007ff4 <lcd_print>
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	0800df64 	.word	0x0800df64
 8004c60:	200000c0 	.word	0x200000c0
 8004c64:	200000d0 	.word	0x200000d0

08004c68 <bekle>:

void bekle() {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	timer1=millis;
 8004c6c:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <bekle+0x124>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a47      	ldr	r2, [pc, #284]	; (8004d90 <bekle+0x128>)
 8004c72:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c74:	e002      	b.n	8004c7c <bekle+0x14>
    	butonKontrol = 1;
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <bekle+0x12c>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4846      	ldr	r0, [pc, #280]	; (8004d98 <bekle+0x130>)
 8004c80:	f004 fcde 	bl	8009640 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d109      	bne.n	8004c9e <bekle+0x36>
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <bekle+0x124>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <bekle+0x128>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d0ef      	beq.n	8004c76 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c96:	e002      	b.n	8004c9e <bekle+0x36>
    	butonKontrol = 1;
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <bekle+0x12c>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c9e:	2108      	movs	r1, #8
 8004ca0:	483e      	ldr	r0, [pc, #248]	; (8004d9c <bekle+0x134>)
 8004ca2:	f004 fccd 	bl	8009640 <HAL_GPIO_ReadPin>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d109      	bne.n	8004cc0 <bekle+0x58>
 8004cac:	4b37      	ldr	r3, [pc, #220]	; (8004d8c <bekle+0x124>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <bekle+0x128>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0ef      	beq.n	8004c98 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cb8:	e002      	b.n	8004cc0 <bekle+0x58>
    	butonKontrol = 1;
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <bekle+0x12c>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	4835      	ldr	r0, [pc, #212]	; (8004d98 <bekle+0x130>)
 8004cc4:	f004 fcbc 	bl	8009640 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d109      	bne.n	8004ce2 <bekle+0x7a>
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <bekle+0x124>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <bekle+0x128>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d0ef      	beq.n	8004cba <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cda:	e002      	b.n	8004ce2 <bekle+0x7a>
    	butonKontrol = 1;
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <bekle+0x12c>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ce2:	2104      	movs	r1, #4
 8004ce4:	482c      	ldr	r0, [pc, #176]	; (8004d98 <bekle+0x130>)
 8004ce6:	f004 fcab 	bl	8009640 <HAL_GPIO_ReadPin>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d109      	bne.n	8004d04 <bekle+0x9c>
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <bekle+0x124>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <bekle+0x128>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0ef      	beq.n	8004cdc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cfc:	e002      	b.n	8004d04 <bekle+0x9c>
    	butonKontrol = 1;
 8004cfe:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <bekle+0x12c>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004d04:	2108      	movs	r1, #8
 8004d06:	4824      	ldr	r0, [pc, #144]	; (8004d98 <bekle+0x130>)
 8004d08:	f004 fc9a 	bl	8009640 <HAL_GPIO_ReadPin>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d109      	bne.n	8004d26 <bekle+0xbe>
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <bekle+0x124>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <bekle+0x128>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d0ef      	beq.n	8004cfe <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d1e:	e002      	b.n	8004d26 <bekle+0xbe>
    	butonKontrol = 1;
 8004d20:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <bekle+0x12c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	481c      	ldr	r0, [pc, #112]	; (8004d9c <bekle+0x134>)
 8004d2a:	f004 fc89 	bl	8009640 <HAL_GPIO_ReadPin>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <bekle+0xe0>
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <bekle+0x124>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <bekle+0x128>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d0ef      	beq.n	8004d20 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d40:	e002      	b.n	8004d48 <bekle+0xe0>
    	butonKontrol = 1;
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <bekle+0x12c>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d4c:	4813      	ldr	r0, [pc, #76]	; (8004d9c <bekle+0x134>)
 8004d4e:	f004 fc77 	bl	8009640 <HAL_GPIO_ReadPin>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <bekle+0x104>
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <bekle+0x124>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <bekle+0x128>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d0ee      	beq.n	8004d42 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d64:	e002      	b.n	8004d6c <bekle+0x104>
    	butonKontrol = 1;
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <bekle+0x12c>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d70:	480a      	ldr	r0, [pc, #40]	; (8004d9c <bekle+0x134>)
 8004d72:	f004 fc65 	bl	8009640 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <bekle+0x120>
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <bekle+0x124>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <bekle+0x128>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0ee      	beq.n	8004d66 <bekle+0xfe>
    }

}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000208 	.word	0x20000208
 8004d90:	20000210 	.word	0x20000210
 8004d94:	2000025b 	.word	0x2000025b
 8004d98:	40010800 	.word	0x40010800
 8004d9c:	40011000 	.word	0x40011000

08004da0 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004da4:	2101      	movs	r1, #1
 8004da6:	4815      	ldr	r0, [pc, #84]	; (8004dfc <buttonCheck+0x5c>)
 8004da8:	f004 fc4a 	bl	8009640 <HAL_GPIO_ReadPin>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d01b      	beq.n	8004dea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004db2:	2108      	movs	r1, #8
 8004db4:	4812      	ldr	r0, [pc, #72]	; (8004e00 <buttonCheck+0x60>)
 8004db6:	f004 fc43 	bl	8009640 <HAL_GPIO_ReadPin>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d014      	beq.n	8004dea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	480e      	ldr	r0, [pc, #56]	; (8004dfc <buttonCheck+0x5c>)
 8004dc4:	f004 fc3c 	bl	8009640 <HAL_GPIO_ReadPin>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d00d      	beq.n	8004dea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004dce:	2104      	movs	r1, #4
 8004dd0:	480a      	ldr	r0, [pc, #40]	; (8004dfc <buttonCheck+0x5c>)
 8004dd2:	f004 fc35 	bl	8009640 <HAL_GPIO_ReadPin>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d006      	beq.n	8004dea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004ddc:	2108      	movs	r1, #8
 8004dde:	4807      	ldr	r0, [pc, #28]	; (8004dfc <buttonCheck+0x5c>)
 8004de0:	f004 fc2e 	bl	8009640 <HAL_GPIO_ReadPin>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d104      	bne.n	8004df4 <buttonCheck+0x54>
		backLightTimer = 0;
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <buttonCheck+0x64>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
		return 1;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <buttonCheck+0x56>
	}
	return 0;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40010800 	.word	0x40010800
 8004e00:	40011000 	.word	0x40011000
 8004e04:	20000224 	.word	0x20000224

08004e08 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <checkLCDBacklight+0x24>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <checkLCDBacklight+0x28>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b3b      	cmp	r3, #59	; 0x3b
 8004e18:	d903      	bls.n	8004e22 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f003 f936 	bl	800808c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004e20:	e002      	b.n	8004e28 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004e22:	2001      	movs	r0, #1
 8004e24:	f003 f932 	bl	800808c <lcd_backlight>
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000208 	.word	0x20000208
 8004e30:	20000224 	.word	0x20000224

08004e34 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <checkBasincSalteri+0x54>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <checkBasincSalteri+0x12>
		basincVar=1;
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <checkBasincSalteri+0x58>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <checkBasincSalteri+0x54>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d119      	bne.n	8004e82 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e52:	480f      	ldr	r0, [pc, #60]	; (8004e90 <checkBasincSalteri+0x5c>)
 8004e54:	f004 fbf4 	bl	8009640 <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <checkBasincSalteri+0x60>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <checkBasincSalteri+0x64>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d90a      	bls.n	8004e82 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <checkBasincSalteri+0x58>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004e72:	e006      	b.n	8004e82 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004e74:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <checkBasincSalteri+0x60>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <checkBasincSalteri+0x64>)
 8004e7a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <checkBasincSalteri+0x58>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000233 	.word	0x20000233
 8004e8c:	2000022f 	.word	0x2000022f
 8004e90:	40011000 	.word	0x40011000
 8004e94:	20000208 	.word	0x20000208
 8004e98:	20000220 	.word	0x20000220

08004e9c <checkBasGonder>:

void checkBasGonder() {
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <checkBasGonder+0x74>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10b      	bne.n	8004ec0 <checkBasGonder+0x24>
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <checkBasGonder+0x78>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <checkBasGonder+0x24>
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <checkBasGonder+0x7c>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <checkBasGonder+0x80>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e009      	b.n	8004ed4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004ec0:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <checkBasGonder+0x78>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f083 0301 	eor.w	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <checkBasGonder+0x80>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <checkBasGonder+0x74>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10b      	bne.n	8004ef4 <checkBasGonder+0x58>
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <checkBasGonder+0x84>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <checkBasGonder+0x58>
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <checkBasGonder+0x7c>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <checkBasGonder+0x88>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004ef2:	e009      	b.n	8004f08 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <checkBasGonder+0x84>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <checkBasGonder+0x88>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	2000022d 	.word	0x2000022d
 8004f14:	20000261 	.word	0x20000261
 8004f18:	2000023b 	.word	0x2000023b
 8004f1c:	20000268 	.word	0x20000268
 8004f20:	20000264 	.word	0x20000264
 8004f24:	20000269 	.word	0x20000269

08004f28 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <checkKapiSecimleri+0x98>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004f34:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <checkKapiSecimleri+0x98>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d10e      	bne.n	8004f60 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f46:	4820      	ldr	r0, [pc, #128]	; (8004fc8 <checkKapiSecimleri+0xa0>)
 8004f48:	f004 fb7a 	bl	8009640 <HAL_GPIO_ReadPin>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e002      	b.n	8004f60 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004f60:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <checkKapiSecimleri+0x98>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d10e      	bne.n	8004f86 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f6c:	4816      	ldr	r0, [pc, #88]	; (8004fc8 <checkKapiSecimleri+0xa0>)
 8004f6e:	f004 fb67 	bl	8009640 <HAL_GPIO_ReadPin>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e002      	b.n	8004f86 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <checkKapiSecimleri+0x98>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d116      	bne.n	8004fbc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f92:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <checkKapiSecimleri+0xa0>)
 8004f94:	f004 fb54 	bl	8009640 <HAL_GPIO_ReadPin>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <checkKapiSecimleri+0x8e>
 8004f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fa2:	4809      	ldr	r0, [pc, #36]	; (8004fc8 <checkKapiSecimleri+0xa0>)
 8004fa4:	f004 fb4c 	bl	8009640 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004fb4:	e002      	b.n	8004fbc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004fb6:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <checkKapiSecimleri+0x9c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000234 	.word	0x20000234
 8004fc4:	2000027f 	.word	0x2000027f
 8004fc8:	40010800 	.word	0x40010800

08004fcc <checkAktifCalisma>:

void checkAktifCalisma() {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004fd0:	4b62      	ldr	r3, [pc, #392]	; (800515c <checkAktifCalisma+0x190>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f041 833e 	bne.w	8006656 <checkAktifCalisma+0x168a>
 8004fda:	4b61      	ldr	r3, [pc, #388]	; (8005160 <checkAktifCalisma+0x194>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f041 8339 	bne.w	8006656 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004fe4:	4b5f      	ldr	r3, [pc, #380]	; (8005164 <checkAktifCalisma+0x198>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11a      	bne.n	8005022 <checkAktifCalisma+0x56>
 8004fec:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <checkAktifCalisma+0x19c>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d116      	bne.n	8005022 <checkAktifCalisma+0x56>
 8004ff4:	4b5d      	ldr	r3, [pc, #372]	; (800516c <checkAktifCalisma+0x1a0>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <checkAktifCalisma+0x46>
 8004ffc:	4b5c      	ldr	r3, [pc, #368]	; (8005170 <checkAktifCalisma+0x1a4>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f083 0301 	eor.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <checkAktifCalisma+0x46>
 800500a:	4b5a      	ldr	r3, [pc, #360]	; (8005174 <checkAktifCalisma+0x1a8>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d007      	beq.n	8005022 <checkAktifCalisma+0x56>
 8005012:	4b59      	ldr	r3, [pc, #356]	; (8005178 <checkAktifCalisma+0x1ac>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <checkAktifCalisma+0x80>
 800501a:	4b58      	ldr	r3, [pc, #352]	; (800517c <checkAktifCalisma+0x1b0>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d114      	bne.n	800504c <checkAktifCalisma+0x80>
 8005022:	4b57      	ldr	r3, [pc, #348]	; (8005180 <checkAktifCalisma+0x1b4>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d010      	beq.n	800504c <checkAktifCalisma+0x80>
 800502a:	4b56      	ldr	r3, [pc, #344]	; (8005184 <checkAktifCalisma+0x1b8>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005032:	2201      	movs	r2, #1
 8005034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005038:	4853      	ldr	r0, [pc, #332]	; (8005188 <checkAktifCalisma+0x1bc>)
 800503a:	f004 fb18 	bl	800966e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800503e:	4b53      	ldr	r3, [pc, #332]	; (800518c <checkAktifCalisma+0x1c0>)
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005044:	4b52      	ldr	r3, [pc, #328]	; (8005190 <checkAktifCalisma+0x1c4>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e008      	b.n	800505e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005052:	484d      	ldr	r0, [pc, #308]	; (8005188 <checkAktifCalisma+0x1bc>)
 8005054:	f004 fb0b 	bl	800966e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005058:	4b4c      	ldr	r3, [pc, #304]	; (800518c <checkAktifCalisma+0x1c0>)
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800505e:	4b40      	ldr	r3, [pc, #256]	; (8005160 <checkAktifCalisma+0x194>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d160      	bne.n	8005128 <checkAktifCalisma+0x15c>
 8005066:	4b46      	ldr	r3, [pc, #280]	; (8005180 <checkAktifCalisma+0x1b4>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d05c      	beq.n	8005128 <checkAktifCalisma+0x15c>
 800506e:	4b45      	ldr	r3, [pc, #276]	; (8005184 <checkAktifCalisma+0x1b8>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d058      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800507a:	4843      	ldr	r0, [pc, #268]	; (8005188 <checkAktifCalisma+0x1bc>)
 800507c:	f004 fae0 	bl	8009640 <HAL_GPIO_ReadPin>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <checkAktifCalisma+0xc2>
 8005086:	4b43      	ldr	r3, [pc, #268]	; (8005194 <checkAktifCalisma+0x1c8>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04c      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800508e:	2102      	movs	r1, #2
 8005090:	4841      	ldr	r0, [pc, #260]	; (8005198 <checkAktifCalisma+0x1cc>)
 8005092:	f004 fad5 	bl	8009640 <HAL_GPIO_ReadPin>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d145      	bne.n	8005128 <checkAktifCalisma+0x15c>
				&& (basincVar)
 800509c:	4b3f      	ldr	r3, [pc, #252]	; (800519c <checkAktifCalisma+0x1d0>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d041      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80050a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050a8:	4837      	ldr	r0, [pc, #220]	; (8005188 <checkAktifCalisma+0x1bc>)
 80050aa:	f004 fac9 	bl	8009640 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10e      	bne.n	80050d2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80050b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050b8:	4833      	ldr	r0, [pc, #204]	; (8005188 <checkAktifCalisma+0x1bc>)
 80050ba:	f004 fac1 	bl	8009640 <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	4834      	ldr	r0, [pc, #208]	; (8005198 <checkAktifCalisma+0x1cc>)
 80050c8:	f004 faba 	bl	8009640 <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <checkAktifCalisma+0x10e>
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <checkAktifCalisma+0x198>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d026      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <checkAktifCalisma+0x1a0>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f083 0301 	eor.w	r3, r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01f      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <checkAktifCalisma+0x19c>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f083 0301 	eor.w	r3, r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <checkAktifCalisma+0x1ac>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f083 0301 	eor.w	r3, r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d011      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005104:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <checkAktifCalisma+0x1d4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f083 0301 	eor.w	r3, r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <checkAktifCalisma+0x1d8>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f083 0301 	eor.w	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005120:	4b10      	ldr	r3, [pc, #64]	; (8005164 <checkAktifCalisma+0x198>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e002      	b.n	800512e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <checkAktifCalisma+0x198>)
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <checkAktifCalisma+0x198>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d03a      	beq.n	80051ac <checkAktifCalisma+0x1e0>
 8005136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800513a:	4817      	ldr	r0, [pc, #92]	; (8005198 <checkAktifCalisma+0x1cc>)
 800513c:	f004 fa80 	bl	8009640 <HAL_GPIO_ReadPin>
 8005140:	4603      	mov	r3, r0
 8005142:	2b01      	cmp	r3, #1
 8005144:	d132      	bne.n	80051ac <checkAktifCalisma+0x1e0>
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <checkAktifCalisma+0x1dc>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d02e      	beq.n	80051ac <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800514e:	2201      	movs	r2, #1
 8005150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005154:	480c      	ldr	r0, [pc, #48]	; (8005188 <checkAktifCalisma+0x1bc>)
 8005156:	f004 fa8a 	bl	800966e <HAL_GPIO_WritePin>
 800515a:	e02d      	b.n	80051b8 <checkAktifCalisma+0x1ec>
 800515c:	2000024a 	.word	0x2000024a
 8005160:	20000249 	.word	0x20000249
 8005164:	20000261 	.word	0x20000261
 8005168:	20000262 	.word	0x20000262
 800516c:	20000264 	.word	0x20000264
 8005170:	2000025c 	.word	0x2000025c
 8005174:	2000023f 	.word	0x2000023f
 8005178:	20000263 	.word	0x20000263
 800517c:	2000023e 	.word	0x2000023e
 8005180:	2000027e 	.word	0x2000027e
 8005184:	2000027f 	.word	0x2000027f
 8005188:	40010c00 	.word	0x40010c00
 800518c:	20000280 	.word	0x20000280
 8005190:	2000026b 	.word	0x2000026b
 8005194:	20000268 	.word	0x20000268
 8005198:	40011000 	.word	0x40011000
 800519c:	2000022f 	.word	0x2000022f
 80051a0:	20000266 	.word	0x20000266
 80051a4:	20000267 	.word	0x20000267
 80051a8:	2000023a 	.word	0x2000023a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051b2:	4860      	ldr	r0, [pc, #384]	; (8005334 <checkAktifCalisma+0x368>)
 80051b4:	f004 fa5b 	bl	800966e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80051b8:	4b5f      	ldr	r3, [pc, #380]	; (8005338 <checkAktifCalisma+0x36c>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <checkAktifCalisma+0x21c>
 80051c0:	4b5e      	ldr	r3, [pc, #376]	; (800533c <checkAktifCalisma+0x370>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d007      	beq.n	80051d8 <checkAktifCalisma+0x20c>
 80051c8:	4b5c      	ldr	r3, [pc, #368]	; (800533c <checkAktifCalisma+0x370>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d003      	beq.n	80051d8 <checkAktifCalisma+0x20c>
 80051d0:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <checkAktifCalisma+0x374>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d107      	bne.n	80051e8 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80051d8:	2201      	movs	r2, #1
 80051da:	2104      	movs	r1, #4
 80051dc:	4855      	ldr	r0, [pc, #340]	; (8005334 <checkAktifCalisma+0x368>)
 80051de:	f004 fa46 	bl	800966e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80051e2:	4b58      	ldr	r3, [pc, #352]	; (8005344 <checkAktifCalisma+0x378>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80051e8:	4b56      	ldr	r3, [pc, #344]	; (8005344 <checkAktifCalisma+0x378>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d02f      	beq.n	8005250 <checkAktifCalisma+0x284>
 80051f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051f4:	484f      	ldr	r0, [pc, #316]	; (8005334 <checkAktifCalisma+0x368>)
 80051f6:	f004 fa23 	bl	8009640 <HAL_GPIO_ReadPin>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d106      	bne.n	800520e <checkAktifCalisma+0x242>
 8005200:	4b51      	ldr	r3, [pc, #324]	; (8005348 <checkAktifCalisma+0x37c>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f083 0301 	eor.w	r3, r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <checkAktifCalisma+0x250>
 800520e:	2102      	movs	r1, #2
 8005210:	484e      	ldr	r0, [pc, #312]	; (800534c <checkAktifCalisma+0x380>)
 8005212:	f004 fa15 	bl	8009640 <HAL_GPIO_ReadPin>
 8005216:	4603      	mov	r3, r0
 8005218:	2b01      	cmp	r3, #1
 800521a:	d119      	bne.n	8005250 <checkAktifCalisma+0x284>
 800521c:	4b4c      	ldr	r3, [pc, #304]	; (8005350 <checkAktifCalisma+0x384>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <checkAktifCalisma+0x284>
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <checkAktifCalisma+0x388>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <checkAktifCalisma+0x284>
 800522c:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <checkAktifCalisma+0x38c>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <checkAktifCalisma+0x284>
 8005234:	4b49      	ldr	r3, [pc, #292]	; (800535c <checkAktifCalisma+0x390>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f083 0301 	eor.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <checkAktifCalisma+0x284>
			timer2=millis;
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <checkAktifCalisma+0x394>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a47      	ldr	r2, [pc, #284]	; (8005364 <checkAktifCalisma+0x398>)
 8005248:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800524a:	4b44      	ldr	r3, [pc, #272]	; (800535c <checkAktifCalisma+0x390>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <checkAktifCalisma+0x394>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b43      	ldr	r3, [pc, #268]	; (8005364 <checkAktifCalisma+0x398>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a43      	ldr	r2, [pc, #268]	; (8005368 <checkAktifCalisma+0x39c>)
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	4293      	cmp	r3, r2
 8005260:	d303      	bcc.n	800526a <checkAktifCalisma+0x29e>
 8005262:	4b3e      	ldr	r3, [pc, #248]	; (800535c <checkAktifCalisma+0x390>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d111      	bne.n	800528e <checkAktifCalisma+0x2c2>
 800526a:	4b39      	ldr	r3, [pc, #228]	; (8005350 <checkAktifCalisma+0x384>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f083 0301 	eor.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <checkAktifCalisma+0x2c2>
 8005278:	4b36      	ldr	r3, [pc, #216]	; (8005354 <checkAktifCalisma+0x388>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f083 0301 	eor.w	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <checkAktifCalisma+0x2c2>
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <checkAktifCalisma+0x38c>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800528e:	2200      	movs	r2, #0
 8005290:	2104      	movs	r1, #4
 8005292:	4828      	ldr	r0, [pc, #160]	; (8005334 <checkAktifCalisma+0x368>)
 8005294:	f004 f9eb 	bl	800966e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <checkAktifCalisma+0x378>)
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800529e:	4b2f      	ldr	r3, [pc, #188]	; (800535c <checkAktifCalisma+0x390>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80052a4:	4b31      	ldr	r3, [pc, #196]	; (800536c <checkAktifCalisma+0x3a0>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80052ac:	4b30      	ldr	r3, [pc, #192]	; (8005370 <checkAktifCalisma+0x3a4>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80052b2:	4b2e      	ldr	r3, [pc, #184]	; (800536c <checkAktifCalisma+0x3a0>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d116      	bne.n	80052e8 <checkAktifCalisma+0x31c>
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <checkAktifCalisma+0x3a8>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d112      	bne.n	80052e8 <checkAktifCalisma+0x31c>
 80052c2:	2101      	movs	r1, #1
 80052c4:	4821      	ldr	r0, [pc, #132]	; (800534c <checkAktifCalisma+0x380>)
 80052c6:	f004 f9bb 	bl	8009640 <HAL_GPIO_ReadPin>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <checkAktifCalisma+0x31c>
 80052d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052d4:	4817      	ldr	r0, [pc, #92]	; (8005334 <checkAktifCalisma+0x368>)
 80052d6:	f004 f9b3 	bl	8009640 <HAL_GPIO_ReadPin>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80052e0:	4b23      	ldr	r3, [pc, #140]	; (8005370 <checkAktifCalisma+0x3a4>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e011      	b.n	800530c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80052e8:	4b20      	ldr	r3, [pc, #128]	; (800536c <checkAktifCalisma+0x3a0>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10d      	bne.n	800530c <checkAktifCalisma+0x340>
 80052f0:	2101      	movs	r1, #1
 80052f2:	4816      	ldr	r0, [pc, #88]	; (800534c <checkAktifCalisma+0x380>)
 80052f4:	f004 f9a4 	bl	8009640 <HAL_GPIO_ReadPin>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d106      	bne.n	800530c <checkAktifCalisma+0x340>
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <checkAktifCalisma+0x3a8>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <checkAktifCalisma+0x3a4>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <checkAktifCalisma+0x3a0>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d134      	bne.n	800537e <checkAktifCalisma+0x3b2>
 8005314:	4b17      	ldr	r3, [pc, #92]	; (8005374 <checkAktifCalisma+0x3a8>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d130      	bne.n	800537e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800531c:	2101      	movs	r1, #1
 800531e:	480b      	ldr	r0, [pc, #44]	; (800534c <checkAktifCalisma+0x380>)
 8005320:	f004 f98e 	bl	8009640 <HAL_GPIO_ReadPin>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d126      	bne.n	8005378 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <checkAktifCalisma+0x3a4>)
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e025      	b.n	800537e <checkAktifCalisma+0x3b2>
 8005332:	bf00      	nop
 8005334:	40010c00 	.word	0x40010c00
 8005338:	20000261 	.word	0x20000261
 800533c:	2000023b 	.word	0x2000023b
 8005340:	2000023f 	.word	0x2000023f
 8005344:	20000265 	.word	0x20000265
 8005348:	20000268 	.word	0x20000268
 800534c:	40011000 	.word	0x40011000
 8005350:	2000027e 	.word	0x2000027e
 8005354:	2000027f 	.word	0x2000027f
 8005358:	2000022f 	.word	0x2000022f
 800535c:	2000025d 	.word	0x2000025d
 8005360:	20000208 	.word	0x20000208
 8005364:	20000214 	.word	0x20000214
 8005368:	20000240 	.word	0x20000240
 800536c:	20000230 	.word	0x20000230
 8005370:	20000283 	.word	0x20000283
 8005374:	2000022d 	.word	0x2000022d
			} else {
				cerceveVar=0;
 8005378:	4b7f      	ldr	r3, [pc, #508]	; (8005578 <checkAktifCalisma+0x5ac>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800537e:	4b7f      	ldr	r3, [pc, #508]	; (800557c <checkAktifCalisma+0x5b0>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d17c      	bne.n	8005480 <checkAktifCalisma+0x4b4>
 8005386:	4b7e      	ldr	r3, [pc, #504]	; (8005580 <checkAktifCalisma+0x5b4>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d078      	beq.n	8005480 <checkAktifCalisma+0x4b4>
 800538e:	4b7d      	ldr	r3, [pc, #500]	; (8005584 <checkAktifCalisma+0x5b8>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d074      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800539a:	487b      	ldr	r0, [pc, #492]	; (8005588 <checkAktifCalisma+0x5bc>)
 800539c:	f004 f950 	bl	8009640 <HAL_GPIO_ReadPin>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <checkAktifCalisma+0x3e2>
 80053a6:	4b79      	ldr	r3, [pc, #484]	; (800558c <checkAktifCalisma+0x5c0>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d068      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80053ae:	4b72      	ldr	r3, [pc, #456]	; (8005578 <checkAktifCalisma+0x5ac>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d064      	beq.n	8005480 <checkAktifCalisma+0x4b4>
 80053b6:	4b76      	ldr	r3, [pc, #472]	; (8005590 <checkAktifCalisma+0x5c4>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05d      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80053c4:	2104      	movs	r1, #4
 80053c6:	4873      	ldr	r0, [pc, #460]	; (8005594 <checkAktifCalisma+0x5c8>)
 80053c8:	f004 f93a 	bl	8009640 <HAL_GPIO_ReadPin>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <checkAktifCalisma+0x40e>
 80053d2:	4b71      	ldr	r3, [pc, #452]	; (8005598 <checkAktifCalisma+0x5cc>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d152      	bne.n	8005480 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80053da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053de:	486a      	ldr	r0, [pc, #424]	; (8005588 <checkAktifCalisma+0x5bc>)
 80053e0:	f004 f92e 	bl	8009640 <HAL_GPIO_ReadPin>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d10e      	bne.n	8005408 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80053ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053ee:	4866      	ldr	r0, [pc, #408]	; (8005588 <checkAktifCalisma+0x5bc>)
 80053f0:	f004 f926 	bl	8009640 <HAL_GPIO_ReadPin>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d106      	bne.n	8005408 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80053fa:	2140      	movs	r1, #64	; 0x40
 80053fc:	4865      	ldr	r0, [pc, #404]	; (8005594 <checkAktifCalisma+0x5c8>)
 80053fe:	f004 f91f 	bl	8009640 <HAL_GPIO_ReadPin>
 8005402:	4603      	mov	r3, r0
 8005404:	2b01      	cmp	r3, #1
 8005406:	d003      	beq.n	8005410 <checkAktifCalisma+0x444>
 8005408:	4b64      	ldr	r3, [pc, #400]	; (800559c <checkAktifCalisma+0x5d0>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d037      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005410:	4b63      	ldr	r3, [pc, #396]	; (80055a0 <checkAktifCalisma+0x5d4>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f083 0301 	eor.w	r3, r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d030      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800541e:	4b61      	ldr	r3, [pc, #388]	; (80055a4 <checkAktifCalisma+0x5d8>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f083 0301 	eor.w	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d029      	beq.n	8005480 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800542c:	4b5e      	ldr	r3, [pc, #376]	; (80055a8 <checkAktifCalisma+0x5dc>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	f083 0301 	eor.w	r3, r3, #1
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d022      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800543a:	4b5c      	ldr	r3, [pc, #368]	; (80055ac <checkAktifCalisma+0x5e0>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f083 0301 	eor.w	r3, r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01b      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005448:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <checkAktifCalisma+0x5e4>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f083 0301 	eor.w	r3, r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d014      	beq.n	8005480 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005456:	4b57      	ldr	r3, [pc, #348]	; (80055b4 <checkAktifCalisma+0x5e8>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f083 0301 	eor.w	r3, r3, #1
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	2102      	movs	r1, #2
 8005468:	4847      	ldr	r0, [pc, #284]	; (8005588 <checkAktifCalisma+0x5bc>)
 800546a:	f004 f900 	bl	800966e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800546e:	4b4b      	ldr	r3, [pc, #300]	; (800559c <checkAktifCalisma+0x5d0>)
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005474:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <checkAktifCalisma+0x5ec>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800547a:	4b50      	ldr	r3, [pc, #320]	; (80055bc <checkAktifCalisma+0x5f0>)
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005480:	4b46      	ldr	r3, [pc, #280]	; (800559c <checkAktifCalisma+0x5d0>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d033      	beq.n	80054f0 <checkAktifCalisma+0x524>
 8005488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800548c:	483e      	ldr	r0, [pc, #248]	; (8005588 <checkAktifCalisma+0x5bc>)
 800548e:	f004 f8d7 	bl	8009640 <HAL_GPIO_ReadPin>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d106      	bne.n	80054a6 <checkAktifCalisma+0x4da>
 8005498:	4b3c      	ldr	r3, [pc, #240]	; (800558c <checkAktifCalisma+0x5c0>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f083 0301 	eor.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <checkAktifCalisma+0x4f0>
 80054a6:	2104      	movs	r1, #4
 80054a8:	483a      	ldr	r0, [pc, #232]	; (8005594 <checkAktifCalisma+0x5c8>)
 80054aa:	f004 f8c9 	bl	8009640 <HAL_GPIO_ReadPin>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d11d      	bne.n	80054f0 <checkAktifCalisma+0x524>
 80054b4:	4b38      	ldr	r3, [pc, #224]	; (8005598 <checkAktifCalisma+0x5cc>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d019      	beq.n	80054f0 <checkAktifCalisma+0x524>
 80054bc:	4b30      	ldr	r3, [pc, #192]	; (8005580 <checkAktifCalisma+0x5b4>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <checkAktifCalisma+0x524>
 80054c4:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <checkAktifCalisma+0x5b8>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d011      	beq.n	80054f0 <checkAktifCalisma+0x524>
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <checkAktifCalisma+0x5ac>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <checkAktifCalisma+0x524>
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <checkAktifCalisma+0x5f4>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <checkAktifCalisma+0x524>
			timer2=millis;
 80054e2:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <checkAktifCalisma+0x5f8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a38      	ldr	r2, [pc, #224]	; (80055c8 <checkAktifCalisma+0x5fc>)
 80054e8:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80054ea:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <checkAktifCalisma+0x5f4>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80054f0:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <checkAktifCalisma+0x5f8>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <checkAktifCalisma+0x5fc>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	4a34      	ldr	r2, [pc, #208]	; (80055cc <checkAktifCalisma+0x600>)
 80054fc:	7812      	ldrb	r2, [r2, #0]
 80054fe:	4293      	cmp	r3, r2
 8005500:	d303      	bcc.n	800550a <checkAktifCalisma+0x53e>
 8005502:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <checkAktifCalisma+0x5f4>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d114      	bne.n	8005534 <checkAktifCalisma+0x568>
 800550a:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <checkAktifCalisma+0x5b4>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f083 0301 	eor.w	r3, r3, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10d      	bne.n	8005534 <checkAktifCalisma+0x568>
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <checkAktifCalisma+0x5b8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f083 0301 	eor.w	r3, r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <checkAktifCalisma+0x568>
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <checkAktifCalisma+0x5ac>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f083 0301 	eor.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005534:	2200      	movs	r2, #0
 8005536:	2102      	movs	r1, #2
 8005538:	4813      	ldr	r0, [pc, #76]	; (8005588 <checkAktifCalisma+0x5bc>)
 800553a:	f004 f898 	bl	800966e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <checkAktifCalisma+0x5d0>)
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <checkAktifCalisma+0x5f4>)
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <checkAktifCalisma+0x5d0>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d040      	beq.n	80055d4 <checkAktifCalisma+0x608>
 8005552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005556:	480f      	ldr	r0, [pc, #60]	; (8005594 <checkAktifCalisma+0x5c8>)
 8005558:	f004 f872 	bl	8009640 <HAL_GPIO_ReadPin>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d138      	bne.n	80055d4 <checkAktifCalisma+0x608>
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <checkAktifCalisma+0x604>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d034      	beq.n	80055d4 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800556a:	2201      	movs	r2, #1
 800556c:	2101      	movs	r1, #1
 800556e:	4806      	ldr	r0, [pc, #24]	; (8005588 <checkAktifCalisma+0x5bc>)
 8005570:	f004 f87d 	bl	800966e <HAL_GPIO_WritePin>
 8005574:	e033      	b.n	80055de <checkAktifCalisma+0x612>
 8005576:	bf00      	nop
 8005578:	20000283 	.word	0x20000283
 800557c:	20000249 	.word	0x20000249
 8005580:	2000027e 	.word	0x2000027e
 8005584:	2000027f 	.word	0x2000027f
 8005588:	40010c00 	.word	0x40010c00
 800558c:	20000269 	.word	0x20000269
 8005590:	2000027d 	.word	0x2000027d
 8005594:	40011000 	.word	0x40011000
 8005598:	20000232 	.word	0x20000232
 800559c:	20000264 	.word	0x20000264
 80055a0:	20000261 	.word	0x20000261
 80055a4:	20000265 	.word	0x20000265
 80055a8:	20000262 	.word	0x20000262
 80055ac:	20000263 	.word	0x20000263
 80055b0:	20000266 	.word	0x20000266
 80055b4:	20000267 	.word	0x20000267
 80055b8:	2000026c 	.word	0x2000026c
 80055bc:	2000028d 	.word	0x2000028d
 80055c0:	2000025c 	.word	0x2000025c
 80055c4:	20000208 	.word	0x20000208
 80055c8:	20000214 	.word	0x20000214
 80055cc:	20000241 	.word	0x20000241
 80055d0:	20000231 	.word	0x20000231
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80055d4:	2200      	movs	r2, #0
 80055d6:	2101      	movs	r1, #1
 80055d8:	4836      	ldr	r0, [pc, #216]	; (80056b4 <checkAktifCalisma+0x6e8>)
 80055da:	f004 f848 	bl	800966e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80055de:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <checkAktifCalisma+0x6ec>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f040 8080 	bne.w	80056e8 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055e8:	4b34      	ldr	r3, [pc, #208]	; (80056bc <checkAktifCalisma+0x6f0>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d003      	beq.n	80055f8 <checkAktifCalisma+0x62c>
 80055f0:	4b32      	ldr	r3, [pc, #200]	; (80056bc <checkAktifCalisma+0x6f0>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d177      	bne.n	80056e8 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80055f8:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <checkAktifCalisma+0x6f4>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d073      	beq.n	80056e8 <checkAktifCalisma+0x71c>
 8005600:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <checkAktifCalisma+0x6f8>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d06f      	beq.n	80056e8 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800560c:	4829      	ldr	r0, [pc, #164]	; (80056b4 <checkAktifCalisma+0x6e8>)
 800560e:	f004 f817 	bl	8009640 <HAL_GPIO_ReadPin>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d167      	bne.n	80056e8 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800561c:	482a      	ldr	r0, [pc, #168]	; (80056c8 <checkAktifCalisma+0x6fc>)
 800561e:	f004 f80f 	bl	8009640 <HAL_GPIO_ReadPin>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <checkAktifCalisma+0x664>
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <checkAktifCalisma+0x700>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d15b      	bne.n	80056e8 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005630:	2140      	movs	r1, #64	; 0x40
 8005632:	4825      	ldr	r0, [pc, #148]	; (80056c8 <checkAktifCalisma+0x6fc>)
 8005634:	f004 f804 	bl	8009640 <HAL_GPIO_ReadPin>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10f      	bne.n	800565e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800563e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005642:	481c      	ldr	r0, [pc, #112]	; (80056b4 <checkAktifCalisma+0x6e8>)
 8005644:	f003 fffc 	bl	8009640 <HAL_GPIO_ReadPin>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d107      	bne.n	800565e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800564e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005652:	4818      	ldr	r0, [pc, #96]	; (80056b4 <checkAktifCalisma+0x6e8>)
 8005654:	f003 fff4 	bl	8009640 <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d003      	beq.n	8005666 <checkAktifCalisma+0x69a>
 800565e:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <checkAktifCalisma+0x704>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d040      	beq.n	80056e8 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <checkAktifCalisma+0x708>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	f083 0301 	eor.w	r3, r3, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d039      	beq.n	80056e8 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <checkAktifCalisma+0x70c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d032      	beq.n	80056e8 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005682:	4b16      	ldr	r3, [pc, #88]	; (80056dc <checkAktifCalisma+0x710>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f083 0301 	eor.w	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02b      	beq.n	80056e8 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005690:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <checkAktifCalisma+0x714>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f083 0301 	eor.w	r3, r3, #1
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d024      	beq.n	80056e8 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <checkAktifCalisma+0x718>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f083 0301 	eor.w	r3, r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01d      	beq.n	80056e8 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <checkAktifCalisma+0x704>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e01c      	b.n	80056ee <checkAktifCalisma+0x722>
 80056b4:	40010c00 	.word	0x40010c00
 80056b8:	20000249 	.word	0x20000249
 80056bc:	2000023b 	.word	0x2000023b
 80056c0:	2000027e 	.word	0x2000027e
 80056c4:	2000027f 	.word	0x2000027f
 80056c8:	40011000 	.word	0x40011000
 80056cc:	2000023c 	.word	0x2000023c
 80056d0:	20000262 	.word	0x20000262
 80056d4:	20000261 	.word	0x20000261
 80056d8:	20000265 	.word	0x20000265
 80056dc:	20000264 	.word	0x20000264
 80056e0:	20000263 	.word	0x20000263
 80056e4:	20000267 	.word	0x20000267
		} else {
			devmotoryukaricalisiyor=0;
 80056e8:	4b64      	ldr	r3, [pc, #400]	; (800587c <checkAktifCalisma+0x8b0>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80056ee:	4b63      	ldr	r3, [pc, #396]	; (800587c <checkAktifCalisma+0x8b0>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80056f6:	2201      	movs	r2, #1
 80056f8:	2120      	movs	r1, #32
 80056fa:	4861      	ldr	r0, [pc, #388]	; (8005880 <checkAktifCalisma+0x8b4>)
 80056fc:	f003 ffb7 	bl	800966e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005700:	4b60      	ldr	r3, [pc, #384]	; (8005884 <checkAktifCalisma+0x8b8>)
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <checkAktifCalisma+0x8b8>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d025      	beq.n	800575a <checkAktifCalisma+0x78e>
 800570e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005712:	485d      	ldr	r0, [pc, #372]	; (8005888 <checkAktifCalisma+0x8bc>)
 8005714:	f003 ff94 	bl	8009640 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d007      	beq.n	800572e <checkAktifCalisma+0x762>
 800571e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005722:	4857      	ldr	r0, [pc, #348]	; (8005880 <checkAktifCalisma+0x8b4>)
 8005724:	f003 ff8c 	bl	8009640 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d115      	bne.n	800575a <checkAktifCalisma+0x78e>
 800572e:	4b57      	ldr	r3, [pc, #348]	; (800588c <checkAktifCalisma+0x8c0>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <checkAktifCalisma+0x78e>
 8005736:	4b56      	ldr	r3, [pc, #344]	; (8005890 <checkAktifCalisma+0x8c4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <checkAktifCalisma+0x78e>
 800573e:	4b55      	ldr	r3, [pc, #340]	; (8005894 <checkAktifCalisma+0x8c8>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f083 0301 	eor.w	r3, r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <checkAktifCalisma+0x78e>
			timer2=millis;
 800574c:	4b52      	ldr	r3, [pc, #328]	; (8005898 <checkAktifCalisma+0x8cc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a52      	ldr	r2, [pc, #328]	; (800589c <checkAktifCalisma+0x8d0>)
 8005752:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005754:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <checkAktifCalisma+0x8c8>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800575a:	4b4f      	ldr	r3, [pc, #316]	; (8005898 <checkAktifCalisma+0x8cc>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b4f      	ldr	r3, [pc, #316]	; (800589c <checkAktifCalisma+0x8d0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	4a4e      	ldr	r2, [pc, #312]	; (80058a0 <checkAktifCalisma+0x8d4>)
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	4293      	cmp	r3, r2
 800576a:	d303      	bcc.n	8005774 <checkAktifCalisma+0x7a8>
 800576c:	4b49      	ldr	r3, [pc, #292]	; (8005894 <checkAktifCalisma+0x8c8>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10d      	bne.n	8005790 <checkAktifCalisma+0x7c4>
 8005774:	4b45      	ldr	r3, [pc, #276]	; (800588c <checkAktifCalisma+0x8c0>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f083 0301 	eor.w	r3, r3, #1
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <checkAktifCalisma+0x7c4>
 8005782:	4b43      	ldr	r3, [pc, #268]	; (8005890 <checkAktifCalisma+0x8c4>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f083 0301 	eor.w	r3, r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005790:	2200      	movs	r2, #0
 8005792:	2120      	movs	r1, #32
 8005794:	483a      	ldr	r0, [pc, #232]	; (8005880 <checkAktifCalisma+0x8b4>)
 8005796:	f003 ff6a 	bl	800966e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800579a:	4b3a      	ldr	r3, [pc, #232]	; (8005884 <checkAktifCalisma+0x8b8>)
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80057a0:	4b3c      	ldr	r3, [pc, #240]	; (8005894 <checkAktifCalisma+0x8c8>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80057a6:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <checkAktifCalisma+0x8d8>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8088 	bne.w	80058c0 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80057b0:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <checkAktifCalisma+0x8dc>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d003      	beq.n	80057c0 <checkAktifCalisma+0x7f4>
 80057b8:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <checkAktifCalisma+0x8dc>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d17f      	bne.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80057c0:	4b32      	ldr	r3, [pc, #200]	; (800588c <checkAktifCalisma+0x8c0>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d07b      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
 80057c8:	4b31      	ldr	r3, [pc, #196]	; (8005890 <checkAktifCalisma+0x8c4>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d077      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80057d0:	2140      	movs	r1, #64	; 0x40
 80057d2:	482b      	ldr	r0, [pc, #172]	; (8005880 <checkAktifCalisma+0x8b4>)
 80057d4:	f003 ff34 	bl	8009640 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d170      	bne.n	80058c0 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80057de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057e2:	4827      	ldr	r0, [pc, #156]	; (8005880 <checkAktifCalisma+0x8b4>)
 80057e4:	f003 ff2c 	bl	8009640 <HAL_GPIO_ReadPin>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <checkAktifCalisma+0x82a>
 80057ee:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <checkAktifCalisma+0x8e0>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d164      	bne.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80057f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057fa:	4823      	ldr	r0, [pc, #140]	; (8005888 <checkAktifCalisma+0x8bc>)
 80057fc:	f003 ff20 	bl	8009640 <HAL_GPIO_ReadPin>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10f      	bne.n	8005826 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800580a:	481f      	ldr	r0, [pc, #124]	; (8005888 <checkAktifCalisma+0x8bc>)
 800580c:	f003 ff18 	bl	8009640 <HAL_GPIO_ReadPin>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800581a:	481b      	ldr	r0, [pc, #108]	; (8005888 <checkAktifCalisma+0x8bc>)
 800581c:	f003 ff10 	bl	8009640 <HAL_GPIO_ReadPin>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d003      	beq.n	800582e <checkAktifCalisma+0x862>
 8005826:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <checkAktifCalisma+0x8e4>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d048      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <checkAktifCalisma+0x8e8>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f083 0301 	eor.w	r3, r3, #1
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d041      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <checkAktifCalisma+0x8ec>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f083 0301 	eor.w	r3, r3, #1
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03a      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800584a:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <checkAktifCalisma+0x8f0>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f083 0301 	eor.w	r3, r3, #1
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d033      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <checkAktifCalisma+0x8b8>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f083 0301 	eor.w	r3, r3, #1
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02c      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <checkAktifCalisma+0x8b0>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f083 0301 	eor.w	r3, r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d025      	beq.n	80058c0 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <checkAktifCalisma+0x8e4>)
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e024      	b.n	80058c6 <checkAktifCalisma+0x8fa>
 800587c:	20000262 	.word	0x20000262
 8005880:	40011000 	.word	0x40011000
 8005884:	20000266 	.word	0x20000266
 8005888:	40010c00 	.word	0x40010c00
 800588c:	2000027e 	.word	0x2000027e
 8005890:	2000027f 	.word	0x2000027f
 8005894:	2000025e 	.word	0x2000025e
 8005898:	20000208 	.word	0x20000208
 800589c:	20000214 	.word	0x20000214
 80058a0:	20000242 	.word	0x20000242
 80058a4:	20000249 	.word	0x20000249
 80058a8:	2000023b 	.word	0x2000023b
 80058ac:	2000023d 	.word	0x2000023d
 80058b0:	20000263 	.word	0x20000263
 80058b4:	20000261 	.word	0x20000261
 80058b8:	20000265 	.word	0x20000265
 80058bc:	20000264 	.word	0x20000264
		} else {
			devmotorasagicalisiyor=0;
 80058c0:	4b96      	ldr	r3, [pc, #600]	; (8005b1c <checkAktifCalisma+0xb50>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80058c6:	4b95      	ldr	r3, [pc, #596]	; (8005b1c <checkAktifCalisma+0xb50>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80058ce:	2201      	movs	r2, #1
 80058d0:	2110      	movs	r1, #16
 80058d2:	4893      	ldr	r0, [pc, #588]	; (8005b20 <checkAktifCalisma+0xb54>)
 80058d4:	f003 fecb 	bl	800966e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80058d8:	4b92      	ldr	r3, [pc, #584]	; (8005b24 <checkAktifCalisma+0xb58>)
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80058de:	4b91      	ldr	r3, [pc, #580]	; (8005b24 <checkAktifCalisma+0xb58>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d024      	beq.n	8005930 <checkAktifCalisma+0x964>
 80058e6:	2140      	movs	r1, #64	; 0x40
 80058e8:	488d      	ldr	r0, [pc, #564]	; (8005b20 <checkAktifCalisma+0xb54>)
 80058ea:	f003 fea9 	bl	8009640 <HAL_GPIO_ReadPin>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d007      	beq.n	8005904 <checkAktifCalisma+0x938>
 80058f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058f8:	4889      	ldr	r0, [pc, #548]	; (8005b20 <checkAktifCalisma+0xb54>)
 80058fa:	f003 fea1 	bl	8009640 <HAL_GPIO_ReadPin>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b01      	cmp	r3, #1
 8005902:	d115      	bne.n	8005930 <checkAktifCalisma+0x964>
 8005904:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <checkAktifCalisma+0xb5c>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d011      	beq.n	8005930 <checkAktifCalisma+0x964>
 800590c:	4b87      	ldr	r3, [pc, #540]	; (8005b2c <checkAktifCalisma+0xb60>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <checkAktifCalisma+0x964>
 8005914:	4b86      	ldr	r3, [pc, #536]	; (8005b30 <checkAktifCalisma+0xb64>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f083 0301 	eor.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <checkAktifCalisma+0x964>
			timer2=millis;
 8005922:	4b84      	ldr	r3, [pc, #528]	; (8005b34 <checkAktifCalisma+0xb68>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a84      	ldr	r2, [pc, #528]	; (8005b38 <checkAktifCalisma+0xb6c>)
 8005928:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800592a:	4b81      	ldr	r3, [pc, #516]	; (8005b30 <checkAktifCalisma+0xb64>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005930:	4b80      	ldr	r3, [pc, #512]	; (8005b34 <checkAktifCalisma+0xb68>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b80      	ldr	r3, [pc, #512]	; (8005b38 <checkAktifCalisma+0xb6c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	4a80      	ldr	r2, [pc, #512]	; (8005b3c <checkAktifCalisma+0xb70>)
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	4293      	cmp	r3, r2
 8005940:	d303      	bcc.n	800594a <checkAktifCalisma+0x97e>
 8005942:	4b7b      	ldr	r3, [pc, #492]	; (8005b30 <checkAktifCalisma+0xb64>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <checkAktifCalisma+0x99a>
 800594a:	4b77      	ldr	r3, [pc, #476]	; (8005b28 <checkAktifCalisma+0xb5c>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f083 0301 	eor.w	r3, r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <checkAktifCalisma+0x99a>
 8005958:	4b74      	ldr	r3, [pc, #464]	; (8005b2c <checkAktifCalisma+0xb60>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005966:	2200      	movs	r2, #0
 8005968:	2110      	movs	r1, #16
 800596a:	486d      	ldr	r0, [pc, #436]	; (8005b20 <checkAktifCalisma+0xb54>)
 800596c:	f003 fe7f 	bl	800966e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005970:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <checkAktifCalisma+0xb58>)
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005976:	4b6e      	ldr	r3, [pc, #440]	; (8005b30 <checkAktifCalisma+0xb64>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800597c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005980:	486f      	ldr	r0, [pc, #444]	; (8005b40 <checkAktifCalisma+0xb74>)
 8005982:	f003 fe5d 	bl	8009640 <HAL_GPIO_ReadPin>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d120      	bne.n	80059ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800598c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005990:	486b      	ldr	r0, [pc, #428]	; (8005b40 <checkAktifCalisma+0xb74>)
 8005992:	f003 fe55 	bl	8009640 <HAL_GPIO_ReadPin>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d118      	bne.n	80059ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800599c:	2104      	movs	r1, #4
 800599e:	4868      	ldr	r0, [pc, #416]	; (8005b40 <checkAktifCalisma+0xb74>)
 80059a0:	f003 fe4e 	bl	8009640 <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d111      	bne.n	80059ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80059aa:	2102      	movs	r1, #2
 80059ac:	4864      	ldr	r0, [pc, #400]	; (8005b40 <checkAktifCalisma+0xb74>)
 80059ae:	f003 fe47 	bl	8009640 <HAL_GPIO_ReadPin>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80059b8:	2101      	movs	r1, #1
 80059ba:	4861      	ldr	r0, [pc, #388]	; (8005b40 <checkAktifCalisma+0xb74>)
 80059bc:	f003 fe40 	bl	8009640 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <checkAktifCalisma+0xa02>
			makineStop=1;
 80059c6:	4b5f      	ldr	r3, [pc, #380]	; (8005b44 <checkAktifCalisma+0xb78>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	e002      	b.n	80059d4 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80059ce:	4b5d      	ldr	r3, [pc, #372]	; (8005b44 <checkAktifCalisma+0xb78>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059d4:	4b5c      	ldr	r3, [pc, #368]	; (8005b48 <checkAktifCalisma+0xb7c>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d144      	bne.n	8005a66 <checkAktifCalisma+0xa9a>
 80059dc:	4b5b      	ldr	r3, [pc, #364]	; (8005b4c <checkAktifCalisma+0xb80>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d003      	beq.n	80059ec <checkAktifCalisma+0xa20>
 80059e4:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <checkAktifCalisma+0xb80>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d13c      	bne.n	8005a66 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	484c      	ldr	r0, [pc, #304]	; (8005b20 <checkAktifCalisma+0xb54>)
 80059f0:	f003 fe26 	bl	8009640 <HAL_GPIO_ReadPin>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <checkAktifCalisma+0xa36>
 80059fa:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <checkAktifCalisma+0xb84>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <checkAktifCalisma+0xa4e>
 8005a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a06:	484e      	ldr	r0, [pc, #312]	; (8005b40 <checkAktifCalisma+0xb74>)
 8005a08:	f003 fe1a 	bl	8009640 <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d129      	bne.n	8005a66 <checkAktifCalisma+0xa9a>
 8005a12:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <checkAktifCalisma+0xb84>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d125      	bne.n	8005a66 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a1a:	2104      	movs	r1, #4
 8005a1c:	4840      	ldr	r0, [pc, #256]	; (8005b20 <checkAktifCalisma+0xb54>)
 8005a1e:	f003 fe0f 	bl	8009640 <HAL_GPIO_ReadPin>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d003      	beq.n	8005a30 <checkAktifCalisma+0xa64>
 8005a28:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <checkAktifCalisma+0xb88>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11a      	bne.n	8005a66 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a30:	2102      	movs	r1, #2
 8005a32:	483b      	ldr	r0, [pc, #236]	; (8005b20 <checkAktifCalisma+0xb54>)
 8005a34:	f003 fe04 	bl	8009640 <HAL_GPIO_ReadPin>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d113      	bne.n	8005a66 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005a3e:	4b46      	ldr	r3, [pc, #280]	; (8005b58 <checkAktifCalisma+0xb8c>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005a4c:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <checkAktifCalisma+0xb78>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005a54:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <checkAktifCalisma+0xb90>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a5a:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <checkAktifCalisma+0xb68>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a40      	ldr	r2, [pc, #256]	; (8005b60 <checkAktifCalisma+0xb94>)
 8005a60:	6013      	str	r3, [r2, #0]
			bekle();
 8005a62:	f7ff f901 	bl	8004c68 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005a66:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <checkAktifCalisma+0xb68>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <checkAktifCalisma+0xb94>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <checkAktifCalisma+0xb98>)
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d211      	bcs.n	8005a9c <checkAktifCalisma+0xad0>
 8005a78:	2104      	movs	r1, #4
 8005a7a:	4829      	ldr	r0, [pc, #164]	; (8005b20 <checkAktifCalisma+0xb54>)
 8005a7c:	f003 fde0 	bl	8009640 <HAL_GPIO_ReadPin>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <checkAktifCalisma+0xad0>
 8005a86:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <checkAktifCalisma+0xb88>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <checkAktifCalisma+0xad0>
 8005a8e:	4b2d      	ldr	r3, [pc, #180]	; (8005b44 <checkAktifCalisma+0xb78>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f083 0301 	eor.w	r3, r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <checkAktifCalisma+0xb90>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005aa2:	4b29      	ldr	r3, [pc, #164]	; (8005b48 <checkAktifCalisma+0xb7c>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d160      	bne.n	8005b6c <checkAktifCalisma+0xba0>
 8005aaa:	4b28      	ldr	r3, [pc, #160]	; (8005b4c <checkAktifCalisma+0xb80>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d003      	beq.n	8005aba <checkAktifCalisma+0xaee>
 8005ab2:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <checkAktifCalisma+0xb80>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d158      	bne.n	8005b6c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005aba:	2104      	movs	r1, #4
 8005abc:	4818      	ldr	r0, [pc, #96]	; (8005b20 <checkAktifCalisma+0xb54>)
 8005abe:	f003 fdbf 	bl	8009640 <HAL_GPIO_ReadPin>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d003      	beq.n	8005ad0 <checkAktifCalisma+0xb04>
 8005ac8:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <checkAktifCalisma+0xb88>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d14d      	bne.n	8005b6c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	4813      	ldr	r0, [pc, #76]	; (8005b20 <checkAktifCalisma+0xb54>)
 8005ad4:	f003 fdb4 	bl	8009640 <HAL_GPIO_ReadPin>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d146      	bne.n	8005b6c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	480f      	ldr	r0, [pc, #60]	; (8005b20 <checkAktifCalisma+0xb54>)
 8005ae2:	f003 fdad 	bl	8009640 <HAL_GPIO_ReadPin>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <checkAktifCalisma+0xb28>
 8005aec:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <checkAktifCalisma+0xb84>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <checkAktifCalisma+0xb40>
 8005af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005af8:	4811      	ldr	r0, [pc, #68]	; (8005b40 <checkAktifCalisma+0xb74>)
 8005afa:	f003 fda1 	bl	8009640 <HAL_GPIO_ReadPin>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d133      	bne.n	8005b6c <checkAktifCalisma+0xba0>
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <checkAktifCalisma+0xb84>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d12f      	bne.n	8005b6c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <checkAktifCalisma+0xb78>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d02b      	beq.n	8005b6c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005b14:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <checkAktifCalisma+0xb9c>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e02a      	b.n	8005b72 <checkAktifCalisma+0xba6>
 8005b1c:	20000263 	.word	0x20000263
 8005b20:	40011000 	.word	0x40011000
 8005b24:	20000267 	.word	0x20000267
 8005b28:	2000027e 	.word	0x2000027e
 8005b2c:	2000027f 	.word	0x2000027f
 8005b30:	2000025f 	.word	0x2000025f
 8005b34:	20000208 	.word	0x20000208
 8005b38:	20000214 	.word	0x20000214
 8005b3c:	20000242 	.word	0x20000242
 8005b40:	40010c00 	.word	0x40010c00
 8005b44:	2000026e 	.word	0x2000026e
 8005b48:	20000235 	.word	0x20000235
 8005b4c:	20000234 	.word	0x20000234
 8005b50:	20000238 	.word	0x20000238
 8005b54:	20000232 	.word	0x20000232
 8005b58:	2000025b 	.word	0x2000025b
 8005b5c:	2000026f 	.word	0x2000026f
 8005b60:	2000020c 	.word	0x2000020c
 8005b64:	20000245 	.word	0x20000245
 8005b68:	20000270 	.word	0x20000270
		} else {
			kapi1butonkontrol=0;
 8005b6c:	4b8b      	ldr	r3, [pc, #556]	; (8005d9c <checkAktifCalisma+0xdd0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b72:	4b8b      	ldr	r3, [pc, #556]	; (8005da0 <checkAktifCalisma+0xdd4>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d121      	bne.n	8005bbe <checkAktifCalisma+0xbf2>
 8005b7a:	4b8a      	ldr	r3, [pc, #552]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d003      	beq.n	8005b8a <checkAktifCalisma+0xbbe>
 8005b82:	4b88      	ldr	r3, [pc, #544]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d119      	bne.n	8005bbe <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	4886      	ldr	r0, [pc, #536]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005b8e:	f003 fd57 	bl	8009640 <HAL_GPIO_ReadPin>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <checkAktifCalisma+0xbd4>
 8005b98:	4b84      	ldr	r3, [pc, #528]	; (8005dac <checkAktifCalisma+0xde0>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10e      	bne.n	8005bbe <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	4881      	ldr	r0, [pc, #516]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005ba4:	f003 fd4c 	bl	8009640 <HAL_GPIO_ReadPin>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d107      	bne.n	8005bbe <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005bae:	4b80      	ldr	r3, [pc, #512]	; (8005db0 <checkAktifCalisma+0xde4>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005bb6:	4b7f      	ldr	r3, [pc, #508]	; (8005db4 <checkAktifCalisma+0xde8>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005bbe:	4b7d      	ldr	r3, [pc, #500]	; (8005db4 <checkAktifCalisma+0xde8>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005bc4:	4b75      	ldr	r3, [pc, #468]	; (8005d9c <checkAktifCalisma+0xdd0>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d107      	bne.n	8005bdc <checkAktifCalisma+0xc10>
 8005bcc:	4b79      	ldr	r3, [pc, #484]	; (8005db4 <checkAktifCalisma+0xde8>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <checkAktifCalisma+0xc10>
 8005bd4:	4b78      	ldr	r3, [pc, #480]	; (8005db8 <checkAktifCalisma+0xdec>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	4876      	ldr	r0, [pc, #472]	; (8005dbc <checkAktifCalisma+0xdf0>)
 8005be2:	f003 fd44 	bl	800966e <HAL_GPIO_WritePin>
 8005be6:	e004      	b.n	8005bf2 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005be8:	2200      	movs	r2, #0
 8005bea:	2180      	movs	r1, #128	; 0x80
 8005bec:	4873      	ldr	r0, [pc, #460]	; (8005dbc <checkAktifCalisma+0xdf0>)
 8005bee:	f003 fd3e 	bl	800966e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bf2:	4b73      	ldr	r3, [pc, #460]	; (8005dc0 <checkAktifCalisma+0xdf4>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d141      	bne.n	8005c7e <checkAktifCalisma+0xcb2>
 8005bfa:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d003      	beq.n	8005c0a <checkAktifCalisma+0xc3e>
 8005c02:	4b68      	ldr	r3, [pc, #416]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d139      	bne.n	8005c7e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c0e:	4866      	ldr	r0, [pc, #408]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005c10:	f003 fd16 	bl	8009640 <HAL_GPIO_ReadPin>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <checkAktifCalisma+0xc56>
 8005c1a:	4b6a      	ldr	r3, [pc, #424]	; (8005dc4 <checkAktifCalisma+0xdf8>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <checkAktifCalisma+0xc6e>
 8005c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c26:	4868      	ldr	r0, [pc, #416]	; (8005dc8 <checkAktifCalisma+0xdfc>)
 8005c28:	f003 fd0a 	bl	8009640 <HAL_GPIO_ReadPin>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d125      	bne.n	8005c7e <checkAktifCalisma+0xcb2>
 8005c32:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <checkAktifCalisma+0xdf8>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d121      	bne.n	8005c7e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	485a      	ldr	r0, [pc, #360]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005c3e:	f003 fcff 	bl	8009640 <HAL_GPIO_ReadPin>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d11a      	bne.n	8005c7e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c48:	2104      	movs	r1, #4
 8005c4a:	4857      	ldr	r0, [pc, #348]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005c4c:	f003 fcf8 	bl	8009640 <HAL_GPIO_ReadPin>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d113      	bne.n	8005c7e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005c56:	4b56      	ldr	r3, [pc, #344]	; (8005db0 <checkAktifCalisma+0xde4>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00f      	beq.n	8005c7e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	; (8005dcc <checkAktifCalisma+0xe00>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f083 0301 	eor.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005c6c:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <checkAktifCalisma+0xe04>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c72:	4b58      	ldr	r3, [pc, #352]	; (8005dd4 <checkAktifCalisma+0xe08>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a58      	ldr	r2, [pc, #352]	; (8005dd8 <checkAktifCalisma+0xe0c>)
 8005c78:	6013      	str	r3, [r2, #0]
			bekle();
 8005c7a:	f7fe fff5 	bl	8004c68 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005c7e:	4b55      	ldr	r3, [pc, #340]	; (8005dd4 <checkAktifCalisma+0xe08>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b55      	ldr	r3, [pc, #340]	; (8005dd8 <checkAktifCalisma+0xe0c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	4a54      	ldr	r2, [pc, #336]	; (8005ddc <checkAktifCalisma+0xe10>)
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d20d      	bcs.n	8005cac <checkAktifCalisma+0xce0>
 8005c90:	2102      	movs	r1, #2
 8005c92:	4845      	ldr	r0, [pc, #276]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005c94:	f003 fcd4 	bl	8009640 <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <checkAktifCalisma+0xce0>
 8005c9e:	4b44      	ldr	r3, [pc, #272]	; (8005db0 <checkAktifCalisma+0xde4>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f083 0301 	eor.w	r3, r3, #1
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005cac:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <checkAktifCalisma+0xe04>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005cb2:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <checkAktifCalisma+0xdf4>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d135      	bne.n	8005d26 <checkAktifCalisma+0xd5a>
 8005cba:	4b3a      	ldr	r3, [pc, #232]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d003      	beq.n	8005cca <checkAktifCalisma+0xcfe>
 8005cc2:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d12d      	bne.n	8005d26 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cce:	4836      	ldr	r0, [pc, #216]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005cd0:	f003 fcb6 	bl	8009640 <HAL_GPIO_ReadPin>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <checkAktifCalisma+0xd16>
 8005cda:	4b3a      	ldr	r3, [pc, #232]	; (8005dc4 <checkAktifCalisma+0xdf8>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <checkAktifCalisma+0xd2e>
 8005ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ce6:	4838      	ldr	r0, [pc, #224]	; (8005dc8 <checkAktifCalisma+0xdfc>)
 8005ce8:	f003 fcaa 	bl	8009640 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d119      	bne.n	8005d26 <checkAktifCalisma+0xd5a>
 8005cf2:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <checkAktifCalisma+0xdf8>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d115      	bne.n	8005d26 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	482a      	ldr	r0, [pc, #168]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005cfe:	f003 fc9f 	bl	8009640 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10e      	bne.n	8005d26 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d08:	2104      	movs	r1, #4
 8005d0a:	4827      	ldr	r0, [pc, #156]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005d0c:	f003 fc98 	bl	8009640 <HAL_GPIO_ReadPin>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d107      	bne.n	8005d26 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005d16:	4b26      	ldr	r3, [pc, #152]	; (8005db0 <checkAktifCalisma+0xde4>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005d1e:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <checkAktifCalisma+0xe14>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e002      	b.n	8005d2c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005d26:	4b2e      	ldr	r3, [pc, #184]	; (8005de0 <checkAktifCalisma+0xe14>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005d2c:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <checkAktifCalisma+0xdf4>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11d      	bne.n	8005d70 <checkAktifCalisma+0xda4>
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d003      	beq.n	8005d44 <checkAktifCalisma+0xd78>
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <checkAktifCalisma+0xdd8>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d115      	bne.n	8005d70 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d44:	2102      	movs	r1, #2
 8005d46:	4818      	ldr	r0, [pc, #96]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005d48:	f003 fc7a 	bl	8009640 <HAL_GPIO_ReadPin>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10e      	bne.n	8005d70 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d52:	2104      	movs	r1, #4
 8005d54:	4814      	ldr	r0, [pc, #80]	; (8005da8 <checkAktifCalisma+0xddc>)
 8005d56:	f003 fc73 	bl	8009640 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <checkAktifCalisma+0xde4>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005d68:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <checkAktifCalisma+0xe18>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005d70:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <checkAktifCalisma+0xe18>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <checkAktifCalisma+0xe14>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <checkAktifCalisma+0xdc2>
 8005d7e:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <checkAktifCalisma+0xe18>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <checkAktifCalisma+0xdc2>
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <checkAktifCalisma+0xe04>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02c      	beq.n	8005de8 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005d8e:	2201      	movs	r2, #1
 8005d90:	2140      	movs	r1, #64	; 0x40
 8005d92:	480a      	ldr	r0, [pc, #40]	; (8005dbc <checkAktifCalisma+0xdf0>)
 8005d94:	f003 fc6b 	bl	800966e <HAL_GPIO_WritePin>
 8005d98:	e02b      	b.n	8005df2 <checkAktifCalisma+0xe26>
 8005d9a:	bf00      	nop
 8005d9c:	20000270 	.word	0x20000270
 8005da0:	20000235 	.word	0x20000235
 8005da4:	20000234 	.word	0x20000234
 8005da8:	40011000 	.word	0x40011000
 8005dac:	20000232 	.word	0x20000232
 8005db0:	2000026e 	.word	0x2000026e
 8005db4:	20000271 	.word	0x20000271
 8005db8:	2000026f 	.word	0x2000026f
 8005dbc:	40010800 	.word	0x40010800
 8005dc0:	20000236 	.word	0x20000236
 8005dc4:	20000238 	.word	0x20000238
 8005dc8:	40010c00 	.word	0x40010c00
 8005dcc:	2000025b 	.word	0x2000025b
 8005dd0:	20000272 	.word	0x20000272
 8005dd4:	20000208 	.word	0x20000208
 8005dd8:	2000020c 	.word	0x2000020c
 8005ddc:	20000246 	.word	0x20000246
 8005de0:	20000273 	.word	0x20000273
 8005de4:	20000274 	.word	0x20000274
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005de8:	2200      	movs	r2, #0
 8005dea:	2140      	movs	r1, #64	; 0x40
 8005dec:	488d      	ldr	r0, [pc, #564]	; (8006024 <checkAktifCalisma+0x1058>)
 8005dee:	f003 fc3e 	bl	800966e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005df2:	4b8d      	ldr	r3, [pc, #564]	; (8006028 <checkAktifCalisma+0x105c>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <checkAktifCalisma+0xe36>
 8005dfa:	4b8b      	ldr	r3, [pc, #556]	; (8006028 <checkAktifCalisma+0x105c>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d115      	bne.n	8005e2e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e02:	2104      	movs	r1, #4
 8005e04:	4889      	ldr	r0, [pc, #548]	; (800602c <checkAktifCalisma+0x1060>)
 8005e06:	f003 fc1b 	bl	8009640 <HAL_GPIO_ReadPin>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d003      	beq.n	8005e18 <checkAktifCalisma+0xe4c>
 8005e10:	4b87      	ldr	r3, [pc, #540]	; (8006030 <checkAktifCalisma+0x1064>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005e18:	2102      	movs	r1, #2
 8005e1a:	4884      	ldr	r0, [pc, #528]	; (800602c <checkAktifCalisma+0x1060>)
 8005e1c:	f003 fc10 	bl	8009640 <HAL_GPIO_ReadPin>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005e26:	4b83      	ldr	r3, [pc, #524]	; (8006034 <checkAktifCalisma+0x1068>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e002      	b.n	8005e34 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005e2e:	4b81      	ldr	r3, [pc, #516]	; (8006034 <checkAktifCalisma+0x1068>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005e34:	4b7c      	ldr	r3, [pc, #496]	; (8006028 <checkAktifCalisma+0x105c>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d003      	beq.n	8005e44 <checkAktifCalisma+0xe78>
 8005e3c:	4b7a      	ldr	r3, [pc, #488]	; (8006028 <checkAktifCalisma+0x105c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d111      	bne.n	8005e68 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005e44:	2102      	movs	r1, #2
 8005e46:	4879      	ldr	r0, [pc, #484]	; (800602c <checkAktifCalisma+0x1060>)
 8005e48:	f003 fbfa 	bl	8009640 <HAL_GPIO_ReadPin>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d10a      	bne.n	8005e68 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005e52:	2104      	movs	r1, #4
 8005e54:	4875      	ldr	r0, [pc, #468]	; (800602c <checkAktifCalisma+0x1060>)
 8005e56:	f003 fbf3 	bl	8009640 <HAL_GPIO_ReadPin>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005e60:	4b75      	ldr	r3, [pc, #468]	; (8006038 <checkAktifCalisma+0x106c>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e002      	b.n	8005e6e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005e68:	4b73      	ldr	r3, [pc, #460]	; (8006038 <checkAktifCalisma+0x106c>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005e6e:	4b71      	ldr	r3, [pc, #452]	; (8006034 <checkAktifCalisma+0x1068>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005e76:	4b71      	ldr	r3, [pc, #452]	; (800603c <checkAktifCalisma+0x1070>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d10b      	bne.n	8005e96 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e82:	486f      	ldr	r0, [pc, #444]	; (8006040 <checkAktifCalisma+0x1074>)
 8005e84:	f003 fbdc 	bl	8009640 <HAL_GPIO_ReadPin>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005e8e:	4b6d      	ldr	r3, [pc, #436]	; (8006044 <checkAktifCalisma+0x1078>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e002      	b.n	8005e9c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005e96:	4b6b      	ldr	r3, [pc, #428]	; (8006044 <checkAktifCalisma+0x1078>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005e9c:	4b66      	ldr	r3, [pc, #408]	; (8006038 <checkAktifCalisma+0x106c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005ea4:	4b65      	ldr	r3, [pc, #404]	; (800603c <checkAktifCalisma+0x1070>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10b      	bne.n	8005ec4 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eb0:	4863      	ldr	r0, [pc, #396]	; (8006040 <checkAktifCalisma+0x1074>)
 8005eb2:	f003 fbc5 	bl	8009640 <HAL_GPIO_ReadPin>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ebc:	4b62      	ldr	r3, [pc, #392]	; (8006048 <checkAktifCalisma+0x107c>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005ec4:	4b60      	ldr	r3, [pc, #384]	; (8006048 <checkAktifCalisma+0x107c>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005eca:	4b60      	ldr	r3, [pc, #384]	; (800604c <checkAktifCalisma+0x1080>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d137      	bne.n	8005f42 <checkAktifCalisma+0xf76>
 8005ed2:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <checkAktifCalisma+0x1084>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d003      	beq.n	8005ee2 <checkAktifCalisma+0xf16>
 8005eda:	4b5d      	ldr	r3, [pc, #372]	; (8006050 <checkAktifCalisma+0x1084>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d12f      	bne.n	8005f42 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ee2:	4b54      	ldr	r3, [pc, #336]	; (8006034 <checkAktifCalisma+0x1068>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <checkAktifCalisma+0xf26>
 8005eea:	4b53      	ldr	r3, [pc, #332]	; (8006038 <checkAktifCalisma+0x106c>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d027      	beq.n	8005f42 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ef6:	484d      	ldr	r0, [pc, #308]	; (800602c <checkAktifCalisma+0x1060>)
 8005ef8:	f003 fba2 	bl	8009640 <HAL_GPIO_ReadPin>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <checkAktifCalisma+0xf3e>
 8005f02:	4b4e      	ldr	r3, [pc, #312]	; (800603c <checkAktifCalisma+0x1070>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f0a:	4b4e      	ldr	r3, [pc, #312]	; (8006044 <checkAktifCalisma+0x1078>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <checkAktifCalisma+0xf4e>
 8005f12:	4b4d      	ldr	r3, [pc, #308]	; (8006048 <checkAktifCalisma+0x107c>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005f1a:	4b4e      	ldr	r3, [pc, #312]	; (8006054 <checkAktifCalisma+0x1088>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00f      	beq.n	8005f42 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005f22:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <checkAktifCalisma+0x108c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f083 0301 	eor.w	r3, r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005f30:	4b4a      	ldr	r3, [pc, #296]	; (800605c <checkAktifCalisma+0x1090>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005f36:	4b4a      	ldr	r3, [pc, #296]	; (8006060 <checkAktifCalisma+0x1094>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4a      	ldr	r2, [pc, #296]	; (8006064 <checkAktifCalisma+0x1098>)
 8005f3c:	6013      	str	r3, [r2, #0]
			bekle();
 8005f3e:	f7fe fe93 	bl	8004c68 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005f42:	4b47      	ldr	r3, [pc, #284]	; (8006060 <checkAktifCalisma+0x1094>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b47      	ldr	r3, [pc, #284]	; (8006064 <checkAktifCalisma+0x1098>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	4a46      	ldr	r2, [pc, #280]	; (8006068 <checkAktifCalisma+0x109c>)
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d214      	bcs.n	8005f7e <checkAktifCalisma+0xfb2>
 8005f54:	4b37      	ldr	r3, [pc, #220]	; (8006034 <checkAktifCalisma+0x1068>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	f083 0301 	eor.w	r3, r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <checkAktifCalisma+0xfa4>
 8005f62:	4b35      	ldr	r3, [pc, #212]	; (8006038 <checkAktifCalisma+0x106c>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f083 0301 	eor.w	r3, r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <checkAktifCalisma+0xfb2>
 8005f70:	4b38      	ldr	r3, [pc, #224]	; (8006054 <checkAktifCalisma+0x1088>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f083 0301 	eor.w	r3, r3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <checkAktifCalisma+0x1090>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f84:	4b31      	ldr	r3, [pc, #196]	; (800604c <checkAktifCalisma+0x1080>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d12b      	bne.n	8005fe4 <checkAktifCalisma+0x1018>
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <checkAktifCalisma+0x1084>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d003      	beq.n	8005f9c <checkAktifCalisma+0xfd0>
 8005f94:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <checkAktifCalisma+0x1084>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d123      	bne.n	8005fe4 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f9c:	4b25      	ldr	r3, [pc, #148]	; (8006034 <checkAktifCalisma+0x1068>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d103      	bne.n	8005fac <checkAktifCalisma+0xfe0>
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <checkAktifCalisma+0x106c>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fb0:	481e      	ldr	r0, [pc, #120]	; (800602c <checkAktifCalisma+0x1060>)
 8005fb2:	f003 fb45 	bl	8009640 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <checkAktifCalisma+0xff8>
 8005fbc:	4b1f      	ldr	r3, [pc, #124]	; (800603c <checkAktifCalisma+0x1070>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005fc4:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <checkAktifCalisma+0x1078>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d103      	bne.n	8005fd4 <checkAktifCalisma+0x1008>
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <checkAktifCalisma+0x107c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005fd4:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <checkAktifCalisma+0x1088>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005fdc:	4b23      	ldr	r3, [pc, #140]	; (800606c <checkAktifCalisma+0x10a0>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005fe4:	4b21      	ldr	r3, [pc, #132]	; (800606c <checkAktifCalisma+0x10a0>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <checkAktifCalisma+0x1080>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d140      	bne.n	8006074 <checkAktifCalisma+0x10a8>
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <checkAktifCalisma+0x1084>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d003      	beq.n	8006002 <checkAktifCalisma+0x1036>
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <checkAktifCalisma+0x1084>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d138      	bne.n	8006074 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <checkAktifCalisma+0x1068>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <checkAktifCalisma+0x1046>
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <checkAktifCalisma+0x106c>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d030      	beq.n	8006074 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <checkAktifCalisma+0x1088>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d02c      	beq.n	8006074 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <checkAktifCalisma+0x10a4>)
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e02b      	b.n	800607a <checkAktifCalisma+0x10ae>
 8006022:	bf00      	nop
 8006024:	40010800 	.word	0x40010800
 8006028:	20000239 	.word	0x20000239
 800602c:	40011000 	.word	0x40011000
 8006030:	20000232 	.word	0x20000232
 8006034:	20000278 	.word	0x20000278
 8006038:	20000279 	.word	0x20000279
 800603c:	20000238 	.word	0x20000238
 8006040:	40010c00 	.word	0x40010c00
 8006044:	20000288 	.word	0x20000288
 8006048:	20000289 	.word	0x20000289
 800604c:	20000237 	.word	0x20000237
 8006050:	20000234 	.word	0x20000234
 8006054:	2000026e 	.word	0x2000026e
 8006058:	2000025b 	.word	0x2000025b
 800605c:	20000275 	.word	0x20000275
 8006060:	20000208 	.word	0x20000208
 8006064:	2000020c 	.word	0x2000020c
 8006068:	20000247 	.word	0x20000247
 800606c:	20000276 	.word	0x20000276
 8006070:	20000277 	.word	0x20000277
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006074:	4b8b      	ldr	r3, [pc, #556]	; (80062a4 <checkAktifCalisma+0x12d8>)
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800607a:	4b8b      	ldr	r3, [pc, #556]	; (80062a8 <checkAktifCalisma+0x12dc>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <checkAktifCalisma+0x10c6>
 8006082:	4b8a      	ldr	r3, [pc, #552]	; (80062ac <checkAktifCalisma+0x12e0>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <checkAktifCalisma+0x10c6>
 800608a:	4b86      	ldr	r3, [pc, #536]	; (80062a4 <checkAktifCalisma+0x12d8>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006092:	2201      	movs	r2, #1
 8006094:	2120      	movs	r1, #32
 8006096:	4886      	ldr	r0, [pc, #536]	; (80062b0 <checkAktifCalisma+0x12e4>)
 8006098:	f003 fae9 	bl	800966e <HAL_GPIO_WritePin>
 800609c:	e004      	b.n	80060a8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800609e:	2200      	movs	r2, #0
 80060a0:	2120      	movs	r1, #32
 80060a2:	4883      	ldr	r0, [pc, #524]	; (80062b0 <checkAktifCalisma+0x12e4>)
 80060a4:	f003 fae3 	bl	800966e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80060a8:	4b82      	ldr	r3, [pc, #520]	; (80062b4 <checkAktifCalisma+0x12e8>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00e      	beq.n	80060ce <checkAktifCalisma+0x1102>
 80060b0:	2102      	movs	r1, #2
 80060b2:	4881      	ldr	r0, [pc, #516]	; (80062b8 <checkAktifCalisma+0x12ec>)
 80060b4:	f003 fac4 	bl	8009640 <HAL_GPIO_ReadPin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d107      	bne.n	80060ce <checkAktifCalisma+0x1102>
 80060be:	4b7f      	ldr	r3, [pc, #508]	; (80062bc <checkAktifCalisma+0x12f0>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <checkAktifCalisma+0x1102>
 80060c6:	4b7e      	ldr	r3, [pc, #504]	; (80062c0 <checkAktifCalisma+0x12f4>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d112      	bne.n	80060f4 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80060ce:	4b7d      	ldr	r3, [pc, #500]	; (80062c4 <checkAktifCalisma+0x12f8>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d066      	beq.n	80061a4 <checkAktifCalisma+0x11d8>
 80060d6:	2104      	movs	r1, #4
 80060d8:	4877      	ldr	r0, [pc, #476]	; (80062b8 <checkAktifCalisma+0x12ec>)
 80060da:	f003 fab1 	bl	8009640 <HAL_GPIO_ReadPin>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d15f      	bne.n	80061a4 <checkAktifCalisma+0x11d8>
 80060e4:	4b75      	ldr	r3, [pc, #468]	; (80062bc <checkAktifCalisma+0x12f0>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d05b      	beq.n	80061a4 <checkAktifCalisma+0x11d8>
 80060ec:	4b74      	ldr	r3, [pc, #464]	; (80062c0 <checkAktifCalisma+0x12f4>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d057      	beq.n	80061a4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80060f4:	4b74      	ldr	r3, [pc, #464]	; (80062c8 <checkAktifCalisma+0x12fc>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	4b72      	ldr	r3, [pc, #456]	; (80062c8 <checkAktifCalisma+0x12fc>)
 80060fe:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006100:	4b71      	ldr	r3, [pc, #452]	; (80062c8 <checkAktifCalisma+0x12fc>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b09      	cmp	r3, #9
 8006106:	d908      	bls.n	800611a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006108:	4b6f      	ldr	r3, [pc, #444]	; (80062c8 <checkAktifCalisma+0x12fc>)
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800610e:	4b6f      	ldr	r3, [pc, #444]	; (80062cc <checkAktifCalisma+0x1300>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	b2da      	uxtb	r2, r3
 8006116:	4b6d      	ldr	r3, [pc, #436]	; (80062cc <checkAktifCalisma+0x1300>)
 8006118:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800611a:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <checkAktifCalisma+0x1300>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b09      	cmp	r3, #9
 8006120:	d908      	bls.n	8006134 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006122:	4b6a      	ldr	r3, [pc, #424]	; (80062cc <checkAktifCalisma+0x1300>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006128:	4b69      	ldr	r3, [pc, #420]	; (80062d0 <checkAktifCalisma+0x1304>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	4b67      	ldr	r3, [pc, #412]	; (80062d0 <checkAktifCalisma+0x1304>)
 8006132:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006134:	4b66      	ldr	r3, [pc, #408]	; (80062d0 <checkAktifCalisma+0x1304>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b09      	cmp	r3, #9
 800613a:	d908      	bls.n	800614e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 800613c:	4b64      	ldr	r3, [pc, #400]	; (80062d0 <checkAktifCalisma+0x1304>)
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006142:	4b64      	ldr	r3, [pc, #400]	; (80062d4 <checkAktifCalisma+0x1308>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b62      	ldr	r3, [pc, #392]	; (80062d4 <checkAktifCalisma+0x1308>)
 800614c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800614e:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <checkAktifCalisma+0x1308>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b09      	cmp	r3, #9
 8006154:	d908      	bls.n	8006168 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006156:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <checkAktifCalisma+0x1308>)
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 800615c:	4b5e      	ldr	r3, [pc, #376]	; (80062d8 <checkAktifCalisma+0x130c>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	4b5c      	ldr	r3, [pc, #368]	; (80062d8 <checkAktifCalisma+0x130c>)
 8006166:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006168:	4b5b      	ldr	r3, [pc, #364]	; (80062d8 <checkAktifCalisma+0x130c>)
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	4b5b      	ldr	r3, [pc, #364]	; (80062dc <checkAktifCalisma+0x1310>)
 800616e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006172:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <checkAktifCalisma+0x1308>)
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	4b59      	ldr	r3, [pc, #356]	; (80062dc <checkAktifCalisma+0x1310>)
 8006178:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800617a:	4b55      	ldr	r3, [pc, #340]	; (80062d0 <checkAktifCalisma+0x1304>)
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	4b57      	ldr	r3, [pc, #348]	; (80062dc <checkAktifCalisma+0x1310>)
 8006180:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006182:	4b52      	ldr	r3, [pc, #328]	; (80062cc <checkAktifCalisma+0x1300>)
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	4b55      	ldr	r3, [pc, #340]	; (80062dc <checkAktifCalisma+0x1310>)
 8006188:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800618a:	4b4f      	ldr	r3, [pc, #316]	; (80062c8 <checkAktifCalisma+0x12fc>)
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	4b53      	ldr	r3, [pc, #332]	; (80062dc <checkAktifCalisma+0x1310>)
 8006190:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006192:	4b53      	ldr	r3, [pc, #332]	; (80062e0 <checkAktifCalisma+0x1314>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006198:	4b46      	ldr	r3, [pc, #280]	; (80062b4 <checkAktifCalisma+0x12e8>)
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800619e:	4b49      	ldr	r3, [pc, #292]	; (80062c4 <checkAktifCalisma+0x12f8>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80061a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061a8:	484e      	ldr	r0, [pc, #312]	; (80062e4 <checkAktifCalisma+0x1318>)
 80061aa:	f003 fa49 	bl	8009640 <HAL_GPIO_ReadPin>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d016      	beq.n	80061e2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80061b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061b8:	484a      	ldr	r0, [pc, #296]	; (80062e4 <checkAktifCalisma+0x1318>)
 80061ba:	f003 fa41 	bl	8009640 <HAL_GPIO_ReadPin>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80061c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061c8:	4846      	ldr	r0, [pc, #280]	; (80062e4 <checkAktifCalisma+0x1318>)
 80061ca:	f003 fa39 	bl	8009640 <HAL_GPIO_ReadPin>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	4838      	ldr	r0, [pc, #224]	; (80062b8 <checkAktifCalisma+0x12ec>)
 80061d8:	f003 fa32 	bl	8009640 <HAL_GPIO_ReadPin>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <checkAktifCalisma+0x121e>
			startBasili=1;
 80061e2:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <checkAktifCalisma+0x131c>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e002      	b.n	80061f0 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80061ea:	4b3f      	ldr	r3, [pc, #252]	; (80062e8 <checkAktifCalisma+0x131c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80061f0:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <checkAktifCalisma+0x131c>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d016      	beq.n	8006226 <checkAktifCalisma+0x125a>
 80061f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061fc:	4839      	ldr	r0, [pc, #228]	; (80062e4 <checkAktifCalisma+0x1318>)
 80061fe:	f003 fa1f 	bl	8009640 <HAL_GPIO_ReadPin>
 8006202:	4603      	mov	r3, r0
 8006204:	2b01      	cmp	r3, #1
 8006206:	d10e      	bne.n	8006226 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006208:	4b38      	ldr	r3, [pc, #224]	; (80062ec <checkAktifCalisma+0x1320>)
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800620e:	2001      	movs	r0, #1
 8006210:	f7fa fd68 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006214:	2001      	movs	r0, #1
 8006216:	f7fa fd0d 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 800621a:	f001 fc4d 	bl	8007ab8 <convertAndSendData>
			acilstophatasi=1;
 800621e:	4b34      	ldr	r3, [pc, #208]	; (80062f0 <checkAktifCalisma+0x1324>)
 8006220:	2201      	movs	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	e018      	b.n	8006258 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006226:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <checkAktifCalisma+0x1324>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d014      	beq.n	8006258 <checkAktifCalisma+0x128c>
 800622e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006232:	482c      	ldr	r0, [pc, #176]	; (80062e4 <checkAktifCalisma+0x1318>)
 8006234:	f003 fa04 	bl	8009640 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <checkAktifCalisma+0x128c>
 800623e:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <checkAktifCalisma+0x131c>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f083 0301 	eor.w	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 800624c:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <checkAktifCalisma+0x1324>)
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006252:	2001      	movs	r0, #1
 8006254:	f7fe fcb4 	bl	8004bc0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006258:	4b26      	ldr	r3, [pc, #152]	; (80062f4 <checkAktifCalisma+0x1328>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	f083 0301 	eor.w	r3, r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d04e      	beq.n	8006304 <checkAktifCalisma+0x1338>
 8006266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800626a:	481e      	ldr	r0, [pc, #120]	; (80062e4 <checkAktifCalisma+0x1318>)
 800626c:	f003 f9e8 	bl	8009640 <HAL_GPIO_ReadPin>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <checkAktifCalisma+0x12b2>
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <checkAktifCalisma+0x132c>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d042      	beq.n	8006304 <checkAktifCalisma+0x1338>
 800627e:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <checkAktifCalisma+0x1330>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d13e      	bne.n	8006304 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006286:	4b19      	ldr	r3, [pc, #100]	; (80062ec <checkAktifCalisma+0x1320>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800628c:	2002      	movs	r0, #2
 800628e:	f7fa fd29 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006292:	2002      	movs	r0, #2
 8006294:	f7fa fcce 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006298:	f001 fc0e 	bl	8007ab8 <convertAndSendData>
			emniyetCercevesihatasi=1;
 800629c:	4b18      	ldr	r3, [pc, #96]	; (8006300 <checkAktifCalisma+0x1334>)
 800629e:	2201      	movs	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e047      	b.n	8006334 <checkAktifCalisma+0x1368>
 80062a4:	20000277 	.word	0x20000277
 80062a8:	20000276 	.word	0x20000276
 80062ac:	20000275 	.word	0x20000275
 80062b0:	40010800 	.word	0x40010800
 80062b4:	2000026b 	.word	0x2000026b
 80062b8:	40011000 	.word	0x40011000
 80062bc:	20000232 	.word	0x20000232
 80062c0:	2000026e 	.word	0x2000026e
 80062c4:	2000026c 	.word	0x2000026c
 80062c8:	20000229 	.word	0x20000229
 80062cc:	2000022a 	.word	0x2000022a
 80062d0:	20000000 	.word	0x20000000
 80062d4:	20000001 	.word	0x20000001
 80062d8:	2000022b 	.word	0x2000022b
 80062dc:	20000158 	.word	0x20000158
 80062e0:	20000258 	.word	0x20000258
 80062e4:	40010c00 	.word	0x40010c00
 80062e8:	2000027a 	.word	0x2000027a
 80062ec:	20000281 	.word	0x20000281
 80062f0:	2000027c 	.word	0x2000027c
 80062f4:	20000283 	.word	0x20000283
 80062f8:	2000028d 	.word	0x2000028d
 80062fc:	20000230 	.word	0x20000230
 8006300:	2000027d 	.word	0x2000027d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006304:	4b9b      	ldr	r3, [pc, #620]	; (8006574 <checkAktifCalisma+0x15a8>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d013      	beq.n	8006334 <checkAktifCalisma+0x1368>
 800630c:	4b9a      	ldr	r3, [pc, #616]	; (8006578 <checkAktifCalisma+0x15ac>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00f      	beq.n	8006334 <checkAktifCalisma+0x1368>
 8006314:	4b99      	ldr	r3, [pc, #612]	; (800657c <checkAktifCalisma+0x15b0>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f083 0301 	eor.w	r3, r3, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006322:	4b94      	ldr	r3, [pc, #592]	; (8006574 <checkAktifCalisma+0x15a8>)
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006328:	4b95      	ldr	r3, [pc, #596]	; (8006580 <checkAktifCalisma+0x15b4>)
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800632e:	2002      	movs	r0, #2
 8006330:	f7fe fc46 	bl	8004bc0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006334:	4b93      	ldr	r3, [pc, #588]	; (8006584 <checkAktifCalisma+0x15b8>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11e      	bne.n	800637a <checkAktifCalisma+0x13ae>
 800633c:	4b92      	ldr	r3, [pc, #584]	; (8006588 <checkAktifCalisma+0x15bc>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d11a      	bne.n	800637a <checkAktifCalisma+0x13ae>
 8006344:	4b91      	ldr	r3, [pc, #580]	; (800658c <checkAktifCalisma+0x15c0>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <checkAktifCalisma+0x13ae>
 800634c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006350:	488f      	ldr	r0, [pc, #572]	; (8006590 <checkAktifCalisma+0x15c4>)
 8006352:	f003 f975 	bl	8009640 <HAL_GPIO_ReadPin>
 8006356:	4603      	mov	r3, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10e      	bne.n	800637a <checkAktifCalisma+0x13ae>
			hataVar=1;
 800635c:	4b8d      	ldr	r3, [pc, #564]	; (8006594 <checkAktifCalisma+0x15c8>)
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006362:	2003      	movs	r0, #3
 8006364:	f7fa fcbe 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006368:	2003      	movs	r0, #3
 800636a:	f7fa fc63 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 800636e:	f001 fba3 	bl	8007ab8 <convertAndSendData>
			basinchatasi=1;
 8006372:	4b89      	ldr	r3, [pc, #548]	; (8006598 <checkAktifCalisma+0x15cc>)
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e015      	b.n	80063a6 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800637a:	4b87      	ldr	r3, [pc, #540]	; (8006598 <checkAktifCalisma+0x15cc>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <checkAktifCalisma+0x13da>
 8006382:	4b80      	ldr	r3, [pc, #512]	; (8006584 <checkAktifCalisma+0x15b8>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d10d      	bne.n	80063a6 <checkAktifCalisma+0x13da>
 800638a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800638e:	4883      	ldr	r0, [pc, #524]	; (800659c <checkAktifCalisma+0x15d0>)
 8006390:	f003 f956 	bl	8009640 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800639a:	4b7f      	ldr	r3, [pc, #508]	; (8006598 <checkAktifCalisma+0x15cc>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80063a0:	2003      	movs	r0, #3
 80063a2:	f7fe fc0d 	bl	8004bc0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80063a6:	4b7e      	ldr	r3, [pc, #504]	; (80065a0 <checkAktifCalisma+0x15d4>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d103      	bne.n	80063b6 <checkAktifCalisma+0x13ea>
 80063ae:	4b7d      	ldr	r3, [pc, #500]	; (80065a4 <checkAktifCalisma+0x15d8>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01e      	beq.n	80063f4 <checkAktifCalisma+0x1428>
 80063b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063ba:	487b      	ldr	r0, [pc, #492]	; (80065a8 <checkAktifCalisma+0x15dc>)
 80063bc:	f003 f940 	bl	8009640 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d116      	bne.n	80063f4 <checkAktifCalisma+0x1428>
 80063c6:	4b79      	ldr	r3, [pc, #484]	; (80065ac <checkAktifCalisma+0x15e0>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d003      	beq.n	80063d6 <checkAktifCalisma+0x140a>
 80063ce:	4b77      	ldr	r3, [pc, #476]	; (80065ac <checkAktifCalisma+0x15e0>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d10e      	bne.n	80063f4 <checkAktifCalisma+0x1428>
			hataVar=1;
 80063d6:	4b6f      	ldr	r3, [pc, #444]	; (8006594 <checkAktifCalisma+0x15c8>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80063dc:	2004      	movs	r0, #4
 80063de:	f7fa fc81 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80063e2:	2004      	movs	r0, #4
 80063e4:	f7fa fc26 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80063e8:	f001 fb66 	bl	8007ab8 <convertAndSendData>
			katkapisivicihatasi=1;
 80063ec:	4b70      	ldr	r3, [pc, #448]	; (80065b0 <checkAktifCalisma+0x15e4>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e01f      	b.n	8006434 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80063f4:	4b6e      	ldr	r3, [pc, #440]	; (80065b0 <checkAktifCalisma+0x15e4>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01b      	beq.n	8006434 <checkAktifCalisma+0x1468>
 80063fc:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <checkAktifCalisma+0x15e8>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <checkAktifCalisma+0x1468>
 8006404:	4b66      	ldr	r3, [pc, #408]	; (80065a0 <checkAktifCalisma+0x15d4>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f083 0301 	eor.w	r3, r3, #1
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d010      	beq.n	8006434 <checkAktifCalisma+0x1468>
 8006412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006416:	4864      	ldr	r0, [pc, #400]	; (80065a8 <checkAktifCalisma+0x15dc>)
 8006418:	f003 f912 	bl	8009640 <HAL_GPIO_ReadPin>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d108      	bne.n	8006434 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006422:	4b63      	ldr	r3, [pc, #396]	; (80065b0 <checkAktifCalisma+0x15e4>)
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006428:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <checkAktifCalisma+0x15d8>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800642e:	2004      	movs	r0, #4
 8006430:	f7fe fbc6 	bl	8004bc0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006434:	4b5a      	ldr	r3, [pc, #360]	; (80065a0 <checkAktifCalisma+0x15d4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <checkAktifCalisma+0x1478>
 800643c:	4b5e      	ldr	r3, [pc, #376]	; (80065b8 <checkAktifCalisma+0x15ec>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01e      	beq.n	8006482 <checkAktifCalisma+0x14b6>
 8006444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006448:	4857      	ldr	r0, [pc, #348]	; (80065a8 <checkAktifCalisma+0x15dc>)
 800644a:	f003 f8f9 	bl	8009640 <HAL_GPIO_ReadPin>
 800644e:	4603      	mov	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	d116      	bne.n	8006482 <checkAktifCalisma+0x14b6>
 8006454:	4b55      	ldr	r3, [pc, #340]	; (80065ac <checkAktifCalisma+0x15e0>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d003      	beq.n	8006464 <checkAktifCalisma+0x1498>
 800645c:	4b53      	ldr	r3, [pc, #332]	; (80065ac <checkAktifCalisma+0x15e0>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b03      	cmp	r3, #3
 8006462:	d10e      	bne.n	8006482 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006464:	4b4b      	ldr	r3, [pc, #300]	; (8006594 <checkAktifCalisma+0x15c8>)
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800646a:	2005      	movs	r0, #5
 800646c:	f7fa fc3a 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006470:	2005      	movs	r0, #5
 8006472:	f7fa fbdf 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006476:	f001 fb1f 	bl	8007ab8 <convertAndSendData>
			tablakapisivicihatasi=1;
 800647a:	4b50      	ldr	r3, [pc, #320]	; (80065bc <checkAktifCalisma+0x15f0>)
 800647c:	2201      	movs	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e023      	b.n	80064ca <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006482:	4b4e      	ldr	r3, [pc, #312]	; (80065bc <checkAktifCalisma+0x15f0>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01f      	beq.n	80064ca <checkAktifCalisma+0x14fe>
 800648a:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <checkAktifCalisma+0x15e8>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01b      	beq.n	80064ca <checkAktifCalisma+0x14fe>
 8006492:	4b43      	ldr	r3, [pc, #268]	; (80065a0 <checkAktifCalisma+0x15d4>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f083 0301 	eor.w	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d014      	beq.n	80064ca <checkAktifCalisma+0x14fe>
 80064a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064a4:	4840      	ldr	r0, [pc, #256]	; (80065a8 <checkAktifCalisma+0x15dc>)
 80064a6:	f003 f8cb 	bl	8009640 <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10c      	bne.n	80064ca <checkAktifCalisma+0x14fe>
 80064b0:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <checkAktifCalisma+0x15e8>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80064b8:	4b40      	ldr	r3, [pc, #256]	; (80065bc <checkAktifCalisma+0x15f0>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80064be:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <checkAktifCalisma+0x15ec>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80064c4:	2005      	movs	r0, #5
 80064c6:	f7fe fb7b 	bl	8004bc0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80064ca:	4b30      	ldr	r3, [pc, #192]	; (800658c <checkAktifCalisma+0x15c0>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d107      	bne.n	80064e2 <checkAktifCalisma+0x1516>
 80064d2:	4b2a      	ldr	r3, [pc, #168]	; (800657c <checkAktifCalisma+0x15b0>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <checkAktifCalisma+0x1516>
 80064da:	4b39      	ldr	r3, [pc, #228]	; (80065c0 <checkAktifCalisma+0x15f4>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80064e2:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <checkAktifCalisma+0x15f8>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <checkAktifCalisma+0x15fc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	4a37      	ldr	r2, [pc, #220]	; (80065cc <checkAktifCalisma+0x1600>)
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d30d      	bcc.n	8006510 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80064f4:	4b27      	ldr	r3, [pc, #156]	; (8006594 <checkAktifCalisma+0x15c8>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80064fa:	2006      	movs	r0, #6
 80064fc:	f7fa fbf2 	bl	8000ce4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006500:	2006      	movs	r0, #6
 8006502:	f7fa fb97 	bl	8000c34 <hata2EEPROM>
			  	convertAndSendData();
 8006506:	f001 fad7 	bl	8007ab8 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <checkAktifCalisma+0x1604>)
 800650c:	2201      	movs	r2, #1
 800650e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006510:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <checkAktifCalisma+0x1604>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d013      	beq.n	8006540 <checkAktifCalisma+0x1574>
 8006518:	2108      	movs	r1, #8
 800651a:	4823      	ldr	r0, [pc, #140]	; (80065a8 <checkAktifCalisma+0x15dc>)
 800651c:	f003 f890 	bl	8009640 <HAL_GPIO_ReadPin>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <checkAktifCalisma+0x1574>
 8006526:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <checkAktifCalisma+0x15d4>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f083 0301 	eor.w	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006534:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <checkAktifCalisma+0x1604>)
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800653a:	2006      	movs	r0, #6
 800653c:	f7fe fb40 	bl	8004bc0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006540:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <checkAktifCalisma+0x1608>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <checkAktifCalisma+0x1594>
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <checkAktifCalisma+0x15b0>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d107      	bne.n	8006560 <checkAktifCalisma+0x1594>
 8006550:	4b21      	ldr	r3, [pc, #132]	; (80065d8 <checkAktifCalisma+0x160c>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <checkAktifCalisma+0x1594>
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <checkAktifCalisma+0x15f4>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d03f      	beq.n	80065e0 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006560:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <checkAktifCalisma+0x1610>)
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006566:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <checkAktifCalisma+0x15d8>)
 8006568:	2201      	movs	r2, #1
 800656a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <checkAktifCalisma+0x15ec>)
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e03c      	b.n	80065ee <checkAktifCalisma+0x1622>
 8006574:	2000027d 	.word	0x2000027d
 8006578:	20000283 	.word	0x20000283
 800657c:	20000264 	.word	0x20000264
 8006580:	2000028d 	.word	0x2000028d
 8006584:	2000022f 	.word	0x2000022f
 8006588:	20000233 	.word	0x20000233
 800658c:	20000280 	.word	0x20000280
 8006590:	40011000 	.word	0x40011000
 8006594:	20000281 	.word	0x20000281
 8006598:	2000028a 	.word	0x2000028a
 800659c:	40010c00 	.word	0x40010c00
 80065a0:	2000027a 	.word	0x2000027a
 80065a4:	2000028e 	.word	0x2000028e
 80065a8:	40010800 	.word	0x40010800
 80065ac:	20000234 	.word	0x20000234
 80065b0:	2000028b 	.word	0x2000028b
 80065b4:	2000026e 	.word	0x2000026e
 80065b8:	2000028f 	.word	0x2000028f
 80065bc:	2000028c 	.word	0x2000028c
 80065c0:	20000263 	.word	0x20000263
 80065c4:	20000208 	.word	0x20000208
 80065c8:	2000021c 	.word	0x2000021c
 80065cc:	20000244 	.word	0x20000244
 80065d0:	2000027b 	.word	0x2000027b
 80065d4:	20000261 	.word	0x20000261
 80065d8:	20000262 	.word	0x20000262
 80065dc:	20000282 	.word	0x20000282
		} else {
			makineCalisiyor=1;
 80065e0:	4b1e      	ldr	r3, [pc, #120]	; (800665c <checkAktifCalisma+0x1690>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <checkAktifCalisma+0x1694>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1e      	ldr	r2, [pc, #120]	; (8006664 <checkAktifCalisma+0x1698>)
 80065ec:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80065ee:	4b1e      	ldr	r3, [pc, #120]	; (8006668 <checkAktifCalisma+0x169c>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02f      	beq.n	8006656 <checkAktifCalisma+0x168a>
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <checkAktifCalisma+0x16a0>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f083 0301 	eor.w	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d028      	beq.n	8006656 <checkAktifCalisma+0x168a>
 8006604:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <checkAktifCalisma+0x16a4>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f083 0301 	eor.w	r3, r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d021      	beq.n	8006656 <checkAktifCalisma+0x168a>
 8006612:	4b18      	ldr	r3, [pc, #96]	; (8006674 <checkAktifCalisma+0x16a8>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01a      	beq.n	8006656 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006620:	4b15      	ldr	r3, [pc, #84]	; (8006678 <checkAktifCalisma+0x16ac>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f083 0301 	eor.w	r3, r3, #1
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d013      	beq.n	8006656 <checkAktifCalisma+0x168a>
 800662e:	4b13      	ldr	r3, [pc, #76]	; (800667c <checkAktifCalisma+0x16b0>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f083 0301 	eor.w	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00c      	beq.n	8006656 <checkAktifCalisma+0x168a>
 800663c:	4b10      	ldr	r3, [pc, #64]	; (8006680 <checkAktifCalisma+0x16b4>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f083 0301 	eor.w	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <checkAktifCalisma+0x168a>
			hataVar=0;
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <checkAktifCalisma+0x169c>)
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006650:	2007      	movs	r0, #7
 8006652:	f7fe fab5 	bl	8004bc0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000282 	.word	0x20000282
 8006660:	20000208 	.word	0x20000208
 8006664:	2000021c 	.word	0x2000021c
 8006668:	20000281 	.word	0x20000281
 800666c:	2000027c 	.word	0x2000027c
 8006670:	2000027d 	.word	0x2000027d
 8006674:	2000028a 	.word	0x2000028a
 8006678:	2000028b 	.word	0x2000028b
 800667c:	2000028c 	.word	0x2000028c
 8006680:	2000027b 	.word	0x2000027b

08006684 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006688:	4b8b      	ldr	r3, [pc, #556]	; (80068b8 <checkDemoModCalisma+0x234>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 8229 	bne.w	8006ae4 <checkDemoModCalisma+0x460>
 8006692:	4b8a      	ldr	r3, [pc, #552]	; (80068bc <checkDemoModCalisma+0x238>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8224 	beq.w	8006ae4 <checkDemoModCalisma+0x460>
 800669c:	4b88      	ldr	r3, [pc, #544]	; (80068c0 <checkDemoModCalisma+0x23c>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 821f 	bne.w	8006ae4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80066a6:	2102      	movs	r1, #2
 80066a8:	4886      	ldr	r0, [pc, #536]	; (80068c4 <checkDemoModCalisma+0x240>)
 80066aa:	f002 ffc9 	bl	8009640 <HAL_GPIO_ReadPin>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d11d      	bne.n	80066f0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80066b4:	4b84      	ldr	r3, [pc, #528]	; (80068c8 <checkDemoModCalisma+0x244>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f083 0301 	eor.w	r3, r3, #1
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80066c2:	4b82      	ldr	r3, [pc, #520]	; (80068cc <checkDemoModCalisma+0x248>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f083 0301 	eor.w	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00f      	beq.n	80066f0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80066d0:	4b7f      	ldr	r3, [pc, #508]	; (80068d0 <checkDemoModCalisma+0x24c>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80066de:	2201      	movs	r2, #1
 80066e0:	2104      	movs	r1, #4
 80066e2:	487c      	ldr	r0, [pc, #496]	; (80068d4 <checkDemoModCalisma+0x250>)
 80066e4:	f002 ffc3 	bl	800966e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80066e8:	4b7b      	ldr	r3, [pc, #492]	; (80068d8 <checkDemoModCalisma+0x254>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e00e      	b.n	800670e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066f0:	2102      	movs	r1, #2
 80066f2:	4874      	ldr	r0, [pc, #464]	; (80068c4 <checkDemoModCalisma+0x240>)
 80066f4:	f002 ffa4 	bl	8009640 <HAL_GPIO_ReadPin>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066fe:	2200      	movs	r2, #0
 8006700:	2104      	movs	r1, #4
 8006702:	4874      	ldr	r0, [pc, #464]	; (80068d4 <checkDemoModCalisma+0x250>)
 8006704:	f002 ffb3 	bl	800966e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006708:	4b73      	ldr	r3, [pc, #460]	; (80068d8 <checkDemoModCalisma+0x254>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800670e:	4b72      	ldr	r3, [pc, #456]	; (80068d8 <checkDemoModCalisma+0x254>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <checkDemoModCalisma+0xaa>
 8006716:	4b6d      	ldr	r3, [pc, #436]	; (80068cc <checkDemoModCalisma+0x248>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <checkDemoModCalisma+0xaa>
 800671e:	4b6c      	ldr	r3, [pc, #432]	; (80068d0 <checkDemoModCalisma+0x24c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d103      	bne.n	800672e <checkDemoModCalisma+0xaa>
 8006726:	4b68      	ldr	r3, [pc, #416]	; (80068c8 <checkDemoModCalisma+0x244>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800672e:	2201      	movs	r2, #1
 8006730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006734:	4867      	ldr	r0, [pc, #412]	; (80068d4 <checkDemoModCalisma+0x250>)
 8006736:	f002 ff9a 	bl	800966e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800673a:	2201      	movs	r2, #1
 800673c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006740:	4864      	ldr	r0, [pc, #400]	; (80068d4 <checkDemoModCalisma+0x250>)
 8006742:	f002 ff94 	bl	800966e <HAL_GPIO_WritePin>
 8006746:	e00b      	b.n	8006760 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800674e:	4861      	ldr	r0, [pc, #388]	; (80068d4 <checkDemoModCalisma+0x250>)
 8006750:	f002 ff8d 	bl	800966e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006754:	2200      	movs	r2, #0
 8006756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800675a:	485e      	ldr	r0, [pc, #376]	; (80068d4 <checkDemoModCalisma+0x250>)
 800675c:	f002 ff87 	bl	800966e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006760:	2102      	movs	r1, #2
 8006762:	4858      	ldr	r0, [pc, #352]	; (80068c4 <checkDemoModCalisma+0x240>)
 8006764:	f002 ff6c 	bl	8009640 <HAL_GPIO_ReadPin>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d10d      	bne.n	800678a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800676e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006772:	4854      	ldr	r0, [pc, #336]	; (80068c4 <checkDemoModCalisma+0x240>)
 8006774:	f002 ff64 	bl	8009640 <HAL_GPIO_ReadPin>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d105      	bne.n	800678a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800677e:	4b56      	ldr	r3, [pc, #344]	; (80068d8 <checkDemoModCalisma+0x254>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f083 0301 	eor.w	r3, r3, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800678a:	2102      	movs	r1, #2
 800678c:	484d      	ldr	r0, [pc, #308]	; (80068c4 <checkDemoModCalisma+0x240>)
 800678e:	f002 ff57 	bl	8009640 <HAL_GPIO_ReadPin>
 8006792:	4603      	mov	r3, r0
 8006794:	2b01      	cmp	r3, #1
 8006796:	d125      	bne.n	80067e4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800679c:	4849      	ldr	r0, [pc, #292]	; (80068c4 <checkDemoModCalisma+0x240>)
 800679e:	f002 ff4f 	bl	8009640 <HAL_GPIO_ReadPin>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11d      	bne.n	80067e4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80067a8:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <checkDemoModCalisma+0x254>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f083 0301 	eor.w	r3, r3, #1
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80067b6:	4b44      	ldr	r3, [pc, #272]	; (80068c8 <checkDemoModCalisma+0x244>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f083 0301 	eor.w	r3, r3, #1
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00f      	beq.n	80067e4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80067c4:	4b42      	ldr	r3, [pc, #264]	; (80068d0 <checkDemoModCalisma+0x24c>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f083 0301 	eor.w	r3, r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80067d2:	2201      	movs	r2, #1
 80067d4:	2120      	movs	r1, #32
 80067d6:	483b      	ldr	r0, [pc, #236]	; (80068c4 <checkDemoModCalisma+0x240>)
 80067d8:	f002 ff49 	bl	800966e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80067dc:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <checkDemoModCalisma+0x248>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e007      	b.n	80067f4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80067e4:	2200      	movs	r2, #0
 80067e6:	2120      	movs	r1, #32
 80067e8:	4836      	ldr	r0, [pc, #216]	; (80068c4 <checkDemoModCalisma+0x240>)
 80067ea:	f002 ff40 	bl	800966e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80067ee:	4b37      	ldr	r3, [pc, #220]	; (80068cc <checkDemoModCalisma+0x248>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067f4:	2102      	movs	r1, #2
 80067f6:	4833      	ldr	r0, [pc, #204]	; (80068c4 <checkDemoModCalisma+0x240>)
 80067f8:	f002 ff22 	bl	8009640 <HAL_GPIO_ReadPin>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d125      	bne.n	800684e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006806:	482f      	ldr	r0, [pc, #188]	; (80068c4 <checkDemoModCalisma+0x240>)
 8006808:	f002 ff1a 	bl	8009640 <HAL_GPIO_ReadPin>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11d      	bne.n	800684e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006812:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <checkDemoModCalisma+0x254>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	f083 0301 	eor.w	r3, r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d016      	beq.n	800684e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006820:	4b2a      	ldr	r3, [pc, #168]	; (80068cc <checkDemoModCalisma+0x248>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f083 0301 	eor.w	r3, r3, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00f      	beq.n	800684e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800682e:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <checkDemoModCalisma+0x244>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	f083 0301 	eor.w	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800683c:	2201      	movs	r2, #1
 800683e:	2110      	movs	r1, #16
 8006840:	4820      	ldr	r0, [pc, #128]	; (80068c4 <checkDemoModCalisma+0x240>)
 8006842:	f002 ff14 	bl	800966e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006846:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <checkDemoModCalisma+0x24c>)
 8006848:	2201      	movs	r2, #1
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e007      	b.n	800685e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800684e:	2200      	movs	r2, #0
 8006850:	2110      	movs	r1, #16
 8006852:	481c      	ldr	r0, [pc, #112]	; (80068c4 <checkDemoModCalisma+0x240>)
 8006854:	f002 ff0b 	bl	800966e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006858:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <checkDemoModCalisma+0x24c>)
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800685e:	2104      	movs	r1, #4
 8006860:	4818      	ldr	r0, [pc, #96]	; (80068c4 <checkDemoModCalisma+0x240>)
 8006862:	f002 feed 	bl	8009640 <HAL_GPIO_ReadPin>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d139      	bne.n	80068e0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800686c:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <checkDemoModCalisma+0x254>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f083 0301 	eor.w	r3, r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d032      	beq.n	80068e0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800687a:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <checkDemoModCalisma+0x24c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f083 0301 	eor.w	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d02b      	beq.n	80068e0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006888:	4b10      	ldr	r3, [pc, #64]	; (80068cc <checkDemoModCalisma+0x248>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f083 0301 	eor.w	r3, r3, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d024      	beq.n	80068e0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006896:	2201      	movs	r2, #1
 8006898:	2102      	movs	r1, #2
 800689a:	480e      	ldr	r0, [pc, #56]	; (80068d4 <checkDemoModCalisma+0x250>)
 800689c:	f002 fee7 	bl	800966e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80068a0:	2201      	movs	r2, #1
 80068a2:	2101      	movs	r1, #1
 80068a4:	480b      	ldr	r0, [pc, #44]	; (80068d4 <checkDemoModCalisma+0x250>)
 80068a6:	f002 fee2 	bl	800966e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <checkDemoModCalisma+0x244>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <checkDemoModCalisma+0x258>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e027      	b.n	8006908 <checkDemoModCalisma+0x284>
 80068b8:	2000024a 	.word	0x2000024a
 80068bc:	2000027e 	.word	0x2000027e
 80068c0:	20000249 	.word	0x20000249
 80068c4:	40011000 	.word	0x40011000
 80068c8:	20000285 	.word	0x20000285
 80068cc:	20000286 	.word	0x20000286
 80068d0:	20000287 	.word	0x20000287
 80068d4:	40010c00 	.word	0x40010c00
 80068d8:	20000284 	.word	0x20000284
 80068dc:	2000026a 	.word	0x2000026a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80068e0:	2104      	movs	r1, #4
 80068e2:	48a0      	ldr	r0, [pc, #640]	; (8006b64 <checkDemoModCalisma+0x4e0>)
 80068e4:	f002 feac 	bl	8009640 <HAL_GPIO_ReadPin>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10c      	bne.n	8006908 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80068ee:	2200      	movs	r2, #0
 80068f0:	2102      	movs	r1, #2
 80068f2:	489d      	ldr	r0, [pc, #628]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 80068f4:	f002 febb 	bl	800966e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80068f8:	2200      	movs	r2, #0
 80068fa:	2101      	movs	r1, #1
 80068fc:	489a      	ldr	r0, [pc, #616]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 80068fe:	f002 feb6 	bl	800966e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006902:	4b9a      	ldr	r3, [pc, #616]	; (8006b6c <checkDemoModCalisma+0x4e8>)
 8006904:	2200      	movs	r2, #0
 8006906:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006908:	2104      	movs	r1, #4
 800690a:	4896      	ldr	r0, [pc, #600]	; (8006b64 <checkDemoModCalisma+0x4e0>)
 800690c:	f002 fe98 	bl	8009640 <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d10d      	bne.n	8006932 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006916:	2201      	movs	r2, #1
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	4895      	ldr	r0, [pc, #596]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 800691c:	f002 fea7 	bl	800966e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006920:	2201      	movs	r2, #1
 8006922:	2120      	movs	r1, #32
 8006924:	4892      	ldr	r0, [pc, #584]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006926:	f002 fea2 	bl	800966e <HAL_GPIO_WritePin>
			timer3 = millis;
 800692a:	4b92      	ldr	r3, [pc, #584]	; (8006b74 <checkDemoModCalisma+0x4f0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a92      	ldr	r2, [pc, #584]	; (8006b78 <checkDemoModCalisma+0x4f4>)
 8006930:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006932:	4b90      	ldr	r3, [pc, #576]	; (8006b74 <checkDemoModCalisma+0x4f0>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b90      	ldr	r3, [pc, #576]	; (8006b78 <checkDemoModCalisma+0x4f4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b04      	cmp	r3, #4
 800693e:	d909      	bls.n	8006954 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	488a      	ldr	r0, [pc, #552]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006946:	f002 fe92 	bl	800966e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	2120      	movs	r1, #32
 800694e:	4888      	ldr	r0, [pc, #544]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006950:	f002 fe8d 	bl	800966e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006954:	2102      	movs	r1, #2
 8006956:	4883      	ldr	r0, [pc, #524]	; (8006b64 <checkDemoModCalisma+0x4e0>)
 8006958:	f002 fe72 	bl	8009640 <HAL_GPIO_ReadPin>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d108      	bne.n	8006974 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006962:	2201      	movs	r2, #1
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	4882      	ldr	r0, [pc, #520]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006968:	f002 fe81 	bl	800966e <HAL_GPIO_WritePin>
			timer3 = millis;
 800696c:	4b81      	ldr	r3, [pc, #516]	; (8006b74 <checkDemoModCalisma+0x4f0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a81      	ldr	r2, [pc, #516]	; (8006b78 <checkDemoModCalisma+0x4f4>)
 8006972:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006974:	4b7f      	ldr	r3, [pc, #508]	; (8006b74 <checkDemoModCalisma+0x4f0>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b7f      	ldr	r3, [pc, #508]	; (8006b78 <checkDemoModCalisma+0x4f4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b04      	cmp	r3, #4
 8006980:	d904      	bls.n	800698c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006982:	2200      	movs	r2, #0
 8006984:	2140      	movs	r1, #64	; 0x40
 8006986:	487a      	ldr	r0, [pc, #488]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006988:	f002 fe71 	bl	800966e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800698c:	4b7b      	ldr	r3, [pc, #492]	; (8006b7c <checkDemoModCalisma+0x4f8>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d058      	beq.n	8006a46 <checkDemoModCalisma+0x3c2>
 8006994:	4b7a      	ldr	r3, [pc, #488]	; (8006b80 <checkDemoModCalisma+0x4fc>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d054      	beq.n	8006a46 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800699c:	4b79      	ldr	r3, [pc, #484]	; (8006b84 <checkDemoModCalisma+0x500>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	4b77      	ldr	r3, [pc, #476]	; (8006b84 <checkDemoModCalisma+0x500>)
 80069a6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80069a8:	4b76      	ldr	r3, [pc, #472]	; (8006b84 <checkDemoModCalisma+0x500>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b09      	cmp	r3, #9
 80069ae:	d908      	bls.n	80069c2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80069b0:	4b74      	ldr	r3, [pc, #464]	; (8006b84 <checkDemoModCalisma+0x500>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80069b6:	4b74      	ldr	r3, [pc, #464]	; (8006b88 <checkDemoModCalisma+0x504>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	4b72      	ldr	r3, [pc, #456]	; (8006b88 <checkDemoModCalisma+0x504>)
 80069c0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80069c2:	4b71      	ldr	r3, [pc, #452]	; (8006b88 <checkDemoModCalisma+0x504>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	d908      	bls.n	80069dc <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80069ca:	4b6f      	ldr	r3, [pc, #444]	; (8006b88 <checkDemoModCalisma+0x504>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80069d0:	4b6e      	ldr	r3, [pc, #440]	; (8006b8c <checkDemoModCalisma+0x508>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	4b6c      	ldr	r3, [pc, #432]	; (8006b8c <checkDemoModCalisma+0x508>)
 80069da:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80069dc:	4b6b      	ldr	r3, [pc, #428]	; (8006b8c <checkDemoModCalisma+0x508>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b09      	cmp	r3, #9
 80069e2:	d908      	bls.n	80069f6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80069e4:	4b69      	ldr	r3, [pc, #420]	; (8006b8c <checkDemoModCalisma+0x508>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80069ea:	4b69      	ldr	r3, [pc, #420]	; (8006b90 <checkDemoModCalisma+0x50c>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	4b67      	ldr	r3, [pc, #412]	; (8006b90 <checkDemoModCalisma+0x50c>)
 80069f4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80069f6:	4b66      	ldr	r3, [pc, #408]	; (8006b90 <checkDemoModCalisma+0x50c>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d908      	bls.n	8006a10 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80069fe:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <checkDemoModCalisma+0x50c>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006a04:	4b63      	ldr	r3, [pc, #396]	; (8006b94 <checkDemoModCalisma+0x510>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <checkDemoModCalisma+0x510>)
 8006a0e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006a10:	4b60      	ldr	r3, [pc, #384]	; (8006b94 <checkDemoModCalisma+0x510>)
 8006a12:	781a      	ldrb	r2, [r3, #0]
 8006a14:	4b60      	ldr	r3, [pc, #384]	; (8006b98 <checkDemoModCalisma+0x514>)
 8006a16:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006a1a:	4b5d      	ldr	r3, [pc, #372]	; (8006b90 <checkDemoModCalisma+0x50c>)
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	4b5e      	ldr	r3, [pc, #376]	; (8006b98 <checkDemoModCalisma+0x514>)
 8006a20:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006a22:	4b5a      	ldr	r3, [pc, #360]	; (8006b8c <checkDemoModCalisma+0x508>)
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	4b5c      	ldr	r3, [pc, #368]	; (8006b98 <checkDemoModCalisma+0x514>)
 8006a28:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006a2a:	4b57      	ldr	r3, [pc, #348]	; (8006b88 <checkDemoModCalisma+0x504>)
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	4b5a      	ldr	r3, [pc, #360]	; (8006b98 <checkDemoModCalisma+0x514>)
 8006a30:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006a32:	4b54      	ldr	r3, [pc, #336]	; (8006b84 <checkDemoModCalisma+0x500>)
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	4b58      	ldr	r3, [pc, #352]	; (8006b98 <checkDemoModCalisma+0x514>)
 8006a38:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006a3a:	4b58      	ldr	r3, [pc, #352]	; (8006b9c <checkDemoModCalisma+0x518>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006a40:	4b4f      	ldr	r3, [pc, #316]	; (8006b80 <checkDemoModCalisma+0x4fc>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006a46:	4b56      	ldr	r3, [pc, #344]	; (8006ba0 <checkDemoModCalisma+0x51c>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 8087 	bne.w	8006b5e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006a50:	4a54      	ldr	r2, [pc, #336]	; (8006ba4 <checkDemoModCalisma+0x520>)
 8006a52:	2101      	movs	r1, #1
 8006a54:	2002      	movs	r0, #2
 8006a56:	f001 facd 	bl	8007ff4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006a5a:	4a53      	ldr	r2, [pc, #332]	; (8006ba8 <checkDemoModCalisma+0x524>)
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	2001      	movs	r0, #1
 8006a60:	f001 fac8 	bl	8007ff4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006a64:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <checkDemoModCalisma+0x510>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	220a      	movs	r2, #10
 8006a6a:	4950      	ldr	r1, [pc, #320]	; (8006bac <checkDemoModCalisma+0x528>)
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f005 fe6f 	bl	800c750 <itoa>
			lcd_print(2,12,snum);
 8006a72:	4a4e      	ldr	r2, [pc, #312]	; (8006bac <checkDemoModCalisma+0x528>)
 8006a74:	210c      	movs	r1, #12
 8006a76:	2002      	movs	r0, #2
 8006a78:	f001 fabc 	bl	8007ff4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006a7c:	4b44      	ldr	r3, [pc, #272]	; (8006b90 <checkDemoModCalisma+0x50c>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	220a      	movs	r2, #10
 8006a82:	494a      	ldr	r1, [pc, #296]	; (8006bac <checkDemoModCalisma+0x528>)
 8006a84:	4618      	mov	r0, r3
 8006a86:	f005 fe63 	bl	800c750 <itoa>
			lcd_print(2,13,snum);
 8006a8a:	4a48      	ldr	r2, [pc, #288]	; (8006bac <checkDemoModCalisma+0x528>)
 8006a8c:	210d      	movs	r1, #13
 8006a8e:	2002      	movs	r0, #2
 8006a90:	f001 fab0 	bl	8007ff4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006a94:	4b3d      	ldr	r3, [pc, #244]	; (8006b8c <checkDemoModCalisma+0x508>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	220a      	movs	r2, #10
 8006a9a:	4944      	ldr	r1, [pc, #272]	; (8006bac <checkDemoModCalisma+0x528>)
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f005 fe57 	bl	800c750 <itoa>
			lcd_print(2,14,snum);
 8006aa2:	4a42      	ldr	r2, [pc, #264]	; (8006bac <checkDemoModCalisma+0x528>)
 8006aa4:	210e      	movs	r1, #14
 8006aa6:	2002      	movs	r0, #2
 8006aa8:	f001 faa4 	bl	8007ff4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006aac:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <checkDemoModCalisma+0x504>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	493e      	ldr	r1, [pc, #248]	; (8006bac <checkDemoModCalisma+0x528>)
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f005 fe4b 	bl	800c750 <itoa>
			lcd_print(2,15,snum);
 8006aba:	4a3c      	ldr	r2, [pc, #240]	; (8006bac <checkDemoModCalisma+0x528>)
 8006abc:	210f      	movs	r1, #15
 8006abe:	2002      	movs	r0, #2
 8006ac0:	f001 fa98 	bl	8007ff4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006ac4:	4b2f      	ldr	r3, [pc, #188]	; (8006b84 <checkDemoModCalisma+0x500>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	220a      	movs	r2, #10
 8006aca:	4938      	ldr	r1, [pc, #224]	; (8006bac <checkDemoModCalisma+0x528>)
 8006acc:	4618      	mov	r0, r3
 8006ace:	f005 fe3f 	bl	800c750 <itoa>
			lcd_print(2,16,snum);
 8006ad2:	4a36      	ldr	r2, [pc, #216]	; (8006bac <checkDemoModCalisma+0x528>)
 8006ad4:	2110      	movs	r1, #16
 8006ad6:	2002      	movs	r0, #2
 8006ad8:	f001 fa8c 	bl	8007ff4 <lcd_print>
			mesajYazildi=1;
 8006adc:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <checkDemoModCalisma+0x52c>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006ae2:	e03c      	b.n	8006b5e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006ae4:	4b33      	ldr	r3, [pc, #204]	; (8006bb4 <checkDemoModCalisma+0x530>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d003      	beq.n	8006af4 <checkDemoModCalisma+0x470>
 8006aec:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <checkDemoModCalisma+0x51c>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d134      	bne.n	8006b5e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006af4:	2200      	movs	r2, #0
 8006af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006afa:	481b      	ldr	r0, [pc, #108]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 8006afc:	f002 fdb7 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b06:	4818      	ldr	r0, [pc, #96]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 8006b08:	f002 fdb1 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2104      	movs	r1, #4
 8006b10:	4815      	ldr	r0, [pc, #84]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 8006b12:	f002 fdac 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006b16:	2200      	movs	r2, #0
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4813      	ldr	r0, [pc, #76]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 8006b1c:	f002 fda7 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006b20:	2200      	movs	r2, #0
 8006b22:	2101      	movs	r1, #1
 8006b24:	4810      	ldr	r0, [pc, #64]	; (8006b68 <checkDemoModCalisma+0x4e4>)
 8006b26:	f002 fda2 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2120      	movs	r1, #32
 8006b2e:	480d      	ldr	r0, [pc, #52]	; (8006b64 <checkDemoModCalisma+0x4e0>)
 8006b30:	f002 fd9d 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006b34:	2200      	movs	r2, #0
 8006b36:	2110      	movs	r1, #16
 8006b38:	480a      	ldr	r0, [pc, #40]	; (8006b64 <checkDemoModCalisma+0x4e0>)
 8006b3a:	f002 fd98 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2180      	movs	r1, #128	; 0x80
 8006b42:	480b      	ldr	r0, [pc, #44]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006b44:	f002 fd93 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2140      	movs	r1, #64	; 0x40
 8006b4c:	4808      	ldr	r0, [pc, #32]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006b4e:	f002 fd8e 	bl	800966e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006b52:	2200      	movs	r2, #0
 8006b54:	2120      	movs	r1, #32
 8006b56:	4806      	ldr	r0, [pc, #24]	; (8006b70 <checkDemoModCalisma+0x4ec>)
 8006b58:	f002 fd89 	bl	800966e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006b5c:	e7ff      	b.n	8006b5e <checkDemoModCalisma+0x4da>
 8006b5e:	bf00      	nop
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40011000 	.word	0x40011000
 8006b68:	40010c00 	.word	0x40010c00
 8006b6c:	20000285 	.word	0x20000285
 8006b70:	40010800 	.word	0x40010800
 8006b74:	20000208 	.word	0x20000208
 8006b78:	20000218 	.word	0x20000218
 8006b7c:	20000284 	.word	0x20000284
 8006b80:	2000026a 	.word	0x2000026a
 8006b84:	20000229 	.word	0x20000229
 8006b88:	2000022a 	.word	0x2000022a
 8006b8c:	20000000 	.word	0x20000000
 8006b90:	20000001 	.word	0x20000001
 8006b94:	2000022b 	.word	0x2000022b
 8006b98:	20000158 	.word	0x20000158
 8006b9c:	20000258 	.word	0x20000258
 8006ba0:	20000249 	.word	0x20000249
 8006ba4:	0800df68 	.word	0x0800df68
 8006ba8:	0800df74 	.word	0x0800df74
 8006bac:	200001c8 	.word	0x200001c8
 8006bb0:	20000260 	.word	0x20000260
 8006bb4:	2000024a 	.word	0x2000024a

08006bb8 <mainLoop>:

void mainLoop() {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006bbe:	f7fe f923 	bl	8004e08 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	48a9      	ldr	r0, [pc, #676]	; (8006e6c <mainLoop+0x2b4>)
 8006bc6:	f002 fd3b 	bl	8009640 <HAL_GPIO_ReadPin>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d136      	bne.n	8006c3e <mainLoop+0x86>
 8006bd0:	2108      	movs	r1, #8
 8006bd2:	48a7      	ldr	r0, [pc, #668]	; (8006e70 <mainLoop+0x2b8>)
 8006bd4:	f002 fd34 	bl	8009640 <HAL_GPIO_ReadPin>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d12f      	bne.n	8006c3e <mainLoop+0x86>
 8006bde:	2102      	movs	r1, #2
 8006be0:	48a2      	ldr	r0, [pc, #648]	; (8006e6c <mainLoop+0x2b4>)
 8006be2:	f002 fd2d 	bl	8009640 <HAL_GPIO_ReadPin>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d128      	bne.n	8006c3e <mainLoop+0x86>
 8006bec:	2104      	movs	r1, #4
 8006bee:	489f      	ldr	r0, [pc, #636]	; (8006e6c <mainLoop+0x2b4>)
 8006bf0:	f002 fd26 	bl	8009640 <HAL_GPIO_ReadPin>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d121      	bne.n	8006c3e <mainLoop+0x86>
 8006bfa:	2108      	movs	r1, #8
 8006bfc:	489b      	ldr	r0, [pc, #620]	; (8006e6c <mainLoop+0x2b4>)
 8006bfe:	f002 fd1f 	bl	8009640 <HAL_GPIO_ReadPin>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11a      	bne.n	8006c3e <mainLoop+0x86>
 8006c08:	2180      	movs	r1, #128	; 0x80
 8006c0a:	4899      	ldr	r0, [pc, #612]	; (8006e70 <mainLoop+0x2b8>)
 8006c0c:	f002 fd18 	bl	8009640 <HAL_GPIO_ReadPin>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d113      	bne.n	8006c3e <mainLoop+0x86>
 8006c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c1a:	4895      	ldr	r0, [pc, #596]	; (8006e70 <mainLoop+0x2b8>)
 8006c1c:	f002 fd10 	bl	8009640 <HAL_GPIO_ReadPin>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10b      	bne.n	8006c3e <mainLoop+0x86>
 8006c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c2a:	4891      	ldr	r0, [pc, #580]	; (8006e70 <mainLoop+0x2b8>)
 8006c2c:	f002 fd08 	bl	8009640 <HAL_GPIO_ReadPin>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d103      	bne.n	8006c3e <mainLoop+0x86>
			butonKontrol=0;
 8006c36:	4b8f      	ldr	r3, [pc, #572]	; (8006e74 <mainLoop+0x2bc>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e003      	b.n	8006c46 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006c3e:	4b8e      	ldr	r3, [pc, #568]	; (8006e78 <mainLoop+0x2c0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a8e      	ldr	r2, [pc, #568]	; (8006e7c <mainLoop+0x2c4>)
 8006c44:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006c46:	f7fe f8ab 	bl	8004da0 <buttonCheck>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d003      	beq.n	8006c58 <mainLoop+0xa0>
			backLightTimer = millis;
 8006c50:	4b89      	ldr	r3, [pc, #548]	; (8006e78 <mainLoop+0x2c0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a89      	ldr	r2, [pc, #548]	; (8006e7c <mainLoop+0x2c4>)
 8006c56:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006c58:	4b89      	ldr	r3, [pc, #548]	; (8006e80 <mainLoop+0x2c8>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d03a      	beq.n	8006cd6 <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c60:	bf00      	nop
 8006c62:	4888      	ldr	r0, [pc, #544]	; (8006e84 <mainLoop+0x2cc>)
 8006c64:	f003 fb15 	bl	800a292 <HAL_I2C_GetError>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d0f9      	beq.n	8006c62 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006c6e:	bf00      	nop
 8006c70:	4884      	ldr	r0, [pc, #528]	; (8006e84 <mainLoop+0x2cc>)
 8006c72:	f003 fb01 	bl	800a278 <HAL_I2C_GetState>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d1f9      	bne.n	8006c70 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006c7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c80:	9302      	str	r3, [sp, #8]
 8006c82:	236e      	movs	r3, #110	; 0x6e
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	4b80      	ldr	r3, [pc, #512]	; (8006e88 <mainLoop+0x2d0>)
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	236e      	movs	r3, #110	; 0x6e
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	21a0      	movs	r1, #160	; 0xa0
 8006c90:	487c      	ldr	r0, [pc, #496]	; (8006e84 <mainLoop+0x2cc>)
 8006c92:	f002 ff8f 	bl	8009bb4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c9a:	f001 ff01 	bl	8008aa0 <HAL_Delay>

		  hafizaYaz=0;
 8006c9e:	4b78      	ldr	r3, [pc, #480]	; (8006e80 <mainLoop+0x2c8>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006ca4:	4b79      	ldr	r3, [pc, #484]	; (8006e8c <mainLoop+0x2d4>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d105      	bne.n	8006cb8 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8006cac:	4a78      	ldr	r2, [pc, #480]	; (8006e90 <mainLoop+0x2d8>)
 8006cae:	2101      	movs	r1, #1
 8006cb0:	2002      	movs	r0, #2
 8006cb2:	f001 f99f 	bl	8007ff4 <lcd_print>
 8006cb6:	e008      	b.n	8006cca <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006cb8:	4b74      	ldr	r3, [pc, #464]	; (8006e8c <mainLoop+0x2d4>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d104      	bne.n	8006cca <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006cc0:	4a74      	ldr	r2, [pc, #464]	; (8006e94 <mainLoop+0x2dc>)
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	2002      	movs	r0, #2
 8006cc6:	f001 f995 	bl	8007ff4 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cce:	f001 fee7 	bl	8008aa0 <HAL_Delay>
		  lcd_clear();
 8006cd2:	f001 f9bb 	bl	800804c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006cd6:	4b70      	ldr	r3, [pc, #448]	; (8006e98 <mainLoop+0x2e0>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f083 0301 	eor.w	r3, r3, #1
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d06d      	beq.n	8006dc0 <mainLoop+0x208>
 8006ce4:	4867      	ldr	r0, [pc, #412]	; (8006e84 <mainLoop+0x2cc>)
 8006ce6:	f003 fac7 	bl	800a278 <HAL_I2C_GetState>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d167      	bne.n	8006dc0 <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <mainLoop+0x2e4>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f083 0301 	eor.w	r3, r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d044      	beq.n	8006d88 <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006cfe:	4a68      	ldr	r2, [pc, #416]	; (8006ea0 <mainLoop+0x2e8>)
 8006d00:	2101      	movs	r1, #1
 8006d02:	2001      	movs	r0, #1
 8006d04:	f001 f976 	bl	8007ff4 <lcd_print>
			  if(dilSecim==0) {
 8006d08:	4b60      	ldr	r3, [pc, #384]	; (8006e8c <mainLoop+0x2d4>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d105      	bne.n	8006d1c <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006d10:	4a64      	ldr	r2, [pc, #400]	; (8006ea4 <mainLoop+0x2ec>)
 8006d12:	2101      	movs	r1, #1
 8006d14:	2002      	movs	r0, #2
 8006d16:	f001 f96d 	bl	8007ff4 <lcd_print>
 8006d1a:	e008      	b.n	8006d2e <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006d1c:	4b5b      	ldr	r3, [pc, #364]	; (8006e8c <mainLoop+0x2d4>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d104      	bne.n	8006d2e <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006d24:	4a60      	ldr	r2, [pc, #384]	; (8006ea8 <mainLoop+0x2f0>)
 8006d26:	2101      	movs	r1, #1
 8006d28:	2002      	movs	r0, #2
 8006d2a:	f001 f963 	bl	8007ff4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d32:	f001 feb5 	bl	8008aa0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006d36:	bf00      	nop
 8006d38:	4852      	ldr	r0, [pc, #328]	; (8006e84 <mainLoop+0x2cc>)
 8006d3a:	f003 faaa 	bl	800a292 <HAL_I2C_GetError>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d0f9      	beq.n	8006d38 <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006d44:	e003      	b.n	8006d4e <mainLoop+0x196>
				  HAL_Delay(1000);
 8006d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d4a:	f001 fea9 	bl	8008aa0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006d4e:	484d      	ldr	r0, [pc, #308]	; (8006e84 <mainLoop+0x2cc>)
 8006d50:	f003 fa92 	bl	800a278 <HAL_I2C_GetState>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d1f5      	bne.n	8006d46 <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006d5a:	4b4c      	ldr	r3, [pc, #304]	; (8006e8c <mainLoop+0x2d4>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d105      	bne.n	8006d6e <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006d62:	4a52      	ldr	r2, [pc, #328]	; (8006eac <mainLoop+0x2f4>)
 8006d64:	2101      	movs	r1, #1
 8006d66:	2002      	movs	r0, #2
 8006d68:	f001 f944 	bl	8007ff4 <lcd_print>
 8006d6c:	e008      	b.n	8006d80 <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006d6e:	4b47      	ldr	r3, [pc, #284]	; (8006e8c <mainLoop+0x2d4>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d104      	bne.n	8006d80 <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006d76:	4a4e      	ldr	r2, [pc, #312]	; (8006eb0 <mainLoop+0x2f8>)
 8006d78:	2101      	movs	r1, #1
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	f001 f93a 	bl	8007ff4 <lcd_print>
			  }

			  ilkOkuma=1;
 8006d80:	4b46      	ldr	r3, [pc, #280]	; (8006e9c <mainLoop+0x2e4>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	e014      	b.n	8006db2 <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006d88:	4b40      	ldr	r3, [pc, #256]	; (8006e8c <mainLoop+0x2d4>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006d90:	4a48      	ldr	r2, [pc, #288]	; (8006eb4 <mainLoop+0x2fc>)
 8006d92:	2101      	movs	r1, #1
 8006d94:	2002      	movs	r0, #2
 8006d96:	f001 f92d 	bl	8007ff4 <lcd_print>
 8006d9a:	e008      	b.n	8006dae <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006d9c:	4b3b      	ldr	r3, [pc, #236]	; (8006e8c <mainLoop+0x2d4>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d104      	bne.n	8006dae <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006da4:	4a44      	ldr	r2, [pc, #272]	; (8006eb8 <mainLoop+0x300>)
 8006da6:	2101      	movs	r1, #1
 8006da8:	2002      	movs	r0, #2
 8006daa:	f001 f923 	bl	8007ff4 <lcd_print>
			  }
			  lcd_clear();
 8006dae:	f001 f94d 	bl	800804c <lcd_clear>
		  }

		  lcd_clear();
 8006db2:	f001 f94b 	bl	800804c <lcd_clear>

		  eepromKontrol();
 8006db6:	f7f9 fa3d 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006dba:	4b37      	ldr	r3, [pc, #220]	; (8006e98 <mainLoop+0x2e0>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006dc0:	4b3e      	ldr	r3, [pc, #248]	; (8006ebc <mainLoop+0x304>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d11c      	bne.n	8006e02 <mainLoop+0x24a>
 8006dc8:	4b3d      	ldr	r3, [pc, #244]	; (8006ec0 <mainLoop+0x308>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f083 0301 	eor.w	r3, r3, #1
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d015      	beq.n	8006e02 <mainLoop+0x24a>
 8006dd6:	4b3b      	ldr	r3, [pc, #236]	; (8006ec4 <mainLoop+0x30c>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d111      	bne.n	8006e02 <mainLoop+0x24a>
			lcd_clear();
 8006dde:	f001 f935 	bl	800804c <lcd_clear>
			HAL_Delay(10);
 8006de2:	200a      	movs	r0, #10
 8006de4:	f001 fe5c 	bl	8008aa0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006de8:	4a37      	ldr	r2, [pc, #220]	; (8006ec8 <mainLoop+0x310>)
 8006dea:	2101      	movs	r1, #1
 8006dec:	2001      	movs	r0, #1
 8006dee:	f001 f901 	bl	8007ff4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006df2:	4a36      	ldr	r2, [pc, #216]	; (8006ecc <mainLoop+0x314>)
 8006df4:	2101      	movs	r1, #1
 8006df6:	2002      	movs	r0, #2
 8006df8:	f001 f8fc 	bl	8007ff4 <lcd_print>
			mesajYazildi=1;
 8006dfc:	4b30      	ldr	r3, [pc, #192]	; (8006ec0 <mainLoop+0x308>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006e02:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <mainLoop+0x304>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d112      	bne.n	8006e30 <mainLoop+0x278>
 8006e0a:	2102      	movs	r1, #2
 8006e0c:	4817      	ldr	r0, [pc, #92]	; (8006e6c <mainLoop+0x2b4>)
 8006e0e:	f002 fc17 	bl	8009640 <HAL_GPIO_ReadPin>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d10b      	bne.n	8006e30 <mainLoop+0x278>
 8006e18:	2104      	movs	r1, #4
 8006e1a:	4814      	ldr	r0, [pc, #80]	; (8006e6c <mainLoop+0x2b4>)
 8006e1c:	f002 fc10 	bl	8009640 <HAL_GPIO_ReadPin>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d104      	bne.n	8006e30 <mainLoop+0x278>
			menuGiris=1;
 8006e26:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <mainLoop+0x304>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006e2c:	f001 f90e 	bl	800804c <lcd_clear>
		}

		if(menuGiris==1) {
 8006e30:	4b22      	ldr	r3, [pc, #136]	; (8006ebc <mainLoop+0x304>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <mainLoop+0x284>
			menu();
 8006e38:	f7fa fbba 	bl	80015b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e40:	480b      	ldr	r0, [pc, #44]	; (8006e70 <mainLoop+0x2b8>)
 8006e42:	f002 fc2c 	bl	800969e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e4a:	4821      	ldr	r0, [pc, #132]	; (8006ed0 <mainLoop+0x318>)
 8006e4c:	f002 fbf8 	bl	8009640 <HAL_GPIO_ReadPin>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d142      	bne.n	8006edc <mainLoop+0x324>
 8006e56:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <mainLoop+0x31c>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	f083 0301 	eor.w	r3, r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d03b      	beq.n	8006edc <mainLoop+0x324>
			stopVar=1;
 8006e64:	4b1c      	ldr	r3, [pc, #112]	; (8006ed8 <mainLoop+0x320>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e03a      	b.n	8006ee2 <mainLoop+0x32a>
 8006e6c:	40010800 	.word	0x40010800
 8006e70:	40011000 	.word	0x40011000
 8006e74:	2000025b 	.word	0x2000025b
 8006e78:	20000208 	.word	0x20000208
 8006e7c:	20000224 	.word	0x20000224
 8006e80:	20000258 	.word	0x20000258
 8006e84:	200003b4 	.word	0x200003b4
 8006e88:	20000158 	.word	0x20000158
 8006e8c:	2000024d 	.word	0x2000024d
 8006e90:	0800df88 	.word	0x0800df88
 8006e94:	0800df9c 	.word	0x0800df9c
 8006e98:	20000259 	.word	0x20000259
 8006e9c:	2000025a 	.word	0x2000025a
 8006ea0:	0800dfb0 	.word	0x0800dfb0
 8006ea4:	0800dfc4 	.word	0x0800dfc4
 8006ea8:	0800dfd8 	.word	0x0800dfd8
 8006eac:	0800dfec 	.word	0x0800dfec
 8006eb0:	0800e000 	.word	0x0800e000
 8006eb4:	0800e014 	.word	0x0800e014
 8006eb8:	0800e028 	.word	0x0800e028
 8006ebc:	20000249 	.word	0x20000249
 8006ec0:	20000260 	.word	0x20000260
 8006ec4:	2000024a 	.word	0x2000024a
 8006ec8:	0800e03c 	.word	0x0800e03c
 8006ecc:	0800e050 	.word	0x0800e050
 8006ed0:	40010c00 	.word	0x40010c00
 8006ed4:	20000281 	.word	0x20000281
 8006ed8:	2000027e 	.word	0x2000027e
		} else {
			stopVar=0;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <mainLoop+0x340>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006ee2:	f7fd ffa7 	bl	8004e34 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006ee6:	f7fd ffd9 	bl	8004e9c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006eea:	f7fe f81d 	bl	8004f28 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006eee:	f7fe f86d 	bl	8004fcc <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ef2:	f7ff fbc7 	bl	8006684 <checkDemoModCalisma>
		checkLCDBacklight();
 8006ef6:	e662      	b.n	8006bbe <mainLoop+0x6>
 8006ef8:	2000027e 	.word	0x2000027e

08006efc <loadMenuTexts>:
 *      Author: hidirektor
 */

#include "TextVariables.h"

void loadMenuTexts(uint8_t dilSecim) {
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	71fb      	strb	r3, [r7, #7]

}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006f16:	2001      	movs	r0, #1
 8006f18:	f001 f8ca 	bl	80080b0 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006f1c:	220c      	movs	r2, #12
 8006f1e:	2100      	movs	r1, #0
 8006f20:	48a3      	ldr	r0, [pc, #652]	; (80071b0 <takeMachineID+0x2a0>)
 8006f22:	f005 fd65 	bl	800c9f0 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006f26:	2305      	movs	r3, #5
 8006f28:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006f32:	4ba0      	ldr	r3, [pc, #640]	; (80071b4 <takeMachineID+0x2a4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8006f38:	2100      	movs	r1, #0
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f7fa f884 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f40:	2108      	movs	r1, #8
 8006f42:	489d      	ldr	r0, [pc, #628]	; (80071b8 <takeMachineID+0x2a8>)
 8006f44:	f002 fb7c 	bl	8009640 <HAL_GPIO_ReadPin>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d139      	bne.n	8006fc2 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f001 f8ae 	bl	80080b0 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8006f54:	f000 fe90 	bl	8007c78 <checkEEPROM4ID>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d01f      	beq.n	8006f9e <takeMachineID+0x8e>
        		lcd_clear();
 8006f5e:	f001 f875 	bl	800804c <lcd_clear>
        		if(dilSecim == 1) {
 8006f62:	4b96      	ldr	r3, [pc, #600]	; (80071bc <takeMachineID+0x2ac>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d10a      	bne.n	8006f80 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006f6a:	4a95      	ldr	r2, [pc, #596]	; (80071c0 <takeMachineID+0x2b0>)
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	2001      	movs	r0, #1
 8006f70:	f001 f840 	bl	8007ff4 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006f74:	4a93      	ldr	r2, [pc, #588]	; (80071c4 <takeMachineID+0x2b4>)
 8006f76:	2101      	movs	r1, #1
 8006f78:	2002      	movs	r0, #2
 8006f7a:	f001 f83b 	bl	8007ff4 <lcd_print>
 8006f7e:	e009      	b.n	8006f94 <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, " ID MUST BE  12 ");
 8006f80:	4a91      	ldr	r2, [pc, #580]	; (80071c8 <takeMachineID+0x2b8>)
 8006f82:	2101      	movs	r1, #1
 8006f84:	2001      	movs	r0, #1
 8006f86:	f001 f835 	bl	8007ff4 <lcd_print>
        			lcd_print(2, 1, "   CHARACTERS   ");
 8006f8a:	4a90      	ldr	r2, [pc, #576]	; (80071cc <takeMachineID+0x2bc>)
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	2002      	movs	r0, #2
 8006f90:	f001 f830 	bl	8007ff4 <lcd_print>
        		}
        		HAL_Delay(1250);
 8006f94:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006f98:	f001 fd82 	bl	8008aa0 <HAL_Delay>

        		goto mainSection;
 8006f9c:	e7bb      	b.n	8006f16 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006f9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006fa2:	9302      	str	r3, [sp, #8]
 8006fa4:	236e      	movs	r3, #110	; 0x6e
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	4b89      	ldr	r3, [pc, #548]	; (80071d0 <takeMachineID+0x2c0>)
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	236e      	movs	r3, #110	; 0x6e
 8006fae:	2200      	movs	r2, #0
 8006fb0:	21a0      	movs	r1, #160	; 0xa0
 8006fb2:	4888      	ldr	r0, [pc, #544]	; (80071d4 <takeMachineID+0x2c4>)
 8006fb4:	f002 fdfe 	bl	8009bb4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fbc:	f001 fd70 	bl	8008aa0 <HAL_Delay>

            	break;
 8006fc0:	e138      	b.n	8007234 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	487c      	ldr	r0, [pc, #496]	; (80071b8 <takeMachineID+0x2a8>)
 8006fc6:	f002 fb3b 	bl	8009640 <HAL_GPIO_ReadPin>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d111      	bne.n	8006ff4 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b07      	cmp	r3, #7
 8006fd4:	d102      	bne.n	8006fdc <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006fd6:	230a      	movs	r3, #10
 8006fd8:	60bb      	str	r3, [r7, #8]
 8006fda:	e008      	b.n	8006fee <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b0e      	cmp	r3, #14
 8006fe0:	d102      	bne.n	8006fe8 <takeMachineID+0xd8>
                cursorPosition = 3;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	e002      	b.n	8006fee <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006fee:	2096      	movs	r0, #150	; 0x96
 8006ff0:	f001 fd56 	bl	8008aa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ff4:	2108      	movs	r1, #8
 8006ff6:	4878      	ldr	r0, [pc, #480]	; (80071d8 <takeMachineID+0x2c8>)
 8006ff8:	f002 fb22 	bl	8009640 <HAL_GPIO_ReadPin>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d111      	bne.n	8007026 <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b03      	cmp	r3, #3
 8007006:	d102      	bne.n	800700e <takeMachineID+0xfe>
                cursorPosition = 14;
 8007008:	230e      	movs	r3, #14
 800700a:	60bb      	str	r3, [r7, #8]
 800700c:	e008      	b.n	8007020 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b0a      	cmp	r3, #10
 8007012:	d102      	bne.n	800701a <takeMachineID+0x10a>
            	cursorPosition = 7;
 8007014:	2307      	movs	r3, #7
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	e002      	b.n	8007020 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	3b01      	subs	r3, #1
 800701e:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007020:	20fa      	movs	r0, #250	; 0xfa
 8007022:	f001 fd3d 	bl	8008aa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007026:	2102      	movs	r1, #2
 8007028:	4863      	ldr	r0, [pc, #396]	; (80071b8 <takeMachineID+0x2a8>)
 800702a:	f002 fb09 	bl	8009640 <HAL_GPIO_ReadPin>
 800702e:	4603      	mov	r3, r0
 8007030:	2b01      	cmp	r3, #1
 8007032:	f040 80a1 	bne.w	8007178 <takeMachineID+0x268>
        	if(cursorPosition == 3) {
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b03      	cmp	r3, #3
 800703a:	d10a      	bne.n	8007052 <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 800703c:	4a5c      	ldr	r2, [pc, #368]	; (80071b0 <takeMachineID+0x2a0>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	2230      	movs	r2, #48	; 0x30
 8007044:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007046:	4a62      	ldr	r2, [pc, #392]	; (80071d0 <takeMachineID+0x2c0>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4413      	add	r3, r2
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e07c      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b04      	cmp	r3, #4
 8007056:	d10a      	bne.n	800706e <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 8007058:	4a55      	ldr	r2, [pc, #340]	; (80071b0 <takeMachineID+0x2a0>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	2231      	movs	r2, #49	; 0x31
 8007060:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007062:	4a5b      	ldr	r2, [pc, #364]	; (80071d0 <takeMachineID+0x2c0>)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	4413      	add	r3, r2
 8007068:	2201      	movs	r2, #1
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e06e      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b05      	cmp	r3, #5
 8007072:	d10a      	bne.n	800708a <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8007074:	4a4e      	ldr	r2, [pc, #312]	; (80071b0 <takeMachineID+0x2a0>)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	2232      	movs	r2, #50	; 0x32
 800707c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800707e:	4a54      	ldr	r2, [pc, #336]	; (80071d0 <takeMachineID+0x2c0>)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4413      	add	r3, r2
 8007084:	2202      	movs	r2, #2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e060      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d10a      	bne.n	80070a6 <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8007090:	4a47      	ldr	r2, [pc, #284]	; (80071b0 <takeMachineID+0x2a0>)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	2233      	movs	r2, #51	; 0x33
 8007098:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800709a:	4a4d      	ldr	r2, [pc, #308]	; (80071d0 <takeMachineID+0x2c0>)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	4413      	add	r3, r2
 80070a0:	2203      	movs	r2, #3
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e052      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b07      	cmp	r3, #7
 80070aa:	d10a      	bne.n	80070c2 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 80070ac:	4a40      	ldr	r2, [pc, #256]	; (80071b0 <takeMachineID+0x2a0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	2234      	movs	r2, #52	; 0x34
 80070b4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80070b6:	4a46      	ldr	r2, [pc, #280]	; (80071d0 <takeMachineID+0x2c0>)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	2204      	movs	r2, #4
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e044      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b0a      	cmp	r3, #10
 80070c6:	d10a      	bne.n	80070de <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 80070c8:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <takeMachineID+0x2a0>)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	2235      	movs	r2, #53	; 0x35
 80070d0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80070d2:	4a3f      	ldr	r2, [pc, #252]	; (80071d0 <takeMachineID+0x2c0>)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	2205      	movs	r2, #5
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e036      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b0b      	cmp	r3, #11
 80070e2:	d10a      	bne.n	80070fa <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 80070e4:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <takeMachineID+0x2a0>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	2236      	movs	r2, #54	; 0x36
 80070ec:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80070ee:	4a38      	ldr	r2, [pc, #224]	; (80071d0 <takeMachineID+0x2c0>)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	4413      	add	r3, r2
 80070f4:	2206      	movs	r2, #6
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e028      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	d10a      	bne.n	8007116 <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <takeMachineID+0x2a0>)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	2237      	movs	r2, #55	; 0x37
 8007108:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 800710a:	4a31      	ldr	r2, [pc, #196]	; (80071d0 <takeMachineID+0x2c0>)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	4413      	add	r3, r2
 8007110:	2207      	movs	r2, #7
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	e01a      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b0d      	cmp	r3, #13
 800711a:	d10a      	bne.n	8007132 <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 800711c:	4a24      	ldr	r2, [pc, #144]	; (80071b0 <takeMachineID+0x2a0>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	2238      	movs	r2, #56	; 0x38
 8007124:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007126:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <takeMachineID+0x2c0>)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	4413      	add	r3, r2
 800712c:	2208      	movs	r2, #8
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	e00c      	b.n	800714c <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b0e      	cmp	r3, #14
 8007136:	d109      	bne.n	800714c <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 8007138:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <takeMachineID+0x2a0>)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4413      	add	r3, r2
 800713e:	2239      	movs	r2, #57	; 0x39
 8007140:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007142:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <takeMachineID+0x2c0>)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	4413      	add	r3, r2
 8007148:	2209      	movs	r2, #9
 800714a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	b2d9      	uxtb	r1, r3
 8007150:	4a17      	ldr	r2, [pc, #92]	; (80071b0 <takeMachineID+0x2a0>)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	2001      	movs	r0, #1
 800715c:	f000 ff5f 	bl	800801e <lcd_print_char>

        	writeLoc++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3301      	adds	r3, #1
 800716a:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	3301      	adds	r3, #1
 8007170:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007172:	2096      	movs	r0, #150	; 0x96
 8007174:	f001 fc94 	bl	8008aa0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007178:	2104      	movs	r1, #4
 800717a:	480f      	ldr	r0, [pc, #60]	; (80071b8 <takeMachineID+0x2a8>)
 800717c:	f002 fa60 	bl	8009640 <HAL_GPIO_ReadPin>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d14f      	bne.n	8007226 <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <takeMachineID+0x2a0>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d048      	beq.n	8007220 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 800718e:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <takeMachineID+0x2a0>)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007198:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <takeMachineID+0x2c0>)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	4413      	add	r3, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b05      	cmp	r3, #5
 80071a6:	dd19      	ble.n	80071dc <takeMachineID+0x2cc>
                	writeLoc--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	e01a      	b.n	80071e6 <takeMachineID+0x2d6>
 80071b0:	200001d0 	.word	0x200001d0
 80071b4:	20000004 	.word	0x20000004
 80071b8:	40010800 	.word	0x40010800
 80071bc:	2000024d 	.word	0x2000024d
 80071c0:	0800e064 	.word	0x0800e064
 80071c4:	0800e078 	.word	0x0800e078
 80071c8:	0800e08c 	.word	0x0800e08c
 80071cc:	0800e0a0 	.word	0x0800e0a0
 80071d0:	20000158 	.word	0x20000158
 80071d4:	200003b4 	.word	0x200003b4
 80071d8:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b04      	cmp	r3, #4
 80071e0:	dc01      	bgt.n	80071e6 <takeMachineID+0x2d6>
                	writeLoc = 5;
 80071e2:	2305      	movs	r3, #5
 80071e4:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dd06      	ble.n	80071fa <takeMachineID+0x2ea>
                	arrayPos--;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	e007      	b.n	800720a <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da04      	bge.n	800720a <takeMachineID+0x2fa>
                	arrayPos = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <takeMachineID+0x32c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	3304      	adds	r3, #4
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	2001      	movs	r0, #1
 8007216:	f000 ff23 	bl	8008060 <lcd_delete_char>
                HAL_Delay(50);
 800721a:	2032      	movs	r0, #50	; 0x32
 800721c:	f001 fc40 	bl	8008aa0 <HAL_Delay>
            }

            HAL_Delay(150);
 8007220:	2096      	movs	r0, #150	; 0x96
 8007222:	f001 fc3d 	bl	8008aa0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	2002      	movs	r0, #2
 800722e:	f000 fec2 	bl	8007fb6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007232:	e685      	b.n	8006f40 <takeMachineID+0x30>
    }
}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	20000004 	.word	0x20000004

08007240 <takeWifiSSID>:

void takeWifiSSID() {
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8007246:	2001      	movs	r0, #1
 8007248:	f000 ff32 	bl	80080b0 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 800724c:	2214      	movs	r2, #20
 800724e:	2100      	movs	r1, #0
 8007250:	48a4      	ldr	r0, [pc, #656]	; (80074e4 <takeWifiSSID+0x2a4>)
 8007252:	f005 fbcd 	bl	800c9f0 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007256:	2301      	movs	r3, #1
 8007258:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800725a:	2307      	movs	r3, #7
 800725c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800725e:	2301      	movs	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007266:	4ba0      	ldr	r3, [pc, #640]	; (80074e8 <takeWifiSSID+0x2a8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800726c:	2101      	movs	r1, #1
 800726e:	2002      	movs	r0, #2
 8007270:	f7f9 feea 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007274:	2108      	movs	r1, #8
 8007276:	489d      	ldr	r0, [pc, #628]	; (80074ec <takeWifiSSID+0x2ac>)
 8007278:	f002 f9e2 	bl	8009640 <HAL_GPIO_ReadPin>
 800727c:	4603      	mov	r3, r0
 800727e:	2b01      	cmp	r3, #1
 8007280:	d13a      	bne.n	80072f8 <takeWifiSSID+0xb8>
            lcd_cursor(0);
 8007282:	2000      	movs	r0, #0
 8007284:	f000 ff14 	bl	80080b0 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007288:	4896      	ldr	r0, [pc, #600]	; (80074e4 <takeWifiSSID+0x2a4>)
 800728a:	f7f8 ffcb 	bl	8000224 <strlen>
 800728e:	4603      	mov	r3, r0
 8007290:	2b14      	cmp	r3, #20
 8007292:	d91f      	bls.n	80072d4 <takeWifiSSID+0x94>
                lcd_clear();
 8007294:	f000 feda 	bl	800804c <lcd_clear>
                if(dilSecim == 1) {
 8007298:	4b95      	ldr	r3, [pc, #596]	; (80074f0 <takeWifiSSID+0x2b0>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d10a      	bne.n	80072b6 <takeWifiSSID+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80072a0:	4a94      	ldr	r2, [pc, #592]	; (80074f4 <takeWifiSSID+0x2b4>)
 80072a2:	2101      	movs	r1, #1
 80072a4:	2001      	movs	r0, #1
 80072a6:	f000 fea5 	bl	8007ff4 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80072aa:	4a93      	ldr	r2, [pc, #588]	; (80074f8 <takeWifiSSID+0x2b8>)
 80072ac:	2101      	movs	r1, #1
 80072ae:	2002      	movs	r0, #2
 80072b0:	f000 fea0 	bl	8007ff4 <lcd_print>
 80072b4:	e009      	b.n	80072ca <takeWifiSSID+0x8a>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 80072b6:	4a91      	ldr	r2, [pc, #580]	; (80074fc <takeWifiSSID+0x2bc>)
 80072b8:	2101      	movs	r1, #1
 80072ba:	2001      	movs	r0, #1
 80072bc:	f000 fe9a 	bl	8007ff4 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80072c0:	4a8f      	ldr	r2, [pc, #572]	; (8007500 <takeWifiSSID+0x2c0>)
 80072c2:	2101      	movs	r1, #1
 80072c4:	2002      	movs	r0, #2
 80072c6:	f000 fe95 	bl	8007ff4 <lcd_print>
                }
                HAL_Delay(1250);
 80072ca:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80072ce:	f001 fbe7 	bl	8008aa0 <HAL_Delay>

                goto mainSSIDSection;
 80072d2:	e7b8      	b.n	8007246 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80072d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80072d8:	9302      	str	r3, [sp, #8]
 80072da:	236e      	movs	r3, #110	; 0x6e
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	4b89      	ldr	r3, [pc, #548]	; (8007504 <takeWifiSSID+0x2c4>)
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	236e      	movs	r3, #110	; 0x6e
 80072e4:	2200      	movs	r2, #0
 80072e6:	21a0      	movs	r1, #160	; 0xa0
 80072e8:	4887      	ldr	r0, [pc, #540]	; (8007508 <takeWifiSSID+0x2c8>)
 80072ea:	f002 fc63 	bl	8009bb4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80072ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072f2:	f001 fbd5 	bl	8008aa0 <HAL_Delay>

            	break;
 80072f6:	e12a      	b.n	800754e <takeWifiSSID+0x30e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072f8:	2101      	movs	r1, #1
 80072fa:	487c      	ldr	r0, [pc, #496]	; (80074ec <takeWifiSSID+0x2ac>)
 80072fc:	f002 f9a0 	bl	8009640 <HAL_GPIO_ReadPin>
 8007300:	4603      	mov	r3, r0
 8007302:	2b01      	cmp	r3, #1
 8007304:	d14d      	bne.n	80073a2 <takeWifiSSID+0x162>
        	if(cursorPosition > 80) {
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b50      	cmp	r3, #80	; 0x50
 800730a:	dd01      	ble.n	8007310 <takeWifiSSID+0xd0>
        		cursorPosition = 1;
 800730c:	2301      	movs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b10      	cmp	r3, #16
 8007314:	d13f      	bne.n	8007396 <takeWifiSSID+0x156>
            	if(page == 1) {
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d109      	bne.n	8007330 <takeWifiSSID+0xf0>
            		cursorPosition = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	3301      	adds	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007326:	2102      	movs	r1, #2
 8007328:	2002      	movs	r0, #2
 800732a:	f7f9 fe8d 	bl	8001048 <printTemplate>
 800732e:	e035      	b.n	800739c <takeWifiSSID+0x15c>
            	} else if(page == 2) {
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d109      	bne.n	800734a <takeWifiSSID+0x10a>
            		cursorPosition = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
            		page++;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	3301      	adds	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007340:	2103      	movs	r1, #3
 8007342:	2002      	movs	r0, #2
 8007344:	f7f9 fe80 	bl	8001048 <printTemplate>
 8007348:	e028      	b.n	800739c <takeWifiSSID+0x15c>
            	} else if(page == 3) {
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b03      	cmp	r3, #3
 800734e:	d109      	bne.n	8007364 <takeWifiSSID+0x124>
            		cursorPosition = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
            		page++;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3301      	adds	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800735a:	2104      	movs	r1, #4
 800735c:	2002      	movs	r0, #2
 800735e:	f7f9 fe73 	bl	8001048 <printTemplate>
 8007362:	e01b      	b.n	800739c <takeWifiSSID+0x15c>
            	} else if(page == 4) {
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d109      	bne.n	800737e <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 800736a:	2301      	movs	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
            		page++;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	3301      	adds	r3, #1
 8007372:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007374:	2105      	movs	r1, #5
 8007376:	2002      	movs	r0, #2
 8007378:	f7f9 fe66 	bl	8001048 <printTemplate>
 800737c:	e00e      	b.n	800739c <takeWifiSSID+0x15c>
            	} else if(page == 5) {
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b05      	cmp	r3, #5
 8007382:	d10b      	bne.n	800739c <takeWifiSSID+0x15c>
            		cursorPosition = 1;
 8007384:	2301      	movs	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007388:	2301      	movs	r3, #1
 800738a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800738c:	2101      	movs	r1, #1
 800738e:	2002      	movs	r0, #2
 8007390:	f7f9 fe5a 	bl	8001048 <printTemplate>
 8007394:	e002      	b.n	800739c <takeWifiSSID+0x15c>
            	}
            } else {
            	cursorPosition++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800739c:	2096      	movs	r0, #150	; 0x96
 800739e:	f001 fb7f 	bl	8008aa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80073a2:	2108      	movs	r1, #8
 80073a4:	4859      	ldr	r0, [pc, #356]	; (800750c <takeWifiSSID+0x2cc>)
 80073a6:	f002 f94b 	bl	8009640 <HAL_GPIO_ReadPin>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d149      	bne.n	8007444 <takeWifiSSID+0x204>
        	if(cursorPosition < 1) {
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dc01      	bgt.n	80073ba <takeWifiSSID+0x17a>
        		cursorPosition = 80;
 80073b6:	2350      	movs	r3, #80	; 0x50
 80073b8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d13b      	bne.n	8007438 <takeWifiSSID+0x1f8>
            	if(page == 1) {
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d108      	bne.n	80073d8 <takeWifiSSID+0x198>
            		cursorPosition = 16;
 80073c6:	2310      	movs	r3, #16
 80073c8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80073ca:	2305      	movs	r3, #5
 80073cc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80073ce:	2105      	movs	r1, #5
 80073d0:	2002      	movs	r0, #2
 80073d2:	f7f9 fe39 	bl	8001048 <printTemplate>
 80073d6:	e032      	b.n	800743e <takeWifiSSID+0x1fe>
            	} else if(page == 2) {
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d108      	bne.n	80073f0 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 80073de:	2310      	movs	r3, #16
 80073e0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80073e2:	2301      	movs	r3, #1
 80073e4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80073e6:	2101      	movs	r1, #1
 80073e8:	2002      	movs	r0, #2
 80073ea:	f7f9 fe2d 	bl	8001048 <printTemplate>
 80073ee:	e026      	b.n	800743e <takeWifiSSID+0x1fe>
            	} else if(page == 3) {
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d108      	bne.n	8007408 <takeWifiSSID+0x1c8>
            		cursorPosition = 16;
 80073f6:	2310      	movs	r3, #16
 80073f8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80073fa:	2302      	movs	r3, #2
 80073fc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80073fe:	2102      	movs	r1, #2
 8007400:	2002      	movs	r0, #2
 8007402:	f7f9 fe21 	bl	8001048 <printTemplate>
 8007406:	e01a      	b.n	800743e <takeWifiSSID+0x1fe>
            	} else if(page == 4) {
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b04      	cmp	r3, #4
 800740c:	d108      	bne.n	8007420 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 800740e:	2310      	movs	r3, #16
 8007410:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007412:	2303      	movs	r3, #3
 8007414:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007416:	2103      	movs	r1, #3
 8007418:	2002      	movs	r0, #2
 800741a:	f7f9 fe15 	bl	8001048 <printTemplate>
 800741e:	e00e      	b.n	800743e <takeWifiSSID+0x1fe>
            	} else if(page == 5) {
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b05      	cmp	r3, #5
 8007424:	d10b      	bne.n	800743e <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 8007426:	2310      	movs	r3, #16
 8007428:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800742a:	2304      	movs	r3, #4
 800742c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800742e:	2104      	movs	r1, #4
 8007430:	2002      	movs	r0, #2
 8007432:	f7f9 fe09 	bl	8001048 <printTemplate>
 8007436:	e002      	b.n	800743e <takeWifiSSID+0x1fe>
            	}
            } else {
            	cursorPosition--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3b01      	subs	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800743e:	2096      	movs	r0, #150	; 0x96
 8007440:	f001 fb2e 	bl	8008aa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007444:	2102      	movs	r1, #2
 8007446:	4829      	ldr	r0, [pc, #164]	; (80074ec <takeWifiSSID+0x2ac>)
 8007448:	f002 f8fa 	bl	8009640 <HAL_GPIO_ReadPin>
 800744c:	4603      	mov	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d121      	bne.n	8007496 <takeWifiSSID+0x256>
            eepromData[eepromVal] = cursorPosition;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	4a2b      	ldr	r2, [pc, #172]	; (8007504 <takeWifiSSID+0x2c4>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4413      	add	r3, r2
 800745c:	460a      	mov	r2, r1
 800745e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	b2d9      	uxtb	r1, r3
 8007464:	4a2a      	ldr	r2, [pc, #168]	; (8007510 <takeWifiSSID+0x2d0>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	2001      	movs	r0, #1
 8007470:	f000 fdd5 	bl	800801e <lcd_print_char>

            writeLoc++;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3301      	adds	r3, #1
 8007478:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3301      	adds	r3, #1
 800747e:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3301      	adds	r3, #1
 8007484:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <takeWifiSSID+0x2c4>)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4413      	add	r3, r2
 800748c:	2200      	movs	r2, #0
 800748e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007490:	2096      	movs	r0, #150	; 0x96
 8007492:	f001 fb05 	bl	8008aa0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007496:	2104      	movs	r1, #4
 8007498:	4814      	ldr	r0, [pc, #80]	; (80074ec <takeWifiSSID+0x2ac>)
 800749a:	f002 f8d1 	bl	8009640 <HAL_GPIO_ReadPin>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d14d      	bne.n	8007540 <takeWifiSSID+0x300>
        	if(strlen(wifiSSID) >= 1) {
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <takeWifiSSID+0x2a4>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d046      	beq.n	800753a <takeWifiSSID+0x2fa>
        		eepromData[eepromVal] = '\0';
 80074ac:	4a15      	ldr	r2, [pc, #84]	; (8007504 <takeWifiSSID+0x2c4>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	dd03      	ble.n	80074c4 <takeWifiSSID+0x284>
        			writeLoc--;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3b01      	subs	r3, #1
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	e004      	b.n	80074ce <takeWifiSSID+0x28e>
        		} else if(writeLoc < 7) {
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	dc01      	bgt.n	80074ce <takeWifiSSID+0x28e>
        			writeLoc = 7;
 80074ca:	2307      	movs	r3, #7
 80074cc:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dd1f      	ble.n	8007514 <takeWifiSSID+0x2d4>
        			arrayPosition--;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3b01      	subs	r3, #1
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	e020      	b.n	8007524 <takeWifiSSID+0x2e4>
 80074e2:	bf00      	nop
 80074e4:	200001dc 	.word	0x200001dc
 80074e8:	20000008 	.word	0x20000008
 80074ec:	40010800 	.word	0x40010800
 80074f0:	2000024d 	.word	0x2000024d
 80074f4:	0800e0b4 	.word	0x0800e0b4
 80074f8:	0800e0c8 	.word	0x0800e0c8
 80074fc:	0800e0dc 	.word	0x0800e0dc
 8007500:	0800e0f0 	.word	0x0800e0f0
 8007504:	20000158 	.word	0x20000158
 8007508:	200003b4 	.word	0x200003b4
 800750c:	40011000 	.word	0x40011000
 8007510:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	da04      	bge.n	8007524 <takeWifiSSID+0x2e4>
        			arrayPosition = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800751e:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <takeWifiSSID+0x318>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	3306      	adds	r3, #6
 800752a:	b2db      	uxtb	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	2001      	movs	r0, #1
 8007530:	f000 fd96 	bl	8008060 <lcd_delete_char>
        		HAL_Delay(50);
 8007534:	2032      	movs	r0, #50	; 0x32
 8007536:	f001 fab3 	bl	8008aa0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800753a:	2096      	movs	r0, #150	; 0x96
 800753c:	f001 fab0 	bl	8008aa0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4619      	mov	r1, r3
 8007546:	2002      	movs	r0, #2
 8007548:	f000 fd35 	bl	8007fb6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800754c:	e692      	b.n	8007274 <takeWifiSSID+0x34>
    }
}
 800754e:	bf00      	nop
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000008 	.word	0x20000008

0800755c <takeWifiPass>:

void takeWifiPass() {
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007562:	2001      	movs	r0, #1
 8007564:	f000 fda4 	bl	80080b0 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007568:	2214      	movs	r2, #20
 800756a:	2100      	movs	r1, #0
 800756c:	48a4      	ldr	r0, [pc, #656]	; (8007800 <takeWifiPass+0x2a4>)
 800756e:	f005 fa3f 	bl	800c9f0 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007572:	2301      	movs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007576:	2307      	movs	r3, #7
 8007578:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800757a:	2301      	movs	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800757e:	2300      	movs	r3, #0
 8007580:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007582:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <takeWifiPass+0x2a8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007588:	2101      	movs	r1, #1
 800758a:	2003      	movs	r0, #3
 800758c:	f7f9 fd5c 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007590:	2108      	movs	r1, #8
 8007592:	489d      	ldr	r0, [pc, #628]	; (8007808 <takeWifiPass+0x2ac>)
 8007594:	f002 f854 	bl	8009640 <HAL_GPIO_ReadPin>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d13a      	bne.n	8007614 <takeWifiPass+0xb8>
            lcd_cursor(0);
 800759e:	2000      	movs	r0, #0
 80075a0:	f000 fd86 	bl	80080b0 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80075a4:	4899      	ldr	r0, [pc, #612]	; (800780c <takeWifiPass+0x2b0>)
 80075a6:	f7f8 fe3d 	bl	8000224 <strlen>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b14      	cmp	r3, #20
 80075ae:	d91f      	bls.n	80075f0 <takeWifiPass+0x94>
                lcd_clear();
 80075b0:	f000 fd4c 	bl	800804c <lcd_clear>
                if(dilSecim == 1) {
 80075b4:	4b96      	ldr	r3, [pc, #600]	; (8007810 <takeWifiPass+0x2b4>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d10a      	bne.n	80075d2 <takeWifiPass+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80075bc:	4a95      	ldr	r2, [pc, #596]	; (8007814 <takeWifiPass+0x2b8>)
 80075be:	2101      	movs	r1, #1
 80075c0:	2001      	movs	r0, #1
 80075c2:	f000 fd17 	bl	8007ff4 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80075c6:	4a94      	ldr	r2, [pc, #592]	; (8007818 <takeWifiPass+0x2bc>)
 80075c8:	2101      	movs	r1, #1
 80075ca:	2002      	movs	r0, #2
 80075cc:	f000 fd12 	bl	8007ff4 <lcd_print>
 80075d0:	e009      	b.n	80075e6 <takeWifiPass+0x8a>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80075d2:	4a92      	ldr	r2, [pc, #584]	; (800781c <takeWifiPass+0x2c0>)
 80075d4:	2101      	movs	r1, #1
 80075d6:	2001      	movs	r0, #1
 80075d8:	f000 fd0c 	bl	8007ff4 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80075dc:	4a90      	ldr	r2, [pc, #576]	; (8007820 <takeWifiPass+0x2c4>)
 80075de:	2101      	movs	r1, #1
 80075e0:	2002      	movs	r0, #2
 80075e2:	f000 fd07 	bl	8007ff4 <lcd_print>
                }
                HAL_Delay(1250);
 80075e6:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80075ea:	f001 fa59 	bl	8008aa0 <HAL_Delay>

                goto mainPassSection;
 80075ee:	e7b8      	b.n	8007562 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80075f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075f4:	9302      	str	r3, [sp, #8]
 80075f6:	236e      	movs	r3, #110	; 0x6e
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	4b8a      	ldr	r3, [pc, #552]	; (8007824 <takeWifiPass+0x2c8>)
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	236e      	movs	r3, #110	; 0x6e
 8007600:	2200      	movs	r2, #0
 8007602:	21a0      	movs	r1, #160	; 0xa0
 8007604:	4888      	ldr	r0, [pc, #544]	; (8007828 <takeWifiPass+0x2cc>)
 8007606:	f002 fad5 	bl	8009bb4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800760a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800760e:	f001 fa47 	bl	8008aa0 <HAL_Delay>

            	break;
 8007612:	e12c      	b.n	800786e <takeWifiPass+0x312>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007614:	2101      	movs	r1, #1
 8007616:	487c      	ldr	r0, [pc, #496]	; (8007808 <takeWifiPass+0x2ac>)
 8007618:	f002 f812 	bl	8009640 <HAL_GPIO_ReadPin>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d14d      	bne.n	80076be <takeWifiPass+0x162>
        	if(cursorPosition > 80) {
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b50      	cmp	r3, #80	; 0x50
 8007626:	dd01      	ble.n	800762c <takeWifiPass+0xd0>
        		cursorPosition = 1;
 8007628:	2301      	movs	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b10      	cmp	r3, #16
 8007630:	d13f      	bne.n	80076b2 <takeWifiPass+0x156>
            	if(page == 1) {
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d109      	bne.n	800764c <takeWifiPass+0xf0>
            		cursorPosition = 1;
 8007638:	2301      	movs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
            		page++;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3301      	adds	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007642:	2102      	movs	r1, #2
 8007644:	2003      	movs	r0, #3
 8007646:	f7f9 fcff 	bl	8001048 <printTemplate>
 800764a:	e035      	b.n	80076b8 <takeWifiPass+0x15c>
            	} else if(page == 2) {
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d109      	bne.n	8007666 <takeWifiPass+0x10a>
            		cursorPosition = 1;
 8007652:	2301      	movs	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
            		page++;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	3301      	adds	r3, #1
 800765a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800765c:	2103      	movs	r1, #3
 800765e:	2003      	movs	r0, #3
 8007660:	f7f9 fcf2 	bl	8001048 <printTemplate>
 8007664:	e028      	b.n	80076b8 <takeWifiPass+0x15c>
            	} else if(page == 3) {
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d109      	bne.n	8007680 <takeWifiPass+0x124>
            		cursorPosition = 1;
 800766c:	2301      	movs	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3301      	adds	r3, #1
 8007674:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007676:	2104      	movs	r1, #4
 8007678:	2003      	movs	r0, #3
 800767a:	f7f9 fce5 	bl	8001048 <printTemplate>
 800767e:	e01b      	b.n	80076b8 <takeWifiPass+0x15c>
            	} else if(page == 4) {
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d109      	bne.n	800769a <takeWifiPass+0x13e>
            		cursorPosition = 1;
 8007686:	2301      	movs	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
            		page++;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	3301      	adds	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007690:	2105      	movs	r1, #5
 8007692:	2003      	movs	r0, #3
 8007694:	f7f9 fcd8 	bl	8001048 <printTemplate>
 8007698:	e00e      	b.n	80076b8 <takeWifiPass+0x15c>
            	} else if(page == 5) {
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b05      	cmp	r3, #5
 800769e:	d10b      	bne.n	80076b8 <takeWifiPass+0x15c>
            		cursorPosition = 1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80076a8:	2101      	movs	r1, #1
 80076aa:	2003      	movs	r0, #3
 80076ac:	f7f9 fccc 	bl	8001048 <printTemplate>
 80076b0:	e002      	b.n	80076b8 <takeWifiPass+0x15c>
            	}
            } else {
            	cursorPosition++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80076b8:	2096      	movs	r0, #150	; 0x96
 80076ba:	f001 f9f1 	bl	8008aa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80076be:	2108      	movs	r1, #8
 80076c0:	485a      	ldr	r0, [pc, #360]	; (800782c <takeWifiPass+0x2d0>)
 80076c2:	f001 ffbd 	bl	8009640 <HAL_GPIO_ReadPin>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d149      	bne.n	8007760 <takeWifiPass+0x204>
        	if(cursorPosition < 1) {
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dc01      	bgt.n	80076d6 <takeWifiPass+0x17a>
        		cursorPosition = 80;
 80076d2:	2350      	movs	r3, #80	; 0x50
 80076d4:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d13b      	bne.n	8007754 <takeWifiPass+0x1f8>
            	if(page == 1) {
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d108      	bne.n	80076f4 <takeWifiPass+0x198>
            		cursorPosition = 16;
 80076e2:	2310      	movs	r3, #16
 80076e4:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80076e6:	2305      	movs	r3, #5
 80076e8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80076ea:	2105      	movs	r1, #5
 80076ec:	2003      	movs	r0, #3
 80076ee:	f7f9 fcab 	bl	8001048 <printTemplate>
 80076f2:	e032      	b.n	800775a <takeWifiPass+0x1fe>
            	} else if(page == 2) {
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d108      	bne.n	800770c <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 80076fa:	2310      	movs	r3, #16
 80076fc:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80076fe:	2301      	movs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007702:	2101      	movs	r1, #1
 8007704:	2003      	movs	r0, #3
 8007706:	f7f9 fc9f 	bl	8001048 <printTemplate>
 800770a:	e026      	b.n	800775a <takeWifiPass+0x1fe>
            	} else if(page == 3) {
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d108      	bne.n	8007724 <takeWifiPass+0x1c8>
            		cursorPosition = 16;
 8007712:	2310      	movs	r3, #16
 8007714:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007716:	2302      	movs	r3, #2
 8007718:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800771a:	2102      	movs	r1, #2
 800771c:	2003      	movs	r0, #3
 800771e:	f7f9 fc93 	bl	8001048 <printTemplate>
 8007722:	e01a      	b.n	800775a <takeWifiPass+0x1fe>
            	} else if(page == 4) {
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b04      	cmp	r3, #4
 8007728:	d108      	bne.n	800773c <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 800772a:	2310      	movs	r3, #16
 800772c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800772e:	2303      	movs	r3, #3
 8007730:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007732:	2103      	movs	r1, #3
 8007734:	2003      	movs	r0, #3
 8007736:	f7f9 fc87 	bl	8001048 <printTemplate>
 800773a:	e00e      	b.n	800775a <takeWifiPass+0x1fe>
            	} else if(page == 5) {
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b05      	cmp	r3, #5
 8007740:	d10b      	bne.n	800775a <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 8007742:	2310      	movs	r3, #16
 8007744:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007746:	2304      	movs	r3, #4
 8007748:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800774a:	2104      	movs	r1, #4
 800774c:	2003      	movs	r0, #3
 800774e:	f7f9 fc7b 	bl	8001048 <printTemplate>
 8007752:	e002      	b.n	800775a <takeWifiPass+0x1fe>
            	}
            } else {
            	cursorPosition--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3b01      	subs	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800775a:	2096      	movs	r0, #150	; 0x96
 800775c:	f001 f9a0 	bl	8008aa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007760:	2102      	movs	r1, #2
 8007762:	4829      	ldr	r0, [pc, #164]	; (8007808 <takeWifiPass+0x2ac>)
 8007764:	f001 ff6c 	bl	8009640 <HAL_GPIO_ReadPin>
 8007768:	4603      	mov	r3, r0
 800776a:	2b01      	cmp	r3, #1
 800776c:	d121      	bne.n	80077b2 <takeWifiPass+0x256>
            eepromData[eepromVal] = cursorPosition;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	b2d9      	uxtb	r1, r3
 8007772:	4a2c      	ldr	r2, [pc, #176]	; (8007824 <takeWifiPass+0x2c8>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	460a      	mov	r2, r1
 800777a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	b2d9      	uxtb	r1, r3
 8007780:	4a2b      	ldr	r2, [pc, #172]	; (8007830 <takeWifiPass+0x2d4>)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	2001      	movs	r0, #1
 800778c:	f000 fc47 	bl	800801e <lcd_print_char>

            writeLoc++;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	3301      	adds	r3, #1
 8007794:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	3301      	adds	r3, #1
 800779a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3301      	adds	r3, #1
 80077a0:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80077a2:	4a20      	ldr	r2, [pc, #128]	; (8007824 <takeWifiPass+0x2c8>)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80077ac:	2096      	movs	r0, #150	; 0x96
 80077ae:	f001 f977 	bl	8008aa0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80077b2:	2104      	movs	r1, #4
 80077b4:	4814      	ldr	r0, [pc, #80]	; (8007808 <takeWifiPass+0x2ac>)
 80077b6:	f001 ff43 	bl	8009640 <HAL_GPIO_ReadPin>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d14f      	bne.n	8007860 <takeWifiPass+0x304>
        	if(strlen(wifiSSID) >= 1) {
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <takeWifiPass+0x2b0>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d048      	beq.n	800785a <takeWifiPass+0x2fe>
        		eepromData[eepromVal] = '\0';
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <takeWifiPass+0x2c8>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4413      	add	r3, r2
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b07      	cmp	r3, #7
 80077d6:	dd03      	ble.n	80077e0 <takeWifiPass+0x284>
        			writeLoc--;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3b01      	subs	r3, #1
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	e004      	b.n	80077ea <takeWifiPass+0x28e>
        		} else if(writeLoc < 7) {
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b06      	cmp	r3, #6
 80077e4:	dc01      	bgt.n	80077ea <takeWifiPass+0x28e>
        			writeLoc = 7;
 80077e6:	2307      	movs	r3, #7
 80077e8:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dd21      	ble.n	8007834 <takeWifiPass+0x2d8>
        			arrayPosition--;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	e022      	b.n	8007844 <takeWifiPass+0x2e8>
 80077fe:	bf00      	nop
 8007800:	200001f0 	.word	0x200001f0
 8007804:	2000000c 	.word	0x2000000c
 8007808:	40010800 	.word	0x40010800
 800780c:	200001dc 	.word	0x200001dc
 8007810:	2000024d 	.word	0x2000024d
 8007814:	0800e0b4 	.word	0x0800e0b4
 8007818:	0800e0c8 	.word	0x0800e0c8
 800781c:	0800e104 	.word	0x0800e104
 8007820:	0800e0f0 	.word	0x0800e0f0
 8007824:	20000158 	.word	0x20000158
 8007828:	200003b4 	.word	0x200003b4
 800782c:	40011000 	.word	0x40011000
 8007830:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	da04      	bge.n	8007844 <takeWifiPass+0x2e8>
        			arrayPosition = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800783e:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <takeWifiPass+0x31c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	3306      	adds	r3, #6
 800784a:	b2db      	uxtb	r3, r3
 800784c:	4619      	mov	r1, r3
 800784e:	2001      	movs	r0, #1
 8007850:	f000 fc06 	bl	8008060 <lcd_delete_char>
        		HAL_Delay(50);
 8007854:	2032      	movs	r0, #50	; 0x32
 8007856:	f001 f923 	bl	8008aa0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800785a:	2096      	movs	r0, #150	; 0x96
 800785c:	f001 f920 	bl	8008aa0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	2002      	movs	r0, #2
 8007868:	f000 fba5 	bl	8007fb6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800786c:	e690      	b.n	8007590 <takeWifiPass+0x34>
    }
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	2000000c 	.word	0x2000000c

0800787c <mergeData>:

char* mergeData() {
 800787c:	b580      	push	{r7, lr}
 800787e:	b09c      	sub	sp, #112	; 0x70
 8007880:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007882:	2300      	movs	r3, #0
 8007884:	63bb      	str	r3, [r7, #56]	; 0x38
 8007886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800788a:	2229      	movs	r2, #41	; 0x29
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f005 f8ae 	bl	800c9f0 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007894:	4b65      	ldr	r3, [pc, #404]	; (8007a2c <mergeData+0x1b0>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	703b      	strb	r3, [r7, #0]
 800789a:	4b65      	ldr	r3, [pc, #404]	; (8007a30 <mergeData+0x1b4>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	707b      	strb	r3, [r7, #1]
 80078a0:	4b64      	ldr	r3, [pc, #400]	; (8007a34 <mergeData+0x1b8>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	70bb      	strb	r3, [r7, #2]
 80078a6:	4b64      	ldr	r3, [pc, #400]	; (8007a38 <mergeData+0x1bc>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	70fb      	strb	r3, [r7, #3]
 80078ac:	4b63      	ldr	r3, [pc, #396]	; (8007a3c <mergeData+0x1c0>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	713b      	strb	r3, [r7, #4]
 80078b2:	4b63      	ldr	r3, [pc, #396]	; (8007a40 <mergeData+0x1c4>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	717b      	strb	r3, [r7, #5]
 80078b8:	4b62      	ldr	r3, [pc, #392]	; (8007a44 <mergeData+0x1c8>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	71bb      	strb	r3, [r7, #6]
 80078be:	4b62      	ldr	r3, [pc, #392]	; (8007a48 <mergeData+0x1cc>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	71fb      	strb	r3, [r7, #7]
 80078c4:	4b61      	ldr	r3, [pc, #388]	; (8007a4c <mergeData+0x1d0>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	723b      	strb	r3, [r7, #8]
 80078ca:	4b61      	ldr	r3, [pc, #388]	; (8007a50 <mergeData+0x1d4>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	727b      	strb	r3, [r7, #9]
 80078d0:	4b60      	ldr	r3, [pc, #384]	; (8007a54 <mergeData+0x1d8>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	72bb      	strb	r3, [r7, #10]
 80078d6:	4b60      	ldr	r3, [pc, #384]	; (8007a58 <mergeData+0x1dc>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	72fb      	strb	r3, [r7, #11]
 80078dc:	4b5f      	ldr	r3, [pc, #380]	; (8007a5c <mergeData+0x1e0>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	733b      	strb	r3, [r7, #12]
 80078e2:	4b5f      	ldr	r3, [pc, #380]	; (8007a60 <mergeData+0x1e4>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	737b      	strb	r3, [r7, #13]
 80078e8:	4b5e      	ldr	r3, [pc, #376]	; (8007a64 <mergeData+0x1e8>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	73bb      	strb	r3, [r7, #14]
 80078ee:	4b5e      	ldr	r3, [pc, #376]	; (8007a68 <mergeData+0x1ec>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	4b5d      	ldr	r3, [pc, #372]	; (8007a6c <mergeData+0x1f0>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	743b      	strb	r3, [r7, #16]
 80078fa:	4b5d      	ldr	r3, [pc, #372]	; (8007a70 <mergeData+0x1f4>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	747b      	strb	r3, [r7, #17]
 8007900:	4b5c      	ldr	r3, [pc, #368]	; (8007a74 <mergeData+0x1f8>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	74bb      	strb	r3, [r7, #18]
 8007906:	4b5c      	ldr	r3, [pc, #368]	; (8007a78 <mergeData+0x1fc>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	74fb      	strb	r3, [r7, #19]
 800790c:	4b5b      	ldr	r3, [pc, #364]	; (8007a7c <mergeData+0x200>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	753b      	strb	r3, [r7, #20]
 8007912:	4b5b      	ldr	r3, [pc, #364]	; (8007a80 <mergeData+0x204>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	757b      	strb	r3, [r7, #21]
 8007918:	4b5a      	ldr	r3, [pc, #360]	; (8007a84 <mergeData+0x208>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	75bb      	strb	r3, [r7, #22]
 800791e:	4b5a      	ldr	r3, [pc, #360]	; (8007a88 <mergeData+0x20c>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	75fb      	strb	r3, [r7, #23]
 8007924:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <mergeData+0x210>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	763b      	strb	r3, [r7, #24]
 800792a:	4b59      	ldr	r3, [pc, #356]	; (8007a90 <mergeData+0x214>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	767b      	strb	r3, [r7, #25]
 8007930:	4b58      	ldr	r3, [pc, #352]	; (8007a94 <mergeData+0x218>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	76bb      	strb	r3, [r7, #26]
 8007936:	4b58      	ldr	r3, [pc, #352]	; (8007a98 <mergeData+0x21c>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	76fb      	strb	r3, [r7, #27]
 800793c:	4b57      	ldr	r3, [pc, #348]	; (8007a9c <mergeData+0x220>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	773b      	strb	r3, [r7, #28]
 8007942:	4b57      	ldr	r3, [pc, #348]	; (8007aa0 <mergeData+0x224>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	777b      	strb	r3, [r7, #29]
 8007948:	4b56      	ldr	r3, [pc, #344]	; (8007aa4 <mergeData+0x228>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	77bb      	strb	r3, [r7, #30]
 800794e:	4b56      	ldr	r3, [pc, #344]	; (8007aa8 <mergeData+0x22c>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	4b55      	ldr	r3, [pc, #340]	; (8007aac <mergeData+0x230>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800795c:	4b54      	ldr	r3, [pc, #336]	; (8007ab0 <mergeData+0x234>)
 800795e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007962:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			eepromData[39],
 8007966:	4b52      	ldr	r3, [pc, #328]	; (8007ab0 <mergeData+0x234>)
 8007968:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800796c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			eepromData[40],
 8007970:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <mergeData+0x234>)
 8007972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			eepromData[41],
 800797a:	4b4d      	ldr	r3, [pc, #308]	; (8007ab0 <mergeData+0x234>)
 800797c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007980:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			eepromData[42],
 8007984:	4b4a      	ldr	r3, [pc, #296]	; (8007ab0 <mergeData+0x234>)
 8007986:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800798a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[43],
 800798e:	4b48      	ldr	r3, [pc, #288]	; (8007ab0 <mergeData+0x234>)
 8007990:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[44],
 8007998:	4b45      	ldr	r3, [pc, #276]	; (8007ab0 <mergeData+0x234>)
 800799a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800799e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[45],
 80079a2:	4b43      	ldr	r3, [pc, #268]	; (8007ab0 <mergeData+0x234>)
 80079a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80079a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[46],
 80079ac:	4b40      	ldr	r3, [pc, #256]	; (8007ab0 <mergeData+0x234>)
 80079ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80079b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[47],
 80079b6:	4b3e      	ldr	r3, [pc, #248]	; (8007ab0 <mergeData+0x234>)
 80079b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80079bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079c0:	2306      	movs	r3, #6
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80079c6:	2300      	movs	r3, #0
 80079c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079ca:	e015      	b.n	80079f8 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80079cc:	463a      	mov	r2, r7
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	4413      	add	r3, r2
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079da:	4936      	ldr	r1, [pc, #216]	; (8007ab4 <mergeData+0x238>)
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 ff6d 	bl	800c8bc <siprintf>
	    strcat(combinedString, temp);
 80079e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80079e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f004 ffc7 	bl	800c980 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80079f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f4:	3301      	adds	r3, #1
 80079f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	2b2b      	cmp	r3, #43	; 0x2b
 80079fc:	d9e6      	bls.n	80079cc <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80079fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fc0e 	bl	8000224 <strlen>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f004 fea1 	bl	800c754 <malloc>
 8007a12:	4603      	mov	r3, r0
 8007a14:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007a1e:	f005 f82b 	bl	800ca78 <strcpy>
	return result;
 8007a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3770      	adds	r7, #112	; 0x70
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	2000023b 	.word	0x2000023b
 8007a30:	2000022d 	.word	0x2000022d
 8007a34:	20000230 	.word	0x20000230
 8007a38:	20000231 	.word	0x20000231
 8007a3c:	20000232 	.word	0x20000232
 8007a40:	20000239 	.word	0x20000239
 8007a44:	20000233 	.word	0x20000233
 8007a48:	20000234 	.word	0x20000234
 8007a4c:	20000238 	.word	0x20000238
 8007a50:	20000235 	.word	0x20000235
 8007a54:	20000245 	.word	0x20000245
 8007a58:	20000236 	.word	0x20000236
 8007a5c:	20000246 	.word	0x20000246
 8007a60:	20000237 	.word	0x20000237
 8007a64:	20000247 	.word	0x20000247
 8007a68:	2000023a 	.word	0x2000023a
 8007a6c:	2000023c 	.word	0x2000023c
 8007a70:	2000023d 	.word	0x2000023d
 8007a74:	2000023e 	.word	0x2000023e
 8007a78:	2000023f 	.word	0x2000023f
 8007a7c:	20000240 	.word	0x20000240
 8007a80:	20000241 	.word	0x20000241
 8007a84:	20000242 	.word	0x20000242
 8007a88:	20000243 	.word	0x20000243
 8007a8c:	20000244 	.word	0x20000244
 8007a90:	20000248 	.word	0x20000248
 8007a94:	2000024a 	.word	0x2000024a
 8007a98:	20000229 	.word	0x20000229
 8007a9c:	2000022a 	.word	0x2000022a
 8007aa0:	20000000 	.word	0x20000000
 8007aa4:	20000001 	.word	0x20000001
 8007aa8:	2000022b 	.word	0x2000022b
 8007aac:	2000024d 	.word	0x2000024d
 8007ab0:	20000158 	.word	0x20000158
 8007ab4:	0800e118 	.word	0x0800e118

08007ab8 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 8007abe:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <convertAndSendData+0x74>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007ac6:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <convertAndSendData+0x78>)
 8007ac8:	2101      	movs	r1, #1
 8007aca:	2001      	movs	r0, #1
 8007acc:	f000 fa92 	bl	8007ff4 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007ad0:	4a18      	ldr	r2, [pc, #96]	; (8007b34 <convertAndSendData+0x7c>)
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	2002      	movs	r0, #2
 8007ad6:	f000 fa8d 	bl	8007ff4 <lcd_print>
 8007ada:	e009      	b.n	8007af0 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <convertAndSendData+0x80>)
 8007ade:	2101      	movs	r1, #1
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	f000 fa87 	bl	8007ff4 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007ae6:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <convertAndSendData+0x84>)
 8007ae8:	2101      	movs	r1, #1
 8007aea:	2002      	movs	r0, #2
 8007aec:	f000 fa82 	bl	8007ff4 <lcd_print>
	}

	for(int i=0; i<2; i++) {
 8007af0:	2300      	movs	r3, #0
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	e00c      	b.n	8007b10 <convertAndSendData+0x58>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007af6:	f7ff fec1 	bl	800787c <mergeData>
 8007afa:	4603      	mov	r3, r0
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <convertAndSendData+0x88>)
 8007b00:	4a10      	ldr	r2, [pc, #64]	; (8007b44 <convertAndSendData+0x8c>)
 8007b02:	4911      	ldr	r1, [pc, #68]	; (8007b48 <convertAndSendData+0x90>)
 8007b04:	4811      	ldr	r0, [pc, #68]	; (8007b4c <convertAndSendData+0x94>)
 8007b06:	f7f8 ff47 	bl	8000998 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	ddef      	ble.n	8007af6 <convertAndSendData+0x3e>
	}

	HAL_Delay(500);
 8007b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b1a:	f000 ffc1 	bl	8008aa0 <HAL_Delay>
	lcd_clear();
 8007b1e:	f000 fa95 	bl	800804c <lcd_clear>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	2000024d 	.word	0x2000024d
 8007b30:	0800e11c 	.word	0x0800e11c
 8007b34:	0800e130 	.word	0x0800e130
 8007b38:	0800e144 	.word	0x0800e144
 8007b3c:	0800e158 	.word	0x0800e158
 8007b40:	200001f0 	.word	0x200001f0
 8007b44:	200001dc 	.word	0x200001dc
 8007b48:	200001d0 	.word	0x200001d0
 8007b4c:	20000450 	.word	0x20000450

08007b50 <iotSetup>:

void iotSetup() {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af04      	add	r7, sp, #16
	if(iotMode != 0) {
 8007b56:	4b39      	ldr	r3, [pc, #228]	; (8007c3c <iotSetup+0xec>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d016      	beq.n	8007b8c <iotSetup+0x3c>
		if(checkEEPROM4ID() != 1) {
 8007b5e:	f000 f88b 	bl	8007c78 <checkEEPROM4ID>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d001      	beq.n	8007b6c <iotSetup+0x1c>
			takeMachineID();
 8007b68:	f7ff f9d2 	bl	8006f10 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007b6c:	4834      	ldr	r0, [pc, #208]	; (8007c40 <iotSetup+0xf0>)
 8007b6e:	f7f8 fb59 	bl	8000224 <strlen>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d801      	bhi.n	8007b7c <iotSetup+0x2c>
			takeWifiSSID();
 8007b78:	f7ff fb62 	bl	8007240 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007b7c:	4831      	ldr	r0, [pc, #196]	; (8007c44 <iotSetup+0xf4>)
 8007b7e:	f7f8 fb51 	bl	8000224 <strlen>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d801      	bhi.n	8007b8c <iotSetup+0x3c>
			takeWifiPass();
 8007b88:	f7ff fce8 	bl	800755c <takeWifiPass>
		}
	}

	if(setupCompleted != 1) {
 8007b8c:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <iotSetup+0xf8>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d044      	beq.n	8007c1e <iotSetup+0xce>
		takeIDSection:
 8007b94:	bf00      	nop
		if(checkMachineID(&huart1, machineID) == 1) {
 8007b96:	492d      	ldr	r1, [pc, #180]	; (8007c4c <iotSetup+0xfc>)
 8007b98:	482d      	ldr	r0, [pc, #180]	; (8007c50 <iotSetup+0x100>)
 8007b9a:	f7f8 ff9d 	bl	8000ad8 <checkMachineID>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d119      	bne.n	8007bd8 <iotSetup+0x88>
			setupCompleted = 1;
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <iotSetup+0xf8>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
			eepromData[104] = setupCompleted;
 8007baa:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <iotSetup+0xf8>)
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	4b29      	ldr	r3, [pc, #164]	; (8007c54 <iotSetup+0x104>)
 8007bb0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			//EEPROMA yazma işlemini başlat
        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007bb4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	236e      	movs	r3, #110	; 0x6e
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <iotSetup+0x104>)
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	236e      	movs	r3, #110	; 0x6e
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	21a0      	movs	r1, #160	; 0xa0
 8007bc8:	4823      	ldr	r0, [pc, #140]	; (8007c58 <iotSetup+0x108>)
 8007bca:	f001 fff3 	bl	8009bb4 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8007bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bd2:	f000 ff65 	bl	8008aa0 <HAL_Delay>
 8007bd6:	e022      	b.n	8007c1e <iotSetup+0xce>
		} else {
			if(dilSecim == 1) {
 8007bd8:	4b20      	ldr	r3, [pc, #128]	; (8007c5c <iotSetup+0x10c>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d10a      	bne.n	8007bf6 <iotSetup+0xa6>
				//türkçe hata mesajı
				lcd_print(1, 1, " BU ID MAKINEDE ");
 8007be0:	4a1f      	ldr	r2, [pc, #124]	; (8007c60 <iotSetup+0x110>)
 8007be2:	2101      	movs	r1, #1
 8007be4:	2001      	movs	r0, #1
 8007be6:	f000 fa05 	bl	8007ff4 <lcd_print>
				lcd_print(2, 1, "  KULLANILAMAZ  ");
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <iotSetup+0x114>)
 8007bec:	2101      	movs	r1, #1
 8007bee:	2002      	movs	r0, #2
 8007bf0:	f000 fa00 	bl	8007ff4 <lcd_print>
 8007bf4:	e009      	b.n	8007c0a <iotSetup+0xba>
			} else {
				//ingilizce hata mesajı
				lcd_print(1, 1, "ID NOT AVAILABLE");
 8007bf6:	4a1c      	ldr	r2, [pc, #112]	; (8007c68 <iotSetup+0x118>)
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	f000 f9fa 	bl	8007ff4 <lcd_print>
				lcd_print(2, 1, "FOR THIS MACHINE");
 8007c00:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <iotSetup+0x11c>)
 8007c02:	2101      	movs	r1, #1
 8007c04:	2002      	movs	r0, #2
 8007c06:	f000 f9f5 	bl	8007ff4 <lcd_print>
			}

			HAL_Delay(1250);
 8007c0a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007c0e:	f000 ff47 	bl	8008aa0 <HAL_Delay>
			//Tekrar id alma işlemi
			takeMachineID();
 8007c12:	f7ff f97d 	bl	8006f10 <takeMachineID>
			HAL_Delay(200);
 8007c16:	20c8      	movs	r0, #200	; 0xc8
 8007c18:	f000 ff42 	bl	8008aa0 <HAL_Delay>
			goto takeIDSection;
 8007c1c:	e7bb      	b.n	8007b96 <iotSetup+0x46>
		}
	}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8007c1e:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <iotSetup+0x120>)
 8007c20:	4914      	ldr	r1, [pc, #80]	; (8007c74 <iotSetup+0x124>)
 8007c22:	480b      	ldr	r0, [pc, #44]	; (8007c50 <iotSetup+0x100>)
 8007c24:	f7f8 fe0e 	bl	8000844 <ESP8266_Init>
	HAL_Delay(500);
 8007c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c2c:	f000 ff38 	bl	8008aa0 <HAL_Delay>
	convertAndSendData();
 8007c30:	f7ff ff42 	bl	8007ab8 <convertAndSendData>
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	2000024b 	.word	0x2000024b
 8007c40:	200001dc 	.word	0x200001dc
 8007c44:	200001f0 	.word	0x200001f0
 8007c48:	20000204 	.word	0x20000204
 8007c4c:	200001d0 	.word	0x200001d0
 8007c50:	20000450 	.word	0x20000450
 8007c54:	20000158 	.word	0x20000158
 8007c58:	200003b4 	.word	0x200003b4
 8007c5c:	2000024d 	.word	0x2000024d
 8007c60:	0800e16c 	.word	0x0800e16c
 8007c64:	0800e180 	.word	0x0800e180
 8007c68:	0800e194 	.word	0x0800e194
 8007c6c:	0800e1a8 	.word	0x0800e1a8
 8007c70:	0800e1bc 	.word	0x0800e1bc
 8007c74:	0800e1d4 	.word	0x0800e1d4

08007c78 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <checkEEPROM4ID+0x44>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8007c84:	2301      	movs	r3, #1
 8007c86:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007c88:	2300      	movs	r3, #0
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	e00d      	b.n	8007caa <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8007c8e:	4a0c      	ldr	r2, [pc, #48]	; (8007cc0 <checkEEPROM4ID+0x48>)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <checkEEPROM4ID+0x26>
			returnVal = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b0b      	cmp	r3, #11
 8007cae:	ddee      	ble.n	8007c8e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	20000004 	.word	0x20000004
 8007cc0:	20000158 	.word	0x20000158

08007cc4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	f023 030f 	bic.w	r3, r3, #15
 8007cd4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007cdc:	7b7b      	ldrb	r3, [r7, #13]
 8007cde:	f043 030c 	orr.w	r3, r3, #12
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007ce6:	7b7b      	ldrb	r3, [r7, #13]
 8007ce8:	f043 0308 	orr.w	r3, r3, #8
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007cf0:	7b3b      	ldrb	r3, [r7, #12]
 8007cf2:	f043 030c 	orr.w	r3, r3, #12
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007cfa:	7b3b      	ldrb	r3, [r7, #12]
 8007cfc:	f043 0308 	orr.w	r3, r3, #8
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d04:	bf00      	nop
 8007d06:	4825      	ldr	r0, [pc, #148]	; (8007d9c <lcd_send_cmd+0xd8>)
 8007d08:	f002 fac3 	bl	800a292 <HAL_I2C_GetError>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d0f9      	beq.n	8007d06 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d12:	bf00      	nop
 8007d14:	4821      	ldr	r0, [pc, #132]	; (8007d9c <lcd_send_cmd+0xd8>)
 8007d16:	f002 faaf 	bl	800a278 <HAL_I2C_GetState>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d1f9      	bne.n	8007d14 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007d20:	4b1f      	ldr	r3, [pc, #124]	; (8007da0 <lcd_send_cmd+0xdc>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d116      	bne.n	8007d56 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	e00f      	b.n	8007d4e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	3310      	adds	r3, #16
 8007d32:	443b      	add	r3, r7
 8007d34:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	f022 0208 	bic.w	r2, r2, #8
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	3310      	adds	r3, #16
 8007d42:	443b      	add	r3, r7
 8007d44:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d9ec      	bls.n	8007d2e <lcd_send_cmd+0x6a>
 8007d54:	e015      	b.n	8007d82 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007d56:	2300      	movs	r3, #0
 8007d58:	73bb      	strb	r3, [r7, #14]
 8007d5a:	e00f      	b.n	8007d7c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	3310      	adds	r3, #16
 8007d60:	443b      	add	r3, r7
 8007d62:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	f042 0208 	orr.w	r2, r2, #8
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	3310      	adds	r3, #16
 8007d70:	443b      	add	r3, r7
 8007d72:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	73bb      	strb	r3, [r7, #14]
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d9ec      	bls.n	8007d5c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007d82:	f107 0208 	add.w	r2, r7, #8
 8007d86:	2364      	movs	r3, #100	; 0x64
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2304      	movs	r3, #4
 8007d8c:	214e      	movs	r1, #78	; 0x4e
 8007d8e:	4803      	ldr	r0, [pc, #12]	; (8007d9c <lcd_send_cmd+0xd8>)
 8007d90:	f001 fe12 	bl	80099b8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	200003b4 	.word	0x200003b4
 8007da0:	2000038a 	.word	0x2000038a

08007da4 <lcd_send_data>:

void lcd_send_data (char data) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	f023 030f 	bic.w	r3, r3, #15
 8007db4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007dbc:	7b7b      	ldrb	r3, [r7, #13]
 8007dbe:	f043 030d 	orr.w	r3, r3, #13
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007dc6:	7b7b      	ldrb	r3, [r7, #13]
 8007dc8:	f043 0309 	orr.w	r3, r3, #9
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007dd0:	7b3b      	ldrb	r3, [r7, #12]
 8007dd2:	f043 030d 	orr.w	r3, r3, #13
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007dda:	7b3b      	ldrb	r3, [r7, #12]
 8007ddc:	f043 0309 	orr.w	r3, r3, #9
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007de4:	bf00      	nop
 8007de6:	4825      	ldr	r0, [pc, #148]	; (8007e7c <lcd_send_data+0xd8>)
 8007de8:	f002 fa53 	bl	800a292 <HAL_I2C_GetError>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d0f9      	beq.n	8007de6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007df2:	bf00      	nop
 8007df4:	4821      	ldr	r0, [pc, #132]	; (8007e7c <lcd_send_data+0xd8>)
 8007df6:	f002 fa3f 	bl	800a278 <HAL_I2C_GetState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d1f9      	bne.n	8007df4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007e00:	4b1f      	ldr	r3, [pc, #124]	; (8007e80 <lcd_send_data+0xdc>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d116      	bne.n	8007e36 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]
 8007e0c:	e00f      	b.n	8007e2e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	3310      	adds	r3, #16
 8007e12:	443b      	add	r3, r7
 8007e14:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	f022 0208 	bic.w	r2, r2, #8
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	3310      	adds	r3, #16
 8007e22:	443b      	add	r3, r7
 8007e24:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d9ec      	bls.n	8007e0e <lcd_send_data+0x6a>
 8007e34:	e015      	b.n	8007e62 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007e36:	2300      	movs	r3, #0
 8007e38:	73bb      	strb	r3, [r7, #14]
 8007e3a:	e00f      	b.n	8007e5c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	3310      	adds	r3, #16
 8007e40:	443b      	add	r3, r7
 8007e42:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	f042 0208 	orr.w	r2, r2, #8
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	3310      	adds	r3, #16
 8007e50:	443b      	add	r3, r7
 8007e52:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	73bb      	strb	r3, [r7, #14]
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d9ec      	bls.n	8007e3c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007e62:	f107 0208 	add.w	r2, r7, #8
 8007e66:	2364      	movs	r3, #100	; 0x64
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	214e      	movs	r1, #78	; 0x4e
 8007e6e:	4803      	ldr	r0, [pc, #12]	; (8007e7c <lcd_send_data+0xd8>)
 8007e70:	f001 fda2 	bl	80099b8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	200003b4 	.word	0x200003b4
 8007e80:	2000038a 	.word	0x2000038a

08007e84 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007e8c:	e006      	b.n	8007e9c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff ff84 	bl	8007da4 <lcd_send_data>
	while (*str) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f4      	bne.n	8007e8e <lcd_send_string+0xa>
	}
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	f023 030f 	bic.w	r3, r3, #15
 8007ec0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007ec8:	7b7b      	ldrb	r3, [r7, #13]
 8007eca:	f043 030d 	orr.w	r3, r3, #13
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007ed2:	7b7b      	ldrb	r3, [r7, #13]
 8007ed4:	f043 0309 	orr.w	r3, r3, #9
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007edc:	7b3b      	ldrb	r3, [r7, #12]
 8007ede:	f043 030d 	orr.w	r3, r3, #13
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007ee6:	7b3b      	ldrb	r3, [r7, #12]
 8007ee8:	f043 0309 	orr.w	r3, r3, #9
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ef0:	bf00      	nop
 8007ef2:	4825      	ldr	r0, [pc, #148]	; (8007f88 <lcd_send_char+0xd8>)
 8007ef4:	f002 f9cd 	bl	800a292 <HAL_I2C_GetError>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d0f9      	beq.n	8007ef2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007efe:	bf00      	nop
 8007f00:	4821      	ldr	r0, [pc, #132]	; (8007f88 <lcd_send_char+0xd8>)
 8007f02:	f002 f9b9 	bl	800a278 <HAL_I2C_GetState>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d1f9      	bne.n	8007f00 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007f0c:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <lcd_send_char+0xdc>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d116      	bne.n	8007f42 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
 8007f18:	e00f      	b.n	8007f3a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	3310      	adds	r3, #16
 8007f1e:	443b      	add	r3, r7
 8007f20:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	f022 0208 	bic.w	r2, r2, #8
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	443b      	add	r3, r7
 8007f30:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	3301      	adds	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d9ec      	bls.n	8007f1a <lcd_send_char+0x6a>
 8007f40:	e015      	b.n	8007f6e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007f42:	2300      	movs	r3, #0
 8007f44:	73bb      	strb	r3, [r7, #14]
 8007f46:	e00f      	b.n	8007f68 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	443b      	add	r3, r7
 8007f4e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	f042 0208 	orr.w	r2, r2, #8
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	3310      	adds	r3, #16
 8007f5c:	443b      	add	r3, r7
 8007f5e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	3301      	adds	r3, #1
 8007f66:	73bb      	strb	r3, [r7, #14]
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d9ec      	bls.n	8007f48 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007f6e:	f107 0208 	add.w	r2, r7, #8
 8007f72:	2364      	movs	r3, #100	; 0x64
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2304      	movs	r3, #4
 8007f78:	214e      	movs	r1, #78	; 0x4e
 8007f7a:	4803      	ldr	r0, [pc, #12]	; (8007f88 <lcd_send_char+0xd8>)
 8007f7c:	f001 fd1c 	bl	80099b8 <HAL_I2C_Master_Transmit>
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	200003b4 	.word	0x200003b4
 8007f8c:	2000038a 	.word	0x2000038a

08007f90 <lcd_init>:

void lcd_init (void) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007f94:	2002      	movs	r0, #2
 8007f96:	f7ff fe95 	bl	8007cc4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007f9a:	2028      	movs	r0, #40	; 0x28
 8007f9c:	f7ff fe92 	bl	8007cc4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007fa0:	200c      	movs	r0, #12
 8007fa2:	f7ff fe8f 	bl	8007cc4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007fa6:	2080      	movs	r0, #128	; 0x80
 8007fa8:	f7ff fe8c 	bl	8007cc4 <lcd_send_cmd>
	lcd_backlight(1);
 8007fac:	2001      	movs	r0, #1
 8007fae:	f000 f86d 	bl	800808c <lcd_backlight>
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	460a      	mov	r2, r1
 8007fc0:	71fb      	strb	r3, [r7, #7]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d106      	bne.n	8007fda <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007fcc:	79bb      	ldrb	r3, [r7, #6]
 8007fce:	337f      	adds	r3, #127	; 0x7f
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fe76 	bl	8007cc4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007fd8:	e008      	b.n	8007fec <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d105      	bne.n	8007fec <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007fe0:	79bb      	ldrb	r3, [r7, #6]
 8007fe2:	3b41      	subs	r3, #65	; 0x41
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff fe6c 	bl	8007cc4 <lcd_send_cmd>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	603a      	str	r2, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
 8008000:	460b      	mov	r3, r1
 8008002:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008004:	79ba      	ldrb	r2, [r7, #6]
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff ffd3 	bl	8007fb6 <lcd_gotoxy>
	lcd_send_string(str);
 8008010:	6838      	ldr	r0, [r7, #0]
 8008012:	f7ff ff37 	bl	8007e84 <lcd_send_string>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	4603      	mov	r3, r0
 8008026:	71fb      	strb	r3, [r7, #7]
 8008028:	460b      	mov	r3, r1
 800802a:	71bb      	strb	r3, [r7, #6]
 800802c:	4613      	mov	r3, r2
 800802e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008030:	79ba      	ldrb	r2, [r7, #6]
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	4611      	mov	r1, r2
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff ffbd 	bl	8007fb6 <lcd_gotoxy>
    lcd_send_char(ch);
 800803c:	797b      	ldrb	r3, [r7, #5]
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff ff36 	bl	8007eb0 <lcd_send_char>
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <lcd_clear>:

void lcd_clear(void) {
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008050:	2001      	movs	r0, #1
 8008052:	f7ff fe37 	bl	8007cc4 <lcd_send_cmd>
    HAL_Delay(2);
 8008056:	2002      	movs	r0, #2
 8008058:	f000 fd22 	bl	8008aa0 <HAL_Delay>
}
 800805c:	bf00      	nop
 800805e:	bd80      	pop	{r7, pc}

08008060 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	460a      	mov	r2, r1
 800806a:	71fb      	strb	r3, [r7, #7]
 800806c:	4613      	mov	r3, r2
 800806e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008070:	79ba      	ldrb	r2, [r7, #6]
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff ff9d 	bl	8007fb6 <lcd_gotoxy>

    lcd_send_char(' ');
 800807c:	2020      	movs	r0, #32
 800807e:	f7ff ff17 	bl	8007eb0 <lcd_send_char>
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008096:	4a05      	ldr	r2, [pc, #20]	; (80080ac <lcd_backlight+0x20>)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800809c:	2000      	movs	r0, #0
 800809e:	f7ff fe11 	bl	8007cc4 <lcd_send_cmd>
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2000038a 	.word	0x2000038a

080080b0 <lcd_cursor>:

void lcd_cursor(int state) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d106      	bne.n	80080cc <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80080be:	200e      	movs	r0, #14
 80080c0:	f7ff fe00 	bl	8007cc4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80080c4:	200f      	movs	r0, #15
 80080c6:	f7ff fdfd 	bl	8007cc4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80080ca:	e002      	b.n	80080d2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80080cc:	200c      	movs	r0, #12
 80080ce:	f7ff fdf9 	bl	8007cc4 <lcd_send_cmd>
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	4a03      	ldr	r2, [pc, #12]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80080ec:	6013      	str	r3, [r2, #0]
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	20000208 	.word	0x20000208

080080fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008100:	f000 fc6c 	bl	80089dc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008108:	f000 fcca 	bl	8008aa0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800810c:	f000 f89c 	bl	8008248 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008110:	f000 f9be 	bl	8008490 <MX_GPIO_Init>
  MX_CAN_Init();
 8008114:	f000 f8de 	bl	80082d4 <MX_CAN_Init>
  MX_I2C1_Init();
 8008118:	f000 f910 	bl	800833c <MX_I2C1_Init>
  MX_TIM1_Init();
 800811c:	f000 f93c 	bl	8008398 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008120:	f000 f98c 	bl	800843c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008124:	2201      	movs	r2, #1
 8008126:	2140      	movs	r1, #64	; 0x40
 8008128:	483e      	ldr	r0, [pc, #248]	; (8008224 <main+0x128>)
 800812a:	f001 faa0 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800812e:	2201      	movs	r2, #1
 8008130:	2180      	movs	r1, #128	; 0x80
 8008132:	483c      	ldr	r0, [pc, #240]	; (8008224 <main+0x128>)
 8008134:	f001 fa9b 	bl	800966e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008138:	200a      	movs	r0, #10
 800813a:	f000 fcb1 	bl	8008aa0 <HAL_Delay>
  lcd_init();
 800813e:	f7ff ff27 	bl	8007f90 <lcd_init>
  HAL_Delay(10);
 8008142:	200a      	movs	r0, #10
 8008144:	f000 fcac 	bl	8008aa0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008148:	4837      	ldr	r0, [pc, #220]	; (8008228 <main+0x12c>)
 800814a:	f003 f943 	bl	800b3d4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800814e:	bf00      	nop
 8008150:	4836      	ldr	r0, [pc, #216]	; (800822c <main+0x130>)
 8008152:	f002 f89e 	bl	800a292 <HAL_I2C_GetError>
 8008156:	4603      	mov	r3, r0
 8008158:	2b04      	cmp	r3, #4
 800815a:	d0f9      	beq.n	8008150 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800815c:	bf00      	nop
 800815e:	4833      	ldr	r0, [pc, #204]	; (800822c <main+0x130>)
 8008160:	f002 f88a 	bl	800a278 <HAL_I2C_GetState>
 8008164:	4603      	mov	r3, r0
 8008166:	2b20      	cmp	r3, #32
 8008168:	d1f9      	bne.n	800815e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800816a:	2200      	movs	r2, #0
 800816c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008170:	482c      	ldr	r0, [pc, #176]	; (8008224 <main+0x128>)
 8008172:	f001 fa7c 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008176:	2200      	movs	r2, #0
 8008178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800817c:	4829      	ldr	r0, [pc, #164]	; (8008224 <main+0x128>)
 800817e:	f001 fa76 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008182:	2200      	movs	r2, #0
 8008184:	2104      	movs	r1, #4
 8008186:	4827      	ldr	r0, [pc, #156]	; (8008224 <main+0x128>)
 8008188:	f001 fa71 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800818c:	2200      	movs	r2, #0
 800818e:	2102      	movs	r1, #2
 8008190:	4824      	ldr	r0, [pc, #144]	; (8008224 <main+0x128>)
 8008192:	f001 fa6c 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008196:	2200      	movs	r2, #0
 8008198:	2101      	movs	r1, #1
 800819a:	4822      	ldr	r0, [pc, #136]	; (8008224 <main+0x128>)
 800819c:	f001 fa67 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80081a0:	2200      	movs	r2, #0
 80081a2:	2120      	movs	r1, #32
 80081a4:	4822      	ldr	r0, [pc, #136]	; (8008230 <main+0x134>)
 80081a6:	f001 fa62 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80081aa:	2200      	movs	r2, #0
 80081ac:	2110      	movs	r1, #16
 80081ae:	4820      	ldr	r0, [pc, #128]	; (8008230 <main+0x134>)
 80081b0:	f001 fa5d 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80081b4:	2200      	movs	r2, #0
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	481e      	ldr	r0, [pc, #120]	; (8008234 <main+0x138>)
 80081ba:	f001 fa58 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80081be:	2200      	movs	r2, #0
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	481c      	ldr	r0, [pc, #112]	; (8008234 <main+0x138>)
 80081c4:	f001 fa53 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80081c8:	2200      	movs	r2, #0
 80081ca:	2120      	movs	r1, #32
 80081cc:	4819      	ldr	r0, [pc, #100]	; (8008234 <main+0x138>)
 80081ce:	f001 fa4e 	bl	800966e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80081d2:	2200      	movs	r2, #0
 80081d4:	2110      	movs	r1, #16
 80081d6:	4817      	ldr	r0, [pc, #92]	; (8008234 <main+0x138>)
 80081d8:	f001 fa49 	bl	800966e <HAL_GPIO_WritePin>

  i2cTest();
 80081dc:	f7f8 fe86 	bl	8000eec <i2cTest>
  HAL_Delay(100);
 80081e0:	2064      	movs	r0, #100	; 0x64
 80081e2:	f000 fc5d 	bl	8008aa0 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 80081e6:	4a14      	ldr	r2, [pc, #80]	; (8008238 <main+0x13c>)
 80081e8:	2101      	movs	r1, #1
 80081ea:	2001      	movs	r0, #1
 80081ec:	f7ff ff02 	bl	8007ff4 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80081f0:	4a12      	ldr	r2, [pc, #72]	; (800823c <main+0x140>)
 80081f2:	2101      	movs	r1, #1
 80081f4:	2002      	movs	r0, #2
 80081f6:	f7ff fefd 	bl	8007ff4 <lcd_print>
  //lcd_print(1,1,"     RMK-V1     ");
  //lcd_print(2,1,"ONDTECH ESP CONT");
  HAL_Delay(1000);
 80081fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081fe:	f000 fc4f 	bl	8008aa0 <HAL_Delay>
  lcd_clear();
 8008202:	f7ff ff23 	bl	800804c <lcd_clear>

  eepromKontrol();
 8008206:	f7f8 f815 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800820a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800820e:	f000 fc47 	bl	8008aa0 <HAL_Delay>

  backLightTimer = millis;
 8008212:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <main+0x144>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a0b      	ldr	r2, [pc, #44]	; (8008244 <main+0x148>)
 8008218:	6013      	str	r3, [r2, #0]

  iotSetup();
 800821a:	f7ff fc99 	bl	8007b50 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800821e:	f7fe fccb 	bl	8006bb8 <mainLoop>
 8008222:	e7fc      	b.n	800821e <main+0x122>
 8008224:	40010c00 	.word	0x40010c00
 8008228:	20000408 	.word	0x20000408
 800822c:	200003b4 	.word	0x200003b4
 8008230:	40011000 	.word	0x40011000
 8008234:	40010800 	.word	0x40010800
 8008238:	200000a0 	.word	0x200000a0
 800823c:	200000b0 	.word	0x200000b0
 8008240:	20000208 	.word	0x20000208
 8008244:	20000224 	.word	0x20000224

08008248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b090      	sub	sp, #64	; 0x40
 800824c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800824e:	f107 0318 	add.w	r3, r7, #24
 8008252:	2228      	movs	r2, #40	; 0x28
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f004 fbca 	bl	800c9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	609a      	str	r2, [r3, #8]
 8008266:	60da      	str	r2, [r3, #12]
 8008268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800826a:	2301      	movs	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800826e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008274:	2300      	movs	r3, #0
 8008276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008278:	2301      	movs	r3, #1
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800827c:	2302      	movs	r3, #2
 800827e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800828c:	f107 0318 	add.w	r3, r7, #24
 8008290:	4618      	mov	r0, r3
 8008292:	f002 fc3f 	bl	800ab14 <HAL_RCC_OscConfig>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800829c:	f000 f9a2 	bl	80085e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082a0:	230f      	movs	r3, #15
 80082a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082a4:	2302      	movs	r3, #2
 80082a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082a8:	2300      	movs	r3, #0
 80082aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80082ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80082b6:	1d3b      	adds	r3, r7, #4
 80082b8:	2102      	movs	r1, #2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f002 feac 	bl	800b018 <HAL_RCC_ClockConfig>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80082c6:	f000 f98d 	bl	80085e4 <Error_Handler>
  }
}
 80082ca:	bf00      	nop
 80082cc:	3740      	adds	r7, #64	; 0x40
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80082d8:	4b16      	ldr	r3, [pc, #88]	; (8008334 <MX_CAN_Init+0x60>)
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <MX_CAN_Init+0x64>)
 80082dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <MX_CAN_Init+0x60>)
 80082e0:	2210      	movs	r2, #16
 80082e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80082e4:	4b13      	ldr	r3, [pc, #76]	; (8008334 <MX_CAN_Init+0x60>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <MX_CAN_Init+0x60>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80082f0:	4b10      	ldr	r3, [pc, #64]	; (8008334 <MX_CAN_Init+0x60>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <MX_CAN_Init+0x60>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80082fc:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <MX_CAN_Init+0x60>)
 80082fe:	2200      	movs	r2, #0
 8008300:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <MX_CAN_Init+0x60>)
 8008304:	2200      	movs	r2, #0
 8008306:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <MX_CAN_Init+0x60>)
 800830a:	2200      	movs	r2, #0
 800830c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800830e:	4b09      	ldr	r3, [pc, #36]	; (8008334 <MX_CAN_Init+0x60>)
 8008310:	2200      	movs	r2, #0
 8008312:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008314:	4b07      	ldr	r3, [pc, #28]	; (8008334 <MX_CAN_Init+0x60>)
 8008316:	2200      	movs	r2, #0
 8008318:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <MX_CAN_Init+0x60>)
 800831c:	2200      	movs	r2, #0
 800831e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008320:	4804      	ldr	r0, [pc, #16]	; (8008334 <MX_CAN_Init+0x60>)
 8008322:	f000 fbe1 	bl	8008ae8 <HAL_CAN_Init>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800832c:	f000 f95a 	bl	80085e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008330:	bf00      	nop
 8008332:	bd80      	pop	{r7, pc}
 8008334:	2000038c 	.word	0x2000038c
 8008338:	40006400 	.word	0x40006400

0800833c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <MX_I2C1_Init+0x50>)
 8008342:	4a13      	ldr	r2, [pc, #76]	; (8008390 <MX_I2C1_Init+0x54>)
 8008344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <MX_I2C1_Init+0x50>)
 8008348:	4a12      	ldr	r2, [pc, #72]	; (8008394 <MX_I2C1_Init+0x58>)
 800834a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800834c:	4b0f      	ldr	r3, [pc, #60]	; (800838c <MX_I2C1_Init+0x50>)
 800834e:	2200      	movs	r2, #0
 8008350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008352:	4b0e      	ldr	r3, [pc, #56]	; (800838c <MX_I2C1_Init+0x50>)
 8008354:	2200      	movs	r2, #0
 8008356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008358:	4b0c      	ldr	r3, [pc, #48]	; (800838c <MX_I2C1_Init+0x50>)
 800835a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800835e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <MX_I2C1_Init+0x50>)
 8008362:	2200      	movs	r2, #0
 8008364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <MX_I2C1_Init+0x50>)
 8008368:	2200      	movs	r2, #0
 800836a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800836c:	4b07      	ldr	r3, [pc, #28]	; (800838c <MX_I2C1_Init+0x50>)
 800836e:	2200      	movs	r2, #0
 8008370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <MX_I2C1_Init+0x50>)
 8008374:	2200      	movs	r2, #0
 8008376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008378:	4804      	ldr	r0, [pc, #16]	; (800838c <MX_I2C1_Init+0x50>)
 800837a:	f001 f9a9 	bl	80096d0 <HAL_I2C_Init>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008384:	f000 f92e 	bl	80085e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008388:	bf00      	nop
 800838a:	bd80      	pop	{r7, pc}
 800838c:	200003b4 	.word	0x200003b4
 8008390:	40005400 	.word	0x40005400
 8008394:	00061a80 	.word	0x00061a80

08008398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800839e:	f107 0308 	add.w	r3, r7, #8
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	605a      	str	r2, [r3, #4]
 80083a8:	609a      	str	r2, [r3, #8]
 80083aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083ac:	463b      	mov	r3, r7
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80083b4:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <MX_TIM1_Init+0xa0>)
 80083b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80083ba:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083bc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80083c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083c2:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80083ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083d0:	4b18      	ldr	r3, [pc, #96]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80083d6:	4b17      	ldr	r3, [pc, #92]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083de:	2200      	movs	r2, #0
 80083e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80083e2:	4814      	ldr	r0, [pc, #80]	; (8008434 <MX_TIM1_Init+0x9c>)
 80083e4:	f002 ffa6 	bl	800b334 <HAL_TIM_Base_Init>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80083ee:	f000 f8f9 	bl	80085e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80083f8:	f107 0308 	add.w	r3, r7, #8
 80083fc:	4619      	mov	r1, r3
 80083fe:	480d      	ldr	r0, [pc, #52]	; (8008434 <MX_TIM1_Init+0x9c>)
 8008400:	f003 f950 	bl	800b6a4 <HAL_TIM_ConfigClockSource>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800840a:	f000 f8eb 	bl	80085e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800840e:	2300      	movs	r3, #0
 8008410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008412:	2300      	movs	r3, #0
 8008414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008416:	463b      	mov	r3, r7
 8008418:	4619      	mov	r1, r3
 800841a:	4806      	ldr	r0, [pc, #24]	; (8008434 <MX_TIM1_Init+0x9c>)
 800841c:	f003 fb3e 	bl	800ba9c <HAL_TIMEx_MasterConfigSynchronization>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008426:	f000 f8dd 	bl	80085e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800842a:	bf00      	nop
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000408 	.word	0x20000408
 8008438:	40012c00 	.word	0x40012c00

0800843c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008442:	4a12      	ldr	r2, [pc, #72]	; (800848c <MX_USART1_UART_Init+0x50>)
 8008444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008446:	4b10      	ldr	r3, [pc, #64]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800844c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800844e:	4b0e      	ldr	r3, [pc, #56]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008456:	2200      	movs	r2, #0
 8008458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 800845c:	2200      	movs	r2, #0
 800845e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008460:	4b09      	ldr	r3, [pc, #36]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008462:	220c      	movs	r2, #12
 8008464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008466:	4b08      	ldr	r3, [pc, #32]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008468:	2200      	movs	r2, #0
 800846a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800846c:	4b06      	ldr	r3, [pc, #24]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 800846e:	2200      	movs	r2, #0
 8008470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008472:	4805      	ldr	r0, [pc, #20]	; (8008488 <MX_USART1_UART_Init+0x4c>)
 8008474:	f003 fb90 	bl	800bb98 <HAL_UART_Init>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800847e:	f000 f8b1 	bl	80085e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008482:	bf00      	nop
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000450 	.word	0x20000450
 800848c:	40013800 	.word	0x40013800

08008490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008496:	f107 0310 	add.w	r3, r7, #16
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	605a      	str	r2, [r3, #4]
 80084a0:	609a      	str	r2, [r3, #8]
 80084a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80084a4:	4b4b      	ldr	r3, [pc, #300]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	4a4a      	ldr	r2, [pc, #296]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084aa:	f043 0310 	orr.w	r3, r3, #16
 80084ae:	6193      	str	r3, [r2, #24]
 80084b0:	4b48      	ldr	r3, [pc, #288]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084bc:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	4a44      	ldr	r2, [pc, #272]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084c2:	f043 0320 	orr.w	r3, r3, #32
 80084c6:	6193      	str	r3, [r2, #24]
 80084c8:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084d4:	4b3f      	ldr	r3, [pc, #252]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	4a3e      	ldr	r2, [pc, #248]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084da:	f043 0304 	orr.w	r3, r3, #4
 80084de:	6193      	str	r3, [r2, #24]
 80084e0:	4b3c      	ldr	r3, [pc, #240]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ec:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	4a38      	ldr	r2, [pc, #224]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084f2:	f043 0308 	orr.w	r3, r3, #8
 80084f6:	6193      	str	r3, [r2, #24]
 80084f8:	4b36      	ldr	r3, [pc, #216]	; (80085d4 <MX_GPIO_Init+0x144>)
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008504:	2200      	movs	r2, #0
 8008506:	21f0      	movs	r1, #240	; 0xf0
 8008508:	4833      	ldr	r0, [pc, #204]	; (80085d8 <MX_GPIO_Init+0x148>)
 800850a:	f001 f8b0 	bl	800966e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800850e:	2200      	movs	r2, #0
 8008510:	f241 0130 	movw	r1, #4144	; 0x1030
 8008514:	4831      	ldr	r0, [pc, #196]	; (80085dc <MX_GPIO_Init+0x14c>)
 8008516:	f001 f8aa 	bl	800966e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800851a:	2200      	movs	r2, #0
 800851c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008520:	482f      	ldr	r0, [pc, #188]	; (80085e0 <MX_GPIO_Init+0x150>)
 8008522:	f001 f8a4 	bl	800966e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008526:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800852a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008534:	f107 0310 	add.w	r3, r7, #16
 8008538:	4619      	mov	r1, r3
 800853a:	4828      	ldr	r0, [pc, #160]	; (80085dc <MX_GPIO_Init+0x14c>)
 800853c:	f000 fe20 	bl	8009180 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008540:	f248 130f 	movw	r3, #33039	; 0x810f
 8008544:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800854e:	f107 0310 	add.w	r3, r7, #16
 8008552:	4619      	mov	r1, r3
 8008554:	4820      	ldr	r0, [pc, #128]	; (80085d8 <MX_GPIO_Init+0x148>)
 8008556:	f000 fe13 	bl	8009180 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800855a:	23f0      	movs	r3, #240	; 0xf0
 800855c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800855e:	2301      	movs	r3, #1
 8008560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008562:	2300      	movs	r3, #0
 8008564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008566:	2302      	movs	r3, #2
 8008568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800856a:	f107 0310 	add.w	r3, r7, #16
 800856e:	4619      	mov	r1, r3
 8008570:	4819      	ldr	r0, [pc, #100]	; (80085d8 <MX_GPIO_Init+0x148>)
 8008572:	f000 fe05 	bl	8009180 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008576:	f241 0330 	movw	r3, #4144	; 0x1030
 800857a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800857c:	2301      	movs	r3, #1
 800857e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008584:	2302      	movs	r3, #2
 8008586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008588:	f107 0310 	add.w	r3, r7, #16
 800858c:	4619      	mov	r1, r3
 800858e:	4813      	ldr	r0, [pc, #76]	; (80085dc <MX_GPIO_Init+0x14c>)
 8008590:	f000 fdf6 	bl	8009180 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008594:	f640 4307 	movw	r3, #3079	; 0xc07
 8008598:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800859a:	2301      	movs	r3, #1
 800859c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085a2:	2302      	movs	r3, #2
 80085a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085a6:	f107 0310 	add.w	r3, r7, #16
 80085aa:	4619      	mov	r1, r3
 80085ac:	480c      	ldr	r0, [pc, #48]	; (80085e0 <MX_GPIO_Init+0x150>)
 80085ae:	f000 fde7 	bl	8009180 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80085b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80085b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085bc:	2300      	movs	r3, #0
 80085be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085c0:	f107 0310 	add.w	r3, r7, #16
 80085c4:	4619      	mov	r1, r3
 80085c6:	4806      	ldr	r0, [pc, #24]	; (80085e0 <MX_GPIO_Init+0x150>)
 80085c8:	f000 fdda 	bl	8009180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80085cc:	bf00      	nop
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40021000 	.word	0x40021000
 80085d8:	40010800 	.word	0x40010800
 80085dc:	40011000 	.word	0x40011000
 80085e0:	40010c00 	.word	0x40010c00

080085e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr

080085f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80085f6:	4b15      	ldr	r3, [pc, #84]	; (800864c <HAL_MspInit+0x5c>)
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	4a14      	ldr	r2, [pc, #80]	; (800864c <HAL_MspInit+0x5c>)
 80085fc:	f043 0301 	orr.w	r3, r3, #1
 8008600:	6193      	str	r3, [r2, #24]
 8008602:	4b12      	ldr	r3, [pc, #72]	; (800864c <HAL_MspInit+0x5c>)
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	60bb      	str	r3, [r7, #8]
 800860c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <HAL_MspInit+0x5c>)
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	4a0e      	ldr	r2, [pc, #56]	; (800864c <HAL_MspInit+0x5c>)
 8008614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008618:	61d3      	str	r3, [r2, #28]
 800861a:	4b0c      	ldr	r3, [pc, #48]	; (800864c <HAL_MspInit+0x5c>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008622:	607b      	str	r3, [r7, #4]
 8008624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <HAL_MspInit+0x60>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	4a04      	ldr	r2, [pc, #16]	; (8008650 <HAL_MspInit+0x60>)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008642:	bf00      	nop
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr
 800864c:	40021000 	.word	0x40021000
 8008650:	40010000 	.word	0x40010000

08008654 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800865c:	f107 0310 	add.w	r3, r7, #16
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	609a      	str	r2, [r3, #8]
 8008668:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <HAL_CAN_MspInit+0x8c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d131      	bne.n	80086d8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008674:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <HAL_CAN_MspInit+0x90>)
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <HAL_CAN_MspInit+0x90>)
 800867a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800867e:	61d3      	str	r3, [r2, #28]
 8008680:	4b18      	ldr	r3, [pc, #96]	; (80086e4 <HAL_CAN_MspInit+0x90>)
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800868c:	4b15      	ldr	r3, [pc, #84]	; (80086e4 <HAL_CAN_MspInit+0x90>)
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	4a14      	ldr	r2, [pc, #80]	; (80086e4 <HAL_CAN_MspInit+0x90>)
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	6193      	str	r3, [r2, #24]
 8008698:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <HAL_CAN_MspInit+0x90>)
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	60bb      	str	r3, [r7, #8]
 80086a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80086a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b2:	f107 0310 	add.w	r3, r7, #16
 80086b6:	4619      	mov	r1, r3
 80086b8:	480b      	ldr	r0, [pc, #44]	; (80086e8 <HAL_CAN_MspInit+0x94>)
 80086ba:	f000 fd61 	bl	8009180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80086be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c4:	2302      	movs	r3, #2
 80086c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086c8:	2303      	movs	r3, #3
 80086ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086cc:	f107 0310 	add.w	r3, r7, #16
 80086d0:	4619      	mov	r1, r3
 80086d2:	4805      	ldr	r0, [pc, #20]	; (80086e8 <HAL_CAN_MspInit+0x94>)
 80086d4:	f000 fd54 	bl	8009180 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80086d8:	bf00      	nop
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	40006400 	.word	0x40006400
 80086e4:	40021000 	.word	0x40021000
 80086e8:	40010800 	.word	0x40010800

080086ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	609a      	str	r2, [r3, #8]
 8008700:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a15      	ldr	r2, [pc, #84]	; (800875c <HAL_I2C_MspInit+0x70>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d123      	bne.n	8008754 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800870c:	4b14      	ldr	r3, [pc, #80]	; (8008760 <HAL_I2C_MspInit+0x74>)
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	4a13      	ldr	r2, [pc, #76]	; (8008760 <HAL_I2C_MspInit+0x74>)
 8008712:	f043 0308 	orr.w	r3, r3, #8
 8008716:	6193      	str	r3, [r2, #24]
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <HAL_I2C_MspInit+0x74>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008724:	23c0      	movs	r3, #192	; 0xc0
 8008726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008728:	2312      	movs	r3, #18
 800872a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800872c:	2303      	movs	r3, #3
 800872e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008730:	f107 0310 	add.w	r3, r7, #16
 8008734:	4619      	mov	r1, r3
 8008736:	480b      	ldr	r0, [pc, #44]	; (8008764 <HAL_I2C_MspInit+0x78>)
 8008738:	f000 fd22 	bl	8009180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800873c:	4b08      	ldr	r3, [pc, #32]	; (8008760 <HAL_I2C_MspInit+0x74>)
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	4a07      	ldr	r2, [pc, #28]	; (8008760 <HAL_I2C_MspInit+0x74>)
 8008742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008746:	61d3      	str	r3, [r2, #28]
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <HAL_I2C_MspInit+0x74>)
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008754:	bf00      	nop
 8008756:	3720      	adds	r7, #32
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	40005400 	.word	0x40005400
 8008760:	40021000 	.word	0x40021000
 8008764:	40010c00 	.word	0x40010c00

08008768 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a0a      	ldr	r2, [pc, #40]	; (80087a0 <HAL_I2C_MspDeInit+0x38>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d10d      	bne.n	8008796 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800877a:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <HAL_I2C_MspDeInit+0x3c>)
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <HAL_I2C_MspDeInit+0x3c>)
 8008780:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008784:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008786:	2140      	movs	r1, #64	; 0x40
 8008788:	4807      	ldr	r0, [pc, #28]	; (80087a8 <HAL_I2C_MspDeInit+0x40>)
 800878a:	f000 fe8d 	bl	80094a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800878e:	2180      	movs	r1, #128	; 0x80
 8008790:	4805      	ldr	r0, [pc, #20]	; (80087a8 <HAL_I2C_MspDeInit+0x40>)
 8008792:	f000 fe89 	bl	80094a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40005400 	.word	0x40005400
 80087a4:	40021000 	.word	0x40021000
 80087a8:	40010c00 	.word	0x40010c00

080087ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <HAL_TIM_Base_MspInit+0x44>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d113      	bne.n	80087e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <HAL_TIM_Base_MspInit+0x48>)
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <HAL_TIM_Base_MspInit+0x48>)
 80087c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087c8:	6193      	str	r3, [r2, #24]
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <HAL_TIM_Base_MspInit+0x48>)
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80087d6:	2200      	movs	r2, #0
 80087d8:	2100      	movs	r1, #0
 80087da:	2019      	movs	r0, #25
 80087dc:	f000 fb57 	bl	8008e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80087e0:	2019      	movs	r0, #25
 80087e2:	f000 fb70 	bl	8008ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40012c00 	.word	0x40012c00
 80087f4:	40021000 	.word	0x40021000

080087f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008800:	f107 0310 	add.w	r3, r7, #16
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	609a      	str	r2, [r3, #8]
 800880c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a20      	ldr	r2, [pc, #128]	; (8008894 <HAL_UART_MspInit+0x9c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d139      	bne.n	800888c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008818:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <HAL_UART_MspInit+0xa0>)
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_UART_MspInit+0xa0>)
 800881e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008822:	6193      	str	r3, [r2, #24]
 8008824:	4b1c      	ldr	r3, [pc, #112]	; (8008898 <HAL_UART_MspInit+0xa0>)
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008830:	4b19      	ldr	r3, [pc, #100]	; (8008898 <HAL_UART_MspInit+0xa0>)
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	4a18      	ldr	r2, [pc, #96]	; (8008898 <HAL_UART_MspInit+0xa0>)
 8008836:	f043 0304 	orr.w	r3, r3, #4
 800883a:	6193      	str	r3, [r2, #24]
 800883c:	4b16      	ldr	r3, [pc, #88]	; (8008898 <HAL_UART_MspInit+0xa0>)
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	60bb      	str	r3, [r7, #8]
 8008846:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800884c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800884e:	2302      	movs	r3, #2
 8008850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008852:	2303      	movs	r3, #3
 8008854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008856:	f107 0310 	add.w	r3, r7, #16
 800885a:	4619      	mov	r1, r3
 800885c:	480f      	ldr	r0, [pc, #60]	; (800889c <HAL_UART_MspInit+0xa4>)
 800885e:	f000 fc8f 	bl	8009180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008868:	2300      	movs	r3, #0
 800886a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886c:	2300      	movs	r3, #0
 800886e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008870:	f107 0310 	add.w	r3, r7, #16
 8008874:	4619      	mov	r1, r3
 8008876:	4809      	ldr	r0, [pc, #36]	; (800889c <HAL_UART_MspInit+0xa4>)
 8008878:	f000 fc82 	bl	8009180 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800887c:	2200      	movs	r2, #0
 800887e:	2100      	movs	r1, #0
 8008880:	2025      	movs	r0, #37	; 0x25
 8008882:	f000 fb04 	bl	8008e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008886:	2025      	movs	r0, #37	; 0x25
 8008888:	f000 fb1d 	bl	8008ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800888c:	bf00      	nop
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40013800 	.word	0x40013800
 8008898:	40021000 	.word	0x40021000
 800889c:	40010800 	.word	0x40010800

080088a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80088a4:	e7fe      	b.n	80088a4 <NMI_Handler+0x4>

080088a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088a6:	b480      	push	{r7}
 80088a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088aa:	e7fe      	b.n	80088aa <HardFault_Handler+0x4>

080088ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088b0:	e7fe      	b.n	80088b0 <MemManage_Handler+0x4>

080088b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088b2:	b480      	push	{r7}
 80088b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088b6:	e7fe      	b.n	80088b6 <BusFault_Handler+0x4>

080088b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088bc:	e7fe      	b.n	80088bc <UsageFault_Handler+0x4>

080088be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088be:	b480      	push	{r7}
 80088c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088c2:	bf00      	nop
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr

080088ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088ca:	b480      	push	{r7}
 80088cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088ce:	bf00      	nop
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr

080088d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088d6:	b480      	push	{r7}
 80088d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088da:	bf00      	nop
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088e6:	f000 f8bf 	bl	8008a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088ea:	bf00      	nop
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80088f4:	4802      	ldr	r0, [pc, #8]	; (8008900 <TIM1_UP_IRQHandler+0x10>)
 80088f6:	f002 fdcd 	bl	800b494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80088fa:	bf00      	nop
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000408 	.word	0x20000408

08008904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008908:	4802      	ldr	r0, [pc, #8]	; (8008914 <USART1_IRQHandler+0x10>)
 800890a:	f003 f9ef 	bl	800bcec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800890e:	bf00      	nop
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000450 	.word	0x20000450

08008918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008920:	4a14      	ldr	r2, [pc, #80]	; (8008974 <_sbrk+0x5c>)
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <_sbrk+0x60>)
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800892c:	4b13      	ldr	r3, [pc, #76]	; (800897c <_sbrk+0x64>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d102      	bne.n	800893a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008934:	4b11      	ldr	r3, [pc, #68]	; (800897c <_sbrk+0x64>)
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <_sbrk+0x68>)
 8008938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <_sbrk+0x64>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	429a      	cmp	r2, r3
 8008946:	d207      	bcs.n	8008958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008948:	f004 f86a 	bl	800ca20 <__errno>
 800894c:	4603      	mov	r3, r0
 800894e:	220c      	movs	r2, #12
 8008950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008956:	e009      	b.n	800896c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008958:	4b08      	ldr	r3, [pc, #32]	; (800897c <_sbrk+0x64>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <_sbrk+0x64>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4413      	add	r3, r2
 8008966:	4a05      	ldr	r2, [pc, #20]	; (800897c <_sbrk+0x64>)
 8008968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	2000c000 	.word	0x2000c000
 8008978:	00000400 	.word	0x00000400
 800897c:	20000498 	.word	0x20000498
 8008980:	200005e8 	.word	0x200005e8

08008984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008988:	bf00      	nop
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008990:	480c      	ldr	r0, [pc, #48]	; (80089c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008992:	490d      	ldr	r1, [pc, #52]	; (80089c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008994:	4a0d      	ldr	r2, [pc, #52]	; (80089cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008998:	e002      	b.n	80089a0 <LoopCopyDataInit>

0800899a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800899a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800899c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800899e:	3304      	adds	r3, #4

080089a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089a4:	d3f9      	bcc.n	800899a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089a6:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80089a8:	4c0a      	ldr	r4, [pc, #40]	; (80089d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80089aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089ac:	e001      	b.n	80089b2 <LoopFillZerobss>

080089ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089b0:	3204      	adds	r2, #4

080089b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089b4:	d3fb      	bcc.n	80089ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80089b6:	f7ff ffe5 	bl	8008984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80089ba:	f004 f837 	bl	800ca2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80089be:	f7ff fb9d 	bl	80080fc <main>
  bx lr
 80089c2:	4770      	bx	lr
  ldr r0, =_sdata
 80089c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089c8:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 80089cc:	0800e268 	.word	0x0800e268
  ldr r2, =_sbss
 80089d0:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 80089d4:	200005e8 	.word	0x200005e8

080089d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80089d8:	e7fe      	b.n	80089d8 <ADC1_2_IRQHandler>
	...

080089dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089e0:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <HAL_Init+0x28>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a07      	ldr	r2, [pc, #28]	; (8008a04 <HAL_Init+0x28>)
 80089e6:	f043 0310 	orr.w	r3, r3, #16
 80089ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089ec:	2003      	movs	r0, #3
 80089ee:	f000 fa43 	bl	8008e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089f2:	200f      	movs	r0, #15
 80089f4:	f000 f808 	bl	8008a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089f8:	f7ff fdfa 	bl	80085f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40022000 	.word	0x40022000

08008a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a10:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_InitTick+0x54>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <HAL_InitTick+0x58>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fa5b 	bl	8008ee2 <HAL_SYSTICK_Config>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e00e      	b.n	8008a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b0f      	cmp	r3, #15
 8008a3a:	d80a      	bhi.n	8008a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a44:	f000 fa23 	bl	8008e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a48:	4a06      	ldr	r2, [pc, #24]	; (8008a64 <HAL_InitTick+0x5c>)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e000      	b.n	8008a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	200000e0 	.word	0x200000e0
 8008a60:	200000e8 	.word	0x200000e8
 8008a64:	200000e4 	.word	0x200000e4

08008a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <HAL_IncTick+0x1c>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <HAL_IncTick+0x20>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4413      	add	r3, r2
 8008a78:	4a03      	ldr	r2, [pc, #12]	; (8008a88 <HAL_IncTick+0x20>)
 8008a7a:	6013      	str	r3, [r2, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr
 8008a84:	200000e8 	.word	0x200000e8
 8008a88:	2000049c 	.word	0x2000049c

08008a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a90:	4b02      	ldr	r3, [pc, #8]	; (8008a9c <HAL_GetTick+0x10>)
 8008a92:	681b      	ldr	r3, [r3, #0]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr
 8008a9c:	2000049c 	.word	0x2000049c

08008aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008aa8:	f7ff fff0 	bl	8008a8c <HAL_GetTick>
 8008aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab8:	d005      	beq.n	8008ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008aba:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <HAL_Delay+0x44>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ac6:	bf00      	nop
 8008ac8:	f7ff ffe0 	bl	8008a8c <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d8f7      	bhi.n	8008ac8 <HAL_Delay+0x28>
  {
  }
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	200000e8 	.word	0x200000e8

08008ae8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e0ed      	b.n	8008cd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fda4 	bl	8008654 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b1c:	f7ff ffb6 	bl	8008a8c <HAL_GetTick>
 8008b20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b22:	e012      	b.n	8008b4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b24:	f7ff ffb2 	bl	8008a8c <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b0a      	cmp	r3, #10
 8008b30:	d90b      	bls.n	8008b4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2205      	movs	r2, #5
 8008b42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e0c5      	b.n	8008cd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0e5      	beq.n	8008b24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0202 	bic.w	r2, r2, #2
 8008b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b68:	f7ff ff90 	bl	8008a8c <HAL_GetTick>
 8008b6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b6e:	e012      	b.n	8008b96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b70:	f7ff ff8c 	bl	8008a8c <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b0a      	cmp	r3, #10
 8008b7c:	d90b      	bls.n	8008b96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e09f      	b.n	8008cd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e5      	bne.n	8008b70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7e1b      	ldrb	r3, [r3, #24]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d108      	bne.n	8008bbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e007      	b.n	8008bce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7e5b      	ldrb	r3, [r3, #25]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d108      	bne.n	8008be8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	e007      	b.n	8008bf8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	7e9b      	ldrb	r3, [r3, #26]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d108      	bne.n	8008c12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0220 	orr.w	r2, r2, #32
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	e007      	b.n	8008c22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0220 	bic.w	r2, r2, #32
 8008c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7edb      	ldrb	r3, [r3, #27]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d108      	bne.n	8008c3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0210 	bic.w	r2, r2, #16
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e007      	b.n	8008c4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0210 	orr.w	r2, r2, #16
 8008c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	7f1b      	ldrb	r3, [r3, #28]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d108      	bne.n	8008c66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f042 0208 	orr.w	r2, r2, #8
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e007      	b.n	8008c76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0208 	bic.w	r2, r2, #8
 8008c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7f5b      	ldrb	r3, [r3, #29]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d108      	bne.n	8008c90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0204 	orr.w	r2, r2, #4
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	e007      	b.n	8008ca0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0204 	bic.w	r2, r2, #4
 8008c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	ea42 0103 	orr.w	r1, r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	1e5a      	subs	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <__NVIC_SetPriorityGrouping>:
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <__NVIC_SetPriorityGrouping+0x44>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d12:	4a04      	ldr	r2, [pc, #16]	; (8008d24 <__NVIC_SetPriorityGrouping+0x44>)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	60d3      	str	r3, [r2, #12]
}
 8008d18:	bf00      	nop
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	e000ed00 	.word	0xe000ed00

08008d28 <__NVIC_GetPriorityGrouping>:
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d2c:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <__NVIC_GetPriorityGrouping+0x18>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	0a1b      	lsrs	r3, r3, #8
 8008d32:	f003 0307 	and.w	r3, r3, #7
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000ed00 	.word	0xe000ed00

08008d44 <__NVIC_EnableIRQ>:
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	db0b      	blt.n	8008d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	f003 021f 	and.w	r2, r3, #31
 8008d5c:	4906      	ldr	r1, [pc, #24]	; (8008d78 <__NVIC_EnableIRQ+0x34>)
 8008d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d62:	095b      	lsrs	r3, r3, #5
 8008d64:	2001      	movs	r0, #1
 8008d66:	fa00 f202 	lsl.w	r2, r0, r2
 8008d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr
 8008d78:	e000e100 	.word	0xe000e100

08008d7c <__NVIC_SetPriority>:
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	db0a      	blt.n	8008da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	490c      	ldr	r1, [pc, #48]	; (8008dc8 <__NVIC_SetPriority+0x4c>)
 8008d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d9a:	0112      	lsls	r2, r2, #4
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	440b      	add	r3, r1
 8008da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008da4:	e00a      	b.n	8008dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	4908      	ldr	r1, [pc, #32]	; (8008dcc <__NVIC_SetPriority+0x50>)
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	3b04      	subs	r3, #4
 8008db4:	0112      	lsls	r2, r2, #4
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	440b      	add	r3, r1
 8008dba:	761a      	strb	r2, [r3, #24]
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bc80      	pop	{r7}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	e000e100 	.word	0xe000e100
 8008dcc:	e000ed00 	.word	0xe000ed00

08008dd0 <NVIC_EncodePriority>:
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b089      	sub	sp, #36	; 0x24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f1c3 0307 	rsb	r3, r3, #7
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	bf28      	it	cs
 8008dee:	2304      	movcs	r3, #4
 8008df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	3304      	adds	r3, #4
 8008df6:	2b06      	cmp	r3, #6
 8008df8:	d902      	bls.n	8008e00 <NVIC_EncodePriority+0x30>
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	3b03      	subs	r3, #3
 8008dfe:	e000      	b.n	8008e02 <NVIC_EncodePriority+0x32>
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0e:	43da      	mvns	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	401a      	ands	r2, r3
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e22:	43d9      	mvns	r1, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e28:	4313      	orrs	r3, r2
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3724      	adds	r7, #36	; 0x24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e44:	d301      	bcc.n	8008e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e46:	2301      	movs	r3, #1
 8008e48:	e00f      	b.n	8008e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e4a:	4a0a      	ldr	r2, [pc, #40]	; (8008e74 <SysTick_Config+0x40>)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e52:	210f      	movs	r1, #15
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e58:	f7ff ff90 	bl	8008d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <SysTick_Config+0x40>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e62:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <SysTick_Config+0x40>)
 8008e64:	2207      	movs	r2, #7
 8008e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	e000e010 	.word	0xe000e010

08008e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff ff2d 	bl	8008ce0 <__NVIC_SetPriorityGrouping>
}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b086      	sub	sp, #24
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	4603      	mov	r3, r0
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	607a      	str	r2, [r7, #4]
 8008e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ea0:	f7ff ff42 	bl	8008d28 <__NVIC_GetPriorityGrouping>
 8008ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	6978      	ldr	r0, [r7, #20]
 8008eac:	f7ff ff90 	bl	8008dd0 <NVIC_EncodePriority>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff ff5f 	bl	8008d7c <__NVIC_SetPriority>
}
 8008ebe:	bf00      	nop
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	4603      	mov	r3, r0
 8008ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff ff35 	bl	8008d44 <__NVIC_EnableIRQ>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ffa2 	bl	8008e34 <SysTick_Config>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d008      	beq.n	8008f24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2204      	movs	r2, #4
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e020      	b.n	8008f66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 020e 	bic.w	r2, r2, #14
 8008f32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0201 	bic.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8008f52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bc80      	pop	{r7}
 8008f6e:	4770      	bx	lr

08008f70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d005      	beq.n	8008f94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	73fb      	strb	r3, [r7, #15]
 8008f92:	e0d6      	b.n	8009142 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 020e 	bic.w	r2, r2, #14
 8008fa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4b64      	ldr	r3, [pc, #400]	; (800914c <HAL_DMA_Abort_IT+0x1dc>)
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d958      	bls.n	8009072 <HAL_DMA_Abort_IT+0x102>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a62      	ldr	r2, [pc, #392]	; (8009150 <HAL_DMA_Abort_IT+0x1e0>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d04f      	beq.n	800906a <HAL_DMA_Abort_IT+0xfa>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a61      	ldr	r2, [pc, #388]	; (8009154 <HAL_DMA_Abort_IT+0x1e4>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d048      	beq.n	8009066 <HAL_DMA_Abort_IT+0xf6>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a5f      	ldr	r2, [pc, #380]	; (8009158 <HAL_DMA_Abort_IT+0x1e8>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d040      	beq.n	8009060 <HAL_DMA_Abort_IT+0xf0>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a5e      	ldr	r2, [pc, #376]	; (800915c <HAL_DMA_Abort_IT+0x1ec>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d038      	beq.n	800905a <HAL_DMA_Abort_IT+0xea>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a5c      	ldr	r2, [pc, #368]	; (8009160 <HAL_DMA_Abort_IT+0x1f0>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d030      	beq.n	8009054 <HAL_DMA_Abort_IT+0xe4>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a5b      	ldr	r2, [pc, #364]	; (8009164 <HAL_DMA_Abort_IT+0x1f4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d028      	beq.n	800904e <HAL_DMA_Abort_IT+0xde>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a52      	ldr	r2, [pc, #328]	; (800914c <HAL_DMA_Abort_IT+0x1dc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d020      	beq.n	8009048 <HAL_DMA_Abort_IT+0xd8>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a57      	ldr	r2, [pc, #348]	; (8009168 <HAL_DMA_Abort_IT+0x1f8>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d019      	beq.n	8009044 <HAL_DMA_Abort_IT+0xd4>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a55      	ldr	r2, [pc, #340]	; (800916c <HAL_DMA_Abort_IT+0x1fc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d012      	beq.n	8009040 <HAL_DMA_Abort_IT+0xd0>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a54      	ldr	r2, [pc, #336]	; (8009170 <HAL_DMA_Abort_IT+0x200>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00a      	beq.n	800903a <HAL_DMA_Abort_IT+0xca>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a52      	ldr	r2, [pc, #328]	; (8009174 <HAL_DMA_Abort_IT+0x204>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d102      	bne.n	8009034 <HAL_DMA_Abort_IT+0xc4>
 800902e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009032:	e01b      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009038:	e018      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 800903a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800903e:	e015      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009040:	2310      	movs	r3, #16
 8009042:	e013      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009044:	2301      	movs	r3, #1
 8009046:	e011      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800904c:	e00e      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 800904e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009052:	e00b      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009058:	e008      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 800905a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800905e:	e005      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009064:	e002      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 8009066:	2310      	movs	r3, #16
 8009068:	e000      	b.n	800906c <HAL_DMA_Abort_IT+0xfc>
 800906a:	2301      	movs	r3, #1
 800906c:	4a42      	ldr	r2, [pc, #264]	; (8009178 <HAL_DMA_Abort_IT+0x208>)
 800906e:	6053      	str	r3, [r2, #4]
 8009070:	e057      	b.n	8009122 <HAL_DMA_Abort_IT+0x1b2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a36      	ldr	r2, [pc, #216]	; (8009150 <HAL_DMA_Abort_IT+0x1e0>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d04f      	beq.n	800911c <HAL_DMA_Abort_IT+0x1ac>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a34      	ldr	r2, [pc, #208]	; (8009154 <HAL_DMA_Abort_IT+0x1e4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d048      	beq.n	8009118 <HAL_DMA_Abort_IT+0x1a8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a33      	ldr	r2, [pc, #204]	; (8009158 <HAL_DMA_Abort_IT+0x1e8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d040      	beq.n	8009112 <HAL_DMA_Abort_IT+0x1a2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a31      	ldr	r2, [pc, #196]	; (800915c <HAL_DMA_Abort_IT+0x1ec>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d038      	beq.n	800910c <HAL_DMA_Abort_IT+0x19c>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a30      	ldr	r2, [pc, #192]	; (8009160 <HAL_DMA_Abort_IT+0x1f0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d030      	beq.n	8009106 <HAL_DMA_Abort_IT+0x196>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a2e      	ldr	r2, [pc, #184]	; (8009164 <HAL_DMA_Abort_IT+0x1f4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d028      	beq.n	8009100 <HAL_DMA_Abort_IT+0x190>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a26      	ldr	r2, [pc, #152]	; (800914c <HAL_DMA_Abort_IT+0x1dc>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d020      	beq.n	80090fa <HAL_DMA_Abort_IT+0x18a>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a2a      	ldr	r2, [pc, #168]	; (8009168 <HAL_DMA_Abort_IT+0x1f8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d019      	beq.n	80090f6 <HAL_DMA_Abort_IT+0x186>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a29      	ldr	r2, [pc, #164]	; (800916c <HAL_DMA_Abort_IT+0x1fc>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d012      	beq.n	80090f2 <HAL_DMA_Abort_IT+0x182>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a27      	ldr	r2, [pc, #156]	; (8009170 <HAL_DMA_Abort_IT+0x200>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d00a      	beq.n	80090ec <HAL_DMA_Abort_IT+0x17c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a26      	ldr	r2, [pc, #152]	; (8009174 <HAL_DMA_Abort_IT+0x204>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d102      	bne.n	80090e6 <HAL_DMA_Abort_IT+0x176>
 80090e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090e4:	e01b      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 80090e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090ea:	e018      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 80090ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090f0:	e015      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 80090f2:	2310      	movs	r3, #16
 80090f4:	e013      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e011      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 80090fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090fe:	e00e      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 8009100:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009104:	e00b      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 8009106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800910a:	e008      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 800910c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009110:	e005      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 8009112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009116:	e002      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 8009118:	2310      	movs	r3, #16
 800911a:	e000      	b.n	800911e <HAL_DMA_Abort_IT+0x1ae>
 800911c:	2301      	movs	r3, #1
 800911e:	4a17      	ldr	r2, [pc, #92]	; (800917c <HAL_DMA_Abort_IT+0x20c>)
 8009120:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
    } 
  }
  return status;
 8009142:	7bfb      	ldrb	r3, [r7, #15]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40020080 	.word	0x40020080
 8009150:	40020008 	.word	0x40020008
 8009154:	4002001c 	.word	0x4002001c
 8009158:	40020030 	.word	0x40020030
 800915c:	40020044 	.word	0x40020044
 8009160:	40020058 	.word	0x40020058
 8009164:	4002006c 	.word	0x4002006c
 8009168:	40020408 	.word	0x40020408
 800916c:	4002041c 	.word	0x4002041c
 8009170:	40020430 	.word	0x40020430
 8009174:	40020444 	.word	0x40020444
 8009178:	40020400 	.word	0x40020400
 800917c:	40020000 	.word	0x40020000

08009180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009180:	b480      	push	{r7}
 8009182:	b08b      	sub	sp, #44	; 0x2c
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800918a:	2300      	movs	r3, #0
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800918e:	2300      	movs	r3, #0
 8009190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009192:	e179      	b.n	8009488 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009194:	2201      	movs	r2, #1
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	4013      	ands	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	f040 8168 	bne.w	8009482 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	4a96      	ldr	r2, [pc, #600]	; (8009410 <HAL_GPIO_Init+0x290>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d05e      	beq.n	800927a <HAL_GPIO_Init+0xfa>
 80091bc:	4a94      	ldr	r2, [pc, #592]	; (8009410 <HAL_GPIO_Init+0x290>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d875      	bhi.n	80092ae <HAL_GPIO_Init+0x12e>
 80091c2:	4a94      	ldr	r2, [pc, #592]	; (8009414 <HAL_GPIO_Init+0x294>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d058      	beq.n	800927a <HAL_GPIO_Init+0xfa>
 80091c8:	4a92      	ldr	r2, [pc, #584]	; (8009414 <HAL_GPIO_Init+0x294>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d86f      	bhi.n	80092ae <HAL_GPIO_Init+0x12e>
 80091ce:	4a92      	ldr	r2, [pc, #584]	; (8009418 <HAL_GPIO_Init+0x298>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d052      	beq.n	800927a <HAL_GPIO_Init+0xfa>
 80091d4:	4a90      	ldr	r2, [pc, #576]	; (8009418 <HAL_GPIO_Init+0x298>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d869      	bhi.n	80092ae <HAL_GPIO_Init+0x12e>
 80091da:	4a90      	ldr	r2, [pc, #576]	; (800941c <HAL_GPIO_Init+0x29c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d04c      	beq.n	800927a <HAL_GPIO_Init+0xfa>
 80091e0:	4a8e      	ldr	r2, [pc, #568]	; (800941c <HAL_GPIO_Init+0x29c>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d863      	bhi.n	80092ae <HAL_GPIO_Init+0x12e>
 80091e6:	4a8e      	ldr	r2, [pc, #568]	; (8009420 <HAL_GPIO_Init+0x2a0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d046      	beq.n	800927a <HAL_GPIO_Init+0xfa>
 80091ec:	4a8c      	ldr	r2, [pc, #560]	; (8009420 <HAL_GPIO_Init+0x2a0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d85d      	bhi.n	80092ae <HAL_GPIO_Init+0x12e>
 80091f2:	2b12      	cmp	r3, #18
 80091f4:	d82a      	bhi.n	800924c <HAL_GPIO_Init+0xcc>
 80091f6:	2b12      	cmp	r3, #18
 80091f8:	d859      	bhi.n	80092ae <HAL_GPIO_Init+0x12e>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <HAL_GPIO_Init+0x80>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	0800927b 	.word	0x0800927b
 8009204:	08009255 	.word	0x08009255
 8009208:	08009267 	.word	0x08009267
 800920c:	080092a9 	.word	0x080092a9
 8009210:	080092af 	.word	0x080092af
 8009214:	080092af 	.word	0x080092af
 8009218:	080092af 	.word	0x080092af
 800921c:	080092af 	.word	0x080092af
 8009220:	080092af 	.word	0x080092af
 8009224:	080092af 	.word	0x080092af
 8009228:	080092af 	.word	0x080092af
 800922c:	080092af 	.word	0x080092af
 8009230:	080092af 	.word	0x080092af
 8009234:	080092af 	.word	0x080092af
 8009238:	080092af 	.word	0x080092af
 800923c:	080092af 	.word	0x080092af
 8009240:	080092af 	.word	0x080092af
 8009244:	0800925d 	.word	0x0800925d
 8009248:	08009271 	.word	0x08009271
 800924c:	4a75      	ldr	r2, [pc, #468]	; (8009424 <HAL_GPIO_Init+0x2a4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009252:	e02c      	b.n	80092ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	623b      	str	r3, [r7, #32]
          break;
 800925a:	e029      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	3304      	adds	r3, #4
 8009262:	623b      	str	r3, [r7, #32]
          break;
 8009264:	e024      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	3308      	adds	r3, #8
 800926c:	623b      	str	r3, [r7, #32]
          break;
 800926e:	e01f      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	330c      	adds	r3, #12
 8009276:	623b      	str	r3, [r7, #32]
          break;
 8009278:	e01a      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009282:	2304      	movs	r3, #4
 8009284:	623b      	str	r3, [r7, #32]
          break;
 8009286:	e013      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d105      	bne.n	800929c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009290:	2308      	movs	r3, #8
 8009292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	611a      	str	r2, [r3, #16]
          break;
 800929a:	e009      	b.n	80092b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800929c:	2308      	movs	r3, #8
 800929e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	615a      	str	r2, [r3, #20]
          break;
 80092a6:	e003      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80092a8:	2300      	movs	r3, #0
 80092aa:	623b      	str	r3, [r7, #32]
          break;
 80092ac:	e000      	b.n	80092b0 <HAL_GPIO_Init+0x130>
          break;
 80092ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2bff      	cmp	r3, #255	; 0xff
 80092b4:	d801      	bhi.n	80092ba <HAL_GPIO_Init+0x13a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	e001      	b.n	80092be <HAL_GPIO_Init+0x13e>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3304      	adds	r3, #4
 80092be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2bff      	cmp	r3, #255	; 0xff
 80092c4:	d802      	bhi.n	80092cc <HAL_GPIO_Init+0x14c>
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	e002      	b.n	80092d2 <HAL_GPIO_Init+0x152>
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	3b08      	subs	r3, #8
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	210f      	movs	r1, #15
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	fa01 f303 	lsl.w	r3, r1, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	401a      	ands	r2, r3
 80092e4:	6a39      	ldr	r1, [r7, #32]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ec:	431a      	orrs	r2, r3
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80c1 	beq.w	8009482 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009300:	4b49      	ldr	r3, [pc, #292]	; (8009428 <HAL_GPIO_Init+0x2a8>)
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	4a48      	ldr	r2, [pc, #288]	; (8009428 <HAL_GPIO_Init+0x2a8>)
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	6193      	str	r3, [r2, #24]
 800930c:	4b46      	ldr	r3, [pc, #280]	; (8009428 <HAL_GPIO_Init+0x2a8>)
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009318:	4a44      	ldr	r2, [pc, #272]	; (800942c <HAL_GPIO_Init+0x2ac>)
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	089b      	lsrs	r3, r3, #2
 800931e:	3302      	adds	r3, #2
 8009320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	220f      	movs	r2, #15
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	43db      	mvns	r3, r3
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4013      	ands	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a3c      	ldr	r2, [pc, #240]	; (8009430 <HAL_GPIO_Init+0x2b0>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d01f      	beq.n	8009384 <HAL_GPIO_Init+0x204>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a3b      	ldr	r2, [pc, #236]	; (8009434 <HAL_GPIO_Init+0x2b4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d019      	beq.n	8009380 <HAL_GPIO_Init+0x200>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a3a      	ldr	r2, [pc, #232]	; (8009438 <HAL_GPIO_Init+0x2b8>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d013      	beq.n	800937c <HAL_GPIO_Init+0x1fc>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a39      	ldr	r2, [pc, #228]	; (800943c <HAL_GPIO_Init+0x2bc>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d00d      	beq.n	8009378 <HAL_GPIO_Init+0x1f8>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a38      	ldr	r2, [pc, #224]	; (8009440 <HAL_GPIO_Init+0x2c0>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <HAL_GPIO_Init+0x1f4>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a37      	ldr	r2, [pc, #220]	; (8009444 <HAL_GPIO_Init+0x2c4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d101      	bne.n	8009370 <HAL_GPIO_Init+0x1f0>
 800936c:	2305      	movs	r3, #5
 800936e:	e00a      	b.n	8009386 <HAL_GPIO_Init+0x206>
 8009370:	2306      	movs	r3, #6
 8009372:	e008      	b.n	8009386 <HAL_GPIO_Init+0x206>
 8009374:	2304      	movs	r3, #4
 8009376:	e006      	b.n	8009386 <HAL_GPIO_Init+0x206>
 8009378:	2303      	movs	r3, #3
 800937a:	e004      	b.n	8009386 <HAL_GPIO_Init+0x206>
 800937c:	2302      	movs	r3, #2
 800937e:	e002      	b.n	8009386 <HAL_GPIO_Init+0x206>
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <HAL_GPIO_Init+0x206>
 8009384:	2300      	movs	r3, #0
 8009386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009388:	f002 0203 	and.w	r2, r2, #3
 800938c:	0092      	lsls	r2, r2, #2
 800938e:	4093      	lsls	r3, r2
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009396:	4925      	ldr	r1, [pc, #148]	; (800942c <HAL_GPIO_Init+0x2ac>)
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	089b      	lsrs	r3, r3, #2
 800939c:	3302      	adds	r3, #2
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d006      	beq.n	80093be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	4924      	ldr	r1, [pc, #144]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	608b      	str	r3, [r1, #8]
 80093bc:	e006      	b.n	80093cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80093be:	4b22      	ldr	r3, [pc, #136]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	43db      	mvns	r3, r3
 80093c6:	4920      	ldr	r1, [pc, #128]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d006      	beq.n	80093e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	491a      	ldr	r1, [pc, #104]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60cb      	str	r3, [r1, #12]
 80093e4:	e006      	b.n	80093f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80093e6:	4b18      	ldr	r3, [pc, #96]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	43db      	mvns	r3, r3
 80093ee:	4916      	ldr	r1, [pc, #88]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 80093f0:	4013      	ands	r3, r2
 80093f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d025      	beq.n	800944c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009400:	4b11      	ldr	r3, [pc, #68]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	4910      	ldr	r1, [pc, #64]	; (8009448 <HAL_GPIO_Init+0x2c8>)
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	4313      	orrs	r3, r2
 800940a:	604b      	str	r3, [r1, #4]
 800940c:	e025      	b.n	800945a <HAL_GPIO_Init+0x2da>
 800940e:	bf00      	nop
 8009410:	10320000 	.word	0x10320000
 8009414:	10310000 	.word	0x10310000
 8009418:	10220000 	.word	0x10220000
 800941c:	10210000 	.word	0x10210000
 8009420:	10120000 	.word	0x10120000
 8009424:	10110000 	.word	0x10110000
 8009428:	40021000 	.word	0x40021000
 800942c:	40010000 	.word	0x40010000
 8009430:	40010800 	.word	0x40010800
 8009434:	40010c00 	.word	0x40010c00
 8009438:	40011000 	.word	0x40011000
 800943c:	40011400 	.word	0x40011400
 8009440:	40011800 	.word	0x40011800
 8009444:	40011c00 	.word	0x40011c00
 8009448:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800944c:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <HAL_GPIO_Init+0x324>)
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	43db      	mvns	r3, r3
 8009454:	4913      	ldr	r1, [pc, #76]	; (80094a4 <HAL_GPIO_Init+0x324>)
 8009456:	4013      	ands	r3, r2
 8009458:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d006      	beq.n	8009474 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <HAL_GPIO_Init+0x324>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	490e      	ldr	r1, [pc, #56]	; (80094a4 <HAL_GPIO_Init+0x324>)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	4313      	orrs	r3, r2
 8009470:	600b      	str	r3, [r1, #0]
 8009472:	e006      	b.n	8009482 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009474:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <HAL_GPIO_Init+0x324>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	43db      	mvns	r3, r3
 800947c:	4909      	ldr	r1, [pc, #36]	; (80094a4 <HAL_GPIO_Init+0x324>)
 800947e:	4013      	ands	r3, r2
 8009480:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	3301      	adds	r3, #1
 8009486:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	fa22 f303 	lsr.w	r3, r2, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	f47f ae7e 	bne.w	8009194 <HAL_GPIO_Init+0x14>
  }
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	372c      	adds	r7, #44	; 0x2c
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr
 80094a4:	40010400 	.word	0x40010400

080094a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b089      	sub	sp, #36	; 0x24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80094b6:	e0a6      	b.n	8009606 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80094b8:	2201      	movs	r2, #1
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	fa02 f303 	lsl.w	r3, r2, r3
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	4013      	ands	r3, r2
 80094c4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8099 	beq.w	8009600 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80094ce:	4a54      	ldr	r2, [pc, #336]	; (8009620 <HAL_GPIO_DeInit+0x178>)
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	089b      	lsrs	r3, r3, #2
 80094d4:	3302      	adds	r3, #2
 80094d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094da:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	220f      	movs	r2, #15
 80094e6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4013      	ands	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a4c      	ldr	r2, [pc, #304]	; (8009624 <HAL_GPIO_DeInit+0x17c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d01f      	beq.n	8009538 <HAL_GPIO_DeInit+0x90>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a4b      	ldr	r2, [pc, #300]	; (8009628 <HAL_GPIO_DeInit+0x180>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d019      	beq.n	8009534 <HAL_GPIO_DeInit+0x8c>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a4a      	ldr	r2, [pc, #296]	; (800962c <HAL_GPIO_DeInit+0x184>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d013      	beq.n	8009530 <HAL_GPIO_DeInit+0x88>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a49      	ldr	r2, [pc, #292]	; (8009630 <HAL_GPIO_DeInit+0x188>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00d      	beq.n	800952c <HAL_GPIO_DeInit+0x84>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a48      	ldr	r2, [pc, #288]	; (8009634 <HAL_GPIO_DeInit+0x18c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d007      	beq.n	8009528 <HAL_GPIO_DeInit+0x80>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a47      	ldr	r2, [pc, #284]	; (8009638 <HAL_GPIO_DeInit+0x190>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d101      	bne.n	8009524 <HAL_GPIO_DeInit+0x7c>
 8009520:	2305      	movs	r3, #5
 8009522:	e00a      	b.n	800953a <HAL_GPIO_DeInit+0x92>
 8009524:	2306      	movs	r3, #6
 8009526:	e008      	b.n	800953a <HAL_GPIO_DeInit+0x92>
 8009528:	2304      	movs	r3, #4
 800952a:	e006      	b.n	800953a <HAL_GPIO_DeInit+0x92>
 800952c:	2303      	movs	r3, #3
 800952e:	e004      	b.n	800953a <HAL_GPIO_DeInit+0x92>
 8009530:	2302      	movs	r3, #2
 8009532:	e002      	b.n	800953a <HAL_GPIO_DeInit+0x92>
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <HAL_GPIO_DeInit+0x92>
 8009538:	2300      	movs	r3, #0
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	f002 0203 	and.w	r2, r2, #3
 8009540:	0092      	lsls	r2, r2, #2
 8009542:	4093      	lsls	r3, r2
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	429a      	cmp	r2, r3
 8009548:	d132      	bne.n	80095b0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800954a:	4b3c      	ldr	r3, [pc, #240]	; (800963c <HAL_GPIO_DeInit+0x194>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	43db      	mvns	r3, r3
 8009552:	493a      	ldr	r1, [pc, #232]	; (800963c <HAL_GPIO_DeInit+0x194>)
 8009554:	4013      	ands	r3, r2
 8009556:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009558:	4b38      	ldr	r3, [pc, #224]	; (800963c <HAL_GPIO_DeInit+0x194>)
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	43db      	mvns	r3, r3
 8009560:	4936      	ldr	r1, [pc, #216]	; (800963c <HAL_GPIO_DeInit+0x194>)
 8009562:	4013      	ands	r3, r2
 8009564:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009566:	4b35      	ldr	r3, [pc, #212]	; (800963c <HAL_GPIO_DeInit+0x194>)
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	43db      	mvns	r3, r3
 800956e:	4933      	ldr	r1, [pc, #204]	; (800963c <HAL_GPIO_DeInit+0x194>)
 8009570:	4013      	ands	r3, r2
 8009572:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009574:	4b31      	ldr	r3, [pc, #196]	; (800963c <HAL_GPIO_DeInit+0x194>)
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	43db      	mvns	r3, r3
 800957c:	492f      	ldr	r1, [pc, #188]	; (800963c <HAL_GPIO_DeInit+0x194>)
 800957e:	4013      	ands	r3, r2
 8009580:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	220f      	movs	r2, #15
 800958c:	fa02 f303 	lsl.w	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009592:	4a23      	ldr	r2, [pc, #140]	; (8009620 <HAL_GPIO_DeInit+0x178>)
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	089b      	lsrs	r3, r3, #2
 8009598:	3302      	adds	r3, #2
 800959a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	43da      	mvns	r2, r3
 80095a2:	481f      	ldr	r0, [pc, #124]	; (8009620 <HAL_GPIO_DeInit+0x178>)
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	089b      	lsrs	r3, r3, #2
 80095a8:	400a      	ands	r2, r1
 80095aa:	3302      	adds	r3, #2
 80095ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2bff      	cmp	r3, #255	; 0xff
 80095b4:	d801      	bhi.n	80095ba <HAL_GPIO_DeInit+0x112>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	e001      	b.n	80095be <HAL_GPIO_DeInit+0x116>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3304      	adds	r3, #4
 80095be:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2bff      	cmp	r3, #255	; 0xff
 80095c4:	d802      	bhi.n	80095cc <HAL_GPIO_DeInit+0x124>
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	e002      	b.n	80095d2 <HAL_GPIO_DeInit+0x12a>
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	3b08      	subs	r3, #8
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	210f      	movs	r1, #15
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	fa01 f303 	lsl.w	r3, r1, r3
 80095e0:	43db      	mvns	r3, r3
 80095e2:	401a      	ands	r2, r3
 80095e4:	2104      	movs	r1, #4
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ec:	431a      	orrs	r2, r3
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	3301      	adds	r3, #1
 8009604:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	fa22 f303 	lsr.w	r3, r2, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	f47f af52 	bne.w	80094b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	3724      	adds	r7, #36	; 0x24
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr
 8009620:	40010000 	.word	0x40010000
 8009624:	40010800 	.word	0x40010800
 8009628:	40010c00 	.word	0x40010c00
 800962c:	40011000 	.word	0x40011000
 8009630:	40011400 	.word	0x40011400
 8009634:	40011800 	.word	0x40011800
 8009638:	40011c00 	.word	0x40011c00
 800963c:	40010400 	.word	0x40010400

08009640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	887b      	ldrh	r3, [r7, #2]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009658:	2301      	movs	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]
 800965c:	e001      	b.n	8009662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr

0800966e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	807b      	strh	r3, [r7, #2]
 800967a:	4613      	mov	r3, r2
 800967c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800967e:	787b      	ldrb	r3, [r7, #1]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009684:	887a      	ldrh	r2, [r7, #2]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800968a:	e003      	b.n	8009694 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800968c:	887b      	ldrh	r3, [r7, #2]
 800968e:	041a      	lsls	r2, r3, #16
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	611a      	str	r2, [r3, #16]
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	bc80      	pop	{r7}
 800969c:	4770      	bx	lr

0800969e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800969e:	b480      	push	{r7}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80096b0:	887a      	ldrh	r2, [r7, #2]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4013      	ands	r3, r2
 80096b6:	041a      	lsls	r2, r3, #16
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	43d9      	mvns	r1, r3
 80096bc:	887b      	ldrh	r3, [r7, #2]
 80096be:	400b      	ands	r3, r1
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	611a      	str	r2, [r3, #16]
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr

080096d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e12b      	b.n	800993a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fe fff8 	bl	80086ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2224      	movs	r2, #36	; 0x24
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0201 	bic.w	r2, r2, #1
 8009712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009734:	f001 fdb8 	bl	800b2a8 <HAL_RCC_GetPCLK1Freq>
 8009738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	4a81      	ldr	r2, [pc, #516]	; (8009944 <HAL_I2C_Init+0x274>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d807      	bhi.n	8009754 <HAL_I2C_Init+0x84>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4a80      	ldr	r2, [pc, #512]	; (8009948 <HAL_I2C_Init+0x278>)
 8009748:	4293      	cmp	r3, r2
 800974a:	bf94      	ite	ls
 800974c:	2301      	movls	r3, #1
 800974e:	2300      	movhi	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	e006      	b.n	8009762 <HAL_I2C_Init+0x92>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4a7d      	ldr	r2, [pc, #500]	; (800994c <HAL_I2C_Init+0x27c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	bf94      	ite	ls
 800975c:	2301      	movls	r3, #1
 800975e:	2300      	movhi	r3, #0
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e0e7      	b.n	800993a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a78      	ldr	r2, [pc, #480]	; (8009950 <HAL_I2C_Init+0x280>)
 800976e:	fba2 2303 	umull	r2, r3, r2, r3
 8009772:	0c9b      	lsrs	r3, r3, #18
 8009774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4a6a      	ldr	r2, [pc, #424]	; (8009944 <HAL_I2C_Init+0x274>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d802      	bhi.n	80097a4 <HAL_I2C_Init+0xd4>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	3301      	adds	r3, #1
 80097a2:	e009      	b.n	80097b8 <HAL_I2C_Init+0xe8>
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	4a69      	ldr	r2, [pc, #420]	; (8009954 <HAL_I2C_Init+0x284>)
 80097b0:	fba2 2303 	umull	r2, r3, r2, r3
 80097b4:	099b      	lsrs	r3, r3, #6
 80097b6:	3301      	adds	r3, #1
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	430b      	orrs	r3, r1
 80097be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80097ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	495c      	ldr	r1, [pc, #368]	; (8009944 <HAL_I2C_Init+0x274>)
 80097d4:	428b      	cmp	r3, r1
 80097d6:	d819      	bhi.n	800980c <HAL_I2C_Init+0x13c>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	1e59      	subs	r1, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80097e6:	1c59      	adds	r1, r3, #1
 80097e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80097ec:	400b      	ands	r3, r1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <HAL_I2C_Init+0x138>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	1e59      	subs	r1, r3, #1
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009800:	3301      	adds	r3, #1
 8009802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009806:	e051      	b.n	80098ac <HAL_I2C_Init+0x1dc>
 8009808:	2304      	movs	r3, #4
 800980a:	e04f      	b.n	80098ac <HAL_I2C_Init+0x1dc>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d111      	bne.n	8009838 <HAL_I2C_Init+0x168>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	1e58      	subs	r0, r3, #1
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	440b      	add	r3, r1
 8009822:	fbb0 f3f3 	udiv	r3, r0, r3
 8009826:	3301      	adds	r3, #1
 8009828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf0c      	ite	eq
 8009830:	2301      	moveq	r3, #1
 8009832:	2300      	movne	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	e012      	b.n	800985e <HAL_I2C_Init+0x18e>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	1e58      	subs	r0, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6859      	ldr	r1, [r3, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	0099      	lsls	r1, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	fbb0 f3f3 	udiv	r3, r0, r3
 800984e:	3301      	adds	r3, #1
 8009850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009854:	2b00      	cmp	r3, #0
 8009856:	bf0c      	ite	eq
 8009858:	2301      	moveq	r3, #1
 800985a:	2300      	movne	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <HAL_I2C_Init+0x196>
 8009862:	2301      	movs	r3, #1
 8009864:	e022      	b.n	80098ac <HAL_I2C_Init+0x1dc>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10e      	bne.n	800988c <HAL_I2C_Init+0x1bc>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1e58      	subs	r0, r3, #1
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6859      	ldr	r1, [r3, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	440b      	add	r3, r1
 800987c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009880:	3301      	adds	r3, #1
 8009882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800988a:	e00f      	b.n	80098ac <HAL_I2C_Init+0x1dc>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	1e58      	subs	r0, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6859      	ldr	r1, [r3, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	0099      	lsls	r1, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	fbb0 f3f3 	udiv	r3, r0, r3
 80098a2:	3301      	adds	r3, #1
 80098a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	6809      	ldr	r1, [r1, #0]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69da      	ldr	r2, [r3, #28]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80098da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6911      	ldr	r1, [r2, #16]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	68d2      	ldr	r2, [r2, #12]
 80098e6:	4311      	orrs	r1, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6812      	ldr	r2, [r2, #0]
 80098ec:	430b      	orrs	r3, r1
 80098ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695a      	ldr	r2, [r3, #20]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	000186a0 	.word	0x000186a0
 8009948:	001e847f 	.word	0x001e847f
 800994c:	003d08ff 	.word	0x003d08ff
 8009950:	431bde83 	.word	0x431bde83
 8009954:	10624dd3 	.word	0x10624dd3

08009958 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e021      	b.n	80099ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2224      	movs	r2, #36	; 0x24
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0201 	bic.w	r2, r2, #1
 8009980:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7fe fef0 	bl	8008768 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af02      	add	r7, sp, #8
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	461a      	mov	r2, r3
 80099c4:	460b      	mov	r3, r1
 80099c6:	817b      	strh	r3, [r7, #10]
 80099c8:	4613      	mov	r3, r2
 80099ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099cc:	f7ff f85e 	bl	8008a8c <HAL_GetTick>
 80099d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b20      	cmp	r3, #32
 80099dc:	f040 80e0 	bne.w	8009ba0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	2319      	movs	r3, #25
 80099e6:	2201      	movs	r2, #1
 80099e8:	4970      	ldr	r1, [pc, #448]	; (8009bac <HAL_I2C_Master_Transmit+0x1f4>)
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fe5c 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80099f6:	2302      	movs	r3, #2
 80099f8:	e0d3      	b.n	8009ba2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_I2C_Master_Transmit+0x50>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e0cc      	b.n	8009ba2 <HAL_I2C_Master_Transmit+0x1ea>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d007      	beq.n	8009a2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0201 	orr.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2221      	movs	r2, #33	; 0x21
 8009a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2210      	movs	r2, #16
 8009a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	893a      	ldrh	r2, [r7, #8]
 8009a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	4a50      	ldr	r2, [pc, #320]	; (8009bb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8009a6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a70:	8979      	ldrh	r1, [r7, #10]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	6a3a      	ldr	r2, [r7, #32]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fc16 	bl	800a2a8 <I2C_MasterRequestWrite>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e08d      	b.n	8009ba2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	613b      	str	r3, [r7, #16]
 8009a9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009a9c:	e066      	b.n	8009b6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	6a39      	ldr	r1, [r7, #32]
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 ff1a 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00d      	beq.n	8009aca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d107      	bne.n	8009ac6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e06b      	b.n	8009ba2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	781a      	ldrb	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d11b      	bne.n	8009b40 <HAL_I2C_Master_Transmit+0x188>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d017      	beq.n	8009b40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	6a39      	ldr	r1, [r7, #32]
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 ff11 	bl	800a96c <I2C_WaitOnBTFFlagUntilTimeout>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00d      	beq.n	8009b6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d107      	bne.n	8009b68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e01a      	b.n	8009ba2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d194      	bne.n	8009a9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e000      	b.n	8009ba2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009ba0:	2302      	movs	r3, #2
  }
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	00100002 	.word	0x00100002
 8009bb0:	ffff0000 	.word	0xffff0000

08009bb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	817b      	strh	r3, [r7, #10]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	813b      	strh	r3, [r7, #8]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009bce:	f7fe ff5d 	bl	8008a8c <HAL_GetTick>
 8009bd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	f040 80d9 	bne.w	8009d94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2319      	movs	r3, #25
 8009be8:	2201      	movs	r2, #1
 8009bea:	496d      	ldr	r1, [pc, #436]	; (8009da0 <HAL_I2C_Mem_Write+0x1ec>)
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 fd5b 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e0cc      	b.n	8009d96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d101      	bne.n	8009c0a <HAL_I2C_Mem_Write+0x56>
 8009c06:	2302      	movs	r3, #2
 8009c08:	e0c5      	b.n	8009d96 <HAL_I2C_Mem_Write+0x1e2>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d007      	beq.n	8009c30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2221      	movs	r2, #33	; 0x21
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2240      	movs	r2, #64	; 0x40
 8009c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a3a      	ldr	r2, [r7, #32]
 8009c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4a4d      	ldr	r2, [pc, #308]	; (8009da4 <HAL_I2C_Mem_Write+0x1f0>)
 8009c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c72:	88f8      	ldrh	r0, [r7, #6]
 8009c74:	893a      	ldrh	r2, [r7, #8]
 8009c76:	8979      	ldrh	r1, [r7, #10]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	4603      	mov	r3, r0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fb92 	bl	800a3ac <I2C_RequestMemoryWrite>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d052      	beq.n	8009d34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e081      	b.n	8009d96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 fe20 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00d      	beq.n	8009cbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	d107      	bne.n	8009cba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e06b      	b.n	8009d96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d11b      	bne.n	8009d34 <HAL_I2C_Mem_Write+0x180>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d017      	beq.n	8009d34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1aa      	bne.n	8009c92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fe13 	bl	800a96c <I2C_WaitOnBTFFlagUntilTimeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00d      	beq.n	8009d68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d107      	bne.n	8009d64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e016      	b.n	8009d96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e000      	b.n	8009d96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009d94:	2302      	movs	r3, #2
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	00100002 	.word	0x00100002
 8009da4:	ffff0000 	.word	0xffff0000

08009da8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08c      	sub	sp, #48	; 0x30
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	461a      	mov	r2, r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	817b      	strh	r3, [r7, #10]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	813b      	strh	r3, [r7, #8]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009dc6:	f7fe fe61 	bl	8008a8c <HAL_GetTick>
 8009dca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	f040 8244 	bne.w	800a262 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	2319      	movs	r3, #25
 8009de0:	2201      	movs	r2, #1
 8009de2:	4982      	ldr	r1, [pc, #520]	; (8009fec <HAL_I2C_Mem_Read+0x244>)
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 fc5f 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009df0:	2302      	movs	r3, #2
 8009df2:	e237      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_I2C_Mem_Read+0x5a>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e230      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d007      	beq.n	8009e28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0201 	orr.w	r2, r2, #1
 8009e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2222      	movs	r2, #34	; 0x22
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2240      	movs	r2, #64	; 0x40
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4a62      	ldr	r2, [pc, #392]	; (8009ff0 <HAL_I2C_Mem_Read+0x248>)
 8009e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e6a:	88f8      	ldrh	r0, [r7, #6]
 8009e6c:	893a      	ldrh	r2, [r7, #8]
 8009e6e:	8979      	ldrh	r1, [r7, #10]
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	4603      	mov	r3, r0
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 fb2c 	bl	800a4d8 <I2C_RequestMemoryRead>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e1ec      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d113      	bne.n	8009eba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	e1c0      	b.n	800a23c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d11e      	bne.n	8009f00 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ed2:	b672      	cpsid	i
}
 8009ed4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61bb      	str	r3, [r7, #24]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009efc:	b662      	cpsie	i
}
 8009efe:	e035      	b.n	8009f6c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d11e      	bne.n	8009f46 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f18:	b672      	cpsid	i
}
 8009f1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f42:	b662      	cpsie	i
}
 8009f44:	e012      	b.n	8009f6c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f56:	2300      	movs	r3, #0
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	613b      	str	r3, [r7, #16]
 8009f6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009f6c:	e166      	b.n	800a23c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	f200 811f 	bhi.w	800a1b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d123      	bne.n	8009fc8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 fd39 	bl	800a9fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e167      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fc6:	e139      	b.n	800a23c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d152      	bne.n	800a076 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4906      	ldr	r1, [pc, #24]	; (8009ff4 <HAL_I2C_Mem_Read+0x24c>)
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fb64 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d008      	beq.n	8009ff8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e13c      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
 8009fea:	bf00      	nop
 8009fec:	00100002 	.word	0x00100002
 8009ff0:	ffff0000 	.word	0xffff0000
 8009ff4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ff8:	b672      	cpsid	i
}
 8009ffa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a00a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	691a      	ldr	r2, [r3, #16]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a028:	3b01      	subs	r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a034:	b29b      	uxth	r3, r3
 800a036:	3b01      	subs	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a03e:	b662      	cpsie	i
}
 800a040:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	b2d2      	uxtb	r2, r2
 800a04e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a05e:	3b01      	subs	r3, #1
 800a060:	b29a      	uxth	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	3b01      	subs	r3, #1
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a074:	e0e2      	b.n	800a23c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	2200      	movs	r2, #0
 800a07e:	497b      	ldr	r1, [pc, #492]	; (800a26c <HAL_I2C_Mem_Read+0x4c4>)
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fb11 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e0e9      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a09e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0a0:	b672      	cpsid	i
}
 800a0a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a0d6:	4b66      	ldr	r3, [pc, #408]	; (800a270 <HAL_I2C_Mem_Read+0x4c8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	08db      	lsrs	r3, r3, #3
 800a0dc:	4a65      	ldr	r2, [pc, #404]	; (800a274 <HAL_I2C_Mem_Read+0x4cc>)
 800a0de:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e2:	0a1a      	lsrs	r2, r3, #8
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	00da      	lsls	r2, r3, #3
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d118      	bne.n	800a12e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2220      	movs	r2, #32
 800a106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	f043 0220 	orr.w	r2, r3, #32
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a11e:	b662      	cpsie	i
}
 800a120:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e09a      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b04      	cmp	r3, #4
 800a13a:	d1d9      	bne.n	800a0f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a14a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	691a      	ldr	r2, [r3, #16]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a168:	3b01      	subs	r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a174:	b29b      	uxth	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a17e:	b662      	cpsie	i
}
 800a180:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1b4:	e042      	b.n	800a23c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fc1e 	bl	800a9fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e04c      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691a      	ldr	r2, [r3, #16]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	d118      	bne.n	800a23c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	691a      	ldr	r2, [r3, #16]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	b2d2      	uxtb	r2, r2
 800a216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a226:	3b01      	subs	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a232:	b29b      	uxth	r3, r3
 800a234:	3b01      	subs	r3, #1
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a240:	2b00      	cmp	r3, #0
 800a242:	f47f ae94 	bne.w	8009f6e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2220      	movs	r2, #32
 800a24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	e000      	b.n	800a264 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a262:	2302      	movs	r3, #2
  }
}
 800a264:	4618      	mov	r0, r3
 800a266:	3728      	adds	r7, #40	; 0x28
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	00010004 	.word	0x00010004
 800a270:	200000e0 	.word	0x200000e0
 800a274:	14f8b589 	.word	0x14f8b589

0800a278 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a286:	b2db      	uxtb	r3, r3
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr

0800a292 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bc80      	pop	{r7}
 800a2a6:	4770      	bx	lr

0800a2a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af02      	add	r7, sp, #8
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	607a      	str	r2, [r7, #4]
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d006      	beq.n	800a2d2 <I2C_MasterRequestWrite+0x2a>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d003      	beq.n	800a2d2 <I2C_MasterRequestWrite+0x2a>
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2d0:	d108      	bne.n	800a2e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	e00b      	b.n	800a2fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	2b12      	cmp	r3, #18
 800a2ea:	d107      	bne.n	800a2fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f9cd 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00d      	beq.n	800a330 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a322:	d103      	bne.n	800a32c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e035      	b.n	800a39c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a338:	d108      	bne.n	800a34c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a33a:	897b      	ldrh	r3, [r7, #10]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a348:	611a      	str	r2, [r3, #16]
 800a34a:	e01b      	b.n	800a384 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a34c:	897b      	ldrh	r3, [r7, #10]
 800a34e:	11db      	asrs	r3, r3, #7
 800a350:	b2db      	uxtb	r3, r3
 800a352:	f003 0306 	and.w	r3, r3, #6
 800a356:	b2db      	uxtb	r3, r3
 800a358:	f063 030f 	orn	r3, r3, #15
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	490e      	ldr	r1, [pc, #56]	; (800a3a4 <I2C_MasterRequestWrite+0xfc>)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 fa16 	bl	800a79c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e010      	b.n	800a39c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a37a:	897b      	ldrh	r3, [r7, #10]
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4907      	ldr	r1, [pc, #28]	; (800a3a8 <I2C_MasterRequestWrite+0x100>)
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 fa06 	bl	800a79c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	00010008 	.word	0x00010008
 800a3a8:	00010002 	.word	0x00010002

0800a3ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	817b      	strh	r3, [r7, #10]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	813b      	strh	r3, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f960 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00d      	beq.n	800a40a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fc:	d103      	bne.n	800a406 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e05f      	b.n	800a4ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a40a:	897b      	ldrh	r3, [r7, #10]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	6a3a      	ldr	r2, [r7, #32]
 800a41e:	492d      	ldr	r1, [pc, #180]	; (800a4d4 <I2C_RequestMemoryWrite+0x128>)
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 f9bb 	bl	800a79c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e04c      	b.n	800a4ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a448:	6a39      	ldr	r1, [r7, #32]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fa46 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00d      	beq.n	800a472 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d107      	bne.n	800a46e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a46c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e02b      	b.n	800a4ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d105      	bne.n	800a484 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a478:	893b      	ldrh	r3, [r7, #8]
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	611a      	str	r2, [r3, #16]
 800a482:	e021      	b.n	800a4c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a484:	893b      	ldrh	r3, [r7, #8]
 800a486:	0a1b      	lsrs	r3, r3, #8
 800a488:	b29b      	uxth	r3, r3
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a494:	6a39      	ldr	r1, [r7, #32]
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f000 fa20 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00d      	beq.n	800a4be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d107      	bne.n	800a4ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e005      	b.n	800a4ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4be:	893b      	ldrh	r3, [r7, #8]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	00010002 	.word	0x00010002

0800a4d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af02      	add	r7, sp, #8
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	817b      	strh	r3, [r7, #10]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	813b      	strh	r3, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a500:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	2200      	movs	r2, #0
 800a51a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 f8c2 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00d      	beq.n	800a546 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a538:	d103      	bne.n	800a542 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e0aa      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a546:	897b      	ldrh	r3, [r7, #10]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	6a3a      	ldr	r2, [r7, #32]
 800a55a:	4952      	ldr	r1, [pc, #328]	; (800a6a4 <I2C_RequestMemoryRead+0x1cc>)
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 f91d 	bl	800a79c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e097      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a584:	6a39      	ldr	r1, [r7, #32]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 f9a8 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00d      	beq.n	800a5ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	2b04      	cmp	r3, #4
 800a598:	d107      	bne.n	800a5aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e076      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5ae:	88fb      	ldrh	r3, [r7, #6]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d105      	bne.n	800a5c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5b4:	893b      	ldrh	r3, [r7, #8]
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	611a      	str	r2, [r3, #16]
 800a5be:	e021      	b.n	800a604 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a5c0:	893b      	ldrh	r3, [r7, #8]
 800a5c2:	0a1b      	lsrs	r3, r3, #8
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d0:	6a39      	ldr	r1, [r7, #32]
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 f982 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00d      	beq.n	800a5fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d107      	bne.n	800a5f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e050      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5fa:	893b      	ldrh	r3, [r7, #8]
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a606:	6a39      	ldr	r1, [r7, #32]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f967 	bl	800a8dc <I2C_WaitOnTXEFlagUntilTimeout>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00d      	beq.n	800a630 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d107      	bne.n	800a62c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a62a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e035      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a63e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	2200      	movs	r2, #0
 800a648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f82b 	bl	800a6a8 <I2C_WaitOnFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a666:	d103      	bne.n	800a670 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a66e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e013      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a674:	897b      	ldrh	r3, [r7, #10]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	6a3a      	ldr	r2, [r7, #32]
 800a688:	4906      	ldr	r1, [pc, #24]	; (800a6a4 <I2C_RequestMemoryRead+0x1cc>)
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f886 	bl	800a79c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	00010002 	.word	0x00010002

0800a6a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	603b      	str	r3, [r7, #0]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6b8:	e048      	b.n	800a74c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c0:	d044      	beq.n	800a74c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6c2:	f7fe f9e3 	bl	8008a8c <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d302      	bcc.n	800a6d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d139      	bne.n	800a74c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	0c1b      	lsrs	r3, r3, #16
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d10d      	bne.n	800a6fe <I2C_WaitOnFlagUntilTimeout+0x56>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	43da      	mvns	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bf0c      	ite	eq
 800a6f4:	2301      	moveq	r3, #1
 800a6f6:	2300      	movne	r3, #0
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	e00c      	b.n	800a718 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	43da      	mvns	r2, r3
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	4013      	ands	r3, r2
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bf0c      	ite	eq
 800a710:	2301      	moveq	r3, #1
 800a712:	2300      	movne	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	461a      	mov	r2, r3
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d116      	bne.n	800a74c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2220      	movs	r2, #32
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	f043 0220 	orr.w	r2, r3, #32
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e023      	b.n	800a794 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	0c1b      	lsrs	r3, r3, #16
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b01      	cmp	r3, #1
 800a754:	d10d      	bne.n	800a772 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	43da      	mvns	r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4013      	ands	r3, r2
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	bf0c      	ite	eq
 800a768:	2301      	moveq	r3, #1
 800a76a:	2300      	movne	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	e00c      	b.n	800a78c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	43da      	mvns	r2, r3
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4013      	ands	r3, r2
 800a77e:	b29b      	uxth	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	bf0c      	ite	eq
 800a784:	2301      	moveq	r3, #1
 800a786:	2300      	movne	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d093      	beq.n	800a6ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7aa:	e071      	b.n	800a890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ba:	d123      	bne.n	800a804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f0:	f043 0204 	orr.w	r2, r3, #4
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e067      	b.n	800a8d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a80a:	d041      	beq.n	800a890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80c:	f7fe f93e 	bl	8008a8c <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d302      	bcc.n	800a822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d136      	bne.n	800a890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	0c1b      	lsrs	r3, r3, #16
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d10c      	bne.n	800a846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	43da      	mvns	r2, r3
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	4013      	ands	r3, r2
 800a838:	b29b      	uxth	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bf14      	ite	ne
 800a83e:	2301      	movne	r3, #1
 800a840:	2300      	moveq	r3, #0
 800a842:	b2db      	uxtb	r3, r3
 800a844:	e00b      	b.n	800a85e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	43da      	mvns	r2, r3
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	4013      	ands	r3, r2
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	bf14      	ite	ne
 800a858:	2301      	movne	r3, #1
 800a85a:	2300      	moveq	r3, #0
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d016      	beq.n	800a890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	f043 0220 	orr.w	r2, r3, #32
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e021      	b.n	800a8d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	0c1b      	lsrs	r3, r3, #16
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b01      	cmp	r3, #1
 800a898:	d10c      	bne.n	800a8b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	43da      	mvns	r2, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	bf14      	ite	ne
 800a8ac:	2301      	movne	r3, #1
 800a8ae:	2300      	moveq	r3, #0
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	e00b      	b.n	800a8cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	43da      	mvns	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	bf14      	ite	ne
 800a8c6:	2301      	movne	r3, #1
 800a8c8:	2300      	moveq	r3, #0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f47f af6d 	bne.w	800a7ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8e8:	e034      	b.n	800a954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 f8e3 	bl	800aab6 <I2C_IsAcknowledgeFailed>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e034      	b.n	800a964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a900:	d028      	beq.n	800a954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a902:	f7fe f8c3 	bl	8008a8c <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d302      	bcc.n	800a918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d11d      	bne.n	800a954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a922:	2b80      	cmp	r3, #128	; 0x80
 800a924:	d016      	beq.n	800a954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2220      	movs	r2, #32
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a940:	f043 0220 	orr.w	r2, r3, #32
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e007      	b.n	800a964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a95e:	2b80      	cmp	r3, #128	; 0x80
 800a960:	d1c3      	bne.n	800a8ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a978:	e034      	b.n	800a9e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 f89b 	bl	800aab6 <I2C_IsAcknowledgeFailed>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e034      	b.n	800a9f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a990:	d028      	beq.n	800a9e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a992:	f7fe f87b 	bl	8008a8c <HAL_GetTick>
 800a996:	4602      	mov	r2, r0
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d302      	bcc.n	800a9a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d11d      	bne.n	800a9e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	f003 0304 	and.w	r3, r3, #4
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d016      	beq.n	800a9e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d0:	f043 0220 	orr.w	r2, r3, #32
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e007      	b.n	800a9f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d1c3      	bne.n	800a97a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa08:	e049      	b.n	800aa9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	f003 0310 	and.w	r3, r3, #16
 800aa14:	2b10      	cmp	r3, #16
 800aa16:	d119      	bne.n	800aa4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0210 	mvn.w	r2, #16
 800aa20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e030      	b.n	800aaae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa4c:	f7fe f81e 	bl	8008a8c <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d302      	bcc.n	800aa62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d11d      	bne.n	800aa9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	d016      	beq.n	800aa9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	f043 0220 	orr.w	r2, r3, #32
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e007      	b.n	800aaae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa8:	2b40      	cmp	r3, #64	; 0x40
 800aaaa:	d1ae      	bne.n	800aa0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aacc:	d11b      	bne.n	800ab06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aad6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	f043 0204 	orr.w	r2, r3, #4
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	4770      	bx	lr
	...

0800ab14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e272      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 8087 	beq.w	800ac42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab34:	4b92      	ldr	r3, [pc, #584]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f003 030c 	and.w	r3, r3, #12
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d00c      	beq.n	800ab5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab40:	4b8f      	ldr	r3, [pc, #572]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f003 030c 	and.w	r3, r3, #12
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d112      	bne.n	800ab72 <HAL_RCC_OscConfig+0x5e>
 800ab4c:	4b8c      	ldr	r3, [pc, #560]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab58:	d10b      	bne.n	800ab72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab5a:	4b89      	ldr	r3, [pc, #548]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d06c      	beq.n	800ac40 <HAL_RCC_OscConfig+0x12c>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d168      	bne.n	800ac40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e24c      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab7a:	d106      	bne.n	800ab8a <HAL_RCC_OscConfig+0x76>
 800ab7c:	4b80      	ldr	r3, [pc, #512]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a7f      	ldr	r2, [pc, #508]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	e02e      	b.n	800abe8 <HAL_RCC_OscConfig+0xd4>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10c      	bne.n	800abac <HAL_RCC_OscConfig+0x98>
 800ab92:	4b7b      	ldr	r3, [pc, #492]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a7a      	ldr	r2, [pc, #488]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ab98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	4b78      	ldr	r3, [pc, #480]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a77      	ldr	r2, [pc, #476]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800aba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	e01d      	b.n	800abe8 <HAL_RCC_OscConfig+0xd4>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abb4:	d10c      	bne.n	800abd0 <HAL_RCC_OscConfig+0xbc>
 800abb6:	4b72      	ldr	r3, [pc, #456]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a71      	ldr	r2, [pc, #452]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	4b6f      	ldr	r3, [pc, #444]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a6e      	ldr	r2, [pc, #440]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	e00b      	b.n	800abe8 <HAL_RCC_OscConfig+0xd4>
 800abd0:	4b6b      	ldr	r3, [pc, #428]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a6a      	ldr	r2, [pc, #424]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	4b68      	ldr	r3, [pc, #416]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a67      	ldr	r2, [pc, #412]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800abe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d013      	beq.n	800ac18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abf0:	f7fd ff4c 	bl	8008a8c <HAL_GetTick>
 800abf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abf6:	e008      	b.n	800ac0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abf8:	f7fd ff48 	bl	8008a8c <HAL_GetTick>
 800abfc:	4602      	mov	r2, r0
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	2b64      	cmp	r3, #100	; 0x64
 800ac04:	d901      	bls.n	800ac0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e200      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac0a:	4b5d      	ldr	r3, [pc, #372]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0f0      	beq.n	800abf8 <HAL_RCC_OscConfig+0xe4>
 800ac16:	e014      	b.n	800ac42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac18:	f7fd ff38 	bl	8008a8c <HAL_GetTick>
 800ac1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac1e:	e008      	b.n	800ac32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac20:	f7fd ff34 	bl	8008a8c <HAL_GetTick>
 800ac24:	4602      	mov	r2, r0
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	2b64      	cmp	r3, #100	; 0x64
 800ac2c:	d901      	bls.n	800ac32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e1ec      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac32:	4b53      	ldr	r3, [pc, #332]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f0      	bne.n	800ac20 <HAL_RCC_OscConfig+0x10c>
 800ac3e:	e000      	b.n	800ac42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0302 	and.w	r3, r3, #2
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d063      	beq.n	800ad16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac4e:	4b4c      	ldr	r3, [pc, #304]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f003 030c 	and.w	r3, r3, #12
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00b      	beq.n	800ac72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ac5a:	4b49      	ldr	r3, [pc, #292]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f003 030c 	and.w	r3, r3, #12
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d11c      	bne.n	800aca0 <HAL_RCC_OscConfig+0x18c>
 800ac66:	4b46      	ldr	r3, [pc, #280]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d116      	bne.n	800aca0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac72:	4b43      	ldr	r3, [pc, #268]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <HAL_RCC_OscConfig+0x176>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d001      	beq.n	800ac8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e1c0      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac8a:	4b3d      	ldr	r3, [pc, #244]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4939      	ldr	r1, [pc, #228]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac9e:	e03a      	b.n	800ad16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d020      	beq.n	800acea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aca8:	4b36      	ldr	r3, [pc, #216]	; (800ad84 <HAL_RCC_OscConfig+0x270>)
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acae:	f7fd feed 	bl	8008a8c <HAL_GetTick>
 800acb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acb4:	e008      	b.n	800acc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acb6:	f7fd fee9 	bl	8008a8c <HAL_GetTick>
 800acba:	4602      	mov	r2, r0
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d901      	bls.n	800acc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800acc4:	2303      	movs	r3, #3
 800acc6:	e1a1      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acc8:	4b2d      	ldr	r3, [pc, #180]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0f0      	beq.n	800acb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acd4:	4b2a      	ldr	r3, [pc, #168]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	00db      	lsls	r3, r3, #3
 800ace2:	4927      	ldr	r1, [pc, #156]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	600b      	str	r3, [r1, #0]
 800ace8:	e015      	b.n	800ad16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acea:	4b26      	ldr	r3, [pc, #152]	; (800ad84 <HAL_RCC_OscConfig+0x270>)
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acf0:	f7fd fecc 	bl	8008a8c <HAL_GetTick>
 800acf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acf6:	e008      	b.n	800ad0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acf8:	f7fd fec8 	bl	8008a8c <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d901      	bls.n	800ad0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e180      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1f0      	bne.n	800acf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0308 	and.w	r3, r3, #8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d03a      	beq.n	800ad98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d019      	beq.n	800ad5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad2a:	4b17      	ldr	r3, [pc, #92]	; (800ad88 <HAL_RCC_OscConfig+0x274>)
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad30:	f7fd feac 	bl	8008a8c <HAL_GetTick>
 800ad34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad36:	e008      	b.n	800ad4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad38:	f7fd fea8 	bl	8008a8c <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d901      	bls.n	800ad4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ad46:	2303      	movs	r3, #3
 800ad48:	e160      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <HAL_RCC_OscConfig+0x26c>)
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0f0      	beq.n	800ad38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ad56:	2001      	movs	r0, #1
 800ad58:	f000 face 	bl	800b2f8 <RCC_Delay>
 800ad5c:	e01c      	b.n	800ad98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad5e:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <HAL_RCC_OscConfig+0x274>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad64:	f7fd fe92 	bl	8008a8c <HAL_GetTick>
 800ad68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad6a:	e00f      	b.n	800ad8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad6c:	f7fd fe8e 	bl	8008a8c <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d908      	bls.n	800ad8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e146      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
 800ad7e:	bf00      	nop
 800ad80:	40021000 	.word	0x40021000
 800ad84:	42420000 	.word	0x42420000
 800ad88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad8c:	4b92      	ldr	r3, [pc, #584]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e9      	bne.n	800ad6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0304 	and.w	r3, r3, #4
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 80a6 	beq.w	800aef2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ada6:	2300      	movs	r3, #0
 800ada8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adaa:	4b8b      	ldr	r3, [pc, #556]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10d      	bne.n	800add2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800adb6:	4b88      	ldr	r3, [pc, #544]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	4a87      	ldr	r2, [pc, #540]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800adbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adc0:	61d3      	str	r3, [r2, #28]
 800adc2:	4b85      	ldr	r3, [pc, #532]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adca:	60bb      	str	r3, [r7, #8]
 800adcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800adce:	2301      	movs	r3, #1
 800add0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800add2:	4b82      	ldr	r3, [pc, #520]	; (800afdc <HAL_RCC_OscConfig+0x4c8>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adda:	2b00      	cmp	r3, #0
 800addc:	d118      	bne.n	800ae10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800adde:	4b7f      	ldr	r3, [pc, #508]	; (800afdc <HAL_RCC_OscConfig+0x4c8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a7e      	ldr	r2, [pc, #504]	; (800afdc <HAL_RCC_OscConfig+0x4c8>)
 800ade4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ade8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adea:	f7fd fe4f 	bl	8008a8c <HAL_GetTick>
 800adee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adf2:	f7fd fe4b 	bl	8008a8c <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b64      	cmp	r3, #100	; 0x64
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e103      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae04:	4b75      	ldr	r3, [pc, #468]	; (800afdc <HAL_RCC_OscConfig+0x4c8>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0f0      	beq.n	800adf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d106      	bne.n	800ae26 <HAL_RCC_OscConfig+0x312>
 800ae18:	4b6f      	ldr	r3, [pc, #444]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	4a6e      	ldr	r2, [pc, #440]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae1e:	f043 0301 	orr.w	r3, r3, #1
 800ae22:	6213      	str	r3, [r2, #32]
 800ae24:	e02d      	b.n	800ae82 <HAL_RCC_OscConfig+0x36e>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10c      	bne.n	800ae48 <HAL_RCC_OscConfig+0x334>
 800ae2e:	4b6a      	ldr	r3, [pc, #424]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	4a69      	ldr	r2, [pc, #420]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae34:	f023 0301 	bic.w	r3, r3, #1
 800ae38:	6213      	str	r3, [r2, #32]
 800ae3a:	4b67      	ldr	r3, [pc, #412]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	4a66      	ldr	r2, [pc, #408]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae40:	f023 0304 	bic.w	r3, r3, #4
 800ae44:	6213      	str	r3, [r2, #32]
 800ae46:	e01c      	b.n	800ae82 <HAL_RCC_OscConfig+0x36e>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b05      	cmp	r3, #5
 800ae4e:	d10c      	bne.n	800ae6a <HAL_RCC_OscConfig+0x356>
 800ae50:	4b61      	ldr	r3, [pc, #388]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	4a60      	ldr	r2, [pc, #384]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae56:	f043 0304 	orr.w	r3, r3, #4
 800ae5a:	6213      	str	r3, [r2, #32]
 800ae5c:	4b5e      	ldr	r3, [pc, #376]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	4a5d      	ldr	r2, [pc, #372]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	6213      	str	r3, [r2, #32]
 800ae68:	e00b      	b.n	800ae82 <HAL_RCC_OscConfig+0x36e>
 800ae6a:	4b5b      	ldr	r3, [pc, #364]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	4a5a      	ldr	r2, [pc, #360]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae70:	f023 0301 	bic.w	r3, r3, #1
 800ae74:	6213      	str	r3, [r2, #32]
 800ae76:	4b58      	ldr	r3, [pc, #352]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	4a57      	ldr	r2, [pc, #348]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800ae7c:	f023 0304 	bic.w	r3, r3, #4
 800ae80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d015      	beq.n	800aeb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae8a:	f7fd fdff 	bl	8008a8c <HAL_GetTick>
 800ae8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae90:	e00a      	b.n	800aea8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae92:	f7fd fdfb 	bl	8008a8c <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d901      	bls.n	800aea8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e0b1      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aea8:	4b4b      	ldr	r3, [pc, #300]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0ee      	beq.n	800ae92 <HAL_RCC_OscConfig+0x37e>
 800aeb4:	e014      	b.n	800aee0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aeb6:	f7fd fde9 	bl	8008a8c <HAL_GetTick>
 800aeba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aebc:	e00a      	b.n	800aed4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aebe:	f7fd fde5 	bl	8008a8c <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aecc:	4293      	cmp	r3, r2
 800aece:	d901      	bls.n	800aed4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e09b      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aed4:	4b40      	ldr	r3, [pc, #256]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	f003 0302 	and.w	r3, r3, #2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1ee      	bne.n	800aebe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d105      	bne.n	800aef2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aee6:	4b3c      	ldr	r3, [pc, #240]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	4a3b      	ldr	r2, [pc, #236]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800aeec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aef0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8087 	beq.w	800b00a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aefc:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f003 030c 	and.w	r3, r3, #12
 800af04:	2b08      	cmp	r3, #8
 800af06:	d061      	beq.n	800afcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d146      	bne.n	800af9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af10:	4b33      	ldr	r3, [pc, #204]	; (800afe0 <HAL_RCC_OscConfig+0x4cc>)
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af16:	f7fd fdb9 	bl	8008a8c <HAL_GetTick>
 800af1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af1c:	e008      	b.n	800af30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af1e:	f7fd fdb5 	bl	8008a8c <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e06d      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af30:	4b29      	ldr	r3, [pc, #164]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1f0      	bne.n	800af1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af44:	d108      	bne.n	800af58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af46:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	4921      	ldr	r1, [pc, #132]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800af54:	4313      	orrs	r3, r2
 800af56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af58:	4b1f      	ldr	r3, [pc, #124]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a19      	ldr	r1, [r3, #32]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	430b      	orrs	r3, r1
 800af6a:	491b      	ldr	r1, [pc, #108]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800af6c:	4313      	orrs	r3, r2
 800af6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af70:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <HAL_RCC_OscConfig+0x4cc>)
 800af72:	2201      	movs	r2, #1
 800af74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af76:	f7fd fd89 	bl	8008a8c <HAL_GetTick>
 800af7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af7c:	e008      	b.n	800af90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af7e:	f7fd fd85 	bl	8008a8c <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d901      	bls.n	800af90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e03d      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0f0      	beq.n	800af7e <HAL_RCC_OscConfig+0x46a>
 800af9c:	e035      	b.n	800b00a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af9e:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <HAL_RCC_OscConfig+0x4cc>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afa4:	f7fd fd72 	bl	8008a8c <HAL_GetTick>
 800afa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800afaa:	e008      	b.n	800afbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afac:	f7fd fd6e 	bl	8008a8c <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d901      	bls.n	800afbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e026      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800afbe:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <HAL_RCC_OscConfig+0x4c4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1f0      	bne.n	800afac <HAL_RCC_OscConfig+0x498>
 800afca:	e01e      	b.n	800b00a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d107      	bne.n	800afe4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e019      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
 800afd8:	40021000 	.word	0x40021000
 800afdc:	40007000 	.word	0x40007000
 800afe0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800afe4:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <HAL_RCC_OscConfig+0x500>)
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d106      	bne.n	800b006 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b002:	429a      	cmp	r2, r3
 800b004:	d001      	beq.n	800b00a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e000      	b.n	800b00c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	40021000 	.word	0x40021000

0800b018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e0d0      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b02c:	4b6a      	ldr	r3, [pc, #424]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	429a      	cmp	r2, r3
 800b038:	d910      	bls.n	800b05c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b03a:	4b67      	ldr	r3, [pc, #412]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f023 0207 	bic.w	r2, r3, #7
 800b042:	4965      	ldr	r1, [pc, #404]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	4313      	orrs	r3, r2
 800b048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b04a:	4b63      	ldr	r3, [pc, #396]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 0307 	and.w	r3, r3, #7
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d001      	beq.n	800b05c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e0b8      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d020      	beq.n	800b0aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b074:	4b59      	ldr	r3, [pc, #356]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4a58      	ldr	r2, [pc, #352]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b07a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b07e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0308 	and.w	r3, r3, #8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d005      	beq.n	800b098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b08c:	4b53      	ldr	r3, [pc, #332]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	4a52      	ldr	r2, [pc, #328]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b098:	4b50      	ldr	r3, [pc, #320]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	494d      	ldr	r1, [pc, #308]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d040      	beq.n	800b138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d107      	bne.n	800b0ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0be:	4b47      	ldr	r3, [pc, #284]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d115      	bne.n	800b0f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e07f      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d107      	bne.n	800b0e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0d6:	4b41      	ldr	r3, [pc, #260]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e073      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0e6:	4b3d      	ldr	r3, [pc, #244]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e06b      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0f6:	4b39      	ldr	r3, [pc, #228]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f023 0203 	bic.w	r2, r3, #3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	4936      	ldr	r1, [pc, #216]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b104:	4313      	orrs	r3, r2
 800b106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b108:	f7fd fcc0 	bl	8008a8c <HAL_GetTick>
 800b10c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b10e:	e00a      	b.n	800b126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b110:	f7fd fcbc 	bl	8008a8c <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b11e:	4293      	cmp	r3, r2
 800b120:	d901      	bls.n	800b126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e053      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b126:	4b2d      	ldr	r3, [pc, #180]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f003 020c 	and.w	r2, r3, #12
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	429a      	cmp	r2, r3
 800b136:	d1eb      	bne.n	800b110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b138:	4b27      	ldr	r3, [pc, #156]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0307 	and.w	r3, r3, #7
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d210      	bcs.n	800b168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b146:	4b24      	ldr	r3, [pc, #144]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f023 0207 	bic.w	r2, r3, #7
 800b14e:	4922      	ldr	r1, [pc, #136]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	4313      	orrs	r3, r2
 800b154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b156:	4b20      	ldr	r3, [pc, #128]	; (800b1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d001      	beq.n	800b168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e032      	b.n	800b1ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b00      	cmp	r3, #0
 800b172:	d008      	beq.n	800b186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b174:	4b19      	ldr	r3, [pc, #100]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	4916      	ldr	r1, [pc, #88]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b182:	4313      	orrs	r3, r2
 800b184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0308 	and.w	r3, r3, #8
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d009      	beq.n	800b1a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b192:	4b12      	ldr	r3, [pc, #72]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	490e      	ldr	r1, [pc, #56]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b1a6:	f000 f821 	bl	800b1ec <HAL_RCC_GetSysClockFreq>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	4b0b      	ldr	r3, [pc, #44]	; (800b1dc <HAL_RCC_ClockConfig+0x1c4>)
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	091b      	lsrs	r3, r3, #4
 800b1b2:	f003 030f 	and.w	r3, r3, #15
 800b1b6:	490a      	ldr	r1, [pc, #40]	; (800b1e0 <HAL_RCC_ClockConfig+0x1c8>)
 800b1b8:	5ccb      	ldrb	r3, [r1, r3]
 800b1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b1be:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <HAL_RCC_ClockConfig+0x1cc>)
 800b1c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <HAL_RCC_ClockConfig+0x1d0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd fc1e 	bl	8008a08 <HAL_InitTick>

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	40022000 	.word	0x40022000
 800b1dc:	40021000 	.word	0x40021000
 800b1e0:	0800e1dc 	.word	0x0800e1dc
 800b1e4:	200000e0 	.word	0x200000e0
 800b1e8:	200000e4 	.word	0x200000e4

0800b1ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60bb      	str	r3, [r7, #8]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	2300      	movs	r3, #0
 800b200:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b206:	4b1e      	ldr	r3, [pc, #120]	; (800b280 <HAL_RCC_GetSysClockFreq+0x94>)
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f003 030c 	and.w	r3, r3, #12
 800b212:	2b04      	cmp	r3, #4
 800b214:	d002      	beq.n	800b21c <HAL_RCC_GetSysClockFreq+0x30>
 800b216:	2b08      	cmp	r3, #8
 800b218:	d003      	beq.n	800b222 <HAL_RCC_GetSysClockFreq+0x36>
 800b21a:	e027      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b21c:	4b19      	ldr	r3, [pc, #100]	; (800b284 <HAL_RCC_GetSysClockFreq+0x98>)
 800b21e:	613b      	str	r3, [r7, #16]
      break;
 800b220:	e027      	b.n	800b272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	0c9b      	lsrs	r3, r3, #18
 800b226:	f003 030f 	and.w	r3, r3, #15
 800b22a:	4a17      	ldr	r2, [pc, #92]	; (800b288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b22c:	5cd3      	ldrb	r3, [r2, r3]
 800b22e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d010      	beq.n	800b25c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b23a:	4b11      	ldr	r3, [pc, #68]	; (800b280 <HAL_RCC_GetSysClockFreq+0x94>)
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	0c5b      	lsrs	r3, r3, #17
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	4a11      	ldr	r2, [pc, #68]	; (800b28c <HAL_RCC_GetSysClockFreq+0xa0>)
 800b246:	5cd3      	ldrb	r3, [r2, r3]
 800b248:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a0d      	ldr	r2, [pc, #52]	; (800b284 <HAL_RCC_GetSysClockFreq+0x98>)
 800b24e:	fb03 f202 	mul.w	r2, r3, r2
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	fbb2 f3f3 	udiv	r3, r2, r3
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	e004      	b.n	800b266 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a0c      	ldr	r2, [pc, #48]	; (800b290 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b260:	fb02 f303 	mul.w	r3, r2, r3
 800b264:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	613b      	str	r3, [r7, #16]
      break;
 800b26a:	e002      	b.n	800b272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <HAL_RCC_GetSysClockFreq+0x98>)
 800b26e:	613b      	str	r3, [r7, #16]
      break;
 800b270:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b272:	693b      	ldr	r3, [r7, #16]
}
 800b274:	4618      	mov	r0, r3
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	bc80      	pop	{r7}
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	40021000 	.word	0x40021000
 800b284:	007a1200 	.word	0x007a1200
 800b288:	0800e1f4 	.word	0x0800e1f4
 800b28c:	0800e204 	.word	0x0800e204
 800b290:	003d0900 	.word	0x003d0900

0800b294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b298:	4b02      	ldr	r3, [pc, #8]	; (800b2a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800b29a:	681b      	ldr	r3, [r3, #0]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bc80      	pop	{r7}
 800b2a2:	4770      	bx	lr
 800b2a4:	200000e0 	.word	0x200000e0

0800b2a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b2ac:	f7ff fff2 	bl	800b294 <HAL_RCC_GetHCLKFreq>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	0a1b      	lsrs	r3, r3, #8
 800b2b8:	f003 0307 	and.w	r3, r3, #7
 800b2bc:	4903      	ldr	r1, [pc, #12]	; (800b2cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2be:	5ccb      	ldrb	r3, [r1, r3]
 800b2c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	40021000 	.word	0x40021000
 800b2cc:	0800e1ec 	.word	0x0800e1ec

0800b2d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2d4:	f7ff ffde 	bl	800b294 <HAL_RCC_GetHCLKFreq>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	4b05      	ldr	r3, [pc, #20]	; (800b2f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	0adb      	lsrs	r3, r3, #11
 800b2e0:	f003 0307 	and.w	r3, r3, #7
 800b2e4:	4903      	ldr	r1, [pc, #12]	; (800b2f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2e6:	5ccb      	ldrb	r3, [r1, r3]
 800b2e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40021000 	.word	0x40021000
 800b2f4:	0800e1ec 	.word	0x0800e1ec

0800b2f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <RCC_Delay+0x34>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a0a      	ldr	r2, [pc, #40]	; (800b330 <RCC_Delay+0x38>)
 800b306:	fba2 2303 	umull	r2, r3, r2, r3
 800b30a:	0a5b      	lsrs	r3, r3, #9
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	fb02 f303 	mul.w	r3, r2, r3
 800b312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b314:	bf00      	nop
  }
  while (Delay --);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	1e5a      	subs	r2, r3, #1
 800b31a:	60fa      	str	r2, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f9      	bne.n	800b314 <RCC_Delay+0x1c>
}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	bc80      	pop	{r7}
 800b32a:	4770      	bx	lr
 800b32c:	200000e0 	.word	0x200000e0
 800b330:	10624dd3 	.word	0x10624dd3

0800b334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e041      	b.n	800b3ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7fd fa26 	bl	80087ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3304      	adds	r3, #4
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f000 fa82 	bl	800b87c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d001      	beq.n	800b3ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e044      	b.n	800b476 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68da      	ldr	r2, [r3, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0201 	orr.w	r2, r2, #1
 800b402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a1d      	ldr	r2, [pc, #116]	; (800b480 <HAL_TIM_Base_Start_IT+0xac>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d018      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0x6c>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a1c      	ldr	r2, [pc, #112]	; (800b484 <HAL_TIM_Base_Start_IT+0xb0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d013      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0x6c>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b420:	d00e      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0x6c>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a18      	ldr	r2, [pc, #96]	; (800b488 <HAL_TIM_Base_Start_IT+0xb4>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d009      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0x6c>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a16      	ldr	r2, [pc, #88]	; (800b48c <HAL_TIM_Base_Start_IT+0xb8>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d004      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0x6c>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a15      	ldr	r2, [pc, #84]	; (800b490 <HAL_TIM_Base_Start_IT+0xbc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d111      	bne.n	800b464 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b06      	cmp	r3, #6
 800b450:	d010      	beq.n	800b474 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f042 0201 	orr.w	r2, r2, #1
 800b460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b462:	e007      	b.n	800b474 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f042 0201 	orr.w	r2, r2, #1
 800b472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bc80      	pop	{r7}
 800b47e:	4770      	bx	lr
 800b480:	40012c00 	.word	0x40012c00
 800b484:	40013400 	.word	0x40013400
 800b488:	40000400 	.word	0x40000400
 800b48c:	40000800 	.word	0x40000800
 800b490:	40000c00 	.word	0x40000c00

0800b494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d122      	bne.n	800b4f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d11b      	bne.n	800b4f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f06f 0202 	mvn.w	r2, #2
 800b4c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f9b4 	bl	800b844 <HAL_TIM_IC_CaptureCallback>
 800b4dc:	e005      	b.n	800b4ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9a7 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f9b6 	bl	800b856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	f003 0304 	and.w	r3, r3, #4
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d122      	bne.n	800b544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d11b      	bne.n	800b544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f06f 0204 	mvn.w	r2, #4
 800b514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2202      	movs	r2, #2
 800b51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f98a 	bl	800b844 <HAL_TIM_IC_CaptureCallback>
 800b530:	e005      	b.n	800b53e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f97d 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f98c 	bl	800b856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	2b08      	cmp	r3, #8
 800b550:	d122      	bne.n	800b598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f003 0308 	and.w	r3, r3, #8
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d11b      	bne.n	800b598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f06f 0208 	mvn.w	r2, #8
 800b568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2204      	movs	r2, #4
 800b56e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	f003 0303 	and.w	r3, r3, #3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f960 	bl	800b844 <HAL_TIM_IC_CaptureCallback>
 800b584:	e005      	b.n	800b592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f953 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f962 	bl	800b856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b10      	cmp	r3, #16
 800b5a4:	d122      	bne.n	800b5ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b10      	cmp	r3, #16
 800b5b2:	d11b      	bne.n	800b5ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f06f 0210 	mvn.w	r2, #16
 800b5bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2208      	movs	r2, #8
 800b5c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f936 	bl	800b844 <HAL_TIM_IC_CaptureCallback>
 800b5d8:	e005      	b.n	800b5e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f929 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f938 	bl	800b856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d10e      	bne.n	800b618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f003 0301 	and.w	r3, r3, #1
 800b604:	2b01      	cmp	r3, #1
 800b606:	d107      	bne.n	800b618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f06f 0201 	mvn.w	r2, #1
 800b610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7fc fd62 	bl	80080dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b622:	2b80      	cmp	r3, #128	; 0x80
 800b624:	d10e      	bne.n	800b644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b630:	2b80      	cmp	r3, #128	; 0x80
 800b632:	d107      	bne.n	800b644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 faa1 	bl	800bb86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b64e:	2b40      	cmp	r3, #64	; 0x40
 800b650:	d10e      	bne.n	800b670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b65c:	2b40      	cmp	r3, #64	; 0x40
 800b65e:	d107      	bne.n	800b670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f8fc 	bl	800b868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f003 0320 	and.w	r3, r3, #32
 800b67a:	2b20      	cmp	r3, #32
 800b67c:	d10e      	bne.n	800b69c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f003 0320 	and.w	r3, r3, #32
 800b688:	2b20      	cmp	r3, #32
 800b68a:	d107      	bne.n	800b69c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f06f 0220 	mvn.w	r2, #32
 800b694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa6c 	bl	800bb74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d101      	bne.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1c>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e0b4      	b.n	800b82a <HAL_TIM_ConfigClockSource+0x186>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2202      	movs	r2, #2
 800b6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6f8:	d03e      	beq.n	800b778 <HAL_TIM_ConfigClockSource+0xd4>
 800b6fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6fe:	f200 8087 	bhi.w	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b706:	f000 8086 	beq.w	800b816 <HAL_TIM_ConfigClockSource+0x172>
 800b70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70e:	d87f      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b710:	2b70      	cmp	r3, #112	; 0x70
 800b712:	d01a      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0xa6>
 800b714:	2b70      	cmp	r3, #112	; 0x70
 800b716:	d87b      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b718:	2b60      	cmp	r3, #96	; 0x60
 800b71a:	d050      	beq.n	800b7be <HAL_TIM_ConfigClockSource+0x11a>
 800b71c:	2b60      	cmp	r3, #96	; 0x60
 800b71e:	d877      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b720:	2b50      	cmp	r3, #80	; 0x50
 800b722:	d03c      	beq.n	800b79e <HAL_TIM_ConfigClockSource+0xfa>
 800b724:	2b50      	cmp	r3, #80	; 0x50
 800b726:	d873      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b728:	2b40      	cmp	r3, #64	; 0x40
 800b72a:	d058      	beq.n	800b7de <HAL_TIM_ConfigClockSource+0x13a>
 800b72c:	2b40      	cmp	r3, #64	; 0x40
 800b72e:	d86f      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b730:	2b30      	cmp	r3, #48	; 0x30
 800b732:	d064      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0x15a>
 800b734:	2b30      	cmp	r3, #48	; 0x30
 800b736:	d86b      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b738:	2b20      	cmp	r3, #32
 800b73a:	d060      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0x15a>
 800b73c:	2b20      	cmp	r3, #32
 800b73e:	d867      	bhi.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
 800b740:	2b00      	cmp	r3, #0
 800b742:	d05c      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0x15a>
 800b744:	2b10      	cmp	r3, #16
 800b746:	d05a      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0x15a>
 800b748:	e062      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b75a:	f000 f980 	bl	800ba5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b76c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	609a      	str	r2, [r3, #8]
      break;
 800b776:	e04f      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b788:	f000 f969 	bl	800ba5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689a      	ldr	r2, [r3, #8]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b79a:	609a      	str	r2, [r3, #8]
      break;
 800b79c:	e03c      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f000 f8e0 	bl	800b970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2150      	movs	r1, #80	; 0x50
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 f937 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b7bc:	e02c      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f000 f8fe 	bl	800b9cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2160      	movs	r1, #96	; 0x60
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f927 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b7dc:	e01c      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f000 f8c0 	bl	800b970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2140      	movs	r1, #64	; 0x40
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f917 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b7fc:	e00c      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4619      	mov	r1, r3
 800b808:	4610      	mov	r0, r2
 800b80a:	f000 f90e 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b80e:	e003      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	73fb      	strb	r3, [r7, #15]
      break;
 800b814:	e000      	b.n	800b818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr

0800b844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	bc80      	pop	{r7}
 800b854:	4770      	bx	lr

0800b856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b85e:	bf00      	nop
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	bc80      	pop	{r7}
 800b866:	4770      	bx	lr

0800b868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	bc80      	pop	{r7}
 800b878:	4770      	bx	lr
	...

0800b87c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a33      	ldr	r2, [pc, #204]	; (800b95c <TIM_Base_SetConfig+0xe0>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d013      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a32      	ldr	r2, [pc, #200]	; (800b960 <TIM_Base_SetConfig+0xe4>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d00f      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a2:	d00b      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a2f      	ldr	r2, [pc, #188]	; (800b964 <TIM_Base_SetConfig+0xe8>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d007      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a2e      	ldr	r2, [pc, #184]	; (800b968 <TIM_Base_SetConfig+0xec>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d003      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a2d      	ldr	r2, [pc, #180]	; (800b96c <TIM_Base_SetConfig+0xf0>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d108      	bne.n	800b8ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a22      	ldr	r2, [pc, #136]	; (800b95c <TIM_Base_SetConfig+0xe0>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d013      	beq.n	800b8fe <TIM_Base_SetConfig+0x82>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a21      	ldr	r2, [pc, #132]	; (800b960 <TIM_Base_SetConfig+0xe4>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d00f      	beq.n	800b8fe <TIM_Base_SetConfig+0x82>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e4:	d00b      	beq.n	800b8fe <TIM_Base_SetConfig+0x82>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a1e      	ldr	r2, [pc, #120]	; (800b964 <TIM_Base_SetConfig+0xe8>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d007      	beq.n	800b8fe <TIM_Base_SetConfig+0x82>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a1d      	ldr	r2, [pc, #116]	; (800b968 <TIM_Base_SetConfig+0xec>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d003      	beq.n	800b8fe <TIM_Base_SetConfig+0x82>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a1c      	ldr	r2, [pc, #112]	; (800b96c <TIM_Base_SetConfig+0xf0>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d108      	bne.n	800b910 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	689a      	ldr	r2, [r3, #8]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a09      	ldr	r2, [pc, #36]	; (800b95c <TIM_Base_SetConfig+0xe0>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d003      	beq.n	800b944 <TIM_Base_SetConfig+0xc8>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a08      	ldr	r2, [pc, #32]	; (800b960 <TIM_Base_SetConfig+0xe4>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d103      	bne.n	800b94c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	691a      	ldr	r2, [r3, #16]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	615a      	str	r2, [r3, #20]
}
 800b952:	bf00      	nop
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	bc80      	pop	{r7}
 800b95a:	4770      	bx	lr
 800b95c:	40012c00 	.word	0x40012c00
 800b960:	40013400 	.word	0x40013400
 800b964:	40000400 	.word	0x40000400
 800b968:	40000800 	.word	0x40000800
 800b96c:	40000c00 	.word	0x40000c00

0800b970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b970:	b480      	push	{r7}
 800b972:	b087      	sub	sp, #28
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	f023 0201 	bic.w	r2, r3, #1
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b99a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f023 030a 	bic.w	r3, r3, #10
 800b9ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	621a      	str	r2, [r3, #32]
}
 800b9c2:	bf00      	nop
 800b9c4:	371c      	adds	r7, #28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bc80      	pop	{r7}
 800b9ca:	4770      	bx	lr

0800b9cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	f023 0210 	bic.w	r2, r3, #16
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	031b      	lsls	r3, r3, #12
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	011b      	lsls	r3, r3, #4
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	621a      	str	r2, [r3, #32]
}
 800ba20:	bf00      	nop
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc80      	pop	{r7}
 800ba28:	4770      	bx	lr

0800ba2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	f043 0307 	orr.w	r3, r3, #7
 800ba4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	609a      	str	r2, [r3, #8]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr

0800ba5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b087      	sub	sp, #28
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	607a      	str	r2, [r7, #4]
 800ba6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	021a      	lsls	r2, r3, #8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	431a      	orrs	r2, r3
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	609a      	str	r2, [r3, #8]
}
 800ba92:	bf00      	nop
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bc80      	pop	{r7}
 800ba9a:	4770      	bx	lr

0800ba9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baac:	2b01      	cmp	r3, #1
 800baae:	d101      	bne.n	800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bab0:	2302      	movs	r3, #2
 800bab2:	e050      	b.n	800bb56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2202      	movs	r2, #2
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a1b      	ldr	r2, [pc, #108]	; (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d018      	beq.n	800bb2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a19      	ldr	r2, [pc, #100]	; (800bb64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d013      	beq.n	800bb2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0a:	d00e      	beq.n	800bb2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d009      	beq.n	800bb2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a14      	ldr	r2, [pc, #80]	; (800bb6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d004      	beq.n	800bb2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a12      	ldr	r2, [pc, #72]	; (800bb70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d10c      	bne.n	800bb44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bc80      	pop	{r7}
 800bb5e:	4770      	bx	lr
 800bb60:	40012c00 	.word	0x40012c00
 800bb64:	40013400 	.word	0x40013400
 800bb68:	40000400 	.word	0x40000400
 800bb6c:	40000800 	.word	0x40000800
 800bb70:	40000c00 	.word	0x40000c00

0800bb74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bc80      	pop	{r7}
 800bb84:	4770      	bx	lr

0800bb86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb86:	b480      	push	{r7}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb8e:	bf00      	nop
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bc80      	pop	{r7}
 800bb96:	4770      	bx	lr

0800bb98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e042      	b.n	800bc30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7fc fe1a 	bl	80087f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2224      	movs	r2, #36	; 0x24
 800bbc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fd11 	bl	800c604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	691a      	ldr	r2, [r3, #16]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	695a      	ldr	r2, [r3, #20]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68da      	ldr	r2, [r3, #12]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2220      	movs	r2, #32
 800bc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b20      	cmp	r3, #32
 800bc50:	d121      	bne.n	800bc96 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <HAL_UART_Transmit_IT+0x26>
 800bc58:	88fb      	ldrh	r3, [r7, #6]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e01a      	b.n	800bc98 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	88fa      	ldrh	r2, [r7, #6]
 800bc6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	88fa      	ldrh	r2, [r7, #6]
 800bc72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2221      	movs	r2, #33	; 0x21
 800bc7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68da      	ldr	r2, [r3, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc90:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	e000      	b.n	800bc98 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bc96:	2302      	movs	r3, #2
  }
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr

0800bca2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	60f8      	str	r0, [r7, #12]
 800bcaa:	60b9      	str	r1, [r7, #8]
 800bcac:	4613      	mov	r3, r2
 800bcae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b20      	cmp	r3, #32
 800bcba:	d112      	bne.n	800bce2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <HAL_UART_Receive_IT+0x26>
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e00b      	b.n	800bce4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f000 fabf 	bl	800c25c <UART_Start_Receive_IT>
 800bcde:	4603      	mov	r3, r0
 800bce0:	e000      	b.n	800bce4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bce2:	2302      	movs	r3, #2
  }
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b0ba      	sub	sp, #232	; 0xe8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bd2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10f      	bne.n	800bd52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d009      	beq.n	800bd52 <HAL_UART_IRQHandler+0x66>
 800bd3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fb9c 	bl	800c488 <UART_Receive_IT>
      return;
 800bd50:	e25b      	b.n	800c20a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 80de 	beq.w	800bf18 <HAL_UART_IRQHandler+0x22c>
 800bd5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80d1 	beq.w	800bf18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd7a:	f003 0301 	and.w	r3, r3, #1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00b      	beq.n	800bd9a <HAL_UART_IRQHandler+0xae>
 800bd82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	f043 0201 	orr.w	r2, r3, #1
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd9e:	f003 0304 	and.w	r3, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <HAL_UART_IRQHandler+0xd2>
 800bda6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d005      	beq.n	800bdbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb6:	f043 0202 	orr.w	r2, r3, #2
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00b      	beq.n	800bde2 <HAL_UART_IRQHandler+0xf6>
 800bdca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdce:	f003 0301 	and.w	r3, r3, #1
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdda:	f043 0204 	orr.w	r2, r3, #4
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bde2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde6:	f003 0308 	and.w	r3, r3, #8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d011      	beq.n	800be12 <HAL_UART_IRQHandler+0x126>
 800bdee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d105      	bne.n	800be06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	f043 0208 	orr.w	r2, r3, #8
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 81f2 	beq.w	800c200 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	2b00      	cmp	r3, #0
 800be26:	d008      	beq.n	800be3a <HAL_UART_IRQHandler+0x14e>
 800be28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be2c:	f003 0320 	and.w	r3, r3, #32
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fb27 	bl	800c488 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b00      	cmp	r3, #0
 800be46:	bf14      	ite	ne
 800be48:	2301      	movne	r3, #1
 800be4a:	2300      	moveq	r3, #0
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be56:	f003 0308 	and.w	r3, r3, #8
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d103      	bne.n	800be66 <HAL_UART_IRQHandler+0x17a>
 800be5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be62:	2b00      	cmp	r3, #0
 800be64:	d04f      	beq.n	800bf06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fa31 	bl	800c2ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be76:	2b00      	cmp	r3, #0
 800be78:	d041      	beq.n	800befe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3314      	adds	r3, #20
 800be80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3314      	adds	r3, #20
 800bea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800beaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800beb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800beb6:	e841 2300 	strex	r3, r2, [r1]
 800beba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1d9      	bne.n	800be7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beca:	2b00      	cmp	r3, #0
 800becc:	d013      	beq.n	800bef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed2:	4a7e      	ldr	r2, [pc, #504]	; (800c0cc <HAL_UART_IRQHandler+0x3e0>)
 800bed4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fd f848 	bl	8008f70 <HAL_DMA_Abort_IT>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d016      	beq.n	800bf14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bef0:	4610      	mov	r0, r2
 800bef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef4:	e00e      	b.n	800bf14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f99c 	bl	800c234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800befc:	e00a      	b.n	800bf14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f998 	bl	800c234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf04:	e006      	b.n	800bf14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f994 	bl	800c234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bf12:	e175      	b.n	800c200 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf14:	bf00      	nop
    return;
 800bf16:	e173      	b.n	800c200 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	f040 814f 	bne.w	800c1c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf26:	f003 0310 	and.w	r3, r3, #16
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 8148 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf34:	f003 0310 	and.w	r3, r3, #16
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 8141 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60bb      	str	r3, [r7, #8]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	60bb      	str	r3, [r7, #8]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	60bb      	str	r3, [r7, #8]
 800bf52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 80b6 	beq.w	800c0d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 8145 	beq.w	800c204 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf82:	429a      	cmp	r2, r3
 800bf84:	f080 813e 	bcs.w	800c204 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	2b20      	cmp	r3, #32
 800bf98:	f000 8088 	beq.w	800c0ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bfb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	330c      	adds	r3, #12
 800bfc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bfc8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bfe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1d9      	bne.n	800bf9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3314      	adds	r3, #20
 800bfee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bff2:	e853 3f00 	ldrex	r3, [r3]
 800bff6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bffa:	f023 0301 	bic.w	r3, r3, #1
 800bffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3314      	adds	r3, #20
 800c008:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c00c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c010:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c012:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c014:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c018:	e841 2300 	strex	r3, r2, [r1]
 800c01c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e1      	bne.n	800bfe8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3314      	adds	r3, #20
 800c02a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c03a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3314      	adds	r3, #20
 800c044:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c048:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c04a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c04e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e3      	bne.n	800c024 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	330c      	adds	r3, #12
 800c070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c07c:	f023 0310 	bic.w	r3, r3, #16
 800c080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	330c      	adds	r3, #12
 800c08a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c08e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c090:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c096:	e841 2300 	strex	r3, r2, [r1]
 800c09a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1e3      	bne.n	800c06a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fc ff27 	bl	8008efa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f8bf 	bl	800c246 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0c8:	e09c      	b.n	800c204 <HAL_UART_IRQHandler+0x518>
 800c0ca:	bf00      	nop
 800c0cc:	0800c393 	.word	0x0800c393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 808e 	beq.w	800c208 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c0ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 8089 	beq.w	800c208 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	e853 3f00 	ldrex	r3, [r3]
 800c104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c10c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	330c      	adds	r3, #12
 800c116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c11a:	647a      	str	r2, [r7, #68]	; 0x44
 800c11c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e3      	bne.n	800c0f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3314      	adds	r3, #20
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	e853 3f00 	ldrex	r3, [r3]
 800c13c:	623b      	str	r3, [r7, #32]
   return(result);
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	f023 0301 	bic.w	r3, r3, #1
 800c144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3314      	adds	r3, #20
 800c14e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c152:	633a      	str	r2, [r7, #48]	; 0x30
 800c154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c15a:	e841 2300 	strex	r3, r2, [r1]
 800c15e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e3      	bne.n	800c12e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	330c      	adds	r3, #12
 800c17a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	60fb      	str	r3, [r7, #12]
   return(result);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f023 0310 	bic.w	r3, r3, #16
 800c18a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	330c      	adds	r3, #12
 800c194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c198:	61fa      	str	r2, [r7, #28]
 800c19a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19c:	69b9      	ldr	r1, [r7, #24]
 800c19e:	69fa      	ldr	r2, [r7, #28]
 800c1a0:	e841 2300 	strex	r3, r2, [r1]
 800c1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e3      	bne.n	800c174 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f844 	bl	800c246 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1be:	e023      	b.n	800c208 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d009      	beq.n	800c1e0 <HAL_UART_IRQHandler+0x4f4>
 800c1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d003      	beq.n	800c1e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f8ee 	bl	800c3ba <UART_Transmit_IT>
    return;
 800c1de:	e014      	b.n	800c20a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00e      	beq.n	800c20a <HAL_UART_IRQHandler+0x51e>
 800c1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d008      	beq.n	800c20a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f92d 	bl	800c458 <UART_EndTransmit_IT>
    return;
 800c1fe:	e004      	b.n	800c20a <HAL_UART_IRQHandler+0x51e>
    return;
 800c200:	bf00      	nop
 800c202:	e002      	b.n	800c20a <HAL_UART_IRQHandler+0x51e>
      return;
 800c204:	bf00      	nop
 800c206:	e000      	b.n	800c20a <HAL_UART_IRQHandler+0x51e>
      return;
 800c208:	bf00      	nop
  }
}
 800c20a:	37e8      	adds	r7, #232	; 0xe8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bc80      	pop	{r7}
 800c220:	4770      	bx	lr

0800c222 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	bc80      	pop	{r7}
 800c232:	4770      	bx	lr

0800c234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	bc80      	pop	{r7}
 800c244:	4770      	bx	lr

0800c246 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c246:	b480      	push	{r7}
 800c248:	b083      	sub	sp, #12
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	460b      	mov	r3, r1
 800c250:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	bc80      	pop	{r7}
 800c25a:	4770      	bx	lr

0800c25c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	88fa      	ldrh	r2, [r7, #6]
 800c274:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	88fa      	ldrh	r2, [r7, #6]
 800c27a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2222      	movs	r2, #34	; 0x22
 800c286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d007      	beq.n	800c2a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	695a      	ldr	r2, [r3, #20]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f042 0201 	orr.w	r2, r2, #1
 800c2b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68da      	ldr	r2, [r3, #12]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f042 0220 	orr.w	r2, r2, #32
 800c2c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bc80      	pop	{r7}
 800c2cc:	4770      	bx	lr

0800c2ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b095      	sub	sp, #84	; 0x54
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	330c      	adds	r3, #12
 800c2dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e0:	e853 3f00 	ldrex	r3, [r3]
 800c2e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	330c      	adds	r3, #12
 800c2f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2f6:	643a      	str	r2, [r7, #64]	; 0x40
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2fe:	e841 2300 	strex	r3, r2, [r1]
 800c302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e5      	bne.n	800c2d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3314      	adds	r3, #20
 800c310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	61fb      	str	r3, [r7, #28]
   return(result);
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	f023 0301 	bic.w	r3, r3, #1
 800c320:	64bb      	str	r3, [r7, #72]	; 0x48
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3314      	adds	r3, #20
 800c328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c32a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c32c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e5      	bne.n	800c30a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c342:	2b01      	cmp	r3, #1
 800c344:	d119      	bne.n	800c37a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330c      	adds	r3, #12
 800c34c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	e853 3f00 	ldrex	r3, [r3]
 800c354:	60bb      	str	r3, [r7, #8]
   return(result);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	f023 0310 	bic.w	r3, r3, #16
 800c35c:	647b      	str	r3, [r7, #68]	; 0x44
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	330c      	adds	r3, #12
 800c364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c366:	61ba      	str	r2, [r7, #24]
 800c368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	6979      	ldr	r1, [r7, #20]
 800c36c:	69ba      	ldr	r2, [r7, #24]
 800c36e:	e841 2300 	strex	r3, r2, [r1]
 800c372:	613b      	str	r3, [r7, #16]
   return(result);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1e5      	bne.n	800c346 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2220      	movs	r2, #32
 800c37e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c388:	bf00      	nop
 800c38a:	3754      	adds	r7, #84	; 0x54
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr

0800c392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff ff41 	bl	800c234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3b2:	bf00      	nop
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b21      	cmp	r3, #33	; 0x21
 800c3cc:	d13e      	bne.n	800c44c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d6:	d114      	bne.n	800c402 <UART_Transmit_IT+0x48>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d110      	bne.n	800c402 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a1b      	ldr	r3, [r3, #32]
 800c3e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	1c9a      	adds	r2, r3, #2
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	621a      	str	r2, [r3, #32]
 800c400:	e008      	b.n	800c414 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	1c59      	adds	r1, r3, #1
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	6211      	str	r1, [r2, #32]
 800c40c:	781a      	ldrb	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c418:	b29b      	uxth	r3, r3
 800c41a:	3b01      	subs	r3, #1
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	4619      	mov	r1, r3
 800c422:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10f      	bne.n	800c448 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c436:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68da      	ldr	r2, [r3, #12]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c446:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	e000      	b.n	800c44e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c44c:	2302      	movs	r3, #2
  }
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	bc80      	pop	{r7}
 800c456:	4770      	bx	lr

0800c458 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c46e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2220      	movs	r2, #32
 800c474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff fec9 	bl	800c210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b22      	cmp	r3, #34	; 0x22
 800c49a:	f040 80ae 	bne.w	800c5fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4a6:	d117      	bne.n	800c4d8 <UART_Receive_IT+0x50>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d113      	bne.n	800c4d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	1c9a      	adds	r2, r3, #2
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	629a      	str	r2, [r3, #40]	; 0x28
 800c4d6:	e026      	b.n	800c526 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ea:	d007      	beq.n	800c4fc <UART_Receive_IT+0x74>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10a      	bne.n	800c50a <UART_Receive_IT+0x82>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d106      	bne.n	800c50a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	b2da      	uxtb	r2, r3
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	701a      	strb	r2, [r3, #0]
 800c508:	e008      	b.n	800c51c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c516:	b2da      	uxtb	r2, r3
 800c518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29b      	uxth	r3, r3
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	4619      	mov	r1, r3
 800c534:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c536:	2b00      	cmp	r3, #0
 800c538:	d15d      	bne.n	800c5f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68da      	ldr	r2, [r3, #12]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0220 	bic.w	r2, r2, #32
 800c548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68da      	ldr	r2, [r3, #12]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	695a      	ldr	r2, [r3, #20]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f022 0201 	bic.w	r2, r2, #1
 800c568:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d135      	bne.n	800c5ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	330c      	adds	r3, #12
 800c58c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	e853 3f00 	ldrex	r3, [r3]
 800c594:	613b      	str	r3, [r7, #16]
   return(result);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f023 0310 	bic.w	r3, r3, #16
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	330c      	adds	r3, #12
 800c5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a6:	623a      	str	r2, [r7, #32]
 800c5a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5aa:	69f9      	ldr	r1, [r7, #28]
 800c5ac:	6a3a      	ldr	r2, [r7, #32]
 800c5ae:	e841 2300 	strex	r3, r2, [r1]
 800c5b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1e5      	bne.n	800c586 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 0310 	and.w	r3, r3, #16
 800c5c4:	2b10      	cmp	r3, #16
 800c5c6:	d10a      	bne.n	800c5de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60fb      	str	r3, [r7, #12]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff fe2e 	bl	800c246 <HAL_UARTEx_RxEventCallback>
 800c5ea:	e002      	b.n	800c5f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff fe18 	bl	800c222 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e002      	b.n	800c5fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e000      	b.n	800c5fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c5fa:	2302      	movs	r3, #2
  }
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3730      	adds	r7, #48	; 0x30
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68da      	ldr	r2, [r3, #12]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	430a      	orrs	r2, r1
 800c620:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	689a      	ldr	r2, [r3, #8]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	431a      	orrs	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	4313      	orrs	r3, r2
 800c632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c63e:	f023 030c 	bic.w	r3, r3, #12
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6812      	ldr	r2, [r2, #0]
 800c646:	68b9      	ldr	r1, [r7, #8]
 800c648:	430b      	orrs	r3, r1
 800c64a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	430a      	orrs	r2, r1
 800c660:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a2c      	ldr	r2, [pc, #176]	; (800c718 <UART_SetConfig+0x114>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d103      	bne.n	800c674 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c66c:	f7fe fe30 	bl	800b2d0 <HAL_RCC_GetPCLK2Freq>
 800c670:	60f8      	str	r0, [r7, #12]
 800c672:	e002      	b.n	800c67a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c674:	f7fe fe18 	bl	800b2a8 <HAL_RCC_GetPCLK1Freq>
 800c678:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009a      	lsls	r2, r3, #2
 800c684:	441a      	add	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c690:	4a22      	ldr	r2, [pc, #136]	; (800c71c <UART_SetConfig+0x118>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	095b      	lsrs	r3, r3, #5
 800c698:	0119      	lsls	r1, r3, #4
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009a      	lsls	r2, r3, #2
 800c6a4:	441a      	add	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6b0:	4b1a      	ldr	r3, [pc, #104]	; (800c71c <UART_SetConfig+0x118>)
 800c6b2:	fba3 0302 	umull	r0, r3, r3, r2
 800c6b6:	095b      	lsrs	r3, r3, #5
 800c6b8:	2064      	movs	r0, #100	; 0x64
 800c6ba:	fb00 f303 	mul.w	r3, r0, r3
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	3332      	adds	r3, #50	; 0x32
 800c6c4:	4a15      	ldr	r2, [pc, #84]	; (800c71c <UART_SetConfig+0x118>)
 800c6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ca:	095b      	lsrs	r3, r3, #5
 800c6cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6d0:	4419      	add	r1, r3
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	009a      	lsls	r2, r3, #2
 800c6dc:	441a      	add	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	; (800c71c <UART_SetConfig+0x118>)
 800c6ea:	fba3 0302 	umull	r0, r3, r3, r2
 800c6ee:	095b      	lsrs	r3, r3, #5
 800c6f0:	2064      	movs	r0, #100	; 0x64
 800c6f2:	fb00 f303 	mul.w	r3, r0, r3
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	011b      	lsls	r3, r3, #4
 800c6fa:	3332      	adds	r3, #50	; 0x32
 800c6fc:	4a07      	ldr	r2, [pc, #28]	; (800c71c <UART_SetConfig+0x118>)
 800c6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c702:	095b      	lsrs	r3, r3, #5
 800c704:	f003 020f 	and.w	r2, r3, #15
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	440a      	add	r2, r1
 800c70e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	40013800 	.word	0x40013800
 800c71c:	51eb851f 	.word	0x51eb851f

0800c720 <__itoa>:
 800c720:	1e93      	subs	r3, r2, #2
 800c722:	2b22      	cmp	r3, #34	; 0x22
 800c724:	b510      	push	{r4, lr}
 800c726:	460c      	mov	r4, r1
 800c728:	d904      	bls.n	800c734 <__itoa+0x14>
 800c72a:	2300      	movs	r3, #0
 800c72c:	461c      	mov	r4, r3
 800c72e:	700b      	strb	r3, [r1, #0]
 800c730:	4620      	mov	r0, r4
 800c732:	bd10      	pop	{r4, pc}
 800c734:	2a0a      	cmp	r2, #10
 800c736:	d109      	bne.n	800c74c <__itoa+0x2c>
 800c738:	2800      	cmp	r0, #0
 800c73a:	da07      	bge.n	800c74c <__itoa+0x2c>
 800c73c:	232d      	movs	r3, #45	; 0x2d
 800c73e:	700b      	strb	r3, [r1, #0]
 800c740:	2101      	movs	r1, #1
 800c742:	4240      	negs	r0, r0
 800c744:	4421      	add	r1, r4
 800c746:	f000 f8d9 	bl	800c8fc <__utoa>
 800c74a:	e7f1      	b.n	800c730 <__itoa+0x10>
 800c74c:	2100      	movs	r1, #0
 800c74e:	e7f9      	b.n	800c744 <__itoa+0x24>

0800c750 <itoa>:
 800c750:	f7ff bfe6 	b.w	800c720 <__itoa>

0800c754 <malloc>:
 800c754:	4b02      	ldr	r3, [pc, #8]	; (800c760 <malloc+0xc>)
 800c756:	4601      	mov	r1, r0
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	f000 b823 	b.w	800c7a4 <_malloc_r>
 800c75e:	bf00      	nop
 800c760:	20000138 	.word	0x20000138

0800c764 <sbrk_aligned>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	4e0e      	ldr	r6, [pc, #56]	; (800c7a0 <sbrk_aligned+0x3c>)
 800c768:	460c      	mov	r4, r1
 800c76a:	6831      	ldr	r1, [r6, #0]
 800c76c:	4605      	mov	r5, r0
 800c76e:	b911      	cbnz	r1, 800c776 <sbrk_aligned+0x12>
 800c770:	f000 f946 	bl	800ca00 <_sbrk_r>
 800c774:	6030      	str	r0, [r6, #0]
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f000 f941 	bl	800ca00 <_sbrk_r>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	d00a      	beq.n	800c798 <sbrk_aligned+0x34>
 800c782:	1cc4      	adds	r4, r0, #3
 800c784:	f024 0403 	bic.w	r4, r4, #3
 800c788:	42a0      	cmp	r0, r4
 800c78a:	d007      	beq.n	800c79c <sbrk_aligned+0x38>
 800c78c:	1a21      	subs	r1, r4, r0
 800c78e:	4628      	mov	r0, r5
 800c790:	f000 f936 	bl	800ca00 <_sbrk_r>
 800c794:	3001      	adds	r0, #1
 800c796:	d101      	bne.n	800c79c <sbrk_aligned+0x38>
 800c798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c79c:	4620      	mov	r0, r4
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	200004a4 	.word	0x200004a4

0800c7a4 <_malloc_r>:
 800c7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a8:	1ccd      	adds	r5, r1, #3
 800c7aa:	f025 0503 	bic.w	r5, r5, #3
 800c7ae:	3508      	adds	r5, #8
 800c7b0:	2d0c      	cmp	r5, #12
 800c7b2:	bf38      	it	cc
 800c7b4:	250c      	movcc	r5, #12
 800c7b6:	2d00      	cmp	r5, #0
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	db01      	blt.n	800c7c0 <_malloc_r+0x1c>
 800c7bc:	42a9      	cmp	r1, r5
 800c7be:	d905      	bls.n	800c7cc <_malloc_r+0x28>
 800c7c0:	230c      	movs	r3, #12
 800c7c2:	2600      	movs	r6, #0
 800c7c4:	603b      	str	r3, [r7, #0]
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c8a0 <_malloc_r+0xfc>
 800c7d0:	f000 f868 	bl	800c8a4 <__malloc_lock>
 800c7d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c7d8:	461c      	mov	r4, r3
 800c7da:	bb5c      	cbnz	r4, 800c834 <_malloc_r+0x90>
 800c7dc:	4629      	mov	r1, r5
 800c7de:	4638      	mov	r0, r7
 800c7e0:	f7ff ffc0 	bl	800c764 <sbrk_aligned>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	d155      	bne.n	800c896 <_malloc_r+0xf2>
 800c7ea:	f8d8 4000 	ldr.w	r4, [r8]
 800c7ee:	4626      	mov	r6, r4
 800c7f0:	2e00      	cmp	r6, #0
 800c7f2:	d145      	bne.n	800c880 <_malloc_r+0xdc>
 800c7f4:	2c00      	cmp	r4, #0
 800c7f6:	d048      	beq.n	800c88a <_malloc_r+0xe6>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	eb04 0903 	add.w	r9, r4, r3
 800c802:	f000 f8fd 	bl	800ca00 <_sbrk_r>
 800c806:	4581      	cmp	r9, r0
 800c808:	d13f      	bne.n	800c88a <_malloc_r+0xe6>
 800c80a:	6821      	ldr	r1, [r4, #0]
 800c80c:	4638      	mov	r0, r7
 800c80e:	1a6d      	subs	r5, r5, r1
 800c810:	4629      	mov	r1, r5
 800c812:	f7ff ffa7 	bl	800c764 <sbrk_aligned>
 800c816:	3001      	adds	r0, #1
 800c818:	d037      	beq.n	800c88a <_malloc_r+0xe6>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	442b      	add	r3, r5
 800c81e:	6023      	str	r3, [r4, #0]
 800c820:	f8d8 3000 	ldr.w	r3, [r8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d038      	beq.n	800c89a <_malloc_r+0xf6>
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	42a2      	cmp	r2, r4
 800c82c:	d12b      	bne.n	800c886 <_malloc_r+0xe2>
 800c82e:	2200      	movs	r2, #0
 800c830:	605a      	str	r2, [r3, #4]
 800c832:	e00f      	b.n	800c854 <_malloc_r+0xb0>
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	1b52      	subs	r2, r2, r5
 800c838:	d41f      	bmi.n	800c87a <_malloc_r+0xd6>
 800c83a:	2a0b      	cmp	r2, #11
 800c83c:	d917      	bls.n	800c86e <_malloc_r+0xca>
 800c83e:	1961      	adds	r1, r4, r5
 800c840:	42a3      	cmp	r3, r4
 800c842:	6025      	str	r5, [r4, #0]
 800c844:	bf18      	it	ne
 800c846:	6059      	strne	r1, [r3, #4]
 800c848:	6863      	ldr	r3, [r4, #4]
 800c84a:	bf08      	it	eq
 800c84c:	f8c8 1000 	streq.w	r1, [r8]
 800c850:	5162      	str	r2, [r4, r5]
 800c852:	604b      	str	r3, [r1, #4]
 800c854:	4638      	mov	r0, r7
 800c856:	f104 060b 	add.w	r6, r4, #11
 800c85a:	f000 f829 	bl	800c8b0 <__malloc_unlock>
 800c85e:	f026 0607 	bic.w	r6, r6, #7
 800c862:	1d23      	adds	r3, r4, #4
 800c864:	1af2      	subs	r2, r6, r3
 800c866:	d0ae      	beq.n	800c7c6 <_malloc_r+0x22>
 800c868:	1b9b      	subs	r3, r3, r6
 800c86a:	50a3      	str	r3, [r4, r2]
 800c86c:	e7ab      	b.n	800c7c6 <_malloc_r+0x22>
 800c86e:	42a3      	cmp	r3, r4
 800c870:	6862      	ldr	r2, [r4, #4]
 800c872:	d1dd      	bne.n	800c830 <_malloc_r+0x8c>
 800c874:	f8c8 2000 	str.w	r2, [r8]
 800c878:	e7ec      	b.n	800c854 <_malloc_r+0xb0>
 800c87a:	4623      	mov	r3, r4
 800c87c:	6864      	ldr	r4, [r4, #4]
 800c87e:	e7ac      	b.n	800c7da <_malloc_r+0x36>
 800c880:	4634      	mov	r4, r6
 800c882:	6876      	ldr	r6, [r6, #4]
 800c884:	e7b4      	b.n	800c7f0 <_malloc_r+0x4c>
 800c886:	4613      	mov	r3, r2
 800c888:	e7cc      	b.n	800c824 <_malloc_r+0x80>
 800c88a:	230c      	movs	r3, #12
 800c88c:	4638      	mov	r0, r7
 800c88e:	603b      	str	r3, [r7, #0]
 800c890:	f000 f80e 	bl	800c8b0 <__malloc_unlock>
 800c894:	e797      	b.n	800c7c6 <_malloc_r+0x22>
 800c896:	6025      	str	r5, [r4, #0]
 800c898:	e7dc      	b.n	800c854 <_malloc_r+0xb0>
 800c89a:	605b      	str	r3, [r3, #4]
 800c89c:	deff      	udf	#255	; 0xff
 800c89e:	bf00      	nop
 800c8a0:	200004a0 	.word	0x200004a0

0800c8a4 <__malloc_lock>:
 800c8a4:	4801      	ldr	r0, [pc, #4]	; (800c8ac <__malloc_lock+0x8>)
 800c8a6:	f000 b8e5 	b.w	800ca74 <__retarget_lock_acquire_recursive>
 800c8aa:	bf00      	nop
 800c8ac:	200005e0 	.word	0x200005e0

0800c8b0 <__malloc_unlock>:
 800c8b0:	4801      	ldr	r0, [pc, #4]	; (800c8b8 <__malloc_unlock+0x8>)
 800c8b2:	f000 b8e0 	b.w	800ca76 <__retarget_lock_release_recursive>
 800c8b6:	bf00      	nop
 800c8b8:	200005e0 	.word	0x200005e0

0800c8bc <siprintf>:
 800c8bc:	b40e      	push	{r1, r2, r3}
 800c8be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8c2:	b500      	push	{lr}
 800c8c4:	b09c      	sub	sp, #112	; 0x70
 800c8c6:	ab1d      	add	r3, sp, #116	; 0x74
 800c8c8:	9002      	str	r0, [sp, #8]
 800c8ca:	9006      	str	r0, [sp, #24]
 800c8cc:	9107      	str	r1, [sp, #28]
 800c8ce:	9104      	str	r1, [sp, #16]
 800c8d0:	4808      	ldr	r0, [pc, #32]	; (800c8f4 <siprintf+0x38>)
 800c8d2:	4909      	ldr	r1, [pc, #36]	; (800c8f8 <siprintf+0x3c>)
 800c8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d8:	9105      	str	r1, [sp, #20]
 800c8da:	6800      	ldr	r0, [r0, #0]
 800c8dc:	a902      	add	r1, sp, #8
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	f000 f974 	bl	800cbcc <_svfiprintf_r>
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	9b02      	ldr	r3, [sp, #8]
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	b01c      	add	sp, #112	; 0x70
 800c8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8f0:	b003      	add	sp, #12
 800c8f2:	4770      	bx	lr
 800c8f4:	20000138 	.word	0x20000138
 800c8f8:	ffff0208 	.word	0xffff0208

0800c8fc <__utoa>:
 800c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8fe:	b08b      	sub	sp, #44	; 0x2c
 800c900:	4605      	mov	r5, r0
 800c902:	460b      	mov	r3, r1
 800c904:	466e      	mov	r6, sp
 800c906:	4c1d      	ldr	r4, [pc, #116]	; (800c97c <__utoa+0x80>)
 800c908:	f104 0c20 	add.w	ip, r4, #32
 800c90c:	4637      	mov	r7, r6
 800c90e:	6820      	ldr	r0, [r4, #0]
 800c910:	6861      	ldr	r1, [r4, #4]
 800c912:	3408      	adds	r4, #8
 800c914:	c703      	stmia	r7!, {r0, r1}
 800c916:	4564      	cmp	r4, ip
 800c918:	463e      	mov	r6, r7
 800c91a:	d1f7      	bne.n	800c90c <__utoa+0x10>
 800c91c:	7921      	ldrb	r1, [r4, #4]
 800c91e:	6820      	ldr	r0, [r4, #0]
 800c920:	7139      	strb	r1, [r7, #4]
 800c922:	1e91      	subs	r1, r2, #2
 800c924:	2922      	cmp	r1, #34	; 0x22
 800c926:	6038      	str	r0, [r7, #0]
 800c928:	f04f 0100 	mov.w	r1, #0
 800c92c:	d904      	bls.n	800c938 <__utoa+0x3c>
 800c92e:	7019      	strb	r1, [r3, #0]
 800c930:	460b      	mov	r3, r1
 800c932:	4618      	mov	r0, r3
 800c934:	b00b      	add	sp, #44	; 0x2c
 800c936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c938:	1e58      	subs	r0, r3, #1
 800c93a:	4684      	mov	ip, r0
 800c93c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c940:	fb02 5617 	mls	r6, r2, r7, r5
 800c944:	3628      	adds	r6, #40	; 0x28
 800c946:	446e      	add	r6, sp
 800c948:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c94c:	460c      	mov	r4, r1
 800c94e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c952:	462e      	mov	r6, r5
 800c954:	42b2      	cmp	r2, r6
 800c956:	463d      	mov	r5, r7
 800c958:	f101 0101 	add.w	r1, r1, #1
 800c95c:	d9ee      	bls.n	800c93c <__utoa+0x40>
 800c95e:	2200      	movs	r2, #0
 800c960:	545a      	strb	r2, [r3, r1]
 800c962:	1919      	adds	r1, r3, r4
 800c964:	1aa5      	subs	r5, r4, r2
 800c966:	42aa      	cmp	r2, r5
 800c968:	dae3      	bge.n	800c932 <__utoa+0x36>
 800c96a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c96e:	780e      	ldrb	r6, [r1, #0]
 800c970:	3201      	adds	r2, #1
 800c972:	7006      	strb	r6, [r0, #0]
 800c974:	f801 5901 	strb.w	r5, [r1], #-1
 800c978:	e7f4      	b.n	800c964 <__utoa+0x68>
 800c97a:	bf00      	nop
 800c97c:	0800e206 	.word	0x0800e206

0800c980 <strcat>:
 800c980:	4602      	mov	r2, r0
 800c982:	b510      	push	{r4, lr}
 800c984:	7814      	ldrb	r4, [r2, #0]
 800c986:	4613      	mov	r3, r2
 800c988:	3201      	adds	r2, #1
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	d1fa      	bne.n	800c984 <strcat+0x4>
 800c98e:	3b01      	subs	r3, #1
 800c990:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c994:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c998:	2a00      	cmp	r2, #0
 800c99a:	d1f9      	bne.n	800c990 <strcat+0x10>
 800c99c:	bd10      	pop	{r4, pc}

0800c99e <strncpy>:
 800c99e:	4603      	mov	r3, r0
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	3901      	subs	r1, #1
 800c9a4:	b132      	cbz	r2, 800c9b4 <strncpy+0x16>
 800c9a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c9aa:	3a01      	subs	r2, #1
 800c9ac:	f803 4b01 	strb.w	r4, [r3], #1
 800c9b0:	2c00      	cmp	r4, #0
 800c9b2:	d1f7      	bne.n	800c9a4 <strncpy+0x6>
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	441a      	add	r2, r3
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d100      	bne.n	800c9be <strncpy+0x20>
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	f803 1b01 	strb.w	r1, [r3], #1
 800c9c2:	e7f9      	b.n	800c9b8 <strncpy+0x1a>

0800c9c4 <strstr>:
 800c9c4:	780a      	ldrb	r2, [r1, #0]
 800c9c6:	b570      	push	{r4, r5, r6, lr}
 800c9c8:	b96a      	cbnz	r2, 800c9e6 <strstr+0x22>
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d109      	bne.n	800c9e4 <strstr+0x20>
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d0f6      	beq.n	800c9ca <strstr+0x6>
 800c9dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c9e0:	429e      	cmp	r6, r3
 800c9e2:	d0f7      	beq.n	800c9d4 <strstr+0x10>
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	7803      	ldrb	r3, [r0, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1ef      	bne.n	800c9cc <strstr+0x8>
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	e7ec      	b.n	800c9ca <strstr+0x6>

0800c9f0 <memset>:
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	4402      	add	r2, r0
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d100      	bne.n	800c9fa <memset+0xa>
 800c9f8:	4770      	bx	lr
 800c9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c9fe:	e7f9      	b.n	800c9f4 <memset+0x4>

0800ca00 <_sbrk_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	2300      	movs	r3, #0
 800ca04:	4d05      	ldr	r5, [pc, #20]	; (800ca1c <_sbrk_r+0x1c>)
 800ca06:	4604      	mov	r4, r0
 800ca08:	4608      	mov	r0, r1
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	f7fb ff84 	bl	8008918 <_sbrk>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_sbrk_r+0x1a>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_sbrk_r+0x1a>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	200005e4 	.word	0x200005e4

0800ca20 <__errno>:
 800ca20:	4b01      	ldr	r3, [pc, #4]	; (800ca28 <__errno+0x8>)
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	20000138 	.word	0x20000138

0800ca2c <__libc_init_array>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	2600      	movs	r6, #0
 800ca30:	4d0c      	ldr	r5, [pc, #48]	; (800ca64 <__libc_init_array+0x38>)
 800ca32:	4c0d      	ldr	r4, [pc, #52]	; (800ca68 <__libc_init_array+0x3c>)
 800ca34:	1b64      	subs	r4, r4, r5
 800ca36:	10a4      	asrs	r4, r4, #2
 800ca38:	42a6      	cmp	r6, r4
 800ca3a:	d109      	bne.n	800ca50 <__libc_init_array+0x24>
 800ca3c:	f000 fbc6 	bl	800d1cc <_init>
 800ca40:	2600      	movs	r6, #0
 800ca42:	4d0a      	ldr	r5, [pc, #40]	; (800ca6c <__libc_init_array+0x40>)
 800ca44:	4c0a      	ldr	r4, [pc, #40]	; (800ca70 <__libc_init_array+0x44>)
 800ca46:	1b64      	subs	r4, r4, r5
 800ca48:	10a4      	asrs	r4, r4, #2
 800ca4a:	42a6      	cmp	r6, r4
 800ca4c:	d105      	bne.n	800ca5a <__libc_init_array+0x2e>
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca54:	4798      	blx	r3
 800ca56:	3601      	adds	r6, #1
 800ca58:	e7ee      	b.n	800ca38 <__libc_init_array+0xc>
 800ca5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca5e:	4798      	blx	r3
 800ca60:	3601      	adds	r6, #1
 800ca62:	e7f2      	b.n	800ca4a <__libc_init_array+0x1e>
 800ca64:	0800e260 	.word	0x0800e260
 800ca68:	0800e260 	.word	0x0800e260
 800ca6c:	0800e260 	.word	0x0800e260
 800ca70:	0800e264 	.word	0x0800e264

0800ca74 <__retarget_lock_acquire_recursive>:
 800ca74:	4770      	bx	lr

0800ca76 <__retarget_lock_release_recursive>:
 800ca76:	4770      	bx	lr

0800ca78 <strcpy>:
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca7e:	f803 2b01 	strb.w	r2, [r3], #1
 800ca82:	2a00      	cmp	r2, #0
 800ca84:	d1f9      	bne.n	800ca7a <strcpy+0x2>
 800ca86:	4770      	bx	lr

0800ca88 <_free_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	d040      	beq.n	800cb12 <_free_r+0x8a>
 800ca90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca94:	1f0c      	subs	r4, r1, #4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	bfb8      	it	lt
 800ca9a:	18e4      	addlt	r4, r4, r3
 800ca9c:	f7ff ff02 	bl	800c8a4 <__malloc_lock>
 800caa0:	4a1c      	ldr	r2, [pc, #112]	; (800cb14 <_free_r+0x8c>)
 800caa2:	6813      	ldr	r3, [r2, #0]
 800caa4:	b933      	cbnz	r3, 800cab4 <_free_r+0x2c>
 800caa6:	6063      	str	r3, [r4, #4]
 800caa8:	6014      	str	r4, [r2, #0]
 800caaa:	4628      	mov	r0, r5
 800caac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab0:	f7ff befe 	b.w	800c8b0 <__malloc_unlock>
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d908      	bls.n	800caca <_free_r+0x42>
 800cab8:	6820      	ldr	r0, [r4, #0]
 800caba:	1821      	adds	r1, r4, r0
 800cabc:	428b      	cmp	r3, r1
 800cabe:	bf01      	itttt	eq
 800cac0:	6819      	ldreq	r1, [r3, #0]
 800cac2:	685b      	ldreq	r3, [r3, #4]
 800cac4:	1809      	addeq	r1, r1, r0
 800cac6:	6021      	streq	r1, [r4, #0]
 800cac8:	e7ed      	b.n	800caa6 <_free_r+0x1e>
 800caca:	461a      	mov	r2, r3
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	b10b      	cbz	r3, 800cad4 <_free_r+0x4c>
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	d9fa      	bls.n	800caca <_free_r+0x42>
 800cad4:	6811      	ldr	r1, [r2, #0]
 800cad6:	1850      	adds	r0, r2, r1
 800cad8:	42a0      	cmp	r0, r4
 800cada:	d10b      	bne.n	800caf4 <_free_r+0x6c>
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	4401      	add	r1, r0
 800cae0:	1850      	adds	r0, r2, r1
 800cae2:	4283      	cmp	r3, r0
 800cae4:	6011      	str	r1, [r2, #0]
 800cae6:	d1e0      	bne.n	800caaa <_free_r+0x22>
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	4408      	add	r0, r1
 800caee:	6010      	str	r0, [r2, #0]
 800caf0:	6053      	str	r3, [r2, #4]
 800caf2:	e7da      	b.n	800caaa <_free_r+0x22>
 800caf4:	d902      	bls.n	800cafc <_free_r+0x74>
 800caf6:	230c      	movs	r3, #12
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	e7d6      	b.n	800caaa <_free_r+0x22>
 800cafc:	6820      	ldr	r0, [r4, #0]
 800cafe:	1821      	adds	r1, r4, r0
 800cb00:	428b      	cmp	r3, r1
 800cb02:	bf01      	itttt	eq
 800cb04:	6819      	ldreq	r1, [r3, #0]
 800cb06:	685b      	ldreq	r3, [r3, #4]
 800cb08:	1809      	addeq	r1, r1, r0
 800cb0a:	6021      	streq	r1, [r4, #0]
 800cb0c:	6063      	str	r3, [r4, #4]
 800cb0e:	6054      	str	r4, [r2, #4]
 800cb10:	e7cb      	b.n	800caaa <_free_r+0x22>
 800cb12:	bd38      	pop	{r3, r4, r5, pc}
 800cb14:	200004a0 	.word	0x200004a0

0800cb18 <__ssputs_r>:
 800cb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb1c:	461f      	mov	r7, r3
 800cb1e:	688e      	ldr	r6, [r1, #8]
 800cb20:	4682      	mov	sl, r0
 800cb22:	42be      	cmp	r6, r7
 800cb24:	460c      	mov	r4, r1
 800cb26:	4690      	mov	r8, r2
 800cb28:	680b      	ldr	r3, [r1, #0]
 800cb2a:	d82c      	bhi.n	800cb86 <__ssputs_r+0x6e>
 800cb2c:	898a      	ldrh	r2, [r1, #12]
 800cb2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb32:	d026      	beq.n	800cb82 <__ssputs_r+0x6a>
 800cb34:	6965      	ldr	r5, [r4, #20]
 800cb36:	6909      	ldr	r1, [r1, #16]
 800cb38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb3c:	eba3 0901 	sub.w	r9, r3, r1
 800cb40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb44:	1c7b      	adds	r3, r7, #1
 800cb46:	444b      	add	r3, r9
 800cb48:	106d      	asrs	r5, r5, #1
 800cb4a:	429d      	cmp	r5, r3
 800cb4c:	bf38      	it	cc
 800cb4e:	461d      	movcc	r5, r3
 800cb50:	0553      	lsls	r3, r2, #21
 800cb52:	d527      	bpl.n	800cba4 <__ssputs_r+0x8c>
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7ff fe25 	bl	800c7a4 <_malloc_r>
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	b360      	cbz	r0, 800cbb8 <__ssputs_r+0xa0>
 800cb5e:	464a      	mov	r2, r9
 800cb60:	6921      	ldr	r1, [r4, #16]
 800cb62:	f000 fb1c 	bl	800d19e <memcpy>
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb70:	81a3      	strh	r3, [r4, #12]
 800cb72:	6126      	str	r6, [r4, #16]
 800cb74:	444e      	add	r6, r9
 800cb76:	6026      	str	r6, [r4, #0]
 800cb78:	463e      	mov	r6, r7
 800cb7a:	6165      	str	r5, [r4, #20]
 800cb7c:	eba5 0509 	sub.w	r5, r5, r9
 800cb80:	60a5      	str	r5, [r4, #8]
 800cb82:	42be      	cmp	r6, r7
 800cb84:	d900      	bls.n	800cb88 <__ssputs_r+0x70>
 800cb86:	463e      	mov	r6, r7
 800cb88:	4632      	mov	r2, r6
 800cb8a:	4641      	mov	r1, r8
 800cb8c:	6820      	ldr	r0, [r4, #0]
 800cb8e:	f000 fade 	bl	800d14e <memmove>
 800cb92:	2000      	movs	r0, #0
 800cb94:	68a3      	ldr	r3, [r4, #8]
 800cb96:	1b9b      	subs	r3, r3, r6
 800cb98:	60a3      	str	r3, [r4, #8]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	4433      	add	r3, r6
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba4:	462a      	mov	r2, r5
 800cba6:	f000 faa3 	bl	800d0f0 <_realloc_r>
 800cbaa:	4606      	mov	r6, r0
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d1e0      	bne.n	800cb72 <__ssputs_r+0x5a>
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	6921      	ldr	r1, [r4, #16]
 800cbb4:	f7ff ff68 	bl	800ca88 <_free_r>
 800cbb8:	230c      	movs	r3, #12
 800cbba:	f8ca 3000 	str.w	r3, [sl]
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	e7e9      	b.n	800cba0 <__ssputs_r+0x88>

0800cbcc <_svfiprintf_r>:
 800cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd0:	4698      	mov	r8, r3
 800cbd2:	898b      	ldrh	r3, [r1, #12]
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	061b      	lsls	r3, r3, #24
 800cbd8:	460d      	mov	r5, r1
 800cbda:	4614      	mov	r4, r2
 800cbdc:	b09d      	sub	sp, #116	; 0x74
 800cbde:	d50e      	bpl.n	800cbfe <_svfiprintf_r+0x32>
 800cbe0:	690b      	ldr	r3, [r1, #16]
 800cbe2:	b963      	cbnz	r3, 800cbfe <_svfiprintf_r+0x32>
 800cbe4:	2140      	movs	r1, #64	; 0x40
 800cbe6:	f7ff fddd 	bl	800c7a4 <_malloc_r>
 800cbea:	6028      	str	r0, [r5, #0]
 800cbec:	6128      	str	r0, [r5, #16]
 800cbee:	b920      	cbnz	r0, 800cbfa <_svfiprintf_r+0x2e>
 800cbf0:	230c      	movs	r3, #12
 800cbf2:	603b      	str	r3, [r7, #0]
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf8:	e0d0      	b.n	800cd9c <_svfiprintf_r+0x1d0>
 800cbfa:	2340      	movs	r3, #64	; 0x40
 800cbfc:	616b      	str	r3, [r5, #20]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9309      	str	r3, [sp, #36]	; 0x24
 800cc02:	2320      	movs	r3, #32
 800cc04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc08:	2330      	movs	r3, #48	; 0x30
 800cc0a:	f04f 0901 	mov.w	r9, #1
 800cc0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc12:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cdb4 <_svfiprintf_r+0x1e8>
 800cc16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc1a:	4623      	mov	r3, r4
 800cc1c:	469a      	mov	sl, r3
 800cc1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc22:	b10a      	cbz	r2, 800cc28 <_svfiprintf_r+0x5c>
 800cc24:	2a25      	cmp	r2, #37	; 0x25
 800cc26:	d1f9      	bne.n	800cc1c <_svfiprintf_r+0x50>
 800cc28:	ebba 0b04 	subs.w	fp, sl, r4
 800cc2c:	d00b      	beq.n	800cc46 <_svfiprintf_r+0x7a>
 800cc2e:	465b      	mov	r3, fp
 800cc30:	4622      	mov	r2, r4
 800cc32:	4629      	mov	r1, r5
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff ff6f 	bl	800cb18 <__ssputs_r>
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	f000 80a9 	beq.w	800cd92 <_svfiprintf_r+0x1c6>
 800cc40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc42:	445a      	add	r2, fp
 800cc44:	9209      	str	r2, [sp, #36]	; 0x24
 800cc46:	f89a 3000 	ldrb.w	r3, [sl]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f000 80a1 	beq.w	800cd92 <_svfiprintf_r+0x1c6>
 800cc50:	2300      	movs	r3, #0
 800cc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc5a:	f10a 0a01 	add.w	sl, sl, #1
 800cc5e:	9304      	str	r3, [sp, #16]
 800cc60:	9307      	str	r3, [sp, #28]
 800cc62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc66:	931a      	str	r3, [sp, #104]	; 0x68
 800cc68:	4654      	mov	r4, sl
 800cc6a:	2205      	movs	r2, #5
 800cc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc70:	4850      	ldr	r0, [pc, #320]	; (800cdb4 <_svfiprintf_r+0x1e8>)
 800cc72:	f000 fa86 	bl	800d182 <memchr>
 800cc76:	9a04      	ldr	r2, [sp, #16]
 800cc78:	b9d8      	cbnz	r0, 800ccb2 <_svfiprintf_r+0xe6>
 800cc7a:	06d0      	lsls	r0, r2, #27
 800cc7c:	bf44      	itt	mi
 800cc7e:	2320      	movmi	r3, #32
 800cc80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc84:	0711      	lsls	r1, r2, #28
 800cc86:	bf44      	itt	mi
 800cc88:	232b      	movmi	r3, #43	; 0x2b
 800cc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc92:	2b2a      	cmp	r3, #42	; 0x2a
 800cc94:	d015      	beq.n	800ccc2 <_svfiprintf_r+0xf6>
 800cc96:	4654      	mov	r4, sl
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f04f 0c0a 	mov.w	ip, #10
 800cc9e:	9a07      	ldr	r2, [sp, #28]
 800cca0:	4621      	mov	r1, r4
 800cca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cca6:	3b30      	subs	r3, #48	; 0x30
 800cca8:	2b09      	cmp	r3, #9
 800ccaa:	d94d      	bls.n	800cd48 <_svfiprintf_r+0x17c>
 800ccac:	b1b0      	cbz	r0, 800ccdc <_svfiprintf_r+0x110>
 800ccae:	9207      	str	r2, [sp, #28]
 800ccb0:	e014      	b.n	800ccdc <_svfiprintf_r+0x110>
 800ccb2:	eba0 0308 	sub.w	r3, r0, r8
 800ccb6:	fa09 f303 	lsl.w	r3, r9, r3
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	46a2      	mov	sl, r4
 800ccbe:	9304      	str	r3, [sp, #16]
 800ccc0:	e7d2      	b.n	800cc68 <_svfiprintf_r+0x9c>
 800ccc2:	9b03      	ldr	r3, [sp, #12]
 800ccc4:	1d19      	adds	r1, r3, #4
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	9103      	str	r1, [sp, #12]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	bfbb      	ittet	lt
 800ccce:	425b      	neglt	r3, r3
 800ccd0:	f042 0202 	orrlt.w	r2, r2, #2
 800ccd4:	9307      	strge	r3, [sp, #28]
 800ccd6:	9307      	strlt	r3, [sp, #28]
 800ccd8:	bfb8      	it	lt
 800ccda:	9204      	strlt	r2, [sp, #16]
 800ccdc:	7823      	ldrb	r3, [r4, #0]
 800ccde:	2b2e      	cmp	r3, #46	; 0x2e
 800cce0:	d10c      	bne.n	800ccfc <_svfiprintf_r+0x130>
 800cce2:	7863      	ldrb	r3, [r4, #1]
 800cce4:	2b2a      	cmp	r3, #42	; 0x2a
 800cce6:	d134      	bne.n	800cd52 <_svfiprintf_r+0x186>
 800cce8:	9b03      	ldr	r3, [sp, #12]
 800ccea:	3402      	adds	r4, #2
 800ccec:	1d1a      	adds	r2, r3, #4
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	9203      	str	r2, [sp, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bfb8      	it	lt
 800ccf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ccfa:	9305      	str	r3, [sp, #20]
 800ccfc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cdb8 <_svfiprintf_r+0x1ec>
 800cd00:	2203      	movs	r2, #3
 800cd02:	4650      	mov	r0, sl
 800cd04:	7821      	ldrb	r1, [r4, #0]
 800cd06:	f000 fa3c 	bl	800d182 <memchr>
 800cd0a:	b138      	cbz	r0, 800cd1c <_svfiprintf_r+0x150>
 800cd0c:	2240      	movs	r2, #64	; 0x40
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	eba0 000a 	sub.w	r0, r0, sl
 800cd14:	4082      	lsls	r2, r0
 800cd16:	4313      	orrs	r3, r2
 800cd18:	3401      	adds	r4, #1
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd20:	2206      	movs	r2, #6
 800cd22:	4826      	ldr	r0, [pc, #152]	; (800cdbc <_svfiprintf_r+0x1f0>)
 800cd24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd28:	f000 fa2b 	bl	800d182 <memchr>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d038      	beq.n	800cda2 <_svfiprintf_r+0x1d6>
 800cd30:	4b23      	ldr	r3, [pc, #140]	; (800cdc0 <_svfiprintf_r+0x1f4>)
 800cd32:	bb1b      	cbnz	r3, 800cd7c <_svfiprintf_r+0x1b0>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	3307      	adds	r3, #7
 800cd38:	f023 0307 	bic.w	r3, r3, #7
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd42:	4433      	add	r3, r6
 800cd44:	9309      	str	r3, [sp, #36]	; 0x24
 800cd46:	e768      	b.n	800cc1a <_svfiprintf_r+0x4e>
 800cd48:	460c      	mov	r4, r1
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd50:	e7a6      	b.n	800cca0 <_svfiprintf_r+0xd4>
 800cd52:	2300      	movs	r3, #0
 800cd54:	f04f 0c0a 	mov.w	ip, #10
 800cd58:	4619      	mov	r1, r3
 800cd5a:	3401      	adds	r4, #1
 800cd5c:	9305      	str	r3, [sp, #20]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd64:	3a30      	subs	r2, #48	; 0x30
 800cd66:	2a09      	cmp	r2, #9
 800cd68:	d903      	bls.n	800cd72 <_svfiprintf_r+0x1a6>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0c6      	beq.n	800ccfc <_svfiprintf_r+0x130>
 800cd6e:	9105      	str	r1, [sp, #20]
 800cd70:	e7c4      	b.n	800ccfc <_svfiprintf_r+0x130>
 800cd72:	4604      	mov	r4, r0
 800cd74:	2301      	movs	r3, #1
 800cd76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd7a:	e7f0      	b.n	800cd5e <_svfiprintf_r+0x192>
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4638      	mov	r0, r7
 800cd84:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <_svfiprintf_r+0x1f8>)
 800cd86:	a904      	add	r1, sp, #16
 800cd88:	f3af 8000 	nop.w
 800cd8c:	1c42      	adds	r2, r0, #1
 800cd8e:	4606      	mov	r6, r0
 800cd90:	d1d6      	bne.n	800cd40 <_svfiprintf_r+0x174>
 800cd92:	89ab      	ldrh	r3, [r5, #12]
 800cd94:	065b      	lsls	r3, r3, #25
 800cd96:	f53f af2d 	bmi.w	800cbf4 <_svfiprintf_r+0x28>
 800cd9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd9c:	b01d      	add	sp, #116	; 0x74
 800cd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda2:	ab03      	add	r3, sp, #12
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	462a      	mov	r2, r5
 800cda8:	4638      	mov	r0, r7
 800cdaa:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <_svfiprintf_r+0x1f8>)
 800cdac:	a904      	add	r1, sp, #16
 800cdae:	f000 f87d 	bl	800ceac <_printf_i>
 800cdb2:	e7eb      	b.n	800cd8c <_svfiprintf_r+0x1c0>
 800cdb4:	0800e22b 	.word	0x0800e22b
 800cdb8:	0800e231 	.word	0x0800e231
 800cdbc:	0800e235 	.word	0x0800e235
 800cdc0:	00000000 	.word	0x00000000
 800cdc4:	0800cb19 	.word	0x0800cb19

0800cdc8 <_printf_common>:
 800cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	4616      	mov	r6, r2
 800cdce:	4699      	mov	r9, r3
 800cdd0:	688a      	ldr	r2, [r1, #8]
 800cdd2:	690b      	ldr	r3, [r1, #16]
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	bfb8      	it	lt
 800cdda:	4613      	movlt	r3, r2
 800cddc:	6033      	str	r3, [r6, #0]
 800cdde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cde2:	460c      	mov	r4, r1
 800cde4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cde8:	b10a      	cbz	r2, 800cdee <_printf_common+0x26>
 800cdea:	3301      	adds	r3, #1
 800cdec:	6033      	str	r3, [r6, #0]
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	0699      	lsls	r1, r3, #26
 800cdf2:	bf42      	ittt	mi
 800cdf4:	6833      	ldrmi	r3, [r6, #0]
 800cdf6:	3302      	addmi	r3, #2
 800cdf8:	6033      	strmi	r3, [r6, #0]
 800cdfa:	6825      	ldr	r5, [r4, #0]
 800cdfc:	f015 0506 	ands.w	r5, r5, #6
 800ce00:	d106      	bne.n	800ce10 <_printf_common+0x48>
 800ce02:	f104 0a19 	add.w	sl, r4, #25
 800ce06:	68e3      	ldr	r3, [r4, #12]
 800ce08:	6832      	ldr	r2, [r6, #0]
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dc2b      	bgt.n	800ce68 <_printf_common+0xa0>
 800ce10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce14:	1e13      	subs	r3, r2, #0
 800ce16:	6822      	ldr	r2, [r4, #0]
 800ce18:	bf18      	it	ne
 800ce1a:	2301      	movne	r3, #1
 800ce1c:	0692      	lsls	r2, r2, #26
 800ce1e:	d430      	bmi.n	800ce82 <_printf_common+0xba>
 800ce20:	4649      	mov	r1, r9
 800ce22:	4638      	mov	r0, r7
 800ce24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce28:	47c0      	blx	r8
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	d023      	beq.n	800ce76 <_printf_common+0xae>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	6922      	ldr	r2, [r4, #16]
 800ce32:	f003 0306 	and.w	r3, r3, #6
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	bf14      	ite	ne
 800ce3a:	2500      	movne	r5, #0
 800ce3c:	6833      	ldreq	r3, [r6, #0]
 800ce3e:	f04f 0600 	mov.w	r6, #0
 800ce42:	bf08      	it	eq
 800ce44:	68e5      	ldreq	r5, [r4, #12]
 800ce46:	f104 041a 	add.w	r4, r4, #26
 800ce4a:	bf08      	it	eq
 800ce4c:	1aed      	subeq	r5, r5, r3
 800ce4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ce52:	bf08      	it	eq
 800ce54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	bfc4      	itt	gt
 800ce5c:	1a9b      	subgt	r3, r3, r2
 800ce5e:	18ed      	addgt	r5, r5, r3
 800ce60:	42b5      	cmp	r5, r6
 800ce62:	d11a      	bne.n	800ce9a <_printf_common+0xd2>
 800ce64:	2000      	movs	r0, #0
 800ce66:	e008      	b.n	800ce7a <_printf_common+0xb2>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	4649      	mov	r1, r9
 800ce6e:	4638      	mov	r0, r7
 800ce70:	47c0      	blx	r8
 800ce72:	3001      	adds	r0, #1
 800ce74:	d103      	bne.n	800ce7e <_printf_common+0xb6>
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7e:	3501      	adds	r5, #1
 800ce80:	e7c1      	b.n	800ce06 <_printf_common+0x3e>
 800ce82:	2030      	movs	r0, #48	; 0x30
 800ce84:	18e1      	adds	r1, r4, r3
 800ce86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce90:	4422      	add	r2, r4
 800ce92:	3302      	adds	r3, #2
 800ce94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce98:	e7c2      	b.n	800ce20 <_printf_common+0x58>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	4649      	mov	r1, r9
 800cea0:	4638      	mov	r0, r7
 800cea2:	47c0      	blx	r8
 800cea4:	3001      	adds	r0, #1
 800cea6:	d0e6      	beq.n	800ce76 <_printf_common+0xae>
 800cea8:	3601      	adds	r6, #1
 800ceaa:	e7d9      	b.n	800ce60 <_printf_common+0x98>

0800ceac <_printf_i>:
 800ceac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb0:	7e0f      	ldrb	r7, [r1, #24]
 800ceb2:	4691      	mov	r9, r2
 800ceb4:	2f78      	cmp	r7, #120	; 0x78
 800ceb6:	4680      	mov	r8, r0
 800ceb8:	460c      	mov	r4, r1
 800ceba:	469a      	mov	sl, r3
 800cebc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cec2:	d807      	bhi.n	800ced4 <_printf_i+0x28>
 800cec4:	2f62      	cmp	r7, #98	; 0x62
 800cec6:	d80a      	bhi.n	800cede <_printf_i+0x32>
 800cec8:	2f00      	cmp	r7, #0
 800ceca:	f000 80d5 	beq.w	800d078 <_printf_i+0x1cc>
 800cece:	2f58      	cmp	r7, #88	; 0x58
 800ced0:	f000 80c1 	beq.w	800d056 <_printf_i+0x1aa>
 800ced4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ced8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cedc:	e03a      	b.n	800cf54 <_printf_i+0xa8>
 800cede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cee2:	2b15      	cmp	r3, #21
 800cee4:	d8f6      	bhi.n	800ced4 <_printf_i+0x28>
 800cee6:	a101      	add	r1, pc, #4	; (adr r1, 800ceec <_printf_i+0x40>)
 800cee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ceec:	0800cf45 	.word	0x0800cf45
 800cef0:	0800cf59 	.word	0x0800cf59
 800cef4:	0800ced5 	.word	0x0800ced5
 800cef8:	0800ced5 	.word	0x0800ced5
 800cefc:	0800ced5 	.word	0x0800ced5
 800cf00:	0800ced5 	.word	0x0800ced5
 800cf04:	0800cf59 	.word	0x0800cf59
 800cf08:	0800ced5 	.word	0x0800ced5
 800cf0c:	0800ced5 	.word	0x0800ced5
 800cf10:	0800ced5 	.word	0x0800ced5
 800cf14:	0800ced5 	.word	0x0800ced5
 800cf18:	0800d05f 	.word	0x0800d05f
 800cf1c:	0800cf85 	.word	0x0800cf85
 800cf20:	0800d019 	.word	0x0800d019
 800cf24:	0800ced5 	.word	0x0800ced5
 800cf28:	0800ced5 	.word	0x0800ced5
 800cf2c:	0800d081 	.word	0x0800d081
 800cf30:	0800ced5 	.word	0x0800ced5
 800cf34:	0800cf85 	.word	0x0800cf85
 800cf38:	0800ced5 	.word	0x0800ced5
 800cf3c:	0800ced5 	.word	0x0800ced5
 800cf40:	0800d021 	.word	0x0800d021
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	1d1a      	adds	r2, r3, #4
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	602a      	str	r2, [r5, #0]
 800cf4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf54:	2301      	movs	r3, #1
 800cf56:	e0a0      	b.n	800d09a <_printf_i+0x1ee>
 800cf58:	6820      	ldr	r0, [r4, #0]
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	0607      	lsls	r7, r0, #24
 800cf5e:	f103 0104 	add.w	r1, r3, #4
 800cf62:	6029      	str	r1, [r5, #0]
 800cf64:	d501      	bpl.n	800cf6a <_printf_i+0xbe>
 800cf66:	681e      	ldr	r6, [r3, #0]
 800cf68:	e003      	b.n	800cf72 <_printf_i+0xc6>
 800cf6a:	0646      	lsls	r6, r0, #25
 800cf6c:	d5fb      	bpl.n	800cf66 <_printf_i+0xba>
 800cf6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cf72:	2e00      	cmp	r6, #0
 800cf74:	da03      	bge.n	800cf7e <_printf_i+0xd2>
 800cf76:	232d      	movs	r3, #45	; 0x2d
 800cf78:	4276      	negs	r6, r6
 800cf7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf7e:	230a      	movs	r3, #10
 800cf80:	4859      	ldr	r0, [pc, #356]	; (800d0e8 <_printf_i+0x23c>)
 800cf82:	e012      	b.n	800cfaa <_printf_i+0xfe>
 800cf84:	682b      	ldr	r3, [r5, #0]
 800cf86:	6820      	ldr	r0, [r4, #0]
 800cf88:	1d19      	adds	r1, r3, #4
 800cf8a:	6029      	str	r1, [r5, #0]
 800cf8c:	0605      	lsls	r5, r0, #24
 800cf8e:	d501      	bpl.n	800cf94 <_printf_i+0xe8>
 800cf90:	681e      	ldr	r6, [r3, #0]
 800cf92:	e002      	b.n	800cf9a <_printf_i+0xee>
 800cf94:	0641      	lsls	r1, r0, #25
 800cf96:	d5fb      	bpl.n	800cf90 <_printf_i+0xe4>
 800cf98:	881e      	ldrh	r6, [r3, #0]
 800cf9a:	2f6f      	cmp	r7, #111	; 0x6f
 800cf9c:	bf0c      	ite	eq
 800cf9e:	2308      	moveq	r3, #8
 800cfa0:	230a      	movne	r3, #10
 800cfa2:	4851      	ldr	r0, [pc, #324]	; (800d0e8 <_printf_i+0x23c>)
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfaa:	6865      	ldr	r5, [r4, #4]
 800cfac:	2d00      	cmp	r5, #0
 800cfae:	bfa8      	it	ge
 800cfb0:	6821      	ldrge	r1, [r4, #0]
 800cfb2:	60a5      	str	r5, [r4, #8]
 800cfb4:	bfa4      	itt	ge
 800cfb6:	f021 0104 	bicge.w	r1, r1, #4
 800cfba:	6021      	strge	r1, [r4, #0]
 800cfbc:	b90e      	cbnz	r6, 800cfc2 <_printf_i+0x116>
 800cfbe:	2d00      	cmp	r5, #0
 800cfc0:	d04b      	beq.n	800d05a <_printf_i+0x1ae>
 800cfc2:	4615      	mov	r5, r2
 800cfc4:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfc8:	fb03 6711 	mls	r7, r3, r1, r6
 800cfcc:	5dc7      	ldrb	r7, [r0, r7]
 800cfce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfd2:	4637      	mov	r7, r6
 800cfd4:	42bb      	cmp	r3, r7
 800cfd6:	460e      	mov	r6, r1
 800cfd8:	d9f4      	bls.n	800cfc4 <_printf_i+0x118>
 800cfda:	2b08      	cmp	r3, #8
 800cfdc:	d10b      	bne.n	800cff6 <_printf_i+0x14a>
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	07de      	lsls	r6, r3, #31
 800cfe2:	d508      	bpl.n	800cff6 <_printf_i+0x14a>
 800cfe4:	6923      	ldr	r3, [r4, #16]
 800cfe6:	6861      	ldr	r1, [r4, #4]
 800cfe8:	4299      	cmp	r1, r3
 800cfea:	bfde      	ittt	le
 800cfec:	2330      	movle	r3, #48	; 0x30
 800cfee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cff2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cff6:	1b52      	subs	r2, r2, r5
 800cff8:	6122      	str	r2, [r4, #16]
 800cffa:	464b      	mov	r3, r9
 800cffc:	4621      	mov	r1, r4
 800cffe:	4640      	mov	r0, r8
 800d000:	f8cd a000 	str.w	sl, [sp]
 800d004:	aa03      	add	r2, sp, #12
 800d006:	f7ff fedf 	bl	800cdc8 <_printf_common>
 800d00a:	3001      	adds	r0, #1
 800d00c:	d14a      	bne.n	800d0a4 <_printf_i+0x1f8>
 800d00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d012:	b004      	add	sp, #16
 800d014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d018:	6823      	ldr	r3, [r4, #0]
 800d01a:	f043 0320 	orr.w	r3, r3, #32
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	2778      	movs	r7, #120	; 0x78
 800d022:	4832      	ldr	r0, [pc, #200]	; (800d0ec <_printf_i+0x240>)
 800d024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	6829      	ldr	r1, [r5, #0]
 800d02c:	061f      	lsls	r7, r3, #24
 800d02e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d032:	d402      	bmi.n	800d03a <_printf_i+0x18e>
 800d034:	065f      	lsls	r7, r3, #25
 800d036:	bf48      	it	mi
 800d038:	b2b6      	uxthmi	r6, r6
 800d03a:	07df      	lsls	r7, r3, #31
 800d03c:	bf48      	it	mi
 800d03e:	f043 0320 	orrmi.w	r3, r3, #32
 800d042:	6029      	str	r1, [r5, #0]
 800d044:	bf48      	it	mi
 800d046:	6023      	strmi	r3, [r4, #0]
 800d048:	b91e      	cbnz	r6, 800d052 <_printf_i+0x1a6>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	f023 0320 	bic.w	r3, r3, #32
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	2310      	movs	r3, #16
 800d054:	e7a6      	b.n	800cfa4 <_printf_i+0xf8>
 800d056:	4824      	ldr	r0, [pc, #144]	; (800d0e8 <_printf_i+0x23c>)
 800d058:	e7e4      	b.n	800d024 <_printf_i+0x178>
 800d05a:	4615      	mov	r5, r2
 800d05c:	e7bd      	b.n	800cfda <_printf_i+0x12e>
 800d05e:	682b      	ldr	r3, [r5, #0]
 800d060:	6826      	ldr	r6, [r4, #0]
 800d062:	1d18      	adds	r0, r3, #4
 800d064:	6961      	ldr	r1, [r4, #20]
 800d066:	6028      	str	r0, [r5, #0]
 800d068:	0635      	lsls	r5, r6, #24
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	d501      	bpl.n	800d072 <_printf_i+0x1c6>
 800d06e:	6019      	str	r1, [r3, #0]
 800d070:	e002      	b.n	800d078 <_printf_i+0x1cc>
 800d072:	0670      	lsls	r0, r6, #25
 800d074:	d5fb      	bpl.n	800d06e <_printf_i+0x1c2>
 800d076:	8019      	strh	r1, [r3, #0]
 800d078:	2300      	movs	r3, #0
 800d07a:	4615      	mov	r5, r2
 800d07c:	6123      	str	r3, [r4, #16]
 800d07e:	e7bc      	b.n	800cffa <_printf_i+0x14e>
 800d080:	682b      	ldr	r3, [r5, #0]
 800d082:	2100      	movs	r1, #0
 800d084:	1d1a      	adds	r2, r3, #4
 800d086:	602a      	str	r2, [r5, #0]
 800d088:	681d      	ldr	r5, [r3, #0]
 800d08a:	6862      	ldr	r2, [r4, #4]
 800d08c:	4628      	mov	r0, r5
 800d08e:	f000 f878 	bl	800d182 <memchr>
 800d092:	b108      	cbz	r0, 800d098 <_printf_i+0x1ec>
 800d094:	1b40      	subs	r0, r0, r5
 800d096:	6060      	str	r0, [r4, #4]
 800d098:	6863      	ldr	r3, [r4, #4]
 800d09a:	6123      	str	r3, [r4, #16]
 800d09c:	2300      	movs	r3, #0
 800d09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a2:	e7aa      	b.n	800cffa <_printf_i+0x14e>
 800d0a4:	462a      	mov	r2, r5
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	6923      	ldr	r3, [r4, #16]
 800d0ac:	47d0      	blx	sl
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	d0ad      	beq.n	800d00e <_printf_i+0x162>
 800d0b2:	6823      	ldr	r3, [r4, #0]
 800d0b4:	079b      	lsls	r3, r3, #30
 800d0b6:	d413      	bmi.n	800d0e0 <_printf_i+0x234>
 800d0b8:	68e0      	ldr	r0, [r4, #12]
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	4298      	cmp	r0, r3
 800d0be:	bfb8      	it	lt
 800d0c0:	4618      	movlt	r0, r3
 800d0c2:	e7a6      	b.n	800d012 <_printf_i+0x166>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	4632      	mov	r2, r6
 800d0c8:	4649      	mov	r1, r9
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	47d0      	blx	sl
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	d09d      	beq.n	800d00e <_printf_i+0x162>
 800d0d2:	3501      	adds	r5, #1
 800d0d4:	68e3      	ldr	r3, [r4, #12]
 800d0d6:	9903      	ldr	r1, [sp, #12]
 800d0d8:	1a5b      	subs	r3, r3, r1
 800d0da:	42ab      	cmp	r3, r5
 800d0dc:	dcf2      	bgt.n	800d0c4 <_printf_i+0x218>
 800d0de:	e7eb      	b.n	800d0b8 <_printf_i+0x20c>
 800d0e0:	2500      	movs	r5, #0
 800d0e2:	f104 0619 	add.w	r6, r4, #25
 800d0e6:	e7f5      	b.n	800d0d4 <_printf_i+0x228>
 800d0e8:	0800e23c 	.word	0x0800e23c
 800d0ec:	0800e24d 	.word	0x0800e24d

0800d0f0 <_realloc_r>:
 800d0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f4:	4680      	mov	r8, r0
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	b921      	cbnz	r1, 800d106 <_realloc_r+0x16>
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d102:	f7ff bb4f 	b.w	800c7a4 <_malloc_r>
 800d106:	b92a      	cbnz	r2, 800d114 <_realloc_r+0x24>
 800d108:	f7ff fcbe 	bl	800ca88 <_free_r>
 800d10c:	4625      	mov	r5, r4
 800d10e:	4628      	mov	r0, r5
 800d110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d114:	f000 f851 	bl	800d1ba <_malloc_usable_size_r>
 800d118:	4284      	cmp	r4, r0
 800d11a:	4607      	mov	r7, r0
 800d11c:	d802      	bhi.n	800d124 <_realloc_r+0x34>
 800d11e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d122:	d812      	bhi.n	800d14a <_realloc_r+0x5a>
 800d124:	4621      	mov	r1, r4
 800d126:	4640      	mov	r0, r8
 800d128:	f7ff fb3c 	bl	800c7a4 <_malloc_r>
 800d12c:	4605      	mov	r5, r0
 800d12e:	2800      	cmp	r0, #0
 800d130:	d0ed      	beq.n	800d10e <_realloc_r+0x1e>
 800d132:	42bc      	cmp	r4, r7
 800d134:	4622      	mov	r2, r4
 800d136:	4631      	mov	r1, r6
 800d138:	bf28      	it	cs
 800d13a:	463a      	movcs	r2, r7
 800d13c:	f000 f82f 	bl	800d19e <memcpy>
 800d140:	4631      	mov	r1, r6
 800d142:	4640      	mov	r0, r8
 800d144:	f7ff fca0 	bl	800ca88 <_free_r>
 800d148:	e7e1      	b.n	800d10e <_realloc_r+0x1e>
 800d14a:	4635      	mov	r5, r6
 800d14c:	e7df      	b.n	800d10e <_realloc_r+0x1e>

0800d14e <memmove>:
 800d14e:	4288      	cmp	r0, r1
 800d150:	b510      	push	{r4, lr}
 800d152:	eb01 0402 	add.w	r4, r1, r2
 800d156:	d902      	bls.n	800d15e <memmove+0x10>
 800d158:	4284      	cmp	r4, r0
 800d15a:	4623      	mov	r3, r4
 800d15c:	d807      	bhi.n	800d16e <memmove+0x20>
 800d15e:	1e43      	subs	r3, r0, #1
 800d160:	42a1      	cmp	r1, r4
 800d162:	d008      	beq.n	800d176 <memmove+0x28>
 800d164:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d168:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d16c:	e7f8      	b.n	800d160 <memmove+0x12>
 800d16e:	4601      	mov	r1, r0
 800d170:	4402      	add	r2, r0
 800d172:	428a      	cmp	r2, r1
 800d174:	d100      	bne.n	800d178 <memmove+0x2a>
 800d176:	bd10      	pop	{r4, pc}
 800d178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d17c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d180:	e7f7      	b.n	800d172 <memmove+0x24>

0800d182 <memchr>:
 800d182:	4603      	mov	r3, r0
 800d184:	b510      	push	{r4, lr}
 800d186:	b2c9      	uxtb	r1, r1
 800d188:	4402      	add	r2, r0
 800d18a:	4293      	cmp	r3, r2
 800d18c:	4618      	mov	r0, r3
 800d18e:	d101      	bne.n	800d194 <memchr+0x12>
 800d190:	2000      	movs	r0, #0
 800d192:	e003      	b.n	800d19c <memchr+0x1a>
 800d194:	7804      	ldrb	r4, [r0, #0]
 800d196:	3301      	adds	r3, #1
 800d198:	428c      	cmp	r4, r1
 800d19a:	d1f6      	bne.n	800d18a <memchr+0x8>
 800d19c:	bd10      	pop	{r4, pc}

0800d19e <memcpy>:
 800d19e:	440a      	add	r2, r1
 800d1a0:	4291      	cmp	r1, r2
 800d1a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d1a6:	d100      	bne.n	800d1aa <memcpy+0xc>
 800d1a8:	4770      	bx	lr
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1b0:	4291      	cmp	r1, r2
 800d1b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1b6:	d1f9      	bne.n	800d1ac <memcpy+0xe>
 800d1b8:	bd10      	pop	{r4, pc}

0800d1ba <_malloc_usable_size_r>:
 800d1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1be:	1f18      	subs	r0, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	bfbc      	itt	lt
 800d1c4:	580b      	ldrlt	r3, [r1, r0]
 800d1c6:	18c0      	addlt	r0, r0, r3
 800d1c8:	4770      	bx	lr
	...

0800d1cc <_init>:
 800d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ce:	bf00      	nop
 800d1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d2:	bc08      	pop	{r3}
 800d1d4:	469e      	mov	lr, r3
 800d1d6:	4770      	bx	lr

0800d1d8 <_fini>:
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1da:	bf00      	nop
 800d1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1de:	bc08      	pop	{r3}
 800d1e0:	469e      	mov	lr, r3
 800d1e2:	4770      	bx	lr
