
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d160  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800d344  0800d344  0001d344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7d4  0800d7d4  00020b9c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7d4  0800d7d4  00020b9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7d4  0800d7d4  00020b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7d4  0800d7d4  0001d7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7d8  0800d7d8  0001d7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b9c  20000000  0800d7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  20000b9c  0800e378  00020b9c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000154c  0800e378  0002154c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b9c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020bc5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018852  00000000  00000000  00020c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b1  00000000  00000000  0003945a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e96  00000000  00000000  0003dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c86e  00000000  00000000  0003eb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c54e  00000000  00000000  0005b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a01b3  00000000  00000000  0007792a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d4  00000000  00000000  00117ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000b9c 	.word	0x20000b9c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d32c 	.word	0x0800d32c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000ba0 	.word	0x20000ba0
 8000220:	0800d32c 	.word	0x0800d32c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fe5a 	bl	8009f08 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fcd2 	bl	8008c00 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000bb8 	.word	0x20000bb8
 80004bc:	20001318 	.word	0x20001318
 80004c0:	20000c65 	.word	0x20000c65
 80004c4:	20000c8d 	.word	0x20000c8d
 80004c8:	20000c90 	.word	0x20000c90
 80004cc:	20000c91 	.word	0x20000c91
 80004d0:	20000c92 	.word	0x20000c92
 80004d4:	20000c93 	.word	0x20000c93
 80004d8:	20000c94 	.word	0x20000c94
 80004dc:	20000c95 	.word	0x20000c95
 80004e0:	20000ca5 	.word	0x20000ca5
 80004e4:	20000c96 	.word	0x20000c96
 80004e8:	20000ca6 	.word	0x20000ca6
 80004ec:	20000c97 	.word	0x20000c97
 80004f0:	20000ca7 	.word	0x20000ca7
 80004f4:	20000c9a 	.word	0x20000c9a
 80004f8:	20000c9b 	.word	0x20000c9b
 80004fc:	20000c9c 	.word	0x20000c9c
 8000500:	20000c9d 	.word	0x20000c9d
 8000504:	20000c9e 	.word	0x20000c9e
 8000508:	20000c9f 	.word	0x20000c9f
 800050c:	20000ca0 	.word	0x20000ca0
 8000510:	20000ca1 	.word	0x20000ca1
 8000514:	20000ca2 	.word	0x20000ca2
 8000518:	20000ca3 	.word	0x20000ca3
 800051c:	20000ca4 	.word	0x20000ca4
 8000520:	20000ca8 	.word	0x20000ca8
 8000524:	20000caa 	.word	0x20000caa
 8000528:	20000c88 	.word	0x20000c88
 800052c:	20000c89 	.word	0x20000c89
 8000530:	20000c8a 	.word	0x20000c8a
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000c8b 	.word	0x20000c8b
 8000540:	20000cad 	.word	0x20000cad
 8000544:	20000cab 	.word	0x20000cab
 8000548:	20000c99 	.word	0x20000c99
 800054c:	20000cac 	.word	0x20000cac
 8000550:	20000c98 	.word	0x20000c98
 8000554:	20000cae 	.word	0x20000cae
 8000558:	20000caf 	.word	0x20000caf
 800055c:	20000cb0 	.word	0x20000cb0
 8000560:	20000cb1 	.word	0x20000cb1
 8000564:	20000cb2 	.word	0x20000cb2
 8000568:	20000cb3 	.word	0x20000cb3
 800056c:	20000cb4 	.word	0x20000cb4
 8000570:	20000cb5 	.word	0x20000cb5
 8000574:	20000cb6 	.word	0x20000cb6
 8000578:	20000cb7 	.word	0x20000cb7
 800057c:	20000c64 	.word	0x20000c64
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	; (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	; (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	; (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	; (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	; (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	; (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	; (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 faa0 	bl	8008c00 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 fa9a 	bl	8008c00 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 fa94 	bl	8008c00 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fda3 	bl	8006228 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000ca5 	.word	0x20000ca5
 80006ec:	20000c96 	.word	0x20000c96
 80006f0:	20000ca6 	.word	0x20000ca6
 80006f4:	20000c97 	.word	0x20000c97
 80006f8:	20000c99 	.word	0x20000c99
 80006fc:	20000ca7 	.word	0x20000ca7
 8000700:	20000c9a 	.word	0x20000c9a
 8000704:	20000c9b 	.word	0x20000c9b
 8000708:	20000c9c 	.word	0x20000c9c
 800070c:	20000c9d 	.word	0x20000c9d
 8000710:	20000c9e 	.word	0x20000c9e
 8000714:	20000c9f 	.word	0x20000c9f
 8000718:	20000ca0 	.word	0x20000ca0
 800071c:	20000ca1 	.word	0x20000ca1
 8000720:	20000ca2 	.word	0x20000ca2
 8000724:	20000ca3 	.word	0x20000ca3
 8000728:	20000ca4 	.word	0x20000ca4
 800072c:	20000ca8 	.word	0x20000ca8
 8000730:	20000caa 	.word	0x20000caa
 8000734:	20000cac 	.word	0x20000cac
 8000738:	20000cad 	.word	0x20000cad
 800073c:	20000cab 	.word	0x20000cab

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	; 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	; (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	; (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	; (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	; 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000bb8 	.word	0x20000bb8
 8000828:	20000010 	.word	0x20000010
 800082c:	20000c30 	.word	0x20000c30
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20000c3c 	.word	0x20000c3c
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000c50 	.word	0x20000c50

08000844 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b09f      	sub	sp, #124	; 0x7c
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000850:	4948      	ldr	r1, [pc, #288]	; (8000974 <ESP8266_Init+0x130>)
 8000852:	4849      	ldr	r0, [pc, #292]	; (8000978 <ESP8266_Init+0x134>)
 8000854:	f00c f8e2 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <ESP8266_Init+0x134>)
 800085a:	f7ff fce3 	bl	8000224 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4944      	ldr	r1, [pc, #272]	; (8000978 <ESP8266_Init+0x134>)
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f00b fa96 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f008 f9c6 	bl	8008c00 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000874:	4941      	ldr	r1, [pc, #260]	; (800097c <ESP8266_Init+0x138>)
 8000876:	4840      	ldr	r0, [pc, #256]	; (8000978 <ESP8266_Init+0x134>)
 8000878:	f00c f8d0 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800087c:	483e      	ldr	r0, [pc, #248]	; (8000978 <ESP8266_Init+0x134>)
 800087e:	f7ff fcd1 	bl	8000224 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	493b      	ldr	r1, [pc, #236]	; (8000978 <ESP8266_Init+0x134>)
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f00b fa84 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000894:	f008 f9b4 	bl	8008c00 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000898:	4939      	ldr	r1, [pc, #228]	; (8000980 <ESP8266_Init+0x13c>)
 800089a:	4837      	ldr	r0, [pc, #220]	; (8000978 <ESP8266_Init+0x134>)
 800089c:	f00c f8be 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a0:	4835      	ldr	r0, [pc, #212]	; (8000978 <ESP8266_Init+0x134>)
 80008a2:	f7ff fcbf 	bl	8000224 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4932      	ldr	r1, [pc, #200]	; (8000978 <ESP8266_Init+0x134>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f00b fa72 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b8:	f008 f9a2 	bl	8008c00 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008bc:	4931      	ldr	r1, [pc, #196]	; (8000984 <ESP8266_Init+0x140>)
 80008be:	482e      	ldr	r0, [pc, #184]	; (8000978 <ESP8266_Init+0x134>)
 80008c0:	f00c f8ac 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <ESP8266_Init+0x134>)
 80008c6:	f7ff fcad 	bl	8000224 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4929      	ldr	r1, [pc, #164]	; (8000978 <ESP8266_Init+0x134>)
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f00b fa60 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008dc:	f008 f990 	bl	8008c00 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <ESP8266_Init+0x144>)
 80008e6:	461c      	mov	r4, r3
 80008e8:	4613      	mov	r3, r2
 80008ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ec:	c407      	stmia	r4!, {r0, r1, r2}
 80008ee:	8023      	strh	r3, [r4, #0]
 80008f0:	3402      	adds	r4, #2
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00c f8ef 	bl	800cae0 <strcat>
	strcat(str, "\",\"");
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8c 	bl	8000224 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4413      	add	r3, r2
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <ESP8266_Init+0x148>)
 8000918:	6810      	ldr	r0, [r2, #0]
 800091a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f00c f8dc 	bl	800cae0 <strcat>
	strcat(str, "\"\r\n");
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc79 	bl	8000224 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4413      	add	r3, r2
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <ESP8266_Init+0x14c>)
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	461a      	mov	r2, r3
 8000948:	4912      	ldr	r1, [pc, #72]	; (8000994 <ESP8266_Init+0x150>)
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <ESP8266_Init+0x134>)
 800094c:	f00c f866 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <ESP8266_Init+0x134>)
 8000952:	f7ff fc67 	bl	8000224 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29b      	uxth	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <ESP8266_Init+0x134>)
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f00b fa1a 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000964:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000968:	f008 f94a 	bl	8008c00 <HAL_Delay>
}
 800096c:	bf00      	nop
 800096e:	377c      	adds	r7, #124	; 0x7c
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	0800d344 	.word	0x0800d344
 8000978:	20000cf0 	.word	0x20000cf0
 800097c:	0800d354 	.word	0x0800d354
 8000980:	0800d360 	.word	0x0800d360
 8000984:	0800d368 	.word	0x0800d368
 8000988:	0800d378 	.word	0x0800d378
 800098c:	0800d388 	.word	0x0800d388
 8000990:	0800d38c 	.word	0x0800d38c
 8000994:	0800d390 	.word	0x0800d390

08000998 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800099e:	af04      	add	r7, sp, #16
 80009a0:	f507 7414 	add.w	r4, r7, #592	; 0x250
 80009a4:	f5a4 7411 	sub.w	r4, r4, #580	; 0x244
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80009ae:	f5a0 7012 	sub.w	r0, r0, #584	; 0x248
 80009b2:	6001      	str	r1, [r0, #0]
 80009b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80009b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80009bc:	600a      	str	r2, [r1, #0]
 80009be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80009c2:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80009c6:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 80009c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009cc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80009d0:	f107 0014 	add.w	r0, r7, #20
 80009d4:	220c      	movs	r2, #12
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	f00c f891 	bl	800cafe <strncpy>
	subMachineID[12] = '\0';
 80009dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009e0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e8:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <sendMachineData+0x128>)
 80009ea:	4936      	ldr	r1, [pc, #216]	; (8000ac4 <sendMachineData+0x12c>)
 80009ec:	4836      	ldr	r0, [pc, #216]	; (8000ac8 <sendMachineData+0x130>)
 80009ee:	f00c f815 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f2:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <sendMachineData+0x130>)
 80009f4:	f7ff fc16 	bl	8000224 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a00:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a04:	4930      	ldr	r1, [pc, #192]	; (8000ac8 <sendMachineData+0x130>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f00b f9c6 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a0c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a10:	f008 f8f6 	bl	8008c00 <HAL_Delay>

	sprintf(local_txA,
 8000a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000a1c:	f107 0114 	add.w	r1, r7, #20
 8000a20:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000a24:	4a29      	ldr	r2, [pc, #164]	; (8000acc <sendMachineData+0x134>)
 8000a26:	9202      	str	r2, [sp, #8]
 8000a28:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000a32:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	4924      	ldr	r1, [pc, #144]	; (8000ad0 <sendMachineData+0x138>)
 8000a40:	f00b ffec 	bl	800ca1c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbeb 	bl	8000224 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000a5c:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <sendMachineData+0x13c>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00b ffdc 	bl	800ca1c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbdb 	bl	8000224 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00b f98a 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a84:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a88:	f008 f8ba 	bl	8008c00 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbc7 	bl	8000224 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000aa2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f00b f976 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ab0:	f008 f8a6 	bl	8008c00 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0800d394 	.word	0x0800d394
 8000ac4:	0800d3a4 	.word	0x0800d3a4
 8000ac8:	20000cf0 	.word	0x20000cf0
 8000acc:	0800d438 	.word	0x0800d438
 8000ad0:	0800d3c4 	.word	0x0800d3c4
 8000ad4:	0800d44c 	.word	0x0800d44c

08000ad8 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	f6ad 2d18 	subw	sp, sp, #2584	; 0xa18
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000ae4:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000ae8:	6018      	str	r0, [r3, #0]
 8000aea:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000aee:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000af2:	6019      	str	r1, [r3, #0]
	int len;

	char bufferRX[2000];

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000af4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000af8:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	220c      	movs	r2, #12
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	f00b fffb 	bl	800cafe <strncpy>
	subMachineID[12] = '\0';
 8000b08:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b0c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8000b10:	2200      	movs	r2, #0
 8000b12:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b14:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <checkMachineID+0x13c>)
 8000b16:	4940      	ldr	r1, [pc, #256]	; (8000c18 <checkMachineID+0x140>)
 8000b18:	4840      	ldr	r0, [pc, #256]	; (8000c1c <checkMachineID+0x144>)
 8000b1a:	f00b ff7f 	bl	800ca1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b1e:	483f      	ldr	r0, [pc, #252]	; (8000c1c <checkMachineID+0x144>)
 8000b20:	f7ff fb80 	bl	8000224 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b2c:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b30:	493a      	ldr	r1, [pc, #232]	; (8000c1c <checkMachineID+0x144>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	f00b f930 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f008 f860 	bl	8008c00 <HAL_Delay>

	sprintf(local_txA,
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f507 6002 	add.w	r0, r7, #2080	; 0x820
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <checkMachineID+0x148>)
 8000b4a:	4936      	ldr	r1, [pc, #216]	; (8000c24 <checkMachineID+0x14c>)
 8000b4c:	f00b ff66 	bl	800ca1c <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);
	len = strlen(local_txA);
 8000b50:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b60:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b64:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 8000b68:	492f      	ldr	r1, [pc, #188]	; (8000c28 <checkMachineID+0x150>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00b ff56 	bl	800ca1c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b70:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb55 	bl	8000224 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f207 71ec 	addw	r1, r7, #2028	; 0x7ec
 8000b82:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b86:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f00b f904 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b90:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b94:	f008 f834 	bl	8008c00 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b98:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb41 	bl	8000224 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8000baa:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bae:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	f00b f8f0 	bl	800bd98 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000bb8:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bbc:	f008 f820 	bl	8008c00 <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000bc0:	f107 011c 	add.w	r1, r7, #28
 8000bc4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bc8:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f00b f916 	bl	800be02 <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000bd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bda:	f008 f811 	bl	8008c00 <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") || strstr(bufferRX, "HTTP/1.0 200 OK")) {
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4912      	ldr	r1, [pc, #72]	; (8000c2c <checkMachineID+0x154>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00b ff9d 	bl	800cb24 <strstr>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d108      	bne.n	8000c02 <checkMachineID+0x12a>
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	490e      	ldr	r1, [pc, #56]	; (8000c30 <checkMachineID+0x158>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00b ff94 	bl	800cb24 <strstr>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <checkMachineID+0x12e>
	    return 1; // Başarılı yanıt
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <checkMachineID+0x130>
	}

	return 0; // Yanıt başarısız
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f607 2718 	addw	r7, r7, #2584	; 0xa18
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800d394 	.word	0x0800d394
 8000c18:	0800d3a4 	.word	0x0800d3a4
 8000c1c:	20000cf0 	.word	0x20000cf0
 8000c20:	0800d438 	.word	0x0800d438
 8000c24:	0800d45c 	.word	0x0800d45c
 8000c28:	0800d44c 	.word	0x0800d44c
 8000c2c:	0800d4a0 	.word	0x0800d4a0
 8000c30:	0800d4b0 	.word	0x0800d4b0

08000c34 <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c52:	f000 f929 	bl	8000ea8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c56:	e000      	b.n	8000c5a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c58:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e012      	b.n	8000c86 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	4918      	ldr	r1, [pc, #96]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	54ca      	strb	r2, [r1, r3]
					break;
 8000c7e:	e007      	b.n	8000c90 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbe7      	blt.n	8000c60 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <hata2EEPROM+0xa8>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	b292      	uxth	r2, r2
 8000caa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000cae:	9402      	str	r4, [sp, #8]
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	21a0      	movs	r1, #160	; 0xa0
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <hata2EEPROM+0xac>)
 8000cbc:	f009 f82a 	bl	8009d14 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc4:	f007 ff9c 	bl	8008c00 <HAL_Delay>
	eepromKontrol();
 8000cc8:	f7ff fab4 	bl	8000234 <eepromKontrol>
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000098 	.word	0x20000098
 8000cd8:	2000009c 	.word	0x2000009c
 8000cdc:	20000bb8 	.word	0x20000bb8
 8000ce0:	20001318 	.word	0x20001318

08000ce4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d11d      	bne.n	8000d30 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000cf4:	4b62      	ldr	r3, [pc, #392]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000cfc:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2001      	movs	r0, #1
 8000d02:	f007 fa27 	bl	8008154 <lcd_print>
 8000d06:	e008      	b.n	8000d1a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000d08:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d104      	bne.n	8000d1a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000d10:	4a5d      	ldr	r2, [pc, #372]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	2001      	movs	r0, #1
 8000d16:	f007 fa1d 	bl	8008154 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000d1a:	4a5c      	ldr	r2, [pc, #368]	; (8000e8c <hataKoduLcdGoster+0x1a8>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f007 fa18 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d24:	4a5a      	ldr	r2, [pc, #360]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d26:	2107      	movs	r1, #7
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f007 fa13 	bl	8008154 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d2e:	e0a3      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d11d      	bne.n	8000d72 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000d3e:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	2001      	movs	r0, #1
 8000d44:	f007 fa06 	bl	8008154 <lcd_print>
 8000d48:	e008      	b.n	8000d5c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000d52:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	2001      	movs	r0, #1
 8000d58:	f007 f9fc 	bl	8008154 <lcd_print>
		lcd_print(2, 2, "2");
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <hataKoduLcdGoster+0x1b0>)
 8000d5e:	2102      	movs	r1, #2
 8000d60:	2002      	movs	r0, #2
 8000d62:	f007 f9f7 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d68:	2107      	movs	r1, #7
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f007 f9f2 	bl	8008154 <lcd_print>
}
 8000d70:	e082      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d11d      	bne.n	8000db4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d78:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 f9e5 	bl	8008154 <lcd_print>
 8000d8a:	e008      	b.n	8000d9e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d104      	bne.n	8000d9e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f007 f9db 	bl	8008154 <lcd_print>
		lcd_print(2, 3, "3");
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <hataKoduLcdGoster+0x1b4>)
 8000da0:	2103      	movs	r1, #3
 8000da2:	2002      	movs	r0, #2
 8000da4:	f007 f9d6 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "          ");
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000daa:	2107      	movs	r1, #7
 8000dac:	2002      	movs	r0, #2
 8000dae:	f007 f9d1 	bl	8008154 <lcd_print>
}
 8000db2:	e061      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d11d      	bne.n	8000df6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f007 f9c4 	bl	8008154 <lcd_print>
 8000dcc:	e008      	b.n	8000de0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f007 f9ba 	bl	8008154 <lcd_print>
		lcd_print(2, 4, "4");
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <hataKoduLcdGoster+0x1b8>)
 8000de2:	2104      	movs	r1, #4
 8000de4:	2002      	movs	r0, #2
 8000de6:	f007 f9b5 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000dec:	2107      	movs	r1, #7
 8000dee:	2002      	movs	r0, #2
 8000df0:	f007 f9b0 	bl	8008154 <lcd_print>
}
 8000df4:	e040      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d11d      	bne.n	8000e38 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f007 f9a3 	bl	8008154 <lcd_print>
 8000e0e:	e008      	b.n	8000e22 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d104      	bne.n	8000e22 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 f999 	bl	8008154 <lcd_print>
		lcd_print(2, 5, "5");
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <hataKoduLcdGoster+0x1bc>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	2002      	movs	r0, #2
 8000e28:	f007 f994 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e2e:	2107      	movs	r1, #7
 8000e30:	2002      	movs	r0, #2
 8000e32:	f007 f98f 	bl	8008154 <lcd_print>
}
 8000e36:	e01f      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d11c      	bne.n	8000e78 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f007 f982 	bl	8008154 <lcd_print>
 8000e50:	e008      	b.n	8000e64 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d104      	bne.n	8000e64 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f007 f978 	bl	8008154 <lcd_print>
		lcd_print(2, 6, "6");
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <hataKoduLcdGoster+0x1c0>)
 8000e66:	2106      	movs	r1, #6
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 f973 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e70:	2107      	movs	r1, #7
 8000e72:	2002      	movs	r0, #2
 8000e74:	f007 f96e 	bl	8008154 <lcd_print>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000cad 	.word	0x20000cad
 8000e84:	0800d4c0 	.word	0x0800d4c0
 8000e88:	0800d4d0 	.word	0x0800d4d0
 8000e8c:	0800d4e0 	.word	0x0800d4e0
 8000e90:	0800d4e4 	.word	0x0800d4e4
 8000e94:	0800d4f0 	.word	0x0800d4f0
 8000e98:	0800d4f4 	.word	0x0800d4f4
 8000e9c:	0800d4f8 	.word	0x0800d4f8
 8000ea0:	0800d4fc 	.word	0x0800d4fc
 8000ea4:	0800d500 	.word	0x0800d500

08000ea8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e009      	b.n	8000ec8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <eepromDataFillWithEmpty+0x38>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <eepromDataFillWithEmpty+0x3c>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <eepromDataFillWithEmpty+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbf0      	blt.n	8000eb4 <eepromDataFillWithEmpty+0xc>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000070 	.word	0x20000070
 8000ee4:	20000bb8 	.word	0x20000bb8
 8000ee8:	20000098 	.word	0x20000098

08000eec <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <i2cTest+0x154>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <i2cTest+0x154>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f0e:	484c      	ldr	r0, [pc, #304]	; (8001040 <i2cTest+0x154>)
 8000f10:	f008 fdd2 	bl	8009ab8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f14:	23c0      	movs	r3, #192	; 0xc0
 8000f16:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f18:	2311      	movs	r3, #17
 8000f1a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4846      	ldr	r0, [pc, #280]	; (8001044 <i2cTest+0x158>)
 8000f2a:	f008 f9d9 	bl	80092e0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <i2cTest+0x158>)
 8000f34:	f008 fc4b 	bl	80097ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4841      	ldr	r0, [pc, #260]	; (8001044 <i2cTest+0x158>)
 8000f3e:	f008 fc46 	bl	80097ce <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f007 fe5c 	bl	8008c00 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f48:	bf00      	nop
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	483d      	ldr	r0, [pc, #244]	; (8001044 <i2cTest+0x158>)
 8000f4e:	f008 fc27 	bl	80097a0 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d006      	beq.n	8000f66 <i2cTest+0x7a>
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	483a      	ldr	r0, [pc, #232]	; (8001044 <i2cTest+0x158>)
 8000f5c:	f008 fc20 	bl	80097a0 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d1f1      	bne.n	8000f4a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4836      	ldr	r0, [pc, #216]	; (8001044 <i2cTest+0x158>)
 8000f6c:	f008 fc2f 	bl	80097ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f007 fe45 	bl	8008c00 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f76:	bf00      	nop
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <i2cTest+0x158>)
 8000f7c:	f008 fc10 	bl	80097a0 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d0f8      	beq.n	8000f78 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <i2cTest+0x158>)
 8000f8c:	f008 fc1f 	bl	80097ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f007 fe35 	bl	8008c00 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f96:	bf00      	nop
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <i2cTest+0x158>)
 8000f9c:	f008 fc00 	bl	80097a0 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d0f8      	beq.n	8000f98 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <i2cTest+0x158>)
 8000fac:	f008 fc0f 	bl	80097ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f007 fe25 	bl	8008c00 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000fb6:	bf00      	nop
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <i2cTest+0x158>)
 8000fbc:	f008 fbf0 	bl	80097a0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d1f8      	bne.n	8000fb8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <i2cTest+0x158>)
 8000fcc:	f008 fbff 	bl	80097ce <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f007 fe15 	bl	8008c00 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fd6:	bf00      	nop
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	481a      	ldr	r0, [pc, #104]	; (8001044 <i2cTest+0x158>)
 8000fdc:	f008 fbe0 	bl	80097a0 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d1f8      	bne.n	8000fd8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <i2cTest+0x158>)
 8000ffc:	f008 f970 	bl	80092e0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <i2cTest+0x154>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <i2cTest+0x154>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800100e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <i2cTest+0x154>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <i2cTest+0x154>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800101e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <i2cTest+0x154>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <i2cTest+0x154>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <i2cTest+0x154>)
 8001032:	f008 fbfd 	bl	8009830 <HAL_I2C_Init>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20001318 	.word	0x20001318
 8001044:	40010c00 	.word	0x40010c00

08001048 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f007 fdd4 	bl	8008c00 <HAL_Delay>
	lcd_clear();
 8001058:	f007 f8a8 	bl	80081ac <lcd_clear>
	if(type == 1 && page == 0) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d13e      	bne.n	80010e0 <printTemplate+0x98>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d13b      	bne.n	80010e0 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001068:	4a81      	ldr	r2, [pc, #516]	; (8001270 <printTemplate+0x228>)
 800106a:	2101      	movs	r1, #1
 800106c:	2001      	movs	r0, #1
 800106e:	f007 f871 	bl	8008154 <lcd_print>
		lcd_print(2, 3, "0");
 8001072:	4a80      	ldr	r2, [pc, #512]	; (8001274 <printTemplate+0x22c>)
 8001074:	2103      	movs	r1, #3
 8001076:	2002      	movs	r0, #2
 8001078:	f007 f86c 	bl	8008154 <lcd_print>
		lcd_print(2, 4, "1");
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <printTemplate+0x230>)
 800107e:	2104      	movs	r1, #4
 8001080:	2002      	movs	r0, #2
 8001082:	f007 f867 	bl	8008154 <lcd_print>
		lcd_print(2, 5, "2");
 8001086:	4a7d      	ldr	r2, [pc, #500]	; (800127c <printTemplate+0x234>)
 8001088:	2105      	movs	r1, #5
 800108a:	2002      	movs	r0, #2
 800108c:	f007 f862 	bl	8008154 <lcd_print>
		lcd_print(2, 6, "3");
 8001090:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <printTemplate+0x238>)
 8001092:	2106      	movs	r1, #6
 8001094:	2002      	movs	r0, #2
 8001096:	f007 f85d 	bl	8008154 <lcd_print>
		lcd_print(2, 7, "4");
 800109a:	4a7a      	ldr	r2, [pc, #488]	; (8001284 <printTemplate+0x23c>)
 800109c:	2107      	movs	r1, #7
 800109e:	2002      	movs	r0, #2
 80010a0:	f007 f858 	bl	8008154 <lcd_print>
		lcd_print(2, 10, "5");
 80010a4:	4a78      	ldr	r2, [pc, #480]	; (8001288 <printTemplate+0x240>)
 80010a6:	210a      	movs	r1, #10
 80010a8:	2002      	movs	r0, #2
 80010aa:	f007 f853 	bl	8008154 <lcd_print>
		lcd_print(2, 11, "6");
 80010ae:	4a77      	ldr	r2, [pc, #476]	; (800128c <printTemplate+0x244>)
 80010b0:	210b      	movs	r1, #11
 80010b2:	2002      	movs	r0, #2
 80010b4:	f007 f84e 	bl	8008154 <lcd_print>
		lcd_print(2, 12, "7");
 80010b8:	4a75      	ldr	r2, [pc, #468]	; (8001290 <printTemplate+0x248>)
 80010ba:	210c      	movs	r1, #12
 80010bc:	2002      	movs	r0, #2
 80010be:	f007 f849 	bl	8008154 <lcd_print>
		lcd_print(2, 13, "8");
 80010c2:	4a74      	ldr	r2, [pc, #464]	; (8001294 <printTemplate+0x24c>)
 80010c4:	210d      	movs	r1, #13
 80010c6:	2002      	movs	r0, #2
 80010c8:	f007 f844 	bl	8008154 <lcd_print>
		lcd_print(2, 14, "9");
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <printTemplate+0x250>)
 80010ce:	210e      	movs	r1, #14
 80010d0:	2002      	movs	r0, #2
 80010d2:	f007 f83f 	bl	8008154 <lcd_print>
		lcd_gotoxy(2, 3);
 80010d6:	2103      	movs	r1, #3
 80010d8:	2002      	movs	r0, #2
 80010da:	f007 f81c 	bl	8008116 <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80010de:	e0c2      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d15e      	bne.n	80011a4 <printTemplate+0x15c>
		if(page == 1) {
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10f      	bne.n	800110c <printTemplate+0xc4>
			lcd_clear();
 80010ec:	f007 f85e 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f007 fd85 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <printTemplate+0x254>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2001      	movs	r0, #1
 80010fc:	f007 f82a 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <printTemplate+0x258>)
 8001102:	2101      	movs	r1, #1
 8001104:	2002      	movs	r0, #2
 8001106:	f007 f825 	bl	8008154 <lcd_print>
}
 800110a:	e0ac      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10f      	bne.n	8001132 <printTemplate+0xea>
			lcd_clear();
 8001112:	f007 f84b 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f007 fd72 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800111c:	4a5f      	ldr	r2, [pc, #380]	; (800129c <printTemplate+0x254>)
 800111e:	2101      	movs	r1, #1
 8001120:	2001      	movs	r0, #1
 8001122:	f007 f817 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <printTemplate+0x25c>)
 8001128:	2101      	movs	r1, #1
 800112a:	2002      	movs	r0, #2
 800112c:	f007 f812 	bl	8008154 <lcd_print>
}
 8001130:	e099      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d10f      	bne.n	8001158 <printTemplate+0x110>
			lcd_clear();
 8001138:	f007 f838 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f007 fd5f 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <printTemplate+0x254>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f007 f804 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800114c:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <printTemplate+0x260>)
 800114e:	2101      	movs	r1, #1
 8001150:	2002      	movs	r0, #2
 8001152:	f006 ffff 	bl	8008154 <lcd_print>
}
 8001156:	e086      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d10f      	bne.n	800117e <printTemplate+0x136>
			lcd_clear();
 800115e:	f007 f825 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f007 fd4c 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <printTemplate+0x254>)
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f006 fff1 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <printTemplate+0x264>)
 8001174:	2101      	movs	r1, #1
 8001176:	2002      	movs	r0, #2
 8001178:	f006 ffec 	bl	8008154 <lcd_print>
}
 800117c:	e073      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d170      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001184:	f007 f812 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f007 fd39 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <printTemplate+0x254>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f006 ffde 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001198:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <printTemplate+0x268>)
 800119a:	2101      	movs	r1, #1
 800119c:	2002      	movs	r0, #2
 800119e:	f006 ffd9 	bl	8008154 <lcd_print>
}
 80011a2:	e060      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 3) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d15d      	bne.n	8001266 <printTemplate+0x21e>
		if(page == 1) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10f      	bne.n	80011d0 <printTemplate+0x188>
			lcd_clear();
 80011b0:	f006 fffc 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f007 fd23 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011ba:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <printTemplate+0x26c>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2001      	movs	r0, #1
 80011c0:	f006 ffc8 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <printTemplate+0x258>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2002      	movs	r0, #2
 80011ca:	f006 ffc3 	bl	8008154 <lcd_print>
}
 80011ce:	e04a      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d10f      	bne.n	80011f6 <printTemplate+0x1ae>
			lcd_clear();
 80011d6:	f006 ffe9 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 80011da:	2064      	movs	r0, #100	; 0x64
 80011dc:	f007 fd10 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011e0:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <printTemplate+0x26c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	2001      	movs	r0, #1
 80011e6:	f006 ffb5 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011ea:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <printTemplate+0x25c>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	2002      	movs	r0, #2
 80011f0:	f006 ffb0 	bl	8008154 <lcd_print>
}
 80011f4:	e037      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d10f      	bne.n	800121c <printTemplate+0x1d4>
			lcd_clear();
 80011fc:	f006 ffd6 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	f007 fcfd 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001206:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <printTemplate+0x26c>)
 8001208:	2101      	movs	r1, #1
 800120a:	2001      	movs	r0, #1
 800120c:	f006 ffa2 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001210:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <printTemplate+0x260>)
 8001212:	2101      	movs	r1, #1
 8001214:	2002      	movs	r0, #2
 8001216:	f006 ff9d 	bl	8008154 <lcd_print>
}
 800121a:	e024      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d10f      	bne.n	8001242 <printTemplate+0x1fa>
			lcd_clear();
 8001222:	f006 ffc3 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f007 fcea 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <printTemplate+0x26c>)
 800122e:	2101      	movs	r1, #1
 8001230:	2001      	movs	r0, #1
 8001232:	f006 ff8f 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <printTemplate+0x264>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f006 ff8a 	bl	8008154 <lcd_print>
}
 8001240:	e011      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d10e      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001248:	f006 ffb0 	bl	80081ac <lcd_clear>
			HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f007 fcd7 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <printTemplate+0x26c>)
 8001254:	2101      	movs	r1, #1
 8001256:	2001      	movs	r0, #1
 8001258:	f006 ff7c 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <printTemplate+0x268>)
 800125e:	2101      	movs	r1, #1
 8001260:	2002      	movs	r0, #2
 8001262:	f006 ff77 	bl	8008154 <lcd_print>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800d504 	.word	0x0800d504
 8001274:	0800d50c 	.word	0x0800d50c
 8001278:	0800d510 	.word	0x0800d510
 800127c:	0800d514 	.word	0x0800d514
 8001280:	0800d518 	.word	0x0800d518
 8001284:	0800d51c 	.word	0x0800d51c
 8001288:	0800d520 	.word	0x0800d520
 800128c:	0800d524 	.word	0x0800d524
 8001290:	0800d528 	.word	0x0800d528
 8001294:	0800d52c 	.word	0x0800d52c
 8001298:	0800d530 	.word	0x0800d530
 800129c:	0800d534 	.word	0x0800d534
 80012a0:	0800d53c 	.word	0x0800d53c
 80012a4:	0800d550 	.word	0x0800d550
 80012a8:	0800d564 	.word	0x0800d564
 80012ac:	0800d578 	.word	0x0800d578
 80012b0:	0800d58c 	.word	0x0800d58c
 80012b4:	0800d5a0 	.word	0x0800d5a0

080012b8 <checkSlideVal>:

int checkSlideVal(int state) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d111      	bne.n	80012ea <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012c6:	2101      	movs	r1, #1
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <checkSlideVal+0x60>)
 80012ca:	f008 fa69 	bl	80097a0 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <checkSlideVal+0x20>
			return 34;
 80012d4:	2322      	movs	r3, #34	; 0x22
 80012d6:	e01b      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012d8:	2108      	movs	r1, #8
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <checkSlideVal+0x64>)
 80012dc:	f008 fa60 	bl	80097a0 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <checkSlideVal+0x56>
			return 32;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e012      	b.n	8001310 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012ea:	2101      	movs	r1, #1
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <checkSlideVal+0x60>)
 80012ee:	f008 fa57 	bl	80097a0 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <checkSlideVal+0x44>
			return 35;
 80012f8:	2323      	movs	r3, #35	; 0x23
 80012fa:	e009      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012fc:	2108      	movs	r1, #8
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <checkSlideVal+0x64>)
 8001300:	f008 fa4e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <checkSlideVal+0x56>
			return 33;
 800130a:	2321      	movs	r3, #33	; 0x21
 800130c:	e000      	b.n	8001310 <checkSlideVal+0x58>
		}
	}
	return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010800 	.word	0x40010800
 800131c:	40011000 	.word	0x40011000

08001320 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7fe ff78 	bl	8000224 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800133c:	e08a      	b.n	8001454 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff ffba 	bl	80012b8 <checkSlideVal>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd07      	ble.n	800135a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff ffb4 	bl	80012b8 <checkSlideVal>
 8001350:	4603      	mov	r3, r0
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <slideText+0x148>)
 8001356:	701a      	strb	r2, [r3, #0]
			break;
 8001358:	e081      	b.n	800145e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	e075      	b.n	800144c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff ffa9 	bl	80012b8 <checkSlideVal>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd09      	ble.n	8001380 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff ffa3 	bl	80012b8 <checkSlideVal>
 8001372:	4603      	mov	r3, r0
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <slideText+0x148>)
 8001378:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800137e:	e069      	b.n	8001454 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	4413      	add	r3, r2
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e029      	b.n	80013de <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800138a:	6838      	ldr	r0, [r7, #0]
 800138c:	f7ff ff94 	bl	80012b8 <checkSlideVal>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd0b      	ble.n	80013ae <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f7ff ff8e 	bl	80012b8 <checkSlideVal>
 800139c:	4603      	mov	r3, r0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <slideText+0x148>)
 80013a2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013ac:	e01d      	b.n	80013ea <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f006 fed6 	bl	800817e <lcd_print_char>
				HAL_Delay(30);
 80013d2:	201e      	movs	r0, #30
 80013d4:	f007 fc14 	bl	8008c00 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3301      	adds	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	7dfa      	ldrb	r2, [r7, #23]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbcf      	blt.n	800138a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	e023      	b.n	800143a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff ff60 	bl	80012b8 <checkSlideVal>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd0b      	ble.n	8001416 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f7ff ff5a 	bl	80012b8 <checkSlideVal>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <slideText+0x148>)
 800140a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001414:	e017      	b.n	8001446 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	db0a      	blt.n	8001434 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	2220      	movs	r2, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f006 fea8 	bl	800817e <lcd_print_char>
			    	 HAL_Delay(30);
 800142e:	201e      	movs	r0, #30
 8001430:	f007 fbe6 	bl	8008c00 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3b01      	subs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	429a      	cmp	r2, r3
 8001444:	dad5      	bge.n	80013f2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3301      	adds	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	db85      	blt.n	8001360 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b01      	cmp	r3, #1
 8001458:	f43f af71 	beq.w	800133e <slideText+0x1e>
			     }
			}
		}
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000c8c 	.word	0x20000c8c

0800146c <printCredentials>:

void printCredentials(int type) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d119      	bne.n	80014ae <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <printCredentials+0xf0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <printCredentials+0xf4>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f006 fe64 	bl	8008154 <lcd_print>
 800148c:	e004      	b.n	8001498 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <printCredentials+0xf8>)
 8001490:	2101      	movs	r1, #1
 8001492:	2001      	movs	r0, #1
 8001494:	f006 fe5e 	bl	8008154 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001498:	4a33      	ldr	r2, [pc, #204]	; (8001568 <printCredentials+0xfc>)
 800149a:	2101      	movs	r1, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f006 fe59 	bl	8008154 <lcd_print>
		lcd_print(2, 13, "    ");
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <printCredentials+0x100>)
 80014a4:	210d      	movs	r1, #13
 80014a6:	2002      	movs	r0, #2
 80014a8:	f006 fe54 	bl	8008154 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80014ac:	e051      	b.n	8001552 <printCredentials+0xe6>
	} else if(type == 2) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d127      	bne.n	8001504 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <printCredentials+0x104>)
 80014b6:	f7fe feb5 	bl	8000224 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <printCredentials+0x108>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f006 fe46 	bl	8008154 <lcd_print>
		if(ssidLength == 16) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d105      	bne.n	80014da <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 80014ce:	4a28      	ldr	r2, [pc, #160]	; (8001570 <printCredentials+0x104>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f006 fe3e 	bl	8008154 <lcd_print>
}
 80014d8:	e03b      	b.n	8001552 <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	dc0a      	bgt.n	80014f6 <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <printCredentials+0x10c>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f006 fe35 	bl	8008154 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <printCredentials+0x104>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f006 fe30 	bl	8008154 <lcd_print>
}
 80014f4:	e02d      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 80014f6:	2300      	movs	r3, #0
 80014f8:	2202      	movs	r2, #2
 80014fa:	2101      	movs	r1, #1
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <printCredentials+0x104>)
 80014fe:	f7ff ff0f 	bl	8001320 <slideText>
}
 8001502:	e026      	b.n	8001552 <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <printCredentials+0x110>)
 8001506:	f7fe fe8d 	bl	8000224 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <printCredentials+0x114>)
 8001510:	2101      	movs	r1, #1
 8001512:	2001      	movs	r0, #1
 8001514:	f006 fe1e 	bl	8008154 <lcd_print>
		if(passLength == 16) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d105      	bne.n	800152a <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <printCredentials+0x110>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f006 fe16 	bl	8008154 <lcd_print>
}
 8001528:	e013      	b.n	8001552 <printCredentials+0xe6>
		} else if(passLength < 16) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	dc0a      	bgt.n	8001546 <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <printCredentials+0x10c>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 fe0d 	bl	8008154 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <printCredentials+0x110>)
 800153c:	2101      	movs	r1, #1
 800153e:	2002      	movs	r0, #2
 8001540:	f006 fe08 	bl	8008154 <lcd_print>
}
 8001544:	e005      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 8001546:	2301      	movs	r3, #1
 8001548:	2202      	movs	r2, #2
 800154a:	2101      	movs	r1, #1
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <printCredentials+0x110>)
 800154e:	f7ff fee7 	bl	8001320 <slideText>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000cad 	.word	0x20000cad
 8001560:	0800d5a8 	.word	0x0800d5a8
 8001564:	0800d5bc 	.word	0x0800d5bc
 8001568:	20000c30 	.word	0x20000c30
 800156c:	0800d5d0 	.word	0x0800d5d0
 8001570:	20000c3c 	.word	0x20000c3c
 8001574:	0800d5d8 	.word	0x0800d5d8
 8001578:	0800d5ec 	.word	0x0800d5ec
 800157c:	20000c50 	.word	0x20000c50
 8001580:	0800d600 	.word	0x0800d600

08001584 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001596:	4904      	ldr	r1, [pc, #16]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_SystemReset+0x28>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
}
 80015a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <__NVIC_SystemReset+0x20>
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0004 	.word	0x05fa0004

080015b0 <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015b6:	2101      	movs	r1, #1
 80015b8:	4890      	ldr	r0, [pc, #576]	; (80017fc <menu+0x24c>)
 80015ba:	f008 f8f1 	bl	80097a0 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 808e 	bne.w	80016e2 <menu+0x132>
 80015c6:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <menu+0x250>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8086 	beq.w	80016e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <menu+0x254>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <menu+0x254>)
 80015e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <menu+0x254>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b24      	cmp	r3, #36	; 0x24
 80015e8:	d102      	bne.n	80015f0 <menu+0x40>
			menuSayac = 1;
 80015ea:	4b86      	ldr	r3, [pc, #536]	; (8001804 <menu+0x254>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <menu+0x254>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d106      	bne.n	8001606 <menu+0x56>
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <menu+0x258>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <menu+0x56>
			menuSayac = 21;
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <menu+0x254>)
 8001602:	2215      	movs	r2, #21
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <menu+0x254>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d106      	bne.n	800161c <menu+0x6c>
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <menu+0x25c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <menu+0x6c>
			menuSayac = 16;
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <menu+0x254>)
 8001618:	2210      	movs	r2, #16
 800161a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <menu+0x254>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b0d      	cmp	r3, #13
 8001622:	d106      	bne.n	8001632 <menu+0x82>
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <menu+0x25c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <menu+0x82>
			menuSayac = 16;
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <menu+0x254>)
 800162e:	2210      	movs	r2, #16
 8001630:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001632:	4b74      	ldr	r3, [pc, #464]	; (8001804 <menu+0x254>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d106      	bne.n	8001648 <menu+0x98>
 800163a:	4b74      	ldr	r3, [pc, #464]	; (800180c <menu+0x25c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d102      	bne.n	8001648 <menu+0x98>
			menuSayac = 13;
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <menu+0x254>)
 8001644:	220d      	movs	r2, #13
 8001646:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <menu+0x254>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b0a      	cmp	r3, #10
 800164e:	d10a      	bne.n	8001666 <menu+0xb6>
 8001650:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <menu+0x260>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <menu+0xb0>
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <menu+0x260>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d102      	bne.n	8001666 <menu+0xb6>
			menuSayac = 11;
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <menu+0x254>)
 8001662:	220b      	movs	r2, #11
 8001664:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <menu+0x254>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10e      	bne.n	800168c <menu+0xdc>
 800166e:	4b69      	ldr	r3, [pc, #420]	; (8001814 <menu+0x264>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d003      	beq.n	800167e <menu+0xce>
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <menu+0x264>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d106      	bne.n	800168c <menu+0xdc>
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <menu+0x25c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <menu+0xdc>
			menuSayac = 16;
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <menu+0x254>)
 8001688:	2210      	movs	r2, #16
 800168a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <menu+0x254>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d10e      	bne.n	80016b2 <menu+0x102>
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <menu+0x264>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <menu+0xf4>
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <menu+0x264>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <menu+0x102>
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <menu+0x25c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d102      	bne.n	80016b2 <menu+0x102>
			menuSayac = 13;
 80016ac:	4b55      	ldr	r3, [pc, #340]	; (8001804 <menu+0x254>)
 80016ae:	220d      	movs	r2, #13
 80016b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016b2:	4b54      	ldr	r3, [pc, #336]	; (8001804 <menu+0x254>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d106      	bne.n	80016c8 <menu+0x118>
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <menu+0x268>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <menu+0x118>
			menuSayac = 16;
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <menu+0x254>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <menu+0x254>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d106      	bne.n	80016de <menu+0x12e>
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <menu+0x258>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <menu+0x12e>
			menuSayac = 26;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <menu+0x254>)
 80016da:	221a      	movs	r2, #26
 80016dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016de:	f002 fc6b 	bl	8003fb8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e2:	2108      	movs	r1, #8
 80016e4:	484d      	ldr	r0, [pc, #308]	; (800181c <menu+0x26c>)
 80016e6:	f008 f85b 	bl	80097a0 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d175      	bne.n	80017dc <menu+0x22c>
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <menu+0x250>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06e      	beq.n	80017dc <menu+0x22c>
		if (menuSayac <= 1) {
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <menu+0x254>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d802      	bhi.n	800170c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <menu+0x254>)
 8001708:	2224      	movs	r2, #36	; 0x24
 800170a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800170c:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <menu+0x254>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <menu+0x254>)
 8001716:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <menu+0x254>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b14      	cmp	r3, #20
 800171e:	d106      	bne.n	800172e <menu+0x17e>
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <menu+0x258>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <menu+0x17e>
			menuSayac = 17;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <menu+0x254>)
 800172a:	2211      	movs	r2, #17
 800172c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <menu+0x254>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	d106      	bne.n	8001744 <menu+0x194>
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <menu+0x25c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <menu+0x194>
			menuSayac = 7;
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <menu+0x254>)
 8001740:	2207      	movs	r2, #7
 8001742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <menu+0x254>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d106      	bne.n	800175a <menu+0x1aa>
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <menu+0x25c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <menu+0x1aa>
			menuSayac = 12;
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <menu+0x254>)
 8001756:	220c      	movs	r2, #12
 8001758:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <menu+0x254>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d106      	bne.n	8001770 <menu+0x1c0>
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <menu+0x25c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d102      	bne.n	8001770 <menu+0x1c0>
			menuSayac = 8;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <menu+0x254>)
 800176c:	2208      	movs	r2, #8
 800176e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <menu+0x254>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d10a      	bne.n	800178e <menu+0x1de>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <menu+0x260>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <menu+0x1d8>
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <menu+0x260>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <menu+0x1de>
			menuSayac = 9;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <menu+0x254>)
 800178a:	2209      	movs	r2, #9
 800178c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <menu+0x254>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d10a      	bne.n	80017ac <menu+0x1fc>
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <menu+0x264>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <menu+0x1f6>
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <menu+0x264>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <menu+0x1fc>
			menuSayac = 11;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <menu+0x254>)
 80017a8:	220b      	movs	r2, #11
 80017aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <menu+0x254>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d106      	bne.n	80017c2 <menu+0x212>
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <menu+0x268>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <menu+0x212>
			menuSayac = 14;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <menu+0x254>)
 80017be:	220e      	movs	r2, #14
 80017c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <menu+0x254>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b19      	cmp	r3, #25
 80017c8:	d106      	bne.n	80017d8 <menu+0x228>
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <menu+0x258>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <menu+0x228>
			menuSayac = 23;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <menu+0x254>)
 80017d4:	2217      	movs	r2, #23
 80017d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017d8:	f002 fbee 	bl	8003fb8 <bekle>
	}

	if (menuSayac == 0) {
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <menu+0x254>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <menu+0x278>
		} else if(dilSecim  ==  1) {
			lcd_print(1, 1, "ENTERED THE MENU");
			lcd_print(2, 1, "    SETTINGS    ");
		}*/

		lcd_print(1, 1, menuyeGirildiText);
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <menu+0x270>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2001      	movs	r0, #1
 80017ea:	f006 fcb3 	bl	8008154 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <menu+0x274>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	2002      	movs	r0, #2
 80017f4:	f006 fcae 	bl	8008154 <lcd_print>
 80017f8:	e016      	b.n	8001828 <menu+0x278>
 80017fa:	bf00      	nop
 80017fc:	40010800 	.word	0x40010800
 8001800:	20000cbb 	.word	0x20000cbb
 8001804:	20000c8c 	.word	0x20000c8c
 8001808:	20000c9b 	.word	0x20000c9b
 800180c:	20000c94 	.word	0x20000c94
 8001810:	20000c95 	.word	0x20000c95
 8001814:	20000c96 	.word	0x20000c96
 8001818:	20000c97 	.word	0x20000c97
 800181c:	40011000 	.word	0x40011000
 8001820:	20000dec 	.word	0x20000dec
 8001824:	20000dfc 	.word	0x20000dfc
	}

	if (menuSayac == 1) {
 8001828:	4bb0      	ldr	r3, [pc, #704]	; (8001aec <menu+0x53c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 81ef 	bne.w	8001c10 <menu+0x660>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "HATA KAYIT LiST.");
		} else {
			lcd_print(1, 1, "ERROR SAVE LiST.");
		}*/
		lcd_print(1, 1, hataKayitListText);
 8001832:	4aaf      	ldr	r2, [pc, #700]	; (8001af0 <menu+0x540>)
 8001834:	2101      	movs	r1, #1
 8001836:	2001      	movs	r0, #1
 8001838:	f006 fc8c 	bl	8008154 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800183c:	4bad      	ldr	r3, [pc, #692]	; (8001af4 <menu+0x544>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d115      	bne.n	8001870 <menu+0x2c0>
				lcd_print(2, 1, "1.Hata Kodu: ");

			} else {
				lcd_print(2, 1, "1.Error Code:");
			}*/
			lcd_print(2, 1, birHataKoduText);
 8001844:	4aac      	ldr	r2, [pc, #688]	; (8001af8 <menu+0x548>)
 8001846:	2101      	movs	r1, #1
 8001848:	2002      	movs	r0, #2
 800184a:	f006 fc83 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "   ");
 800184e:	4aab      	ldr	r2, [pc, #684]	; (8001afc <menu+0x54c>)
 8001850:	210f      	movs	r1, #15
 8001852:	2002      	movs	r0, #2
 8001854:	f006 fc7e 	bl	8008154 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001858:	4ba9      	ldr	r3, [pc, #676]	; (8001b00 <menu+0x550>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	220a      	movs	r2, #10
 800185e:	49a9      	ldr	r1, [pc, #676]	; (8001b04 <menu+0x554>)
 8001860:	4618      	mov	r0, r3
 8001862:	f00b f825 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 8001866:	4aa7      	ldr	r2, [pc, #668]	; (8001b04 <menu+0x554>)
 8001868:	210e      	movs	r1, #14
 800186a:	2002      	movs	r0, #2
 800186c:	f006 fc72 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001870:	4ba0      	ldr	r3, [pc, #640]	; (8001af4 <menu+0x544>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d115      	bne.n	80018a4 <menu+0x2f4>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "2.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "2.Error Code:");
			}*/
			lcd_print(2, 1, ikiHataKoduText);
 8001878:	4aa3      	ldr	r2, [pc, #652]	; (8001b08 <menu+0x558>)
 800187a:	2101      	movs	r1, #1
 800187c:	2002      	movs	r0, #2
 800187e:	f006 fc69 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 8001882:	4aa2      	ldr	r2, [pc, #648]	; (8001b0c <menu+0x55c>)
 8001884:	210f      	movs	r1, #15
 8001886:	2002      	movs	r0, #2
 8001888:	f006 fc64 	bl	8008154 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800188c:	4ba0      	ldr	r3, [pc, #640]	; (8001b10 <menu+0x560>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	220a      	movs	r2, #10
 8001892:	499c      	ldr	r1, [pc, #624]	; (8001b04 <menu+0x554>)
 8001894:	4618      	mov	r0, r3
 8001896:	f00b f80b 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 800189a:	4a9a      	ldr	r2, [pc, #616]	; (8001b04 <menu+0x554>)
 800189c:	210e      	movs	r1, #14
 800189e:	2002      	movs	r0, #2
 80018a0:	f006 fc58 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80018a4:	4b93      	ldr	r3, [pc, #588]	; (8001af4 <menu+0x544>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d115      	bne.n	80018d8 <menu+0x328>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "3.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "3.Error Code:");
			}*/
			lcd_print(2, 1, ucHataKoduText);
 80018ac:	4a99      	ldr	r2, [pc, #612]	; (8001b14 <menu+0x564>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	2002      	movs	r0, #2
 80018b2:	f006 fc4f 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 80018b6:	4a95      	ldr	r2, [pc, #596]	; (8001b0c <menu+0x55c>)
 80018b8:	210f      	movs	r1, #15
 80018ba:	2002      	movs	r0, #2
 80018bc:	f006 fc4a 	bl	8008154 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80018c0:	4b95      	ldr	r3, [pc, #596]	; (8001b18 <menu+0x568>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	220a      	movs	r2, #10
 80018c6:	498f      	ldr	r1, [pc, #572]	; (8001b04 <menu+0x554>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00a fff1 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 80018ce:	4a8d      	ldr	r2, [pc, #564]	; (8001b04 <menu+0x554>)
 80018d0:	210e      	movs	r1, #14
 80018d2:	2002      	movs	r0, #2
 80018d4:	f006 fc3e 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80018d8:	4b86      	ldr	r3, [pc, #536]	; (8001af4 <menu+0x544>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d115      	bne.n	800190c <menu+0x35c>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "4.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "4.Error Code:");
			}*/
			lcd_print(2, 1, dortHataKoduText);
 80018e0:	4a8e      	ldr	r2, [pc, #568]	; (8001b1c <menu+0x56c>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	2002      	movs	r0, #2
 80018e6:	f006 fc35 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 80018ea:	4a88      	ldr	r2, [pc, #544]	; (8001b0c <menu+0x55c>)
 80018ec:	210f      	movs	r1, #15
 80018ee:	2002      	movs	r0, #2
 80018f0:	f006 fc30 	bl	8008154 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018f4:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <menu+0x570>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	220a      	movs	r2, #10
 80018fa:	4982      	ldr	r1, [pc, #520]	; (8001b04 <menu+0x554>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00a ffd7 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 8001902:	4a80      	ldr	r2, [pc, #512]	; (8001b04 <menu+0x554>)
 8001904:	210e      	movs	r1, #14
 8001906:	2002      	movs	r0, #2
 8001908:	f006 fc24 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800190c:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <menu+0x544>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d115      	bne.n	8001940 <menu+0x390>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "5.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "5.Error Code:");
			}*/
			lcd_print(2, 1, besHataKoduText);
 8001914:	4a83      	ldr	r2, [pc, #524]	; (8001b24 <menu+0x574>)
 8001916:	2101      	movs	r1, #1
 8001918:	2002      	movs	r0, #2
 800191a:	f006 fc1b 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 800191e:	4a7b      	ldr	r2, [pc, #492]	; (8001b0c <menu+0x55c>)
 8001920:	210f      	movs	r1, #15
 8001922:	2002      	movs	r0, #2
 8001924:	f006 fc16 	bl	8008154 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <menu+0x578>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	220a      	movs	r2, #10
 800192e:	4975      	ldr	r1, [pc, #468]	; (8001b04 <menu+0x554>)
 8001930:	4618      	mov	r0, r3
 8001932:	f00a ffbd 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 8001936:	4a73      	ldr	r2, [pc, #460]	; (8001b04 <menu+0x554>)
 8001938:	210e      	movs	r1, #14
 800193a:	2002      	movs	r0, #2
 800193c:	f006 fc0a 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001940:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <menu+0x544>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d115      	bne.n	8001974 <menu+0x3c4>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "6.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "6.Error Code:");
			}*/
			lcd_print(2, 1, altiHataKoduText);
 8001948:	4a78      	ldr	r2, [pc, #480]	; (8001b2c <menu+0x57c>)
 800194a:	2101      	movs	r1, #1
 800194c:	2002      	movs	r0, #2
 800194e:	f006 fc01 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 8001952:	4a6e      	ldr	r2, [pc, #440]	; (8001b0c <menu+0x55c>)
 8001954:	210f      	movs	r1, #15
 8001956:	2002      	movs	r0, #2
 8001958:	f006 fbfc 	bl	8008154 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800195c:	4b74      	ldr	r3, [pc, #464]	; (8001b30 <menu+0x580>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	220a      	movs	r2, #10
 8001962:	4968      	ldr	r1, [pc, #416]	; (8001b04 <menu+0x554>)
 8001964:	4618      	mov	r0, r3
 8001966:	f00a ffa3 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 800196a:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <menu+0x554>)
 800196c:	210e      	movs	r1, #14
 800196e:	2002      	movs	r0, #2
 8001970:	f006 fbf0 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <menu+0x544>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b06      	cmp	r3, #6
 800197a:	d115      	bne.n	80019a8 <menu+0x3f8>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "7.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "7.Error Code:");
			}*/
			lcd_print(2, 1, yediHataKoduText);
 800197c:	4a6d      	ldr	r2, [pc, #436]	; (8001b34 <menu+0x584>)
 800197e:	2101      	movs	r1, #1
 8001980:	2002      	movs	r0, #2
 8001982:	f006 fbe7 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 8001986:	4a61      	ldr	r2, [pc, #388]	; (8001b0c <menu+0x55c>)
 8001988:	210f      	movs	r1, #15
 800198a:	2002      	movs	r0, #2
 800198c:	f006 fbe2 	bl	8008154 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001990:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <menu+0x588>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	220a      	movs	r2, #10
 8001996:	495b      	ldr	r1, [pc, #364]	; (8001b04 <menu+0x554>)
 8001998:	4618      	mov	r0, r3
 800199a:	f00a ff89 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 800199e:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <menu+0x554>)
 80019a0:	210e      	movs	r1, #14
 80019a2:	2002      	movs	r0, #2
 80019a4:	f006 fbd6 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <menu+0x544>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d115      	bne.n	80019dc <menu+0x42c>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "8.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "8.Error Code:");
			}*/
			lcd_print(2, 1, sekizHataKoduText);
 80019b0:	4a62      	ldr	r2, [pc, #392]	; (8001b3c <menu+0x58c>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	2002      	movs	r0, #2
 80019b6:	f006 fbcd 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 80019ba:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <menu+0x55c>)
 80019bc:	210f      	movs	r1, #15
 80019be:	2002      	movs	r0, #2
 80019c0:	f006 fbc8 	bl	8008154 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019c4:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <menu+0x590>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	220a      	movs	r2, #10
 80019ca:	494e      	ldr	r1, [pc, #312]	; (8001b04 <menu+0x554>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00a ff6f 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 80019d2:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <menu+0x554>)
 80019d4:	210e      	movs	r1, #14
 80019d6:	2002      	movs	r0, #2
 80019d8:	f006 fbbc 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <menu+0x544>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d115      	bne.n	8001a10 <menu+0x460>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "9.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "9.Error Code:");
			}*/
			lcd_print(2, 1, dokuzHataKoduText);
 80019e4:	4a57      	ldr	r2, [pc, #348]	; (8001b44 <menu+0x594>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	2002      	movs	r0, #2
 80019ea:	f006 fbb3 	bl	8008154 <lcd_print>
			lcd_print(2, 15, "  ");
 80019ee:	4a47      	ldr	r2, [pc, #284]	; (8001b0c <menu+0x55c>)
 80019f0:	210f      	movs	r1, #15
 80019f2:	2002      	movs	r0, #2
 80019f4:	f006 fbae 	bl	8008154 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <menu+0x598>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	220a      	movs	r2, #10
 80019fe:	4941      	ldr	r1, [pc, #260]	; (8001b04 <menu+0x554>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00a ff55 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 8001a06:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <menu+0x554>)
 8001a08:	210e      	movs	r1, #14
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f006 fba2 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <menu+0x544>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	d115      	bne.n	8001a44 <menu+0x494>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "10.Hata Kodu: ");
			} else {
				lcd_print(2, 1, "10.Error Code:");
			}*/
			lcd_print(2, 1, onHataKoduText);
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <menu+0x59c>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f006 fb99 	bl	8008154 <lcd_print>
			lcd_print(2, 16, " ");
 8001a22:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <menu+0x5a0>)
 8001a24:	2110      	movs	r1, #16
 8001a26:	2002      	movs	r0, #2
 8001a28:	f006 fb94 	bl	8008154 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a2c:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <menu+0x5a4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	220a      	movs	r2, #10
 8001a32:	4934      	ldr	r1, [pc, #208]	; (8001b04 <menu+0x554>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a ff3b 	bl	800c8b0 <itoa>
			lcd_print(2, 15, snum);
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <menu+0x554>)
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f006 fb88 	bl	8008154 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <menu+0x544>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d104      	bne.n	8001a56 <menu+0x4a6>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Silmek icin ent.");
			} else {
				lcd_print(2, 1, "Del. press enter");
			}*/
			lcd_print(2, 1, silmekIcinText);
 8001a4c:	4a42      	ldr	r2, [pc, #264]	; (8001b58 <menu+0x5a8>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	2002      	movs	r0, #2
 8001a52:	f006 fb7f 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a56:	2102      	movs	r1, #2
 8001a58:	4840      	ldr	r0, [pc, #256]	; (8001b5c <menu+0x5ac>)
 8001a5a:	f007 fea1 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d119      	bne.n	8001a98 <menu+0x4e8>
 8001a64:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <menu+0x5b0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <menu+0x4e8>
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <menu+0x5b4>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10e      	bne.n	8001a98 <menu+0x4e8>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <menu+0x544>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <menu+0x544>)
 8001a84:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <menu+0x544>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d902      	bls.n	8001a94 <menu+0x4e4>
				hataGostermeSirasi = 0;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <menu+0x544>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a94:	f002 fa90 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4830      	ldr	r0, [pc, #192]	; (8001b5c <menu+0x5ac>)
 8001a9c:	f007 fe80 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d119      	bne.n	8001ada <menu+0x52a>
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <menu+0x5b0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d012      	beq.n	8001ada <menu+0x52a>
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <menu+0x5b4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10e      	bne.n	8001ada <menu+0x52a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <menu+0x544>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <menu+0x544>)
 8001ac6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <menu+0x544>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b0b      	cmp	r3, #11
 8001ace:	d902      	bls.n	8001ad6 <menu+0x526>
	    		hataGostermeSirasi = 10;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <menu+0x544>)
 8001ad2:	220a      	movs	r2, #10
 8001ad4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ad6:	f002 fa6f 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001ada:	2108      	movs	r1, #8
 8001adc:	481f      	ldr	r0, [pc, #124]	; (8001b5c <menu+0x5ac>)
 8001ade:	f007 fe5f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	f040 8093 	bne.w	8001c10 <menu+0x660>
 8001aea:	e03d      	b.n	8001b68 <menu+0x5b8>
 8001aec:	20000c8c 	.word	0x20000c8c
 8001af0:	20000e0c 	.word	0x20000e0c
 8001af4:	20000c8e 	.word	0x20000c8e
 8001af8:	20000e1c 	.word	0x20000e1c
 8001afc:	0800d614 	.word	0x0800d614
 8001b00:	20000cae 	.word	0x20000cae
 8001b04:	20000c28 	.word	0x20000c28
 8001b08:	20000e2c 	.word	0x20000e2c
 8001b0c:	0800d618 	.word	0x0800d618
 8001b10:	20000caf 	.word	0x20000caf
 8001b14:	20000e3c 	.word	0x20000e3c
 8001b18:	20000cb0 	.word	0x20000cb0
 8001b1c:	20000e4c 	.word	0x20000e4c
 8001b20:	20000cb1 	.word	0x20000cb1
 8001b24:	20000e5c 	.word	0x20000e5c
 8001b28:	20000cb2 	.word	0x20000cb2
 8001b2c:	20000e6c 	.word	0x20000e6c
 8001b30:	20000cb3 	.word	0x20000cb3
 8001b34:	20000e7c 	.word	0x20000e7c
 8001b38:	20000cb4 	.word	0x20000cb4
 8001b3c:	20000e8c 	.word	0x20000e8c
 8001b40:	20000cb5 	.word	0x20000cb5
 8001b44:	20000e9c 	.word	0x20000e9c
 8001b48:	20000cb6 	.word	0x20000cb6
 8001b4c:	20000eac 	.word	0x20000eac
 8001b50:	0800d61c 	.word	0x0800d61c
 8001b54:	20000cb7 	.word	0x20000cb7
 8001b58:	20000ebc 	.word	0x20000ebc
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	20000cbb 	.word	0x20000cbb
 8001b64:	20000c9b 	.word	0x20000c9b
 8001b68:	4b7d      	ldr	r3, [pc, #500]	; (8001d60 <menu+0x7b0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04c      	beq.n	8001c10 <menu+0x660>
 8001b76:	4b7b      	ldr	r3, [pc, #492]	; (8001d64 <menu+0x7b4>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d148      	bne.n	8001c10 <menu+0x660>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <menu+0x7b8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <menu+0x7bc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b8c:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <menu+0x7c0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	4b76      	ldr	r3, [pc, #472]	; (8001d6c <menu+0x7bc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <menu+0x7c4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <menu+0x7bc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ba8:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <menu+0x7c8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <menu+0x7bc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <menu+0x7cc>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <menu+0x7bc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001bc4:	4b6e      	ldr	r3, [pc, #440]	; (8001d80 <menu+0x7d0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <menu+0x7bc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001bd2:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <menu+0x7d4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	4b64      	ldr	r3, [pc, #400]	; (8001d6c <menu+0x7bc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <menu+0x7d8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <menu+0x7bc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <menu+0x7dc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <menu+0x7bc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bfc:	4b64      	ldr	r3, [pc, #400]	; (8001d90 <menu+0x7e0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <menu+0x7bc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c0a:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <menu+0x7e4>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c10:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <menu+0x7e8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	f040 808e 	bne.w	8001d36 <menu+0x786>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "CALISMA SEKLi   ");
		} else {
			lcd_print(1, 1, "WORKNG PRINCIPLE");
		}*/
		lcd_print(1, 1, calismaSekliText);
 8001c1a:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <menu+0x7ec>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f006 fa98 	bl	8008154 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c24:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <menu+0x7f0>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d003      	beq.n	8001c34 <menu+0x684>
 8001c2c:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <menu+0x7f0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d104      	bne.n	8001c3e <menu+0x68e>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Dvr Yrys secildi");
			} else {
				lcd_print(2, 1, "Tppng Mobil slct");
			}*/
			lcd_print(2, 1, devirmeYuruyusText);
 8001c34:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <menu+0x7f4>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f006 fa8b 	bl	8008154 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <menu+0x7f8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <menu+0x6a8>
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <menu+0x7f0>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <menu+0x6a8>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Bastikca cal.  ");
			} else {
				lcd_print(2, 1, "Deadman Control");
			}*/
			lcd_print(2, 1, bastikcaCalisanText);
 8001c4e:	4a57      	ldr	r2, [pc, #348]	; (8001dac <menu+0x7fc>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	2002      	movs	r0, #2
 8001c54:	f006 fa7e 	bl	8008154 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <menu+0x7f8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <menu+0x6c2>
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <menu+0x7f0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <menu+0x6c2>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Bas gonder     ");
			} else {
				lcd_print(2, 1, "Call & Send    ");
			}*/
			lcd_print(2, 1, basGonderText);
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <menu+0x800>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f006 fa71 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c72:	2102      	movs	r1, #2
 8001c74:	484f      	ldr	r0, [pc, #316]	; (8001db4 <menu+0x804>)
 8001c76:	f007 fd93 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d119      	bne.n	8001cb4 <menu+0x704>
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <menu+0x7b0>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <menu+0x704>
 8001c8e:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <menu+0x7f0>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10e      	bne.n	8001cb4 <menu+0x704>
			calismaSekli = calismaSekli + 1;
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <menu+0x7f8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <menu+0x7f8>)
 8001ca0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <menu+0x7f8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d902      	bls.n	8001cb0 <menu+0x700>
				calismaSekli = 0;
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <menu+0x7f8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cb0:	f002 f982 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	483f      	ldr	r0, [pc, #252]	; (8001db4 <menu+0x804>)
 8001cb8:	f007 fd72 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d119      	bne.n	8001cf6 <menu+0x746>
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <menu+0x7b0>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f083 0301 	eor.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <menu+0x746>
 8001cd0:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <menu+0x7f0>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10e      	bne.n	8001cf6 <menu+0x746>
			calismaSekli = calismaSekli - 1;
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <menu+0x7f8>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <menu+0x7f8>)
 8001ce2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <menu+0x7f8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <menu+0x742>
	    		calismaSekli = 1;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <menu+0x7f8>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cf2:	f002 f961 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cf6:	2108      	movs	r1, #8
 8001cf8:	482e      	ldr	r0, [pc, #184]	; (8001db4 <menu+0x804>)
 8001cfa:	f007 fd51 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d118      	bne.n	8001d36 <menu+0x786>
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <menu+0x7b0>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d011      	beq.n	8001d36 <menu+0x786>
			eepromData[1] = calismaSekli;
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <menu+0x7f8>)
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <menu+0x7bc>)
 8001d18:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <menu+0x7f8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <menu+0x780>
				altLimit = 1;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <menu+0x808>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <menu+0x808>)
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <menu+0x7bc>)
 8001d2e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <menu+0x7e4>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <menu+0x7e8>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	f040 809c 	bne.w	8001e78 <menu+0x8c8>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "EMNIYET CER.    ");
		} else {
			lcd_print(1, 1, "SAFETY FRAME    ");
		}*/
		lcd_print(1, 1, emniyetCercevesiText);
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <menu+0x80c>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	2001      	movs	r0, #1
 8001d46:	f006 fa05 	bl	8008154 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <menu+0x810>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13a      	bne.n	8001dc8 <menu+0x818>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8001d52:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <menu+0x814>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	2002      	movs	r0, #2
 8001d58:	f006 f9fc 	bl	8008154 <lcd_print>
 8001d5c:	e03d      	b.n	8001dda <menu+0x82a>
 8001d5e:	bf00      	nop
 8001d60:	20000cbb 	.word	0x20000cbb
 8001d64:	20000c8e 	.word	0x20000c8e
 8001d68:	20000cae 	.word	0x20000cae
 8001d6c:	20000bb8 	.word	0x20000bb8
 8001d70:	20000caf 	.word	0x20000caf
 8001d74:	20000cb0 	.word	0x20000cb0
 8001d78:	20000cb1 	.word	0x20000cb1
 8001d7c:	20000cb2 	.word	0x20000cb2
 8001d80:	20000cb3 	.word	0x20000cb3
 8001d84:	20000cb4 	.word	0x20000cb4
 8001d88:	20000cb5 	.word	0x20000cb5
 8001d8c:	20000cb6 	.word	0x20000cb6
 8001d90:	20000cb7 	.word	0x20000cb7
 8001d94:	20000cb8 	.word	0x20000cb8
 8001d98:	20000c8c 	.word	0x20000c8c
 8001d9c:	20000ecc 	.word	0x20000ecc
 8001da0:	20000c9b 	.word	0x20000c9b
 8001da4:	20000edc 	.word	0x20000edc
 8001da8:	20000c8d 	.word	0x20000c8d
 8001dac:	20000eec 	.word	0x20000eec
 8001db0:	20000efc 	.word	0x20000efc
 8001db4:	40010800 	.word	0x40010800
 8001db8:	20000c92 	.word	0x20000c92
 8001dbc:	20000f0c 	.word	0x20000f0c
 8001dc0:	20000c90 	.word	0x20000c90
 8001dc4:	20000f1c 	.word	0x20000f1c
		} else if(emniyetCercevesi == 1) {
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <menu+0x9c8>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <menu+0x82a>
			//lcd_print(2, 1, "OND Safety     ");
			lcd_print(2, 1, ondSafetyTextGN);
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	; (8001f7c <menu+0x9cc>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f006 f9bd 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4868      	ldr	r0, [pc, #416]	; (8001f80 <menu+0x9d0>)
 8001dde:	f007 fcdf 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d115      	bne.n	8001e14 <menu+0x864>
 8001de8:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <menu+0x9d4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00e      	beq.n	8001e14 <menu+0x864>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001df6:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <menu+0x9c8>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <menu+0x9c8>)
 8001e00:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <menu+0x9c8>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d902      	bls.n	8001e10 <menu+0x860>
				emniyetCercevesi = 0;
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <menu+0x9c8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e10:	f002 f8d2 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e14:	2104      	movs	r1, #4
 8001e16:	485a      	ldr	r0, [pc, #360]	; (8001f80 <menu+0x9d0>)
 8001e18:	f007 fcc2 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d115      	bne.n	8001e4e <menu+0x89e>
 8001e22:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <menu+0x9d4>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <menu+0x89e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e30:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <menu+0x9c8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <menu+0x9c8>)
 8001e3a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <menu+0x9c8>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <menu+0x89a>
		   		emniyetCercevesi = 1;
 8001e44:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <menu+0x9c8>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e4a:	f002 f8b5 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e4e:	2108      	movs	r1, #8
 8001e50:	484b      	ldr	r0, [pc, #300]	; (8001f80 <menu+0x9d0>)
 8001e52:	f007 fca5 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10d      	bne.n	8001e78 <menu+0x8c8>
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <menu+0x9d4>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f083 0301 	eor.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <menu+0x8c8>
			eepromData[2] = emniyetCercevesi;
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <menu+0x9c8>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <menu+0x9d8>)
 8001e70:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <menu+0x9dc>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e78:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <menu+0x9e0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d166      	bne.n	8001f4e <menu+0x99e>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
		} else {
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
		}*/
		lcd_print(1, 1, yavaslamaLimitText);
 8001e80:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <menu+0x9e4>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	2001      	movs	r0, #1
 8001e86:	f006 f965 	bl	8008154 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <menu+0x9e8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <menu+0x8ee>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8001e92:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <menu+0x9ec>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	2002      	movs	r0, #2
 8001e98:	f006 f95c 	bl	8008154 <lcd_print>
 8001e9c:	e008      	b.n	8001eb0 <menu+0x900>
		} else if(yavaslamaLimit == 1) {
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <menu+0x9e8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d104      	bne.n	8001eb0 <menu+0x900>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8001ea6:	4a3e      	ldr	r2, [pc, #248]	; (8001fa0 <menu+0x9f0>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f006 f952 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4833      	ldr	r0, [pc, #204]	; (8001f80 <menu+0x9d0>)
 8001eb4:	f007 fc74 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d115      	bne.n	8001eea <menu+0x93a>
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <menu+0x9d4>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	f083 0301 	eor.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <menu+0x93a>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ecc:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <menu+0x9e8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <menu+0x9e8>)
 8001ed6:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <menu+0x9e8>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d902      	bls.n	8001ee6 <menu+0x936>
				yavaslamaLimit = 0;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <menu+0x9e8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee6:	f002 f867 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eea:	2104      	movs	r1, #4
 8001eec:	4824      	ldr	r0, [pc, #144]	; (8001f80 <menu+0x9d0>)
 8001eee:	f007 fc57 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d115      	bne.n	8001f24 <menu+0x974>
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <menu+0x9d4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00e      	beq.n	8001f24 <menu+0x974>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <menu+0x9e8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <menu+0x9e8>)
 8001f10:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <menu+0x9e8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <menu+0x970>
		   		yavaslamaLimit = 1;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <menu+0x9e8>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f20:	f002 f84a 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f24:	2108      	movs	r1, #8
 8001f26:	4816      	ldr	r0, [pc, #88]	; (8001f80 <menu+0x9d0>)
 8001f28:	f007 fc3a 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10d      	bne.n	8001f4e <menu+0x99e>
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <menu+0x9d4>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <menu+0x99e>
			eepromData[4] = yavaslamaLimit;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <menu+0x9e8>)
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <menu+0x9d8>)
 8001f46:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <menu+0x9dc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <menu+0x9e0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	f040 80aa 	bne.w	80020ac <menu+0xafc>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "ALT LIMIT       ");
		} else {
			lcd_print(1, 1, "DOWN LIMIT      ");
		}*/
		lcd_print(1, 1, altLimitText);
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <menu+0x9f4>)
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f006 f8f9 	bl	8008154 <lcd_print>

		if(altLimit == 0) {
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <menu+0x9f8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d120      	bne.n	8001fac <menu+0x9fc>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <menu+0x9ec>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f006 f8f0 	bl	8008154 <lcd_print>
 8001f74:	e023      	b.n	8001fbe <menu+0xa0e>
 8001f76:	bf00      	nop
 8001f78:	20000c90 	.word	0x20000c90
 8001f7c:	200000e0 	.word	0x200000e0
 8001f80:	40010800 	.word	0x40010800
 8001f84:	20000cbb 	.word	0x20000cbb
 8001f88:	20000bb8 	.word	0x20000bb8
 8001f8c:	20000cb8 	.word	0x20000cb8
 8001f90:	20000c8c 	.word	0x20000c8c
 8001f94:	20000f3c 	.word	0x20000f3c
 8001f98:	20000c91 	.word	0x20000c91
 8001f9c:	20000f1c 	.word	0x20000f1c
 8001fa0:	20000f2c 	.word	0x20000f2c
 8001fa4:	20000f4c 	.word	0x20000f4c
 8001fa8:	20000c92 	.word	0x20000c92
		} else if(altLimit == 1) {
 8001fac:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <menu+0xc24>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d104      	bne.n	8001fbe <menu+0xa0e>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8001fb4:	4a88      	ldr	r2, [pc, #544]	; (80021d8 <menu+0xc28>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2002      	movs	r0, #2
 8001fba:	f006 f8cb 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4886      	ldr	r0, [pc, #536]	; (80021dc <menu+0xc2c>)
 8001fc2:	f007 fbed 	bl	80097a0 <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d119      	bne.n	8002000 <menu+0xa50>
 8001fcc:	4b84      	ldr	r3, [pc, #528]	; (80021e0 <menu+0xc30>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d012      	beq.n	8002000 <menu+0xa50>
 8001fda:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <menu+0xc34>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10e      	bne.n	8002000 <menu+0xa50>
			altLimit = altLimit + 1;
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <menu+0xc24>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <menu+0xc24>)
 8001fec:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001fee:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <menu+0xc24>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d902      	bls.n	8001ffc <menu+0xa4c>
				altLimit = 0;
 8001ff6:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <menu+0xc24>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ffc:	f001 ffdc 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002000:	2104      	movs	r1, #4
 8002002:	4876      	ldr	r0, [pc, #472]	; (80021dc <menu+0xc2c>)
 8002004:	f007 fbcc 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d119      	bne.n	8002042 <menu+0xa92>
 800200e:	4b74      	ldr	r3, [pc, #464]	; (80021e0 <menu+0xc30>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <menu+0xa92>
 800201c:	4b71      	ldr	r3, [pc, #452]	; (80021e4 <menu+0xc34>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10e      	bne.n	8002042 <menu+0xa92>
			altLimit = altLimit - 1;
 8002024:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <menu+0xc24>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b69      	ldr	r3, [pc, #420]	; (80021d4 <menu+0xc24>)
 800202e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <menu+0xc24>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <menu+0xa8e>
		   		altLimit = 1;
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <menu+0xc24>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800203e:	f001 ffbb 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002042:	2108      	movs	r1, #8
 8002044:	4865      	ldr	r0, [pc, #404]	; (80021dc <menu+0xc2c>)
 8002046:	f007 fbab 	bl	80097a0 <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d12d      	bne.n	80020ac <menu+0xafc>
 8002050:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <menu+0xc30>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d026      	beq.n	80020ac <menu+0xafc>
			eepromData[5] = altLimit;
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <menu+0xc24>)
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <menu+0xc38>)
 8002064:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002066:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <menu+0xc24>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d110      	bne.n	8002090 <menu+0xae0>
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <menu+0xc3c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <menu+0xace>
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <menu+0xc3c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d108      	bne.n	8002090 <menu+0xae0>
				kapiTablaAcKonum = 3;
 800207e:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <menu+0xc3c>)
 8002080:	2203      	movs	r2, #3
 8002082:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <menu+0xc3c>)
 8002086:	781a      	ldrb	r2, [r3, #0]
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <menu+0xc38>)
 800208a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800208e:	e00a      	b.n	80020a6 <menu+0xaf6>
			} else if(altLimit == 0) {
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <menu+0xc24>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <menu+0xaf6>
				platformSilindirTipi = 0;
 8002098:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <menu+0xc40>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <menu+0xc40>)
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <menu+0xc38>)
 80020a4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <menu+0xc44>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <menu+0xc48>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d166      	bne.n	8002182 <menu+0xbd2>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "BASINC SALTERI ");
		} else {
			lcd_print(1, 1, "PRESSURE SWITCH");
		}*/
		lcd_print(1, 1, basincSalteriText);
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <menu+0xc4c>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	2001      	movs	r0, #1
 80020ba:	f006 f84b 	bl	8008154 <lcd_print>

		if(basincSalteri == 0) {
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <menu+0xc50>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <menu+0xb22>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 80020c6:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <menu+0xc54>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	2002      	movs	r0, #2
 80020cc:	f006 f842 	bl	8008154 <lcd_print>
 80020d0:	e008      	b.n	80020e4 <menu+0xb34>
		} else if(basincSalteri == 1) {
 80020d2:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <menu+0xc50>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d104      	bne.n	80020e4 <menu+0xb34>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 80020da:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <menu+0xc28>)
 80020dc:	2101      	movs	r1, #1
 80020de:	2002      	movs	r0, #2
 80020e0:	f006 f838 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e4:	2102      	movs	r1, #2
 80020e6:	483d      	ldr	r0, [pc, #244]	; (80021dc <menu+0xc2c>)
 80020e8:	f007 fb5a 	bl	80097a0 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d115      	bne.n	800211e <menu+0xb6e>
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <menu+0xc30>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <menu+0xb6e>
			basincSalteri = basincSalteri + 1;
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <menu+0xc50>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <menu+0xc50>)
 800210a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800210c:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <menu+0xc50>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d902      	bls.n	800211a <menu+0xb6a>
				basincSalteri = 0;
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <menu+0xc50>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800211a:	f001 ff4d 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800211e:	2104      	movs	r1, #4
 8002120:	482e      	ldr	r0, [pc, #184]	; (80021dc <menu+0xc2c>)
 8002122:	f007 fb3d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002126:	4603      	mov	r3, r0
 8002128:	2b01      	cmp	r3, #1
 800212a:	d115      	bne.n	8002158 <menu+0xba8>
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <menu+0xc30>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00e      	beq.n	8002158 <menu+0xba8>
			basincSalteri = basincSalteri - 1;
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <menu+0xc50>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	3b01      	subs	r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <menu+0xc50>)
 8002144:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <menu+0xc50>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <menu+0xba4>
		   		basincSalteri = 1;
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <menu+0xc50>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002154:	f001 ff30 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002158:	2108      	movs	r1, #8
 800215a:	4820      	ldr	r0, [pc, #128]	; (80021dc <menu+0xc2c>)
 800215c:	f007 fb20 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10d      	bne.n	8002182 <menu+0xbd2>
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <menu+0xc30>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <menu+0xbd2>
			eepromData[6] = basincSalteri;
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <menu+0xc50>)
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <menu+0xc38>)
 800217a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <menu+0xc44>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <menu+0xc48>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b07      	cmp	r3, #7
 8002188:	f040 80a9 	bne.w	80022de <menu+0xd2e>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "KAPI SECIMLERI     ");
		} else {
			lcd_print(1, 1, "DOOR SELECTION     ");
		}*/
		lcd_print(1, 1, kapiSecimleriText);
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <menu+0xc58>)
 800218e:	2101      	movs	r1, #1
 8002190:	2001      	movs	r0, #1
 8002192:	f005 ffdf 	bl	8008154 <lcd_print>

		if(kapiSecimleri == 0) {
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <menu+0xc5c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <menu+0xbfa>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <menu+0xc54>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	2002      	movs	r0, #2
 80021a4:	f005 ffd6 	bl	8008154 <lcd_print>
 80021a8:	e03f      	b.n	800222a <menu+0xc7a>
		} else if(kapiSecimleri == 1) {
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <menu+0xc5c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <menu+0xc0e>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kat kapisi aktif");
			} else {
				lcd_print(2, 1, "Floor door act  ");
			}*/
			lcd_print(2, 1, katKapisiAktifText);
 80021b2:	4a17      	ldr	r2, [pc, #92]	; (8002210 <menu+0xc60>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	2002      	movs	r0, #2
 80021b8:	f005 ffcc 	bl	8008154 <lcd_print>
 80021bc:	e035      	b.n	800222a <menu+0xc7a>
		} else if(kapiSecimleri == 2){
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <menu+0xc5c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d128      	bne.n	8002218 <menu+0xc68>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Tabla kapi aktif");
			} else {
				lcd_print(2, 1, "Pltfrm door act ");
			}*/
			lcd_print(2, 1, tablaKapiAktifText);
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <menu+0xc64>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	2002      	movs	r0, #2
 80021cc:	f005 ffc2 	bl	8008154 <lcd_print>
 80021d0:	e02b      	b.n	800222a <menu+0xc7a>
 80021d2:	bf00      	nop
 80021d4:	20000c92 	.word	0x20000c92
 80021d8:	20000f2c 	.word	0x20000f2c
 80021dc:	40010800 	.word	0x40010800
 80021e0:	20000cbb 	.word	0x20000cbb
 80021e4:	20000c8d 	.word	0x20000c8d
 80021e8:	20000bb8 	.word	0x20000bb8
 80021ec:	20000c99 	.word	0x20000c99
 80021f0:	20000c9f 	.word	0x20000c9f
 80021f4:	20000cb8 	.word	0x20000cb8
 80021f8:	20000c8c 	.word	0x20000c8c
 80021fc:	20000f5c 	.word	0x20000f5c
 8002200:	20000c93 	.word	0x20000c93
 8002204:	20000f1c 	.word	0x20000f1c
 8002208:	20000f6c 	.word	0x20000f6c
 800220c:	20000c94 	.word	0x20000c94
 8002210:	20000f7c 	.word	0x20000f7c
 8002214:	20000f8c 	.word	0x20000f8c
		} else if(kapiSecimleri == 3){
 8002218:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <menu+0xe44>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d104      	bne.n	800222a <menu+0xc7a>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kat + Tabl aktif");
			} else {
				lcd_print(2, 1, "Flr + Plrfrm act");
			}*/
			lcd_print(2, 1, katArtiTablaAktifText);
 8002220:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <menu+0xe48>)
 8002222:	2101      	movs	r1, #1
 8002224:	2002      	movs	r0, #2
 8002226:	f005 ff95 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800222a:	2102      	movs	r1, #2
 800222c:	4873      	ldr	r0, [pc, #460]	; (80023fc <menu+0xe4c>)
 800222e:	f007 fab7 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d115      	bne.n	8002264 <menu+0xcb4>
 8002238:	4b71      	ldr	r3, [pc, #452]	; (8002400 <menu+0xe50>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00e      	beq.n	8002264 <menu+0xcb4>
			kapiSecimleri = kapiSecimleri + 1;
 8002246:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <menu+0xe44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b69      	ldr	r3, [pc, #420]	; (80023f4 <menu+0xe44>)
 8002250:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002252:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <menu+0xe44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d902      	bls.n	8002260 <menu+0xcb0>
				kapiSecimleri = 0;
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <menu+0xe44>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002260:	f001 feaa 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002264:	2104      	movs	r1, #4
 8002266:	4865      	ldr	r0, [pc, #404]	; (80023fc <menu+0xe4c>)
 8002268:	f007 fa9a 	bl	80097a0 <HAL_GPIO_ReadPin>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d115      	bne.n	800229e <menu+0xcee>
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <menu+0xe50>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <menu+0xcee>
			kapiSecimleri = kapiSecimleri - 1;
 8002280:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <menu+0xe44>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <menu+0xe44>)
 800228a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <menu+0xe44>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d902      	bls.n	800229a <menu+0xcea>
		   		kapiSecimleri = 3;
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <menu+0xe44>)
 8002296:	2203      	movs	r2, #3
 8002298:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800229a:	f001 fe8d 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800229e:	2108      	movs	r1, #8
 80022a0:	4856      	ldr	r0, [pc, #344]	; (80023fc <menu+0xe4c>)
 80022a2:	f007 fa7d 	bl	80097a0 <HAL_GPIO_ReadPin>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d118      	bne.n	80022de <menu+0xd2e>
 80022ac:	4b54      	ldr	r3, [pc, #336]	; (8002400 <menu+0xe50>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	f083 0301 	eor.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d011      	beq.n	80022de <menu+0xd2e>
			eepromData[7] = kapiSecimleri;
 80022ba:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <menu+0xe44>)
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <menu+0xe54>)
 80022c0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <menu+0xe44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <menu+0xd28>
				altLimit = 1;
 80022ca:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <menu+0xe58>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022d0:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <menu+0xe58>)
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <menu+0xe54>)
 80022d6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80022d8:	4b4c      	ldr	r3, [pc, #304]	; (800240c <menu+0xe5c>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <menu+0xe60>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d167      	bne.n	80023b6 <menu+0xe06>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
		} else {
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
		}*/
		lcd_print(1, 1, kapiAcmaTipiText);
 80022e6:	4a4b      	ldr	r2, [pc, #300]	; (8002414 <menu+0xe64>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	2001      	movs	r0, #1
 80022ec:	f005 ff32 	bl	8008154 <lcd_print>

		if(kapiAcTipi == 0){
 80022f0:	4b49      	ldr	r3, [pc, #292]	; (8002418 <menu+0xe68>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <menu+0xd54>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kapi butonu ESP");
			} else {
				lcd_print(2, 1, "Door Button ESP");
			}*/
			lcd_print(2, 1, kapiButonuESPText);
 80022f8:	4a48      	ldr	r2, [pc, #288]	; (800241c <menu+0xe6c>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	2002      	movs	r0, #2
 80022fe:	f005 ff29 	bl	8008154 <lcd_print>
 8002302:	e008      	b.n	8002316 <menu+0xd66>
		} else if(kapiAcTipi == 1){
 8002304:	4b44      	ldr	r3, [pc, #272]	; (8002418 <menu+0xe68>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d104      	bne.n	8002316 <menu+0xd66>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "Kat butonu EXT  ");
			} else {
				lcd_print(2, 1, "Floor button EXT");
			}*/
			lcd_print(2, 1, katButonuEXTText);
 800230c:	4a44      	ldr	r2, [pc, #272]	; (8002420 <menu+0xe70>)
 800230e:	2101      	movs	r1, #1
 8002310:	2002      	movs	r0, #2
 8002312:	f005 ff1f 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002316:	2102      	movs	r1, #2
 8002318:	4838      	ldr	r0, [pc, #224]	; (80023fc <menu+0xe4c>)
 800231a:	f007 fa41 	bl	80097a0 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d115      	bne.n	8002350 <menu+0xda0>
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <menu+0xe50>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f083 0301 	eor.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00e      	beq.n	8002350 <menu+0xda0>
			kapiAcTipi = kapiAcTipi + 1;
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <menu+0xe68>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <menu+0xe68>)
 800233c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <menu+0xe68>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d902      	bls.n	800234c <menu+0xd9c>
				kapiAcTipi = 0;
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <menu+0xe68>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800234c:	f001 fe34 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002350:	2104      	movs	r1, #4
 8002352:	482a      	ldr	r0, [pc, #168]	; (80023fc <menu+0xe4c>)
 8002354:	f007 fa24 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d115      	bne.n	800238a <menu+0xdda>
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <menu+0xe50>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <menu+0xdda>
			kapiAcTipi = kapiAcTipi - 1;
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <menu+0xe68>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <menu+0xe68>)
 8002376:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <menu+0xe68>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <menu+0xdd6>
		   		kapiAcTipi = 1;
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <menu+0xe68>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002386:	f001 fe17 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800238a:	2108      	movs	r1, #8
 800238c:	481b      	ldr	r0, [pc, #108]	; (80023fc <menu+0xe4c>)
 800238e:	f007 fa07 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d10e      	bne.n	80023b6 <menu+0xe06>
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <menu+0xe50>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <menu+0xe06>
			eepromData[36] = kapiAcTipi;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <menu+0xe68>)
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <menu+0xe54>)
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <menu+0xe5c>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <menu+0xe60>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	f040 8092 	bne.w	80024e4 <menu+0xf34>
		/*if(dilSecim == 0){
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
		} else {
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
		}*/
		lcd_print(1, 1, birKatKapiTipiText);
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <menu+0xe74>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2001      	movs	r0, #1
 80023c6:	f005 fec5 	bl	8008154 <lcd_print>

		if(kapi1Tip == 0) {
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <menu+0xe78>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <menu+0xe2e>
			//lcd_print(2, 1, "Prudhome        ");
			lcd_print(2, 1, prudhomeTextGN);
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <menu+0xe7c>)
 80023d4:	2101      	movs	r1, #1
 80023d6:	2002      	movs	r0, #2
 80023d8:	f005 febc 	bl	8008154 <lcd_print>
 80023dc:	e033      	b.n	8002446 <menu+0xe96>
		} else if(kapi1Tip == 1) {
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <menu+0xe78>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d126      	bne.n	8002434 <menu+0xe84>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "Buton kontrollu");
			} else {
				lcd_print(2, 1, "Button cntrolled");
			}*/
			lcd_print(2, 1, butonKontrolluText);
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <menu+0xe80>)
 80023e8:	2101      	movs	r1, #1
 80023ea:	2002      	movs	r0, #2
 80023ec:	f005 feb2 	bl	8008154 <lcd_print>
 80023f0:	e029      	b.n	8002446 <menu+0xe96>
 80023f2:	bf00      	nop
 80023f4:	20000c94 	.word	0x20000c94
 80023f8:	20000f9c 	.word	0x20000f9c
 80023fc:	40010800 	.word	0x40010800
 8002400:	20000cbb 	.word	0x20000cbb
 8002404:	20000bb8 	.word	0x20000bb8
 8002408:	20000c92 	.word	0x20000c92
 800240c:	20000cb8 	.word	0x20000cb8
 8002410:	20000c8c 	.word	0x20000c8c
 8002414:	20000fac 	.word	0x20000fac
 8002418:	20000c98 	.word	0x20000c98
 800241c:	20000fbc 	.word	0x20000fbc
 8002420:	20000fcc 	.word	0x20000fcc
 8002424:	20000fdc 	.word	0x20000fdc
 8002428:	20000c95 	.word	0x20000c95
 800242c:	200000f0 	.word	0x200000f0
 8002430:	20000fec 	.word	0x20000fec
		} else if(kapi1Tip == 2) {
 8002434:	4b73      	ldr	r3, [pc, #460]	; (8002604 <menu+0x1054>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d104      	bne.n	8002446 <menu+0xe96>
			//lcd_print(2, 1, "Pizzato        ");
			lcd_print(2, 1, pizzattoTextGN);
 800243c:	4a72      	ldr	r2, [pc, #456]	; (8002608 <menu+0x1058>)
 800243e:	2101      	movs	r1, #1
 8002440:	2002      	movs	r0, #2
 8002442:	f005 fe87 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002446:	2102      	movs	r1, #2
 8002448:	4870      	ldr	r0, [pc, #448]	; (800260c <menu+0x105c>)
 800244a:	f007 f9a9 	bl	80097a0 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	d115      	bne.n	8002480 <menu+0xed0>
 8002454:	4b6e      	ldr	r3, [pc, #440]	; (8002610 <menu+0x1060>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00e      	beq.n	8002480 <menu+0xed0>
			kapi1Tip = kapi1Tip + 1;
 8002462:	4b68      	ldr	r3, [pc, #416]	; (8002604 <menu+0x1054>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b66      	ldr	r3, [pc, #408]	; (8002604 <menu+0x1054>)
 800246c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <menu+0x1054>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d902      	bls.n	800247c <menu+0xecc>
				kapi1Tip = 0;
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <menu+0x1054>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800247c:	f001 fd9c 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002480:	2104      	movs	r1, #4
 8002482:	4862      	ldr	r0, [pc, #392]	; (800260c <menu+0x105c>)
 8002484:	f007 f98c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d115      	bne.n	80024ba <menu+0xf0a>
 800248e:	4b60      	ldr	r3, [pc, #384]	; (8002610 <menu+0x1060>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	f083 0301 	eor.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <menu+0xf0a>
			kapi1Tip = kapi1Tip - 1;
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <menu+0x1054>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b57      	ldr	r3, [pc, #348]	; (8002604 <menu+0x1054>)
 80024a6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <menu+0x1054>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d902      	bls.n	80024b6 <menu+0xf06>
		   		kapi1Tip = 2;
 80024b0:	4b54      	ldr	r3, [pc, #336]	; (8002604 <menu+0x1054>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024b6:	f001 fd7f 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ba:	2108      	movs	r1, #8
 80024bc:	4853      	ldr	r0, [pc, #332]	; (800260c <menu+0x105c>)
 80024be:	f007 f96f 	bl	80097a0 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10d      	bne.n	80024e4 <menu+0xf34>
 80024c8:	4b51      	ldr	r3, [pc, #324]	; (8002610 <menu+0x1060>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <menu+0xf34>
			eepromData[8] = kapi1Tip;
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <menu+0x1054>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <menu+0x1064>)
 80024dc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024de:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <menu+0x1068>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <menu+0x106c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d16c      	bne.n	80025c6 <menu+0x1016>
			lcd_print(2, 1, "Kac Saniye     ");
		} else {
			lcd_print(1, 1, "1.FLR DR OPN TMR");
			lcd_print(2, 1, "Seconds        ");
		}*/
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <menu+0x1070>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	2001      	movs	r0, #1
 80024f2:	f005 fe2f 	bl	8008154 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024f6:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <menu+0x1074>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	2002      	movs	r0, #2
 80024fc:	f005 fe2a 	bl	8008154 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002500:	4b49      	ldr	r3, [pc, #292]	; (8002628 <menu+0x1078>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	220a      	movs	r2, #10
 8002506:	4949      	ldr	r1, [pc, #292]	; (800262c <menu+0x107c>)
 8002508:	4618      	mov	r0, r3
 800250a:	f00a f9d1 	bl	800c8b0 <itoa>
		lcd_print(2,16,snum);
 800250e:	4a47      	ldr	r2, [pc, #284]	; (800262c <menu+0x107c>)
 8002510:	2110      	movs	r1, #16
 8002512:	2002      	movs	r0, #2
 8002514:	f005 fe1e 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002518:	2102      	movs	r1, #2
 800251a:	483c      	ldr	r0, [pc, #240]	; (800260c <menu+0x105c>)
 800251c:	f007 f940 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d119      	bne.n	800255a <menu+0xfaa>
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <menu+0x1060>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d012      	beq.n	800255a <menu+0xfaa>
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <menu+0x1054>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10e      	bne.n	800255a <menu+0xfaa>
			kapi1AcSure = kapi1AcSure + 1;
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <menu+0x1078>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b38      	ldr	r3, [pc, #224]	; (8002628 <menu+0x1078>)
 8002546:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002548:	4b37      	ldr	r3, [pc, #220]	; (8002628 <menu+0x1078>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d902      	bls.n	8002556 <menu+0xfa6>
				kapi1AcSure = 0;
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <menu+0x1078>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002556:	f001 fd2f 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800255a:	2104      	movs	r1, #4
 800255c:	482b      	ldr	r0, [pc, #172]	; (800260c <menu+0x105c>)
 800255e:	f007 f91f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d119      	bne.n	800259c <menu+0xfec>
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <menu+0x1060>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <menu+0xfec>
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <menu+0x1054>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <menu+0xfec>
			kapi1AcSure = kapi1AcSure - 1;
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <menu+0x1078>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <menu+0x1078>)
 8002588:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <menu+0x1078>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <menu+0xfe8>
		   		kapi1AcSure = 5;
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <menu+0x1078>)
 8002594:	2205      	movs	r2, #5
 8002596:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002598:	f001 fd0e 	bl	8003fb8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259c:	2108      	movs	r1, #8
 800259e:	481b      	ldr	r0, [pc, #108]	; (800260c <menu+0x105c>)
 80025a0:	f007 f8fe 	bl	80097a0 <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <menu+0x1016>
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <menu+0x1060>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	f083 0301 	eor.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <menu+0x1016>
			eepromData[9] = kapi1AcSure;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <menu+0x1078>)
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <menu+0x1064>)
 80025be:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <menu+0x1068>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <menu+0x106c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b0b      	cmp	r3, #11
 80025cc:	f040 8090 	bne.w	80026f0 <menu+0x1140>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
		} else {
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
		}*/
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <menu+0x1080>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f005 fdbd 	bl	8008154 <lcd_print>

		if(kapi2Tip == 0) {
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <menu+0x1084>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <menu+0x103e>
			//lcd_print(2, 1, "Prudhome        ");
			lcd_print(2, 1, prudhomeTextGN);
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <menu+0x1088>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2002      	movs	r0, #2
 80025e8:	f005 fdb4 	bl	8008154 <lcd_print>
 80025ec:	e031      	b.n	8002652 <menu+0x10a2>
		} else if(kapi2Tip == 1) {
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <menu+0x1084>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d124      	bne.n	8002640 <menu+0x1090>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Buton kontrollu");
			} else {
				lcd_print(2, 1, "Button cntrolled");
			}*/
			lcd_print(2, 1, butonKontrolluText);
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <menu+0x108c>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2002      	movs	r0, #2
 80025fc:	f005 fdaa 	bl	8008154 <lcd_print>
 8002600:	e027      	b.n	8002652 <menu+0x10a2>
 8002602:	bf00      	nop
 8002604:	20000c95 	.word	0x20000c95
 8002608:	20000100 	.word	0x20000100
 800260c:	40010800 	.word	0x40010800
 8002610:	20000cbb 	.word	0x20000cbb
 8002614:	20000bb8 	.word	0x20000bb8
 8002618:	20000cb8 	.word	0x20000cb8
 800261c:	20000c8c 	.word	0x20000c8c
 8002620:	20000ffc 	.word	0x20000ffc
 8002624:	2000100c 	.word	0x2000100c
 8002628:	20000ca5 	.word	0x20000ca5
 800262c:	20000c28 	.word	0x20000c28
 8002630:	2000101c 	.word	0x2000101c
 8002634:	20000c96 	.word	0x20000c96
 8002638:	200000f0 	.word	0x200000f0
 800263c:	20000fec 	.word	0x20000fec
		} else if(kapi2Tip == 2) {
 8002640:	4b73      	ldr	r3, [pc, #460]	; (8002810 <menu+0x1260>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d104      	bne.n	8002652 <menu+0x10a2>
			//lcd_print(2, 1, "Pizzato        ");
			lcd_print(2, 1, pizzattoTextGN);
 8002648:	4a72      	ldr	r2, [pc, #456]	; (8002814 <menu+0x1264>)
 800264a:	2101      	movs	r1, #1
 800264c:	2002      	movs	r0, #2
 800264e:	f005 fd81 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002652:	2102      	movs	r1, #2
 8002654:	4870      	ldr	r0, [pc, #448]	; (8002818 <menu+0x1268>)
 8002656:	f007 f8a3 	bl	80097a0 <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d115      	bne.n	800268c <menu+0x10dc>
 8002660:	4b6e      	ldr	r3, [pc, #440]	; (800281c <menu+0x126c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00e      	beq.n	800268c <menu+0x10dc>
			kapi2Tip = kapi2Tip + 1;
 800266e:	4b68      	ldr	r3, [pc, #416]	; (8002810 <menu+0x1260>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b66      	ldr	r3, [pc, #408]	; (8002810 <menu+0x1260>)
 8002678:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800267a:	4b65      	ldr	r3, [pc, #404]	; (8002810 <menu+0x1260>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <menu+0x10d8>
				kapi2Tip = 0;
 8002682:	4b63      	ldr	r3, [pc, #396]	; (8002810 <menu+0x1260>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002688:	f001 fc96 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800268c:	2104      	movs	r1, #4
 800268e:	4862      	ldr	r0, [pc, #392]	; (8002818 <menu+0x1268>)
 8002690:	f007 f886 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d115      	bne.n	80026c6 <menu+0x1116>
 800269a:	4b60      	ldr	r3, [pc, #384]	; (800281c <menu+0x126c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	f083 0301 	eor.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <menu+0x1116>
			kapi2Tip = kapi2Tip - 1;
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <menu+0x1260>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	4b57      	ldr	r3, [pc, #348]	; (8002810 <menu+0x1260>)
 80026b2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <menu+0x1260>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d902      	bls.n	80026c2 <menu+0x1112>
		   		kapi2Tip = 2;
 80026bc:	4b54      	ldr	r3, [pc, #336]	; (8002810 <menu+0x1260>)
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026c2:	f001 fc79 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c6:	2108      	movs	r1, #8
 80026c8:	4853      	ldr	r0, [pc, #332]	; (8002818 <menu+0x1268>)
 80026ca:	f007 f869 	bl	80097a0 <HAL_GPIO_ReadPin>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10d      	bne.n	80026f0 <menu+0x1140>
 80026d4:	4b51      	ldr	r3, [pc, #324]	; (800281c <menu+0x126c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f083 0301 	eor.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <menu+0x1140>
			eepromData[10] = kapi2Tip;
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <menu+0x1260>)
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	4b4e      	ldr	r3, [pc, #312]	; (8002820 <menu+0x1270>)
 80026e8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80026ea:	4b4e      	ldr	r3, [pc, #312]	; (8002824 <menu+0x1274>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80026f0:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <menu+0x1278>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d16c      	bne.n	80027d2 <menu+0x1222>
			lcd_print(2, 1, "Kac Saniye     ");
		} else {
			lcd_print(1, 1, "2.FLR DR OPN TMR");
			lcd_print(2, 1, "Seconds        ");
		}*/
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <menu+0x127c>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2001      	movs	r0, #1
 80026fe:	f005 fd29 	bl	8008154 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002702:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <menu+0x1280>)
 8002704:	2101      	movs	r1, #1
 8002706:	2002      	movs	r0, #2
 8002708:	f005 fd24 	bl	8008154 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800270c:	4b49      	ldr	r3, [pc, #292]	; (8002834 <menu+0x1284>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	220a      	movs	r2, #10
 8002712:	4949      	ldr	r1, [pc, #292]	; (8002838 <menu+0x1288>)
 8002714:	4618      	mov	r0, r3
 8002716:	f00a f8cb 	bl	800c8b0 <itoa>
		lcd_print(2,16,snum);
 800271a:	4a47      	ldr	r2, [pc, #284]	; (8002838 <menu+0x1288>)
 800271c:	2110      	movs	r1, #16
 800271e:	2002      	movs	r0, #2
 8002720:	f005 fd18 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002724:	2102      	movs	r1, #2
 8002726:	483c      	ldr	r0, [pc, #240]	; (8002818 <menu+0x1268>)
 8002728:	f007 f83a 	bl	80097a0 <HAL_GPIO_ReadPin>
 800272c:	4603      	mov	r3, r0
 800272e:	2b01      	cmp	r3, #1
 8002730:	d119      	bne.n	8002766 <menu+0x11b6>
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <menu+0x126c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	f083 0301 	eor.w	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <menu+0x11b6>
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <menu+0x1260>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10e      	bne.n	8002766 <menu+0x11b6>
			kapi2AcSure = kapi2AcSure + 1;
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <menu+0x1284>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b38      	ldr	r3, [pc, #224]	; (8002834 <menu+0x1284>)
 8002752:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <menu+0x1284>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d902      	bls.n	8002762 <menu+0x11b2>
				kapi2AcSure = 0;
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <menu+0x1284>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002762:	f001 fc29 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002766:	2104      	movs	r1, #4
 8002768:	482b      	ldr	r0, [pc, #172]	; (8002818 <menu+0x1268>)
 800276a:	f007 f819 	bl	80097a0 <HAL_GPIO_ReadPin>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d119      	bne.n	80027a8 <menu+0x11f8>
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <menu+0x126c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	f083 0301 	eor.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d012      	beq.n	80027a8 <menu+0x11f8>
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <menu+0x1260>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <menu+0x11f8>
			kapi2AcSure = kapi2AcSure - 1;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <menu+0x1284>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <menu+0x1284>)
 8002794:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <menu+0x1284>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <menu+0x11f4>
		   		kapi2AcSure = 5;
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <menu+0x1284>)
 80027a0:	2205      	movs	r2, #5
 80027a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a4:	f001 fc08 	bl	8003fb8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a8:	2108      	movs	r1, #8
 80027aa:	481b      	ldr	r0, [pc, #108]	; (8002818 <menu+0x1268>)
 80027ac:	f006 fff8 	bl	80097a0 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10d      	bne.n	80027d2 <menu+0x1222>
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <menu+0x126c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <menu+0x1222>
			eepromData[11] = kapi2AcSure;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <menu+0x1284>)
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <menu+0x1270>)
 80027ca:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <menu+0x1274>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <menu+0x1278>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b0d      	cmp	r3, #13
 80027d8:	f040 8090 	bne.w	80028fc <menu+0x134c>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "TABLA KAPI TiPi ");
		} else if(dilSecim == 1){
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
		}*/
		lcd_print(1, 1, tablaKapiTipiText);
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <menu+0x128c>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2001      	movs	r0, #1
 80027e2:	f005 fcb7 	bl	8008154 <lcd_print>

		if(kapitablaTip == 0) {
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <menu+0x1290>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <menu+0x124a>
			//lcd_print(2, 1, "Prudhome        ");
			lcd_print(2, 1, prudhomeTextGN);
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <menu+0x1294>)
 80027f0:	2101      	movs	r1, #1
 80027f2:	2002      	movs	r0, #2
 80027f4:	f005 fcae 	bl	8008154 <lcd_print>
 80027f8:	e031      	b.n	800285e <menu+0x12ae>
		} else if(kapitablaTip == 1) {
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <menu+0x1290>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d124      	bne.n	800284c <menu+0x129c>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Buton kontrollu");
			} else {
				lcd_print(2, 1, "Button cntrolled");
			}*/
			lcd_print(2, 1, butonKontrolluText);
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <menu+0x1298>)
 8002804:	2101      	movs	r1, #1
 8002806:	2002      	movs	r0, #2
 8002808:	f005 fca4 	bl	8008154 <lcd_print>
 800280c:	e027      	b.n	800285e <menu+0x12ae>
 800280e:	bf00      	nop
 8002810:	20000c96 	.word	0x20000c96
 8002814:	20000100 	.word	0x20000100
 8002818:	40010800 	.word	0x40010800
 800281c:	20000cbb 	.word	0x20000cbb
 8002820:	20000bb8 	.word	0x20000bb8
 8002824:	20000cb8 	.word	0x20000cb8
 8002828:	20000c8c 	.word	0x20000c8c
 800282c:	2000102c 	.word	0x2000102c
 8002830:	2000100c 	.word	0x2000100c
 8002834:	20000ca6 	.word	0x20000ca6
 8002838:	20000c28 	.word	0x20000c28
 800283c:	2000103c 	.word	0x2000103c
 8002840:	20000c97 	.word	0x20000c97
 8002844:	200000f0 	.word	0x200000f0
 8002848:	20000fec 	.word	0x20000fec
		} else if(kapitablaTip == 2) {
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <menu+0x139c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d104      	bne.n	800285e <menu+0x12ae>
			//lcd_print(2, 1, "Pizzato        ");
			lcd_print(2, 1, pizzattoTextGN);
 8002854:	4a3e      	ldr	r2, [pc, #248]	; (8002950 <menu+0x13a0>)
 8002856:	2101      	movs	r1, #1
 8002858:	2002      	movs	r0, #2
 800285a:	f005 fc7b 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800285e:	2102      	movs	r1, #2
 8002860:	483c      	ldr	r0, [pc, #240]	; (8002954 <menu+0x13a4>)
 8002862:	f006 ff9d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	d115      	bne.n	8002898 <menu+0x12e8>
 800286c:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <menu+0x13a8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f083 0301 	eor.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00e      	beq.n	8002898 <menu+0x12e8>
			kapitablaTip = kapitablaTip + 1;
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <menu+0x139c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b32      	ldr	r3, [pc, #200]	; (800294c <menu+0x139c>)
 8002884:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <menu+0x139c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <menu+0x12e4>
				kapitablaTip = 0;
 800288e:	4b2f      	ldr	r3, [pc, #188]	; (800294c <menu+0x139c>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002894:	f001 fb90 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002898:	2104      	movs	r1, #4
 800289a:	482e      	ldr	r0, [pc, #184]	; (8002954 <menu+0x13a4>)
 800289c:	f006 ff80 	bl	80097a0 <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d115      	bne.n	80028d2 <menu+0x1322>
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <menu+0x13a8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00e      	beq.n	80028d2 <menu+0x1322>
			kapitablaTip = kapitablaTip - 1;
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <menu+0x139c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <menu+0x139c>)
 80028be:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <menu+0x139c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d902      	bls.n	80028ce <menu+0x131e>
		   		kapitablaTip = 2;
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <menu+0x139c>)
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ce:	f001 fb73 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028d2:	2108      	movs	r1, #8
 80028d4:	481f      	ldr	r0, [pc, #124]	; (8002954 <menu+0x13a4>)
 80028d6:	f006 ff63 	bl	80097a0 <HAL_GPIO_ReadPin>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10d      	bne.n	80028fc <menu+0x134c>
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <menu+0x13a8>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <menu+0x134c>
			eepromData[12] = kapitablaTip;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <menu+0x139c>)
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <menu+0x13ac>)
 80028f4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <menu+0x13b0>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <menu+0x13b4>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b0e      	cmp	r3, #14
 8002902:	f040 80a3 	bne.w	8002a4c <menu+0x149c>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "TBL KPI AC KONUM");
		} else {
			lcd_print(1, 1, "PLTFRM DR OP LOC");
		}*/
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <menu+0x13b8>)
 8002908:	2101      	movs	r1, #1
 800290a:	2001      	movs	r0, #1
 800290c:	f005 fc22 	bl	8008154 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <menu+0x13bc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <menu+0x1374>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "1. Katta ac    ");
			} else {
				lcd_print(2, 1, "1. Floor open  ");
			}*/
			lcd_print(2, 1, birinciKattaAcText);
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <menu+0x13c0>)
 800291a:	2101      	movs	r1, #1
 800291c:	2002      	movs	r0, #2
 800291e:	f005 fc19 	bl	8008154 <lcd_print>
 8002922:	e034      	b.n	800298e <menu+0x13de>
		} else if(kapiTablaAcKonum == 1) {
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <menu+0x13bc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <menu+0x1388>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "2. Katta ac    ");
			} else {
				lcd_print(2, 1, "2. Floor open  ");
			}*/
			lcd_print(2, 1, ikinciKattaAcText);
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <menu+0x13c4>)
 800292e:	2101      	movs	r1, #1
 8002930:	2002      	movs	r0, #2
 8002932:	f005 fc0f 	bl	8008154 <lcd_print>
 8002936:	e02a      	b.n	800298e <menu+0x13de>
		} else if(kapiTablaAcKonum == 2) {
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <menu+0x13bc>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d11d      	bne.n	800297c <menu+0x13cc>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "1.+2. Katta ac  ");
			} else {
				lcd_print(2, 1, "1.+2. Floor open");
			}*/
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <menu+0x13c8>)
 8002942:	2101      	movs	r1, #1
 8002944:	2002      	movs	r0, #2
 8002946:	f005 fc05 	bl	8008154 <lcd_print>
 800294a:	e020      	b.n	800298e <menu+0x13de>
 800294c:	20000c97 	.word	0x20000c97
 8002950:	20000100 	.word	0x20000100
 8002954:	40010800 	.word	0x40010800
 8002958:	20000cbb 	.word	0x20000cbb
 800295c:	20000bb8 	.word	0x20000bb8
 8002960:	20000cb8 	.word	0x20000cb8
 8002964:	20000c8c 	.word	0x20000c8c
 8002968:	2000104c 	.word	0x2000104c
 800296c:	20000c99 	.word	0x20000c99
 8002970:	2000105c 	.word	0x2000105c
 8002974:	2000106c 	.word	0x2000106c
 8002978:	2000107c 	.word	0x2000107c
		} else if(kapiTablaAcKonum == 3) {
 800297c:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <menu+0x15a8>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d104      	bne.n	800298e <menu+0x13de>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8002984:	4a75      	ldr	r2, [pc, #468]	; (8002b5c <menu+0x15ac>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f005 fbe3 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2102      	movs	r1, #2
 8002990:	4873      	ldr	r0, [pc, #460]	; (8002b60 <menu+0x15b0>)
 8002992:	f006 ff05 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d115      	bne.n	80029c8 <menu+0x1418>
 800299c:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <menu+0x15b4>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <menu+0x1418>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80029aa:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <menu+0x15a8>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b69      	ldr	r3, [pc, #420]	; (8002b58 <menu+0x15a8>)
 80029b4:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80029b6:	4b68      	ldr	r3, [pc, #416]	; (8002b58 <menu+0x15a8>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <menu+0x1414>
				kapiTablaAcKonum = 0;
 80029be:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <menu+0x15a8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029c4:	f001 faf8 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c8:	2104      	movs	r1, #4
 80029ca:	4865      	ldr	r0, [pc, #404]	; (8002b60 <menu+0x15b0>)
 80029cc:	f006 fee8 	bl	80097a0 <HAL_GPIO_ReadPin>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d115      	bne.n	8002a02 <menu+0x1452>
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <menu+0x15b4>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <menu+0x1452>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80029e4:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <menu+0x15a8>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <menu+0x15a8>)
 80029ee:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <menu+0x15a8>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d902      	bls.n	80029fe <menu+0x144e>
		   		kapiTablaAcKonum = 2;
 80029f8:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <menu+0x15a8>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fe:	f001 fadb 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a02:	2108      	movs	r1, #8
 8002a04:	4856      	ldr	r0, [pc, #344]	; (8002b60 <menu+0x15b0>)
 8002a06:	f006 fecb 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11d      	bne.n	8002a4c <menu+0x149c>
 8002a10:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <menu+0x15b4>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <menu+0x149c>
			eepromData[34] = kapiTablaAcKonum;
 8002a1e:	4b4e      	ldr	r3, [pc, #312]	; (8002b58 <menu+0x15a8>)
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <menu+0x15b8>)
 8002a24:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <menu+0x15a8>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <menu+0x1488>
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <menu+0x15a8>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d106      	bne.n	8002a46 <menu+0x1496>
				altLimit = 1;
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <menu+0x15bc>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <menu+0x15bc>)
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <menu+0x15b8>)
 8002a44:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002a46:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <menu+0x15c0>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <menu+0x15c4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d16c      	bne.n	8002b2e <menu+0x157e>
			lcd_print(2, 1, "Kac Saniye     ");
		} else {
			lcd_print(1, 1, "PLTFM DR OPN TMR");
			lcd_print(2, 1, "Seconds        ");
		}*/
		lcd_print(1, 1, tablaKapiAcSureText);
 8002a54:	4a48      	ldr	r2, [pc, #288]	; (8002b78 <menu+0x15c8>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f005 fb7b 	bl	8008154 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002a5e:	4a47      	ldr	r2, [pc, #284]	; (8002b7c <menu+0x15cc>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	2002      	movs	r0, #2
 8002a64:	f005 fb76 	bl	8008154 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002a68:	4b45      	ldr	r3, [pc, #276]	; (8002b80 <menu+0x15d0>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	4945      	ldr	r1, [pc, #276]	; (8002b84 <menu+0x15d4>)
 8002a70:	4618      	mov	r0, r3
 8002a72:	f009 ff1d 	bl	800c8b0 <itoa>
		lcd_print(2,16,snum);
 8002a76:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <menu+0x15d4>)
 8002a78:	2110      	movs	r1, #16
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f005 fb6a 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002a80:	2102      	movs	r1, #2
 8002a82:	4837      	ldr	r0, [pc, #220]	; (8002b60 <menu+0x15b0>)
 8002a84:	f006 fe8c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d119      	bne.n	8002ac2 <menu+0x1512>
 8002a8e:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <menu+0x15b4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <menu+0x1512>
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <menu+0x15d8>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10e      	bne.n	8002ac2 <menu+0x1512>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <menu+0x15d0>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <menu+0x15d0>)
 8002aae:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <menu+0x15d0>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d902      	bls.n	8002abe <menu+0x150e>
				kapiTablaAcSure = 0;
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <menu+0x15d0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002abe:	f001 fa7b 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	4826      	ldr	r0, [pc, #152]	; (8002b60 <menu+0x15b0>)
 8002ac6:	f006 fe6b 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d119      	bne.n	8002b04 <menu+0x1554>
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <menu+0x15b4>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	f083 0301 	eor.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <menu+0x1554>
 8002ade:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <menu+0x15d8>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <menu+0x1554>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <menu+0x15d0>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <menu+0x15d0>)
 8002af0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <menu+0x15d0>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <menu+0x1550>
		   		kapiTablaAcSure = 5;
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <menu+0x15d0>)
 8002afc:	2205      	movs	r2, #5
 8002afe:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002b00:	f001 fa5a 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b04:	2108      	movs	r1, #8
 8002b06:	4816      	ldr	r0, [pc, #88]	; (8002b60 <menu+0x15b0>)
 8002b08:	f006 fe4a 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10d      	bne.n	8002b2e <menu+0x157e>
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <menu+0x15b4>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <menu+0x157e>
			eepromData[13] = kapiTablaAcSure;
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <menu+0x15d0>)
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <menu+0x15b8>)
 8002b26:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <menu+0x15c0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <menu+0x15c4>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	f040 8086 	bne.w	8002c44 <menu+0x1694>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "YUKARI YAVAS LMT");
		} else {
			lcd_print(1, 1, "UPPR SLW DWN LMT");
		}*/
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <menu+0x15dc>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f005 fb09 	bl	8008154 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <menu+0x15e0>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d124      	bne.n	8002b94 <menu+0x15e4>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8002b4a:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <menu+0x15ac>)
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f005 fb00 	bl	8008154 <lcd_print>
 8002b54:	e027      	b.n	8002ba6 <menu+0x15f6>
 8002b56:	bf00      	nop
 8002b58:	20000c99 	.word	0x20000c99
 8002b5c:	20000f1c 	.word	0x20000f1c
 8002b60:	40010800 	.word	0x40010800
 8002b64:	20000cbb 	.word	0x20000cbb
 8002b68:	20000bb8 	.word	0x20000bb8
 8002b6c:	20000c92 	.word	0x20000c92
 8002b70:	20000cb8 	.word	0x20000cb8
 8002b74:	20000c8c 	.word	0x20000c8c
 8002b78:	2000108c 	.word	0x2000108c
 8002b7c:	2000100c 	.word	0x2000100c
 8002b80:	20000ca7 	.word	0x20000ca7
 8002b84:	20000c28 	.word	0x20000c28
 8002b88:	20000c97 	.word	0x20000c97
 8002b8c:	2000109c 	.word	0x2000109c
 8002b90:	20000c9a 	.word	0x20000c9a
		} else if(yukariYavasLimit == 1) {
 8002b94:	4b84      	ldr	r3, [pc, #528]	; (8002da8 <menu+0x17f8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d104      	bne.n	8002ba6 <menu+0x15f6>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8002b9c:	4a83      	ldr	r2, [pc, #524]	; (8002dac <menu+0x17fc>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f005 fad7 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4881      	ldr	r0, [pc, #516]	; (8002db0 <menu+0x1800>)
 8002baa:	f006 fdf9 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d115      	bne.n	8002be0 <menu+0x1630>
 8002bb4:	4b7f      	ldr	r3, [pc, #508]	; (8002db4 <menu+0x1804>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00e      	beq.n	8002be0 <menu+0x1630>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002bc2:	4b79      	ldr	r3, [pc, #484]	; (8002da8 <menu+0x17f8>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <menu+0x17f8>)
 8002bcc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <menu+0x17f8>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d902      	bls.n	8002bdc <menu+0x162c>
				yukariYavasLimit = 0;
 8002bd6:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <menu+0x17f8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bdc:	f001 f9ec 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be0:	2104      	movs	r1, #4
 8002be2:	4873      	ldr	r0, [pc, #460]	; (8002db0 <menu+0x1800>)
 8002be4:	f006 fddc 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d115      	bne.n	8002c1a <menu+0x166a>
 8002bee:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <menu+0x1804>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <menu+0x166a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <menu+0x17f8>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <menu+0x17f8>)
 8002c06:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002c08:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <menu+0x17f8>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <menu+0x1666>
		   		yukariYavasLimit = 1;
 8002c10:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <menu+0x17f8>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c16:	f001 f9cf 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	4864      	ldr	r0, [pc, #400]	; (8002db0 <menu+0x1800>)
 8002c1e:	f006 fdbf 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10d      	bne.n	8002c44 <menu+0x1694>
 8002c28:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <menu+0x1804>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <menu+0x1694>
			eepromData[14] = yukariYavasLimit;
 8002c36:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <menu+0x17f8>)
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <menu+0x1808>)
 8002c3c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	; (8002dbc <menu+0x180c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002c44:	4b5e      	ldr	r3, [pc, #376]	; (8002dc0 <menu+0x1810>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b11      	cmp	r3, #17
 8002c4a:	f040 808b 	bne.w	8002d64 <menu+0x17b4>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
		} else {
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
		}*/
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002c4e:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <menu+0x1814>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f005 fa7e 	bl	8008154 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002c58:	4b5b      	ldr	r3, [pc, #364]	; (8002dc8 <menu+0x1818>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d105      	bne.n	8002c6c <menu+0x16bc>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "Devirme aktif  ");
			} else {
				lcd_print(2, 1, "Tipping active ");
			}*/
			lcd_print(2, 1, devirmeAktifText);
 8002c60:	4a5a      	ldr	r2, [pc, #360]	; (8002dcc <menu+0x181c>)
 8002c62:	2101      	movs	r1, #1
 8002c64:	2002      	movs	r0, #2
 8002c66:	f005 fa75 	bl	8008154 <lcd_print>
 8002c6a:	e012      	b.n	8002c92 <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 1) {
 8002c6c:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <menu+0x1818>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <menu+0x16d0>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "Yuruyus aktif  ");
			} else {
				lcd_print(2, 1, "Drive active   ");
			}*/
			lcd_print(2, 1, yuruyusAktifText);
 8002c74:	4a56      	ldr	r2, [pc, #344]	; (8002dd0 <menu+0x1820>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f005 fa6b 	bl	8008154 <lcd_print>
 8002c7e:	e008      	b.n	8002c92 <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 0) {
 8002c80:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <menu+0x1818>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <menu+0x16e2>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <menu+0x1824>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f005 fa61 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c92:	2102      	movs	r1, #2
 8002c94:	4846      	ldr	r0, [pc, #280]	; (8002db0 <menu+0x1800>)
 8002c96:	f006 fd83 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d115      	bne.n	8002ccc <menu+0x171c>
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <menu+0x1804>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f083 0301 	eor.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <menu+0x171c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002cae:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <menu+0x1818>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <menu+0x1818>)
 8002cb8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <menu+0x1818>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d902      	bls.n	8002cc8 <menu+0x1718>
				devirmeYuruyusSecim = 0;
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <menu+0x1818>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cc8:	f001 f976 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ccc:	2104      	movs	r1, #4
 8002cce:	4838      	ldr	r0, [pc, #224]	; (8002db0 <menu+0x1800>)
 8002cd0:	f006 fd66 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d115      	bne.n	8002d06 <menu+0x1756>
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <menu+0x1804>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00e      	beq.n	8002d06 <menu+0x1756>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <menu+0x1818>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <menu+0x1818>)
 8002cf2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002cf4:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <menu+0x1818>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d902      	bls.n	8002d02 <menu+0x1752>
		   		devirmeYuruyusSecim = 2;
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <menu+0x1818>)
 8002cfe:	2202      	movs	r2, #2
 8002d00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d02:	f001 f959 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d06:	2108      	movs	r1, #8
 8002d08:	4829      	ldr	r0, [pc, #164]	; (8002db0 <menu+0x1800>)
 8002d0a:	f006 fd49 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d127      	bne.n	8002d64 <menu+0x17b4>
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <menu+0x1804>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	f083 0301 	eor.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d020      	beq.n	8002d64 <menu+0x17b4>
			eepromData[15] = devirmeYuruyusSecim;
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <menu+0x1818>)
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <menu+0x1808>)
 8002d28:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <menu+0x1818>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <menu+0x178a>
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <menu+0x1818>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d106      	bne.n	8002d48 <menu+0x1798>
				calismaSekli = 0;
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <menu+0x1828>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <menu+0x1828>)
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <menu+0x1808>)
 8002d46:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <menu+0x1818>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d106      	bne.n	8002d5e <menu+0x17ae>
				devirmeSilindirTipi = 1;
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <menu+0x182c>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <menu+0x182c>)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <menu+0x1808>)
 8002d5c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <menu+0x180c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <menu+0x1810>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	f040 8097 	bne.w	8002e9c <menu+0x18ec>
		if(devirmeYuruyusSecim == 2) {
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <menu+0x1818>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d105      	bne.n	8002d82 <menu+0x17d2>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "DEVRM YUKARI SVC");
			} else {
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
			}*/
			lcd_print(1, 1, devirmeYukariText);
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <menu+0x1830>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f005 f9ea 	bl	8008154 <lcd_print>
 8002d80:	e008      	b.n	8002d94 <menu+0x17e4>
		} else if(devirmeYuruyusSecim == 1) {
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <menu+0x1818>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d104      	bne.n	8002d94 <menu+0x17e4>
			/*if(dilSecim == 0){
				lcd_print(1, 1, "YURUYUS ILER SVC");
			} else {
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
			}*/
			lcd_print(1, 1, yuruyusIleriText);
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <menu+0x1834>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f005 f9e0 	bl	8008154 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <menu+0x1838>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d127      	bne.n	8002dec <menu+0x183c>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <menu+0x1824>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f005 f9d7 	bl	8008154 <lcd_print>
 8002da6:	e02a      	b.n	8002dfe <menu+0x184e>
 8002da8:	20000c9a 	.word	0x20000c9a
 8002dac:	20000f2c 	.word	0x20000f2c
 8002db0:	40010800 	.word	0x40010800
 8002db4:	20000cbb 	.word	0x20000cbb
 8002db8:	20000bb8 	.word	0x20000bb8
 8002dbc:	20000cb8 	.word	0x20000cb8
 8002dc0:	20000c8c 	.word	0x20000c8c
 8002dc4:	200010ac 	.word	0x200010ac
 8002dc8:	20000c9b 	.word	0x20000c9b
 8002dcc:	200010bc 	.word	0x200010bc
 8002dd0:	200010cc 	.word	0x200010cc
 8002dd4:	20000f1c 	.word	0x20000f1c
 8002dd8:	20000c8d 	.word	0x20000c8d
 8002ddc:	20000c9e 	.word	0x20000c9e
 8002de0:	200010dc 	.word	0x200010dc
 8002de4:	200010ec 	.word	0x200010ec
 8002de8:	20000c9c 	.word	0x20000c9c
		} else if(devirmeYukariIleriLimit == 1){
 8002dec:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <menu+0x1a24>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d104      	bne.n	8002dfe <menu+0x184e>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8002df4:	4a78      	ldr	r2, [pc, #480]	; (8002fd8 <menu+0x1a28>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	2002      	movs	r0, #2
 8002dfa:	f005 f9ab 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4876      	ldr	r0, [pc, #472]	; (8002fdc <menu+0x1a2c>)
 8002e02:	f006 fccd 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d115      	bne.n	8002e38 <menu+0x1888>
 8002e0c:	4b74      	ldr	r3, [pc, #464]	; (8002fe0 <menu+0x1a30>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f083 0301 	eor.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <menu+0x1888>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002e1a:	4b6e      	ldr	r3, [pc, #440]	; (8002fd4 <menu+0x1a24>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <menu+0x1a24>)
 8002e24:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002e26:	4b6b      	ldr	r3, [pc, #428]	; (8002fd4 <menu+0x1a24>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d902      	bls.n	8002e34 <menu+0x1884>
				devirmeYukariIleriLimit = 0;
 8002e2e:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <menu+0x1a24>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e34:	f001 f8c0 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e38:	2104      	movs	r1, #4
 8002e3a:	4868      	ldr	r0, [pc, #416]	; (8002fdc <menu+0x1a2c>)
 8002e3c:	f006 fcb0 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d115      	bne.n	8002e72 <menu+0x18c2>
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <menu+0x1a30>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <menu+0x18c2>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002e54:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <menu+0x1a24>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <menu+0x1a24>)
 8002e5e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002e60:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <menu+0x1a24>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <menu+0x18be>
		   		devirmeYukariIleriLimit = 1;
 8002e68:	4b5a      	ldr	r3, [pc, #360]	; (8002fd4 <menu+0x1a24>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e6e:	f001 f8a3 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e72:	2108      	movs	r1, #8
 8002e74:	4859      	ldr	r0, [pc, #356]	; (8002fdc <menu+0x1a2c>)
 8002e76:	f006 fc93 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <menu+0x18ec>
 8002e80:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <menu+0x1a30>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f083 0301 	eor.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <menu+0x18ec>
			eepromData[16] = devirmeYukariIleriLimit;
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <menu+0x1a24>)
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <menu+0x1a34>)
 8002e94:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <menu+0x1a38>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <menu+0x1a3c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b13      	cmp	r3, #19
 8002ea2:	d174      	bne.n	8002f8e <menu+0x19de>
		if(devirmeYuruyusSecim == 2) {
 8002ea4:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <menu+0x1a40>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d105      	bne.n	8002eb8 <menu+0x1908>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
			} else {
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
			}*/
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002eac:	4a51      	ldr	r2, [pc, #324]	; (8002ff4 <menu+0x1a44>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f005 f94f 	bl	8008154 <lcd_print>
 8002eb6:	e008      	b.n	8002eca <menu+0x191a>
		} else if(devirmeYuruyusSecim == 1) {
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <menu+0x1a40>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d104      	bne.n	8002eca <menu+0x191a>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "YURUYUS GERI SVC");
			} else {
				lcd_print(1, 1, "DRIVE BACK SWTCH");
			}*/
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	; (8002ff8 <menu+0x1a48>)
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f005 f945 	bl	8008154 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <menu+0x1a4c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <menu+0x192e>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8002ed2:	4a4b      	ldr	r2, [pc, #300]	; (8003000 <menu+0x1a50>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	2002      	movs	r0, #2
 8002ed8:	f005 f93c 	bl	8008154 <lcd_print>
 8002edc:	e008      	b.n	8002ef0 <menu+0x1940>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <menu+0x1a4c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d104      	bne.n	8002ef0 <menu+0x1940>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <menu+0x1a28>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2002      	movs	r0, #2
 8002eec:	f005 f932 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	483a      	ldr	r0, [pc, #232]	; (8002fdc <menu+0x1a2c>)
 8002ef4:	f006 fc54 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d115      	bne.n	8002f2a <menu+0x197a>
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <menu+0x1a30>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <menu+0x197a>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <menu+0x1a4c>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <menu+0x1a4c>)
 8002f16:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002f18:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <menu+0x1a4c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d902      	bls.n	8002f26 <menu+0x1976>
				devirmeAsagiGeriLimit = 0;
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <menu+0x1a4c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f26:	f001 f847 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	482b      	ldr	r0, [pc, #172]	; (8002fdc <menu+0x1a2c>)
 8002f2e:	f006 fc37 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d115      	bne.n	8002f64 <menu+0x19b4>
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <menu+0x1a30>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <menu+0x19b4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <menu+0x1a4c>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <menu+0x1a4c>)
 8002f50:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f52:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <menu+0x1a4c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <menu+0x19b0>
		   		devirmeAsagiGeriLimit = 1;
 8002f5a:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <menu+0x1a4c>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f60:	f001 f82a 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f64:	2108      	movs	r1, #8
 8002f66:	481d      	ldr	r0, [pc, #116]	; (8002fdc <menu+0x1a2c>)
 8002f68:	f006 fc1a 	bl	80097a0 <HAL_GPIO_ReadPin>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10d      	bne.n	8002f8e <menu+0x19de>
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <menu+0x1a30>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	f083 0301 	eor.w	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <menu+0x19de>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <menu+0x1a4c>)
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <menu+0x1a34>)
 8002f86:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <menu+0x1a38>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <menu+0x1a3c>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b14      	cmp	r3, #20
 8002f94:	f040 809e 	bne.w	80030d4 <menu+0x1b24>
		if(devirmeYuruyusSecim == 1) {
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <menu+0x1a40>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <menu+0x19fc>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "YURUYUS SECiLDi ");
			} else {
				lcd_print(1, 1, "DRIVE SELECTED  ");
			}*/
			lcd_print(1, 1, yuruyusSecildiText);
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <menu+0x1a54>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f005 f8d5 	bl	8008154 <lcd_print>
 8002faa:	e008      	b.n	8002fbe <menu+0x1a0e>
		} else if(devirmeYuruyusSecim == 2) {
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <menu+0x1a40>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d104      	bne.n	8002fbe <menu+0x1a0e>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "DEVIRME SLN TIPI");
			} else {
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
			}*/
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <menu+0x1a58>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f005 f8cb 	bl	8008154 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <menu+0x1a5c>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d126      	bne.n	8003014 <menu+0x1a64>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Tek tesir       ");
			} else {
				lcd_print(2, 1, "Single acting  ");
			}*/
			lcd_print(2, 1, tekTesirText);
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <menu+0x1a60>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2002      	movs	r0, #2
 8002fcc:	f005 f8c2 	bl	8008154 <lcd_print>
 8002fd0:	e029      	b.n	8003026 <menu+0x1a76>
 8002fd2:	bf00      	nop
 8002fd4:	20000c9c 	.word	0x20000c9c
 8002fd8:	20000f2c 	.word	0x20000f2c
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	20000cbb 	.word	0x20000cbb
 8002fe4:	20000bb8 	.word	0x20000bb8
 8002fe8:	20000cb8 	.word	0x20000cb8
 8002fec:	20000c8c 	.word	0x20000c8c
 8002ff0:	20000c9b 	.word	0x20000c9b
 8002ff4:	200010fc 	.word	0x200010fc
 8002ff8:	2000110c 	.word	0x2000110c
 8002ffc:	20000c9d 	.word	0x20000c9d
 8003000:	20000f1c 	.word	0x20000f1c
 8003004:	2000111c 	.word	0x2000111c
 8003008:	2000112c 	.word	0x2000112c
 800300c:	20000c9e 	.word	0x20000c9e
 8003010:	2000113c 	.word	0x2000113c
		} else if(devirmeSilindirTipi == 1) {
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <menu+0x1b4c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d104      	bne.n	8003026 <menu+0x1a76>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Cift tesir      ");
			} else {
				lcd_print(2, 1, "Double acting  ");
			}*/
			lcd_print(2, 1, ciftTesirText);
 800301c:	4a38      	ldr	r2, [pc, #224]	; (8003100 <menu+0x1b50>)
 800301e:	2101      	movs	r1, #1
 8003020:	2002      	movs	r0, #2
 8003022:	f005 f897 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003026:	2102      	movs	r1, #2
 8003028:	4836      	ldr	r0, [pc, #216]	; (8003104 <menu+0x1b54>)
 800302a:	f006 fbb9 	bl	80097a0 <HAL_GPIO_ReadPin>
 800302e:	4603      	mov	r3, r0
 8003030:	2b01      	cmp	r3, #1
 8003032:	d119      	bne.n	8003068 <menu+0x1ab8>
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <menu+0x1b58>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <menu+0x1ab8>
 8003042:	4b32      	ldr	r3, [pc, #200]	; (800310c <menu+0x1b5c>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d10e      	bne.n	8003068 <menu+0x1ab8>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <menu+0x1b4c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <menu+0x1b4c>)
 8003054:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <menu+0x1b4c>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d902      	bls.n	8003064 <menu+0x1ab4>
				devirmeSilindirTipi = 0;
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <menu+0x1b4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003064:	f000 ffa8 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003068:	2104      	movs	r1, #4
 800306a:	4826      	ldr	r0, [pc, #152]	; (8003104 <menu+0x1b54>)
 800306c:	f006 fb98 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d119      	bne.n	80030aa <menu+0x1afa>
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <menu+0x1b58>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f083 0301 	eor.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d012      	beq.n	80030aa <menu+0x1afa>
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <menu+0x1b5c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d10e      	bne.n	80030aa <menu+0x1afa>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <menu+0x1b4c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	3b01      	subs	r3, #1
 8003092:	b2da      	uxtb	r2, r3
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <menu+0x1b4c>)
 8003096:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <menu+0x1b4c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <menu+0x1af6>
		   		devirmeSilindirTipi = 1;
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <menu+0x1b4c>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030a6:	f000 ff87 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030aa:	2108      	movs	r1, #8
 80030ac:	4815      	ldr	r0, [pc, #84]	; (8003104 <menu+0x1b54>)
 80030ae:	f006 fb77 	bl	80097a0 <HAL_GPIO_ReadPin>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <menu+0x1b24>
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <menu+0x1b58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	f083 0301 	eor.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <menu+0x1b24>
			eepromData[18] = devirmeSilindirTipi;
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <menu+0x1b4c>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <menu+0x1b60>)
 80030cc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <menu+0x1b64>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <menu+0x1b68>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b15      	cmp	r3, #21
 80030da:	f040 8088 	bne.w	80031ee <menu+0x1c3e>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "PLATFRM SLN TIPI");
		} else {
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
		}*/
		lcd_print(1, 1, platformSilindirTipiText);
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <menu+0x1b6c>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	2001      	movs	r0, #1
 80030e4:	f005 f836 	bl	8008154 <lcd_print>

		if(platformSilindirTipi == 0) {
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <menu+0x1b70>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11b      	bne.n	8003128 <menu+0x1b78>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Tek tesir       ");
			} else {
				lcd_print(2, 1, "Single acting  ");
			}*/
			lcd_print(2, 1, tekTesirText);
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <menu+0x1b74>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	2002      	movs	r0, #2
 80030f6:	f005 f82d 	bl	8008154 <lcd_print>
 80030fa:	e01e      	b.n	800313a <menu+0x1b8a>
 80030fc:	20000c9e 	.word	0x20000c9e
 8003100:	2000114c 	.word	0x2000114c
 8003104:	40010800 	.word	0x40010800
 8003108:	20000cbb 	.word	0x20000cbb
 800310c:	20000c9b 	.word	0x20000c9b
 8003110:	20000bb8 	.word	0x20000bb8
 8003114:	20000cb8 	.word	0x20000cb8
 8003118:	20000c8c 	.word	0x20000c8c
 800311c:	2000115c 	.word	0x2000115c
 8003120:	20000c9f 	.word	0x20000c9f
 8003124:	2000113c 	.word	0x2000113c
		} else if(platformSilindirTipi == 1) {
 8003128:	4ba1      	ldr	r3, [pc, #644]	; (80033b0 <menu+0x1e00>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d104      	bne.n	800313a <menu+0x1b8a>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Cift tesir      ");
			} else {
				lcd_print(2, 1, "Double acting  ");
			}*/
			lcd_print(2, 1, ciftTesirText);
 8003130:	4aa0      	ldr	r2, [pc, #640]	; (80033b4 <menu+0x1e04>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f005 f80d 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800313a:	2102      	movs	r1, #2
 800313c:	489e      	ldr	r0, [pc, #632]	; (80033b8 <menu+0x1e08>)
 800313e:	f006 fb2f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d115      	bne.n	8003174 <menu+0x1bc4>
 8003148:	4b9c      	ldr	r3, [pc, #624]	; (80033bc <menu+0x1e0c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	f083 0301 	eor.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <menu+0x1bc4>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003156:	4b96      	ldr	r3, [pc, #600]	; (80033b0 <menu+0x1e00>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b94      	ldr	r3, [pc, #592]	; (80033b0 <menu+0x1e00>)
 8003160:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003162:	4b93      	ldr	r3, [pc, #588]	; (80033b0 <menu+0x1e00>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d902      	bls.n	8003170 <menu+0x1bc0>
				platformSilindirTipi = 0;
 800316a:	4b91      	ldr	r3, [pc, #580]	; (80033b0 <menu+0x1e00>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003170:	f000 ff22 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003174:	2104      	movs	r1, #4
 8003176:	4890      	ldr	r0, [pc, #576]	; (80033b8 <menu+0x1e08>)
 8003178:	f006 fb12 	bl	80097a0 <HAL_GPIO_ReadPin>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d115      	bne.n	80031ae <menu+0x1bfe>
 8003182:	4b8e      	ldr	r3, [pc, #568]	; (80033bc <menu+0x1e0c>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <menu+0x1bfe>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003190:	4b87      	ldr	r3, [pc, #540]	; (80033b0 <menu+0x1e00>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3b01      	subs	r3, #1
 8003196:	b2da      	uxtb	r2, r3
 8003198:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <menu+0x1e00>)
 800319a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <menu+0x1e00>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <menu+0x1bfa>
		   		platformSilindirTipi = 1;
 80031a4:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <menu+0x1e00>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031aa:	f000 ff05 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ae:	2108      	movs	r1, #8
 80031b0:	4881      	ldr	r0, [pc, #516]	; (80033b8 <menu+0x1e08>)
 80031b2:	f006 faf5 	bl	80097a0 <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d118      	bne.n	80031ee <menu+0x1c3e>
 80031bc:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <menu+0x1e0c>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <menu+0x1c3e>
			eepromData[19] = platformSilindirTipi;
 80031ca:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <menu+0x1e00>)
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	4b7c      	ldr	r3, [pc, #496]	; (80033c0 <menu+0x1e10>)
 80031d0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80031d2:	4b77      	ldr	r3, [pc, #476]	; (80033b0 <menu+0x1e00>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d106      	bne.n	80031e8 <menu+0x1c38>
				altLimit = 1;
 80031da:	4b7a      	ldr	r3, [pc, #488]	; (80033c4 <menu+0x1e14>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80031e0:	4b78      	ldr	r3, [pc, #480]	; (80033c4 <menu+0x1e14>)
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <menu+0x1e10>)
 80031e6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80031e8:	4b77      	ldr	r3, [pc, #476]	; (80033c8 <menu+0x1e18>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80031ee:	4b77      	ldr	r3, [pc, #476]	; (80033cc <menu+0x1e1c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b16      	cmp	r3, #22
 80031f4:	d164      	bne.n	80032c0 <menu+0x1d10>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "YUKARI VALF SURE");
		} else {
			lcd_print(1, 1, "UP VALVE TIMER  ");
		}*/
		lcd_print(1, 1, yukariValfSureText);
 80031f6:	4a76      	ldr	r2, [pc, #472]	; (80033d0 <menu+0x1e20>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	2001      	movs	r0, #1
 80031fc:	f004 ffaa 	bl	8008154 <lcd_print>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 8003200:	4a74      	ldr	r2, [pc, #464]	; (80033d4 <menu+0x1e24>)
 8003202:	2101      	movs	r1, #1
 8003204:	2002      	movs	r0, #2
 8003206:	f004 ffa5 	bl	8008154 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <menu+0x1e28>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	220a      	movs	r2, #10
 8003210:	4972      	ldr	r1, [pc, #456]	; (80033dc <menu+0x1e2c>)
 8003212:	4618      	mov	r0, r3
 8003214:	f009 fb4c 	bl	800c8b0 <itoa>
		lcd_print(2,16,snum);
 8003218:	4a70      	ldr	r2, [pc, #448]	; (80033dc <menu+0x1e2c>)
 800321a:	2110      	movs	r1, #16
 800321c:	2002      	movs	r0, #2
 800321e:	f004 ff99 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003222:	2102      	movs	r1, #2
 8003224:	4864      	ldr	r0, [pc, #400]	; (80033b8 <menu+0x1e08>)
 8003226:	f006 fabb 	bl	80097a0 <HAL_GPIO_ReadPin>
 800322a:	4603      	mov	r3, r0
 800322c:	2b01      	cmp	r3, #1
 800322e:	d115      	bne.n	800325c <menu+0x1cac>
 8003230:	4b62      	ldr	r3, [pc, #392]	; (80033bc <menu+0x1e0c>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	f083 0301 	eor.w	r3, r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00e      	beq.n	800325c <menu+0x1cac>
			yukariValfTmr = yukariValfTmr + 1;
 800323e:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <menu+0x1e28>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <menu+0x1e28>)
 8003248:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <menu+0x1e28>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b05      	cmp	r3, #5
 8003250:	d902      	bls.n	8003258 <menu+0x1ca8>
				yukariValfTmr = 0;
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <menu+0x1e28>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003258:	f000 feae 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800325c:	2104      	movs	r1, #4
 800325e:	4856      	ldr	r0, [pc, #344]	; (80033b8 <menu+0x1e08>)
 8003260:	f006 fa9e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d115      	bne.n	8003296 <menu+0x1ce6>
 800326a:	4b54      	ldr	r3, [pc, #336]	; (80033bc <menu+0x1e0c>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <menu+0x1ce6>
			yukariValfTmr = yukariValfTmr - 1;
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <menu+0x1e28>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <menu+0x1e28>)
 8003282:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003284:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <menu+0x1e28>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d902      	bls.n	8003292 <menu+0x1ce2>
		   		yukariValfTmr = 5;
 800328c:	4b52      	ldr	r3, [pc, #328]	; (80033d8 <menu+0x1e28>)
 800328e:	2205      	movs	r2, #5
 8003290:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003292:	f000 fe91 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003296:	2108      	movs	r1, #8
 8003298:	4847      	ldr	r0, [pc, #284]	; (80033b8 <menu+0x1e08>)
 800329a:	f006 fa81 	bl	80097a0 <HAL_GPIO_ReadPin>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10d      	bne.n	80032c0 <menu+0x1d10>
 80032a4:	4b45      	ldr	r3, [pc, #276]	; (80033bc <menu+0x1e0c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f083 0301 	eor.w	r3, r3, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <menu+0x1d10>
			eepromData[20] = yukariValfTmr;
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <menu+0x1e28>)
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <menu+0x1e10>)
 80032b8:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80032ba:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <menu+0x1e18>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <menu+0x1e1c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b17      	cmp	r3, #23
 80032c6:	d164      	bne.n	8003392 <menu+0x1de2>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "ASAGI VALF SURE ");
		} else {
			lcd_print(1, 1, "DOWN VALVE TIMER");
		}*/
		lcd_print(1, 1, asagiValfSureText);
 80032c8:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <menu+0x1e30>)
 80032ca:	2101      	movs	r1, #1
 80032cc:	2001      	movs	r0, #1
 80032ce:	f004 ff41 	bl	8008154 <lcd_print>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 80032d2:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <menu+0x1e24>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2002      	movs	r0, #2
 80032d8:	f004 ff3c 	bl	8008154 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80032dc:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <menu+0x1e34>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	220a      	movs	r2, #10
 80032e2:	493e      	ldr	r1, [pc, #248]	; (80033dc <menu+0x1e2c>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f009 fae3 	bl	800c8b0 <itoa>
		lcd_print(2,16,snum);
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <menu+0x1e2c>)
 80032ec:	2110      	movs	r1, #16
 80032ee:	2002      	movs	r0, #2
 80032f0:	f004 ff30 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032f4:	2102      	movs	r1, #2
 80032f6:	4830      	ldr	r0, [pc, #192]	; (80033b8 <menu+0x1e08>)
 80032f8:	f006 fa52 	bl	80097a0 <HAL_GPIO_ReadPin>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d115      	bne.n	800332e <menu+0x1d7e>
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <menu+0x1e0c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	f083 0301 	eor.w	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <menu+0x1d7e>
			asagiValfTmr = asagiValfTmr + 1;
 8003310:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <menu+0x1e34>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <menu+0x1e34>)
 800331a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <menu+0x1e34>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d902      	bls.n	800332a <menu+0x1d7a>
				asagiValfTmr = 0;
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <menu+0x1e34>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800332a:	f000 fe45 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800332e:	2104      	movs	r1, #4
 8003330:	4821      	ldr	r0, [pc, #132]	; (80033b8 <menu+0x1e08>)
 8003332:	f006 fa35 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003336:	4603      	mov	r3, r0
 8003338:	2b01      	cmp	r3, #1
 800333a:	d115      	bne.n	8003368 <menu+0x1db8>
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <menu+0x1e0c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <menu+0x1db8>
			asagiValfTmr = asagiValfTmr - 1;
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <menu+0x1e34>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <menu+0x1e34>)
 8003354:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003356:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <menu+0x1e34>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d902      	bls.n	8003364 <menu+0x1db4>
		   		asagiValfTmr = 5;
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <menu+0x1e34>)
 8003360:	2205      	movs	r2, #5
 8003362:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003364:	f000 fe28 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003368:	2108      	movs	r1, #8
 800336a:	4813      	ldr	r0, [pc, #76]	; (80033b8 <menu+0x1e08>)
 800336c:	f006 fa18 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10d      	bne.n	8003392 <menu+0x1de2>
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <menu+0x1e0c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	f083 0301 	eor.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <menu+0x1de2>
			eepromData[21] = asagiValfTmr;
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <menu+0x1e34>)
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <menu+0x1e10>)
 800338a:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <menu+0x1e18>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <menu+0x1e1c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b18      	cmp	r3, #24
 8003398:	f040 8093 	bne.w	80034c2 <menu+0x1f12>
		if(devirmeYuruyusSecim == 2) {
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <menu+0x1e38>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d125      	bne.n	80033f0 <menu+0x1e40>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "DVRM YKR VLF SN ");
			} else {
				lcd_print(1, 1, "TIPPD UP VLV TMR");
			}*/
			lcd_print(1, 1, devirmeYukariValfSureText);
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <menu+0x1e3c>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2001      	movs	r0, #1
 80033aa:	f004 fed3 	bl	8008154 <lcd_print>
 80033ae:	e028      	b.n	8003402 <menu+0x1e52>
 80033b0:	20000c9f 	.word	0x20000c9f
 80033b4:	2000114c 	.word	0x2000114c
 80033b8:	40010800 	.word	0x40010800
 80033bc:	20000cbb 	.word	0x20000cbb
 80033c0:	20000bb8 	.word	0x20000bb8
 80033c4:	20000c92 	.word	0x20000c92
 80033c8:	20000cb8 	.word	0x20000cb8
 80033cc:	20000c8c 	.word	0x20000c8c
 80033d0:	2000116c 	.word	0x2000116c
 80033d4:	2000100c 	.word	0x2000100c
 80033d8:	20000ca0 	.word	0x20000ca0
 80033dc:	20000c28 	.word	0x20000c28
 80033e0:	2000117c 	.word	0x2000117c
 80033e4:	20000ca1 	.word	0x20000ca1
 80033e8:	20000c9b 	.word	0x20000c9b
 80033ec:	2000118c 	.word	0x2000118c
		} else if(devirmeYuruyusSecim == 1) {
 80033f0:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <menu+0x2074>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d104      	bne.n	8003402 <menu+0x1e52>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "iLERi VALF SURE ");
			} else {
				lcd_print(1, 1, "FRWD DRV VLV TMR");
			}*/
			lcd_print(1, 1, ileriValfSureText);
 80033f8:	4a8b      	ldr	r2, [pc, #556]	; (8003628 <menu+0x2078>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2001      	movs	r0, #1
 80033fe:	f004 fea9 	bl	8008154 <lcd_print>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 8003402:	4a8a      	ldr	r2, [pc, #552]	; (800362c <menu+0x207c>)
 8003404:	2101      	movs	r1, #1
 8003406:	2002      	movs	r0, #2
 8003408:	f004 fea4 	bl	8008154 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800340c:	4b88      	ldr	r3, [pc, #544]	; (8003630 <menu+0x2080>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	220a      	movs	r2, #10
 8003412:	4988      	ldr	r1, [pc, #544]	; (8003634 <menu+0x2084>)
 8003414:	4618      	mov	r0, r3
 8003416:	f009 fa4b 	bl	800c8b0 <itoa>
		lcd_print(2, 16, snum);
 800341a:	4a86      	ldr	r2, [pc, #536]	; (8003634 <menu+0x2084>)
 800341c:	2110      	movs	r1, #16
 800341e:	2002      	movs	r0, #2
 8003420:	f004 fe98 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003424:	2102      	movs	r1, #2
 8003426:	4884      	ldr	r0, [pc, #528]	; (8003638 <menu+0x2088>)
 8003428:	f006 f9ba 	bl	80097a0 <HAL_GPIO_ReadPin>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d115      	bne.n	800345e <menu+0x1eae>
 8003432:	4b82      	ldr	r3, [pc, #520]	; (800363c <menu+0x208c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <menu+0x1eae>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003440:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <menu+0x2080>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4b79      	ldr	r3, [pc, #484]	; (8003630 <menu+0x2080>)
 800344a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800344c:	4b78      	ldr	r3, [pc, #480]	; (8003630 <menu+0x2080>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d902      	bls.n	800345a <menu+0x1eaa>
				devirmeYukariIleriTmr = 0;
 8003454:	4b76      	ldr	r3, [pc, #472]	; (8003630 <menu+0x2080>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800345a:	f000 fdad 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800345e:	2104      	movs	r1, #4
 8003460:	4875      	ldr	r0, [pc, #468]	; (8003638 <menu+0x2088>)
 8003462:	f006 f99d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d115      	bne.n	8003498 <menu+0x1ee8>
 800346c:	4b73      	ldr	r3, [pc, #460]	; (800363c <menu+0x208c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <menu+0x1ee8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800347a:	4b6d      	ldr	r3, [pc, #436]	; (8003630 <menu+0x2080>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	3b01      	subs	r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b6b      	ldr	r3, [pc, #428]	; (8003630 <menu+0x2080>)
 8003484:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003486:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <menu+0x2080>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <menu+0x1ee4>
		   		devirmeYukariIleriTmr = 5;
 800348e:	4b68      	ldr	r3, [pc, #416]	; (8003630 <menu+0x2080>)
 8003490:	2205      	movs	r2, #5
 8003492:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003494:	f000 fd90 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003498:	2108      	movs	r1, #8
 800349a:	4867      	ldr	r0, [pc, #412]	; (8003638 <menu+0x2088>)
 800349c:	f006 f980 	bl	80097a0 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10d      	bne.n	80034c2 <menu+0x1f12>
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <menu+0x208c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <menu+0x1f12>
			eepromData[22] = devirmeYukariIleriTmr;
 80034b4:	4b5e      	ldr	r3, [pc, #376]	; (8003630 <menu+0x2080>)
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <menu+0x2090>)
 80034ba:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80034bc:	4b61      	ldr	r3, [pc, #388]	; (8003644 <menu+0x2094>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <menu+0x2098>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b19      	cmp	r3, #25
 80034c8:	d172      	bne.n	80035b0 <menu+0x2000>
		if(devirmeYuruyusSecim == 2) {
 80034ca:	4b56      	ldr	r3, [pc, #344]	; (8003624 <menu+0x2074>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d105      	bne.n	80034de <menu+0x1f2e>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "DVRM ASG VALF SN");
			} else {
				lcd_print(1, 1, "TPPD DWN VLV TMR");
			}*/
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80034d2:	4a5e      	ldr	r2, [pc, #376]	; (800364c <menu+0x209c>)
 80034d4:	2101      	movs	r1, #1
 80034d6:	2001      	movs	r0, #1
 80034d8:	f004 fe3c 	bl	8008154 <lcd_print>
 80034dc:	e008      	b.n	80034f0 <menu+0x1f40>
		} else if(devirmeYuruyusSecim == 1) {
 80034de:	4b51      	ldr	r3, [pc, #324]	; (8003624 <menu+0x2074>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d104      	bne.n	80034f0 <menu+0x1f40>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "GERi VALF SURE  ");
			} else {
				lcd_print(1, 1, "REVERSE VLV TMR ");
			}*/
			lcd_print(1, 1, geriValfSureText);
 80034e6:	4a5a      	ldr	r2, [pc, #360]	; (8003650 <menu+0x20a0>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	2001      	movs	r0, #1
 80034ec:	f004 fe32 	bl	8008154 <lcd_print>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 80034f0:	4a4e      	ldr	r2, [pc, #312]	; (800362c <menu+0x207c>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2002      	movs	r0, #2
 80034f6:	f004 fe2d 	bl	8008154 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <menu+0x20a4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	220a      	movs	r2, #10
 8003500:	494c      	ldr	r1, [pc, #304]	; (8003634 <menu+0x2084>)
 8003502:	4618      	mov	r0, r3
 8003504:	f009 f9d4 	bl	800c8b0 <itoa>
		lcd_print(2,16,snum);
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <menu+0x2084>)
 800350a:	2110      	movs	r1, #16
 800350c:	2002      	movs	r0, #2
 800350e:	f004 fe21 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003512:	2102      	movs	r1, #2
 8003514:	4848      	ldr	r0, [pc, #288]	; (8003638 <menu+0x2088>)
 8003516:	f006 f943 	bl	80097a0 <HAL_GPIO_ReadPin>
 800351a:	4603      	mov	r3, r0
 800351c:	2b01      	cmp	r3, #1
 800351e:	d115      	bne.n	800354c <menu+0x1f9c>
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <menu+0x208c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00e      	beq.n	800354c <menu+0x1f9c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800352e:	4b49      	ldr	r3, [pc, #292]	; (8003654 <menu+0x20a4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <menu+0x20a4>)
 8003538:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <menu+0x20a4>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d902      	bls.n	8003548 <menu+0x1f98>
				devirmeAsagiGeriTmr = 0;
 8003542:	4b44      	ldr	r3, [pc, #272]	; (8003654 <menu+0x20a4>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003548:	f000 fd36 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800354c:	2104      	movs	r1, #4
 800354e:	483a      	ldr	r0, [pc, #232]	; (8003638 <menu+0x2088>)
 8003550:	f006 f926 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003554:	4603      	mov	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d115      	bne.n	8003586 <menu+0x1fd6>
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <menu+0x208c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00e      	beq.n	8003586 <menu+0x1fd6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003568:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <menu+0x20a4>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <menu+0x20a4>)
 8003572:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <menu+0x20a4>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b06      	cmp	r3, #6
 800357a:	d902      	bls.n	8003582 <menu+0x1fd2>
		   		devirmeAsagiGeriTmr = 5;
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <menu+0x20a4>)
 800357e:	2205      	movs	r2, #5
 8003580:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003582:	f000 fd19 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003586:	2108      	movs	r1, #8
 8003588:	482b      	ldr	r0, [pc, #172]	; (8003638 <menu+0x2088>)
 800358a:	f006 f909 	bl	80097a0 <HAL_GPIO_ReadPin>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10d      	bne.n	80035b0 <menu+0x2000>
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <menu+0x208c>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d006      	beq.n	80035b0 <menu+0x2000>
			eepromData[23] = devirmeAsagiGeriTmr;
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <menu+0x20a4>)
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <menu+0x2090>)
 80035a8:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <menu+0x2094>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <menu+0x2098>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b1a      	cmp	r3, #26
 80035b6:	f040 80b7 	bne.w	8003728 <menu+0x2178>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "CALiSMA SURESi  ");
		} else {
			lcd_print(1, 1, "WORKING TIME    ");
		}*/
		lcd_print(1, 1, calismaSuresiText);
 80035ba:	4a27      	ldr	r2, [pc, #156]	; (8003658 <menu+0x20a8>)
 80035bc:	2101      	movs	r1, #1
 80035be:	2001      	movs	r0, #1
 80035c0:	f004 fdc8 	bl	8008154 <lcd_print>

		if(makineCalismaTmr > 99) {
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <menu+0x20ac>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b63      	cmp	r3, #99	; 0x63
 80035ca:	d911      	bls.n	80035f0 <menu+0x2040>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <menu+0x207c>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	2002      	movs	r0, #2
 80035d2:	f004 fdbf 	bl	8008154 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <menu+0x20ac>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	220a      	movs	r2, #10
 80035dc:	4915      	ldr	r1, [pc, #84]	; (8003634 <menu+0x2084>)
 80035de:	4618      	mov	r0, r3
 80035e0:	f009 f966 	bl	800c8b0 <itoa>
			lcd_print(2,14,snum);
 80035e4:	4a13      	ldr	r2, [pc, #76]	; (8003634 <menu+0x2084>)
 80035e6:	210e      	movs	r1, #14
 80035e8:	2002      	movs	r0, #2
 80035ea:	f004 fdb3 	bl	8008154 <lcd_print>
 80035ee:	e04c      	b.n	800368a <menu+0x20da>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <menu+0x20ac>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	d933      	bls.n	8003660 <menu+0x20b0>
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <menu+0x20ac>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b63      	cmp	r3, #99	; 0x63
 80035fe:	d82f      	bhi.n	8003660 <menu+0x20b0>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 8003600:	4a0a      	ldr	r2, [pc, #40]	; (800362c <menu+0x207c>)
 8003602:	2101      	movs	r1, #1
 8003604:	2002      	movs	r0, #2
 8003606:	f004 fda5 	bl	8008154 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <menu+0x20ac>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	220a      	movs	r2, #10
 8003610:	4908      	ldr	r1, [pc, #32]	; (8003634 <menu+0x2084>)
 8003612:	4618      	mov	r0, r3
 8003614:	f009 f94c 	bl	800c8b0 <itoa>
			lcd_print(2, 15, snum);
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <menu+0x2084>)
 800361a:	210f      	movs	r1, #15
 800361c:	2002      	movs	r0, #2
 800361e:	f004 fd99 	bl	8008154 <lcd_print>
 8003622:	e032      	b.n	800368a <menu+0x20da>
 8003624:	20000c9b 	.word	0x20000c9b
 8003628:	2000119c 	.word	0x2000119c
 800362c:	2000100c 	.word	0x2000100c
 8003630:	20000ca2 	.word	0x20000ca2
 8003634:	20000c28 	.word	0x20000c28
 8003638:	40010800 	.word	0x40010800
 800363c:	20000cbb 	.word	0x20000cbb
 8003640:	20000bb8 	.word	0x20000bb8
 8003644:	20000cb8 	.word	0x20000cb8
 8003648:	20000c8c 	.word	0x20000c8c
 800364c:	200011ac 	.word	0x200011ac
 8003650:	200011bc 	.word	0x200011bc
 8003654:	20000ca3 	.word	0x20000ca3
 8003658:	200011cc 	.word	0x200011cc
 800365c:	20000ca4 	.word	0x20000ca4
		} else if(makineCalismaTmr <=  9) {
 8003660:	4b72      	ldr	r3, [pc, #456]	; (800382c <menu+0x227c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b09      	cmp	r3, #9
 8003666:	d810      	bhi.n	800368a <menu+0x20da>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Kac Saniye     ");
			} else {
				lcd_print(2, 1, "Second         ");
			}*/
			lcd_print(2, 1, kacSaniyeText);
 8003668:	4a71      	ldr	r2, [pc, #452]	; (8003830 <menu+0x2280>)
 800366a:	2101      	movs	r1, #1
 800366c:	2002      	movs	r0, #2
 800366e:	f004 fd71 	bl	8008154 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003672:	4b6e      	ldr	r3, [pc, #440]	; (800382c <menu+0x227c>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	220a      	movs	r2, #10
 8003678:	496e      	ldr	r1, [pc, #440]	; (8003834 <menu+0x2284>)
 800367a:	4618      	mov	r0, r3
 800367c:	f009 f918 	bl	800c8b0 <itoa>
			lcd_print(2, 16, snum);
 8003680:	4a6c      	ldr	r2, [pc, #432]	; (8003834 <menu+0x2284>)
 8003682:	2110      	movs	r1, #16
 8003684:	2002      	movs	r0, #2
 8003686:	f004 fd65 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800368a:	2102      	movs	r1, #2
 800368c:	486a      	ldr	r0, [pc, #424]	; (8003838 <menu+0x2288>)
 800368e:	f006 f887 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d115      	bne.n	80036c4 <menu+0x2114>
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <menu+0x228c>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f083 0301 	eor.w	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <menu+0x2114>
			makineCalismaTmr = makineCalismaTmr + 1;
 80036a6:	4b61      	ldr	r3, [pc, #388]	; (800382c <menu+0x227c>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b5f      	ldr	r3, [pc, #380]	; (800382c <menu+0x227c>)
 80036b0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80036b2:	4b5e      	ldr	r3, [pc, #376]	; (800382c <menu+0x227c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2bb4      	cmp	r3, #180	; 0xb4
 80036b8:	d902      	bls.n	80036c0 <menu+0x2110>
				makineCalismaTmr = 0;
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <menu+0x227c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036c0:	f000 fc7a 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036c4:	2104      	movs	r1, #4
 80036c6:	485c      	ldr	r0, [pc, #368]	; (8003838 <menu+0x2288>)
 80036c8:	f006 f86a 	bl	80097a0 <HAL_GPIO_ReadPin>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d115      	bne.n	80036fe <menu+0x214e>
 80036d2:	4b5a      	ldr	r3, [pc, #360]	; (800383c <menu+0x228c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	f083 0301 	eor.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <menu+0x214e>
			makineCalismaTmr = makineCalismaTmr - 1;
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <menu+0x227c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <menu+0x227c>)
 80036ea:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <menu+0x227c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2bb5      	cmp	r3, #181	; 0xb5
 80036f2:	d902      	bls.n	80036fa <menu+0x214a>
		   		makineCalismaTmr = 180;
 80036f4:	4b4d      	ldr	r3, [pc, #308]	; (800382c <menu+0x227c>)
 80036f6:	22b4      	movs	r2, #180	; 0xb4
 80036f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036fa:	f000 fc5d 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036fe:	2108      	movs	r1, #8
 8003700:	484d      	ldr	r0, [pc, #308]	; (8003838 <menu+0x2288>)
 8003702:	f006 f84d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10d      	bne.n	8003728 <menu+0x2178>
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <menu+0x228c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <menu+0x2178>
			eepromData[24] = makineCalismaTmr;
 800371a:	4b44      	ldr	r3, [pc, #272]	; (800382c <menu+0x227c>)
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	4b48      	ldr	r3, [pc, #288]	; (8003840 <menu+0x2290>)
 8003720:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <menu+0x2294>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003728:	4b47      	ldr	r3, [pc, #284]	; (8003848 <menu+0x2298>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b1b      	cmp	r3, #27
 800372e:	d166      	bne.n	80037fe <menu+0x224e>
		//lcd_print(1, 1, "BUZZER          ");
		lcd_print(1, 1, buzzerTextGN);
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <menu+0x229c>)
 8003732:	2101      	movs	r1, #1
 8003734:	2001      	movs	r0, #1
 8003736:	f004 fd0d 	bl	8008154 <lcd_print>

		if(buzzer == 0) {
 800373a:	4b45      	ldr	r3, [pc, #276]	; (8003850 <menu+0x22a0>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d105      	bne.n	800374e <menu+0x219e>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8003742:	4a44      	ldr	r2, [pc, #272]	; (8003854 <menu+0x22a4>)
 8003744:	2101      	movs	r1, #1
 8003746:	2002      	movs	r0, #2
 8003748:	f004 fd04 	bl	8008154 <lcd_print>
 800374c:	e008      	b.n	8003760 <menu+0x21b0>
		} else if(buzzer == 1) {
 800374e:	4b40      	ldr	r3, [pc, #256]	; (8003850 <menu+0x22a0>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d104      	bne.n	8003760 <menu+0x21b0>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8003756:	4a40      	ldr	r2, [pc, #256]	; (8003858 <menu+0x22a8>)
 8003758:	2101      	movs	r1, #1
 800375a:	2002      	movs	r0, #2
 800375c:	f004 fcfa 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003760:	2102      	movs	r1, #2
 8003762:	4835      	ldr	r0, [pc, #212]	; (8003838 <menu+0x2288>)
 8003764:	f006 f81c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d115      	bne.n	800379a <menu+0x21ea>
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <menu+0x228c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <menu+0x21ea>
			buzzer = buzzer + 1;
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <menu+0x22a0>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b32      	ldr	r3, [pc, #200]	; (8003850 <menu+0x22a0>)
 8003786:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003788:	4b31      	ldr	r3, [pc, #196]	; (8003850 <menu+0x22a0>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d902      	bls.n	8003796 <menu+0x21e6>
				buzzer = 0;
 8003790:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <menu+0x22a0>)
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003796:	f000 fc0f 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800379a:	2104      	movs	r1, #4
 800379c:	4826      	ldr	r0, [pc, #152]	; (8003838 <menu+0x2288>)
 800379e:	f005 ffff 	bl	80097a0 <HAL_GPIO_ReadPin>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d115      	bne.n	80037d4 <menu+0x2224>
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <menu+0x228c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <menu+0x2224>
			buzzer = buzzer - 1;
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <menu+0x22a0>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <menu+0x22a0>)
 80037c0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80037c2:	4b23      	ldr	r3, [pc, #140]	; (8003850 <menu+0x22a0>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <menu+0x2220>
		   		buzzer = 1;
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <menu+0x22a0>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037d0:	f000 fbf2 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d4:	2108      	movs	r1, #8
 80037d6:	4818      	ldr	r0, [pc, #96]	; (8003838 <menu+0x2288>)
 80037d8:	f005 ffe2 	bl	80097a0 <HAL_GPIO_ReadPin>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d10d      	bne.n	80037fe <menu+0x224e>
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <menu+0x228c>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <menu+0x224e>
			eepromData[25] = buzzer;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <menu+0x22a0>)
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <menu+0x2290>)
 80037f6:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <menu+0x2294>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <menu+0x2298>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b1c      	cmp	r3, #28
 8003804:	f040 8088 	bne.w	8003918 <menu+0x2368>
		calismaSayModu = 0;
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <menu+0x22ac>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
		//lcd_print(1, 1, "DEMO MODE      ");
		lcd_print(1, 1, demoModTextGN);
 800380e:	4a14      	ldr	r2, [pc, #80]	; (8003860 <menu+0x22b0>)
 8003810:	2101      	movs	r1, #1
 8003812:	2001      	movs	r0, #1
 8003814:	f004 fc9e 	bl	8008154 <lcd_print>

		if(demoMode == 0) {
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <menu+0x22b4>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d123      	bne.n	8003868 <menu+0x22b8>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <menu+0x22a4>)
 8003822:	2101      	movs	r1, #1
 8003824:	2002      	movs	r0, #2
 8003826:	f004 fc95 	bl	8008154 <lcd_print>
 800382a:	e026      	b.n	800387a <menu+0x22ca>
 800382c:	20000ca4 	.word	0x20000ca4
 8003830:	2000100c 	.word	0x2000100c
 8003834:	20000c28 	.word	0x20000c28
 8003838:	40010800 	.word	0x40010800
 800383c:	20000cbb 	.word	0x20000cbb
 8003840:	20000bb8 	.word	0x20000bb8
 8003844:	20000cb8 	.word	0x20000cb8
 8003848:	20000c8c 	.word	0x20000c8c
 800384c:	20000110 	.word	0x20000110
 8003850:	20000ca8 	.word	0x20000ca8
 8003854:	20000f1c 	.word	0x20000f1c
 8003858:	20000f2c 	.word	0x20000f2c
 800385c:	20000cac 	.word	0x20000cac
 8003860:	20000120 	.word	0x20000120
 8003864:	20000caa 	.word	0x20000caa
		} else if(demoMode == 1) {
 8003868:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <menu+0x2440>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d104      	bne.n	800387a <menu+0x22ca>
			/*if(dilSecim == 0){
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8003870:	4a60      	ldr	r2, [pc, #384]	; (80039f4 <menu+0x2444>)
 8003872:	2101      	movs	r1, #1
 8003874:	2002      	movs	r0, #2
 8003876:	f004 fc6d 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800387a:	2102      	movs	r1, #2
 800387c:	485e      	ldr	r0, [pc, #376]	; (80039f8 <menu+0x2448>)
 800387e:	f005 ff8f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d115      	bne.n	80038b4 <menu+0x2304>
 8003888:	4b5c      	ldr	r3, [pc, #368]	; (80039fc <menu+0x244c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <menu+0x2304>
			demoMode = demoMode + 1;
 8003896:	4b56      	ldr	r3, [pc, #344]	; (80039f0 <menu+0x2440>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b54      	ldr	r3, [pc, #336]	; (80039f0 <menu+0x2440>)
 80038a0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80038a2:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <menu+0x2440>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d902      	bls.n	80038b0 <menu+0x2300>
				demoMode = 0;
 80038aa:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <menu+0x2440>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038b0:	f000 fb82 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038b4:	2104      	movs	r1, #4
 80038b6:	4850      	ldr	r0, [pc, #320]	; (80039f8 <menu+0x2448>)
 80038b8:	f005 ff72 	bl	80097a0 <HAL_GPIO_ReadPin>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d115      	bne.n	80038ee <menu+0x233e>
 80038c2:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <menu+0x244c>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	f083 0301 	eor.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <menu+0x233e>
			demoMode = demoMode - 1;
 80038d0:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <menu+0x2440>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <menu+0x2440>)
 80038da:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80038dc:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <menu+0x2440>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <menu+0x233a>
		   		demoMode = 1;
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <menu+0x2440>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038ea:	f000 fb65 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ee:	2108      	movs	r1, #8
 80038f0:	4841      	ldr	r0, [pc, #260]	; (80039f8 <menu+0x2448>)
 80038f2:	f005 ff55 	bl	80097a0 <HAL_GPIO_ReadPin>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10d      	bne.n	8003918 <menu+0x2368>
 80038fc:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <menu+0x244c>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d006      	beq.n	8003918 <menu+0x2368>
			eepromData[26] = demoMode;
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <menu+0x2440>)
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <menu+0x2450>)
 8003910:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <menu+0x2454>)
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003918:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <menu+0x2458>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b1d      	cmp	r3, #29
 800391e:	f040 810c 	bne.w	8003b3a <menu+0x258a>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003922:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <menu+0x245c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <menu+0x23a2>
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <menu+0x2460>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <menu+0x23a2>
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <menu+0x2464>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <menu+0x23a2>
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <menu+0x2468>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <menu+0x23a2>
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <menu+0x246c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <menu+0x23a2>
			calismaSayisiYar = 0;
 800394a:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <menu+0x2470>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e002      	b.n	8003958 <menu+0x23a8>
		} else {
			calismaSayisiYar = 1;
 8003952:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <menu+0x2470>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003958:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <menu+0x2474>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d169      	bne.n	8003a34 <menu+0x2484>
			/*if(dilSecim == 0) {
				lcd_print(1, 1, "Calisma Sayisi  ");
			} else {
				lcd_print(1, 1, "Working Cycle   ");
			}*/
			lcd_print(1, 1, calismaSayisiText);
 8003960:	4a31      	ldr	r2, [pc, #196]	; (8003a28 <menu+0x2478>)
 8003962:	2101      	movs	r1, #1
 8003964:	2001      	movs	r0, #1
 8003966:	f004 fbf5 	bl	8008154 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <menu+0x246c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	220a      	movs	r2, #10
 8003970:	492e      	ldr	r1, [pc, #184]	; (8003a2c <menu+0x247c>)
 8003972:	4618      	mov	r0, r3
 8003974:	f008 ff9c 	bl	800c8b0 <itoa>
			lcd_print(2, 12, snum);
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <menu+0x247c>)
 800397a:	210c      	movs	r1, #12
 800397c:	2002      	movs	r0, #2
 800397e:	f004 fbe9 	bl	8008154 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003982:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <menu+0x2468>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	220a      	movs	r2, #10
 8003988:	4928      	ldr	r1, [pc, #160]	; (8003a2c <menu+0x247c>)
 800398a:	4618      	mov	r0, r3
 800398c:	f008 ff90 	bl	800c8b0 <itoa>
			lcd_print(2, 13, snum);
 8003990:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <menu+0x247c>)
 8003992:	210d      	movs	r1, #13
 8003994:	2002      	movs	r0, #2
 8003996:	f004 fbdd 	bl	8008154 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <menu+0x2464>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	220a      	movs	r2, #10
 80039a0:	4922      	ldr	r1, [pc, #136]	; (8003a2c <menu+0x247c>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f008 ff84 	bl	800c8b0 <itoa>
			lcd_print(2, 14, snum);
 80039a8:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <menu+0x247c>)
 80039aa:	210e      	movs	r1, #14
 80039ac:	2002      	movs	r0, #2
 80039ae:	f004 fbd1 	bl	8008154 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80039b2:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <menu+0x2460>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	220a      	movs	r2, #10
 80039b8:	491c      	ldr	r1, [pc, #112]	; (8003a2c <menu+0x247c>)
 80039ba:	4618      	mov	r0, r3
 80039bc:	f008 ff78 	bl	800c8b0 <itoa>
			lcd_print(2, 15, snum);
 80039c0:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <menu+0x247c>)
 80039c2:	210f      	movs	r1, #15
 80039c4:	2002      	movs	r0, #2
 80039c6:	f004 fbc5 	bl	8008154 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <menu+0x245c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	220a      	movs	r2, #10
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <menu+0x247c>)
 80039d2:	4618      	mov	r0, r3
 80039d4:	f008 ff6c 	bl	800c8b0 <itoa>
			lcd_print(2, 16, snum);
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <menu+0x247c>)
 80039da:	2110      	movs	r1, #16
 80039dc:	2002      	movs	r0, #2
 80039de:	f004 fbb9 	bl	8008154 <lcd_print>

			lcd_print(2, 1, "           ");
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <menu+0x2480>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	2002      	movs	r0, #2
 80039e8:	f004 fbb4 	bl	8008154 <lcd_print>
 80039ec:	e030      	b.n	8003a50 <menu+0x24a0>
 80039ee:	bf00      	nop
 80039f0:	20000caa 	.word	0x20000caa
 80039f4:	20000f2c 	.word	0x20000f2c
 80039f8:	40010800 	.word	0x40010800
 80039fc:	20000cbb 	.word	0x20000cbb
 8003a00:	20000bb8 	.word	0x20000bb8
 8003a04:	20000cb8 	.word	0x20000cb8
 8003a08:	20000c8c 	.word	0x20000c8c
 8003a0c:	20000c89 	.word	0x20000c89
 8003a10:	20000c8a 	.word	0x20000c8a
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000001 	.word	0x20000001
 8003a1c:	20000c8b 	.word	0x20000c8b
 8003a20:	20000ccd 	.word	0x20000ccd
 8003a24:	20000cac 	.word	0x20000cac
 8003a28:	200011dc 	.word	0x200011dc
 8003a2c:	20000c28 	.word	0x20000c28
 8003a30:	0800d620 	.word	0x0800d620
		} else if(calismaSayModu == 1) {
 8003a34:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <menu+0x267c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d109      	bne.n	8003a50 <menu+0x24a0>
				lcd_print(2, 1, "Enter'la Sifirla");
			} else {
				lcd_print(1, 1, "Working Cycle   ");
				lcd_print(2, 1, "Del. with Enter ");
			}*/
			lcd_print(1, 1, calismaSayisiText);
 8003a3c:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <menu+0x2680>)
 8003a3e:	2101      	movs	r1, #1
 8003a40:	2001      	movs	r0, #1
 8003a42:	f004 fb87 	bl	8008154 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003a46:	4a7b      	ldr	r2, [pc, #492]	; (8003c34 <menu+0x2684>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2002      	movs	r0, #2
 8003a4c:	f004 fb82 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003a50:	2102      	movs	r1, #2
 8003a52:	4879      	ldr	r0, [pc, #484]	; (8003c38 <menu+0x2688>)
 8003a54:	f005 fea4 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d119      	bne.n	8003a92 <menu+0x24e2>
 8003a5e:	4b77      	ldr	r3, [pc, #476]	; (8003c3c <menu+0x268c>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	f083 0301 	eor.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <menu+0x24e2>
 8003a6c:	4b74      	ldr	r3, [pc, #464]	; (8003c40 <menu+0x2690>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <menu+0x24e2>
			calismaSayModu = calismaSayModu + 1;
 8003a74:	4b6d      	ldr	r3, [pc, #436]	; (8003c2c <menu+0x267c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b6b      	ldr	r3, [pc, #428]	; (8003c2c <menu+0x267c>)
 8003a7e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003a80:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <menu+0x267c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d902      	bls.n	8003a8e <menu+0x24de>
				calismaSayModu = 0;
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <menu+0x267c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a8e:	f000 fa93 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003a92:	2104      	movs	r1, #4
 8003a94:	4868      	ldr	r0, [pc, #416]	; (8003c38 <menu+0x2688>)
 8003a96:	f005 fe83 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d119      	bne.n	8003ad4 <menu+0x2524>
 8003aa0:	4b66      	ldr	r3, [pc, #408]	; (8003c3c <menu+0x268c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f083 0301 	eor.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d012      	beq.n	8003ad4 <menu+0x2524>
 8003aae:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <menu+0x2690>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <menu+0x2524>
			calismaSayModu = calismaSayModu - 1;
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <menu+0x267c>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <menu+0x267c>)
 8003ac0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003ac2:	4b5a      	ldr	r3, [pc, #360]	; (8003c2c <menu+0x267c>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <menu+0x2520>
		   		calismaSayModu = 1;
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <menu+0x267c>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ad0:	f000 fa72 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	4858      	ldr	r0, [pc, #352]	; (8003c38 <menu+0x2688>)
 8003ad8:	f005 fe62 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d12b      	bne.n	8003b3a <menu+0x258a>
 8003ae2:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <menu+0x268c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	f083 0301 	eor.w	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d024      	beq.n	8003b3a <menu+0x258a>
			eepromData[32] = 0;
 8003af0:	4b54      	ldr	r3, [pc, #336]	; (8003c44 <menu+0x2694>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003af8:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <menu+0x2694>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <menu+0x2694>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <menu+0x2694>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003b0a:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <menu+0x2694>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003b10:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <menu+0x2698>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003b16:	4b4d      	ldr	r3, [pc, #308]	; (8003c4c <menu+0x269c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <menu+0x26a0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003b22:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <menu+0x26a4>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <menu+0x26a8>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <menu+0x267c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003b34:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <menu+0x26ac>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <menu+0x26b0>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b1e      	cmp	r3, #30
 8003b40:	d15c      	bne.n	8003bfc <menu+0x264c>
		calismaSayModu = 0;
 8003b42:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <menu+0x267c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
		} else {
			lcd_print(1, 1, "LANGUAGE SELECT ");
			lcd_print(2, 1, "ENGLISH         ");
		}*/

		lcd_print(1, 1, dilSecimText);
 8003b48:	4a46      	ldr	r2, [pc, #280]	; (8003c64 <menu+0x26b4>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f004 fb01 	bl	8008154 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003b52:	4a45      	ldr	r2, [pc, #276]	; (8003c68 <menu+0x26b8>)
 8003b54:	2101      	movs	r1, #1
 8003b56:	2002      	movs	r0, #2
 8003b58:	f004 fafc 	bl	8008154 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	4836      	ldr	r0, [pc, #216]	; (8003c38 <menu+0x2688>)
 8003b60:	f005 fe1e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d115      	bne.n	8003b96 <menu+0x25e6>
 8003b6a:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <menu+0x268c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f083 0301 	eor.w	r3, r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <menu+0x25e6>
			dilSecim = dilSecim + 1;
 8003b78:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <menu+0x26bc>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <menu+0x26bc>)
 8003b82:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <menu+0x26bc>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d902      	bls.n	8003b92 <menu+0x25e2>
				dilSecim = 0;
 8003b8c:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <menu+0x26bc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003b92:	f000 fa11 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b96:	2104      	movs	r1, #4
 8003b98:	4827      	ldr	r0, [pc, #156]	; (8003c38 <menu+0x2688>)
 8003b9a:	f005 fe01 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d115      	bne.n	8003bd0 <menu+0x2620>
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <menu+0x268c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <menu+0x2620>
			dilSecim = dilSecim - 1;
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <menu+0x26bc>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <menu+0x26bc>)
 8003bbc:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003bbe:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <menu+0x26bc>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <menu+0x261c>
		   		dilSecim = 1;
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <menu+0x26bc>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003bcc:	f000 f9f4 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd0:	2108      	movs	r1, #8
 8003bd2:	4819      	ldr	r0, [pc, #100]	; (8003c38 <menu+0x2688>)
 8003bd4:	f005 fde4 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d10e      	bne.n	8003bfc <menu+0x264c>
 8003bde:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <menu+0x268c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <menu+0x264c>
			eepromData[33] = dilSecim;
 8003bec:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <menu+0x26bc>)
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <menu+0x2694>)
 8003bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <menu+0x26ac>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <menu+0x26b0>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b1f      	cmp	r3, #31
 8003c02:	f040 8094 	bne.w	8003d2e <menu+0x277e>
		calismaSayModu = 0;
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <menu+0x267c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
		//lcd_print(1, 1, "IoT MODE        ");
		lcd_print(1, 1, iotModTextGN);
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <menu+0x26c0>)
 8003c0e:	2101      	movs	r1, #1
 8003c10:	2001      	movs	r0, #1
 8003c12:	f004 fa9f 	bl	8008154 <lcd_print>

		if(iotMode == 0) {
 8003c16:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <menu+0x26c4>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d12e      	bne.n	8003c7c <menu+0x26cc>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Pasif           ");
			} else {
				lcd_print(2, 1, "Passive         ");
			}*/
			lcd_print(2, 1, pasifText);
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <menu+0x26c8>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2002      	movs	r0, #2
 8003c24:	f004 fa96 	bl	8008154 <lcd_print>
 8003c28:	e031      	b.n	8003c8e <menu+0x26de>
 8003c2a:	bf00      	nop
 8003c2c:	20000cac 	.word	0x20000cac
 8003c30:	200011dc 	.word	0x200011dc
 8003c34:	200011ec 	.word	0x200011ec
 8003c38:	40010800 	.word	0x40010800
 8003c3c:	20000cbb 	.word	0x20000cbb
 8003c40:	20000ccd 	.word	0x20000ccd
 8003c44:	20000bb8 	.word	0x20000bb8
 8003c48:	20000c8b 	.word	0x20000c8b
 8003c4c:	20000001 	.word	0x20000001
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000c8a 	.word	0x20000c8a
 8003c58:	20000c89 	.word	0x20000c89
 8003c5c:	20000cb8 	.word	0x20000cb8
 8003c60:	20000c8c 	.word	0x20000c8c
 8003c64:	200011fc 	.word	0x200011fc
 8003c68:	2000120c 	.word	0x2000120c
 8003c6c:	20000cad 	.word	0x20000cad
 8003c70:	20000130 	.word	0x20000130
 8003c74:	20000cab 	.word	0x20000cab
 8003c78:	20000f1c 	.word	0x20000f1c
		} else if(iotMode == 1) {
 8003c7c:	4b98      	ldr	r3, [pc, #608]	; (8003ee0 <menu+0x2930>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d104      	bne.n	8003c8e <menu+0x26de>
			/*if(dilSecim == 0) {
				lcd_print(2, 1, "Aktif           ");
			} else {
				lcd_print(2, 1, "Active          ");
			}*/
			lcd_print(2, 1, aktifText);
 8003c84:	4a97      	ldr	r2, [pc, #604]	; (8003ee4 <menu+0x2934>)
 8003c86:	2101      	movs	r1, #1
 8003c88:	2002      	movs	r0, #2
 8003c8a:	f004 fa63 	bl	8008154 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4895      	ldr	r0, [pc, #596]	; (8003ee8 <menu+0x2938>)
 8003c92:	f005 fd85 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d115      	bne.n	8003cc8 <menu+0x2718>
 8003c9c:	4b93      	ldr	r3, [pc, #588]	; (8003eec <menu+0x293c>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00e      	beq.n	8003cc8 <menu+0x2718>
			iotMode = iotMode + 1;
 8003caa:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <menu+0x2930>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b8b      	ldr	r3, [pc, #556]	; (8003ee0 <menu+0x2930>)
 8003cb4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003cb6:	4b8a      	ldr	r3, [pc, #552]	; (8003ee0 <menu+0x2930>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d902      	bls.n	8003cc4 <menu+0x2714>
				iotMode = 0;
 8003cbe:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <menu+0x2930>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003cc4:	f000 f978 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc8:	2104      	movs	r1, #4
 8003cca:	4887      	ldr	r0, [pc, #540]	; (8003ee8 <menu+0x2938>)
 8003ccc:	f005 fd68 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d115      	bne.n	8003d02 <menu+0x2752>
 8003cd6:	4b85      	ldr	r3, [pc, #532]	; (8003eec <menu+0x293c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00e      	beq.n	8003d02 <menu+0x2752>
			iotMode = iotMode - 1;
 8003ce4:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <menu+0x2930>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	4b7c      	ldr	r3, [pc, #496]	; (8003ee0 <menu+0x2930>)
 8003cee:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003cf0:	4b7b      	ldr	r3, [pc, #492]	; (8003ee0 <menu+0x2930>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <menu+0x274e>
		   		iotMode = 1;
 8003cf8:	4b79      	ldr	r3, [pc, #484]	; (8003ee0 <menu+0x2930>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003cfe:	f000 f95b 	bl	8003fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d02:	2108      	movs	r1, #8
 8003d04:	4878      	ldr	r0, [pc, #480]	; (8003ee8 <menu+0x2938>)
 8003d06:	f005 fd4b 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10e      	bne.n	8003d2e <menu+0x277e>
 8003d10:	4b76      	ldr	r3, [pc, #472]	; (8003eec <menu+0x293c>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f083 0301 	eor.w	r3, r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <menu+0x277e>
			eepromData[48] = iotMode;
 8003d1e:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <menu+0x2930>)
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <menu+0x2940>)
 8003d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8003d28:	4b72      	ldr	r3, [pc, #456]	; (8003ef4 <menu+0x2944>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003d2e:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <menu+0x2948>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d12b      	bne.n	8003d8e <menu+0x27de>
		calismaSayModu = 0;
 8003d36:	4b71      	ldr	r3, [pc, #452]	; (8003efc <menu+0x294c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7fc fcff 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003d42:	2032      	movs	r0, #50	; 0x32
 8003d44:	f004 ff5c 	bl	8008c00 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f7fd fb8f 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d4e:	2102      	movs	r1, #2
 8003d50:	4865      	ldr	r0, [pc, #404]	; (8003ee8 <menu+0x2938>)
 8003d52:	f005 fd25 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d118      	bne.n	8003d8e <menu+0x27de>
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	4862      	ldr	r0, [pc, #392]	; (8003ee8 <menu+0x2938>)
 8003d60:	f005 fd1e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d111      	bne.n	8003d8e <menu+0x27de>
 8003d6a:	4b60      	ldr	r3, [pc, #384]	; (8003eec <menu+0x293c>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f083 0301 	eor.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <menu+0x27de>
			takeMachineID();
 8003d78:	f003 f9ea 	bl	8007150 <takeMachineID>

			convertArrays(1);
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7fc fcdf 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003d82:	2032      	movs	r0, #50	; 0x32
 8003d84:	f004 ff3c 	bl	8008c00 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7fd fb6f 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 33) {
 8003d8e:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <menu+0x2948>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b21      	cmp	r3, #33	; 0x21
 8003d94:	d12e      	bne.n	8003df4 <menu+0x2844>
		calismaSayModu = 0;
 8003d96:	4b59      	ldr	r3, [pc, #356]	; (8003efc <menu+0x294c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f004 fa25 	bl	80081ec <lcd_backlight>

		convertArrays(2);
 8003da2:	2002      	movs	r0, #2
 8003da4:	f7fc fccc 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003da8:	2032      	movs	r0, #50	; 0x32
 8003daa:	f004 ff29 	bl	8008c00 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003dae:	2002      	movs	r0, #2
 8003db0:	f7fd fb5c 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003db4:	2102      	movs	r1, #2
 8003db6:	484c      	ldr	r0, [pc, #304]	; (8003ee8 <menu+0x2938>)
 8003db8:	f005 fcf2 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d118      	bne.n	8003df4 <menu+0x2844>
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	4848      	ldr	r0, [pc, #288]	; (8003ee8 <menu+0x2938>)
 8003dc6:	f005 fceb 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d111      	bne.n	8003df4 <menu+0x2844>
 8003dd0:	4b46      	ldr	r3, [pc, #280]	; (8003eec <menu+0x293c>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f083 0301 	eor.w	r3, r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <menu+0x2844>
			takeWifiSSID();
 8003dde:	f003 fb3b 	bl	8007458 <takeWifiSSID>

			convertArrays(2);
 8003de2:	2002      	movs	r0, #2
 8003de4:	f7fc fcac 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003de8:	2032      	movs	r0, #50	; 0x32
 8003dea:	f004 ff09 	bl	8008c00 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003dee:	2002      	movs	r0, #2
 8003df0:	f7fd fb3c 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <menu+0x2948>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b22      	cmp	r3, #34	; 0x22
 8003dfa:	d12e      	bne.n	8003e5a <menu+0x28aa>
		calismaSayModu = 0;
 8003dfc:	4b3f      	ldr	r3, [pc, #252]	; (8003efc <menu+0x294c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8003e02:	2001      	movs	r0, #1
 8003e04:	f004 f9f2 	bl	80081ec <lcd_backlight>

		convertArrays(3);
 8003e08:	2003      	movs	r0, #3
 8003e0a:	f7fc fc99 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003e0e:	2032      	movs	r0, #50	; 0x32
 8003e10:	f004 fef6 	bl	8008c00 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003e14:	2003      	movs	r0, #3
 8003e16:	f7fd fb29 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	4832      	ldr	r0, [pc, #200]	; (8003ee8 <menu+0x2938>)
 8003e1e:	f005 fcbf 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d118      	bne.n	8003e5a <menu+0x28aa>
 8003e28:	2104      	movs	r1, #4
 8003e2a:	482f      	ldr	r0, [pc, #188]	; (8003ee8 <menu+0x2938>)
 8003e2c:	f005 fcb8 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d111      	bne.n	8003e5a <menu+0x28aa>
 8003e36:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <menu+0x293c>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	f083 0301 	eor.w	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <menu+0x28aa>
			takeWifiPass();
 8003e44:	f003 fc7e 	bl	8007744 <takeWifiPass>

			convertArrays(3);
 8003e48:	2003      	movs	r0, #3
 8003e4a:	f7fc fc79 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003e4e:	2032      	movs	r0, #50	; 0x32
 8003e50:	f004 fed6 	bl	8008c00 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003e54:	2003      	movs	r0, #3
 8003e56:	f7fd fb09 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <menu+0x2948>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b23      	cmp	r3, #35	; 0x23
 8003e60:	d13a      	bne.n	8003ed8 <menu+0x2928>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
		} else {
			lcd_print(1, 1, " EXIT THE MENU  ");
			lcd_print(2, 1, "PUSH ENTER BUTON");
		}*/
		lcd_print(1, 1, menudenCikisText);
 8003e62:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <menu+0x2950>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	2001      	movs	r0, #1
 8003e68:	f004 f974 	bl	8008154 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <menu+0x2954>)
 8003e6e:	2101      	movs	r1, #1
 8003e70:	2002      	movs	r0, #2
 8003e72:	f004 f96f 	bl	8008154 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003e76:	2108      	movs	r1, #8
 8003e78:	481b      	ldr	r0, [pc, #108]	; (8003ee8 <menu+0x2938>)
 8003e7a:	f005 fc91 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d129      	bne.n	8003ed8 <menu+0x2928>
			menuGiris = 0;
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <menu+0x2958>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003e8a:	bf00      	nop
 8003e8c:	481f      	ldr	r0, [pc, #124]	; (8003f0c <menu+0x295c>)
 8003e8e:	f006 fab0 	bl	800a3f2 <HAL_I2C_GetError>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d0f9      	beq.n	8003e8c <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003e98:	bf00      	nop
 8003e9a:	481c      	ldr	r0, [pc, #112]	; (8003f0c <menu+0x295c>)
 8003e9c:	f006 fa9c 	bl	800a3d8 <HAL_I2C_GetState>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d1f9      	bne.n	8003e9a <menu+0x28ea>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003ea6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	236e      	movs	r3, #110	; 0x6e
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <menu+0x2940>)
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	236e      	movs	r3, #110	; 0x6e
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	21a0      	movs	r1, #160	; 0xa0
 8003eba:	4814      	ldr	r0, [pc, #80]	; (8003f0c <menu+0x295c>)
 8003ebc:	f005 ff2a 	bl	8009d14 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003ec0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003ec4:	f004 fe9c 	bl	8008c00 <HAL_Delay>

			lcd_clear();
 8003ec8:	f004 f970 	bl	80081ac <lcd_clear>
			HAL_Delay(500);
 8003ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ed0:	f004 fe96 	bl	8008c00 <HAL_Delay>
			NVIC_SystemReset();
 8003ed4:	f7fd fb56 	bl	8001584 <__NVIC_SystemReset>
		}
	}
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000cab 	.word	0x20000cab
 8003ee4:	20000f2c 	.word	0x20000f2c
 8003ee8:	40010800 	.word	0x40010800
 8003eec:	20000cbb 	.word	0x20000cbb
 8003ef0:	20000bb8 	.word	0x20000bb8
 8003ef4:	20000cb8 	.word	0x20000cb8
 8003ef8:	20000c8c 	.word	0x20000c8c
 8003efc:	20000cac 	.word	0x20000cac
 8003f00:	2000121c 	.word	0x2000121c
 8003f04:	2000122c 	.word	0x2000122c
 8003f08:	20000ca9 	.word	0x20000ca9
 8003f0c:	20001318 	.word	0x20001318

08003f10 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"

void lcdUpdate(uint8_t y) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <lcdUpdate+0x9c>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	2002      	movs	r0, #2
 8003f26:	f004 f915 	bl	8008154 <lcd_print>
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		//lcd_print(1, 4, "ESP-RMK");
		//lcd_print(2, 6, "RUN");
	}
}
 8003f2a:	e03b      	b.n	8003fa4 <lcdUpdate+0x94>
	} else if(y==2) {
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d105      	bne.n	8003f3e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <lcdUpdate+0x9c>)
 8003f34:	2102      	movs	r1, #2
 8003f36:	2002      	movs	r0, #2
 8003f38:	f004 f90c 	bl	8008154 <lcd_print>
}
 8003f3c:	e032      	b.n	8003fa4 <lcdUpdate+0x94>
	} else if(y==3) {
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d105      	bne.n	8003f50 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <lcdUpdate+0x9c>)
 8003f46:	2103      	movs	r1, #3
 8003f48:	2002      	movs	r0, #2
 8003f4a:	f004 f903 	bl	8008154 <lcd_print>
}
 8003f4e:	e029      	b.n	8003fa4 <lcdUpdate+0x94>
	} else if(y==4) {
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d105      	bne.n	8003f62 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <lcdUpdate+0x9c>)
 8003f58:	2104      	movs	r1, #4
 8003f5a:	2002      	movs	r0, #2
 8003f5c:	f004 f8fa 	bl	8008154 <lcd_print>
}
 8003f60:	e020      	b.n	8003fa4 <lcdUpdate+0x94>
	} else if(y==5) {
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d105      	bne.n	8003f74 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003f68:	4a10      	ldr	r2, [pc, #64]	; (8003fac <lcdUpdate+0x9c>)
 8003f6a:	2105      	movs	r1, #5
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f004 f8f1 	bl	8008154 <lcd_print>
}
 8003f72:	e017      	b.n	8003fa4 <lcdUpdate+0x94>
	} else if(y==6) {
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d105      	bne.n	8003f86 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <lcdUpdate+0x9c>)
 8003f7c:	2106      	movs	r1, #6
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f004 f8e8 	bl	8008154 <lcd_print>
}
 8003f84:	e00e      	b.n	8003fa4 <lcdUpdate+0x94>
	} else if (y==7) {
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d10b      	bne.n	8003fa4 <lcdUpdate+0x94>
		lcd_clear();
 8003f8c:	f004 f90e 	bl	80081ac <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <lcdUpdate+0xa0>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	2001      	movs	r0, #1
 8003f96:	f004 f8dd 	bl	8008154 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003f9a:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <lcdUpdate+0xa4>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	2002      	movs	r0, #2
 8003fa0:	f004 f8d8 	bl	8008154 <lcd_print>
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	0800d62c 	.word	0x0800d62c
 8003fb0:	200000c0 	.word	0x200000c0
 8003fb4:	200000d0 	.word	0x200000d0

08003fb8 <bekle>:

void bekle() {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
	timer1=millis;
 8003fbc:	4b47      	ldr	r3, [pc, #284]	; (80040dc <bekle+0x124>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a47      	ldr	r2, [pc, #284]	; (80040e0 <bekle+0x128>)
 8003fc2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003fc4:	e002      	b.n	8003fcc <bekle+0x14>
    	butonKontrol = 1;
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <bekle+0x12c>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4846      	ldr	r0, [pc, #280]	; (80040e8 <bekle+0x130>)
 8003fd0:	f005 fbe6 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d109      	bne.n	8003fee <bekle+0x36>
 8003fda:	4b40      	ldr	r3, [pc, #256]	; (80040dc <bekle+0x124>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <bekle+0x128>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d0ef      	beq.n	8003fc6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003fe6:	e002      	b.n	8003fee <bekle+0x36>
    	butonKontrol = 1;
 8003fe8:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <bekle+0x12c>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003fee:	2108      	movs	r1, #8
 8003ff0:	483e      	ldr	r0, [pc, #248]	; (80040ec <bekle+0x134>)
 8003ff2:	f005 fbd5 	bl	80097a0 <HAL_GPIO_ReadPin>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d109      	bne.n	8004010 <bekle+0x58>
 8003ffc:	4b37      	ldr	r3, [pc, #220]	; (80040dc <bekle+0x124>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <bekle+0x128>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d0ef      	beq.n	8003fe8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004008:	e002      	b.n	8004010 <bekle+0x58>
    	butonKontrol = 1;
 800400a:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <bekle+0x12c>)
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004010:	2102      	movs	r1, #2
 8004012:	4835      	ldr	r0, [pc, #212]	; (80040e8 <bekle+0x130>)
 8004014:	f005 fbc4 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d109      	bne.n	8004032 <bekle+0x7a>
 800401e:	4b2f      	ldr	r3, [pc, #188]	; (80040dc <bekle+0x124>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <bekle+0x128>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d0ef      	beq.n	800400a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800402a:	e002      	b.n	8004032 <bekle+0x7a>
    	butonKontrol = 1;
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <bekle+0x12c>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004032:	2104      	movs	r1, #4
 8004034:	482c      	ldr	r0, [pc, #176]	; (80040e8 <bekle+0x130>)
 8004036:	f005 fbb3 	bl	80097a0 <HAL_GPIO_ReadPin>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d109      	bne.n	8004054 <bekle+0x9c>
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <bekle+0x124>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <bekle+0x128>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d0ef      	beq.n	800402c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800404c:	e002      	b.n	8004054 <bekle+0x9c>
    	butonKontrol = 1;
 800404e:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <bekle+0x12c>)
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004054:	2108      	movs	r1, #8
 8004056:	4824      	ldr	r0, [pc, #144]	; (80040e8 <bekle+0x130>)
 8004058:	f005 fba2 	bl	80097a0 <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d109      	bne.n	8004076 <bekle+0xbe>
 8004062:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <bekle+0x124>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <bekle+0x128>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d0ef      	beq.n	800404e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800406e:	e002      	b.n	8004076 <bekle+0xbe>
    	butonKontrol = 1;
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <bekle+0x12c>)
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	481c      	ldr	r0, [pc, #112]	; (80040ec <bekle+0x134>)
 800407a:	f005 fb91 	bl	80097a0 <HAL_GPIO_ReadPin>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <bekle+0xe0>
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <bekle+0x124>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <bekle+0x128>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d0ef      	beq.n	8004070 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004090:	e002      	b.n	8004098 <bekle+0xe0>
    	butonKontrol = 1;
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <bekle+0x12c>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800409c:	4813      	ldr	r0, [pc, #76]	; (80040ec <bekle+0x134>)
 800409e:	f005 fb7f 	bl	80097a0 <HAL_GPIO_ReadPin>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <bekle+0x104>
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <bekle+0x124>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <bekle+0x128>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d0ee      	beq.n	8004092 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040b4:	e002      	b.n	80040bc <bekle+0x104>
    	butonKontrol = 1;
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <bekle+0x12c>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040c0:	480a      	ldr	r0, [pc, #40]	; (80040ec <bekle+0x134>)
 80040c2:	f005 fb6d 	bl	80097a0 <HAL_GPIO_ReadPin>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <bekle+0x120>
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <bekle+0x124>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <bekle+0x128>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d0ee      	beq.n	80040b6 <bekle+0xfe>
    }

}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000c68 	.word	0x20000c68
 80040e0:	20000c70 	.word	0x20000c70
 80040e4:	20000cbb 	.word	0x20000cbb
 80040e8:	40010800 	.word	0x40010800
 80040ec:	40011000 	.word	0x40011000

080040f0 <buttonCheck>:

uint8_t buttonCheck(void) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 80040f4:	2101      	movs	r1, #1
 80040f6:	4815      	ldr	r0, [pc, #84]	; (800414c <buttonCheck+0x5c>)
 80040f8:	f005 fb52 	bl	80097a0 <HAL_GPIO_ReadPin>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d01b      	beq.n	800413a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004102:	2108      	movs	r1, #8
 8004104:	4812      	ldr	r0, [pc, #72]	; (8004150 <buttonCheck+0x60>)
 8004106:	f005 fb4b 	bl	80097a0 <HAL_GPIO_ReadPin>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d014      	beq.n	800413a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004110:	2102      	movs	r1, #2
 8004112:	480e      	ldr	r0, [pc, #56]	; (800414c <buttonCheck+0x5c>)
 8004114:	f005 fb44 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d00d      	beq.n	800413a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800411e:	2104      	movs	r1, #4
 8004120:	480a      	ldr	r0, [pc, #40]	; (800414c <buttonCheck+0x5c>)
 8004122:	f005 fb3d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d006      	beq.n	800413a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 800412c:	2108      	movs	r1, #8
 800412e:	4807      	ldr	r0, [pc, #28]	; (800414c <buttonCheck+0x5c>)
 8004130:	f005 fb36 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d104      	bne.n	8004144 <buttonCheck+0x54>
		backLightTimer = 0;
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <buttonCheck+0x64>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
		return 1;
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <buttonCheck+0x56>
	}
	return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40010800 	.word	0x40010800
 8004150:	40011000 	.word	0x40011000
 8004154:	20000c84 	.word	0x20000c84

08004158 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <checkLCDBacklight+0x24>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <checkLCDBacklight+0x28>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b3b      	cmp	r3, #59	; 0x3b
 8004168:	d903      	bls.n	8004172 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800416a:	2000      	movs	r0, #0
 800416c:	f004 f83e 	bl	80081ec <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004170:	e002      	b.n	8004178 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004172:	2001      	movs	r0, #1
 8004174:	f004 f83a 	bl	80081ec <lcd_backlight>
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000c68 	.word	0x20000c68
 8004180:	20000c84 	.word	0x20000c84

08004184 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <checkBasincSalteri+0x54>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <checkBasincSalteri+0x12>
		basincVar=1;
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <checkBasincSalteri+0x58>)
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <checkBasincSalteri+0x54>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d119      	bne.n	80041d2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800419e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041a2:	480f      	ldr	r0, [pc, #60]	; (80041e0 <checkBasincSalteri+0x5c>)
 80041a4:	f005 fafc 	bl	80097a0 <HAL_GPIO_ReadPin>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <checkBasincSalteri+0x60>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <checkBasincSalteri+0x64>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d90a      	bls.n	80041d2 <checkBasincSalteri+0x4e>
				basincVar=1;
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <checkBasincSalteri+0x58>)
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80041c2:	e006      	b.n	80041d2 <checkBasincSalteri+0x4e>
			timer5=millis;
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <checkBasincSalteri+0x60>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <checkBasincSalteri+0x64>)
 80041ca:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <checkBasincSalteri+0x58>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000c93 	.word	0x20000c93
 80041dc:	20000c8f 	.word	0x20000c8f
 80041e0:	40011000 	.word	0x40011000
 80041e4:	20000c68 	.word	0x20000c68
 80041e8:	20000c80 	.word	0x20000c80

080041ec <checkBasGonder>:

void checkBasGonder() {
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <checkBasGonder+0x74>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10b      	bne.n	8004210 <checkBasGonder+0x24>
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <checkBasGonder+0x78>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <checkBasGonder+0x24>
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <checkBasGonder+0x7c>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <checkBasGonder+0x80>)
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e009      	b.n	8004224 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <checkBasGonder+0x78>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f083 0301 	eor.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <checkBasGonder+0x80>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <checkBasGonder+0x74>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10b      	bne.n	8004244 <checkBasGonder+0x58>
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <checkBasGonder+0x84>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <checkBasGonder+0x58>
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <checkBasGonder+0x7c>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <checkBasGonder+0x88>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004242:	e009      	b.n	8004258 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <checkBasGonder+0x84>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f083 0301 	eor.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <checkBasGonder+0x88>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	20000c8d 	.word	0x20000c8d
 8004264:	20000cc1 	.word	0x20000cc1
 8004268:	20000c9b 	.word	0x20000c9b
 800426c:	20000cc8 	.word	0x20000cc8
 8004270:	20000cc4 	.word	0x20000cc4
 8004274:	20000cc9 	.word	0x20000cc9

08004278 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800427c:	4b24      	ldr	r3, [pc, #144]	; (8004310 <checkKapiSecimleri+0x98>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004284:	4b23      	ldr	r3, [pc, #140]	; (8004314 <checkKapiSecimleri+0x9c>)
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <checkKapiSecimleri+0x98>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10e      	bne.n	80042b0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004296:	4820      	ldr	r0, [pc, #128]	; (8004318 <checkKapiSecimleri+0xa0>)
 8004298:	f005 fa82 	bl	80097a0 <HAL_GPIO_ReadPin>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80042a2:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <checkKapiSecimleri+0x9c>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e002      	b.n	80042b0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <checkKapiSecimleri+0x9c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <checkKapiSecimleri+0x98>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d10e      	bne.n	80042d6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80042b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042bc:	4816      	ldr	r0, [pc, #88]	; (8004318 <checkKapiSecimleri+0xa0>)
 80042be:	f005 fa6f 	bl	80097a0 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <checkKapiSecimleri+0x9c>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <checkKapiSecimleri+0x9c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <checkKapiSecimleri+0x98>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d116      	bne.n	800430c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80042de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042e2:	480d      	ldr	r0, [pc, #52]	; (8004318 <checkKapiSecimleri+0xa0>)
 80042e4:	f005 fa5c 	bl	80097a0 <HAL_GPIO_ReadPin>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <checkKapiSecimleri+0x8e>
 80042ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042f2:	4809      	ldr	r0, [pc, #36]	; (8004318 <checkKapiSecimleri+0xa0>)
 80042f4:	f005 fa54 	bl	80097a0 <HAL_GPIO_ReadPin>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <checkKapiSecimleri+0x9c>)
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004304:	e002      	b.n	800430c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <checkKapiSecimleri+0x9c>)
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000c94 	.word	0x20000c94
 8004314:	20000cdf 	.word	0x20000cdf
 8004318:	40010800 	.word	0x40010800

0800431c <checkAktifCalisma>:

void checkAktifCalisma() {
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004320:	4b62      	ldr	r3, [pc, #392]	; (80044ac <checkAktifCalisma+0x190>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f041 833e 	bne.w	80059a6 <checkAktifCalisma+0x168a>
 800432a:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <checkAktifCalisma+0x194>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f041 8339 	bne.w	80059a6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004334:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <checkAktifCalisma+0x198>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11a      	bne.n	8004372 <checkAktifCalisma+0x56>
 800433c:	4b5e      	ldr	r3, [pc, #376]	; (80044b8 <checkAktifCalisma+0x19c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d116      	bne.n	8004372 <checkAktifCalisma+0x56>
 8004344:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <checkAktifCalisma+0x1a0>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <checkAktifCalisma+0x46>
 800434c:	4b5c      	ldr	r3, [pc, #368]	; (80044c0 <checkAktifCalisma+0x1a4>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f083 0301 	eor.w	r3, r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <checkAktifCalisma+0x46>
 800435a:	4b5a      	ldr	r3, [pc, #360]	; (80044c4 <checkAktifCalisma+0x1a8>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d007      	beq.n	8004372 <checkAktifCalisma+0x56>
 8004362:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <checkAktifCalisma+0x1ac>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <checkAktifCalisma+0x80>
 800436a:	4b58      	ldr	r3, [pc, #352]	; (80044cc <checkAktifCalisma+0x1b0>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d114      	bne.n	800439c <checkAktifCalisma+0x80>
 8004372:	4b57      	ldr	r3, [pc, #348]	; (80044d0 <checkAktifCalisma+0x1b4>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <checkAktifCalisma+0x80>
 800437a:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <checkAktifCalisma+0x1b8>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004382:	2201      	movs	r2, #1
 8004384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004388:	4853      	ldr	r0, [pc, #332]	; (80044d8 <checkAktifCalisma+0x1bc>)
 800438a:	f005 fa20 	bl	80097ce <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800438e:	4b53      	ldr	r3, [pc, #332]	; (80044dc <checkAktifCalisma+0x1c0>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004394:	4b52      	ldr	r3, [pc, #328]	; (80044e0 <checkAktifCalisma+0x1c4>)
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e008      	b.n	80043ae <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043a2:	484d      	ldr	r0, [pc, #308]	; (80044d8 <checkAktifCalisma+0x1bc>)
 80043a4:	f005 fa13 	bl	80097ce <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80043a8:	4b4c      	ldr	r3, [pc, #304]	; (80044dc <checkAktifCalisma+0x1c0>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80043ae:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <checkAktifCalisma+0x194>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d160      	bne.n	8004478 <checkAktifCalisma+0x15c>
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <checkAktifCalisma+0x1b4>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d05c      	beq.n	8004478 <checkAktifCalisma+0x15c>
 80043be:	4b45      	ldr	r3, [pc, #276]	; (80044d4 <checkAktifCalisma+0x1b8>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d058      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80043c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043ca:	4843      	ldr	r0, [pc, #268]	; (80044d8 <checkAktifCalisma+0x1bc>)
 80043cc:	f005 f9e8 	bl	80097a0 <HAL_GPIO_ReadPin>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <checkAktifCalisma+0xc2>
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <checkAktifCalisma+0x1c8>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d04c      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80043de:	2102      	movs	r1, #2
 80043e0:	4841      	ldr	r0, [pc, #260]	; (80044e8 <checkAktifCalisma+0x1cc>)
 80043e2:	f005 f9dd 	bl	80097a0 <HAL_GPIO_ReadPin>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d145      	bne.n	8004478 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <checkAktifCalisma+0x1d0>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d041      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80043f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043f8:	4837      	ldr	r0, [pc, #220]	; (80044d8 <checkAktifCalisma+0x1bc>)
 80043fa:	f005 f9d1 	bl	80097a0 <HAL_GPIO_ReadPin>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10e      	bne.n	8004422 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004408:	4833      	ldr	r0, [pc, #204]	; (80044d8 <checkAktifCalisma+0x1bc>)
 800440a:	f005 f9c9 	bl	80097a0 <HAL_GPIO_ReadPin>
 800440e:	4603      	mov	r3, r0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d106      	bne.n	8004422 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	4834      	ldr	r0, [pc, #208]	; (80044e8 <checkAktifCalisma+0x1cc>)
 8004418:	f005 f9c2 	bl	80097a0 <HAL_GPIO_ReadPin>
 800441c:	4603      	mov	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d003      	beq.n	800442a <checkAktifCalisma+0x10e>
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <checkAktifCalisma+0x198>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d026      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <checkAktifCalisma+0x1a0>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01f      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004438:	4b1f      	ldr	r3, [pc, #124]	; (80044b8 <checkAktifCalisma+0x19c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	f083 0301 	eor.w	r3, r3, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <checkAktifCalisma+0x1ac>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f083 0301 	eor.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d011      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <checkAktifCalisma+0x1d4>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <checkAktifCalisma+0x1d8>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	f083 0301 	eor.w	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <checkAktifCalisma+0x198>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e002      	b.n	800447e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <checkAktifCalisma+0x198>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <checkAktifCalisma+0x198>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d03a      	beq.n	80044fc <checkAktifCalisma+0x1e0>
 8004486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800448a:	4817      	ldr	r0, [pc, #92]	; (80044e8 <checkAktifCalisma+0x1cc>)
 800448c:	f005 f988 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d132      	bne.n	80044fc <checkAktifCalisma+0x1e0>
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <checkAktifCalisma+0x1dc>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d02e      	beq.n	80044fc <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800449e:	2201      	movs	r2, #1
 80044a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044a4:	480c      	ldr	r0, [pc, #48]	; (80044d8 <checkAktifCalisma+0x1bc>)
 80044a6:	f005 f992 	bl	80097ce <HAL_GPIO_WritePin>
 80044aa:	e02d      	b.n	8004508 <checkAktifCalisma+0x1ec>
 80044ac:	20000caa 	.word	0x20000caa
 80044b0:	20000ca9 	.word	0x20000ca9
 80044b4:	20000cc1 	.word	0x20000cc1
 80044b8:	20000cc2 	.word	0x20000cc2
 80044bc:	20000cc4 	.word	0x20000cc4
 80044c0:	20000cbc 	.word	0x20000cbc
 80044c4:	20000c9f 	.word	0x20000c9f
 80044c8:	20000cc3 	.word	0x20000cc3
 80044cc:	20000c9e 	.word	0x20000c9e
 80044d0:	20000cde 	.word	0x20000cde
 80044d4:	20000cdf 	.word	0x20000cdf
 80044d8:	40010c00 	.word	0x40010c00
 80044dc:	20000ce0 	.word	0x20000ce0
 80044e0:	20000ccb 	.word	0x20000ccb
 80044e4:	20000cc8 	.word	0x20000cc8
 80044e8:	40011000 	.word	0x40011000
 80044ec:	20000c8f 	.word	0x20000c8f
 80044f0:	20000cc6 	.word	0x20000cc6
 80044f4:	20000cc7 	.word	0x20000cc7
 80044f8:	20000c9a 	.word	0x20000c9a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80044fc:	2200      	movs	r2, #0
 80044fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004502:	4860      	ldr	r0, [pc, #384]	; (8004684 <checkAktifCalisma+0x368>)
 8004504:	f005 f963 	bl	80097ce <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004508:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <checkAktifCalisma+0x36c>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <checkAktifCalisma+0x21c>
 8004510:	4b5e      	ldr	r3, [pc, #376]	; (800468c <checkAktifCalisma+0x370>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d007      	beq.n	8004528 <checkAktifCalisma+0x20c>
 8004518:	4b5c      	ldr	r3, [pc, #368]	; (800468c <checkAktifCalisma+0x370>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d003      	beq.n	8004528 <checkAktifCalisma+0x20c>
 8004520:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <checkAktifCalisma+0x374>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004528:	2201      	movs	r2, #1
 800452a:	2104      	movs	r1, #4
 800452c:	4855      	ldr	r0, [pc, #340]	; (8004684 <checkAktifCalisma+0x368>)
 800452e:	f005 f94e 	bl	80097ce <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004532:	4b58      	ldr	r3, [pc, #352]	; (8004694 <checkAktifCalisma+0x378>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004538:	4b56      	ldr	r3, [pc, #344]	; (8004694 <checkAktifCalisma+0x378>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02f      	beq.n	80045a0 <checkAktifCalisma+0x284>
 8004540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004544:	484f      	ldr	r0, [pc, #316]	; (8004684 <checkAktifCalisma+0x368>)
 8004546:	f005 f92b 	bl	80097a0 <HAL_GPIO_ReadPin>
 800454a:	4603      	mov	r3, r0
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <checkAktifCalisma+0x242>
 8004550:	4b51      	ldr	r3, [pc, #324]	; (8004698 <checkAktifCalisma+0x37c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <checkAktifCalisma+0x250>
 800455e:	2102      	movs	r1, #2
 8004560:	484e      	ldr	r0, [pc, #312]	; (800469c <checkAktifCalisma+0x380>)
 8004562:	f005 f91d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d119      	bne.n	80045a0 <checkAktifCalisma+0x284>
 800456c:	4b4c      	ldr	r3, [pc, #304]	; (80046a0 <checkAktifCalisma+0x384>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <checkAktifCalisma+0x284>
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <checkAktifCalisma+0x388>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d011      	beq.n	80045a0 <checkAktifCalisma+0x284>
 800457c:	4b4a      	ldr	r3, [pc, #296]	; (80046a8 <checkAktifCalisma+0x38c>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <checkAktifCalisma+0x284>
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <checkAktifCalisma+0x390>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <checkAktifCalisma+0x394>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a47      	ldr	r2, [pc, #284]	; (80046b4 <checkAktifCalisma+0x398>)
 8004598:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800459a:	4b44      	ldr	r3, [pc, #272]	; (80046ac <checkAktifCalisma+0x390>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <checkAktifCalisma+0x394>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <checkAktifCalisma+0x398>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	4a43      	ldr	r2, [pc, #268]	; (80046b8 <checkAktifCalisma+0x39c>)
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d303      	bcc.n	80045ba <checkAktifCalisma+0x29e>
 80045b2:	4b3e      	ldr	r3, [pc, #248]	; (80046ac <checkAktifCalisma+0x390>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d111      	bne.n	80045de <checkAktifCalisma+0x2c2>
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <checkAktifCalisma+0x384>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f083 0301 	eor.w	r3, r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <checkAktifCalisma+0x2c2>
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <checkAktifCalisma+0x388>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	f083 0301 	eor.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <checkAktifCalisma+0x2c2>
 80045d6:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <checkAktifCalisma+0x38c>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80045de:	2200      	movs	r2, #0
 80045e0:	2104      	movs	r1, #4
 80045e2:	4828      	ldr	r0, [pc, #160]	; (8004684 <checkAktifCalisma+0x368>)
 80045e4:	f005 f8f3 	bl	80097ce <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <checkAktifCalisma+0x378>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <checkAktifCalisma+0x390>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80045f4:	4b31      	ldr	r3, [pc, #196]	; (80046bc <checkAktifCalisma+0x3a0>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80045fc:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <checkAktifCalisma+0x3a4>)
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004602:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <checkAktifCalisma+0x3a0>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d116      	bne.n	8004638 <checkAktifCalisma+0x31c>
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <checkAktifCalisma+0x3a8>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d112      	bne.n	8004638 <checkAktifCalisma+0x31c>
 8004612:	2101      	movs	r1, #1
 8004614:	4821      	ldr	r0, [pc, #132]	; (800469c <checkAktifCalisma+0x380>)
 8004616:	f005 f8c3 	bl	80097a0 <HAL_GPIO_ReadPin>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <checkAktifCalisma+0x31c>
 8004620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004624:	4817      	ldr	r0, [pc, #92]	; (8004684 <checkAktifCalisma+0x368>)
 8004626:	f005 f8bb 	bl	80097a0 <HAL_GPIO_ReadPin>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d103      	bne.n	8004638 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004630:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <checkAktifCalisma+0x3a4>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e011      	b.n	800465c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004638:	4b20      	ldr	r3, [pc, #128]	; (80046bc <checkAktifCalisma+0x3a0>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10d      	bne.n	800465c <checkAktifCalisma+0x340>
 8004640:	2101      	movs	r1, #1
 8004642:	4816      	ldr	r0, [pc, #88]	; (800469c <checkAktifCalisma+0x380>)
 8004644:	f005 f8ac 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <checkAktifCalisma+0x340>
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <checkAktifCalisma+0x3a8>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <checkAktifCalisma+0x3a4>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <checkAktifCalisma+0x3a0>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d134      	bne.n	80046ce <checkAktifCalisma+0x3b2>
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <checkAktifCalisma+0x3a8>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d130      	bne.n	80046ce <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800466c:	2101      	movs	r1, #1
 800466e:	480b      	ldr	r0, [pc, #44]	; (800469c <checkAktifCalisma+0x380>)
 8004670:	f005 f896 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d126      	bne.n	80046c8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <checkAktifCalisma+0x3a4>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e025      	b.n	80046ce <checkAktifCalisma+0x3b2>
 8004682:	bf00      	nop
 8004684:	40010c00 	.word	0x40010c00
 8004688:	20000cc1 	.word	0x20000cc1
 800468c:	20000c9b 	.word	0x20000c9b
 8004690:	20000c9f 	.word	0x20000c9f
 8004694:	20000cc5 	.word	0x20000cc5
 8004698:	20000cc8 	.word	0x20000cc8
 800469c:	40011000 	.word	0x40011000
 80046a0:	20000cde 	.word	0x20000cde
 80046a4:	20000cdf 	.word	0x20000cdf
 80046a8:	20000c8f 	.word	0x20000c8f
 80046ac:	20000cbd 	.word	0x20000cbd
 80046b0:	20000c68 	.word	0x20000c68
 80046b4:	20000c74 	.word	0x20000c74
 80046b8:	20000ca0 	.word	0x20000ca0
 80046bc:	20000c90 	.word	0x20000c90
 80046c0:	20000ce3 	.word	0x20000ce3
 80046c4:	20000c8d 	.word	0x20000c8d
			} else {
				cerceveVar=0;
 80046c8:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <checkAktifCalisma+0x5ac>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80046ce:	4b7f      	ldr	r3, [pc, #508]	; (80048cc <checkAktifCalisma+0x5b0>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d17c      	bne.n	80047d0 <checkAktifCalisma+0x4b4>
 80046d6:	4b7e      	ldr	r3, [pc, #504]	; (80048d0 <checkAktifCalisma+0x5b4>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d078      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
 80046de:	4b7d      	ldr	r3, [pc, #500]	; (80048d4 <checkAktifCalisma+0x5b8>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d074      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80046e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046ea:	487b      	ldr	r0, [pc, #492]	; (80048d8 <checkAktifCalisma+0x5bc>)
 80046ec:	f005 f858 	bl	80097a0 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <checkAktifCalisma+0x3e2>
 80046f6:	4b79      	ldr	r3, [pc, #484]	; (80048dc <checkAktifCalisma+0x5c0>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d068      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80046fe:	4b72      	ldr	r3, [pc, #456]	; (80048c8 <checkAktifCalisma+0x5ac>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d064      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
 8004706:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <checkAktifCalisma+0x5c4>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f083 0301 	eor.w	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05d      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004714:	2104      	movs	r1, #4
 8004716:	4873      	ldr	r0, [pc, #460]	; (80048e4 <checkAktifCalisma+0x5c8>)
 8004718:	f005 f842 	bl	80097a0 <HAL_GPIO_ReadPin>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <checkAktifCalisma+0x40e>
 8004722:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <checkAktifCalisma+0x5cc>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d152      	bne.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800472a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800472e:	486a      	ldr	r0, [pc, #424]	; (80048d8 <checkAktifCalisma+0x5bc>)
 8004730:	f005 f836 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10e      	bne.n	8004758 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800473a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800473e:	4866      	ldr	r0, [pc, #408]	; (80048d8 <checkAktifCalisma+0x5bc>)
 8004740:	f005 f82e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004744:	4603      	mov	r3, r0
 8004746:	2b01      	cmp	r3, #1
 8004748:	d106      	bne.n	8004758 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800474a:	2140      	movs	r1, #64	; 0x40
 800474c:	4865      	ldr	r0, [pc, #404]	; (80048e4 <checkAktifCalisma+0x5c8>)
 800474e:	f005 f827 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d003      	beq.n	8004760 <checkAktifCalisma+0x444>
 8004758:	4b64      	ldr	r3, [pc, #400]	; (80048ec <checkAktifCalisma+0x5d0>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d037      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004760:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <checkAktifCalisma+0x5d4>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f083 0301 	eor.w	r3, r3, #1
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d030      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800476e:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <checkAktifCalisma+0x5d8>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f083 0301 	eor.w	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d029      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800477c:	4b5e      	ldr	r3, [pc, #376]	; (80048f8 <checkAktifCalisma+0x5dc>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f083 0301 	eor.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d022      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800478a:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <checkAktifCalisma+0x5e0>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	f083 0301 	eor.w	r3, r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004798:	4b59      	ldr	r3, [pc, #356]	; (8004900 <checkAktifCalisma+0x5e4>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f083 0301 	eor.w	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d014      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80047a6:	4b57      	ldr	r3, [pc, #348]	; (8004904 <checkAktifCalisma+0x5e8>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	f083 0301 	eor.w	r3, r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80047b4:	2201      	movs	r2, #1
 80047b6:	2102      	movs	r1, #2
 80047b8:	4847      	ldr	r0, [pc, #284]	; (80048d8 <checkAktifCalisma+0x5bc>)
 80047ba:	f005 f808 	bl	80097ce <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80047be:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <checkAktifCalisma+0x5d0>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80047c4:	4b50      	ldr	r3, [pc, #320]	; (8004908 <checkAktifCalisma+0x5ec>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80047ca:	4b50      	ldr	r3, [pc, #320]	; (800490c <checkAktifCalisma+0x5f0>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80047d0:	4b46      	ldr	r3, [pc, #280]	; (80048ec <checkAktifCalisma+0x5d0>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d033      	beq.n	8004840 <checkAktifCalisma+0x524>
 80047d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047dc:	483e      	ldr	r0, [pc, #248]	; (80048d8 <checkAktifCalisma+0x5bc>)
 80047de:	f004 ffdf 	bl	80097a0 <HAL_GPIO_ReadPin>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <checkAktifCalisma+0x4da>
 80047e8:	4b3c      	ldr	r3, [pc, #240]	; (80048dc <checkAktifCalisma+0x5c0>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	f083 0301 	eor.w	r3, r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <checkAktifCalisma+0x4f0>
 80047f6:	2104      	movs	r1, #4
 80047f8:	483a      	ldr	r0, [pc, #232]	; (80048e4 <checkAktifCalisma+0x5c8>)
 80047fa:	f004 ffd1 	bl	80097a0 <HAL_GPIO_ReadPin>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11d      	bne.n	8004840 <checkAktifCalisma+0x524>
 8004804:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <checkAktifCalisma+0x5cc>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d019      	beq.n	8004840 <checkAktifCalisma+0x524>
 800480c:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <checkAktifCalisma+0x5b4>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <checkAktifCalisma+0x524>
 8004814:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <checkAktifCalisma+0x5b8>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d011      	beq.n	8004840 <checkAktifCalisma+0x524>
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <checkAktifCalisma+0x5ac>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <checkAktifCalisma+0x524>
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <checkAktifCalisma+0x5f4>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f083 0301 	eor.w	r3, r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <checkAktifCalisma+0x524>
			timer2=millis;
 8004832:	4b38      	ldr	r3, [pc, #224]	; (8004914 <checkAktifCalisma+0x5f8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a38      	ldr	r2, [pc, #224]	; (8004918 <checkAktifCalisma+0x5fc>)
 8004838:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800483a:	4b35      	ldr	r3, [pc, #212]	; (8004910 <checkAktifCalisma+0x5f4>)
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004840:	4b34      	ldr	r3, [pc, #208]	; (8004914 <checkAktifCalisma+0x5f8>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <checkAktifCalisma+0x5fc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <checkAktifCalisma+0x600>)
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	4293      	cmp	r3, r2
 8004850:	d303      	bcc.n	800485a <checkAktifCalisma+0x53e>
 8004852:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <checkAktifCalisma+0x5f4>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d114      	bne.n	8004884 <checkAktifCalisma+0x568>
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <checkAktifCalisma+0x5b4>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f083 0301 	eor.w	r3, r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <checkAktifCalisma+0x568>
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <checkAktifCalisma+0x5b8>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	f083 0301 	eor.w	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <checkAktifCalisma+0x568>
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <checkAktifCalisma+0x5ac>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f083 0301 	eor.w	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004884:	2200      	movs	r2, #0
 8004886:	2102      	movs	r1, #2
 8004888:	4813      	ldr	r0, [pc, #76]	; (80048d8 <checkAktifCalisma+0x5bc>)
 800488a:	f004 ffa0 	bl	80097ce <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800488e:	4b17      	ldr	r3, [pc, #92]	; (80048ec <checkAktifCalisma+0x5d0>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8004894:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <checkAktifCalisma+0x5f4>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <checkAktifCalisma+0x5d0>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d040      	beq.n	8004924 <checkAktifCalisma+0x608>
 80048a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048a6:	480f      	ldr	r0, [pc, #60]	; (80048e4 <checkAktifCalisma+0x5c8>)
 80048a8:	f004 ff7a 	bl	80097a0 <HAL_GPIO_ReadPin>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d138      	bne.n	8004924 <checkAktifCalisma+0x608>
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <checkAktifCalisma+0x604>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d034      	beq.n	8004924 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80048ba:	2201      	movs	r2, #1
 80048bc:	2101      	movs	r1, #1
 80048be:	4806      	ldr	r0, [pc, #24]	; (80048d8 <checkAktifCalisma+0x5bc>)
 80048c0:	f004 ff85 	bl	80097ce <HAL_GPIO_WritePin>
 80048c4:	e033      	b.n	800492e <checkAktifCalisma+0x612>
 80048c6:	bf00      	nop
 80048c8:	20000ce3 	.word	0x20000ce3
 80048cc:	20000ca9 	.word	0x20000ca9
 80048d0:	20000cde 	.word	0x20000cde
 80048d4:	20000cdf 	.word	0x20000cdf
 80048d8:	40010c00 	.word	0x40010c00
 80048dc:	20000cc9 	.word	0x20000cc9
 80048e0:	20000cdd 	.word	0x20000cdd
 80048e4:	40011000 	.word	0x40011000
 80048e8:	20000c92 	.word	0x20000c92
 80048ec:	20000cc4 	.word	0x20000cc4
 80048f0:	20000cc1 	.word	0x20000cc1
 80048f4:	20000cc5 	.word	0x20000cc5
 80048f8:	20000cc2 	.word	0x20000cc2
 80048fc:	20000cc3 	.word	0x20000cc3
 8004900:	20000cc6 	.word	0x20000cc6
 8004904:	20000cc7 	.word	0x20000cc7
 8004908:	20000ccc 	.word	0x20000ccc
 800490c:	20000ced 	.word	0x20000ced
 8004910:	20000cbc 	.word	0x20000cbc
 8004914:	20000c68 	.word	0x20000c68
 8004918:	20000c74 	.word	0x20000c74
 800491c:	20000ca1 	.word	0x20000ca1
 8004920:	20000c91 	.word	0x20000c91
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004924:	2200      	movs	r2, #0
 8004926:	2101      	movs	r1, #1
 8004928:	4836      	ldr	r0, [pc, #216]	; (8004a04 <checkAktifCalisma+0x6e8>)
 800492a:	f004 ff50 	bl	80097ce <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800492e:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <checkAktifCalisma+0x6ec>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 8080 	bne.w	8004a38 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <checkAktifCalisma+0x6f0>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d003      	beq.n	8004948 <checkAktifCalisma+0x62c>
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <checkAktifCalisma+0x6f0>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d177      	bne.n	8004a38 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8004948:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <checkAktifCalisma+0x6f4>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d073      	beq.n	8004a38 <checkAktifCalisma+0x71c>
 8004950:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <checkAktifCalisma+0x6f8>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d06f      	beq.n	8004a38 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800495c:	4829      	ldr	r0, [pc, #164]	; (8004a04 <checkAktifCalisma+0x6e8>)
 800495e:	f004 ff1f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d167      	bne.n	8004a38 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800496c:	482a      	ldr	r0, [pc, #168]	; (8004a18 <checkAktifCalisma+0x6fc>)
 800496e:	f004 ff17 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <checkAktifCalisma+0x664>
 8004978:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <checkAktifCalisma+0x700>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d15b      	bne.n	8004a38 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004980:	2140      	movs	r1, #64	; 0x40
 8004982:	4825      	ldr	r0, [pc, #148]	; (8004a18 <checkAktifCalisma+0x6fc>)
 8004984:	f004 ff0c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10f      	bne.n	80049ae <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800498e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004992:	481c      	ldr	r0, [pc, #112]	; (8004a04 <checkAktifCalisma+0x6e8>)
 8004994:	f004 ff04 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800499e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049a2:	4818      	ldr	r0, [pc, #96]	; (8004a04 <checkAktifCalisma+0x6e8>)
 80049a4:	f004 fefc 	bl	80097a0 <HAL_GPIO_ReadPin>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d003      	beq.n	80049b6 <checkAktifCalisma+0x69a>
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <checkAktifCalisma+0x704>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d040      	beq.n	8004a38 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <checkAktifCalisma+0x708>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d039      	beq.n	8004a38 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80049c4:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <checkAktifCalisma+0x70c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d032      	beq.n	8004a38 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <checkAktifCalisma+0x710>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f083 0301 	eor.w	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02b      	beq.n	8004a38 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <checkAktifCalisma+0x714>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f083 0301 	eor.w	r3, r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d024      	beq.n	8004a38 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80049ee:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <checkAktifCalisma+0x718>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	f083 0301 	eor.w	r3, r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01d      	beq.n	8004a38 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <checkAktifCalisma+0x704>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e01c      	b.n	8004a3e <checkAktifCalisma+0x722>
 8004a04:	40010c00 	.word	0x40010c00
 8004a08:	20000ca9 	.word	0x20000ca9
 8004a0c:	20000c9b 	.word	0x20000c9b
 8004a10:	20000cde 	.word	0x20000cde
 8004a14:	20000cdf 	.word	0x20000cdf
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	20000c9c 	.word	0x20000c9c
 8004a20:	20000cc2 	.word	0x20000cc2
 8004a24:	20000cc1 	.word	0x20000cc1
 8004a28:	20000cc5 	.word	0x20000cc5
 8004a2c:	20000cc4 	.word	0x20000cc4
 8004a30:	20000cc3 	.word	0x20000cc3
 8004a34:	20000cc7 	.word	0x20000cc7
		} else {
			devmotoryukaricalisiyor=0;
 8004a38:	4b64      	ldr	r3, [pc, #400]	; (8004bcc <checkAktifCalisma+0x8b0>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8004a3e:	4b63      	ldr	r3, [pc, #396]	; (8004bcc <checkAktifCalisma+0x8b0>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004a46:	2201      	movs	r2, #1
 8004a48:	2120      	movs	r1, #32
 8004a4a:	4861      	ldr	r0, [pc, #388]	; (8004bd0 <checkAktifCalisma+0x8b4>)
 8004a4c:	f004 febf 	bl	80097ce <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8004a50:	4b60      	ldr	r3, [pc, #384]	; (8004bd4 <checkAktifCalisma+0x8b8>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004a56:	4b5f      	ldr	r3, [pc, #380]	; (8004bd4 <checkAktifCalisma+0x8b8>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d025      	beq.n	8004aaa <checkAktifCalisma+0x78e>
 8004a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a62:	485d      	ldr	r0, [pc, #372]	; (8004bd8 <checkAktifCalisma+0x8bc>)
 8004a64:	f004 fe9c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d007      	beq.n	8004a7e <checkAktifCalisma+0x762>
 8004a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a72:	4857      	ldr	r0, [pc, #348]	; (8004bd0 <checkAktifCalisma+0x8b4>)
 8004a74:	f004 fe94 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d115      	bne.n	8004aaa <checkAktifCalisma+0x78e>
 8004a7e:	4b57      	ldr	r3, [pc, #348]	; (8004bdc <checkAktifCalisma+0x8c0>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <checkAktifCalisma+0x78e>
 8004a86:	4b56      	ldr	r3, [pc, #344]	; (8004be0 <checkAktifCalisma+0x8c4>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <checkAktifCalisma+0x78e>
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <checkAktifCalisma+0x8c8>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	f083 0301 	eor.w	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <checkAktifCalisma+0x78e>
			timer2=millis;
 8004a9c:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <checkAktifCalisma+0x8cc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	; (8004bec <checkAktifCalisma+0x8d0>)
 8004aa2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8004aa4:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <checkAktifCalisma+0x8c8>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004aaa:	4b4f      	ldr	r3, [pc, #316]	; (8004be8 <checkAktifCalisma+0x8cc>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <checkAktifCalisma+0x8d0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <checkAktifCalisma+0x8d4>)
 8004ab6:	7812      	ldrb	r2, [r2, #0]
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d303      	bcc.n	8004ac4 <checkAktifCalisma+0x7a8>
 8004abc:	4b49      	ldr	r3, [pc, #292]	; (8004be4 <checkAktifCalisma+0x8c8>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <checkAktifCalisma+0x7c4>
 8004ac4:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <checkAktifCalisma+0x8c0>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	f083 0301 	eor.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <checkAktifCalisma+0x7c4>
 8004ad2:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <checkAktifCalisma+0x8c4>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f083 0301 	eor.w	r3, r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	483a      	ldr	r0, [pc, #232]	; (8004bd0 <checkAktifCalisma+0x8b4>)
 8004ae6:	f004 fe72 	bl	80097ce <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8004aea:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <checkAktifCalisma+0x8b8>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8004af0:	4b3c      	ldr	r3, [pc, #240]	; (8004be4 <checkAktifCalisma+0x8c8>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8004af6:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <checkAktifCalisma+0x8d8>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 8088 	bne.w	8004c10 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b00:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <checkAktifCalisma+0x8dc>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d003      	beq.n	8004b10 <checkAktifCalisma+0x7f4>
 8004b08:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <checkAktifCalisma+0x8dc>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d17f      	bne.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8004b10:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <checkAktifCalisma+0x8c0>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d07b      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
 8004b18:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <checkAktifCalisma+0x8c4>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d077      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	482b      	ldr	r0, [pc, #172]	; (8004bd0 <checkAktifCalisma+0x8b4>)
 8004b24:	f004 fe3c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d170      	bne.n	8004c10 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b32:	4827      	ldr	r0, [pc, #156]	; (8004bd0 <checkAktifCalisma+0x8b4>)
 8004b34:	f004 fe34 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <checkAktifCalisma+0x82a>
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <checkAktifCalisma+0x8e0>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d164      	bne.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b4a:	4823      	ldr	r0, [pc, #140]	; (8004bd8 <checkAktifCalisma+0x8bc>)
 8004b4c:	f004 fe28 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10f      	bne.n	8004b76 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b5a:	481f      	ldr	r0, [pc, #124]	; (8004bd8 <checkAktifCalisma+0x8bc>)
 8004b5c:	f004 fe20 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b6a:	481b      	ldr	r0, [pc, #108]	; (8004bd8 <checkAktifCalisma+0x8bc>)
 8004b6c:	f004 fe18 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d003      	beq.n	8004b7e <checkAktifCalisma+0x862>
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <checkAktifCalisma+0x8e4>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d048      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <checkAktifCalisma+0x8e8>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	f083 0301 	eor.w	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d041      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <checkAktifCalisma+0x8ec>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f083 0301 	eor.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d03a      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <checkAktifCalisma+0x8f0>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f083 0301 	eor.w	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d033      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <checkAktifCalisma+0x8b8>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02c      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <checkAktifCalisma+0x8b0>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f083 0301 	eor.w	r3, r3, #1
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d025      	beq.n	8004c10 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <checkAktifCalisma+0x8e4>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e024      	b.n	8004c16 <checkAktifCalisma+0x8fa>
 8004bcc:	20000cc2 	.word	0x20000cc2
 8004bd0:	40011000 	.word	0x40011000
 8004bd4:	20000cc6 	.word	0x20000cc6
 8004bd8:	40010c00 	.word	0x40010c00
 8004bdc:	20000cde 	.word	0x20000cde
 8004be0:	20000cdf 	.word	0x20000cdf
 8004be4:	20000cbe 	.word	0x20000cbe
 8004be8:	20000c68 	.word	0x20000c68
 8004bec:	20000c74 	.word	0x20000c74
 8004bf0:	20000ca2 	.word	0x20000ca2
 8004bf4:	20000ca9 	.word	0x20000ca9
 8004bf8:	20000c9b 	.word	0x20000c9b
 8004bfc:	20000c9d 	.word	0x20000c9d
 8004c00:	20000cc3 	.word	0x20000cc3
 8004c04:	20000cc1 	.word	0x20000cc1
 8004c08:	20000cc5 	.word	0x20000cc5
 8004c0c:	20000cc4 	.word	0x20000cc4
		} else {
			devmotorasagicalisiyor=0;
 8004c10:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <checkAktifCalisma+0xb50>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8004c16:	4b95      	ldr	r3, [pc, #596]	; (8004e6c <checkAktifCalisma+0xb50>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2110      	movs	r1, #16
 8004c22:	4893      	ldr	r0, [pc, #588]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004c24:	f004 fdd3 	bl	80097ce <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8004c28:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <checkAktifCalisma+0xb58>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004c2e:	4b91      	ldr	r3, [pc, #580]	; (8004e74 <checkAktifCalisma+0xb58>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d024      	beq.n	8004c80 <checkAktifCalisma+0x964>
 8004c36:	2140      	movs	r1, #64	; 0x40
 8004c38:	488d      	ldr	r0, [pc, #564]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004c3a:	f004 fdb1 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d007      	beq.n	8004c54 <checkAktifCalisma+0x938>
 8004c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c48:	4889      	ldr	r0, [pc, #548]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004c4a:	f004 fda9 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d115      	bne.n	8004c80 <checkAktifCalisma+0x964>
 8004c54:	4b88      	ldr	r3, [pc, #544]	; (8004e78 <checkAktifCalisma+0xb5c>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d011      	beq.n	8004c80 <checkAktifCalisma+0x964>
 8004c5c:	4b87      	ldr	r3, [pc, #540]	; (8004e7c <checkAktifCalisma+0xb60>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00d      	beq.n	8004c80 <checkAktifCalisma+0x964>
 8004c64:	4b86      	ldr	r3, [pc, #536]	; (8004e80 <checkAktifCalisma+0xb64>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f083 0301 	eor.w	r3, r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d006      	beq.n	8004c80 <checkAktifCalisma+0x964>
			timer2=millis;
 8004c72:	4b84      	ldr	r3, [pc, #528]	; (8004e84 <checkAktifCalisma+0xb68>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a84      	ldr	r2, [pc, #528]	; (8004e88 <checkAktifCalisma+0xb6c>)
 8004c78:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8004c7a:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <checkAktifCalisma+0xb64>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004c80:	4b80      	ldr	r3, [pc, #512]	; (8004e84 <checkAktifCalisma+0xb68>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b80      	ldr	r3, [pc, #512]	; (8004e88 <checkAktifCalisma+0xb6c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	4a80      	ldr	r2, [pc, #512]	; (8004e8c <checkAktifCalisma+0xb70>)
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d303      	bcc.n	8004c9a <checkAktifCalisma+0x97e>
 8004c92:	4b7b      	ldr	r3, [pc, #492]	; (8004e80 <checkAktifCalisma+0xb64>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <checkAktifCalisma+0x99a>
 8004c9a:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <checkAktifCalisma+0xb5c>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f083 0301 	eor.w	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <checkAktifCalisma+0x99a>
 8004ca8:	4b74      	ldr	r3, [pc, #464]	; (8004e7c <checkAktifCalisma+0xb60>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f083 0301 	eor.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2110      	movs	r1, #16
 8004cba:	486d      	ldr	r0, [pc, #436]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004cbc:	f004 fd87 	bl	80097ce <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8004cc0:	4b6c      	ldr	r3, [pc, #432]	; (8004e74 <checkAktifCalisma+0xb58>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8004cc6:	4b6e      	ldr	r3, [pc, #440]	; (8004e80 <checkAktifCalisma+0xb64>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cd0:	486f      	ldr	r0, [pc, #444]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004cd2:	f004 fd65 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d120      	bne.n	8004d1e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce0:	486b      	ldr	r0, [pc, #428]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004ce2:	f004 fd5d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d118      	bne.n	8004d1e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004cec:	2104      	movs	r1, #4
 8004cee:	4868      	ldr	r0, [pc, #416]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004cf0:	f004 fd56 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d111      	bne.n	8004d1e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	4864      	ldr	r0, [pc, #400]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004cfe:	f004 fd4f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4861      	ldr	r0, [pc, #388]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004d0c:	f004 fd48 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <checkAktifCalisma+0xa02>
			makineStop=1;
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <checkAktifCalisma+0xb78>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e002      	b.n	8004d24 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004d1e:	4b5d      	ldr	r3, [pc, #372]	; (8004e94 <checkAktifCalisma+0xb78>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d24:	4b5c      	ldr	r3, [pc, #368]	; (8004e98 <checkAktifCalisma+0xb7c>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d144      	bne.n	8004db6 <checkAktifCalisma+0xa9a>
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <checkAktifCalisma+0xb80>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d003      	beq.n	8004d3c <checkAktifCalisma+0xa20>
 8004d34:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <checkAktifCalisma+0xb80>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d13c      	bne.n	8004db6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	484c      	ldr	r0, [pc, #304]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004d40:	f004 fd2e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <checkAktifCalisma+0xa36>
 8004d4a:	4b55      	ldr	r3, [pc, #340]	; (8004ea0 <checkAktifCalisma+0xb84>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <checkAktifCalisma+0xa4e>
 8004d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d56:	484e      	ldr	r0, [pc, #312]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004d58:	f004 fd22 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d129      	bne.n	8004db6 <checkAktifCalisma+0xa9a>
 8004d62:	4b4f      	ldr	r3, [pc, #316]	; (8004ea0 <checkAktifCalisma+0xb84>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d125      	bne.n	8004db6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	4840      	ldr	r0, [pc, #256]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004d6e:	f004 fd17 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d003      	beq.n	8004d80 <checkAktifCalisma+0xa64>
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <checkAktifCalisma+0xb88>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11a      	bne.n	8004db6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d80:	2102      	movs	r1, #2
 8004d82:	483b      	ldr	r0, [pc, #236]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004d84:	f004 fd0c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004d8e:	4b46      	ldr	r3, [pc, #280]	; (8004ea8 <checkAktifCalisma+0xb8c>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f083 0301 	eor.w	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004d9c:	4b3d      	ldr	r3, [pc, #244]	; (8004e94 <checkAktifCalisma+0xb78>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004da4:	4b41      	ldr	r3, [pc, #260]	; (8004eac <checkAktifCalisma+0xb90>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004daa:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <checkAktifCalisma+0xb68>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a40      	ldr	r2, [pc, #256]	; (8004eb0 <checkAktifCalisma+0xb94>)
 8004db0:	6013      	str	r3, [r2, #0]
			bekle();
 8004db2:	f7ff f901 	bl	8003fb8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004db6:	4b33      	ldr	r3, [pc, #204]	; (8004e84 <checkAktifCalisma+0xb68>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <checkAktifCalisma+0xb94>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <checkAktifCalisma+0xb98>)
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d211      	bcs.n	8004dec <checkAktifCalisma+0xad0>
 8004dc8:	2104      	movs	r1, #4
 8004dca:	4829      	ldr	r0, [pc, #164]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004dcc:	f004 fce8 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <checkAktifCalisma+0xad0>
 8004dd6:	4b33      	ldr	r3, [pc, #204]	; (8004ea4 <checkAktifCalisma+0xb88>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d006      	beq.n	8004dec <checkAktifCalisma+0xad0>
 8004dde:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <checkAktifCalisma+0xb78>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	f083 0301 	eor.w	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004dec:	4b2f      	ldr	r3, [pc, #188]	; (8004eac <checkAktifCalisma+0xb90>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004df2:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <checkAktifCalisma+0xb7c>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d160      	bne.n	8004ebc <checkAktifCalisma+0xba0>
 8004dfa:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <checkAktifCalisma+0xb80>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d003      	beq.n	8004e0a <checkAktifCalisma+0xaee>
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <checkAktifCalisma+0xb80>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d158      	bne.n	8004ebc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	4818      	ldr	r0, [pc, #96]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004e0e:	f004 fcc7 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d003      	beq.n	8004e20 <checkAktifCalisma+0xb04>
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <checkAktifCalisma+0xb88>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d14d      	bne.n	8004ebc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e20:	2102      	movs	r1, #2
 8004e22:	4813      	ldr	r0, [pc, #76]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004e24:	f004 fcbc 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d146      	bne.n	8004ebc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	480f      	ldr	r0, [pc, #60]	; (8004e70 <checkAktifCalisma+0xb54>)
 8004e32:	f004 fcb5 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <checkAktifCalisma+0xb28>
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <checkAktifCalisma+0xb84>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <checkAktifCalisma+0xb40>
 8004e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e48:	4811      	ldr	r0, [pc, #68]	; (8004e90 <checkAktifCalisma+0xb74>)
 8004e4a:	f004 fca9 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d133      	bne.n	8004ebc <checkAktifCalisma+0xba0>
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <checkAktifCalisma+0xb84>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d12f      	bne.n	8004ebc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <checkAktifCalisma+0xb78>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d02b      	beq.n	8004ebc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <checkAktifCalisma+0xb9c>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e02a      	b.n	8004ec2 <checkAktifCalisma+0xba6>
 8004e6c:	20000cc3 	.word	0x20000cc3
 8004e70:	40011000 	.word	0x40011000
 8004e74:	20000cc7 	.word	0x20000cc7
 8004e78:	20000cde 	.word	0x20000cde
 8004e7c:	20000cdf 	.word	0x20000cdf
 8004e80:	20000cbf 	.word	0x20000cbf
 8004e84:	20000c68 	.word	0x20000c68
 8004e88:	20000c74 	.word	0x20000c74
 8004e8c:	20000ca2 	.word	0x20000ca2
 8004e90:	40010c00 	.word	0x40010c00
 8004e94:	20000cce 	.word	0x20000cce
 8004e98:	20000c95 	.word	0x20000c95
 8004e9c:	20000c94 	.word	0x20000c94
 8004ea0:	20000c98 	.word	0x20000c98
 8004ea4:	20000c92 	.word	0x20000c92
 8004ea8:	20000cbb 	.word	0x20000cbb
 8004eac:	20000ccf 	.word	0x20000ccf
 8004eb0:	20000c6c 	.word	0x20000c6c
 8004eb4:	20000ca5 	.word	0x20000ca5
 8004eb8:	20000cd0 	.word	0x20000cd0
		} else {
			kapi1butonkontrol=0;
 8004ebc:	4b8b      	ldr	r3, [pc, #556]	; (80050ec <checkAktifCalisma+0xdd0>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ec2:	4b8b      	ldr	r3, [pc, #556]	; (80050f0 <checkAktifCalisma+0xdd4>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d121      	bne.n	8004f0e <checkAktifCalisma+0xbf2>
 8004eca:	4b8a      	ldr	r3, [pc, #552]	; (80050f4 <checkAktifCalisma+0xdd8>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d003      	beq.n	8004eda <checkAktifCalisma+0xbbe>
 8004ed2:	4b88      	ldr	r3, [pc, #544]	; (80050f4 <checkAktifCalisma+0xdd8>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d119      	bne.n	8004f0e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004eda:	2104      	movs	r1, #4
 8004edc:	4886      	ldr	r0, [pc, #536]	; (80050f8 <checkAktifCalisma+0xddc>)
 8004ede:	f004 fc5f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d003      	beq.n	8004ef0 <checkAktifCalisma+0xbd4>
 8004ee8:	4b84      	ldr	r3, [pc, #528]	; (80050fc <checkAktifCalisma+0xde0>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10e      	bne.n	8004f0e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	4881      	ldr	r0, [pc, #516]	; (80050f8 <checkAktifCalisma+0xddc>)
 8004ef4:	f004 fc54 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004efe:	4b80      	ldr	r3, [pc, #512]	; (8005100 <checkAktifCalisma+0xde4>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004f06:	4b7f      	ldr	r3, [pc, #508]	; (8005104 <checkAktifCalisma+0xde8>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e002      	b.n	8004f14 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	; (8005104 <checkAktifCalisma+0xde8>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004f14:	4b75      	ldr	r3, [pc, #468]	; (80050ec <checkAktifCalisma+0xdd0>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d107      	bne.n	8004f2c <checkAktifCalisma+0xc10>
 8004f1c:	4b79      	ldr	r3, [pc, #484]	; (8005104 <checkAktifCalisma+0xde8>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <checkAktifCalisma+0xc10>
 8004f24:	4b78      	ldr	r3, [pc, #480]	; (8005108 <checkAktifCalisma+0xdec>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	4876      	ldr	r0, [pc, #472]	; (800510c <checkAktifCalisma+0xdf0>)
 8004f32:	f004 fc4c 	bl	80097ce <HAL_GPIO_WritePin>
 8004f36:	e004      	b.n	8004f42 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	4873      	ldr	r0, [pc, #460]	; (800510c <checkAktifCalisma+0xdf0>)
 8004f3e:	f004 fc46 	bl	80097ce <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f42:	4b73      	ldr	r3, [pc, #460]	; (8005110 <checkAktifCalisma+0xdf4>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d141      	bne.n	8004fce <checkAktifCalisma+0xcb2>
 8004f4a:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <checkAktifCalisma+0xdd8>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <checkAktifCalisma+0xc3e>
 8004f52:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <checkAktifCalisma+0xdd8>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d139      	bne.n	8004fce <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f5e:	4866      	ldr	r0, [pc, #408]	; (80050f8 <checkAktifCalisma+0xddc>)
 8004f60:	f004 fc1e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <checkAktifCalisma+0xc56>
 8004f6a:	4b6a      	ldr	r3, [pc, #424]	; (8005114 <checkAktifCalisma+0xdf8>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <checkAktifCalisma+0xc6e>
 8004f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f76:	4868      	ldr	r0, [pc, #416]	; (8005118 <checkAktifCalisma+0xdfc>)
 8004f78:	f004 fc12 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d125      	bne.n	8004fce <checkAktifCalisma+0xcb2>
 8004f82:	4b64      	ldr	r3, [pc, #400]	; (8005114 <checkAktifCalisma+0xdf8>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d121      	bne.n	8004fce <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004f8a:	2102      	movs	r1, #2
 8004f8c:	485a      	ldr	r0, [pc, #360]	; (80050f8 <checkAktifCalisma+0xddc>)
 8004f8e:	f004 fc07 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d11a      	bne.n	8004fce <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004f98:	2104      	movs	r1, #4
 8004f9a:	4857      	ldr	r0, [pc, #348]	; (80050f8 <checkAktifCalisma+0xddc>)
 8004f9c:	f004 fc00 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d113      	bne.n	8004fce <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004fa6:	4b56      	ldr	r3, [pc, #344]	; (8005100 <checkAktifCalisma+0xde4>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00f      	beq.n	8004fce <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004fae:	4b5b      	ldr	r3, [pc, #364]	; (800511c <checkAktifCalisma+0xe00>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	f083 0301 	eor.w	r3, r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004fbc:	4b58      	ldr	r3, [pc, #352]	; (8005120 <checkAktifCalisma+0xe04>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004fc2:	4b58      	ldr	r3, [pc, #352]	; (8005124 <checkAktifCalisma+0xe08>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a58      	ldr	r2, [pc, #352]	; (8005128 <checkAktifCalisma+0xe0c>)
 8004fc8:	6013      	str	r3, [r2, #0]
			bekle();
 8004fca:	f7fe fff5 	bl	8003fb8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004fce:	4b55      	ldr	r3, [pc, #340]	; (8005124 <checkAktifCalisma+0xe08>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b55      	ldr	r3, [pc, #340]	; (8005128 <checkAktifCalisma+0xe0c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	4a54      	ldr	r2, [pc, #336]	; (800512c <checkAktifCalisma+0xe10>)
 8004fda:	7812      	ldrb	r2, [r2, #0]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d20d      	bcs.n	8004ffc <checkAktifCalisma+0xce0>
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4845      	ldr	r0, [pc, #276]	; (80050f8 <checkAktifCalisma+0xddc>)
 8004fe4:	f004 fbdc 	bl	80097a0 <HAL_GPIO_ReadPin>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <checkAktifCalisma+0xce0>
 8004fee:	4b44      	ldr	r3, [pc, #272]	; (8005100 <checkAktifCalisma+0xde4>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f083 0301 	eor.w	r3, r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004ffc:	4b48      	ldr	r3, [pc, #288]	; (8005120 <checkAktifCalisma+0xe04>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <checkAktifCalisma+0xdf4>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d135      	bne.n	8005076 <checkAktifCalisma+0xd5a>
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <checkAktifCalisma+0xdd8>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d003      	beq.n	800501a <checkAktifCalisma+0xcfe>
 8005012:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <checkAktifCalisma+0xdd8>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d12d      	bne.n	8005076 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800501a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800501e:	4836      	ldr	r0, [pc, #216]	; (80050f8 <checkAktifCalisma+0xddc>)
 8005020:	f004 fbbe 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <checkAktifCalisma+0xd16>
 800502a:	4b3a      	ldr	r3, [pc, #232]	; (8005114 <checkAktifCalisma+0xdf8>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <checkAktifCalisma+0xd2e>
 8005032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005036:	4838      	ldr	r0, [pc, #224]	; (8005118 <checkAktifCalisma+0xdfc>)
 8005038:	f004 fbb2 	bl	80097a0 <HAL_GPIO_ReadPin>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d119      	bne.n	8005076 <checkAktifCalisma+0xd5a>
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <checkAktifCalisma+0xdf8>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d115      	bne.n	8005076 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800504a:	2102      	movs	r1, #2
 800504c:	482a      	ldr	r0, [pc, #168]	; (80050f8 <checkAktifCalisma+0xddc>)
 800504e:	f004 fba7 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10e      	bne.n	8005076 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005058:	2104      	movs	r1, #4
 800505a:	4827      	ldr	r0, [pc, #156]	; (80050f8 <checkAktifCalisma+0xddc>)
 800505c:	f004 fba0 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <checkAktifCalisma+0xde4>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800506e:	4b30      	ldr	r3, [pc, #192]	; (8005130 <checkAktifCalisma+0xe14>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e002      	b.n	800507c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005076:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <checkAktifCalisma+0xe14>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <checkAktifCalisma+0xdf4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d11d      	bne.n	80050c0 <checkAktifCalisma+0xda4>
 8005084:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <checkAktifCalisma+0xdd8>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d003      	beq.n	8005094 <checkAktifCalisma+0xd78>
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <checkAktifCalisma+0xdd8>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d115      	bne.n	80050c0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005094:	2102      	movs	r1, #2
 8005096:	4818      	ldr	r0, [pc, #96]	; (80050f8 <checkAktifCalisma+0xddc>)
 8005098:	f004 fb82 	bl	80097a0 <HAL_GPIO_ReadPin>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10e      	bne.n	80050c0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80050a2:	2104      	movs	r1, #4
 80050a4:	4814      	ldr	r0, [pc, #80]	; (80050f8 <checkAktifCalisma+0xddc>)
 80050a6:	f004 fb7b 	bl	80097a0 <HAL_GPIO_ReadPin>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <checkAktifCalisma+0xde4>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <checkAktifCalisma+0xe18>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e002      	b.n	80050c6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80050c0:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <checkAktifCalisma+0xe18>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <checkAktifCalisma+0xe14>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <checkAktifCalisma+0xdc2>
 80050ce:	4b19      	ldr	r3, [pc, #100]	; (8005134 <checkAktifCalisma+0xe18>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <checkAktifCalisma+0xdc2>
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <checkAktifCalisma+0xe04>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02c      	beq.n	8005138 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80050de:	2201      	movs	r2, #1
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	480a      	ldr	r0, [pc, #40]	; (800510c <checkAktifCalisma+0xdf0>)
 80050e4:	f004 fb73 	bl	80097ce <HAL_GPIO_WritePin>
 80050e8:	e02b      	b.n	8005142 <checkAktifCalisma+0xe26>
 80050ea:	bf00      	nop
 80050ec:	20000cd0 	.word	0x20000cd0
 80050f0:	20000c95 	.word	0x20000c95
 80050f4:	20000c94 	.word	0x20000c94
 80050f8:	40011000 	.word	0x40011000
 80050fc:	20000c92 	.word	0x20000c92
 8005100:	20000cce 	.word	0x20000cce
 8005104:	20000cd1 	.word	0x20000cd1
 8005108:	20000ccf 	.word	0x20000ccf
 800510c:	40010800 	.word	0x40010800
 8005110:	20000c96 	.word	0x20000c96
 8005114:	20000c98 	.word	0x20000c98
 8005118:	40010c00 	.word	0x40010c00
 800511c:	20000cbb 	.word	0x20000cbb
 8005120:	20000cd2 	.word	0x20000cd2
 8005124:	20000c68 	.word	0x20000c68
 8005128:	20000c6c 	.word	0x20000c6c
 800512c:	20000ca6 	.word	0x20000ca6
 8005130:	20000cd3 	.word	0x20000cd3
 8005134:	20000cd4 	.word	0x20000cd4
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005138:	2200      	movs	r2, #0
 800513a:	2140      	movs	r1, #64	; 0x40
 800513c:	488d      	ldr	r0, [pc, #564]	; (8005374 <checkAktifCalisma+0x1058>)
 800513e:	f004 fb46 	bl	80097ce <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005142:	4b8d      	ldr	r3, [pc, #564]	; (8005378 <checkAktifCalisma+0x105c>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <checkAktifCalisma+0xe36>
 800514a:	4b8b      	ldr	r3, [pc, #556]	; (8005378 <checkAktifCalisma+0x105c>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d115      	bne.n	800517e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005152:	2104      	movs	r1, #4
 8005154:	4889      	ldr	r0, [pc, #548]	; (800537c <checkAktifCalisma+0x1060>)
 8005156:	f004 fb23 	bl	80097a0 <HAL_GPIO_ReadPin>
 800515a:	4603      	mov	r3, r0
 800515c:	2b01      	cmp	r3, #1
 800515e:	d003      	beq.n	8005168 <checkAktifCalisma+0xe4c>
 8005160:	4b87      	ldr	r3, [pc, #540]	; (8005380 <checkAktifCalisma+0x1064>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005168:	2102      	movs	r1, #2
 800516a:	4884      	ldr	r0, [pc, #528]	; (800537c <checkAktifCalisma+0x1060>)
 800516c:	f004 fb18 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005176:	4b83      	ldr	r3, [pc, #524]	; (8005384 <checkAktifCalisma+0x1068>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e002      	b.n	8005184 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800517e:	4b81      	ldr	r3, [pc, #516]	; (8005384 <checkAktifCalisma+0x1068>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005184:	4b7c      	ldr	r3, [pc, #496]	; (8005378 <checkAktifCalisma+0x105c>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d003      	beq.n	8005194 <checkAktifCalisma+0xe78>
 800518c:	4b7a      	ldr	r3, [pc, #488]	; (8005378 <checkAktifCalisma+0x105c>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d111      	bne.n	80051b8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005194:	2102      	movs	r1, #2
 8005196:	4879      	ldr	r0, [pc, #484]	; (800537c <checkAktifCalisma+0x1060>)
 8005198:	f004 fb02 	bl	80097a0 <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d10a      	bne.n	80051b8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80051a2:	2104      	movs	r1, #4
 80051a4:	4875      	ldr	r0, [pc, #468]	; (800537c <checkAktifCalisma+0x1060>)
 80051a6:	f004 fafb 	bl	80097a0 <HAL_GPIO_ReadPin>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80051b0:	4b75      	ldr	r3, [pc, #468]	; (8005388 <checkAktifCalisma+0x106c>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e002      	b.n	80051be <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80051b8:	4b73      	ldr	r3, [pc, #460]	; (8005388 <checkAktifCalisma+0x106c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80051be:	4b71      	ldr	r3, [pc, #452]	; (8005384 <checkAktifCalisma+0x1068>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00f      	beq.n	80051e6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80051c6:	4b71      	ldr	r3, [pc, #452]	; (800538c <checkAktifCalisma+0x1070>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10b      	bne.n	80051e6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80051ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051d2:	486f      	ldr	r0, [pc, #444]	; (8005390 <checkAktifCalisma+0x1074>)
 80051d4:	f004 fae4 	bl	80097a0 <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80051de:	4b6d      	ldr	r3, [pc, #436]	; (8005394 <checkAktifCalisma+0x1078>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e002      	b.n	80051ec <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80051e6:	4b6b      	ldr	r3, [pc, #428]	; (8005394 <checkAktifCalisma+0x1078>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80051ec:	4b66      	ldr	r3, [pc, #408]	; (8005388 <checkAktifCalisma+0x106c>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80051f4:	4b65      	ldr	r3, [pc, #404]	; (800538c <checkAktifCalisma+0x1070>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10b      	bne.n	8005214 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80051fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005200:	4863      	ldr	r0, [pc, #396]	; (8005390 <checkAktifCalisma+0x1074>)
 8005202:	f004 facd 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 800520c:	4b62      	ldr	r3, [pc, #392]	; (8005398 <checkAktifCalisma+0x107c>)
 800520e:	2201      	movs	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e002      	b.n	800521a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005214:	4b60      	ldr	r3, [pc, #384]	; (8005398 <checkAktifCalisma+0x107c>)
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800521a:	4b60      	ldr	r3, [pc, #384]	; (800539c <checkAktifCalisma+0x1080>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d137      	bne.n	8005292 <checkAktifCalisma+0xf76>
 8005222:	4b5f      	ldr	r3, [pc, #380]	; (80053a0 <checkAktifCalisma+0x1084>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d003      	beq.n	8005232 <checkAktifCalisma+0xf16>
 800522a:	4b5d      	ldr	r3, [pc, #372]	; (80053a0 <checkAktifCalisma+0x1084>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d12f      	bne.n	8005292 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005232:	4b54      	ldr	r3, [pc, #336]	; (8005384 <checkAktifCalisma+0x1068>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <checkAktifCalisma+0xf26>
 800523a:	4b53      	ldr	r3, [pc, #332]	; (8005388 <checkAktifCalisma+0x106c>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d027      	beq.n	8005292 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005246:	484d      	ldr	r0, [pc, #308]	; (800537c <checkAktifCalisma+0x1060>)
 8005248:	f004 faaa 	bl	80097a0 <HAL_GPIO_ReadPin>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <checkAktifCalisma+0xf3e>
 8005252:	4b4e      	ldr	r3, [pc, #312]	; (800538c <checkAktifCalisma+0x1070>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800525a:	4b4e      	ldr	r3, [pc, #312]	; (8005394 <checkAktifCalisma+0x1078>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <checkAktifCalisma+0xf4e>
 8005262:	4b4d      	ldr	r3, [pc, #308]	; (8005398 <checkAktifCalisma+0x107c>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d013      	beq.n	8005292 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800526a:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <checkAktifCalisma+0x1088>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005272:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <checkAktifCalisma+0x108c>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	f083 0301 	eor.w	r3, r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005280:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <checkAktifCalisma+0x1090>)
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005286:	4b4a      	ldr	r3, [pc, #296]	; (80053b0 <checkAktifCalisma+0x1094>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4a      	ldr	r2, [pc, #296]	; (80053b4 <checkAktifCalisma+0x1098>)
 800528c:	6013      	str	r3, [r2, #0]
			bekle();
 800528e:	f7fe fe93 	bl	8003fb8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <checkAktifCalisma+0x1094>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <checkAktifCalisma+0x1098>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	4a46      	ldr	r2, [pc, #280]	; (80053b8 <checkAktifCalisma+0x109c>)
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d214      	bcs.n	80052ce <checkAktifCalisma+0xfb2>
 80052a4:	4b37      	ldr	r3, [pc, #220]	; (8005384 <checkAktifCalisma+0x1068>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f083 0301 	eor.w	r3, r3, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <checkAktifCalisma+0xfa4>
 80052b2:	4b35      	ldr	r3, [pc, #212]	; (8005388 <checkAktifCalisma+0x106c>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f083 0301 	eor.w	r3, r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <checkAktifCalisma+0xfb2>
 80052c0:	4b38      	ldr	r3, [pc, #224]	; (80053a4 <checkAktifCalisma+0x1088>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f083 0301 	eor.w	r3, r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80052ce:	4b37      	ldr	r3, [pc, #220]	; (80053ac <checkAktifCalisma+0x1090>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80052d4:	4b31      	ldr	r3, [pc, #196]	; (800539c <checkAktifCalisma+0x1080>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d12b      	bne.n	8005334 <checkAktifCalisma+0x1018>
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <checkAktifCalisma+0x1084>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d003      	beq.n	80052ec <checkAktifCalisma+0xfd0>
 80052e4:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <checkAktifCalisma+0x1084>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d123      	bne.n	8005334 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <checkAktifCalisma+0x1068>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <checkAktifCalisma+0xfe0>
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <checkAktifCalisma+0x106c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80052fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005300:	481e      	ldr	r0, [pc, #120]	; (800537c <checkAktifCalisma+0x1060>)
 8005302:	f004 fa4d 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <checkAktifCalisma+0xff8>
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <checkAktifCalisma+0x1070>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005314:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <checkAktifCalisma+0x1078>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d103      	bne.n	8005324 <checkAktifCalisma+0x1008>
 800531c:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <checkAktifCalisma+0x107c>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005324:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <checkAktifCalisma+0x1088>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <checkAktifCalisma+0x10a0>)
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e002      	b.n	800533a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <checkAktifCalisma+0x10a0>)
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800533a:	4b18      	ldr	r3, [pc, #96]	; (800539c <checkAktifCalisma+0x1080>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d140      	bne.n	80053c4 <checkAktifCalisma+0x10a8>
 8005342:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <checkAktifCalisma+0x1084>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d003      	beq.n	8005352 <checkAktifCalisma+0x1036>
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <checkAktifCalisma+0x1084>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b03      	cmp	r3, #3
 8005350:	d138      	bne.n	80053c4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <checkAktifCalisma+0x1068>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <checkAktifCalisma+0x1046>
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <checkAktifCalisma+0x106c>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d030      	beq.n	80053c4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <checkAktifCalisma+0x1088>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02c      	beq.n	80053c4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <checkAktifCalisma+0x10a4>)
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e02b      	b.n	80053ca <checkAktifCalisma+0x10ae>
 8005372:	bf00      	nop
 8005374:	40010800 	.word	0x40010800
 8005378:	20000c99 	.word	0x20000c99
 800537c:	40011000 	.word	0x40011000
 8005380:	20000c92 	.word	0x20000c92
 8005384:	20000cd8 	.word	0x20000cd8
 8005388:	20000cd9 	.word	0x20000cd9
 800538c:	20000c98 	.word	0x20000c98
 8005390:	40010c00 	.word	0x40010c00
 8005394:	20000ce8 	.word	0x20000ce8
 8005398:	20000ce9 	.word	0x20000ce9
 800539c:	20000c97 	.word	0x20000c97
 80053a0:	20000c94 	.word	0x20000c94
 80053a4:	20000cce 	.word	0x20000cce
 80053a8:	20000cbb 	.word	0x20000cbb
 80053ac:	20000cd5 	.word	0x20000cd5
 80053b0:	20000c68 	.word	0x20000c68
 80053b4:	20000c6c 	.word	0x20000c6c
 80053b8:	20000ca7 	.word	0x20000ca7
 80053bc:	20000cd6 	.word	0x20000cd6
 80053c0:	20000cd7 	.word	0x20000cd7
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80053c4:	4b8b      	ldr	r3, [pc, #556]	; (80055f4 <checkAktifCalisma+0x12d8>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80053ca:	4b8b      	ldr	r3, [pc, #556]	; (80055f8 <checkAktifCalisma+0x12dc>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d107      	bne.n	80053e2 <checkAktifCalisma+0x10c6>
 80053d2:	4b8a      	ldr	r3, [pc, #552]	; (80055fc <checkAktifCalisma+0x12e0>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <checkAktifCalisma+0x10c6>
 80053da:	4b86      	ldr	r3, [pc, #536]	; (80055f4 <checkAktifCalisma+0x12d8>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80053e2:	2201      	movs	r2, #1
 80053e4:	2120      	movs	r1, #32
 80053e6:	4886      	ldr	r0, [pc, #536]	; (8005600 <checkAktifCalisma+0x12e4>)
 80053e8:	f004 f9f1 	bl	80097ce <HAL_GPIO_WritePin>
 80053ec:	e004      	b.n	80053f8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2120      	movs	r1, #32
 80053f2:	4883      	ldr	r0, [pc, #524]	; (8005600 <checkAktifCalisma+0x12e4>)
 80053f4:	f004 f9eb 	bl	80097ce <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80053f8:	4b82      	ldr	r3, [pc, #520]	; (8005604 <checkAktifCalisma+0x12e8>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <checkAktifCalisma+0x1102>
 8005400:	2102      	movs	r1, #2
 8005402:	4881      	ldr	r0, [pc, #516]	; (8005608 <checkAktifCalisma+0x12ec>)
 8005404:	f004 f9cc 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d107      	bne.n	800541e <checkAktifCalisma+0x1102>
 800540e:	4b7f      	ldr	r3, [pc, #508]	; (800560c <checkAktifCalisma+0x12f0>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <checkAktifCalisma+0x1102>
 8005416:	4b7e      	ldr	r3, [pc, #504]	; (8005610 <checkAktifCalisma+0x12f4>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d112      	bne.n	8005444 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800541e:	4b7d      	ldr	r3, [pc, #500]	; (8005614 <checkAktifCalisma+0x12f8>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d066      	beq.n	80054f4 <checkAktifCalisma+0x11d8>
 8005426:	2104      	movs	r1, #4
 8005428:	4877      	ldr	r0, [pc, #476]	; (8005608 <checkAktifCalisma+0x12ec>)
 800542a:	f004 f9b9 	bl	80097a0 <HAL_GPIO_ReadPin>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d15f      	bne.n	80054f4 <checkAktifCalisma+0x11d8>
 8005434:	4b75      	ldr	r3, [pc, #468]	; (800560c <checkAktifCalisma+0x12f0>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d05b      	beq.n	80054f4 <checkAktifCalisma+0x11d8>
 800543c:	4b74      	ldr	r3, [pc, #464]	; (8005610 <checkAktifCalisma+0x12f4>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d057      	beq.n	80054f4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005444:	4b74      	ldr	r3, [pc, #464]	; (8005618 <checkAktifCalisma+0x12fc>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	4b72      	ldr	r3, [pc, #456]	; (8005618 <checkAktifCalisma+0x12fc>)
 800544e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005450:	4b71      	ldr	r3, [pc, #452]	; (8005618 <checkAktifCalisma+0x12fc>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b09      	cmp	r3, #9
 8005456:	d908      	bls.n	800546a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005458:	4b6f      	ldr	r3, [pc, #444]	; (8005618 <checkAktifCalisma+0x12fc>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800545e:	4b6f      	ldr	r3, [pc, #444]	; (800561c <checkAktifCalisma+0x1300>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b6d      	ldr	r3, [pc, #436]	; (800561c <checkAktifCalisma+0x1300>)
 8005468:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800546a:	4b6c      	ldr	r3, [pc, #432]	; (800561c <checkAktifCalisma+0x1300>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b09      	cmp	r3, #9
 8005470:	d908      	bls.n	8005484 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005472:	4b6a      	ldr	r3, [pc, #424]	; (800561c <checkAktifCalisma+0x1300>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005478:	4b69      	ldr	r3, [pc, #420]	; (8005620 <checkAktifCalisma+0x1304>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	4b67      	ldr	r3, [pc, #412]	; (8005620 <checkAktifCalisma+0x1304>)
 8005482:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005484:	4b66      	ldr	r3, [pc, #408]	; (8005620 <checkAktifCalisma+0x1304>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b09      	cmp	r3, #9
 800548a:	d908      	bls.n	800549e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 800548c:	4b64      	ldr	r3, [pc, #400]	; (8005620 <checkAktifCalisma+0x1304>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005492:	4b64      	ldr	r3, [pc, #400]	; (8005624 <checkAktifCalisma+0x1308>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <checkAktifCalisma+0x1308>)
 800549c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800549e:	4b61      	ldr	r3, [pc, #388]	; (8005624 <checkAktifCalisma+0x1308>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b09      	cmp	r3, #9
 80054a4:	d908      	bls.n	80054b8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80054a6:	4b5f      	ldr	r3, [pc, #380]	; (8005624 <checkAktifCalisma+0x1308>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80054ac:	4b5e      	ldr	r3, [pc, #376]	; (8005628 <checkAktifCalisma+0x130c>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	4b5c      	ldr	r3, [pc, #368]	; (8005628 <checkAktifCalisma+0x130c>)
 80054b6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80054b8:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <checkAktifCalisma+0x130c>)
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	4b5b      	ldr	r3, [pc, #364]	; (800562c <checkAktifCalisma+0x1310>)
 80054be:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80054c2:	4b58      	ldr	r3, [pc, #352]	; (8005624 <checkAktifCalisma+0x1308>)
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	4b59      	ldr	r3, [pc, #356]	; (800562c <checkAktifCalisma+0x1310>)
 80054c8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80054ca:	4b55      	ldr	r3, [pc, #340]	; (8005620 <checkAktifCalisma+0x1304>)
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	4b57      	ldr	r3, [pc, #348]	; (800562c <checkAktifCalisma+0x1310>)
 80054d0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80054d2:	4b52      	ldr	r3, [pc, #328]	; (800561c <checkAktifCalisma+0x1300>)
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	4b55      	ldr	r3, [pc, #340]	; (800562c <checkAktifCalisma+0x1310>)
 80054d8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80054da:	4b4f      	ldr	r3, [pc, #316]	; (8005618 <checkAktifCalisma+0x12fc>)
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	4b53      	ldr	r3, [pc, #332]	; (800562c <checkAktifCalisma+0x1310>)
 80054e0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80054e2:	4b53      	ldr	r3, [pc, #332]	; (8005630 <checkAktifCalisma+0x1314>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80054e8:	4b46      	ldr	r3, [pc, #280]	; (8005604 <checkAktifCalisma+0x12e8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80054ee:	4b49      	ldr	r3, [pc, #292]	; (8005614 <checkAktifCalisma+0x12f8>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80054f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054f8:	484e      	ldr	r0, [pc, #312]	; (8005634 <checkAktifCalisma+0x1318>)
 80054fa:	f004 f951 	bl	80097a0 <HAL_GPIO_ReadPin>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005508:	484a      	ldr	r0, [pc, #296]	; (8005634 <checkAktifCalisma+0x1318>)
 800550a:	f004 f949 	bl	80097a0 <HAL_GPIO_ReadPin>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005518:	4846      	ldr	r0, [pc, #280]	; (8005634 <checkAktifCalisma+0x1318>)
 800551a:	f004 f941 	bl	80097a0 <HAL_GPIO_ReadPin>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005524:	2140      	movs	r1, #64	; 0x40
 8005526:	4838      	ldr	r0, [pc, #224]	; (8005608 <checkAktifCalisma+0x12ec>)
 8005528:	f004 f93a 	bl	80097a0 <HAL_GPIO_ReadPin>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005532:	4b41      	ldr	r3, [pc, #260]	; (8005638 <checkAktifCalisma+0x131c>)
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e002      	b.n	8005540 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800553a:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <checkAktifCalisma+0x131c>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005540:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <checkAktifCalisma+0x131c>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d016      	beq.n	8005576 <checkAktifCalisma+0x125a>
 8005548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800554c:	4839      	ldr	r0, [pc, #228]	; (8005634 <checkAktifCalisma+0x1318>)
 800554e:	f004 f927 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10e      	bne.n	8005576 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005558:	4b38      	ldr	r3, [pc, #224]	; (800563c <checkAktifCalisma+0x1320>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800555e:	2001      	movs	r0, #1
 8005560:	f7fb fbc0 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005564:	2001      	movs	r0, #1
 8005566:	f7fb fb65 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 800556a:	f002 fb81 	bl	8007c70 <convertAndSendData>
			acilstophatasi=1;
 800556e:	4b34      	ldr	r3, [pc, #208]	; (8005640 <checkAktifCalisma+0x1324>)
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e018      	b.n	80055a8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005576:	4b32      	ldr	r3, [pc, #200]	; (8005640 <checkAktifCalisma+0x1324>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d014      	beq.n	80055a8 <checkAktifCalisma+0x128c>
 800557e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005582:	482c      	ldr	r0, [pc, #176]	; (8005634 <checkAktifCalisma+0x1318>)
 8005584:	f004 f90c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <checkAktifCalisma+0x128c>
 800558e:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <checkAktifCalisma+0x131c>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f083 0301 	eor.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 800559c:	4b28      	ldr	r3, [pc, #160]	; (8005640 <checkAktifCalisma+0x1324>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80055a2:	2001      	movs	r0, #1
 80055a4:	f7fe fcb4 	bl	8003f10 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80055a8:	4b26      	ldr	r3, [pc, #152]	; (8005644 <checkAktifCalisma+0x1328>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04e      	beq.n	8005654 <checkAktifCalisma+0x1338>
 80055b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055ba:	481e      	ldr	r0, [pc, #120]	; (8005634 <checkAktifCalisma+0x1318>)
 80055bc:	f004 f8f0 	bl	80097a0 <HAL_GPIO_ReadPin>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <checkAktifCalisma+0x12b2>
 80055c6:	4b20      	ldr	r3, [pc, #128]	; (8005648 <checkAktifCalisma+0x132c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d042      	beq.n	8005654 <checkAktifCalisma+0x1338>
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <checkAktifCalisma+0x1330>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d13e      	bne.n	8005654 <checkAktifCalisma+0x1338>
			hataVar=1;
 80055d6:	4b19      	ldr	r3, [pc, #100]	; (800563c <checkAktifCalisma+0x1320>)
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80055dc:	2002      	movs	r0, #2
 80055de:	f7fb fb81 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80055e2:	2002      	movs	r0, #2
 80055e4:	f7fb fb26 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80055e8:	f002 fb42 	bl	8007c70 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80055ec:	4b18      	ldr	r3, [pc, #96]	; (8005650 <checkAktifCalisma+0x1334>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e047      	b.n	8005684 <checkAktifCalisma+0x1368>
 80055f4:	20000cd7 	.word	0x20000cd7
 80055f8:	20000cd6 	.word	0x20000cd6
 80055fc:	20000cd5 	.word	0x20000cd5
 8005600:	40010800 	.word	0x40010800
 8005604:	20000ccb 	.word	0x20000ccb
 8005608:	40011000 	.word	0x40011000
 800560c:	20000c92 	.word	0x20000c92
 8005610:	20000cce 	.word	0x20000cce
 8005614:	20000ccc 	.word	0x20000ccc
 8005618:	20000c89 	.word	0x20000c89
 800561c:	20000c8a 	.word	0x20000c8a
 8005620:	20000000 	.word	0x20000000
 8005624:	20000001 	.word	0x20000001
 8005628:	20000c8b 	.word	0x20000c8b
 800562c:	20000bb8 	.word	0x20000bb8
 8005630:	20000cb8 	.word	0x20000cb8
 8005634:	40010c00 	.word	0x40010c00
 8005638:	20000cda 	.word	0x20000cda
 800563c:	20000ce1 	.word	0x20000ce1
 8005640:	20000cdc 	.word	0x20000cdc
 8005644:	20000ce3 	.word	0x20000ce3
 8005648:	20000ced 	.word	0x20000ced
 800564c:	20000c90 	.word	0x20000c90
 8005650:	20000cdd 	.word	0x20000cdd
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005654:	4b9b      	ldr	r3, [pc, #620]	; (80058c4 <checkAktifCalisma+0x15a8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d013      	beq.n	8005684 <checkAktifCalisma+0x1368>
 800565c:	4b9a      	ldr	r3, [pc, #616]	; (80058c8 <checkAktifCalisma+0x15ac>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00f      	beq.n	8005684 <checkAktifCalisma+0x1368>
 8005664:	4b99      	ldr	r3, [pc, #612]	; (80058cc <checkAktifCalisma+0x15b0>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f083 0301 	eor.w	r3, r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005672:	4b94      	ldr	r3, [pc, #592]	; (80058c4 <checkAktifCalisma+0x15a8>)
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005678:	4b95      	ldr	r3, [pc, #596]	; (80058d0 <checkAktifCalisma+0x15b4>)
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800567e:	2002      	movs	r0, #2
 8005680:	f7fe fc46 	bl	8003f10 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005684:	4b93      	ldr	r3, [pc, #588]	; (80058d4 <checkAktifCalisma+0x15b8>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11e      	bne.n	80056ca <checkAktifCalisma+0x13ae>
 800568c:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <checkAktifCalisma+0x15bc>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d11a      	bne.n	80056ca <checkAktifCalisma+0x13ae>
 8005694:	4b91      	ldr	r3, [pc, #580]	; (80058dc <checkAktifCalisma+0x15c0>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d016      	beq.n	80056ca <checkAktifCalisma+0x13ae>
 800569c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a0:	488f      	ldr	r0, [pc, #572]	; (80058e0 <checkAktifCalisma+0x15c4>)
 80056a2:	f004 f87d 	bl	80097a0 <HAL_GPIO_ReadPin>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10e      	bne.n	80056ca <checkAktifCalisma+0x13ae>
			hataVar=1;
 80056ac:	4b8d      	ldr	r3, [pc, #564]	; (80058e4 <checkAktifCalisma+0x15c8>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80056b2:	2003      	movs	r0, #3
 80056b4:	f7fb fb16 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80056b8:	2003      	movs	r0, #3
 80056ba:	f7fb fabb 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80056be:	f002 fad7 	bl	8007c70 <convertAndSendData>
			basinchatasi=1;
 80056c2:	4b89      	ldr	r3, [pc, #548]	; (80058e8 <checkAktifCalisma+0x15cc>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e015      	b.n	80056f6 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80056ca:	4b87      	ldr	r3, [pc, #540]	; (80058e8 <checkAktifCalisma+0x15cc>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d011      	beq.n	80056f6 <checkAktifCalisma+0x13da>
 80056d2:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <checkAktifCalisma+0x15b8>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d10d      	bne.n	80056f6 <checkAktifCalisma+0x13da>
 80056da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056de:	4883      	ldr	r0, [pc, #524]	; (80058ec <checkAktifCalisma+0x15d0>)
 80056e0:	f004 f85e 	bl	80097a0 <HAL_GPIO_ReadPin>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80056ea:	4b7f      	ldr	r3, [pc, #508]	; (80058e8 <checkAktifCalisma+0x15cc>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80056f0:	2003      	movs	r0, #3
 80056f2:	f7fe fc0d 	bl	8003f10 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80056f6:	4b7e      	ldr	r3, [pc, #504]	; (80058f0 <checkAktifCalisma+0x15d4>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <checkAktifCalisma+0x13ea>
 80056fe:	4b7d      	ldr	r3, [pc, #500]	; (80058f4 <checkAktifCalisma+0x15d8>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01e      	beq.n	8005744 <checkAktifCalisma+0x1428>
 8005706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800570a:	487b      	ldr	r0, [pc, #492]	; (80058f8 <checkAktifCalisma+0x15dc>)
 800570c:	f004 f848 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005710:	4603      	mov	r3, r0
 8005712:	2b01      	cmp	r3, #1
 8005714:	d116      	bne.n	8005744 <checkAktifCalisma+0x1428>
 8005716:	4b79      	ldr	r3, [pc, #484]	; (80058fc <checkAktifCalisma+0x15e0>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d003      	beq.n	8005726 <checkAktifCalisma+0x140a>
 800571e:	4b77      	ldr	r3, [pc, #476]	; (80058fc <checkAktifCalisma+0x15e0>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d10e      	bne.n	8005744 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005726:	4b6f      	ldr	r3, [pc, #444]	; (80058e4 <checkAktifCalisma+0x15c8>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800572c:	2004      	movs	r0, #4
 800572e:	f7fb fad9 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005732:	2004      	movs	r0, #4
 8005734:	f7fb fa7e 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8005738:	f002 fa9a 	bl	8007c70 <convertAndSendData>
			katkapisivicihatasi=1;
 800573c:	4b70      	ldr	r3, [pc, #448]	; (8005900 <checkAktifCalisma+0x15e4>)
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e01f      	b.n	8005784 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005744:	4b6e      	ldr	r3, [pc, #440]	; (8005900 <checkAktifCalisma+0x15e4>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <checkAktifCalisma+0x1468>
 800574c:	4b6d      	ldr	r3, [pc, #436]	; (8005904 <checkAktifCalisma+0x15e8>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d017      	beq.n	8005784 <checkAktifCalisma+0x1468>
 8005754:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <checkAktifCalisma+0x15d4>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f083 0301 	eor.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d010      	beq.n	8005784 <checkAktifCalisma+0x1468>
 8005762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005766:	4864      	ldr	r0, [pc, #400]	; (80058f8 <checkAktifCalisma+0x15dc>)
 8005768:	f004 f81a 	bl	80097a0 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005772:	4b63      	ldr	r3, [pc, #396]	; (8005900 <checkAktifCalisma+0x15e4>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005778:	4b5e      	ldr	r3, [pc, #376]	; (80058f4 <checkAktifCalisma+0x15d8>)
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800577e:	2004      	movs	r0, #4
 8005780:	f7fe fbc6 	bl	8003f10 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005784:	4b5a      	ldr	r3, [pc, #360]	; (80058f0 <checkAktifCalisma+0x15d4>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <checkAktifCalisma+0x1478>
 800578c:	4b5e      	ldr	r3, [pc, #376]	; (8005908 <checkAktifCalisma+0x15ec>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01e      	beq.n	80057d2 <checkAktifCalisma+0x14b6>
 8005794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005798:	4857      	ldr	r0, [pc, #348]	; (80058f8 <checkAktifCalisma+0x15dc>)
 800579a:	f004 f801 	bl	80097a0 <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d116      	bne.n	80057d2 <checkAktifCalisma+0x14b6>
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <checkAktifCalisma+0x15e0>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d003      	beq.n	80057b4 <checkAktifCalisma+0x1498>
 80057ac:	4b53      	ldr	r3, [pc, #332]	; (80058fc <checkAktifCalisma+0x15e0>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d10e      	bne.n	80057d2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80057b4:	4b4b      	ldr	r3, [pc, #300]	; (80058e4 <checkAktifCalisma+0x15c8>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80057ba:	2005      	movs	r0, #5
 80057bc:	f7fb fa92 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80057c0:	2005      	movs	r0, #5
 80057c2:	f7fb fa37 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80057c6:	f002 fa53 	bl	8007c70 <convertAndSendData>
			tablakapisivicihatasi=1;
 80057ca:	4b50      	ldr	r3, [pc, #320]	; (800590c <checkAktifCalisma+0x15f0>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e023      	b.n	800581a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80057d2:	4b4e      	ldr	r3, [pc, #312]	; (800590c <checkAktifCalisma+0x15f0>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01f      	beq.n	800581a <checkAktifCalisma+0x14fe>
 80057da:	4b4a      	ldr	r3, [pc, #296]	; (8005904 <checkAktifCalisma+0x15e8>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <checkAktifCalisma+0x14fe>
 80057e2:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <checkAktifCalisma+0x15d4>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f083 0301 	eor.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d014      	beq.n	800581a <checkAktifCalisma+0x14fe>
 80057f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057f4:	4840      	ldr	r0, [pc, #256]	; (80058f8 <checkAktifCalisma+0x15dc>)
 80057f6:	f003 ffd3 	bl	80097a0 <HAL_GPIO_ReadPin>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10c      	bne.n	800581a <checkAktifCalisma+0x14fe>
 8005800:	4b40      	ldr	r3, [pc, #256]	; (8005904 <checkAktifCalisma+0x15e8>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8005808:	4b40      	ldr	r3, [pc, #256]	; (800590c <checkAktifCalisma+0x15f0>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800580e:	4b3e      	ldr	r3, [pc, #248]	; (8005908 <checkAktifCalisma+0x15ec>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005814:	2005      	movs	r0, #5
 8005816:	f7fe fb7b 	bl	8003f10 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800581a:	4b30      	ldr	r3, [pc, #192]	; (80058dc <checkAktifCalisma+0x15c0>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <checkAktifCalisma+0x1516>
 8005822:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <checkAktifCalisma+0x15b0>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <checkAktifCalisma+0x1516>
 800582a:	4b39      	ldr	r3, [pc, #228]	; (8005910 <checkAktifCalisma+0x15f4>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8005832:	4b38      	ldr	r3, [pc, #224]	; (8005914 <checkAktifCalisma+0x15f8>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b38      	ldr	r3, [pc, #224]	; (8005918 <checkAktifCalisma+0x15fc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	4a37      	ldr	r2, [pc, #220]	; (800591c <checkAktifCalisma+0x1600>)
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	4293      	cmp	r3, r2
 8005842:	d30d      	bcc.n	8005860 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8005844:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <checkAktifCalisma+0x15c8>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800584a:	2006      	movs	r0, #6
 800584c:	f7fb fa4a 	bl	8000ce4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8005850:	2006      	movs	r0, #6
 8005852:	f7fb f9ef 	bl	8000c34 <hata2EEPROM>
			  	convertAndSendData();
 8005856:	f002 fa0b 	bl	8007c70 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800585a:	4b31      	ldr	r3, [pc, #196]	; (8005920 <checkAktifCalisma+0x1604>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005860:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <checkAktifCalisma+0x1604>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <checkAktifCalisma+0x1574>
 8005868:	2108      	movs	r1, #8
 800586a:	4823      	ldr	r0, [pc, #140]	; (80058f8 <checkAktifCalisma+0x15dc>)
 800586c:	f003 ff98 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00c      	beq.n	8005890 <checkAktifCalisma+0x1574>
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <checkAktifCalisma+0x15d4>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f083 0301 	eor.w	r3, r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8005884:	4b26      	ldr	r3, [pc, #152]	; (8005920 <checkAktifCalisma+0x1604>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800588a:	2006      	movs	r0, #6
 800588c:	f7fe fb40 	bl	8003f10 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005890:	4b24      	ldr	r3, [pc, #144]	; (8005924 <checkAktifCalisma+0x1608>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <checkAktifCalisma+0x1594>
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <checkAktifCalisma+0x15b0>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <checkAktifCalisma+0x1594>
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <checkAktifCalisma+0x160c>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <checkAktifCalisma+0x1594>
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <checkAktifCalisma+0x15f4>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d03f      	beq.n	8005930 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80058b0:	4b1e      	ldr	r3, [pc, #120]	; (800592c <checkAktifCalisma+0x1610>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <checkAktifCalisma+0x15d8>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80058bc:	4b12      	ldr	r3, [pc, #72]	; (8005908 <checkAktifCalisma+0x15ec>)
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e03c      	b.n	800593e <checkAktifCalisma+0x1622>
 80058c4:	20000cdd 	.word	0x20000cdd
 80058c8:	20000ce3 	.word	0x20000ce3
 80058cc:	20000cc4 	.word	0x20000cc4
 80058d0:	20000ced 	.word	0x20000ced
 80058d4:	20000c8f 	.word	0x20000c8f
 80058d8:	20000c93 	.word	0x20000c93
 80058dc:	20000ce0 	.word	0x20000ce0
 80058e0:	40011000 	.word	0x40011000
 80058e4:	20000ce1 	.word	0x20000ce1
 80058e8:	20000cea 	.word	0x20000cea
 80058ec:	40010c00 	.word	0x40010c00
 80058f0:	20000cda 	.word	0x20000cda
 80058f4:	20000cee 	.word	0x20000cee
 80058f8:	40010800 	.word	0x40010800
 80058fc:	20000c94 	.word	0x20000c94
 8005900:	20000ceb 	.word	0x20000ceb
 8005904:	20000cce 	.word	0x20000cce
 8005908:	20000cef 	.word	0x20000cef
 800590c:	20000cec 	.word	0x20000cec
 8005910:	20000cc3 	.word	0x20000cc3
 8005914:	20000c68 	.word	0x20000c68
 8005918:	20000c7c 	.word	0x20000c7c
 800591c:	20000ca4 	.word	0x20000ca4
 8005920:	20000cdb 	.word	0x20000cdb
 8005924:	20000cc1 	.word	0x20000cc1
 8005928:	20000cc2 	.word	0x20000cc2
 800592c:	20000ce2 	.word	0x20000ce2
		} else {
			makineCalisiyor=1;
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <checkAktifCalisma+0x1690>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8005936:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <checkAktifCalisma+0x1694>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <checkAktifCalisma+0x1698>)
 800593c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800593e:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <checkAktifCalisma+0x169c>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02f      	beq.n	80059a6 <checkAktifCalisma+0x168a>
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <checkAktifCalisma+0x16a0>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f083 0301 	eor.w	r3, r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d028      	beq.n	80059a6 <checkAktifCalisma+0x168a>
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <checkAktifCalisma+0x16a4>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d021      	beq.n	80059a6 <checkAktifCalisma+0x168a>
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <checkAktifCalisma+0x16a8>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f083 0301 	eor.w	r3, r3, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01a      	beq.n	80059a6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005970:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <checkAktifCalisma+0x16ac>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f083 0301 	eor.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d013      	beq.n	80059a6 <checkAktifCalisma+0x168a>
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <checkAktifCalisma+0x16b0>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f083 0301 	eor.w	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <checkAktifCalisma+0x168a>
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <checkAktifCalisma+0x16b4>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f083 0301 	eor.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <checkAktifCalisma+0x168a>
			hataVar=0;
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <checkAktifCalisma+0x169c>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80059a0:	2007      	movs	r0, #7
 80059a2:	f7fe fab5 	bl	8003f10 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000ce2 	.word	0x20000ce2
 80059b0:	20000c68 	.word	0x20000c68
 80059b4:	20000c7c 	.word	0x20000c7c
 80059b8:	20000ce1 	.word	0x20000ce1
 80059bc:	20000cdc 	.word	0x20000cdc
 80059c0:	20000cdd 	.word	0x20000cdd
 80059c4:	20000cea 	.word	0x20000cea
 80059c8:	20000ceb 	.word	0x20000ceb
 80059cc:	20000cec 	.word	0x20000cec
 80059d0:	20000cdb 	.word	0x20000cdb

080059d4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80059d8:	4b8b      	ldr	r3, [pc, #556]	; (8005c08 <checkDemoModCalisma+0x234>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	f040 8229 	bne.w	8005e34 <checkDemoModCalisma+0x460>
 80059e2:	4b8a      	ldr	r3, [pc, #552]	; (8005c0c <checkDemoModCalisma+0x238>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8224 	beq.w	8005e34 <checkDemoModCalisma+0x460>
 80059ec:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <checkDemoModCalisma+0x23c>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 821f 	bne.w	8005e34 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059f6:	2102      	movs	r1, #2
 80059f8:	4886      	ldr	r0, [pc, #536]	; (8005c14 <checkDemoModCalisma+0x240>)
 80059fa:	f003 fed1 	bl	80097a0 <HAL_GPIO_ReadPin>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11d      	bne.n	8005a40 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8005a04:	4b84      	ldr	r3, [pc, #528]	; (8005c18 <checkDemoModCalisma+0x244>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f083 0301 	eor.w	r3, r3, #1
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d016      	beq.n	8005a40 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8005a12:	4b82      	ldr	r3, [pc, #520]	; (8005c1c <checkDemoModCalisma+0x248>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f083 0301 	eor.w	r3, r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00f      	beq.n	8005a40 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8005a20:	4b7f      	ldr	r3, [pc, #508]	; (8005c20 <checkDemoModCalisma+0x24c>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f083 0301 	eor.w	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2104      	movs	r1, #4
 8005a32:	487c      	ldr	r0, [pc, #496]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005a34:	f003 fecb 	bl	80097ce <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8005a38:	4b7b      	ldr	r3, [pc, #492]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e00e      	b.n	8005a5e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a40:	2102      	movs	r1, #2
 8005a42:	4874      	ldr	r0, [pc, #464]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005a44:	f003 feac 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2104      	movs	r1, #4
 8005a52:	4874      	ldr	r0, [pc, #464]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005a54:	f003 febb 	bl	80097ce <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8005a58:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005a5e:	4b72      	ldr	r3, [pc, #456]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <checkDemoModCalisma+0xaa>
 8005a66:	4b6d      	ldr	r3, [pc, #436]	; (8005c1c <checkDemoModCalisma+0x248>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d107      	bne.n	8005a7e <checkDemoModCalisma+0xaa>
 8005a6e:	4b6c      	ldr	r3, [pc, #432]	; (8005c20 <checkDemoModCalisma+0x24c>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <checkDemoModCalisma+0xaa>
 8005a76:	4b68      	ldr	r3, [pc, #416]	; (8005c18 <checkDemoModCalisma+0x244>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00c      	beq.n	8005a98 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a84:	4867      	ldr	r0, [pc, #412]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005a86:	f003 fea2 	bl	80097ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a90:	4864      	ldr	r0, [pc, #400]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005a92:	f003 fe9c 	bl	80097ce <HAL_GPIO_WritePin>
 8005a96:	e00b      	b.n	8005ab0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a9e:	4861      	ldr	r0, [pc, #388]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005aa0:	f003 fe95 	bl	80097ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005aaa:	485e      	ldr	r0, [pc, #376]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005aac:	f003 fe8f 	bl	80097ce <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	4858      	ldr	r0, [pc, #352]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005ab4:	f003 fe74 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d10d      	bne.n	8005ada <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ac2:	4854      	ldr	r0, [pc, #336]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005ac4:	f003 fe6c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d105      	bne.n	8005ada <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8005ace:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f083 0301 	eor.w	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ada:	2102      	movs	r1, #2
 8005adc:	484d      	ldr	r0, [pc, #308]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005ade:	f003 fe5f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d125      	bne.n	8005b34 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005aec:	4849      	ldr	r0, [pc, #292]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005aee:	f003 fe57 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11d      	bne.n	8005b34 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8005af8:	4b4b      	ldr	r3, [pc, #300]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f083 0301 	eor.w	r3, r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8005b06:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <checkDemoModCalisma+0x244>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f083 0301 	eor.w	r3, r3, #1
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00f      	beq.n	8005b34 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8005b14:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <checkDemoModCalisma+0x24c>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f083 0301 	eor.w	r3, r3, #1
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b22:	2201      	movs	r2, #1
 8005b24:	2120      	movs	r1, #32
 8005b26:	483b      	ldr	r0, [pc, #236]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005b28:	f003 fe51 	bl	80097ce <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8005b2c:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <checkDemoModCalisma+0x248>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e007      	b.n	8005b44 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b34:	2200      	movs	r2, #0
 8005b36:	2120      	movs	r1, #32
 8005b38:	4836      	ldr	r0, [pc, #216]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005b3a:	f003 fe48 	bl	80097ce <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8005b3e:	4b37      	ldr	r3, [pc, #220]	; (8005c1c <checkDemoModCalisma+0x248>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b44:	2102      	movs	r1, #2
 8005b46:	4833      	ldr	r0, [pc, #204]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005b48:	f003 fe2a 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d125      	bne.n	8005b9e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b56:	482f      	ldr	r0, [pc, #188]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005b58:	f003 fe22 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11d      	bne.n	8005b9e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8005b62:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d016      	beq.n	8005b9e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8005b70:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <checkDemoModCalisma+0x248>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f083 0301 	eor.w	r3, r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00f      	beq.n	8005b9e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8005b7e:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <checkDemoModCalisma+0x244>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f083 0301 	eor.w	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	2110      	movs	r1, #16
 8005b90:	4820      	ldr	r0, [pc, #128]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005b92:	f003 fe1c 	bl	80097ce <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <checkDemoModCalisma+0x24c>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e007      	b.n	8005bae <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	481c      	ldr	r0, [pc, #112]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005ba4:	f003 fe13 	bl	80097ce <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <checkDemoModCalisma+0x24c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bae:	2104      	movs	r1, #4
 8005bb0:	4818      	ldr	r0, [pc, #96]	; (8005c14 <checkDemoModCalisma+0x240>)
 8005bb2:	f003 fdf5 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d139      	bne.n	8005c30 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <checkDemoModCalisma+0x254>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f083 0301 	eor.w	r3, r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d032      	beq.n	8005c30 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <checkDemoModCalisma+0x24c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f083 0301 	eor.w	r3, r3, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02b      	beq.n	8005c30 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <checkDemoModCalisma+0x248>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f083 0301 	eor.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d024      	beq.n	8005c30 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005be6:	2201      	movs	r2, #1
 8005be8:	2102      	movs	r1, #2
 8005bea:	480e      	ldr	r0, [pc, #56]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005bec:	f003 fdef 	bl	80097ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	480b      	ldr	r0, [pc, #44]	; (8005c24 <checkDemoModCalisma+0x250>)
 8005bf6:	f003 fdea 	bl	80097ce <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <checkDemoModCalisma+0x244>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <checkDemoModCalisma+0x258>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e027      	b.n	8005c58 <checkDemoModCalisma+0x284>
 8005c08:	20000caa 	.word	0x20000caa
 8005c0c:	20000cde 	.word	0x20000cde
 8005c10:	20000ca9 	.word	0x20000ca9
 8005c14:	40011000 	.word	0x40011000
 8005c18:	20000ce5 	.word	0x20000ce5
 8005c1c:	20000ce6 	.word	0x20000ce6
 8005c20:	20000ce7 	.word	0x20000ce7
 8005c24:	40010c00 	.word	0x40010c00
 8005c28:	20000ce4 	.word	0x20000ce4
 8005c2c:	20000cca 	.word	0x20000cca
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005c30:	2104      	movs	r1, #4
 8005c32:	48a0      	ldr	r0, [pc, #640]	; (8005eb4 <checkDemoModCalisma+0x4e0>)
 8005c34:	f003 fdb4 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d10c      	bne.n	8005c58 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2102      	movs	r1, #2
 8005c42:	489d      	ldr	r0, [pc, #628]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005c44:	f003 fdc3 	bl	80097ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	489a      	ldr	r0, [pc, #616]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005c4e:	f003 fdbe 	bl	80097ce <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8005c52:	4b9a      	ldr	r3, [pc, #616]	; (8005ebc <checkDemoModCalisma+0x4e8>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005c58:	2104      	movs	r1, #4
 8005c5a:	4896      	ldr	r0, [pc, #600]	; (8005eb4 <checkDemoModCalisma+0x4e0>)
 8005c5c:	f003 fda0 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10d      	bne.n	8005c82 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005c66:	2201      	movs	r2, #1
 8005c68:	2180      	movs	r1, #128	; 0x80
 8005c6a:	4895      	ldr	r0, [pc, #596]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005c6c:	f003 fdaf 	bl	80097ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005c70:	2201      	movs	r2, #1
 8005c72:	2120      	movs	r1, #32
 8005c74:	4892      	ldr	r0, [pc, #584]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005c76:	f003 fdaa 	bl	80097ce <HAL_GPIO_WritePin>
			timer3 = millis;
 8005c7a:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <checkDemoModCalisma+0x4f0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a92      	ldr	r2, [pc, #584]	; (8005ec8 <checkDemoModCalisma+0x4f4>)
 8005c80:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005c82:	4b90      	ldr	r3, [pc, #576]	; (8005ec4 <checkDemoModCalisma+0x4f0>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b90      	ldr	r3, [pc, #576]	; (8005ec8 <checkDemoModCalisma+0x4f4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d909      	bls.n	8005ca4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005c90:	2200      	movs	r2, #0
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	488a      	ldr	r0, [pc, #552]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005c96:	f003 fd9a 	bl	80097ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	4888      	ldr	r0, [pc, #544]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005ca0:	f003 fd95 	bl	80097ce <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	4883      	ldr	r0, [pc, #524]	; (8005eb4 <checkDemoModCalisma+0x4e0>)
 8005ca8:	f003 fd7a 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d108      	bne.n	8005cc4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	2140      	movs	r1, #64	; 0x40
 8005cb6:	4882      	ldr	r0, [pc, #520]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005cb8:	f003 fd89 	bl	80097ce <HAL_GPIO_WritePin>
			timer3 = millis;
 8005cbc:	4b81      	ldr	r3, [pc, #516]	; (8005ec4 <checkDemoModCalisma+0x4f0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a81      	ldr	r2, [pc, #516]	; (8005ec8 <checkDemoModCalisma+0x4f4>)
 8005cc2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005cc4:	4b7f      	ldr	r3, [pc, #508]	; (8005ec4 <checkDemoModCalisma+0x4f0>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b7f      	ldr	r3, [pc, #508]	; (8005ec8 <checkDemoModCalisma+0x4f4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d904      	bls.n	8005cdc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	487a      	ldr	r0, [pc, #488]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005cd8:	f003 fd79 	bl	80097ce <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005cdc:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <checkDemoModCalisma+0x4f8>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d058      	beq.n	8005d96 <checkDemoModCalisma+0x3c2>
 8005ce4:	4b7a      	ldr	r3, [pc, #488]	; (8005ed0 <checkDemoModCalisma+0x4fc>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d054      	beq.n	8005d96 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005cec:	4b79      	ldr	r3, [pc, #484]	; (8005ed4 <checkDemoModCalisma+0x500>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	4b77      	ldr	r3, [pc, #476]	; (8005ed4 <checkDemoModCalisma+0x500>)
 8005cf6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005cf8:	4b76      	ldr	r3, [pc, #472]	; (8005ed4 <checkDemoModCalisma+0x500>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	d908      	bls.n	8005d12 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005d00:	4b74      	ldr	r3, [pc, #464]	; (8005ed4 <checkDemoModCalisma+0x500>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005d06:	4b74      	ldr	r3, [pc, #464]	; (8005ed8 <checkDemoModCalisma+0x504>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b72      	ldr	r3, [pc, #456]	; (8005ed8 <checkDemoModCalisma+0x504>)
 8005d10:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005d12:	4b71      	ldr	r3, [pc, #452]	; (8005ed8 <checkDemoModCalisma+0x504>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d908      	bls.n	8005d2c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005d1a:	4b6f      	ldr	r3, [pc, #444]	; (8005ed8 <checkDemoModCalisma+0x504>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005d20:	4b6e      	ldr	r3, [pc, #440]	; (8005edc <checkDemoModCalisma+0x508>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b6c      	ldr	r3, [pc, #432]	; (8005edc <checkDemoModCalisma+0x508>)
 8005d2a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005d2c:	4b6b      	ldr	r3, [pc, #428]	; (8005edc <checkDemoModCalisma+0x508>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	d908      	bls.n	8005d46 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005d34:	4b69      	ldr	r3, [pc, #420]	; (8005edc <checkDemoModCalisma+0x508>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005d3a:	4b69      	ldr	r3, [pc, #420]	; (8005ee0 <checkDemoModCalisma+0x50c>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <checkDemoModCalisma+0x50c>)
 8005d44:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005d46:	4b66      	ldr	r3, [pc, #408]	; (8005ee0 <checkDemoModCalisma+0x50c>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d908      	bls.n	8005d60 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005d4e:	4b64      	ldr	r3, [pc, #400]	; (8005ee0 <checkDemoModCalisma+0x50c>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005d54:	4b63      	ldr	r3, [pc, #396]	; (8005ee4 <checkDemoModCalisma+0x510>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b61      	ldr	r3, [pc, #388]	; (8005ee4 <checkDemoModCalisma+0x510>)
 8005d5e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005d60:	4b60      	ldr	r3, [pc, #384]	; (8005ee4 <checkDemoModCalisma+0x510>)
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	4b60      	ldr	r3, [pc, #384]	; (8005ee8 <checkDemoModCalisma+0x514>)
 8005d66:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005d6a:	4b5d      	ldr	r3, [pc, #372]	; (8005ee0 <checkDemoModCalisma+0x50c>)
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	4b5e      	ldr	r3, [pc, #376]	; (8005ee8 <checkDemoModCalisma+0x514>)
 8005d70:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005d72:	4b5a      	ldr	r3, [pc, #360]	; (8005edc <checkDemoModCalisma+0x508>)
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	4b5c      	ldr	r3, [pc, #368]	; (8005ee8 <checkDemoModCalisma+0x514>)
 8005d78:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005d7a:	4b57      	ldr	r3, [pc, #348]	; (8005ed8 <checkDemoModCalisma+0x504>)
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	4b5a      	ldr	r3, [pc, #360]	; (8005ee8 <checkDemoModCalisma+0x514>)
 8005d80:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005d82:	4b54      	ldr	r3, [pc, #336]	; (8005ed4 <checkDemoModCalisma+0x500>)
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	4b58      	ldr	r3, [pc, #352]	; (8005ee8 <checkDemoModCalisma+0x514>)
 8005d88:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005d8a:	4b58      	ldr	r3, [pc, #352]	; (8005eec <checkDemoModCalisma+0x518>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <checkDemoModCalisma+0x4fc>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005d96:	4b56      	ldr	r3, [pc, #344]	; (8005ef0 <checkDemoModCalisma+0x51c>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 8087 	bne.w	8005eae <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8005da0:	4a54      	ldr	r2, [pc, #336]	; (8005ef4 <checkDemoModCalisma+0x520>)
 8005da2:	2101      	movs	r1, #1
 8005da4:	2002      	movs	r0, #2
 8005da6:	f002 f9d5 	bl	8008154 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8005daa:	4a53      	ldr	r2, [pc, #332]	; (8005ef8 <checkDemoModCalisma+0x524>)
 8005dac:	2101      	movs	r1, #1
 8005dae:	2001      	movs	r0, #1
 8005db0:	f002 f9d0 	bl	8008154 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005db4:	4b4b      	ldr	r3, [pc, #300]	; (8005ee4 <checkDemoModCalisma+0x510>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	220a      	movs	r2, #10
 8005dba:	4950      	ldr	r1, [pc, #320]	; (8005efc <checkDemoModCalisma+0x528>)
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f006 fd77 	bl	800c8b0 <itoa>
			lcd_print(2,12,snum);
 8005dc2:	4a4e      	ldr	r2, [pc, #312]	; (8005efc <checkDemoModCalisma+0x528>)
 8005dc4:	210c      	movs	r1, #12
 8005dc6:	2002      	movs	r0, #2
 8005dc8:	f002 f9c4 	bl	8008154 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005dcc:	4b44      	ldr	r3, [pc, #272]	; (8005ee0 <checkDemoModCalisma+0x50c>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	220a      	movs	r2, #10
 8005dd2:	494a      	ldr	r1, [pc, #296]	; (8005efc <checkDemoModCalisma+0x528>)
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f006 fd6b 	bl	800c8b0 <itoa>
			lcd_print(2,13,snum);
 8005dda:	4a48      	ldr	r2, [pc, #288]	; (8005efc <checkDemoModCalisma+0x528>)
 8005ddc:	210d      	movs	r1, #13
 8005dde:	2002      	movs	r0, #2
 8005de0:	f002 f9b8 	bl	8008154 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005de4:	4b3d      	ldr	r3, [pc, #244]	; (8005edc <checkDemoModCalisma+0x508>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	220a      	movs	r2, #10
 8005dea:	4944      	ldr	r1, [pc, #272]	; (8005efc <checkDemoModCalisma+0x528>)
 8005dec:	4618      	mov	r0, r3
 8005dee:	f006 fd5f 	bl	800c8b0 <itoa>
			lcd_print(2,14,snum);
 8005df2:	4a42      	ldr	r2, [pc, #264]	; (8005efc <checkDemoModCalisma+0x528>)
 8005df4:	210e      	movs	r1, #14
 8005df6:	2002      	movs	r0, #2
 8005df8:	f002 f9ac 	bl	8008154 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005dfc:	4b36      	ldr	r3, [pc, #216]	; (8005ed8 <checkDemoModCalisma+0x504>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	220a      	movs	r2, #10
 8005e02:	493e      	ldr	r1, [pc, #248]	; (8005efc <checkDemoModCalisma+0x528>)
 8005e04:	4618      	mov	r0, r3
 8005e06:	f006 fd53 	bl	800c8b0 <itoa>
			lcd_print(2,15,snum);
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <checkDemoModCalisma+0x528>)
 8005e0c:	210f      	movs	r1, #15
 8005e0e:	2002      	movs	r0, #2
 8005e10:	f002 f9a0 	bl	8008154 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005e14:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <checkDemoModCalisma+0x500>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	220a      	movs	r2, #10
 8005e1a:	4938      	ldr	r1, [pc, #224]	; (8005efc <checkDemoModCalisma+0x528>)
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f006 fd47 	bl	800c8b0 <itoa>
			lcd_print(2,16,snum);
 8005e22:	4a36      	ldr	r2, [pc, #216]	; (8005efc <checkDemoModCalisma+0x528>)
 8005e24:	2110      	movs	r1, #16
 8005e26:	2002      	movs	r0, #2
 8005e28:	f002 f994 	bl	8008154 <lcd_print>
			mesajYazildi=1;
 8005e2c:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <checkDemoModCalisma+0x52c>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005e32:	e03c      	b.n	8005eae <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005e34:	4b33      	ldr	r3, [pc, #204]	; (8005f04 <checkDemoModCalisma+0x530>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d003      	beq.n	8005e44 <checkDemoModCalisma+0x470>
 8005e3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ef0 <checkDemoModCalisma+0x51c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d134      	bne.n	8005eae <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005e44:	2200      	movs	r2, #0
 8005e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e4a:	481b      	ldr	r0, [pc, #108]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005e4c:	f003 fcbf 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005e50:	2200      	movs	r2, #0
 8005e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e56:	4818      	ldr	r0, [pc, #96]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005e58:	f003 fcb9 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2104      	movs	r1, #4
 8005e60:	4815      	ldr	r0, [pc, #84]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005e62:	f003 fcb4 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005e66:	2200      	movs	r2, #0
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4813      	ldr	r0, [pc, #76]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005e6c:	f003 fcaf 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005e70:	2200      	movs	r2, #0
 8005e72:	2101      	movs	r1, #1
 8005e74:	4810      	ldr	r0, [pc, #64]	; (8005eb8 <checkDemoModCalisma+0x4e4>)
 8005e76:	f003 fcaa 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2120      	movs	r1, #32
 8005e7e:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <checkDemoModCalisma+0x4e0>)
 8005e80:	f003 fca5 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e84:	2200      	movs	r2, #0
 8005e86:	2110      	movs	r1, #16
 8005e88:	480a      	ldr	r0, [pc, #40]	; (8005eb4 <checkDemoModCalisma+0x4e0>)
 8005e8a:	f003 fca0 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005e94:	f003 fc9b 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2140      	movs	r1, #64	; 0x40
 8005e9c:	4808      	ldr	r0, [pc, #32]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005e9e:	f003 fc96 	bl	80097ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2120      	movs	r1, #32
 8005ea6:	4806      	ldr	r0, [pc, #24]	; (8005ec0 <checkDemoModCalisma+0x4ec>)
 8005ea8:	f003 fc91 	bl	80097ce <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005eac:	e7ff      	b.n	8005eae <checkDemoModCalisma+0x4da>
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40010c00 	.word	0x40010c00
 8005ebc:	20000ce5 	.word	0x20000ce5
 8005ec0:	40010800 	.word	0x40010800
 8005ec4:	20000c68 	.word	0x20000c68
 8005ec8:	20000c78 	.word	0x20000c78
 8005ecc:	20000ce4 	.word	0x20000ce4
 8005ed0:	20000cca 	.word	0x20000cca
 8005ed4:	20000c89 	.word	0x20000c89
 8005ed8:	20000c8a 	.word	0x20000c8a
 8005edc:	20000000 	.word	0x20000000
 8005ee0:	20000001 	.word	0x20000001
 8005ee4:	20000c8b 	.word	0x20000c8b
 8005ee8:	20000bb8 	.word	0x20000bb8
 8005eec:	20000cb8 	.word	0x20000cb8
 8005ef0:	20000ca9 	.word	0x20000ca9
 8005ef4:	0800d630 	.word	0x0800d630
 8005ef8:	0800d63c 	.word	0x0800d63c
 8005efc:	20000c28 	.word	0x20000c28
 8005f00:	20000cc0 	.word	0x20000cc0
 8005f04:	20000caa 	.word	0x20000caa

08005f08 <mainLoop>:

void mainLoop() {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005f0e:	f7fe f923 	bl	8004158 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005f12:	2101      	movs	r1, #1
 8005f14:	48a8      	ldr	r0, [pc, #672]	; (80061b8 <mainLoop+0x2b0>)
 8005f16:	f003 fc43 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d136      	bne.n	8005f8e <mainLoop+0x86>
 8005f20:	2108      	movs	r1, #8
 8005f22:	48a6      	ldr	r0, [pc, #664]	; (80061bc <mainLoop+0x2b4>)
 8005f24:	f003 fc3c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12f      	bne.n	8005f8e <mainLoop+0x86>
 8005f2e:	2102      	movs	r1, #2
 8005f30:	48a1      	ldr	r0, [pc, #644]	; (80061b8 <mainLoop+0x2b0>)
 8005f32:	f003 fc35 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d128      	bne.n	8005f8e <mainLoop+0x86>
 8005f3c:	2104      	movs	r1, #4
 8005f3e:	489e      	ldr	r0, [pc, #632]	; (80061b8 <mainLoop+0x2b0>)
 8005f40:	f003 fc2e 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d121      	bne.n	8005f8e <mainLoop+0x86>
 8005f4a:	2108      	movs	r1, #8
 8005f4c:	489a      	ldr	r0, [pc, #616]	; (80061b8 <mainLoop+0x2b0>)
 8005f4e:	f003 fc27 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11a      	bne.n	8005f8e <mainLoop+0x86>
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	4898      	ldr	r0, [pc, #608]	; (80061bc <mainLoop+0x2b4>)
 8005f5c:	f003 fc20 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d113      	bne.n	8005f8e <mainLoop+0x86>
 8005f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f6a:	4894      	ldr	r0, [pc, #592]	; (80061bc <mainLoop+0x2b4>)
 8005f6c:	f003 fc18 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10b      	bne.n	8005f8e <mainLoop+0x86>
 8005f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f7a:	4890      	ldr	r0, [pc, #576]	; (80061bc <mainLoop+0x2b4>)
 8005f7c:	f003 fc10 	bl	80097a0 <HAL_GPIO_ReadPin>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d103      	bne.n	8005f8e <mainLoop+0x86>
			butonKontrol=0;
 8005f86:	4b8e      	ldr	r3, [pc, #568]	; (80061c0 <mainLoop+0x2b8>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e003      	b.n	8005f96 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005f8e:	4b8d      	ldr	r3, [pc, #564]	; (80061c4 <mainLoop+0x2bc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a8d      	ldr	r2, [pc, #564]	; (80061c8 <mainLoop+0x2c0>)
 8005f94:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8005f96:	f7fe f8ab 	bl	80040f0 <buttonCheck>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d003      	beq.n	8005fa8 <mainLoop+0xa0>
			backLightTimer = millis;
 8005fa0:	4b88      	ldr	r3, [pc, #544]	; (80061c4 <mainLoop+0x2bc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a88      	ldr	r2, [pc, #544]	; (80061c8 <mainLoop+0x2c0>)
 8005fa6:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005fa8:	4b88      	ldr	r3, [pc, #544]	; (80061cc <mainLoop+0x2c4>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d036      	beq.n	800601e <mainLoop+0x116>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005fb0:	bf00      	nop
 8005fb2:	4887      	ldr	r0, [pc, #540]	; (80061d0 <mainLoop+0x2c8>)
 8005fb4:	f004 fa1d 	bl	800a3f2 <HAL_I2C_GetError>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d0f9      	beq.n	8005fb2 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005fbe:	bf00      	nop
 8005fc0:	4883      	ldr	r0, [pc, #524]	; (80061d0 <mainLoop+0x2c8>)
 8005fc2:	f004 fa09 	bl	800a3d8 <HAL_I2C_GetState>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d1f9      	bne.n	8005fc0 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005fcc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005fd0:	9302      	str	r3, [sp, #8]
 8005fd2:	236e      	movs	r3, #110	; 0x6e
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	4b7f      	ldr	r3, [pc, #508]	; (80061d4 <mainLoop+0x2cc>)
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	236e      	movs	r3, #110	; 0x6e
 8005fdc:	2200      	movs	r2, #0
 8005fde:	21a0      	movs	r1, #160	; 0xa0
 8005fe0:	487b      	ldr	r0, [pc, #492]	; (80061d0 <mainLoop+0x2c8>)
 8005fe2:	f003 fe97 	bl	8009d14 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fea:	f002 fe09 	bl	8008c00 <HAL_Delay>

		  hafizaYaz=0;
 8005fee:	4b77      	ldr	r3, [pc, #476]	; (80061cc <mainLoop+0x2c4>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
		  if(dilSecim == 0) {
 8005ff4:	4b78      	ldr	r3, [pc, #480]	; (80061d8 <mainLoop+0x2d0>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8005ffc:	4a77      	ldr	r2, [pc, #476]	; (80061dc <mainLoop+0x2d4>)
 8005ffe:	2101      	movs	r1, #1
 8006000:	2002      	movs	r0, #2
 8006002:	f002 f8a7 	bl	8008154 <lcd_print>
 8006006:	e004      	b.n	8006012 <mainLoop+0x10a>
		  } else {
			  lcd_print(2,1,"Data Wrote      ");
 8006008:	4a75      	ldr	r2, [pc, #468]	; (80061e0 <mainLoop+0x2d8>)
 800600a:	2101      	movs	r1, #1
 800600c:	2002      	movs	r0, #2
 800600e:	f002 f8a1 	bl	8008154 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006016:	f002 fdf3 	bl	8008c00 <HAL_Delay>
		  lcd_clear();
 800601a:	f002 f8c7 	bl	80081ac <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800601e:	4b71      	ldr	r3, [pc, #452]	; (80061e4 <mainLoop+0x2dc>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f083 0301 	eor.w	r3, r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d061      	beq.n	80060f0 <mainLoop+0x1e8>
 800602c:	4868      	ldr	r0, [pc, #416]	; (80061d0 <mainLoop+0x2c8>)
 800602e:	f004 f9d3 	bl	800a3d8 <HAL_I2C_GetState>
 8006032:	4603      	mov	r3, r0
 8006034:	2b20      	cmp	r3, #32
 8006036:	d15b      	bne.n	80060f0 <mainLoop+0x1e8>
		  if(ilkOkuma==0) {
 8006038:	4b6b      	ldr	r3, [pc, #428]	; (80061e8 <mainLoop+0x2e0>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f083 0301 	eor.w	r3, r3, #1
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d03c      	beq.n	80060c0 <mainLoop+0x1b8>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006046:	4a69      	ldr	r2, [pc, #420]	; (80061ec <mainLoop+0x2e4>)
 8006048:	2101      	movs	r1, #1
 800604a:	2001      	movs	r0, #1
 800604c:	f002 f882 	bl	8008154 <lcd_print>
			  if(dilSecim == 0) {
 8006050:	4b61      	ldr	r3, [pc, #388]	; (80061d8 <mainLoop+0x2d0>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <mainLoop+0x15c>
				  lcd_print(2,1,"Data Okunuyor...");
 8006058:	4a65      	ldr	r2, [pc, #404]	; (80061f0 <mainLoop+0x2e8>)
 800605a:	2101      	movs	r1, #1
 800605c:	2002      	movs	r0, #2
 800605e:	f002 f879 	bl	8008154 <lcd_print>
 8006062:	e004      	b.n	800606e <mainLoop+0x166>
			  } else {
				  lcd_print(2,1,"Data Reading... ");
 8006064:	4a63      	ldr	r2, [pc, #396]	; (80061f4 <mainLoop+0x2ec>)
 8006066:	2101      	movs	r1, #1
 8006068:	2002      	movs	r0, #2
 800606a:	f002 f873 	bl	8008154 <lcd_print>
			  }
			  HAL_Delay(1000);
 800606e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006072:	f002 fdc5 	bl	8008c00 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006076:	bf00      	nop
 8006078:	4855      	ldr	r0, [pc, #340]	; (80061d0 <mainLoop+0x2c8>)
 800607a:	f004 f9ba 	bl	800a3f2 <HAL_I2C_GetError>
 800607e:	4603      	mov	r3, r0
 8006080:	2b04      	cmp	r3, #4
 8006082:	d0f9      	beq.n	8006078 <mainLoop+0x170>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006084:	e003      	b.n	800608e <mainLoop+0x186>
				  HAL_Delay(1000);
 8006086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800608a:	f002 fdb9 	bl	8008c00 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800608e:	4850      	ldr	r0, [pc, #320]	; (80061d0 <mainLoop+0x2c8>)
 8006090:	f004 f9a2 	bl	800a3d8 <HAL_I2C_GetState>
 8006094:	4603      	mov	r3, r0
 8006096:	2b20      	cmp	r3, #32
 8006098:	d1f5      	bne.n	8006086 <mainLoop+0x17e>
			  }

			  if(dilSecim == 0) {
 800609a:	4b4f      	ldr	r3, [pc, #316]	; (80061d8 <mainLoop+0x2d0>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <mainLoop+0x1a6>
				  lcd_print(2,1,"Data Okundu.    ");
 80060a2:	4a55      	ldr	r2, [pc, #340]	; (80061f8 <mainLoop+0x2f0>)
 80060a4:	2101      	movs	r1, #1
 80060a6:	2002      	movs	r0, #2
 80060a8:	f002 f854 	bl	8008154 <lcd_print>
 80060ac:	e004      	b.n	80060b8 <mainLoop+0x1b0>
			  } else {
				  lcd_print(2,1,"Data Read.      ");
 80060ae:	4a53      	ldr	r2, [pc, #332]	; (80061fc <mainLoop+0x2f4>)
 80060b0:	2101      	movs	r1, #1
 80060b2:	2002      	movs	r0, #2
 80060b4:	f002 f84e 	bl	8008154 <lcd_print>
			  }

			  ilkOkuma=1;
 80060b8:	4b4b      	ldr	r3, [pc, #300]	; (80061e8 <mainLoop+0x2e0>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e010      	b.n	80060e2 <mainLoop+0x1da>
		  } else {
			  if(dilSecim == 0) {
 80060c0:	4b45      	ldr	r3, [pc, #276]	; (80061d8 <mainLoop+0x2d0>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d105      	bne.n	80060d4 <mainLoop+0x1cc>
				  lcd_print(2,1,"Deger Kaydedildi");
 80060c8:	4a4d      	ldr	r2, [pc, #308]	; (8006200 <mainLoop+0x2f8>)
 80060ca:	2101      	movs	r1, #1
 80060cc:	2002      	movs	r0, #2
 80060ce:	f002 f841 	bl	8008154 <lcd_print>
 80060d2:	e004      	b.n	80060de <mainLoop+0x1d6>
			  } else {
				  lcd_print(2,1,"Value Saved     ");
 80060d4:	4a4b      	ldr	r2, [pc, #300]	; (8006204 <mainLoop+0x2fc>)
 80060d6:	2101      	movs	r1, #1
 80060d8:	2002      	movs	r0, #2
 80060da:	f002 f83b 	bl	8008154 <lcd_print>
			  }
			  lcd_clear();
 80060de:	f002 f865 	bl	80081ac <lcd_clear>
		  }

		  lcd_clear();
 80060e2:	f002 f863 	bl	80081ac <lcd_clear>

		  eepromKontrol();
 80060e6:	f7fa f8a5 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80060ea:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <mainLoop+0x2dc>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80060f0:	4b45      	ldr	r3, [pc, #276]	; (8006208 <mainLoop+0x300>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11c      	bne.n	8006132 <mainLoop+0x22a>
 80060f8:	4b44      	ldr	r3, [pc, #272]	; (800620c <mainLoop+0x304>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <mainLoop+0x22a>
 8006106:	4b42      	ldr	r3, [pc, #264]	; (8006210 <mainLoop+0x308>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d111      	bne.n	8006132 <mainLoop+0x22a>
			lcd_clear();
 800610e:	f002 f84d 	bl	80081ac <lcd_clear>
			HAL_Delay(10);
 8006112:	200a      	movs	r0, #10
 8006114:	f002 fd74 	bl	8008c00 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006118:	4a3e      	ldr	r2, [pc, #248]	; (8006214 <mainLoop+0x30c>)
 800611a:	2101      	movs	r1, #1
 800611c:	2001      	movs	r0, #1
 800611e:	f002 f819 	bl	8008154 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006122:	4a3d      	ldr	r2, [pc, #244]	; (8006218 <mainLoop+0x310>)
 8006124:	2101      	movs	r1, #1
 8006126:	2002      	movs	r0, #2
 8006128:	f002 f814 	bl	8008154 <lcd_print>
			mesajYazildi=1;
 800612c:	4b37      	ldr	r3, [pc, #220]	; (800620c <mainLoop+0x304>)
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006132:	4b35      	ldr	r3, [pc, #212]	; (8006208 <mainLoop+0x300>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d112      	bne.n	8006160 <mainLoop+0x258>
 800613a:	2102      	movs	r1, #2
 800613c:	481e      	ldr	r0, [pc, #120]	; (80061b8 <mainLoop+0x2b0>)
 800613e:	f003 fb2f 	bl	80097a0 <HAL_GPIO_ReadPin>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10b      	bne.n	8006160 <mainLoop+0x258>
 8006148:	2104      	movs	r1, #4
 800614a:	481b      	ldr	r0, [pc, #108]	; (80061b8 <mainLoop+0x2b0>)
 800614c:	f003 fb28 	bl	80097a0 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b01      	cmp	r3, #1
 8006154:	d104      	bne.n	8006160 <mainLoop+0x258>
			menuGiris=1;
 8006156:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <mainLoop+0x300>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800615c:	f002 f826 	bl	80081ac <lcd_clear>
		}

		if(menuGiris==1) {
 8006160:	4b29      	ldr	r3, [pc, #164]	; (8006208 <mainLoop+0x300>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <mainLoop+0x264>
			menu();
 8006168:	f7fb fa22 	bl	80015b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800616c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006170:	4812      	ldr	r0, [pc, #72]	; (80061bc <mainLoop+0x2b4>)
 8006172:	f003 fb44 	bl	80097fe <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800617a:	4828      	ldr	r0, [pc, #160]	; (800621c <mainLoop+0x314>)
 800617c:	f003 fb10 	bl	80097a0 <HAL_GPIO_ReadPin>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <mainLoop+0x294>
 8006186:	4b26      	ldr	r3, [pc, #152]	; (8006220 <mainLoop+0x318>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	f083 0301 	eor.w	r3, r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <mainLoop+0x294>
			stopVar=1;
 8006194:	4b23      	ldr	r3, [pc, #140]	; (8006224 <mainLoop+0x31c>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e002      	b.n	80061a2 <mainLoop+0x29a>
		} else {
			stopVar=0;
 800619c:	4b21      	ldr	r3, [pc, #132]	; (8006224 <mainLoop+0x31c>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80061a2:	f7fd ffef 	bl	8004184 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80061a6:	f7fe f821 	bl	80041ec <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80061aa:	f7fe f865 	bl	8004278 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80061ae:	f7fe f8b5 	bl	800431c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80061b2:	f7ff fc0f 	bl	80059d4 <checkDemoModCalisma>
		checkLCDBacklight();
 80061b6:	e6aa      	b.n	8005f0e <mainLoop+0x6>
 80061b8:	40010800 	.word	0x40010800
 80061bc:	40011000 	.word	0x40011000
 80061c0:	20000cbb 	.word	0x20000cbb
 80061c4:	20000c68 	.word	0x20000c68
 80061c8:	20000c84 	.word	0x20000c84
 80061cc:	20000cb8 	.word	0x20000cb8
 80061d0:	20001318 	.word	0x20001318
 80061d4:	20000bb8 	.word	0x20000bb8
 80061d8:	20000cad 	.word	0x20000cad
 80061dc:	0800d650 	.word	0x0800d650
 80061e0:	0800d664 	.word	0x0800d664
 80061e4:	20000cb9 	.word	0x20000cb9
 80061e8:	20000cba 	.word	0x20000cba
 80061ec:	0800d678 	.word	0x0800d678
 80061f0:	0800d68c 	.word	0x0800d68c
 80061f4:	0800d6a0 	.word	0x0800d6a0
 80061f8:	0800d6b4 	.word	0x0800d6b4
 80061fc:	0800d6c8 	.word	0x0800d6c8
 8006200:	0800d6dc 	.word	0x0800d6dc
 8006204:	0800d6f0 	.word	0x0800d6f0
 8006208:	20000ca9 	.word	0x20000ca9
 800620c:	20000cc0 	.word	0x20000cc0
 8006210:	20000caa 	.word	0x20000caa
 8006214:	0800d704 	.word	0x0800d704
 8006218:	0800d718 	.word	0x0800d718
 800621c:	40010c00 	.word	0x40010c00
 8006220:	20000ce1 	.word	0x20000ce1
 8006224:	20000cde 	.word	0x20000cde

08006228 <loadMenuTexts>:
char ssidExceedErrorText[16];
char ssidExceedError2Text[16];
char passExceedErrorText[16];
char passExceedError2Text[16];

void loadMenuTexts(uint8_t dilSecim) {
 8006228:	b490      	push	{r4, r7}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 83c3 	bne.w	80069c0 <loadMenuTexts+0x798>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 16); //destination, source, size
 800623a:	4ab8      	ldr	r2, [pc, #736]	; (800651c <loadMenuTexts+0x2f4>)
 800623c:	4bb8      	ldr	r3, [pc, #736]	; (8006520 <loadMenuTexts+0x2f8>)
 800623e:	4614      	mov	r4, r2
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ayarlarText, ayarlarTextTR, 16);
 800624a:	4ab6      	ldr	r2, [pc, #728]	; (8006524 <loadMenuTexts+0x2fc>)
 800624c:	4bb6      	ldr	r3, [pc, #728]	; (8006528 <loadMenuTexts+0x300>)
 800624e:	4614      	mov	r4, r2
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	6859      	ldr	r1, [r3, #4]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKayitListText, hataKayitListTextTR, 16);
 800625a:	4ab4      	ldr	r2, [pc, #720]	; (800652c <loadMenuTexts+0x304>)
 800625c:	4bb4      	ldr	r3, [pc, #720]	; (8006530 <loadMenuTexts+0x308>)
 800625e:	4614      	mov	r4, r2
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birHataKoduText, birHataKoduTextTR, 16);
 800626a:	4ab2      	ldr	r2, [pc, #712]	; (8006534 <loadMenuTexts+0x30c>)
 800626c:	4bb2      	ldr	r3, [pc, #712]	; (8006538 <loadMenuTexts+0x310>)
 800626e:	4614      	mov	r4, r2
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	6859      	ldr	r1, [r3, #4]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 16);
 800627a:	4ab0      	ldr	r2, [pc, #704]	; (800653c <loadMenuTexts+0x314>)
 800627c:	4bb0      	ldr	r3, [pc, #704]	; (8006540 <loadMenuTexts+0x318>)
 800627e:	4614      	mov	r4, r2
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ucHataKoduText, ucHataKoduTextTR, 16);
 800628a:	4aae      	ldr	r2, [pc, #696]	; (8006544 <loadMenuTexts+0x31c>)
 800628c:	4bae      	ldr	r3, [pc, #696]	; (8006548 <loadMenuTexts+0x320>)
 800628e:	4614      	mov	r4, r2
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dortHataKoduText, dortHataKoduTextTR, 16);
 800629a:	4aac      	ldr	r2, [pc, #688]	; (800654c <loadMenuTexts+0x324>)
 800629c:	4bac      	ldr	r3, [pc, #688]	; (8006550 <loadMenuTexts+0x328>)
 800629e:	4614      	mov	r4, r2
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(besHataKoduText, besHataKoduTextTR, 16);
 80062aa:	4aaa      	ldr	r2, [pc, #680]	; (8006554 <loadMenuTexts+0x32c>)
 80062ac:	4baa      	ldr	r3, [pc, #680]	; (8006558 <loadMenuTexts+0x330>)
 80062ae:	4614      	mov	r4, r2
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	6859      	ldr	r1, [r3, #4]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altiHataKoduText, altiHataKoduTextTR, 16);
 80062ba:	4aa8      	ldr	r2, [pc, #672]	; (800655c <loadMenuTexts+0x334>)
 80062bc:	4ba8      	ldr	r3, [pc, #672]	; (8006560 <loadMenuTexts+0x338>)
 80062be:	4614      	mov	r4, r2
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yediHataKoduText, yediHataKoduTextTR, 16);
 80062ca:	4aa6      	ldr	r2, [pc, #664]	; (8006564 <loadMenuTexts+0x33c>)
 80062cc:	4ba6      	ldr	r3, [pc, #664]	; (8006568 <loadMenuTexts+0x340>)
 80062ce:	4614      	mov	r4, r2
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 16);
 80062da:	4aa4      	ldr	r2, [pc, #656]	; (800656c <loadMenuTexts+0x344>)
 80062dc:	4ba4      	ldr	r3, [pc, #656]	; (8006570 <loadMenuTexts+0x348>)
 80062de:	4614      	mov	r4, r2
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	6859      	ldr	r1, [r3, #4]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 16);
 80062ea:	4aa2      	ldr	r2, [pc, #648]	; (8006574 <loadMenuTexts+0x34c>)
 80062ec:	4ba2      	ldr	r3, [pc, #648]	; (8006578 <loadMenuTexts+0x350>)
 80062ee:	4614      	mov	r4, r2
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	6859      	ldr	r1, [r3, #4]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(onHataKoduText, onHataKoduTextTR, 16);
 80062fa:	4aa0      	ldr	r2, [pc, #640]	; (800657c <loadMenuTexts+0x354>)
 80062fc:	4ba0      	ldr	r3, [pc, #640]	; (8006580 <loadMenuTexts+0x358>)
 80062fe:	4614      	mov	r4, r2
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(silmekIcinText, silmekIcinTextTR, 16);
 800630a:	4a9e      	ldr	r2, [pc, #632]	; (8006584 <loadMenuTexts+0x35c>)
 800630c:	4b9e      	ldr	r3, [pc, #632]	; (8006588 <loadMenuTexts+0x360>)
 800630e:	4614      	mov	r4, r2
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	6859      	ldr	r1, [r3, #4]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSekliText, calismaSekliTextTR, 16);
 800631a:	4a9c      	ldr	r2, [pc, #624]	; (800658c <loadMenuTexts+0x364>)
 800631c:	4b9c      	ldr	r3, [pc, #624]	; (8006590 <loadMenuTexts+0x368>)
 800631e:	4614      	mov	r4, r2
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	6859      	ldr	r1, [r3, #4]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 16);
 800632a:	4a9a      	ldr	r2, [pc, #616]	; (8006594 <loadMenuTexts+0x36c>)
 800632c:	4b9a      	ldr	r3, [pc, #616]	; (8006598 <loadMenuTexts+0x370>)
 800632e:	4614      	mov	r4, r2
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 16);
 800633a:	4a98      	ldr	r2, [pc, #608]	; (800659c <loadMenuTexts+0x374>)
 800633c:	4b98      	ldr	r3, [pc, #608]	; (80065a0 <loadMenuTexts+0x378>)
 800633e:	4614      	mov	r4, r2
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basGonderText, basGonderTextTR, 16);
 800634a:	4a96      	ldr	r2, [pc, #600]	; (80065a4 <loadMenuTexts+0x37c>)
 800634c:	4b96      	ldr	r3, [pc, #600]	; (80065a8 <loadMenuTexts+0x380>)
 800634e:	4614      	mov	r4, r2
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	6859      	ldr	r1, [r3, #4]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 16);
 800635a:	4a94      	ldr	r2, [pc, #592]	; (80065ac <loadMenuTexts+0x384>)
 800635c:	4b94      	ldr	r3, [pc, #592]	; (80065b0 <loadMenuTexts+0x388>)
 800635e:	4614      	mov	r4, r2
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	6859      	ldr	r1, [r3, #4]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(pasifText, pasifTextTR, 16);
 800636a:	4a92      	ldr	r2, [pc, #584]	; (80065b4 <loadMenuTexts+0x38c>)
 800636c:	4b92      	ldr	r3, [pc, #584]	; (80065b8 <loadMenuTexts+0x390>)
 800636e:	4614      	mov	r4, r2
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(aktifText, aktifTextTR, 16);
 800637a:	4a90      	ldr	r2, [pc, #576]	; (80065bc <loadMenuTexts+0x394>)
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <loadMenuTexts+0x398>)
 800637e:	4614      	mov	r4, r2
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 16);
 800638a:	4a8e      	ldr	r2, [pc, #568]	; (80065c4 <loadMenuTexts+0x39c>)
 800638c:	4b8e      	ldr	r3, [pc, #568]	; (80065c8 <loadMenuTexts+0x3a0>)
 800638e:	4614      	mov	r4, r2
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altLimitText, altLimitTextTR, 16);
 800639a:	4a8c      	ldr	r2, [pc, #560]	; (80065cc <loadMenuTexts+0x3a4>)
 800639c:	4b8c      	ldr	r3, [pc, #560]	; (80065d0 <loadMenuTexts+0x3a8>)
 800639e:	4614      	mov	r4, r2
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basincSalteriText, basincSalteriTextTR, 16);
 80063aa:	4a8a      	ldr	r2, [pc, #552]	; (80065d4 <loadMenuTexts+0x3ac>)
 80063ac:	4b8a      	ldr	r3, [pc, #552]	; (80065d8 <loadMenuTexts+0x3b0>)
 80063ae:	4614      	mov	r4, r2
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	6859      	ldr	r1, [r3, #4]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 16);
 80063ba:	4a88      	ldr	r2, [pc, #544]	; (80065dc <loadMenuTexts+0x3b4>)
 80063bc:	4b88      	ldr	r3, [pc, #544]	; (80065e0 <loadMenuTexts+0x3b8>)
 80063be:	4614      	mov	r4, r2
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 16);
 80063ca:	4a86      	ldr	r2, [pc, #536]	; (80065e4 <loadMenuTexts+0x3bc>)
 80063cc:	4b86      	ldr	r3, [pc, #536]	; (80065e8 <loadMenuTexts+0x3c0>)
 80063ce:	4614      	mov	r4, r2
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 16);
 80063da:	4a84      	ldr	r2, [pc, #528]	; (80065ec <loadMenuTexts+0x3c4>)
 80063dc:	4b84      	ldr	r3, [pc, #528]	; (80065f0 <loadMenuTexts+0x3c8>)
 80063de:	4614      	mov	r4, r2
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	6859      	ldr	r1, [r3, #4]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 16);
 80063ea:	4a82      	ldr	r2, [pc, #520]	; (80065f4 <loadMenuTexts+0x3cc>)
 80063ec:	4b82      	ldr	r3, [pc, #520]	; (80065f8 <loadMenuTexts+0x3d0>)
 80063ee:	4614      	mov	r4, r2
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 16);
 80063fa:	4a80      	ldr	r2, [pc, #512]	; (80065fc <loadMenuTexts+0x3d4>)
 80063fc:	4b80      	ldr	r3, [pc, #512]	; (8006600 <loadMenuTexts+0x3d8>)
 80063fe:	4614      	mov	r4, r2
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	6859      	ldr	r1, [r3, #4]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 16);
 800640a:	4a7e      	ldr	r2, [pc, #504]	; (8006604 <loadMenuTexts+0x3dc>)
 800640c:	4b7e      	ldr	r3, [pc, #504]	; (8006608 <loadMenuTexts+0x3e0>)
 800640e:	4614      	mov	r4, r2
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	6859      	ldr	r1, [r3, #4]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katButonuEXTText, katButonuEXTTextTR, 16);
 800641a:	4a7c      	ldr	r2, [pc, #496]	; (800660c <loadMenuTexts+0x3e4>)
 800641c:	4b7c      	ldr	r3, [pc, #496]	; (8006610 <loadMenuTexts+0x3e8>)
 800641e:	4614      	mov	r4, r2
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	6859      	ldr	r1, [r3, #4]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 16);
 800642a:	4a7a      	ldr	r2, [pc, #488]	; (8006614 <loadMenuTexts+0x3ec>)
 800642c:	4b7a      	ldr	r3, [pc, #488]	; (8006618 <loadMenuTexts+0x3f0>)
 800642e:	4614      	mov	r4, r2
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(butonKontrolluText, butonKontrolluTextTR, 16);
 800643a:	4a78      	ldr	r2, [pc, #480]	; (800661c <loadMenuTexts+0x3f4>)
 800643c:	4b78      	ldr	r3, [pc, #480]	; (8006620 <loadMenuTexts+0x3f8>)
 800643e:	4614      	mov	r4, r2
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	6859      	ldr	r1, [r3, #4]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 16);
 800644a:	4a76      	ldr	r2, [pc, #472]	; (8006624 <loadMenuTexts+0x3fc>)
 800644c:	4b76      	ldr	r3, [pc, #472]	; (8006628 <loadMenuTexts+0x400>)
 800644e:	4614      	mov	r4, r2
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kacSaniyeText, kacSaniyeTextTR, 16);
 800645a:	4a74      	ldr	r2, [pc, #464]	; (800662c <loadMenuTexts+0x404>)
 800645c:	4b74      	ldr	r3, [pc, #464]	; (8006630 <loadMenuTexts+0x408>)
 800645e:	4614      	mov	r4, r2
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	6859      	ldr	r1, [r3, #4]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 16);
 800646a:	4a72      	ldr	r2, [pc, #456]	; (8006634 <loadMenuTexts+0x40c>)
 800646c:	4b72      	ldr	r3, [pc, #456]	; (8006638 <loadMenuTexts+0x410>)
 800646e:	4614      	mov	r4, r2
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 16);
 800647a:	4a70      	ldr	r2, [pc, #448]	; (800663c <loadMenuTexts+0x414>)
 800647c:	4b70      	ldr	r3, [pc, #448]	; (8006640 <loadMenuTexts+0x418>)
 800647e:	4614      	mov	r4, r2
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	6859      	ldr	r1, [r3, #4]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 16);
 800648a:	4a6e      	ldr	r2, [pc, #440]	; (8006644 <loadMenuTexts+0x41c>)
 800648c:	4b6e      	ldr	r3, [pc, #440]	; (8006648 <loadMenuTexts+0x420>)
 800648e:	4614      	mov	r4, r2
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	6859      	ldr	r1, [r3, #4]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 16);
 800649a:	4a6c      	ldr	r2, [pc, #432]	; (800664c <loadMenuTexts+0x424>)
 800649c:	4b6c      	ldr	r3, [pc, #432]	; (8006650 <loadMenuTexts+0x428>)
 800649e:	4614      	mov	r4, r2
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	6859      	ldr	r1, [r3, #4]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 16);
 80064aa:	4a6a      	ldr	r2, [pc, #424]	; (8006654 <loadMenuTexts+0x42c>)
 80064ac:	4b6a      	ldr	r3, [pc, #424]	; (8006658 <loadMenuTexts+0x430>)
 80064ae:	4614      	mov	r4, r2
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	6859      	ldr	r1, [r3, #4]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 16);
 80064ba:	4a68      	ldr	r2, [pc, #416]	; (800665c <loadMenuTexts+0x434>)
 80064bc:	4b68      	ldr	r3, [pc, #416]	; (8006660 <loadMenuTexts+0x438>)
 80064be:	4614      	mov	r4, r2
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	6859      	ldr	r1, [r3, #4]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 16);
 80064ca:	4a66      	ldr	r2, [pc, #408]	; (8006664 <loadMenuTexts+0x43c>)
 80064cc:	4b66      	ldr	r3, [pc, #408]	; (8006668 <loadMenuTexts+0x440>)
 80064ce:	4614      	mov	r4, r2
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 16);
 80064da:	4a64      	ldr	r2, [pc, #400]	; (800666c <loadMenuTexts+0x444>)
 80064dc:	4b64      	ldr	r3, [pc, #400]	; (8006670 <loadMenuTexts+0x448>)
 80064de:	4614      	mov	r4, r2
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	6859      	ldr	r1, [r3, #4]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 16);
 80064ea:	4a62      	ldr	r2, [pc, #392]	; (8006674 <loadMenuTexts+0x44c>)
 80064ec:	4b62      	ldr	r3, [pc, #392]	; (8006678 <loadMenuTexts+0x450>)
 80064ee:	4614      	mov	r4, r2
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 16);
 80064fa:	4a60      	ldr	r2, [pc, #384]	; (800667c <loadMenuTexts+0x454>)
 80064fc:	4b60      	ldr	r3, [pc, #384]	; (8006680 <loadMenuTexts+0x458>)
 80064fe:	4614      	mov	r4, r2
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	6859      	ldr	r1, [r3, #4]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAktifText, devirmeAktifTextTR, 16);
 800650a:	4a5e      	ldr	r2, [pc, #376]	; (8006684 <loadMenuTexts+0x45c>)
 800650c:	4b5e      	ldr	r3, [pc, #376]	; (8006688 <loadMenuTexts+0x460>)
 800650e:	4614      	mov	r4, r2
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651a:	e0b7      	b.n	800668c <loadMenuTexts+0x464>
 800651c:	20000dec 	.word	0x20000dec
 8006520:	20000140 	.word	0x20000140
 8006524:	20000dfc 	.word	0x20000dfc
 8006528:	20000150 	.word	0x20000150
 800652c:	20000e0c 	.word	0x20000e0c
 8006530:	20000160 	.word	0x20000160
 8006534:	20000e1c 	.word	0x20000e1c
 8006538:	20000170 	.word	0x20000170
 800653c:	20000e2c 	.word	0x20000e2c
 8006540:	20000180 	.word	0x20000180
 8006544:	20000e3c 	.word	0x20000e3c
 8006548:	20000190 	.word	0x20000190
 800654c:	20000e4c 	.word	0x20000e4c
 8006550:	200001a0 	.word	0x200001a0
 8006554:	20000e5c 	.word	0x20000e5c
 8006558:	200001b0 	.word	0x200001b0
 800655c:	20000e6c 	.word	0x20000e6c
 8006560:	200001c0 	.word	0x200001c0
 8006564:	20000e7c 	.word	0x20000e7c
 8006568:	200001d0 	.word	0x200001d0
 800656c:	20000e8c 	.word	0x20000e8c
 8006570:	200001e0 	.word	0x200001e0
 8006574:	20000e9c 	.word	0x20000e9c
 8006578:	200001f0 	.word	0x200001f0
 800657c:	20000eac 	.word	0x20000eac
 8006580:	20000200 	.word	0x20000200
 8006584:	20000ebc 	.word	0x20000ebc
 8006588:	20000210 	.word	0x20000210
 800658c:	20000ecc 	.word	0x20000ecc
 8006590:	20000220 	.word	0x20000220
 8006594:	20000edc 	.word	0x20000edc
 8006598:	20000230 	.word	0x20000230
 800659c:	20000eec 	.word	0x20000eec
 80065a0:	20000240 	.word	0x20000240
 80065a4:	20000efc 	.word	0x20000efc
 80065a8:	20000250 	.word	0x20000250
 80065ac:	20000f0c 	.word	0x20000f0c
 80065b0:	20000260 	.word	0x20000260
 80065b4:	20000f1c 	.word	0x20000f1c
 80065b8:	20000270 	.word	0x20000270
 80065bc:	20000f2c 	.word	0x20000f2c
 80065c0:	20000280 	.word	0x20000280
 80065c4:	20000f3c 	.word	0x20000f3c
 80065c8:	20000290 	.word	0x20000290
 80065cc:	20000f4c 	.word	0x20000f4c
 80065d0:	200002a0 	.word	0x200002a0
 80065d4:	20000f5c 	.word	0x20000f5c
 80065d8:	200002b0 	.word	0x200002b0
 80065dc:	20000f6c 	.word	0x20000f6c
 80065e0:	200002c0 	.word	0x200002c0
 80065e4:	20000f7c 	.word	0x20000f7c
 80065e8:	200002d0 	.word	0x200002d0
 80065ec:	20000f8c 	.word	0x20000f8c
 80065f0:	200002e0 	.word	0x200002e0
 80065f4:	20000f9c 	.word	0x20000f9c
 80065f8:	200002f0 	.word	0x200002f0
 80065fc:	20000fac 	.word	0x20000fac
 8006600:	20000300 	.word	0x20000300
 8006604:	20000fbc 	.word	0x20000fbc
 8006608:	20000310 	.word	0x20000310
 800660c:	20000fcc 	.word	0x20000fcc
 8006610:	20000320 	.word	0x20000320
 8006614:	20000fdc 	.word	0x20000fdc
 8006618:	20000330 	.word	0x20000330
 800661c:	20000fec 	.word	0x20000fec
 8006620:	20000340 	.word	0x20000340
 8006624:	20000ffc 	.word	0x20000ffc
 8006628:	20000350 	.word	0x20000350
 800662c:	2000100c 	.word	0x2000100c
 8006630:	20000360 	.word	0x20000360
 8006634:	2000101c 	.word	0x2000101c
 8006638:	20000370 	.word	0x20000370
 800663c:	2000102c 	.word	0x2000102c
 8006640:	20000380 	.word	0x20000380
 8006644:	2000103c 	.word	0x2000103c
 8006648:	20000390 	.word	0x20000390
 800664c:	2000104c 	.word	0x2000104c
 8006650:	200003a0 	.word	0x200003a0
 8006654:	2000105c 	.word	0x2000105c
 8006658:	200003b0 	.word	0x200003b0
 800665c:	2000106c 	.word	0x2000106c
 8006660:	200003c0 	.word	0x200003c0
 8006664:	2000107c 	.word	0x2000107c
 8006668:	200003d0 	.word	0x200003d0
 800666c:	2000108c 	.word	0x2000108c
 8006670:	200003e0 	.word	0x200003e0
 8006674:	2000109c 	.word	0x2000109c
 8006678:	200003f0 	.word	0x200003f0
 800667c:	200010ac 	.word	0x200010ac
 8006680:	20000400 	.word	0x20000400
 8006684:	200010bc 	.word	0x200010bc
 8006688:	20000410 	.word	0x20000410
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 16);
 800668c:	4a88      	ldr	r2, [pc, #544]	; (80068b0 <loadMenuTexts+0x688>)
 800668e:	4b89      	ldr	r3, [pc, #548]	; (80068b4 <loadMenuTexts+0x68c>)
 8006690:	4614      	mov	r4, r2
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariText, devirmeYukariTextTR, 16);
 800669c:	4a86      	ldr	r2, [pc, #536]	; (80068b8 <loadMenuTexts+0x690>)
 800669e:	4b87      	ldr	r3, [pc, #540]	; (80068bc <loadMenuTexts+0x694>)
 80066a0:	4614      	mov	r4, r2
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 16);
 80066ac:	4a84      	ldr	r2, [pc, #528]	; (80068c0 <loadMenuTexts+0x698>)
 80066ae:	4b85      	ldr	r3, [pc, #532]	; (80068c4 <loadMenuTexts+0x69c>)
 80066b0:	4614      	mov	r4, r2
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 16);
 80066bc:	4a82      	ldr	r2, [pc, #520]	; (80068c8 <loadMenuTexts+0x6a0>)
 80066be:	4b83      	ldr	r3, [pc, #524]	; (80068cc <loadMenuTexts+0x6a4>)
 80066c0:	4614      	mov	r4, r2
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 16);
 80066cc:	4a80      	ldr	r2, [pc, #512]	; (80068d0 <loadMenuTexts+0x6a8>)
 80066ce:	4b81      	ldr	r3, [pc, #516]	; (80068d4 <loadMenuTexts+0x6ac>)
 80066d0:	4614      	mov	r4, r2
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 16);
 80066dc:	4a7e      	ldr	r2, [pc, #504]	; (80068d8 <loadMenuTexts+0x6b0>)
 80066de:	4b7f      	ldr	r3, [pc, #508]	; (80068dc <loadMenuTexts+0x6b4>)
 80066e0:	4614      	mov	r4, r2
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 16);
 80066ec:	4a7c      	ldr	r2, [pc, #496]	; (80068e0 <loadMenuTexts+0x6b8>)
 80066ee:	4b7d      	ldr	r3, [pc, #500]	; (80068e4 <loadMenuTexts+0x6bc>)
 80066f0:	4614      	mov	r4, r2
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tekTesirText, tekTesirTextTR, 16);
 80066fc:	4a7a      	ldr	r2, [pc, #488]	; (80068e8 <loadMenuTexts+0x6c0>)
 80066fe:	4b7b      	ldr	r3, [pc, #492]	; (80068ec <loadMenuTexts+0x6c4>)
 8006700:	4614      	mov	r4, r2
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ciftTesirText, ciftTesirTextTR, 16);
 800670c:	4a78      	ldr	r2, [pc, #480]	; (80068f0 <loadMenuTexts+0x6c8>)
 800670e:	4b79      	ldr	r3, [pc, #484]	; (80068f4 <loadMenuTexts+0x6cc>)
 8006710:	4614      	mov	r4, r2
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 16);
 800671c:	4a76      	ldr	r2, [pc, #472]	; (80068f8 <loadMenuTexts+0x6d0>)
 800671e:	4b77      	ldr	r3, [pc, #476]	; (80068fc <loadMenuTexts+0x6d4>)
 8006720:	4614      	mov	r4, r2
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariValfSureText, yukariValfSureTextTR, 16);
 800672c:	4a74      	ldr	r2, [pc, #464]	; (8006900 <loadMenuTexts+0x6d8>)
 800672e:	4b75      	ldr	r3, [pc, #468]	; (8006904 <loadMenuTexts+0x6dc>)
 8006730:	4614      	mov	r4, r2
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(asagiValfSureText, asagiValfSureTextTR, 16);
 800673c:	4a72      	ldr	r2, [pc, #456]	; (8006908 <loadMenuTexts+0x6e0>)
 800673e:	4b73      	ldr	r3, [pc, #460]	; (800690c <loadMenuTexts+0x6e4>)
 8006740:	4614      	mov	r4, r2
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 16);
 800674c:	4a70      	ldr	r2, [pc, #448]	; (8006910 <loadMenuTexts+0x6e8>)
 800674e:	4b71      	ldr	r3, [pc, #452]	; (8006914 <loadMenuTexts+0x6ec>)
 8006750:	4614      	mov	r4, r2
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ileriValfSureText, ileriValfSureTextTR, 16);
 800675c:	4a6e      	ldr	r2, [pc, #440]	; (8006918 <loadMenuTexts+0x6f0>)
 800675e:	4b6f      	ldr	r3, [pc, #444]	; (800691c <loadMenuTexts+0x6f4>)
 8006760:	4614      	mov	r4, r2
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 16);
 800676c:	4a6c      	ldr	r2, [pc, #432]	; (8006920 <loadMenuTexts+0x6f8>)
 800676e:	4b6d      	ldr	r3, [pc, #436]	; (8006924 <loadMenuTexts+0x6fc>)
 8006770:	4614      	mov	r4, r2
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	6859      	ldr	r1, [r3, #4]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(geriValfSureText, geriValfSureTextTR, 16);
 800677c:	4a6a      	ldr	r2, [pc, #424]	; (8006928 <loadMenuTexts+0x700>)
 800677e:	4b6b      	ldr	r3, [pc, #428]	; (800692c <loadMenuTexts+0x704>)
 8006780:	4614      	mov	r4, r2
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSuresiText, calismaSuresiTextTR, 16);
 800678c:	4a68      	ldr	r2, [pc, #416]	; (8006930 <loadMenuTexts+0x708>)
 800678e:	4b69      	ldr	r3, [pc, #420]	; (8006934 <loadMenuTexts+0x70c>)
 8006790:	4614      	mov	r4, r2
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	6859      	ldr	r1, [r3, #4]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSayisiText, calismaSayisiTextTR, 16);
 800679c:	4a66      	ldr	r2, [pc, #408]	; (8006938 <loadMenuTexts+0x710>)
 800679e:	4b67      	ldr	r3, [pc, #412]	; (800693c <loadMenuTexts+0x714>)
 80067a0:	4614      	mov	r4, r2
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 16);
 80067ac:	4a64      	ldr	r2, [pc, #400]	; (8006940 <loadMenuTexts+0x718>)
 80067ae:	4b65      	ldr	r3, [pc, #404]	; (8006944 <loadMenuTexts+0x71c>)
 80067b0:	4614      	mov	r4, r2
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dilSecimText, dilSecimTextTR, 16);
 80067bc:	4a62      	ldr	r2, [pc, #392]	; (8006948 <loadMenuTexts+0x720>)
 80067be:	4b63      	ldr	r3, [pc, #396]	; (800694c <loadMenuTexts+0x724>)
 80067c0:	4614      	mov	r4, r2
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	6859      	ldr	r1, [r3, #4]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextTR, 16);
 80067cc:	4a60      	ldr	r2, [pc, #384]	; (8006950 <loadMenuTexts+0x728>)
 80067ce:	4b61      	ldr	r3, [pc, #388]	; (8006954 <loadMenuTexts+0x72c>)
 80067d0:	4614      	mov	r4, r2
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	6859      	ldr	r1, [r3, #4]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(menudenCikisText, menudenCikisTextTR, 16);
 80067dc:	4a5e      	ldr	r2, [pc, #376]	; (8006958 <loadMenuTexts+0x730>)
 80067de:	4b5f      	ldr	r3, [pc, #380]	; (800695c <loadMenuTexts+0x734>)
 80067e0:	4614      	mov	r4, r2
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	6859      	ldr	r1, [r3, #4]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enteraBasinizText, enteraBasinizTextTR, 16);
 80067ec:	4a5c      	ldr	r2, [pc, #368]	; (8006960 <loadMenuTexts+0x738>)
 80067ee:	4b5d      	ldr	r3, [pc, #372]	; (8006964 <loadMenuTexts+0x73c>)
 80067f0:	4614      	mov	r4, r2
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	6859      	ldr	r1, [r3, #4]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKoduText, hataKoduTextTR, 16);
 80067fc:	4a5a      	ldr	r2, [pc, #360]	; (8006968 <loadMenuTexts+0x740>)
 80067fe:	4b5b      	ldr	r3, [pc, #364]	; (800696c <loadMenuTexts+0x744>)
 8006800:	4614      	mov	r4, r2
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	6859      	ldr	r1, [r3, #4]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dataSynchText, dataSynchTextTR, 16);
 800680c:	4a58      	ldr	r2, [pc, #352]	; (8006970 <loadMenuTexts+0x748>)
 800680e:	4b59      	ldr	r3, [pc, #356]	; (8006974 <loadMenuTexts+0x74c>)
 8006810:	4614      	mov	r4, r2
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	6859      	ldr	r1, [r3, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dataSynch2Text, dataSynch2TextTR, 16);
 800681c:	4a56      	ldr	r2, [pc, #344]	; (8006978 <loadMenuTexts+0x750>)
 800681e:	4b57      	ldr	r3, [pc, #348]	; (800697c <loadMenuTexts+0x754>)
 8006820:	4614      	mov	r4, r2
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	6859      	ldr	r1, [r3, #4]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 16);
 800682c:	4a54      	ldr	r2, [pc, #336]	; (8006980 <loadMenuTexts+0x758>)
 800682e:	4b55      	ldr	r3, [pc, #340]	; (8006984 <loadMenuTexts+0x75c>)
 8006830:	4614      	mov	r4, r2
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 16);
 800683c:	4a52      	ldr	r2, [pc, #328]	; (8006988 <loadMenuTexts+0x760>)
 800683e:	4b53      	ldr	r3, [pc, #332]	; (800698c <loadMenuTexts+0x764>)
 8006840:	4614      	mov	r4, r2
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	6859      	ldr	r1, [r3, #4]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBe12Text, mustBe12TextTR, 16);
 800684c:	4a50      	ldr	r2, [pc, #320]	; (8006990 <loadMenuTexts+0x768>)
 800684e:	4b51      	ldr	r3, [pc, #324]	; (8006994 <loadMenuTexts+0x76c>)
 8006850:	4614      	mov	r4, r2
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBe122Text, mustBe122TextTR, 16);
 800685c:	4a4e      	ldr	r2, [pc, #312]	; (8006998 <loadMenuTexts+0x770>)
 800685e:	4b4f      	ldr	r3, [pc, #316]	; (800699c <loadMenuTexts+0x774>)
 8006860:	4614      	mov	r4, r2
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	6859      	ldr	r1, [r3, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 16);
 800686c:	4a4c      	ldr	r2, [pc, #304]	; (80069a0 <loadMenuTexts+0x778>)
 800686e:	4b4d      	ldr	r3, [pc, #308]	; (80069a4 <loadMenuTexts+0x77c>)
 8006870:	4614      	mov	r4, r2
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 16);
 800687c:	4a4a      	ldr	r2, [pc, #296]	; (80069a8 <loadMenuTexts+0x780>)
 800687e:	4b4b      	ldr	r3, [pc, #300]	; (80069ac <loadMenuTexts+0x784>)
 8006880:	4614      	mov	r4, r2
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	6859      	ldr	r1, [r3, #4]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(passExceedErrorText, passExceedErrorTextTR, 16);
 800688c:	4a48      	ldr	r2, [pc, #288]	; (80069b0 <loadMenuTexts+0x788>)
 800688e:	4b49      	ldr	r3, [pc, #292]	; (80069b4 <loadMenuTexts+0x78c>)
 8006890:	4614      	mov	r4, r2
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(passExceedError2Text, passExceedError2TextTR, 16);
 800689c:	4a46      	ldr	r2, [pc, #280]	; (80069b8 <loadMenuTexts+0x790>)
 800689e:	4b47      	ldr	r3, [pc, #284]	; (80069bc <loadMenuTexts+0x794>)
 80068a0:	4614      	mov	r4, r2
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 16);
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 16);
		memcpy(passExceedErrorText, passExceedErrorTextEN, 16);
		memcpy(passExceedError2Text, passExceedError2TextEN, 16);
	}
}
 80068ac:	e3c2      	b.n	8007034 <loadMenuTexts+0xe0c>
 80068ae:	bf00      	nop
 80068b0:	200010cc 	.word	0x200010cc
 80068b4:	20000420 	.word	0x20000420
 80068b8:	200010dc 	.word	0x200010dc
 80068bc:	20000430 	.word	0x20000430
 80068c0:	200010ec 	.word	0x200010ec
 80068c4:	20000440 	.word	0x20000440
 80068c8:	200010fc 	.word	0x200010fc
 80068cc:	20000450 	.word	0x20000450
 80068d0:	2000110c 	.word	0x2000110c
 80068d4:	20000460 	.word	0x20000460
 80068d8:	2000111c 	.word	0x2000111c
 80068dc:	20000470 	.word	0x20000470
 80068e0:	2000112c 	.word	0x2000112c
 80068e4:	20000480 	.word	0x20000480
 80068e8:	2000113c 	.word	0x2000113c
 80068ec:	20000490 	.word	0x20000490
 80068f0:	2000114c 	.word	0x2000114c
 80068f4:	200004a0 	.word	0x200004a0
 80068f8:	2000115c 	.word	0x2000115c
 80068fc:	200004b0 	.word	0x200004b0
 8006900:	2000116c 	.word	0x2000116c
 8006904:	200004c0 	.word	0x200004c0
 8006908:	2000117c 	.word	0x2000117c
 800690c:	200004d0 	.word	0x200004d0
 8006910:	2000118c 	.word	0x2000118c
 8006914:	200004e0 	.word	0x200004e0
 8006918:	2000119c 	.word	0x2000119c
 800691c:	200004f0 	.word	0x200004f0
 8006920:	200011ac 	.word	0x200011ac
 8006924:	20000500 	.word	0x20000500
 8006928:	200011bc 	.word	0x200011bc
 800692c:	20000510 	.word	0x20000510
 8006930:	200011cc 	.word	0x200011cc
 8006934:	20000520 	.word	0x20000520
 8006938:	200011dc 	.word	0x200011dc
 800693c:	20000530 	.word	0x20000530
 8006940:	200011ec 	.word	0x200011ec
 8006944:	20000540 	.word	0x20000540
 8006948:	200011fc 	.word	0x200011fc
 800694c:	20000550 	.word	0x20000550
 8006950:	2000120c 	.word	0x2000120c
 8006954:	20000560 	.word	0x20000560
 8006958:	2000121c 	.word	0x2000121c
 800695c:	20000570 	.word	0x20000570
 8006960:	2000122c 	.word	0x2000122c
 8006964:	20000580 	.word	0x20000580
 8006968:	2000123c 	.word	0x2000123c
 800696c:	20000590 	.word	0x20000590
 8006970:	2000124c 	.word	0x2000124c
 8006974:	20000a00 	.word	0x20000a00
 8006978:	2000125c 	.word	0x2000125c
 800697c:	20000a10 	.word	0x20000a10
 8006980:	2000126c 	.word	0x2000126c
 8006984:	20000a20 	.word	0x20000a20
 8006988:	2000127c 	.word	0x2000127c
 800698c:	20000a30 	.word	0x20000a30
 8006990:	2000128c 	.word	0x2000128c
 8006994:	20000a80 	.word	0x20000a80
 8006998:	2000129c 	.word	0x2000129c
 800699c:	20000a90 	.word	0x20000a90
 80069a0:	200012ac 	.word	0x200012ac
 80069a4:	20000ac0 	.word	0x20000ac0
 80069a8:	200012bc 	.word	0x200012bc
 80069ac:	20000ad0 	.word	0x20000ad0
 80069b0:	200012cc 	.word	0x200012cc
 80069b4:	20000b00 	.word	0x20000b00
 80069b8:	200012dc 	.word	0x200012dc
 80069bc:	20000b10 	.word	0x20000b10
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 16); //destination, source, size
 80069c0:	4ab8      	ldr	r2, [pc, #736]	; (8006ca4 <loadMenuTexts+0xa7c>)
 80069c2:	4bb9      	ldr	r3, [pc, #740]	; (8006ca8 <loadMenuTexts+0xa80>)
 80069c4:	4614      	mov	r4, r2
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ayarlarText, ayarlarTextEN, 16);
 80069d0:	4ab6      	ldr	r2, [pc, #728]	; (8006cac <loadMenuTexts+0xa84>)
 80069d2:	4bb7      	ldr	r3, [pc, #732]	; (8006cb0 <loadMenuTexts+0xa88>)
 80069d4:	4614      	mov	r4, r2
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	6859      	ldr	r1, [r3, #4]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKayitListText, hataKayitListTextEN, 16);
 80069e0:	4ab4      	ldr	r2, [pc, #720]	; (8006cb4 <loadMenuTexts+0xa8c>)
 80069e2:	4bb5      	ldr	r3, [pc, #724]	; (8006cb8 <loadMenuTexts+0xa90>)
 80069e4:	4614      	mov	r4, r2
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birHataKoduText, birHataKoduTextEN, 16);
 80069f0:	4ab2      	ldr	r2, [pc, #712]	; (8006cbc <loadMenuTexts+0xa94>)
 80069f2:	4bb3      	ldr	r3, [pc, #716]	; (8006cc0 <loadMenuTexts+0xa98>)
 80069f4:	4614      	mov	r4, r2
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 16);
 8006a00:	4ab0      	ldr	r2, [pc, #704]	; (8006cc4 <loadMenuTexts+0xa9c>)
 8006a02:	4bb1      	ldr	r3, [pc, #708]	; (8006cc8 <loadMenuTexts+0xaa0>)
 8006a04:	4614      	mov	r4, r2
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ucHataKoduText, ucHataKoduTextEN, 16);
 8006a10:	4aae      	ldr	r2, [pc, #696]	; (8006ccc <loadMenuTexts+0xaa4>)
 8006a12:	4baf      	ldr	r3, [pc, #700]	; (8006cd0 <loadMenuTexts+0xaa8>)
 8006a14:	4614      	mov	r4, r2
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dortHataKoduText, dortHataKoduTextEN, 16);
 8006a20:	4aac      	ldr	r2, [pc, #688]	; (8006cd4 <loadMenuTexts+0xaac>)
 8006a22:	4bad      	ldr	r3, [pc, #692]	; (8006cd8 <loadMenuTexts+0xab0>)
 8006a24:	4614      	mov	r4, r2
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(besHataKoduText, besHataKoduTextEN, 16);
 8006a30:	4aaa      	ldr	r2, [pc, #680]	; (8006cdc <loadMenuTexts+0xab4>)
 8006a32:	4bab      	ldr	r3, [pc, #684]	; (8006ce0 <loadMenuTexts+0xab8>)
 8006a34:	4614      	mov	r4, r2
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	6859      	ldr	r1, [r3, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altiHataKoduText, altiHataKoduTextEN, 16);
 8006a40:	4aa8      	ldr	r2, [pc, #672]	; (8006ce4 <loadMenuTexts+0xabc>)
 8006a42:	4ba9      	ldr	r3, [pc, #676]	; (8006ce8 <loadMenuTexts+0xac0>)
 8006a44:	4614      	mov	r4, r2
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yediHataKoduText, yediHataKoduTextEN, 16);
 8006a50:	4aa6      	ldr	r2, [pc, #664]	; (8006cec <loadMenuTexts+0xac4>)
 8006a52:	4ba7      	ldr	r3, [pc, #668]	; (8006cf0 <loadMenuTexts+0xac8>)
 8006a54:	4614      	mov	r4, r2
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	6859      	ldr	r1, [r3, #4]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 16);
 8006a60:	4aa4      	ldr	r2, [pc, #656]	; (8006cf4 <loadMenuTexts+0xacc>)
 8006a62:	4ba5      	ldr	r3, [pc, #660]	; (8006cf8 <loadMenuTexts+0xad0>)
 8006a64:	4614      	mov	r4, r2
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 16);
 8006a70:	4aa2      	ldr	r2, [pc, #648]	; (8006cfc <loadMenuTexts+0xad4>)
 8006a72:	4ba3      	ldr	r3, [pc, #652]	; (8006d00 <loadMenuTexts+0xad8>)
 8006a74:	4614      	mov	r4, r2
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	6859      	ldr	r1, [r3, #4]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(onHataKoduText, onHataKoduTextEN, 16);
 8006a80:	4aa0      	ldr	r2, [pc, #640]	; (8006d04 <loadMenuTexts+0xadc>)
 8006a82:	4ba1      	ldr	r3, [pc, #644]	; (8006d08 <loadMenuTexts+0xae0>)
 8006a84:	4614      	mov	r4, r2
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	6859      	ldr	r1, [r3, #4]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(silmekIcinText, silmekIcinTextEN, 16);
 8006a90:	4a9e      	ldr	r2, [pc, #632]	; (8006d0c <loadMenuTexts+0xae4>)
 8006a92:	4b9f      	ldr	r3, [pc, #636]	; (8006d10 <loadMenuTexts+0xae8>)
 8006a94:	4614      	mov	r4, r2
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	6859      	ldr	r1, [r3, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSekliText, calismaSekliTextEN, 16);
 8006aa0:	4a9c      	ldr	r2, [pc, #624]	; (8006d14 <loadMenuTexts+0xaec>)
 8006aa2:	4b9d      	ldr	r3, [pc, #628]	; (8006d18 <loadMenuTexts+0xaf0>)
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	6859      	ldr	r1, [r3, #4]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 16);
 8006ab0:	4a9a      	ldr	r2, [pc, #616]	; (8006d1c <loadMenuTexts+0xaf4>)
 8006ab2:	4b9b      	ldr	r3, [pc, #620]	; (8006d20 <loadMenuTexts+0xaf8>)
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	6859      	ldr	r1, [r3, #4]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 16);
 8006ac0:	4a98      	ldr	r2, [pc, #608]	; (8006d24 <loadMenuTexts+0xafc>)
 8006ac2:	4b99      	ldr	r3, [pc, #612]	; (8006d28 <loadMenuTexts+0xb00>)
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basGonderText, basGonderTextEN, 16);
 8006ad0:	4a96      	ldr	r2, [pc, #600]	; (8006d2c <loadMenuTexts+0xb04>)
 8006ad2:	4b97      	ldr	r3, [pc, #604]	; (8006d30 <loadMenuTexts+0xb08>)
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 16);
 8006ae0:	4a94      	ldr	r2, [pc, #592]	; (8006d34 <loadMenuTexts+0xb0c>)
 8006ae2:	4b95      	ldr	r3, [pc, #596]	; (8006d38 <loadMenuTexts+0xb10>)
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(pasifText, pasifTextEN, 16);
 8006af0:	4a92      	ldr	r2, [pc, #584]	; (8006d3c <loadMenuTexts+0xb14>)
 8006af2:	4b93      	ldr	r3, [pc, #588]	; (8006d40 <loadMenuTexts+0xb18>)
 8006af4:	4614      	mov	r4, r2
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	6859      	ldr	r1, [r3, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(aktifText, aktifTextEN, 16);
 8006b00:	4a90      	ldr	r2, [pc, #576]	; (8006d44 <loadMenuTexts+0xb1c>)
 8006b02:	4b91      	ldr	r3, [pc, #580]	; (8006d48 <loadMenuTexts+0xb20>)
 8006b04:	4614      	mov	r4, r2
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 16);
 8006b10:	4a8e      	ldr	r2, [pc, #568]	; (8006d4c <loadMenuTexts+0xb24>)
 8006b12:	4b8f      	ldr	r3, [pc, #572]	; (8006d50 <loadMenuTexts+0xb28>)
 8006b14:	4614      	mov	r4, r2
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altLimitText, altLimitTextEN, 16);
 8006b20:	4a8c      	ldr	r2, [pc, #560]	; (8006d54 <loadMenuTexts+0xb2c>)
 8006b22:	4b8d      	ldr	r3, [pc, #564]	; (8006d58 <loadMenuTexts+0xb30>)
 8006b24:	4614      	mov	r4, r2
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	6859      	ldr	r1, [r3, #4]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basincSalteriText, basincSalteriTextEN, 16);
 8006b30:	4a8a      	ldr	r2, [pc, #552]	; (8006d5c <loadMenuTexts+0xb34>)
 8006b32:	4b8b      	ldr	r3, [pc, #556]	; (8006d60 <loadMenuTexts+0xb38>)
 8006b34:	4614      	mov	r4, r2
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 16);
 8006b40:	4a88      	ldr	r2, [pc, #544]	; (8006d64 <loadMenuTexts+0xb3c>)
 8006b42:	4b89      	ldr	r3, [pc, #548]	; (8006d68 <loadMenuTexts+0xb40>)
 8006b44:	4614      	mov	r4, r2
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 16);
 8006b50:	4a86      	ldr	r2, [pc, #536]	; (8006d6c <loadMenuTexts+0xb44>)
 8006b52:	4b87      	ldr	r3, [pc, #540]	; (8006d70 <loadMenuTexts+0xb48>)
 8006b54:	4614      	mov	r4, r2
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 16);
 8006b60:	4a84      	ldr	r2, [pc, #528]	; (8006d74 <loadMenuTexts+0xb4c>)
 8006b62:	4b85      	ldr	r3, [pc, #532]	; (8006d78 <loadMenuTexts+0xb50>)
 8006b64:	4614      	mov	r4, r2
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	6859      	ldr	r1, [r3, #4]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 16);
 8006b70:	4a82      	ldr	r2, [pc, #520]	; (8006d7c <loadMenuTexts+0xb54>)
 8006b72:	4b83      	ldr	r3, [pc, #524]	; (8006d80 <loadMenuTexts+0xb58>)
 8006b74:	4614      	mov	r4, r2
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 16);
 8006b80:	4a80      	ldr	r2, [pc, #512]	; (8006d84 <loadMenuTexts+0xb5c>)
 8006b82:	4b81      	ldr	r3, [pc, #516]	; (8006d88 <loadMenuTexts+0xb60>)
 8006b84:	4614      	mov	r4, r2
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 16);
 8006b90:	4a7e      	ldr	r2, [pc, #504]	; (8006d8c <loadMenuTexts+0xb64>)
 8006b92:	4b7f      	ldr	r3, [pc, #508]	; (8006d90 <loadMenuTexts+0xb68>)
 8006b94:	4614      	mov	r4, r2
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katButonuEXTText, katButonuEXTTextEN, 16);
 8006ba0:	4a7c      	ldr	r2, [pc, #496]	; (8006d94 <loadMenuTexts+0xb6c>)
 8006ba2:	4b7d      	ldr	r3, [pc, #500]	; (8006d98 <loadMenuTexts+0xb70>)
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 16);
 8006bb0:	4a7a      	ldr	r2, [pc, #488]	; (8006d9c <loadMenuTexts+0xb74>)
 8006bb2:	4b7b      	ldr	r3, [pc, #492]	; (8006da0 <loadMenuTexts+0xb78>)
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(butonKontrolluText, butonKontrolluTextEN, 16);
 8006bc0:	4a78      	ldr	r2, [pc, #480]	; (8006da4 <loadMenuTexts+0xb7c>)
 8006bc2:	4b79      	ldr	r3, [pc, #484]	; (8006da8 <loadMenuTexts+0xb80>)
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	6859      	ldr	r1, [r3, #4]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 16);
 8006bd0:	4a76      	ldr	r2, [pc, #472]	; (8006dac <loadMenuTexts+0xb84>)
 8006bd2:	4b77      	ldr	r3, [pc, #476]	; (8006db0 <loadMenuTexts+0xb88>)
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kacSaniyeText, kacSaniyeTextEN, 16);
 8006be0:	4a74      	ldr	r2, [pc, #464]	; (8006db4 <loadMenuTexts+0xb8c>)
 8006be2:	4b75      	ldr	r3, [pc, #468]	; (8006db8 <loadMenuTexts+0xb90>)
 8006be4:	4614      	mov	r4, r2
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	6859      	ldr	r1, [r3, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 16);
 8006bf0:	4a72      	ldr	r2, [pc, #456]	; (8006dbc <loadMenuTexts+0xb94>)
 8006bf2:	4b73      	ldr	r3, [pc, #460]	; (8006dc0 <loadMenuTexts+0xb98>)
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	6859      	ldr	r1, [r3, #4]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 16);
 8006c00:	4a70      	ldr	r2, [pc, #448]	; (8006dc4 <loadMenuTexts+0xb9c>)
 8006c02:	4b71      	ldr	r3, [pc, #452]	; (8006dc8 <loadMenuTexts+0xba0>)
 8006c04:	4614      	mov	r4, r2
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	6859      	ldr	r1, [r3, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 16);
 8006c10:	4a6e      	ldr	r2, [pc, #440]	; (8006dcc <loadMenuTexts+0xba4>)
 8006c12:	4b6f      	ldr	r3, [pc, #444]	; (8006dd0 <loadMenuTexts+0xba8>)
 8006c14:	4614      	mov	r4, r2
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	6859      	ldr	r1, [r3, #4]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 16);
 8006c20:	4a6c      	ldr	r2, [pc, #432]	; (8006dd4 <loadMenuTexts+0xbac>)
 8006c22:	4b6d      	ldr	r3, [pc, #436]	; (8006dd8 <loadMenuTexts+0xbb0>)
 8006c24:	4614      	mov	r4, r2
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 16);
 8006c30:	4a6a      	ldr	r2, [pc, #424]	; (8006ddc <loadMenuTexts+0xbb4>)
 8006c32:	4b6b      	ldr	r3, [pc, #428]	; (8006de0 <loadMenuTexts+0xbb8>)
 8006c34:	4614      	mov	r4, r2
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	6859      	ldr	r1, [r3, #4]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 16);
 8006c40:	4a68      	ldr	r2, [pc, #416]	; (8006de4 <loadMenuTexts+0xbbc>)
 8006c42:	4b69      	ldr	r3, [pc, #420]	; (8006de8 <loadMenuTexts+0xbc0>)
 8006c44:	4614      	mov	r4, r2
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 16);
 8006c50:	4a66      	ldr	r2, [pc, #408]	; (8006dec <loadMenuTexts+0xbc4>)
 8006c52:	4b67      	ldr	r3, [pc, #412]	; (8006df0 <loadMenuTexts+0xbc8>)
 8006c54:	4614      	mov	r4, r2
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	6859      	ldr	r1, [r3, #4]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 16);
 8006c60:	4a64      	ldr	r2, [pc, #400]	; (8006df4 <loadMenuTexts+0xbcc>)
 8006c62:	4b65      	ldr	r3, [pc, #404]	; (8006df8 <loadMenuTexts+0xbd0>)
 8006c64:	4614      	mov	r4, r2
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 16);
 8006c70:	4a62      	ldr	r2, [pc, #392]	; (8006dfc <loadMenuTexts+0xbd4>)
 8006c72:	4b63      	ldr	r3, [pc, #396]	; (8006e00 <loadMenuTexts+0xbd8>)
 8006c74:	4614      	mov	r4, r2
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	6859      	ldr	r1, [r3, #4]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 16);
 8006c80:	4a60      	ldr	r2, [pc, #384]	; (8006e04 <loadMenuTexts+0xbdc>)
 8006c82:	4b61      	ldr	r3, [pc, #388]	; (8006e08 <loadMenuTexts+0xbe0>)
 8006c84:	4614      	mov	r4, r2
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	6859      	ldr	r1, [r3, #4]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAktifText, devirmeAktifTextEN, 16);
 8006c90:	4a5e      	ldr	r2, [pc, #376]	; (8006e0c <loadMenuTexts+0xbe4>)
 8006c92:	4b5f      	ldr	r3, [pc, #380]	; (8006e10 <loadMenuTexts+0xbe8>)
 8006c94:	4614      	mov	r4, r2
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	6859      	ldr	r1, [r3, #4]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca0:	e0b8      	b.n	8006e14 <loadMenuTexts+0xbec>
 8006ca2:	bf00      	nop
 8006ca4:	20000dec 	.word	0x20000dec
 8006ca8:	200005a0 	.word	0x200005a0
 8006cac:	20000dfc 	.word	0x20000dfc
 8006cb0:	200005b0 	.word	0x200005b0
 8006cb4:	20000e0c 	.word	0x20000e0c
 8006cb8:	200005c0 	.word	0x200005c0
 8006cbc:	20000e1c 	.word	0x20000e1c
 8006cc0:	200005d0 	.word	0x200005d0
 8006cc4:	20000e2c 	.word	0x20000e2c
 8006cc8:	200005e0 	.word	0x200005e0
 8006ccc:	20000e3c 	.word	0x20000e3c
 8006cd0:	200005f0 	.word	0x200005f0
 8006cd4:	20000e4c 	.word	0x20000e4c
 8006cd8:	20000600 	.word	0x20000600
 8006cdc:	20000e5c 	.word	0x20000e5c
 8006ce0:	20000610 	.word	0x20000610
 8006ce4:	20000e6c 	.word	0x20000e6c
 8006ce8:	20000620 	.word	0x20000620
 8006cec:	20000e7c 	.word	0x20000e7c
 8006cf0:	20000630 	.word	0x20000630
 8006cf4:	20000e8c 	.word	0x20000e8c
 8006cf8:	20000640 	.word	0x20000640
 8006cfc:	20000e9c 	.word	0x20000e9c
 8006d00:	20000650 	.word	0x20000650
 8006d04:	20000eac 	.word	0x20000eac
 8006d08:	20000660 	.word	0x20000660
 8006d0c:	20000ebc 	.word	0x20000ebc
 8006d10:	20000670 	.word	0x20000670
 8006d14:	20000ecc 	.word	0x20000ecc
 8006d18:	20000680 	.word	0x20000680
 8006d1c:	20000edc 	.word	0x20000edc
 8006d20:	20000690 	.word	0x20000690
 8006d24:	20000eec 	.word	0x20000eec
 8006d28:	200006a0 	.word	0x200006a0
 8006d2c:	20000efc 	.word	0x20000efc
 8006d30:	200006b0 	.word	0x200006b0
 8006d34:	20000f0c 	.word	0x20000f0c
 8006d38:	200006c0 	.word	0x200006c0
 8006d3c:	20000f1c 	.word	0x20000f1c
 8006d40:	200006d0 	.word	0x200006d0
 8006d44:	20000f2c 	.word	0x20000f2c
 8006d48:	200006e0 	.word	0x200006e0
 8006d4c:	20000f3c 	.word	0x20000f3c
 8006d50:	200006f0 	.word	0x200006f0
 8006d54:	20000f4c 	.word	0x20000f4c
 8006d58:	20000700 	.word	0x20000700
 8006d5c:	20000f5c 	.word	0x20000f5c
 8006d60:	20000710 	.word	0x20000710
 8006d64:	20000f6c 	.word	0x20000f6c
 8006d68:	20000720 	.word	0x20000720
 8006d6c:	20000f7c 	.word	0x20000f7c
 8006d70:	20000730 	.word	0x20000730
 8006d74:	20000f8c 	.word	0x20000f8c
 8006d78:	20000740 	.word	0x20000740
 8006d7c:	20000f9c 	.word	0x20000f9c
 8006d80:	20000750 	.word	0x20000750
 8006d84:	20000fac 	.word	0x20000fac
 8006d88:	20000760 	.word	0x20000760
 8006d8c:	20000fbc 	.word	0x20000fbc
 8006d90:	20000770 	.word	0x20000770
 8006d94:	20000fcc 	.word	0x20000fcc
 8006d98:	20000780 	.word	0x20000780
 8006d9c:	20000fdc 	.word	0x20000fdc
 8006da0:	20000790 	.word	0x20000790
 8006da4:	20000fec 	.word	0x20000fec
 8006da8:	200007a0 	.word	0x200007a0
 8006dac:	20000ffc 	.word	0x20000ffc
 8006db0:	200007b0 	.word	0x200007b0
 8006db4:	2000100c 	.word	0x2000100c
 8006db8:	200007c0 	.word	0x200007c0
 8006dbc:	2000101c 	.word	0x2000101c
 8006dc0:	200007d0 	.word	0x200007d0
 8006dc4:	2000102c 	.word	0x2000102c
 8006dc8:	200007e0 	.word	0x200007e0
 8006dcc:	2000103c 	.word	0x2000103c
 8006dd0:	200007f0 	.word	0x200007f0
 8006dd4:	2000104c 	.word	0x2000104c
 8006dd8:	20000800 	.word	0x20000800
 8006ddc:	2000105c 	.word	0x2000105c
 8006de0:	20000810 	.word	0x20000810
 8006de4:	2000106c 	.word	0x2000106c
 8006de8:	20000820 	.word	0x20000820
 8006dec:	2000107c 	.word	0x2000107c
 8006df0:	20000830 	.word	0x20000830
 8006df4:	2000108c 	.word	0x2000108c
 8006df8:	20000840 	.word	0x20000840
 8006dfc:	2000109c 	.word	0x2000109c
 8006e00:	20000850 	.word	0x20000850
 8006e04:	200010ac 	.word	0x200010ac
 8006e08:	20000860 	.word	0x20000860
 8006e0c:	200010bc 	.word	0x200010bc
 8006e10:	20000870 	.word	0x20000870
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 16);
 8006e14:	4a8a      	ldr	r2, [pc, #552]	; (8007040 <loadMenuTexts+0xe18>)
 8006e16:	4b8b      	ldr	r3, [pc, #556]	; (8007044 <loadMenuTexts+0xe1c>)
 8006e18:	4614      	mov	r4, r2
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariText, devirmeYukariTextEN, 16);
 8006e24:	4a88      	ldr	r2, [pc, #544]	; (8007048 <loadMenuTexts+0xe20>)
 8006e26:	4b89      	ldr	r3, [pc, #548]	; (800704c <loadMenuTexts+0xe24>)
 8006e28:	4614      	mov	r4, r2
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 16);
 8006e34:	4a86      	ldr	r2, [pc, #536]	; (8007050 <loadMenuTexts+0xe28>)
 8006e36:	4b87      	ldr	r3, [pc, #540]	; (8007054 <loadMenuTexts+0xe2c>)
 8006e38:	4614      	mov	r4, r2
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	6859      	ldr	r1, [r3, #4]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 16);
 8006e44:	4a84      	ldr	r2, [pc, #528]	; (8007058 <loadMenuTexts+0xe30>)
 8006e46:	4b85      	ldr	r3, [pc, #532]	; (800705c <loadMenuTexts+0xe34>)
 8006e48:	4614      	mov	r4, r2
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 16);
 8006e54:	4a82      	ldr	r2, [pc, #520]	; (8007060 <loadMenuTexts+0xe38>)
 8006e56:	4b83      	ldr	r3, [pc, #524]	; (8007064 <loadMenuTexts+0xe3c>)
 8006e58:	4614      	mov	r4, r2
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	6859      	ldr	r1, [r3, #4]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 16);
 8006e64:	4a80      	ldr	r2, [pc, #512]	; (8007068 <loadMenuTexts+0xe40>)
 8006e66:	4b81      	ldr	r3, [pc, #516]	; (800706c <loadMenuTexts+0xe44>)
 8006e68:	4614      	mov	r4, r2
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 16);
 8006e74:	4a7e      	ldr	r2, [pc, #504]	; (8007070 <loadMenuTexts+0xe48>)
 8006e76:	4b7f      	ldr	r3, [pc, #508]	; (8007074 <loadMenuTexts+0xe4c>)
 8006e78:	4614      	mov	r4, r2
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	6859      	ldr	r1, [r3, #4]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tekTesirText, tekTesirTextEN, 16);
 8006e84:	4a7c      	ldr	r2, [pc, #496]	; (8007078 <loadMenuTexts+0xe50>)
 8006e86:	4b7d      	ldr	r3, [pc, #500]	; (800707c <loadMenuTexts+0xe54>)
 8006e88:	4614      	mov	r4, r2
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ciftTesirText, ciftTesirTextEN, 16);
 8006e94:	4a7a      	ldr	r2, [pc, #488]	; (8007080 <loadMenuTexts+0xe58>)
 8006e96:	4b7b      	ldr	r3, [pc, #492]	; (8007084 <loadMenuTexts+0xe5c>)
 8006e98:	4614      	mov	r4, r2
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	6859      	ldr	r1, [r3, #4]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 16);
 8006ea4:	4a78      	ldr	r2, [pc, #480]	; (8007088 <loadMenuTexts+0xe60>)
 8006ea6:	4b79      	ldr	r3, [pc, #484]	; (800708c <loadMenuTexts+0xe64>)
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariValfSureText, yukariValfSureTextEN, 16);
 8006eb4:	4a76      	ldr	r2, [pc, #472]	; (8007090 <loadMenuTexts+0xe68>)
 8006eb6:	4b77      	ldr	r3, [pc, #476]	; (8007094 <loadMenuTexts+0xe6c>)
 8006eb8:	4614      	mov	r4, r2
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(asagiValfSureText, asagiValfSureTextEN, 16);
 8006ec4:	4a74      	ldr	r2, [pc, #464]	; (8007098 <loadMenuTexts+0xe70>)
 8006ec6:	4b75      	ldr	r3, [pc, #468]	; (800709c <loadMenuTexts+0xe74>)
 8006ec8:	4614      	mov	r4, r2
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 16);
 8006ed4:	4a72      	ldr	r2, [pc, #456]	; (80070a0 <loadMenuTexts+0xe78>)
 8006ed6:	4b73      	ldr	r3, [pc, #460]	; (80070a4 <loadMenuTexts+0xe7c>)
 8006ed8:	4614      	mov	r4, r2
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	6859      	ldr	r1, [r3, #4]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ileriValfSureText, ileriValfSureTextEN, 16);
 8006ee4:	4a70      	ldr	r2, [pc, #448]	; (80070a8 <loadMenuTexts+0xe80>)
 8006ee6:	4b71      	ldr	r3, [pc, #452]	; (80070ac <loadMenuTexts+0xe84>)
 8006ee8:	4614      	mov	r4, r2
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 16);
 8006ef4:	4a6e      	ldr	r2, [pc, #440]	; (80070b0 <loadMenuTexts+0xe88>)
 8006ef6:	4b6f      	ldr	r3, [pc, #444]	; (80070b4 <loadMenuTexts+0xe8c>)
 8006ef8:	4614      	mov	r4, r2
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(geriValfSureText, geriValfSureTextEN, 16);
 8006f04:	4a6c      	ldr	r2, [pc, #432]	; (80070b8 <loadMenuTexts+0xe90>)
 8006f06:	4b6d      	ldr	r3, [pc, #436]	; (80070bc <loadMenuTexts+0xe94>)
 8006f08:	4614      	mov	r4, r2
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	6859      	ldr	r1, [r3, #4]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSuresiText, calismaSuresiTextEN, 16);
 8006f14:	4a6a      	ldr	r2, [pc, #424]	; (80070c0 <loadMenuTexts+0xe98>)
 8006f16:	4b6b      	ldr	r3, [pc, #428]	; (80070c4 <loadMenuTexts+0xe9c>)
 8006f18:	4614      	mov	r4, r2
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSayisiText, calismaSayisiTextEN, 16);
 8006f24:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <loadMenuTexts+0xea0>)
 8006f26:	4b69      	ldr	r3, [pc, #420]	; (80070cc <loadMenuTexts+0xea4>)
 8006f28:	4614      	mov	r4, r2
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	6859      	ldr	r1, [r3, #4]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 16);
 8006f34:	4a66      	ldr	r2, [pc, #408]	; (80070d0 <loadMenuTexts+0xea8>)
 8006f36:	4b67      	ldr	r3, [pc, #412]	; (80070d4 <loadMenuTexts+0xeac>)
 8006f38:	4614      	mov	r4, r2
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	6859      	ldr	r1, [r3, #4]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dilSecimText, dilSecimTextEN, 16);
 8006f44:	4a64      	ldr	r2, [pc, #400]	; (80070d8 <loadMenuTexts+0xeb0>)
 8006f46:	4b65      	ldr	r3, [pc, #404]	; (80070dc <loadMenuTexts+0xeb4>)
 8006f48:	4614      	mov	r4, r2
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextEN, 16);
 8006f54:	4a62      	ldr	r2, [pc, #392]	; (80070e0 <loadMenuTexts+0xeb8>)
 8006f56:	4b63      	ldr	r3, [pc, #396]	; (80070e4 <loadMenuTexts+0xebc>)
 8006f58:	4614      	mov	r4, r2
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	6859      	ldr	r1, [r3, #4]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(menudenCikisText, menudenCikisTextEN, 16);
 8006f64:	4a60      	ldr	r2, [pc, #384]	; (80070e8 <loadMenuTexts+0xec0>)
 8006f66:	4b61      	ldr	r3, [pc, #388]	; (80070ec <loadMenuTexts+0xec4>)
 8006f68:	4614      	mov	r4, r2
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enteraBasinizText, enteraBasinizTextEN, 16);
 8006f74:	4a5e      	ldr	r2, [pc, #376]	; (80070f0 <loadMenuTexts+0xec8>)
 8006f76:	4b5f      	ldr	r3, [pc, #380]	; (80070f4 <loadMenuTexts+0xecc>)
 8006f78:	4614      	mov	r4, r2
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	6859      	ldr	r1, [r3, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKoduText, hataKoduTextEN, 16);
 8006f84:	4a5c      	ldr	r2, [pc, #368]	; (80070f8 <loadMenuTexts+0xed0>)
 8006f86:	4b5d      	ldr	r3, [pc, #372]	; (80070fc <loadMenuTexts+0xed4>)
 8006f88:	4614      	mov	r4, r2
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dataSynchText, dataSynchTextEN, 16);
 8006f94:	4a5a      	ldr	r2, [pc, #360]	; (8007100 <loadMenuTexts+0xed8>)
 8006f96:	4b5b      	ldr	r3, [pc, #364]	; (8007104 <loadMenuTexts+0xedc>)
 8006f98:	4614      	mov	r4, r2
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dataSynch2Text, dataSynch2TextEN, 16);
 8006fa4:	4a58      	ldr	r2, [pc, #352]	; (8007108 <loadMenuTexts+0xee0>)
 8006fa6:	4b59      	ldr	r3, [pc, #356]	; (800710c <loadMenuTexts+0xee4>)
 8006fa8:	4614      	mov	r4, r2
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 16);
 8006fb4:	4a56      	ldr	r2, [pc, #344]	; (8007110 <loadMenuTexts+0xee8>)
 8006fb6:	4b57      	ldr	r3, [pc, #348]	; (8007114 <loadMenuTexts+0xeec>)
 8006fb8:	4614      	mov	r4, r2
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	6859      	ldr	r1, [r3, #4]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 16);
 8006fc4:	4a54      	ldr	r2, [pc, #336]	; (8007118 <loadMenuTexts+0xef0>)
 8006fc6:	4b55      	ldr	r3, [pc, #340]	; (800711c <loadMenuTexts+0xef4>)
 8006fc8:	4614      	mov	r4, r2
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBe12Text, mustBe12TextEN, 16);
 8006fd4:	4a52      	ldr	r2, [pc, #328]	; (8007120 <loadMenuTexts+0xef8>)
 8006fd6:	4b53      	ldr	r3, [pc, #332]	; (8007124 <loadMenuTexts+0xefc>)
 8006fd8:	4614      	mov	r4, r2
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(mustBe122Text, mustBe122TextEN, 16);
 8006fe4:	4a50      	ldr	r2, [pc, #320]	; (8007128 <loadMenuTexts+0xf00>)
 8006fe6:	4b51      	ldr	r3, [pc, #324]	; (800712c <loadMenuTexts+0xf04>)
 8006fe8:	4614      	mov	r4, r2
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 16);
 8006ff4:	4a4e      	ldr	r2, [pc, #312]	; (8007130 <loadMenuTexts+0xf08>)
 8006ff6:	4b4f      	ldr	r3, [pc, #316]	; (8007134 <loadMenuTexts+0xf0c>)
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 16);
 8007004:	4a4c      	ldr	r2, [pc, #304]	; (8007138 <loadMenuTexts+0xf10>)
 8007006:	4b4d      	ldr	r3, [pc, #308]	; (800713c <loadMenuTexts+0xf14>)
 8007008:	4614      	mov	r4, r2
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	6859      	ldr	r1, [r3, #4]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(passExceedErrorText, passExceedErrorTextEN, 16);
 8007014:	4a4a      	ldr	r2, [pc, #296]	; (8007140 <loadMenuTexts+0xf18>)
 8007016:	4b4b      	ldr	r3, [pc, #300]	; (8007144 <loadMenuTexts+0xf1c>)
 8007018:	4614      	mov	r4, r2
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(passExceedError2Text, passExceedError2TextEN, 16);
 8007024:	4a48      	ldr	r2, [pc, #288]	; (8007148 <loadMenuTexts+0xf20>)
 8007026:	4b49      	ldr	r3, [pc, #292]	; (800714c <loadMenuTexts+0xf24>)
 8007028:	4614      	mov	r4, r2
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bc90      	pop	{r4, r7}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	200010cc 	.word	0x200010cc
 8007044:	20000880 	.word	0x20000880
 8007048:	200010dc 	.word	0x200010dc
 800704c:	20000890 	.word	0x20000890
 8007050:	200010ec 	.word	0x200010ec
 8007054:	200008a0 	.word	0x200008a0
 8007058:	200010fc 	.word	0x200010fc
 800705c:	200008b0 	.word	0x200008b0
 8007060:	2000110c 	.word	0x2000110c
 8007064:	200008c0 	.word	0x200008c0
 8007068:	2000111c 	.word	0x2000111c
 800706c:	200008d0 	.word	0x200008d0
 8007070:	2000112c 	.word	0x2000112c
 8007074:	200008e0 	.word	0x200008e0
 8007078:	2000113c 	.word	0x2000113c
 800707c:	200008f0 	.word	0x200008f0
 8007080:	2000114c 	.word	0x2000114c
 8007084:	20000900 	.word	0x20000900
 8007088:	2000115c 	.word	0x2000115c
 800708c:	20000910 	.word	0x20000910
 8007090:	2000116c 	.word	0x2000116c
 8007094:	20000920 	.word	0x20000920
 8007098:	2000117c 	.word	0x2000117c
 800709c:	20000930 	.word	0x20000930
 80070a0:	2000118c 	.word	0x2000118c
 80070a4:	20000940 	.word	0x20000940
 80070a8:	2000119c 	.word	0x2000119c
 80070ac:	20000950 	.word	0x20000950
 80070b0:	200011ac 	.word	0x200011ac
 80070b4:	20000960 	.word	0x20000960
 80070b8:	200011bc 	.word	0x200011bc
 80070bc:	20000970 	.word	0x20000970
 80070c0:	200011cc 	.word	0x200011cc
 80070c4:	20000980 	.word	0x20000980
 80070c8:	200011dc 	.word	0x200011dc
 80070cc:	20000990 	.word	0x20000990
 80070d0:	200011ec 	.word	0x200011ec
 80070d4:	200009a0 	.word	0x200009a0
 80070d8:	200011fc 	.word	0x200011fc
 80070dc:	200009b0 	.word	0x200009b0
 80070e0:	2000120c 	.word	0x2000120c
 80070e4:	200009c0 	.word	0x200009c0
 80070e8:	2000121c 	.word	0x2000121c
 80070ec:	200009d0 	.word	0x200009d0
 80070f0:	2000122c 	.word	0x2000122c
 80070f4:	200009e0 	.word	0x200009e0
 80070f8:	2000123c 	.word	0x2000123c
 80070fc:	200009f0 	.word	0x200009f0
 8007100:	2000124c 	.word	0x2000124c
 8007104:	20000a60 	.word	0x20000a60
 8007108:	2000125c 	.word	0x2000125c
 800710c:	20000a70 	.word	0x20000a70
 8007110:	2000126c 	.word	0x2000126c
 8007114:	20000a40 	.word	0x20000a40
 8007118:	2000127c 	.word	0x2000127c
 800711c:	20000a50 	.word	0x20000a50
 8007120:	2000128c 	.word	0x2000128c
 8007124:	20000aa0 	.word	0x20000aa0
 8007128:	2000129c 	.word	0x2000129c
 800712c:	20000ab0 	.word	0x20000ab0
 8007130:	200012ac 	.word	0x200012ac
 8007134:	20000ae0 	.word	0x20000ae0
 8007138:	200012bc 	.word	0x200012bc
 800713c:	20000af0 	.word	0x20000af0
 8007140:	200012cc 	.word	0x200012cc
 8007144:	20000b20 	.word	0x20000b20
 8007148:	200012dc 	.word	0x200012dc
 800714c:	20000b30 	.word	0x20000b30

08007150 <takeMachineID>:
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void takeMachineID() {
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8007156:	2001      	movs	r0, #1
 8007158:	f001 f85a 	bl	8008210 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 800715c:	220c      	movs	r2, #12
 800715e:	2100      	movs	r1, #0
 8007160:	48a3      	ldr	r0, [pc, #652]	; (80073f0 <takeMachineID+0x2a0>)
 8007162:	f005 fcf5 	bl	800cb50 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007166:	2305      	movs	r3, #5
 8007168:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800716a:	2303      	movs	r3, #3
 800716c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 800716e:	2300      	movs	r3, #0
 8007170:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007172:	4ba0      	ldr	r3, [pc, #640]	; (80073f4 <takeMachineID+0x2a4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007178:	2100      	movs	r1, #0
 800717a:	2001      	movs	r0, #1
 800717c:	f7f9 ff64 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007180:	2108      	movs	r1, #8
 8007182:	489d      	ldr	r0, [pc, #628]	; (80073f8 <takeMachineID+0x2a8>)
 8007184:	f002 fb0c 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d12a      	bne.n	80071e4 <takeMachineID+0x94>
        	lcd_cursor(0);
 800718e:	2000      	movs	r0, #0
 8007190:	f001 f83e 	bl	8008210 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007194:	f000 fe20 	bl	8007dd8 <checkEEPROM4ID>
 8007198:	4603      	mov	r3, r0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d010      	beq.n	80071c0 <takeMachineID+0x70>
        		lcd_clear();
 800719e:	f001 f805 	bl	80081ac <lcd_clear>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
        		} else {
        			lcd_print(1, 1, " ID MUST BE  12 ");
        			lcd_print(2, 1, "   CHARACTERS   ");
        		}*/
        		lcd_print(1, 1, mustBe12Text);
 80071a2:	4a96      	ldr	r2, [pc, #600]	; (80073fc <takeMachineID+0x2ac>)
 80071a4:	2101      	movs	r1, #1
 80071a6:	2001      	movs	r0, #1
 80071a8:	f000 ffd4 	bl	8008154 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 80071ac:	4a94      	ldr	r2, [pc, #592]	; (8007400 <takeMachineID+0x2b0>)
 80071ae:	2101      	movs	r1, #1
 80071b0:	2002      	movs	r0, #2
 80071b2:	f000 ffcf 	bl	8008154 <lcd_print>
        		HAL_Delay(1250);
 80071b6:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80071ba:	f001 fd21 	bl	8008c00 <HAL_Delay>

        		goto mainSection;
 80071be:	e7ca      	b.n	8007156 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071c0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071c4:	9302      	str	r3, [sp, #8]
 80071c6:	236e      	movs	r3, #110	; 0x6e
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	4b8e      	ldr	r3, [pc, #568]	; (8007404 <takeMachineID+0x2b4>)
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	236e      	movs	r3, #110	; 0x6e
 80071d0:	2200      	movs	r2, #0
 80071d2:	21a0      	movs	r1, #160	; 0xa0
 80071d4:	488c      	ldr	r0, [pc, #560]	; (8007408 <takeMachineID+0x2b8>)
 80071d6:	f002 fd9d 	bl	8009d14 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80071da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071de:	f001 fd0f 	bl	8008c00 <HAL_Delay>

            	break;
 80071e2:	e132      	b.n	800744a <takeMachineID+0x2fa>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071e4:	2101      	movs	r1, #1
 80071e6:	4884      	ldr	r0, [pc, #528]	; (80073f8 <takeMachineID+0x2a8>)
 80071e8:	f002 fada 	bl	80097a0 <HAL_GPIO_ReadPin>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d111      	bne.n	8007216 <takeMachineID+0xc6>
        	if(cursorPosition == 7) {
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b07      	cmp	r3, #7
 80071f6:	d102      	bne.n	80071fe <takeMachineID+0xae>
        		cursorPosition = 10;
 80071f8:	230a      	movs	r3, #10
 80071fa:	60bb      	str	r3, [r7, #8]
 80071fc:	e008      	b.n	8007210 <takeMachineID+0xc0>
        	} else if (cursorPosition == 14) {
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b0e      	cmp	r3, #14
 8007202:	d102      	bne.n	800720a <takeMachineID+0xba>
                cursorPosition = 3;
 8007204:	2303      	movs	r3, #3
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	e002      	b.n	8007210 <takeMachineID+0xc0>
            } else {
            	cursorPosition++;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3301      	adds	r3, #1
 800720e:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007210:	2096      	movs	r0, #150	; 0x96
 8007212:	f001 fcf5 	bl	8008c00 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007216:	2108      	movs	r1, #8
 8007218:	487c      	ldr	r0, [pc, #496]	; (800740c <takeMachineID+0x2bc>)
 800721a:	f002 fac1 	bl	80097a0 <HAL_GPIO_ReadPin>
 800721e:	4603      	mov	r3, r0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d111      	bne.n	8007248 <takeMachineID+0xf8>
            if (cursorPosition == 3) {
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d102      	bne.n	8007230 <takeMachineID+0xe0>
                cursorPosition = 14;
 800722a:	230e      	movs	r3, #14
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	e008      	b.n	8007242 <takeMachineID+0xf2>
            } else if(cursorPosition == 10) {
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b0a      	cmp	r3, #10
 8007234:	d102      	bne.n	800723c <takeMachineID+0xec>
            	cursorPosition = 7;
 8007236:	2307      	movs	r3, #7
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	e002      	b.n	8007242 <takeMachineID+0xf2>
            } else {
            	cursorPosition--;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007242:	20fa      	movs	r0, #250	; 0xfa
 8007244:	f001 fcdc 	bl	8008c00 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007248:	2102      	movs	r1, #2
 800724a:	486b      	ldr	r0, [pc, #428]	; (80073f8 <takeMachineID+0x2a8>)
 800724c:	f002 faa8 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	f040 80a1 	bne.w	800739a <takeMachineID+0x24a>
        	if(cursorPosition == 3) {
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d10a      	bne.n	8007274 <takeMachineID+0x124>
        		machineID[arrayPos] = '0';
 800725e:	4a64      	ldr	r2, [pc, #400]	; (80073f0 <takeMachineID+0x2a0>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4413      	add	r3, r2
 8007264:	2230      	movs	r2, #48	; 0x30
 8007266:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007268:	4a66      	ldr	r2, [pc, #408]	; (8007404 <takeMachineID+0x2b4>)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	4413      	add	r3, r2
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e07c      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 4) {
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b04      	cmp	r3, #4
 8007278:	d10a      	bne.n	8007290 <takeMachineID+0x140>
        		machineID[arrayPos] = '1';
 800727a:	4a5d      	ldr	r2, [pc, #372]	; (80073f0 <takeMachineID+0x2a0>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4413      	add	r3, r2
 8007280:	2231      	movs	r2, #49	; 0x31
 8007282:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007284:	4a5f      	ldr	r2, [pc, #380]	; (8007404 <takeMachineID+0x2b4>)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	4413      	add	r3, r2
 800728a:	2201      	movs	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e06e      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 5) {
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b05      	cmp	r3, #5
 8007294:	d10a      	bne.n	80072ac <takeMachineID+0x15c>
        		machineID[arrayPos] = '2';
 8007296:	4a56      	ldr	r2, [pc, #344]	; (80073f0 <takeMachineID+0x2a0>)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4413      	add	r3, r2
 800729c:	2232      	movs	r2, #50	; 0x32
 800729e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 80072a0:	4a58      	ldr	r2, [pc, #352]	; (8007404 <takeMachineID+0x2b4>)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	4413      	add	r3, r2
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e060      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 6) {
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	d10a      	bne.n	80072c8 <takeMachineID+0x178>
        		machineID[arrayPos] = '3';
 80072b2:	4a4f      	ldr	r2, [pc, #316]	; (80073f0 <takeMachineID+0x2a0>)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	2233      	movs	r2, #51	; 0x33
 80072ba:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 80072bc:	4a51      	ldr	r2, [pc, #324]	; (8007404 <takeMachineID+0x2b4>)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	4413      	add	r3, r2
 80072c2:	2203      	movs	r2, #3
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e052      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 7) {
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b07      	cmp	r3, #7
 80072cc:	d10a      	bne.n	80072e4 <takeMachineID+0x194>
        		machineID[arrayPos] = '4';
 80072ce:	4a48      	ldr	r2, [pc, #288]	; (80073f0 <takeMachineID+0x2a0>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4413      	add	r3, r2
 80072d4:	2234      	movs	r2, #52	; 0x34
 80072d6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80072d8:	4a4a      	ldr	r2, [pc, #296]	; (8007404 <takeMachineID+0x2b4>)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	4413      	add	r3, r2
 80072de:	2204      	movs	r2, #4
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	e044      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 10) {
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b0a      	cmp	r3, #10
 80072e8:	d10a      	bne.n	8007300 <takeMachineID+0x1b0>
        		machineID[arrayPos] = '5';
 80072ea:	4a41      	ldr	r2, [pc, #260]	; (80073f0 <takeMachineID+0x2a0>)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	2235      	movs	r2, #53	; 0x35
 80072f2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80072f4:	4a43      	ldr	r2, [pc, #268]	; (8007404 <takeMachineID+0x2b4>)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	4413      	add	r3, r2
 80072fa:	2205      	movs	r2, #5
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e036      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 11) {
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b0b      	cmp	r3, #11
 8007304:	d10a      	bne.n	800731c <takeMachineID+0x1cc>
        		machineID[arrayPos] = '6';
 8007306:	4a3a      	ldr	r2, [pc, #232]	; (80073f0 <takeMachineID+0x2a0>)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4413      	add	r3, r2
 800730c:	2236      	movs	r2, #54	; 0x36
 800730e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007310:	4a3c      	ldr	r2, [pc, #240]	; (8007404 <takeMachineID+0x2b4>)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	4413      	add	r3, r2
 8007316:	2206      	movs	r2, #6
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e028      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 12) {
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d10a      	bne.n	8007338 <takeMachineID+0x1e8>
        		machineID[arrayPos] = '7';
 8007322:	4a33      	ldr	r2, [pc, #204]	; (80073f0 <takeMachineID+0x2a0>)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	2237      	movs	r2, #55	; 0x37
 800732a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 800732c:	4a35      	ldr	r2, [pc, #212]	; (8007404 <takeMachineID+0x2b4>)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	4413      	add	r3, r2
 8007332:	2207      	movs	r2, #7
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e01a      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 13) {
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b0d      	cmp	r3, #13
 800733c:	d10a      	bne.n	8007354 <takeMachineID+0x204>
        		machineID[arrayPos] = '8';
 800733e:	4a2c      	ldr	r2, [pc, #176]	; (80073f0 <takeMachineID+0x2a0>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4413      	add	r3, r2
 8007344:	2238      	movs	r2, #56	; 0x38
 8007346:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007348:	4a2e      	ldr	r2, [pc, #184]	; (8007404 <takeMachineID+0x2b4>)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	4413      	add	r3, r2
 800734e:	2208      	movs	r2, #8
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e00c      	b.n	800736e <takeMachineID+0x21e>
        	} else if(cursorPosition == 14) {
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b0e      	cmp	r3, #14
 8007358:	d109      	bne.n	800736e <takeMachineID+0x21e>
        		machineID[arrayPos] = '9';
 800735a:	4a25      	ldr	r2, [pc, #148]	; (80073f0 <takeMachineID+0x2a0>)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	2239      	movs	r2, #57	; 0x39
 8007362:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007364:	4a27      	ldr	r2, [pc, #156]	; (8007404 <takeMachineID+0x2b4>)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	4413      	add	r3, r2
 800736a:	2209      	movs	r2, #9
 800736c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	b2d9      	uxtb	r1, r3
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <takeMachineID+0x2a0>)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	2001      	movs	r0, #1
 800737e:	f000 fefe 	bl	800817e <lcd_print_char>

        	writeLoc++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3301      	adds	r3, #1
 800738c:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007394:	2096      	movs	r0, #150	; 0x96
 8007396:	f001 fc33 	bl	8008c00 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800739a:	2104      	movs	r1, #4
 800739c:	4816      	ldr	r0, [pc, #88]	; (80073f8 <takeMachineID+0x2a8>)
 800739e:	f002 f9ff 	bl	80097a0 <HAL_GPIO_ReadPin>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d149      	bne.n	800743c <takeMachineID+0x2ec>
            if(strlen(machineID) >= 1) {
 80073a8:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <takeMachineID+0x2a0>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d042      	beq.n	8007436 <takeMachineID+0x2e6>
                machineID[arrayPos] = '\0';
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <takeMachineID+0x2a0>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 80073ba:	4a12      	ldr	r2, [pc, #72]	; (8007404 <takeMachineID+0x2b4>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	4413      	add	r3, r2
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	dd03      	ble.n	80073d2 <takeMachineID+0x282>
                	writeLoc--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e004      	b.n	80073dc <takeMachineID+0x28c>
                } else if(writeLoc < 5) {
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	dc01      	bgt.n	80073dc <takeMachineID+0x28c>
                	writeLoc = 5;
 80073d8:	2305      	movs	r3, #5
 80073da:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dd16      	ble.n	8007410 <takeMachineID+0x2c0>
                	arrayPos--;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	603b      	str	r3, [r7, #0]
 80073ee:	e017      	b.n	8007420 <takeMachineID+0x2d0>
 80073f0:	20000c30 	.word	0x20000c30
 80073f4:	20000004 	.word	0x20000004
 80073f8:	40010800 	.word	0x40010800
 80073fc:	2000128c 	.word	0x2000128c
 8007400:	2000129c 	.word	0x2000129c
 8007404:	20000bb8 	.word	0x20000bb8
 8007408:	20001318 	.word	0x20001318
 800740c:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	da04      	bge.n	8007420 <takeMachineID+0x2d0>
                	arrayPos = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 800741a:	4b0e      	ldr	r3, [pc, #56]	; (8007454 <takeMachineID+0x304>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	3304      	adds	r3, #4
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	2001      	movs	r0, #1
 800742c:	f000 fec8 	bl	80081c0 <lcd_delete_char>
                HAL_Delay(50);
 8007430:	2032      	movs	r0, #50	; 0x32
 8007432:	f001 fbe5 	bl	8008c00 <HAL_Delay>
            }

            HAL_Delay(150);
 8007436:	2096      	movs	r0, #150	; 0x96
 8007438:	f001 fbe2 	bl	8008c00 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	2002      	movs	r0, #2
 8007444:	f000 fe67 	bl	8008116 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007448:	e69a      	b.n	8007180 <takeMachineID+0x30>
    }
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000004 	.word	0x20000004

08007458 <takeWifiSSID>:

void takeWifiSSID() {
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 800745e:	2001      	movs	r0, #1
 8007460:	f000 fed6 	bl	8008210 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007464:	2214      	movs	r2, #20
 8007466:	2100      	movs	r1, #0
 8007468:	489b      	ldr	r0, [pc, #620]	; (80076d8 <takeWifiSSID+0x280>)
 800746a:	f005 fb71 	bl	800cb50 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800746e:	2301      	movs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007472:	2307      	movs	r3, #7
 8007474:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007476:	2301      	movs	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800747e:	4b97      	ldr	r3, [pc, #604]	; (80076dc <takeWifiSSID+0x284>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007484:	2101      	movs	r1, #1
 8007486:	2002      	movs	r0, #2
 8007488:	f7f9 fdde 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800748c:	2108      	movs	r1, #8
 800748e:	4894      	ldr	r0, [pc, #592]	; (80076e0 <takeWifiSSID+0x288>)
 8007490:	f002 f986 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d129      	bne.n	80074ee <takeWifiSSID+0x96>
            lcd_cursor(0);
 800749a:	2000      	movs	r0, #0
 800749c:	f000 feb8 	bl	8008210 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80074a0:	488d      	ldr	r0, [pc, #564]	; (80076d8 <takeWifiSSID+0x280>)
 80074a2:	f7f8 febf 	bl	8000224 <strlen>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b14      	cmp	r3, #20
 80074aa:	d90e      	bls.n	80074ca <takeWifiSSID+0x72>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
                	lcd_print(2, 1, " 20  CHARACTERS ");
                }*/
            	lcd_print(1, 1, ssidExceedErrorText);
 80074ac:	4a8d      	ldr	r2, [pc, #564]	; (80076e4 <takeWifiSSID+0x28c>)
 80074ae:	2101      	movs	r1, #1
 80074b0:	2001      	movs	r0, #1
 80074b2:	f000 fe4f 	bl	8008154 <lcd_print>
            	lcd_print(2, 1, ssidExceedError2Text);
 80074b6:	4a8c      	ldr	r2, [pc, #560]	; (80076e8 <takeWifiSSID+0x290>)
 80074b8:	2101      	movs	r1, #1
 80074ba:	2002      	movs	r0, #2
 80074bc:	f000 fe4a 	bl	8008154 <lcd_print>
                HAL_Delay(1250);
 80074c0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80074c4:	f001 fb9c 	bl	8008c00 <HAL_Delay>

                goto mainSSIDSection;
 80074c8:	e7c9      	b.n	800745e <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80074ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80074ce:	9302      	str	r3, [sp, #8]
 80074d0:	236e      	movs	r3, #110	; 0x6e
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	4b85      	ldr	r3, [pc, #532]	; (80076ec <takeWifiSSID+0x294>)
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	236e      	movs	r3, #110	; 0x6e
 80074da:	2200      	movs	r2, #0
 80074dc:	21a0      	movs	r1, #160	; 0xa0
 80074de:	4884      	ldr	r0, [pc, #528]	; (80076f0 <takeWifiSSID+0x298>)
 80074e0:	f002 fc18 	bl	8009d14 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80074e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074e8:	f001 fb8a 	bl	8008c00 <HAL_Delay>

            	break;
 80074ec:	e123      	b.n	8007736 <takeWifiSSID+0x2de>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80074ee:	2101      	movs	r1, #1
 80074f0:	487b      	ldr	r0, [pc, #492]	; (80076e0 <takeWifiSSID+0x288>)
 80074f2:	f002 f955 	bl	80097a0 <HAL_GPIO_ReadPin>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d14d      	bne.n	8007598 <takeWifiSSID+0x140>
        	if(cursorPosition > 80) {
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b50      	cmp	r3, #80	; 0x50
 8007500:	dd01      	ble.n	8007506 <takeWifiSSID+0xae>
        		cursorPosition = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b10      	cmp	r3, #16
 800750a:	d13f      	bne.n	800758c <takeWifiSSID+0x134>
            	if(page == 1) {
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d109      	bne.n	8007526 <takeWifiSSID+0xce>
            		cursorPosition = 1;
 8007512:	2301      	movs	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
            		page++;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	3301      	adds	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800751c:	2102      	movs	r1, #2
 800751e:	2002      	movs	r0, #2
 8007520:	f7f9 fd92 	bl	8001048 <printTemplate>
 8007524:	e035      	b.n	8007592 <takeWifiSSID+0x13a>
            	} else if(page == 2) {
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d109      	bne.n	8007540 <takeWifiSSID+0xe8>
            		cursorPosition = 1;
 800752c:	2301      	movs	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3301      	adds	r3, #1
 8007534:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007536:	2103      	movs	r1, #3
 8007538:	2002      	movs	r0, #2
 800753a:	f7f9 fd85 	bl	8001048 <printTemplate>
 800753e:	e028      	b.n	8007592 <takeWifiSSID+0x13a>
            	} else if(page == 3) {
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b03      	cmp	r3, #3
 8007544:	d109      	bne.n	800755a <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8007546:	2301      	movs	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
            		page++;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	3301      	adds	r3, #1
 800754e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007550:	2104      	movs	r1, #4
 8007552:	2002      	movs	r0, #2
 8007554:	f7f9 fd78 	bl	8001048 <printTemplate>
 8007558:	e01b      	b.n	8007592 <takeWifiSSID+0x13a>
            	} else if(page == 4) {
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b04      	cmp	r3, #4
 800755e:	d109      	bne.n	8007574 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8007560:	2301      	movs	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
            		page++;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	3301      	adds	r3, #1
 8007568:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800756a:	2105      	movs	r1, #5
 800756c:	2002      	movs	r0, #2
 800756e:	f7f9 fd6b 	bl	8001048 <printTemplate>
 8007572:	e00e      	b.n	8007592 <takeWifiSSID+0x13a>
            	} else if(page == 5) {
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b05      	cmp	r3, #5
 8007578:	d10b      	bne.n	8007592 <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 800757a:	2301      	movs	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800757e:	2301      	movs	r3, #1
 8007580:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007582:	2101      	movs	r1, #1
 8007584:	2002      	movs	r0, #2
 8007586:	f7f9 fd5f 	bl	8001048 <printTemplate>
 800758a:	e002      	b.n	8007592 <takeWifiSSID+0x13a>
            	}
            } else {
            	cursorPosition++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007592:	2096      	movs	r0, #150	; 0x96
 8007594:	f001 fb34 	bl	8008c00 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007598:	2108      	movs	r1, #8
 800759a:	4856      	ldr	r0, [pc, #344]	; (80076f4 <takeWifiSSID+0x29c>)
 800759c:	f002 f900 	bl	80097a0 <HAL_GPIO_ReadPin>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d149      	bne.n	800763a <takeWifiSSID+0x1e2>
        	if(cursorPosition < 1) {
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc01      	bgt.n	80075b0 <takeWifiSSID+0x158>
        		cursorPosition = 80;
 80075ac:	2350      	movs	r3, #80	; 0x50
 80075ae:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d13b      	bne.n	800762e <takeWifiSSID+0x1d6>
            	if(page == 1) {
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d108      	bne.n	80075ce <takeWifiSSID+0x176>
            		cursorPosition = 16;
 80075bc:	2310      	movs	r3, #16
 80075be:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80075c0:	2305      	movs	r3, #5
 80075c2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80075c4:	2105      	movs	r1, #5
 80075c6:	2002      	movs	r0, #2
 80075c8:	f7f9 fd3e 	bl	8001048 <printTemplate>
 80075cc:	e032      	b.n	8007634 <takeWifiSSID+0x1dc>
            	} else if(page == 2) {
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d108      	bne.n	80075e6 <takeWifiSSID+0x18e>
            		cursorPosition = 16;
 80075d4:	2310      	movs	r3, #16
 80075d6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80075d8:	2301      	movs	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80075dc:	2101      	movs	r1, #1
 80075de:	2002      	movs	r0, #2
 80075e0:	f7f9 fd32 	bl	8001048 <printTemplate>
 80075e4:	e026      	b.n	8007634 <takeWifiSSID+0x1dc>
            	} else if(page == 3) {
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d108      	bne.n	80075fe <takeWifiSSID+0x1a6>
            		cursorPosition = 16;
 80075ec:	2310      	movs	r3, #16
 80075ee:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80075f0:	2302      	movs	r3, #2
 80075f2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80075f4:	2102      	movs	r1, #2
 80075f6:	2002      	movs	r0, #2
 80075f8:	f7f9 fd26 	bl	8001048 <printTemplate>
 80075fc:	e01a      	b.n	8007634 <takeWifiSSID+0x1dc>
            	} else if(page == 4) {
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b04      	cmp	r3, #4
 8007602:	d108      	bne.n	8007616 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 8007604:	2310      	movs	r3, #16
 8007606:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007608:	2303      	movs	r3, #3
 800760a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800760c:	2103      	movs	r1, #3
 800760e:	2002      	movs	r0, #2
 8007610:	f7f9 fd1a 	bl	8001048 <printTemplate>
 8007614:	e00e      	b.n	8007634 <takeWifiSSID+0x1dc>
            	} else if(page == 5) {
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b05      	cmp	r3, #5
 800761a:	d10b      	bne.n	8007634 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 800761c:	2310      	movs	r3, #16
 800761e:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007620:	2304      	movs	r3, #4
 8007622:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007624:	2104      	movs	r1, #4
 8007626:	2002      	movs	r0, #2
 8007628:	f7f9 fd0e 	bl	8001048 <printTemplate>
 800762c:	e002      	b.n	8007634 <takeWifiSSID+0x1dc>
            	}
            } else {
            	cursorPosition--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b01      	subs	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007634:	2096      	movs	r0, #150	; 0x96
 8007636:	f001 fae3 	bl	8008c00 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800763a:	2102      	movs	r1, #2
 800763c:	4828      	ldr	r0, [pc, #160]	; (80076e0 <takeWifiSSID+0x288>)
 800763e:	f002 f8af 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d121      	bne.n	800768c <takeWifiSSID+0x234>
            eepromData[eepromVal] = cursorPosition;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	b2d9      	uxtb	r1, r3
 800764c:	4a27      	ldr	r2, [pc, #156]	; (80076ec <takeWifiSSID+0x294>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	460a      	mov	r2, r1
 8007654:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	b2d9      	uxtb	r1, r3
 800765a:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <takeWifiSSID+0x2a0>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	2001      	movs	r0, #1
 8007666:	f000 fd8a 	bl	800817e <lcd_print_char>

            writeLoc++;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	3301      	adds	r3, #1
 800766e:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3301      	adds	r3, #1
 800767a:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800767c:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <takeWifiSSID+0x294>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007686:	2096      	movs	r0, #150	; 0x96
 8007688:	f001 faba 	bl	8008c00 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800768c:	2104      	movs	r1, #4
 800768e:	4814      	ldr	r0, [pc, #80]	; (80076e0 <takeWifiSSID+0x288>)
 8007690:	f002 f886 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d146      	bne.n	8007728 <takeWifiSSID+0x2d0>
        	if(strlen(wifiSSID) >= 1) {
 800769a:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <takeWifiSSID+0x280>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d03f      	beq.n	8007722 <takeWifiSSID+0x2ca>
        		eepromData[eepromVal] = '\0';
 80076a2:	4a12      	ldr	r2, [pc, #72]	; (80076ec <takeWifiSSID+0x294>)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b07      	cmp	r3, #7
 80076b0:	dd03      	ble.n	80076ba <takeWifiSSID+0x262>
        			writeLoc--;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	e004      	b.n	80076c4 <takeWifiSSID+0x26c>
        		} else if(writeLoc < 7) {
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b06      	cmp	r3, #6
 80076be:	dc01      	bgt.n	80076c4 <takeWifiSSID+0x26c>
        			writeLoc = 7;
 80076c0:	2307      	movs	r3, #7
 80076c2:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dd18      	ble.n	80076fc <takeWifiSSID+0x2a4>
        			arrayPosition--;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	e019      	b.n	800770c <takeWifiSSID+0x2b4>
 80076d8:	20000c3c 	.word	0x20000c3c
 80076dc:	20000008 	.word	0x20000008
 80076e0:	40010800 	.word	0x40010800
 80076e4:	200012ac 	.word	0x200012ac
 80076e8:	200012bc 	.word	0x200012bc
 80076ec:	20000bb8 	.word	0x20000bb8
 80076f0:	20001318 	.word	0x20001318
 80076f4:	40011000 	.word	0x40011000
 80076f8:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da04      	bge.n	800770c <takeWifiSSID+0x2b4>
        			arrayPosition = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007706:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <takeWifiSSID+0x2e8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	3306      	adds	r3, #6
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	2001      	movs	r0, #1
 8007718:	f000 fd52 	bl	80081c0 <lcd_delete_char>
        		HAL_Delay(50);
 800771c:	2032      	movs	r0, #50	; 0x32
 800771e:	f001 fa6f 	bl	8008c00 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007722:	2096      	movs	r0, #150	; 0x96
 8007724:	f001 fa6c 	bl	8008c00 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	4619      	mov	r1, r3
 800772e:	2002      	movs	r0, #2
 8007730:	f000 fcf1 	bl	8008116 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007734:	e6aa      	b.n	800748c <takeWifiSSID+0x34>
    }
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000008 	.word	0x20000008

08007744 <takeWifiPass>:

void takeWifiPass() {
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 800774a:	2001      	movs	r0, #1
 800774c:	f000 fd60 	bl	8008210 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007750:	2214      	movs	r2, #20
 8007752:	2100      	movs	r1, #0
 8007754:	489b      	ldr	r0, [pc, #620]	; (80079c4 <takeWifiPass+0x280>)
 8007756:	f005 f9fb 	bl	800cb50 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800775a:	2301      	movs	r3, #1
 800775c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800775e:	2307      	movs	r3, #7
 8007760:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007762:	2301      	movs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007766:	2300      	movs	r3, #0
 8007768:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800776a:	4b97      	ldr	r3, [pc, #604]	; (80079c8 <takeWifiPass+0x284>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007770:	2101      	movs	r1, #1
 8007772:	2003      	movs	r0, #3
 8007774:	f7f9 fc68 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007778:	2108      	movs	r1, #8
 800777a:	4894      	ldr	r0, [pc, #592]	; (80079cc <takeWifiPass+0x288>)
 800777c:	f002 f810 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007780:	4603      	mov	r3, r0
 8007782:	2b01      	cmp	r3, #1
 8007784:	d129      	bne.n	80077da <takeWifiPass+0x96>
            lcd_cursor(0);
 8007786:	2000      	movs	r0, #0
 8007788:	f000 fd42 	bl	8008210 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 800778c:	4890      	ldr	r0, [pc, #576]	; (80079d0 <takeWifiPass+0x28c>)
 800778e:	f7f8 fd49 	bl	8000224 <strlen>
 8007792:	4603      	mov	r3, r0
 8007794:	2b14      	cmp	r3, #20
 8007796:	d90e      	bls.n	80077b6 <takeWifiPass+0x72>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
                	lcd_print(2, 1, " 20  CHARACTERS ");
                }*/
            	lcd_print(1, 1, passExceedErrorText);
 8007798:	4a8e      	ldr	r2, [pc, #568]	; (80079d4 <takeWifiPass+0x290>)
 800779a:	2101      	movs	r1, #1
 800779c:	2001      	movs	r0, #1
 800779e:	f000 fcd9 	bl	8008154 <lcd_print>
            	lcd_print(2, 1, passExceedError2Text);
 80077a2:	4a8d      	ldr	r2, [pc, #564]	; (80079d8 <takeWifiPass+0x294>)
 80077a4:	2101      	movs	r1, #1
 80077a6:	2002      	movs	r0, #2
 80077a8:	f000 fcd4 	bl	8008154 <lcd_print>
                HAL_Delay(1250);
 80077ac:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80077b0:	f001 fa26 	bl	8008c00 <HAL_Delay>

                goto mainPassSection;
 80077b4:	e7c9      	b.n	800774a <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80077b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80077ba:	9302      	str	r3, [sp, #8]
 80077bc:	236e      	movs	r3, #110	; 0x6e
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	4b86      	ldr	r3, [pc, #536]	; (80079dc <takeWifiPass+0x298>)
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	236e      	movs	r3, #110	; 0x6e
 80077c6:	2200      	movs	r2, #0
 80077c8:	21a0      	movs	r1, #160	; 0xa0
 80077ca:	4885      	ldr	r0, [pc, #532]	; (80079e0 <takeWifiPass+0x29c>)
 80077cc:	f002 faa2 	bl	8009d14 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80077d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077d4:	f001 fa14 	bl	8008c00 <HAL_Delay>

            	break;
 80077d8:	e125      	b.n	8007a26 <takeWifiPass+0x2e2>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80077da:	2101      	movs	r1, #1
 80077dc:	487b      	ldr	r0, [pc, #492]	; (80079cc <takeWifiPass+0x288>)
 80077de:	f001 ffdf 	bl	80097a0 <HAL_GPIO_ReadPin>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d14d      	bne.n	8007884 <takeWifiPass+0x140>
        	if(cursorPosition > 80) {
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b50      	cmp	r3, #80	; 0x50
 80077ec:	dd01      	ble.n	80077f2 <takeWifiPass+0xae>
        		cursorPosition = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d13f      	bne.n	8007878 <takeWifiPass+0x134>
            	if(page == 1) {
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d109      	bne.n	8007812 <takeWifiPass+0xce>
            		cursorPosition = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
            		page++;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3301      	adds	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007808:	2102      	movs	r1, #2
 800780a:	2003      	movs	r0, #3
 800780c:	f7f9 fc1c 	bl	8001048 <printTemplate>
 8007810:	e035      	b.n	800787e <takeWifiPass+0x13a>
            	} else if(page == 2) {
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d109      	bne.n	800782c <takeWifiPass+0xe8>
            		cursorPosition = 1;
 8007818:	2301      	movs	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
            		page++;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	3301      	adds	r3, #1
 8007820:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007822:	2103      	movs	r1, #3
 8007824:	2003      	movs	r0, #3
 8007826:	f7f9 fc0f 	bl	8001048 <printTemplate>
 800782a:	e028      	b.n	800787e <takeWifiPass+0x13a>
            	} else if(page == 3) {
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d109      	bne.n	8007846 <takeWifiPass+0x102>
            		cursorPosition = 1;
 8007832:	2301      	movs	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
            		page++;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	3301      	adds	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800783c:	2104      	movs	r1, #4
 800783e:	2003      	movs	r0, #3
 8007840:	f7f9 fc02 	bl	8001048 <printTemplate>
 8007844:	e01b      	b.n	800787e <takeWifiPass+0x13a>
            	} else if(page == 4) {
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d109      	bne.n	8007860 <takeWifiPass+0x11c>
            		cursorPosition = 1;
 800784c:	2301      	movs	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	3301      	adds	r3, #1
 8007854:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007856:	2105      	movs	r1, #5
 8007858:	2003      	movs	r0, #3
 800785a:	f7f9 fbf5 	bl	8001048 <printTemplate>
 800785e:	e00e      	b.n	800787e <takeWifiPass+0x13a>
            	} else if(page == 5) {
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b05      	cmp	r3, #5
 8007864:	d10b      	bne.n	800787e <takeWifiPass+0x13a>
            		cursorPosition = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800786a:	2301      	movs	r3, #1
 800786c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800786e:	2101      	movs	r1, #1
 8007870:	2003      	movs	r0, #3
 8007872:	f7f9 fbe9 	bl	8001048 <printTemplate>
 8007876:	e002      	b.n	800787e <takeWifiPass+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800787e:	2096      	movs	r0, #150	; 0x96
 8007880:	f001 f9be 	bl	8008c00 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007884:	2108      	movs	r1, #8
 8007886:	4857      	ldr	r0, [pc, #348]	; (80079e4 <takeWifiPass+0x2a0>)
 8007888:	f001 ff8a 	bl	80097a0 <HAL_GPIO_ReadPin>
 800788c:	4603      	mov	r3, r0
 800788e:	2b01      	cmp	r3, #1
 8007890:	d149      	bne.n	8007926 <takeWifiPass+0x1e2>
        	if(cursorPosition < 1) {
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc01      	bgt.n	800789c <takeWifiPass+0x158>
        		cursorPosition = 80;
 8007898:	2350      	movs	r3, #80	; 0x50
 800789a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d13b      	bne.n	800791a <takeWifiPass+0x1d6>
            	if(page == 1) {
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d108      	bne.n	80078ba <takeWifiPass+0x176>
            		cursorPosition = 16;
 80078a8:	2310      	movs	r3, #16
 80078aa:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80078ac:	2305      	movs	r3, #5
 80078ae:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80078b0:	2105      	movs	r1, #5
 80078b2:	2003      	movs	r0, #3
 80078b4:	f7f9 fbc8 	bl	8001048 <printTemplate>
 80078b8:	e032      	b.n	8007920 <takeWifiPass+0x1dc>
            	} else if(page == 2) {
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d108      	bne.n	80078d2 <takeWifiPass+0x18e>
            		cursorPosition = 16;
 80078c0:	2310      	movs	r3, #16
 80078c2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80078c4:	2301      	movs	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80078c8:	2101      	movs	r1, #1
 80078ca:	2003      	movs	r0, #3
 80078cc:	f7f9 fbbc 	bl	8001048 <printTemplate>
 80078d0:	e026      	b.n	8007920 <takeWifiPass+0x1dc>
            	} else if(page == 3) {
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d108      	bne.n	80078ea <takeWifiPass+0x1a6>
            		cursorPosition = 16;
 80078d8:	2310      	movs	r3, #16
 80078da:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80078dc:	2302      	movs	r3, #2
 80078de:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80078e0:	2102      	movs	r1, #2
 80078e2:	2003      	movs	r0, #3
 80078e4:	f7f9 fbb0 	bl	8001048 <printTemplate>
 80078e8:	e01a      	b.n	8007920 <takeWifiPass+0x1dc>
            	} else if(page == 4) {
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d108      	bne.n	8007902 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 80078f0:	2310      	movs	r3, #16
 80078f2:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80078f4:	2303      	movs	r3, #3
 80078f6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80078f8:	2103      	movs	r1, #3
 80078fa:	2003      	movs	r0, #3
 80078fc:	f7f9 fba4 	bl	8001048 <printTemplate>
 8007900:	e00e      	b.n	8007920 <takeWifiPass+0x1dc>
            	} else if(page == 5) {
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b05      	cmp	r3, #5
 8007906:	d10b      	bne.n	8007920 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 8007908:	2310      	movs	r3, #16
 800790a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800790c:	2304      	movs	r3, #4
 800790e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007910:	2104      	movs	r1, #4
 8007912:	2003      	movs	r0, #3
 8007914:	f7f9 fb98 	bl	8001048 <printTemplate>
 8007918:	e002      	b.n	8007920 <takeWifiPass+0x1dc>
            	}
            } else {
            	cursorPosition--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3b01      	subs	r3, #1
 800791e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007920:	2096      	movs	r0, #150	; 0x96
 8007922:	f001 f96d 	bl	8008c00 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007926:	2102      	movs	r1, #2
 8007928:	4828      	ldr	r0, [pc, #160]	; (80079cc <takeWifiPass+0x288>)
 800792a:	f001 ff39 	bl	80097a0 <HAL_GPIO_ReadPin>
 800792e:	4603      	mov	r3, r0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d121      	bne.n	8007978 <takeWifiPass+0x234>
            eepromData[eepromVal] = cursorPosition;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	b2d9      	uxtb	r1, r3
 8007938:	4a28      	ldr	r2, [pc, #160]	; (80079dc <takeWifiPass+0x298>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	460a      	mov	r2, r1
 8007940:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	b2d9      	uxtb	r1, r3
 8007946:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <takeWifiPass+0x2a4>)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	2001      	movs	r0, #1
 8007952:	f000 fc14 	bl	800817e <lcd_print_char>

            writeLoc++;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3301      	adds	r3, #1
 800795a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3301      	adds	r3, #1
 8007960:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3301      	adds	r3, #1
 8007966:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <takeWifiPass+0x298>)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007972:	2096      	movs	r0, #150	; 0x96
 8007974:	f001 f944 	bl	8008c00 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007978:	2104      	movs	r1, #4
 800797a:	4814      	ldr	r0, [pc, #80]	; (80079cc <takeWifiPass+0x288>)
 800797c:	f001 ff10 	bl	80097a0 <HAL_GPIO_ReadPin>
 8007980:	4603      	mov	r3, r0
 8007982:	2b01      	cmp	r3, #1
 8007984:	d148      	bne.n	8007a18 <takeWifiPass+0x2d4>
        	if(strlen(wifiSSID) >= 1) {
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <takeWifiPass+0x28c>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d041      	beq.n	8007a12 <takeWifiPass+0x2ce>
        		eepromData[eepromVal] = '\0';
 800798e:	4a13      	ldr	r2, [pc, #76]	; (80079dc <takeWifiPass+0x298>)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b07      	cmp	r3, #7
 800799c:	dd03      	ble.n	80079a6 <takeWifiPass+0x262>
        			writeLoc--;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	e004      	b.n	80079b0 <takeWifiPass+0x26c>
        		} else if(writeLoc < 7) {
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b06      	cmp	r3, #6
 80079aa:	dc01      	bgt.n	80079b0 <takeWifiPass+0x26c>
        			writeLoc = 7;
 80079ac:	2307      	movs	r3, #7
 80079ae:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dd1a      	ble.n	80079ec <takeWifiPass+0x2a8>
        			arrayPosition--;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3b01      	subs	r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	e01b      	b.n	80079fc <takeWifiPass+0x2b8>
 80079c4:	20000c50 	.word	0x20000c50
 80079c8:	2000000c 	.word	0x2000000c
 80079cc:	40010800 	.word	0x40010800
 80079d0:	20000c3c 	.word	0x20000c3c
 80079d4:	200012cc 	.word	0x200012cc
 80079d8:	200012dc 	.word	0x200012dc
 80079dc:	20000bb8 	.word	0x20000bb8
 80079e0:	20001318 	.word	0x20001318
 80079e4:	40011000 	.word	0x40011000
 80079e8:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da04      	bge.n	80079fc <takeWifiPass+0x2b8>
        			arrayPosition = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <takeWifiPass+0x2ec>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	3306      	adds	r3, #6
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	4619      	mov	r1, r3
 8007a06:	2001      	movs	r0, #1
 8007a08:	f000 fbda 	bl	80081c0 <lcd_delete_char>
        		HAL_Delay(50);
 8007a0c:	2032      	movs	r0, #50	; 0x32
 8007a0e:	f001 f8f7 	bl	8008c00 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007a12:	2096      	movs	r0, #150	; 0x96
 8007a14:	f001 f8f4 	bl	8008c00 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	2002      	movs	r0, #2
 8007a20:	f000 fb79 	bl	8008116 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007a24:	e6a8      	b.n	8007778 <takeWifiPass+0x34>
    }
}
 8007a26:	bf00      	nop
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000000c 	.word	0x2000000c

08007a34 <mergeData>:

char* mergeData() {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b09c      	sub	sp, #112	; 0x70
 8007a38:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a42:	2229      	movs	r2, #41	; 0x29
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f005 f882 	bl	800cb50 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007a4c:	4b65      	ldr	r3, [pc, #404]	; (8007be4 <mergeData+0x1b0>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	703b      	strb	r3, [r7, #0]
 8007a52:	4b65      	ldr	r3, [pc, #404]	; (8007be8 <mergeData+0x1b4>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	707b      	strb	r3, [r7, #1]
 8007a58:	4b64      	ldr	r3, [pc, #400]	; (8007bec <mergeData+0x1b8>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	70bb      	strb	r3, [r7, #2]
 8007a5e:	4b64      	ldr	r3, [pc, #400]	; (8007bf0 <mergeData+0x1bc>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	70fb      	strb	r3, [r7, #3]
 8007a64:	4b63      	ldr	r3, [pc, #396]	; (8007bf4 <mergeData+0x1c0>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	713b      	strb	r3, [r7, #4]
 8007a6a:	4b63      	ldr	r3, [pc, #396]	; (8007bf8 <mergeData+0x1c4>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	717b      	strb	r3, [r7, #5]
 8007a70:	4b62      	ldr	r3, [pc, #392]	; (8007bfc <mergeData+0x1c8>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	71bb      	strb	r3, [r7, #6]
 8007a76:	4b62      	ldr	r3, [pc, #392]	; (8007c00 <mergeData+0x1cc>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
 8007a7c:	4b61      	ldr	r3, [pc, #388]	; (8007c04 <mergeData+0x1d0>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	723b      	strb	r3, [r7, #8]
 8007a82:	4b61      	ldr	r3, [pc, #388]	; (8007c08 <mergeData+0x1d4>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	727b      	strb	r3, [r7, #9]
 8007a88:	4b60      	ldr	r3, [pc, #384]	; (8007c0c <mergeData+0x1d8>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	72bb      	strb	r3, [r7, #10]
 8007a8e:	4b60      	ldr	r3, [pc, #384]	; (8007c10 <mergeData+0x1dc>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	72fb      	strb	r3, [r7, #11]
 8007a94:	4b5f      	ldr	r3, [pc, #380]	; (8007c14 <mergeData+0x1e0>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	733b      	strb	r3, [r7, #12]
 8007a9a:	4b5f      	ldr	r3, [pc, #380]	; (8007c18 <mergeData+0x1e4>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	737b      	strb	r3, [r7, #13]
 8007aa0:	4b5e      	ldr	r3, [pc, #376]	; (8007c1c <mergeData+0x1e8>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	73bb      	strb	r3, [r7, #14]
 8007aa6:	4b5e      	ldr	r3, [pc, #376]	; (8007c20 <mergeData+0x1ec>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	4b5d      	ldr	r3, [pc, #372]	; (8007c24 <mergeData+0x1f0>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	743b      	strb	r3, [r7, #16]
 8007ab2:	4b5d      	ldr	r3, [pc, #372]	; (8007c28 <mergeData+0x1f4>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	747b      	strb	r3, [r7, #17]
 8007ab8:	4b5c      	ldr	r3, [pc, #368]	; (8007c2c <mergeData+0x1f8>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	74bb      	strb	r3, [r7, #18]
 8007abe:	4b5c      	ldr	r3, [pc, #368]	; (8007c30 <mergeData+0x1fc>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	74fb      	strb	r3, [r7, #19]
 8007ac4:	4b5b      	ldr	r3, [pc, #364]	; (8007c34 <mergeData+0x200>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	753b      	strb	r3, [r7, #20]
 8007aca:	4b5b      	ldr	r3, [pc, #364]	; (8007c38 <mergeData+0x204>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	757b      	strb	r3, [r7, #21]
 8007ad0:	4b5a      	ldr	r3, [pc, #360]	; (8007c3c <mergeData+0x208>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	75bb      	strb	r3, [r7, #22]
 8007ad6:	4b5a      	ldr	r3, [pc, #360]	; (8007c40 <mergeData+0x20c>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	75fb      	strb	r3, [r7, #23]
 8007adc:	4b59      	ldr	r3, [pc, #356]	; (8007c44 <mergeData+0x210>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	763b      	strb	r3, [r7, #24]
 8007ae2:	4b59      	ldr	r3, [pc, #356]	; (8007c48 <mergeData+0x214>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	767b      	strb	r3, [r7, #25]
 8007ae8:	4b58      	ldr	r3, [pc, #352]	; (8007c4c <mergeData+0x218>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	76bb      	strb	r3, [r7, #26]
 8007aee:	4b58      	ldr	r3, [pc, #352]	; (8007c50 <mergeData+0x21c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	76fb      	strb	r3, [r7, #27]
 8007af4:	4b57      	ldr	r3, [pc, #348]	; (8007c54 <mergeData+0x220>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	773b      	strb	r3, [r7, #28]
 8007afa:	4b57      	ldr	r3, [pc, #348]	; (8007c58 <mergeData+0x224>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	777b      	strb	r3, [r7, #29]
 8007b00:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <mergeData+0x228>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	77bb      	strb	r3, [r7, #30]
 8007b06:	4b56      	ldr	r3, [pc, #344]	; (8007c60 <mergeData+0x22c>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	4b55      	ldr	r3, [pc, #340]	; (8007c64 <mergeData+0x230>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007b14:	4b54      	ldr	r3, [pc, #336]	; (8007c68 <mergeData+0x234>)
 8007b16:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007b1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			eepromData[39],
 8007b1e:	4b52      	ldr	r3, [pc, #328]	; (8007c68 <mergeData+0x234>)
 8007b20:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			eepromData[40],
 8007b28:	4b4f      	ldr	r3, [pc, #316]	; (8007c68 <mergeData+0x234>)
 8007b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			eepromData[41],
 8007b32:	4b4d      	ldr	r3, [pc, #308]	; (8007c68 <mergeData+0x234>)
 8007b34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007b38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			eepromData[42],
 8007b3c:	4b4a      	ldr	r3, [pc, #296]	; (8007c68 <mergeData+0x234>)
 8007b3e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007b42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[43],
 8007b46:	4b48      	ldr	r3, [pc, #288]	; (8007c68 <mergeData+0x234>)
 8007b48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[44],
 8007b50:	4b45      	ldr	r3, [pc, #276]	; (8007c68 <mergeData+0x234>)
 8007b52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[45],
 8007b5a:	4b43      	ldr	r3, [pc, #268]	; (8007c68 <mergeData+0x234>)
 8007b5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007b60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[46],
 8007b64:	4b40      	ldr	r3, [pc, #256]	; (8007c68 <mergeData+0x234>)
 8007b66:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007b6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[47],
 8007b6e:	4b3e      	ldr	r3, [pc, #248]	; (8007c68 <mergeData+0x234>)
 8007b70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b78:	2306      	movs	r3, #6
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007b7e:	2300      	movs	r3, #0
 8007b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b82:	e015      	b.n	8007bb0 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 8007b84:	463a      	mov	r2, r7
 8007b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b88:	4413      	add	r3, r2
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b92:	4936      	ldr	r1, [pc, #216]	; (8007c6c <mergeData+0x238>)
 8007b94:	4618      	mov	r0, r3
 8007b96:	f004 ff41 	bl	800ca1c <siprintf>
	    strcat(combinedString, temp);
 8007b9a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f004 ff9b 	bl	800cae0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	3301      	adds	r3, #1
 8007bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	2b2b      	cmp	r3, #43	; 0x2b
 8007bb4:	d9e6      	bls.n	8007b84 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007bb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7f8 fb32 	bl	8000224 <strlen>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f004 fe75 	bl	800c8b4 <malloc>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007bce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007bd6:	f004 ffff 	bl	800cbd8 <strcpy>
	return result;
 8007bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3770      	adds	r7, #112	; 0x70
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000c9b 	.word	0x20000c9b
 8007be8:	20000c8d 	.word	0x20000c8d
 8007bec:	20000c90 	.word	0x20000c90
 8007bf0:	20000c91 	.word	0x20000c91
 8007bf4:	20000c92 	.word	0x20000c92
 8007bf8:	20000c99 	.word	0x20000c99
 8007bfc:	20000c93 	.word	0x20000c93
 8007c00:	20000c94 	.word	0x20000c94
 8007c04:	20000c98 	.word	0x20000c98
 8007c08:	20000c95 	.word	0x20000c95
 8007c0c:	20000ca5 	.word	0x20000ca5
 8007c10:	20000c96 	.word	0x20000c96
 8007c14:	20000ca6 	.word	0x20000ca6
 8007c18:	20000c97 	.word	0x20000c97
 8007c1c:	20000ca7 	.word	0x20000ca7
 8007c20:	20000c9a 	.word	0x20000c9a
 8007c24:	20000c9c 	.word	0x20000c9c
 8007c28:	20000c9d 	.word	0x20000c9d
 8007c2c:	20000c9e 	.word	0x20000c9e
 8007c30:	20000c9f 	.word	0x20000c9f
 8007c34:	20000ca0 	.word	0x20000ca0
 8007c38:	20000ca1 	.word	0x20000ca1
 8007c3c:	20000ca2 	.word	0x20000ca2
 8007c40:	20000ca3 	.word	0x20000ca3
 8007c44:	20000ca4 	.word	0x20000ca4
 8007c48:	20000ca8 	.word	0x20000ca8
 8007c4c:	20000caa 	.word	0x20000caa
 8007c50:	20000c89 	.word	0x20000c89
 8007c54:	20000c8a 	.word	0x20000c8a
 8007c58:	20000000 	.word	0x20000000
 8007c5c:	20000001 	.word	0x20000001
 8007c60:	20000c8b 	.word	0x20000c8b
 8007c64:	20000cad 	.word	0x20000cad
 8007c68:	20000bb8 	.word	0x20000bb8
 8007c6c:	0800d72c 	.word	0x0800d72c

08007c70 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af02      	add	r7, sp, #8
		lcd_print(2, 1, " Baslatildi ... ");
	} else {
		lcd_print(1, 1, " Syncronization ");
		lcd_print(2, 1, "   Started...   ");
	}*/
	lcd_print(1, 1, dataSynchText);
 8007c76:	4a13      	ldr	r2, [pc, #76]	; (8007cc4 <convertAndSendData+0x54>)
 8007c78:	2101      	movs	r1, #1
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	f000 fa6a 	bl	8008154 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <convertAndSendData+0x58>)
 8007c82:	2101      	movs	r1, #1
 8007c84:	2002      	movs	r0, #2
 8007c86:	f000 fa65 	bl	8008154 <lcd_print>

	for(int i=0; i<2; i++) {
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	e00c      	b.n	8007caa <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007c90:	f7ff fed0 	bl	8007a34 <mergeData>
 8007c94:	4603      	mov	r3, r0
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <convertAndSendData+0x5c>)
 8007c9a:	4a0d      	ldr	r2, [pc, #52]	; (8007cd0 <convertAndSendData+0x60>)
 8007c9c:	490d      	ldr	r1, [pc, #52]	; (8007cd4 <convertAndSendData+0x64>)
 8007c9e:	480e      	ldr	r0, [pc, #56]	; (8007cd8 <convertAndSendData+0x68>)
 8007ca0:	f7f8 fe7a 	bl	8000998 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	ddef      	ble.n	8007c90 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8007cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cb4:	f000 ffa4 	bl	8008c00 <HAL_Delay>
	lcd_clear();
 8007cb8:	f000 fa78 	bl	80081ac <lcd_clear>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	2000124c 	.word	0x2000124c
 8007cc8:	2000125c 	.word	0x2000125c
 8007ccc:	20000c50 	.word	0x20000c50
 8007cd0:	20000c3c 	.word	0x20000c3c
 8007cd4:	20000c30 	.word	0x20000c30
 8007cd8:	200013b4 	.word	0x200013b4

08007cdc <iotSetup>:

void iotSetup() {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af04      	add	r7, sp, #16
	if(iotMode != 0) {
 8007ce2:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <iotSetup+0xcc>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <iotSetup+0x3c>
		if(checkEEPROM4ID() != 1) {
 8007cea:	f000 f875 	bl	8007dd8 <checkEEPROM4ID>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d001      	beq.n	8007cf8 <iotSetup+0x1c>
			takeMachineID();
 8007cf4:	f7ff fa2c 	bl	8007150 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007cf8:	482c      	ldr	r0, [pc, #176]	; (8007dac <iotSetup+0xd0>)
 8007cfa:	f7f8 fa93 	bl	8000224 <strlen>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d801      	bhi.n	8007d08 <iotSetup+0x2c>
			takeWifiSSID();
 8007d04:	f7ff fba8 	bl	8007458 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007d08:	4829      	ldr	r0, [pc, #164]	; (8007db0 <iotSetup+0xd4>)
 8007d0a:	f7f8 fa8b 	bl	8000224 <strlen>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d801      	bhi.n	8007d18 <iotSetup+0x3c>
			takeWifiPass();
 8007d14:	f7ff fd16 	bl	8007744 <takeWifiPass>
		}
	}

	if(setupCompleted != 1) {
 8007d18:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <iotSetup+0xd8>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d035      	beq.n	8007d8c <iotSetup+0xb0>
		takeIDSection:
 8007d20:	bf00      	nop
		if(checkMachineID(&huart1, machineID) == 1) {
 8007d22:	4925      	ldr	r1, [pc, #148]	; (8007db8 <iotSetup+0xdc>)
 8007d24:	4825      	ldr	r0, [pc, #148]	; (8007dbc <iotSetup+0xe0>)
 8007d26:	f7f8 fed7 	bl	8000ad8 <checkMachineID>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d119      	bne.n	8007d64 <iotSetup+0x88>
			setupCompleted = 1;
 8007d30:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <iotSetup+0xd8>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	701a      	strb	r2, [r3, #0]
			eepromData[104] = setupCompleted;
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <iotSetup+0xd8>)
 8007d38:	781a      	ldrb	r2, [r3, #0]
 8007d3a:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <iotSetup+0xe4>)
 8007d3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			//EEPROMA yazma işlemini başlat
        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007d40:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007d44:	9302      	str	r3, [sp, #8]
 8007d46:	236e      	movs	r3, #110	; 0x6e
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <iotSetup+0xe4>)
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	236e      	movs	r3, #110	; 0x6e
 8007d50:	2200      	movs	r2, #0
 8007d52:	21a0      	movs	r1, #160	; 0xa0
 8007d54:	481b      	ldr	r0, [pc, #108]	; (8007dc4 <iotSetup+0xe8>)
 8007d56:	f001 ffdd 	bl	8009d14 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8007d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d5e:	f000 ff4f 	bl	8008c00 <HAL_Delay>
 8007d62:	e013      	b.n	8007d8c <iotSetup+0xb0>
			} else {
				//ingilizce hata mesajı
				lcd_print(1, 1, "ID NOT AVAILABLE");
				lcd_print(2, 1, "FOR THIS MACHINE");
			}*/
			lcd_print(1, 1, mustBeUniqueText);
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <iotSetup+0xec>)
 8007d66:	2101      	movs	r1, #1
 8007d68:	2001      	movs	r0, #1
 8007d6a:	f000 f9f3 	bl	8008154 <lcd_print>
			lcd_print(2, 1, mustBeUnique2Text);
 8007d6e:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <iotSetup+0xf0>)
 8007d70:	2101      	movs	r1, #1
 8007d72:	2002      	movs	r0, #2
 8007d74:	f000 f9ee 	bl	8008154 <lcd_print>

			HAL_Delay(1250);
 8007d78:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007d7c:	f000 ff40 	bl	8008c00 <HAL_Delay>
			//Tekrar id alma işlemi
			takeMachineID();
 8007d80:	f7ff f9e6 	bl	8007150 <takeMachineID>
			HAL_Delay(200);
 8007d84:	20c8      	movs	r0, #200	; 0xc8
 8007d86:	f000 ff3b 	bl	8008c00 <HAL_Delay>
			goto takeIDSection;
 8007d8a:	e7ca      	b.n	8007d22 <iotSetup+0x46>
		}
	}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8007d8c:	4a10      	ldr	r2, [pc, #64]	; (8007dd0 <iotSetup+0xf4>)
 8007d8e:	4911      	ldr	r1, [pc, #68]	; (8007dd4 <iotSetup+0xf8>)
 8007d90:	480a      	ldr	r0, [pc, #40]	; (8007dbc <iotSetup+0xe0>)
 8007d92:	f7f8 fd57 	bl	8000844 <ESP8266_Init>
	HAL_Delay(500);
 8007d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d9a:	f000 ff31 	bl	8008c00 <HAL_Delay>
	convertAndSendData();
 8007d9e:	f7ff ff67 	bl	8007c70 <convertAndSendData>
}
 8007da2:	bf00      	nop
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000cab 	.word	0x20000cab
 8007dac:	20000c3c 	.word	0x20000c3c
 8007db0:	20000c50 	.word	0x20000c50
 8007db4:	20000c64 	.word	0x20000c64
 8007db8:	20000c30 	.word	0x20000c30
 8007dbc:	200013b4 	.word	0x200013b4
 8007dc0:	20000bb8 	.word	0x20000bb8
 8007dc4:	20001318 	.word	0x20001318
 8007dc8:	2000126c 	.word	0x2000126c
 8007dcc:	2000127c 	.word	0x2000127c
 8007dd0:	0800d730 	.word	0x0800d730
 8007dd4:	0800d748 	.word	0x0800d748

08007dd8 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <checkEEPROM4ID+0x44>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8007de4:	2301      	movs	r3, #1
 8007de6:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007de8:	2300      	movs	r3, #0
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	e00d      	b.n	8007e0a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8007dee:	4a0c      	ldr	r2, [pc, #48]	; (8007e20 <checkEEPROM4ID+0x48>)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <checkEEPROM4ID+0x26>
			returnVal = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3301      	adds	r3, #1
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b0b      	cmp	r3, #11
 8007e0e:	ddee      	ble.n	8007dee <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8007e10:	68bb      	ldr	r3, [r7, #8]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr
 8007e1c:	20000004 	.word	0x20000004
 8007e20:	20000bb8 	.word	0x20000bb8

08007e24 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	f023 030f 	bic.w	r3, r3, #15
 8007e34:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007e3c:	7b7b      	ldrb	r3, [r7, #13]
 8007e3e:	f043 030c 	orr.w	r3, r3, #12
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007e46:	7b7b      	ldrb	r3, [r7, #13]
 8007e48:	f043 0308 	orr.w	r3, r3, #8
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007e50:	7b3b      	ldrb	r3, [r7, #12]
 8007e52:	f043 030c 	orr.w	r3, r3, #12
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007e5a:	7b3b      	ldrb	r3, [r7, #12]
 8007e5c:	f043 0308 	orr.w	r3, r3, #8
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e64:	bf00      	nop
 8007e66:	4825      	ldr	r0, [pc, #148]	; (8007efc <lcd_send_cmd+0xd8>)
 8007e68:	f002 fac3 	bl	800a3f2 <HAL_I2C_GetError>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d0f9      	beq.n	8007e66 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e72:	bf00      	nop
 8007e74:	4821      	ldr	r0, [pc, #132]	; (8007efc <lcd_send_cmd+0xd8>)
 8007e76:	f002 faaf 	bl	800a3d8 <HAL_I2C_GetState>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d1f9      	bne.n	8007e74 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007e80:	4b1f      	ldr	r3, [pc, #124]	; (8007f00 <lcd_send_cmd+0xdc>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d116      	bne.n	8007eb6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
 8007e8c:	e00f      	b.n	8007eae <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	3310      	adds	r3, #16
 8007e92:	443b      	add	r3, r7
 8007e94:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	f022 0208 	bic.w	r2, r2, #8
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	3310      	adds	r3, #16
 8007ea2:	443b      	add	r3, r7
 8007ea4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d9ec      	bls.n	8007e8e <lcd_send_cmd+0x6a>
 8007eb4:	e015      	b.n	8007ee2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73bb      	strb	r3, [r7, #14]
 8007eba:	e00f      	b.n	8007edc <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	3310      	adds	r3, #16
 8007ec0:	443b      	add	r3, r7
 8007ec2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	f042 0208 	orr.w	r2, r2, #8
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	3310      	adds	r3, #16
 8007ed0:	443b      	add	r3, r7
 8007ed2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	73bb      	strb	r3, [r7, #14]
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d9ec      	bls.n	8007ebc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007ee2:	f107 0208 	add.w	r2, r7, #8
 8007ee6:	2364      	movs	r3, #100	; 0x64
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2304      	movs	r3, #4
 8007eec:	214e      	movs	r1, #78	; 0x4e
 8007eee:	4803      	ldr	r0, [pc, #12]	; (8007efc <lcd_send_cmd+0xd8>)
 8007ef0:	f001 fe12 	bl	8009b18 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20001318 	.word	0x20001318
 8007f00:	200012ec 	.word	0x200012ec

08007f04 <lcd_send_data>:

void lcd_send_data (char data) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	f023 030f 	bic.w	r3, r3, #15
 8007f14:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007f1c:	7b7b      	ldrb	r3, [r7, #13]
 8007f1e:	f043 030d 	orr.w	r3, r3, #13
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007f26:	7b7b      	ldrb	r3, [r7, #13]
 8007f28:	f043 0309 	orr.w	r3, r3, #9
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007f30:	7b3b      	ldrb	r3, [r7, #12]
 8007f32:	f043 030d 	orr.w	r3, r3, #13
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007f3a:	7b3b      	ldrb	r3, [r7, #12]
 8007f3c:	f043 0309 	orr.w	r3, r3, #9
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007f44:	bf00      	nop
 8007f46:	4825      	ldr	r0, [pc, #148]	; (8007fdc <lcd_send_data+0xd8>)
 8007f48:	f002 fa53 	bl	800a3f2 <HAL_I2C_GetError>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d0f9      	beq.n	8007f46 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007f52:	bf00      	nop
 8007f54:	4821      	ldr	r0, [pc, #132]	; (8007fdc <lcd_send_data+0xd8>)
 8007f56:	f002 fa3f 	bl	800a3d8 <HAL_I2C_GetState>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d1f9      	bne.n	8007f54 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007f60:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <lcd_send_data+0xdc>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d116      	bne.n	8007f96 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
 8007f6c:	e00f      	b.n	8007f8e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	3310      	adds	r3, #16
 8007f72:	443b      	add	r3, r7
 8007f74:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	f022 0208 	bic.w	r2, r2, #8
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	3310      	adds	r3, #16
 8007f82:	443b      	add	r3, r7
 8007f84:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	73fb      	strb	r3, [r7, #15]
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d9ec      	bls.n	8007f6e <lcd_send_data+0x6a>
 8007f94:	e015      	b.n	8007fc2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007f96:	2300      	movs	r3, #0
 8007f98:	73bb      	strb	r3, [r7, #14]
 8007f9a:	e00f      	b.n	8007fbc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	3310      	adds	r3, #16
 8007fa0:	443b      	add	r3, r7
 8007fa2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	f042 0208 	orr.w	r2, r2, #8
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	3310      	adds	r3, #16
 8007fb0:	443b      	add	r3, r7
 8007fb2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	73bb      	strb	r3, [r7, #14]
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d9ec      	bls.n	8007f9c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007fc2:	f107 0208 	add.w	r2, r7, #8
 8007fc6:	2364      	movs	r3, #100	; 0x64
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	2304      	movs	r3, #4
 8007fcc:	214e      	movs	r1, #78	; 0x4e
 8007fce:	4803      	ldr	r0, [pc, #12]	; (8007fdc <lcd_send_data+0xd8>)
 8007fd0:	f001 fda2 	bl	8009b18 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20001318 	.word	0x20001318
 8007fe0:	200012ec 	.word	0x200012ec

08007fe4 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007fec:	e006      	b.n	8007ffc <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff ff84 	bl	8007f04 <lcd_send_data>
	while (*str) {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1f4      	bne.n	8007fee <lcd_send_string+0xa>
	}
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af02      	add	r7, sp, #8
 8008016:	4603      	mov	r3, r0
 8008018:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	f023 030f 	bic.w	r3, r3, #15
 8008020:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008028:	7b7b      	ldrb	r3, [r7, #13]
 800802a:	f043 030d 	orr.w	r3, r3, #13
 800802e:	b2db      	uxtb	r3, r3
 8008030:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008032:	7b7b      	ldrb	r3, [r7, #13]
 8008034:	f043 0309 	orr.w	r3, r3, #9
 8008038:	b2db      	uxtb	r3, r3
 800803a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800803c:	7b3b      	ldrb	r3, [r7, #12]
 800803e:	f043 030d 	orr.w	r3, r3, #13
 8008042:	b2db      	uxtb	r3, r3
 8008044:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008046:	7b3b      	ldrb	r3, [r7, #12]
 8008048:	f043 0309 	orr.w	r3, r3, #9
 800804c:	b2db      	uxtb	r3, r3
 800804e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008050:	bf00      	nop
 8008052:	4825      	ldr	r0, [pc, #148]	; (80080e8 <lcd_send_char+0xd8>)
 8008054:	f002 f9cd 	bl	800a3f2 <HAL_I2C_GetError>
 8008058:	4603      	mov	r3, r0
 800805a:	2b04      	cmp	r3, #4
 800805c:	d0f9      	beq.n	8008052 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800805e:	bf00      	nop
 8008060:	4821      	ldr	r0, [pc, #132]	; (80080e8 <lcd_send_char+0xd8>)
 8008062:	f002 f9b9 	bl	800a3d8 <HAL_I2C_GetState>
 8008066:	4603      	mov	r3, r0
 8008068:	2b20      	cmp	r3, #32
 800806a:	d1f9      	bne.n	8008060 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800806c:	4b1f      	ldr	r3, [pc, #124]	; (80080ec <lcd_send_char+0xdc>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d116      	bne.n	80080a2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	e00f      	b.n	800809a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3310      	adds	r3, #16
 800807e:	443b      	add	r3, r7
 8008080:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	f022 0208 	bic.w	r2, r2, #8
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	3310      	adds	r3, #16
 800808e:	443b      	add	r3, r7
 8008090:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	3301      	adds	r3, #1
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d9ec      	bls.n	800807a <lcd_send_char+0x6a>
 80080a0:	e015      	b.n	80080ce <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80080a2:	2300      	movs	r3, #0
 80080a4:	73bb      	strb	r3, [r7, #14]
 80080a6:	e00f      	b.n	80080c8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	3310      	adds	r3, #16
 80080ac:	443b      	add	r3, r7
 80080ae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	f042 0208 	orr.w	r2, r2, #8
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	3310      	adds	r3, #16
 80080bc:	443b      	add	r3, r7
 80080be:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	3301      	adds	r3, #1
 80080c6:	73bb      	strb	r3, [r7, #14]
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d9ec      	bls.n	80080a8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80080ce:	f107 0208 	add.w	r2, r7, #8
 80080d2:	2364      	movs	r3, #100	; 0x64
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2304      	movs	r3, #4
 80080d8:	214e      	movs	r1, #78	; 0x4e
 80080da:	4803      	ldr	r0, [pc, #12]	; (80080e8 <lcd_send_char+0xd8>)
 80080dc:	f001 fd1c 	bl	8009b18 <HAL_I2C_Master_Transmit>
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20001318 	.word	0x20001318
 80080ec:	200012ec 	.word	0x200012ec

080080f0 <lcd_init>:

void lcd_init (void) {
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80080f4:	2002      	movs	r0, #2
 80080f6:	f7ff fe95 	bl	8007e24 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80080fa:	2028      	movs	r0, #40	; 0x28
 80080fc:	f7ff fe92 	bl	8007e24 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008100:	200c      	movs	r0, #12
 8008102:	f7ff fe8f 	bl	8007e24 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008106:	2080      	movs	r0, #128	; 0x80
 8008108:	f7ff fe8c 	bl	8007e24 <lcd_send_cmd>
	lcd_backlight(1);
 800810c:	2001      	movs	r0, #1
 800810e:	f000 f86d 	bl	80081ec <lcd_backlight>
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}

08008116 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	4603      	mov	r3, r0
 800811e:	460a      	mov	r2, r1
 8008120:	71fb      	strb	r3, [r7, #7]
 8008122:	4613      	mov	r3, r2
 8008124:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d106      	bne.n	800813a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800812c:	79bb      	ldrb	r3, [r7, #6]
 800812e:	337f      	adds	r3, #127	; 0x7f
 8008130:	b2db      	uxtb	r3, r3
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff fe76 	bl	8007e24 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008138:	e008      	b.n	800814c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d105      	bne.n	800814c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008140:	79bb      	ldrb	r3, [r7, #6]
 8008142:	3b41      	subs	r3, #65	; 0x41
 8008144:	b2db      	uxtb	r3, r3
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fe6c 	bl	8007e24 <lcd_send_cmd>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	603a      	str	r2, [r7, #0]
 800815e:	71fb      	strb	r3, [r7, #7]
 8008160:	460b      	mov	r3, r1
 8008162:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008164:	79ba      	ldrb	r2, [r7, #6]
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ffd3 	bl	8008116 <lcd_gotoxy>
	lcd_send_string(str);
 8008170:	6838      	ldr	r0, [r7, #0]
 8008172:	f7ff ff37 	bl	8007fe4 <lcd_send_string>
}
 8008176:	bf00      	nop
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	4603      	mov	r3, r0
 8008186:	71fb      	strb	r3, [r7, #7]
 8008188:	460b      	mov	r3, r1
 800818a:	71bb      	strb	r3, [r7, #6]
 800818c:	4613      	mov	r3, r2
 800818e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008190:	79ba      	ldrb	r2, [r7, #6]
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff ffbd 	bl	8008116 <lcd_gotoxy>
    lcd_send_char(ch);
 800819c:	797b      	ldrb	r3, [r7, #5]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff ff36 	bl	8008010 <lcd_send_char>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <lcd_clear>:

void lcd_clear(void) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80081b0:	2001      	movs	r0, #1
 80081b2:	f7ff fe37 	bl	8007e24 <lcd_send_cmd>
    HAL_Delay(2);
 80081b6:	2002      	movs	r0, #2
 80081b8:	f000 fd22 	bl	8008c00 <HAL_Delay>
}
 80081bc:	bf00      	nop
 80081be:	bd80      	pop	{r7, pc}

080081c0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	460a      	mov	r2, r1
 80081ca:	71fb      	strb	r3, [r7, #7]
 80081cc:	4613      	mov	r3, r2
 80081ce:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80081d0:	79ba      	ldrb	r2, [r7, #6]
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff ff9d 	bl	8008116 <lcd_gotoxy>

    lcd_send_char(' ');
 80081dc:	2020      	movs	r0, #32
 80081de:	f7ff ff17 	bl	8008010 <lcd_send_char>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80081f6:	4a05      	ldr	r2, [pc, #20]	; (800820c <lcd_backlight+0x20>)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80081fc:	2000      	movs	r0, #0
 80081fe:	f7ff fe11 	bl	8007e24 <lcd_send_cmd>
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	200012ec 	.word	0x200012ec

08008210 <lcd_cursor>:

void lcd_cursor(int state) {
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d106      	bne.n	800822c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800821e:	200e      	movs	r0, #14
 8008220:	f7ff fe00 	bl	8007e24 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008224:	200f      	movs	r0, #15
 8008226:	f7ff fdfd 	bl	8007e24 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800822a:	e002      	b.n	8008232 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800822c:	200c      	movs	r0, #12
 800822e:	f7ff fdf9 	bl	8007e24 <lcd_send_cmd>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008244:	4b04      	ldr	r3, [pc, #16]	; (8008258 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	4a03      	ldr	r2, [pc, #12]	; (8008258 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800824c:	6013      	str	r3, [r2, #0]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr
 8008258:	20000c68 	.word	0x20000c68

0800825c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008260:	f000 fc6c 	bl	8008b3c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008268:	f000 fcca 	bl	8008c00 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800826c:	f000 f89c 	bl	80083a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008270:	f000 f9be 	bl	80085f0 <MX_GPIO_Init>
  MX_CAN_Init();
 8008274:	f000 f8de 	bl	8008434 <MX_CAN_Init>
  MX_I2C1_Init();
 8008278:	f000 f910 	bl	800849c <MX_I2C1_Init>
  MX_TIM1_Init();
 800827c:	f000 f93c 	bl	80084f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008280:	f000 f98c 	bl	800859c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008284:	2201      	movs	r2, #1
 8008286:	2140      	movs	r1, #64	; 0x40
 8008288:	483e      	ldr	r0, [pc, #248]	; (8008384 <main+0x128>)
 800828a:	f001 faa0 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800828e:	2201      	movs	r2, #1
 8008290:	2180      	movs	r1, #128	; 0x80
 8008292:	483c      	ldr	r0, [pc, #240]	; (8008384 <main+0x128>)
 8008294:	f001 fa9b 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008298:	200a      	movs	r0, #10
 800829a:	f000 fcb1 	bl	8008c00 <HAL_Delay>
  lcd_init();
 800829e:	f7ff ff27 	bl	80080f0 <lcd_init>
  HAL_Delay(10);
 80082a2:	200a      	movs	r0, #10
 80082a4:	f000 fcac 	bl	8008c00 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80082a8:	4837      	ldr	r0, [pc, #220]	; (8008388 <main+0x12c>)
 80082aa:	f003 f943 	bl	800b534 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80082ae:	bf00      	nop
 80082b0:	4836      	ldr	r0, [pc, #216]	; (800838c <main+0x130>)
 80082b2:	f002 f89e 	bl	800a3f2 <HAL_I2C_GetError>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d0f9      	beq.n	80082b0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80082bc:	bf00      	nop
 80082be:	4833      	ldr	r0, [pc, #204]	; (800838c <main+0x130>)
 80082c0:	f002 f88a 	bl	800a3d8 <HAL_I2C_GetState>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d1f9      	bne.n	80082be <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80082ca:	2200      	movs	r2, #0
 80082cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082d0:	482c      	ldr	r0, [pc, #176]	; (8008384 <main+0x128>)
 80082d2:	f001 fa7c 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80082d6:	2200      	movs	r2, #0
 80082d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082dc:	4829      	ldr	r0, [pc, #164]	; (8008384 <main+0x128>)
 80082de:	f001 fa76 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80082e2:	2200      	movs	r2, #0
 80082e4:	2104      	movs	r1, #4
 80082e6:	4827      	ldr	r0, [pc, #156]	; (8008384 <main+0x128>)
 80082e8:	f001 fa71 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80082ec:	2200      	movs	r2, #0
 80082ee:	2102      	movs	r1, #2
 80082f0:	4824      	ldr	r0, [pc, #144]	; (8008384 <main+0x128>)
 80082f2:	f001 fa6c 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80082f6:	2200      	movs	r2, #0
 80082f8:	2101      	movs	r1, #1
 80082fa:	4822      	ldr	r0, [pc, #136]	; (8008384 <main+0x128>)
 80082fc:	f001 fa67 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008300:	2200      	movs	r2, #0
 8008302:	2120      	movs	r1, #32
 8008304:	4822      	ldr	r0, [pc, #136]	; (8008390 <main+0x134>)
 8008306:	f001 fa62 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800830a:	2200      	movs	r2, #0
 800830c:	2110      	movs	r1, #16
 800830e:	4820      	ldr	r0, [pc, #128]	; (8008390 <main+0x134>)
 8008310:	f001 fa5d 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008314:	2200      	movs	r2, #0
 8008316:	2180      	movs	r1, #128	; 0x80
 8008318:	481e      	ldr	r0, [pc, #120]	; (8008394 <main+0x138>)
 800831a:	f001 fa58 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800831e:	2200      	movs	r2, #0
 8008320:	2140      	movs	r1, #64	; 0x40
 8008322:	481c      	ldr	r0, [pc, #112]	; (8008394 <main+0x138>)
 8008324:	f001 fa53 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008328:	2200      	movs	r2, #0
 800832a:	2120      	movs	r1, #32
 800832c:	4819      	ldr	r0, [pc, #100]	; (8008394 <main+0x138>)
 800832e:	f001 fa4e 	bl	80097ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008332:	2200      	movs	r2, #0
 8008334:	2110      	movs	r1, #16
 8008336:	4817      	ldr	r0, [pc, #92]	; (8008394 <main+0x138>)
 8008338:	f001 fa49 	bl	80097ce <HAL_GPIO_WritePin>

  i2cTest();
 800833c:	f7f8 fdd6 	bl	8000eec <i2cTest>
  HAL_Delay(100);
 8008340:	2064      	movs	r0, #100	; 0x64
 8008342:	f000 fc5d 	bl	8008c00 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <main+0x13c>)
 8008348:	2101      	movs	r1, #1
 800834a:	2001      	movs	r0, #1
 800834c:	f7ff ff02 	bl	8008154 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008350:	4a12      	ldr	r2, [pc, #72]	; (800839c <main+0x140>)
 8008352:	2101      	movs	r1, #1
 8008354:	2002      	movs	r0, #2
 8008356:	f7ff fefd 	bl	8008154 <lcd_print>
  //lcd_print(1,1,"     RMK-V1     ");
  //lcd_print(2,1,"ONDTECH ESP CONT");
  HAL_Delay(1000);
 800835a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800835e:	f000 fc4f 	bl	8008c00 <HAL_Delay>
  lcd_clear();
 8008362:	f7ff ff23 	bl	80081ac <lcd_clear>

  eepromKontrol();
 8008366:	f7f7 ff65 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800836a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800836e:	f000 fc47 	bl	8008c00 <HAL_Delay>

  backLightTimer = millis;
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <main+0x144>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <main+0x148>)
 8008378:	6013      	str	r3, [r2, #0]

  iotSetup();
 800837a:	f7ff fcaf 	bl	8007cdc <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800837e:	f7fd fdc3 	bl	8005f08 <mainLoop>
 8008382:	e7fc      	b.n	800837e <main+0x122>
 8008384:	40010c00 	.word	0x40010c00
 8008388:	2000136c 	.word	0x2000136c
 800838c:	20001318 	.word	0x20001318
 8008390:	40011000 	.word	0x40011000
 8008394:	40010800 	.word	0x40010800
 8008398:	200000a0 	.word	0x200000a0
 800839c:	200000b0 	.word	0x200000b0
 80083a0:	20000c68 	.word	0x20000c68
 80083a4:	20000c84 	.word	0x20000c84

080083a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b090      	sub	sp, #64	; 0x40
 80083ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80083ae:	f107 0318 	add.w	r3, r7, #24
 80083b2:	2228      	movs	r2, #40	; 0x28
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f004 fbca 	bl	800cb50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80083bc:	1d3b      	adds	r3, r7, #4
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	609a      	str	r2, [r3, #8]
 80083c6:	60da      	str	r2, [r3, #12]
 80083c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80083ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80083d4:	2300      	movs	r3, #0
 80083d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80083d8:	2301      	movs	r3, #1
 80083da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80083dc:	2302      	movs	r3, #2
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80083e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80083e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80083ec:	f107 0318 	add.w	r3, r7, #24
 80083f0:	4618      	mov	r0, r3
 80083f2:	f002 fc3f 	bl	800ac74 <HAL_RCC_OscConfig>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80083fc:	f000 f9a2 	bl	8008744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008400:	230f      	movs	r3, #15
 8008402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008404:	2302      	movs	r3, #2
 8008406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800840c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008416:	1d3b      	adds	r3, r7, #4
 8008418:	2102      	movs	r1, #2
 800841a:	4618      	mov	r0, r3
 800841c:	f002 feac 	bl	800b178 <HAL_RCC_ClockConfig>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008426:	f000 f98d 	bl	8008744 <Error_Handler>
  }
}
 800842a:	bf00      	nop
 800842c:	3740      	adds	r7, #64	; 0x40
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008438:	4b16      	ldr	r3, [pc, #88]	; (8008494 <MX_CAN_Init+0x60>)
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <MX_CAN_Init+0x64>)
 800843c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800843e:	4b15      	ldr	r3, [pc, #84]	; (8008494 <MX_CAN_Init+0x60>)
 8008440:	2210      	movs	r2, #16
 8008442:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008444:	4b13      	ldr	r3, [pc, #76]	; (8008494 <MX_CAN_Init+0x60>)
 8008446:	2200      	movs	r2, #0
 8008448:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <MX_CAN_Init+0x60>)
 800844c:	2200      	movs	r2, #0
 800844e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008450:	4b10      	ldr	r3, [pc, #64]	; (8008494 <MX_CAN_Init+0x60>)
 8008452:	2200      	movs	r2, #0
 8008454:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <MX_CAN_Init+0x60>)
 8008458:	2200      	movs	r2, #0
 800845a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <MX_CAN_Init+0x60>)
 800845e:	2200      	movs	r2, #0
 8008460:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <MX_CAN_Init+0x60>)
 8008464:	2200      	movs	r2, #0
 8008466:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <MX_CAN_Init+0x60>)
 800846a:	2200      	movs	r2, #0
 800846c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <MX_CAN_Init+0x60>)
 8008470:	2200      	movs	r2, #0
 8008472:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <MX_CAN_Init+0x60>)
 8008476:	2200      	movs	r2, #0
 8008478:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800847a:	4b06      	ldr	r3, [pc, #24]	; (8008494 <MX_CAN_Init+0x60>)
 800847c:	2200      	movs	r2, #0
 800847e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008480:	4804      	ldr	r0, [pc, #16]	; (8008494 <MX_CAN_Init+0x60>)
 8008482:	f000 fbe1 	bl	8008c48 <HAL_CAN_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800848c:	f000 f95a 	bl	8008744 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008490:	bf00      	nop
 8008492:	bd80      	pop	{r7, pc}
 8008494:	200012f0 	.word	0x200012f0
 8008498:	40006400 	.word	0x40006400

0800849c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80084a0:	4b12      	ldr	r3, [pc, #72]	; (80084ec <MX_I2C1_Init+0x50>)
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <MX_I2C1_Init+0x54>)
 80084a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80084a6:	4b11      	ldr	r3, [pc, #68]	; (80084ec <MX_I2C1_Init+0x50>)
 80084a8:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <MX_I2C1_Init+0x58>)
 80084aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <MX_I2C1_Init+0x50>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80084b2:	4b0e      	ldr	r3, [pc, #56]	; (80084ec <MX_I2C1_Init+0x50>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <MX_I2C1_Init+0x50>)
 80084ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80084be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <MX_I2C1_Init+0x50>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <MX_I2C1_Init+0x50>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80084cc:	4b07      	ldr	r3, [pc, #28]	; (80084ec <MX_I2C1_Init+0x50>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <MX_I2C1_Init+0x50>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80084d8:	4804      	ldr	r0, [pc, #16]	; (80084ec <MX_I2C1_Init+0x50>)
 80084da:	f001 f9a9 	bl	8009830 <HAL_I2C_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80084e4:	f000 f92e 	bl	8008744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80084e8:	bf00      	nop
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20001318 	.word	0x20001318
 80084f0:	40005400 	.word	0x40005400
 80084f4:	00061a80 	.word	0x00061a80

080084f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084fe:	f107 0308 	add.w	r3, r7, #8
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	609a      	str	r2, [r3, #8]
 800850a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800850c:	463b      	mov	r3, r7
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008514:	4b1f      	ldr	r3, [pc, #124]	; (8008594 <MX_TIM1_Init+0x9c>)
 8008516:	4a20      	ldr	r2, [pc, #128]	; (8008598 <MX_TIM1_Init+0xa0>)
 8008518:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800851a:	4b1e      	ldr	r3, [pc, #120]	; (8008594 <MX_TIM1_Init+0x9c>)
 800851c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008520:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <MX_TIM1_Init+0x9c>)
 8008524:	2200      	movs	r2, #0
 8008526:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <MX_TIM1_Init+0x9c>)
 800852a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800852e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008530:	4b18      	ldr	r3, [pc, #96]	; (8008594 <MX_TIM1_Init+0x9c>)
 8008532:	2200      	movs	r2, #0
 8008534:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008536:	4b17      	ldr	r3, [pc, #92]	; (8008594 <MX_TIM1_Init+0x9c>)
 8008538:	2200      	movs	r2, #0
 800853a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800853c:	4b15      	ldr	r3, [pc, #84]	; (8008594 <MX_TIM1_Init+0x9c>)
 800853e:	2200      	movs	r2, #0
 8008540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008542:	4814      	ldr	r0, [pc, #80]	; (8008594 <MX_TIM1_Init+0x9c>)
 8008544:	f002 ffa6 	bl	800b494 <HAL_TIM_Base_Init>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800854e:	f000 f8f9 	bl	8008744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008558:	f107 0308 	add.w	r3, r7, #8
 800855c:	4619      	mov	r1, r3
 800855e:	480d      	ldr	r0, [pc, #52]	; (8008594 <MX_TIM1_Init+0x9c>)
 8008560:	f003 f950 	bl	800b804 <HAL_TIM_ConfigClockSource>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800856a:	f000 f8eb 	bl	8008744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800856e:	2300      	movs	r3, #0
 8008570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008576:	463b      	mov	r3, r7
 8008578:	4619      	mov	r1, r3
 800857a:	4806      	ldr	r0, [pc, #24]	; (8008594 <MX_TIM1_Init+0x9c>)
 800857c:	f003 fb3e 	bl	800bbfc <HAL_TIMEx_MasterConfigSynchronization>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008586:	f000 f8dd 	bl	8008744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800858a:	bf00      	nop
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	2000136c 	.word	0x2000136c
 8008598:	40012c00 	.word	0x40012c00

0800859c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085a2:	4a12      	ldr	r2, [pc, #72]	; (80085ec <MX_USART1_UART_Init+0x50>)
 80085a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80085ae:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80085ba:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085bc:	2200      	movs	r2, #0
 80085be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80085c0:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085c2:	220c      	movs	r2, #12
 80085c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085c6:	4b08      	ldr	r3, [pc, #32]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80085d2:	4805      	ldr	r0, [pc, #20]	; (80085e8 <MX_USART1_UART_Init+0x4c>)
 80085d4:	f003 fb90 	bl	800bcf8 <HAL_UART_Init>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80085de:	f000 f8b1 	bl	8008744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80085e2:	bf00      	nop
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200013b4 	.word	0x200013b4
 80085ec:	40013800 	.word	0x40013800

080085f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f6:	f107 0310 	add.w	r3, r7, #16
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	605a      	str	r2, [r3, #4]
 8008600:	609a      	str	r2, [r3, #8]
 8008602:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008604:	4b4b      	ldr	r3, [pc, #300]	; (8008734 <MX_GPIO_Init+0x144>)
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	4a4a      	ldr	r2, [pc, #296]	; (8008734 <MX_GPIO_Init+0x144>)
 800860a:	f043 0310 	orr.w	r3, r3, #16
 800860e:	6193      	str	r3, [r2, #24]
 8008610:	4b48      	ldr	r3, [pc, #288]	; (8008734 <MX_GPIO_Init+0x144>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800861c:	4b45      	ldr	r3, [pc, #276]	; (8008734 <MX_GPIO_Init+0x144>)
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	4a44      	ldr	r2, [pc, #272]	; (8008734 <MX_GPIO_Init+0x144>)
 8008622:	f043 0320 	orr.w	r3, r3, #32
 8008626:	6193      	str	r3, [r2, #24]
 8008628:	4b42      	ldr	r3, [pc, #264]	; (8008734 <MX_GPIO_Init+0x144>)
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	f003 0320 	and.w	r3, r3, #32
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008634:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <MX_GPIO_Init+0x144>)
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	4a3e      	ldr	r2, [pc, #248]	; (8008734 <MX_GPIO_Init+0x144>)
 800863a:	f043 0304 	orr.w	r3, r3, #4
 800863e:	6193      	str	r3, [r2, #24]
 8008640:	4b3c      	ldr	r3, [pc, #240]	; (8008734 <MX_GPIO_Init+0x144>)
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800864c:	4b39      	ldr	r3, [pc, #228]	; (8008734 <MX_GPIO_Init+0x144>)
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	4a38      	ldr	r2, [pc, #224]	; (8008734 <MX_GPIO_Init+0x144>)
 8008652:	f043 0308 	orr.w	r3, r3, #8
 8008656:	6193      	str	r3, [r2, #24]
 8008658:	4b36      	ldr	r3, [pc, #216]	; (8008734 <MX_GPIO_Init+0x144>)
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008664:	2200      	movs	r2, #0
 8008666:	21f0      	movs	r1, #240	; 0xf0
 8008668:	4833      	ldr	r0, [pc, #204]	; (8008738 <MX_GPIO_Init+0x148>)
 800866a:	f001 f8b0 	bl	80097ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800866e:	2200      	movs	r2, #0
 8008670:	f241 0130 	movw	r1, #4144	; 0x1030
 8008674:	4831      	ldr	r0, [pc, #196]	; (800873c <MX_GPIO_Init+0x14c>)
 8008676:	f001 f8aa 	bl	80097ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800867a:	2200      	movs	r2, #0
 800867c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008680:	482f      	ldr	r0, [pc, #188]	; (8008740 <MX_GPIO_Init+0x150>)
 8008682:	f001 f8a4 	bl	80097ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008686:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800868a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	4619      	mov	r1, r3
 800869a:	4828      	ldr	r0, [pc, #160]	; (800873c <MX_GPIO_Init+0x14c>)
 800869c:	f000 fe20 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80086a0:	f248 130f 	movw	r3, #33039	; 0x810f
 80086a4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ae:	f107 0310 	add.w	r3, r7, #16
 80086b2:	4619      	mov	r1, r3
 80086b4:	4820      	ldr	r0, [pc, #128]	; (8008738 <MX_GPIO_Init+0x148>)
 80086b6:	f000 fe13 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80086ba:	23f0      	movs	r3, #240	; 0xf0
 80086bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086be:	2301      	movs	r3, #1
 80086c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086c6:	2302      	movs	r3, #2
 80086c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ca:	f107 0310 	add.w	r3, r7, #16
 80086ce:	4619      	mov	r1, r3
 80086d0:	4819      	ldr	r0, [pc, #100]	; (8008738 <MX_GPIO_Init+0x148>)
 80086d2:	f000 fe05 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80086d6:	f241 0330 	movw	r3, #4144	; 0x1030
 80086da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086dc:	2301      	movs	r3, #1
 80086de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086e4:	2302      	movs	r3, #2
 80086e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086e8:	f107 0310 	add.w	r3, r7, #16
 80086ec:	4619      	mov	r1, r3
 80086ee:	4813      	ldr	r0, [pc, #76]	; (800873c <MX_GPIO_Init+0x14c>)
 80086f0:	f000 fdf6 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80086f4:	f640 4307 	movw	r3, #3079	; 0xc07
 80086f8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086fa:	2301      	movs	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008702:	2302      	movs	r3, #2
 8008704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	4619      	mov	r1, r3
 800870c:	480c      	ldr	r0, [pc, #48]	; (8008740 <MX_GPIO_Init+0x150>)
 800870e:	f000 fde7 	bl	80092e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008712:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008720:	f107 0310 	add.w	r3, r7, #16
 8008724:	4619      	mov	r1, r3
 8008726:	4806      	ldr	r0, [pc, #24]	; (8008740 <MX_GPIO_Init+0x150>)
 8008728:	f000 fdda 	bl	80092e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800872c:	bf00      	nop
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40021000 	.word	0x40021000
 8008738:	40010800 	.word	0x40010800
 800873c:	40011000 	.word	0x40011000
 8008740:	40010c00 	.word	0x40010c00

08008744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008748:	bf00      	nop
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008756:	4b15      	ldr	r3, [pc, #84]	; (80087ac <HAL_MspInit+0x5c>)
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	4a14      	ldr	r2, [pc, #80]	; (80087ac <HAL_MspInit+0x5c>)
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	6193      	str	r3, [r2, #24]
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <HAL_MspInit+0x5c>)
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	60bb      	str	r3, [r7, #8]
 800876c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <HAL_MspInit+0x5c>)
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4a0e      	ldr	r2, [pc, #56]	; (80087ac <HAL_MspInit+0x5c>)
 8008774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008778:	61d3      	str	r3, [r2, #28]
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <HAL_MspInit+0x5c>)
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_MspInit+0x60>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <HAL_MspInit+0x60>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr
 80087ac:	40021000 	.word	0x40021000
 80087b0:	40010000 	.word	0x40010000

080087b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087bc:	f107 0310 	add.w	r3, r7, #16
 80087c0:	2200      	movs	r2, #0
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	605a      	str	r2, [r3, #4]
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a1c      	ldr	r2, [pc, #112]	; (8008840 <HAL_CAN_MspInit+0x8c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d131      	bne.n	8008838 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80087d4:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <HAL_CAN_MspInit+0x90>)
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	4a1a      	ldr	r2, [pc, #104]	; (8008844 <HAL_CAN_MspInit+0x90>)
 80087da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80087de:	61d3      	str	r3, [r2, #28]
 80087e0:	4b18      	ldr	r3, [pc, #96]	; (8008844 <HAL_CAN_MspInit+0x90>)
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ec:	4b15      	ldr	r3, [pc, #84]	; (8008844 <HAL_CAN_MspInit+0x90>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	4a14      	ldr	r2, [pc, #80]	; (8008844 <HAL_CAN_MspInit+0x90>)
 80087f2:	f043 0304 	orr.w	r3, r3, #4
 80087f6:	6193      	str	r3, [r2, #24]
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <HAL_CAN_MspInit+0x90>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880e:	2300      	movs	r3, #0
 8008810:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008812:	f107 0310 	add.w	r3, r7, #16
 8008816:	4619      	mov	r1, r3
 8008818:	480b      	ldr	r0, [pc, #44]	; (8008848 <HAL_CAN_MspInit+0x94>)
 800881a:	f000 fd61 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800881e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008824:	2302      	movs	r3, #2
 8008826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008828:	2303      	movs	r3, #3
 800882a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800882c:	f107 0310 	add.w	r3, r7, #16
 8008830:	4619      	mov	r1, r3
 8008832:	4805      	ldr	r0, [pc, #20]	; (8008848 <HAL_CAN_MspInit+0x94>)
 8008834:	f000 fd54 	bl	80092e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008838:	bf00      	nop
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40006400 	.word	0x40006400
 8008844:	40021000 	.word	0x40021000
 8008848:	40010800 	.word	0x40010800

0800884c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a15      	ldr	r2, [pc, #84]	; (80088bc <HAL_I2C_MspInit+0x70>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d123      	bne.n	80088b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800886c:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <HAL_I2C_MspInit+0x74>)
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	4a13      	ldr	r2, [pc, #76]	; (80088c0 <HAL_I2C_MspInit+0x74>)
 8008872:	f043 0308 	orr.w	r3, r3, #8
 8008876:	6193      	str	r3, [r2, #24]
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <HAL_I2C_MspInit+0x74>)
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008884:	23c0      	movs	r3, #192	; 0xc0
 8008886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008888:	2312      	movs	r3, #18
 800888a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800888c:	2303      	movs	r3, #3
 800888e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	4619      	mov	r1, r3
 8008896:	480b      	ldr	r0, [pc, #44]	; (80088c4 <HAL_I2C_MspInit+0x78>)
 8008898:	f000 fd22 	bl	80092e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800889c:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <HAL_I2C_MspInit+0x74>)
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	4a07      	ldr	r2, [pc, #28]	; (80088c0 <HAL_I2C_MspInit+0x74>)
 80088a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088a6:	61d3      	str	r3, [r2, #28]
 80088a8:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <HAL_I2C_MspInit+0x74>)
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088b0:	60bb      	str	r3, [r7, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80088b4:	bf00      	nop
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40005400 	.word	0x40005400
 80088c0:	40021000 	.word	0x40021000
 80088c4:	40010c00 	.word	0x40010c00

080088c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <HAL_I2C_MspDeInit+0x38>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d10d      	bne.n	80088f6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <HAL_I2C_MspDeInit+0x3c>)
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	4a09      	ldr	r2, [pc, #36]	; (8008904 <HAL_I2C_MspDeInit+0x3c>)
 80088e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088e4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80088e6:	2140      	movs	r1, #64	; 0x40
 80088e8:	4807      	ldr	r0, [pc, #28]	; (8008908 <HAL_I2C_MspDeInit+0x40>)
 80088ea:	f000 fe8d 	bl	8009608 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80088ee:	2180      	movs	r1, #128	; 0x80
 80088f0:	4805      	ldr	r0, [pc, #20]	; (8008908 <HAL_I2C_MspDeInit+0x40>)
 80088f2:	f000 fe89 	bl	8009608 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	40005400 	.word	0x40005400
 8008904:	40021000 	.word	0x40021000
 8008908:	40010c00 	.word	0x40010c00

0800890c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a0d      	ldr	r2, [pc, #52]	; (8008950 <HAL_TIM_Base_MspInit+0x44>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d113      	bne.n	8008946 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <HAL_TIM_Base_MspInit+0x48>)
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	4a0c      	ldr	r2, [pc, #48]	; (8008954 <HAL_TIM_Base_MspInit+0x48>)
 8008924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008928:	6193      	str	r3, [r2, #24]
 800892a:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <HAL_TIM_Base_MspInit+0x48>)
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008936:	2200      	movs	r2, #0
 8008938:	2100      	movs	r1, #0
 800893a:	2019      	movs	r0, #25
 800893c:	f000 fb57 	bl	8008fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008940:	2019      	movs	r0, #25
 8008942:	f000 fb70 	bl	8009026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40021000 	.word	0x40021000

08008958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	605a      	str	r2, [r3, #4]
 800896a:	609a      	str	r2, [r3, #8]
 800896c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a20      	ldr	r2, [pc, #128]	; (80089f4 <HAL_UART_MspInit+0x9c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d139      	bne.n	80089ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008978:	4b1f      	ldr	r3, [pc, #124]	; (80089f8 <HAL_UART_MspInit+0xa0>)
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	4a1e      	ldr	r2, [pc, #120]	; (80089f8 <HAL_UART_MspInit+0xa0>)
 800897e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008982:	6193      	str	r3, [r2, #24]
 8008984:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <HAL_UART_MspInit+0xa0>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008990:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <HAL_UART_MspInit+0xa0>)
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	4a18      	ldr	r2, [pc, #96]	; (80089f8 <HAL_UART_MspInit+0xa0>)
 8008996:	f043 0304 	orr.w	r3, r3, #4
 800899a:	6193      	str	r3, [r2, #24]
 800899c:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <HAL_UART_MspInit+0xa0>)
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80089a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ae:	2302      	movs	r3, #2
 80089b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80089b2:	2303      	movs	r3, #3
 80089b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089b6:	f107 0310 	add.w	r3, r7, #16
 80089ba:	4619      	mov	r1, r3
 80089bc:	480f      	ldr	r0, [pc, #60]	; (80089fc <HAL_UART_MspInit+0xa4>)
 80089be:	f000 fc8f 	bl	80092e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80089c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d0:	f107 0310 	add.w	r3, r7, #16
 80089d4:	4619      	mov	r1, r3
 80089d6:	4809      	ldr	r0, [pc, #36]	; (80089fc <HAL_UART_MspInit+0xa4>)
 80089d8:	f000 fc82 	bl	80092e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80089dc:	2200      	movs	r2, #0
 80089de:	2100      	movs	r1, #0
 80089e0:	2025      	movs	r0, #37	; 0x25
 80089e2:	f000 fb04 	bl	8008fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80089e6:	2025      	movs	r0, #37	; 0x25
 80089e8:	f000 fb1d 	bl	8009026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80089ec:	bf00      	nop
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	40013800 	.word	0x40013800
 80089f8:	40021000 	.word	0x40021000
 80089fc:	40010800 	.word	0x40010800

08008a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a04:	e7fe      	b.n	8008a04 <NMI_Handler+0x4>

08008a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a06:	b480      	push	{r7}
 8008a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a0a:	e7fe      	b.n	8008a0a <HardFault_Handler+0x4>

08008a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a10:	e7fe      	b.n	8008a10 <MemManage_Handler+0x4>

08008a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a12:	b480      	push	{r7}
 8008a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a16:	e7fe      	b.n	8008a16 <BusFault_Handler+0x4>

08008a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a1c:	e7fe      	b.n	8008a1c <UsageFault_Handler+0x4>

08008a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a22:	bf00      	nop
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr

08008a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a2e:	bf00      	nop
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a36:	b480      	push	{r7}
 8008a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a3a:	bf00      	nop
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr

08008a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a46:	f000 f8bf 	bl	8008bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a4a:	bf00      	nop
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008a54:	4802      	ldr	r0, [pc, #8]	; (8008a60 <TIM1_UP_IRQHandler+0x10>)
 8008a56:	f002 fdcd 	bl	800b5f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008a5a:	bf00      	nop
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	2000136c 	.word	0x2000136c

08008a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008a68:	4802      	ldr	r0, [pc, #8]	; (8008a74 <USART1_IRQHandler+0x10>)
 8008a6a:	f003 f9ef 	bl	800be4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008a6e:	bf00      	nop
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200013b4 	.word	0x200013b4

08008a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a80:	4a14      	ldr	r2, [pc, #80]	; (8008ad4 <_sbrk+0x5c>)
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <_sbrk+0x60>)
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <_sbrk+0x64>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a94:	4b11      	ldr	r3, [pc, #68]	; (8008adc <_sbrk+0x64>)
 8008a96:	4a12      	ldr	r2, [pc, #72]	; (8008ae0 <_sbrk+0x68>)
 8008a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <_sbrk+0x64>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d207      	bcs.n	8008ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008aa8:	f004 f86a 	bl	800cb80 <__errno>
 8008aac:	4603      	mov	r3, r0
 8008aae:	220c      	movs	r2, #12
 8008ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ab6:	e009      	b.n	8008acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008ab8:	4b08      	ldr	r3, [pc, #32]	; (8008adc <_sbrk+0x64>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008abe:	4b07      	ldr	r3, [pc, #28]	; (8008adc <_sbrk+0x64>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	4a05      	ldr	r2, [pc, #20]	; (8008adc <_sbrk+0x64>)
 8008ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008aca:	68fb      	ldr	r3, [r7, #12]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	2000c000 	.word	0x2000c000
 8008ad8:	00000400 	.word	0x00000400
 8008adc:	200013fc 	.word	0x200013fc
 8008ae0:	20001550 	.word	0x20001550

08008ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ae8:	bf00      	nop
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr

08008af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008af0:	480c      	ldr	r0, [pc, #48]	; (8008b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008af2:	490d      	ldr	r1, [pc, #52]	; (8008b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008af4:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008af8:	e002      	b.n	8008b00 <LoopCopyDataInit>

08008afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008afe:	3304      	adds	r3, #4

08008b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b04:	d3f9      	bcc.n	8008afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b06:	4a0a      	ldr	r2, [pc, #40]	; (8008b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b08:	4c0a      	ldr	r4, [pc, #40]	; (8008b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b0c:	e001      	b.n	8008b12 <LoopFillZerobss>

08008b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b10:	3204      	adds	r2, #4

08008b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b14:	d3fb      	bcc.n	8008b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b16:	f7ff ffe5 	bl	8008ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b1a:	f004 f837 	bl	800cb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008b1e:	f7ff fb9d 	bl	800825c <main>
  bx lr
 8008b22:	4770      	bx	lr
  ldr r0, =_sdata
 8008b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b28:	20000b9c 	.word	0x20000b9c
  ldr r2, =_sidata
 8008b2c:	0800d7dc 	.word	0x0800d7dc
  ldr r2, =_sbss
 8008b30:	20000b9c 	.word	0x20000b9c
  ldr r4, =_ebss
 8008b34:	2000154c 	.word	0x2000154c

08008b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008b38:	e7fe      	b.n	8008b38 <ADC1_2_IRQHandler>
	...

08008b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b40:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <HAL_Init+0x28>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a07      	ldr	r2, [pc, #28]	; (8008b64 <HAL_Init+0x28>)
 8008b46:	f043 0310 	orr.w	r3, r3, #16
 8008b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f000 fa43 	bl	8008fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b52:	200f      	movs	r0, #15
 8008b54:	f000 f808 	bl	8008b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b58:	f7ff fdfa 	bl	8008750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40022000 	.word	0x40022000

08008b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b70:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <HAL_InitTick+0x54>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <HAL_InitTick+0x58>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fa5b 	bl	8009042 <HAL_SYSTICK_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e00e      	b.n	8008bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b0f      	cmp	r3, #15
 8008b9a:	d80a      	bhi.n	8008bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba4:	f000 fa23 	bl	8008fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ba8:	4a06      	ldr	r2, [pc, #24]	; (8008bc4 <HAL_InitTick+0x5c>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e000      	b.n	8008bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000b40 	.word	0x20000b40
 8008bc0:	20000b48 	.word	0x20000b48
 8008bc4:	20000b44 	.word	0x20000b44

08008bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <HAL_IncTick+0x1c>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <HAL_IncTick+0x20>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	4a03      	ldr	r2, [pc, #12]	; (8008be8 <HAL_IncTick+0x20>)
 8008bda:	6013      	str	r3, [r2, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr
 8008be4:	20000b48 	.word	0x20000b48
 8008be8:	20001400 	.word	0x20001400

08008bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  return uwTick;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <HAL_GetTick+0x10>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr
 8008bfc:	20001400 	.word	0x20001400

08008c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c08:	f7ff fff0 	bl	8008bec <HAL_GetTick>
 8008c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c18:	d005      	beq.n	8008c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c1a:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <HAL_Delay+0x44>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c26:	bf00      	nop
 8008c28:	f7ff ffe0 	bl	8008bec <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d8f7      	bhi.n	8008c28 <HAL_Delay+0x28>
  {
  }
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000b48 	.word	0x20000b48

08008c48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e0ed      	b.n	8008e36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fda4 	bl	80087b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f042 0201 	orr.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c7c:	f7ff ffb6 	bl	8008bec <HAL_GetTick>
 8008c80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008c82:	e012      	b.n	8008caa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008c84:	f7ff ffb2 	bl	8008bec <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b0a      	cmp	r3, #10
 8008c90:	d90b      	bls.n	8008caa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2205      	movs	r2, #5
 8008ca2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e0c5      	b.n	8008e36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0e5      	beq.n	8008c84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0202 	bic.w	r2, r2, #2
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cc8:	f7ff ff90 	bl	8008bec <HAL_GetTick>
 8008ccc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008cce:	e012      	b.n	8008cf6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008cd0:	f7ff ff8c 	bl	8008bec <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b0a      	cmp	r3, #10
 8008cdc:	d90b      	bls.n	8008cf6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2205      	movs	r2, #5
 8008cee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e09f      	b.n	8008e36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e5      	bne.n	8008cd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7e1b      	ldrb	r3, [r3, #24]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d108      	bne.n	8008d1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	e007      	b.n	8008d2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	7e5b      	ldrb	r3, [r3, #25]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d108      	bne.n	8008d48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	e007      	b.n	8008d58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7e9b      	ldrb	r3, [r3, #26]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d108      	bne.n	8008d72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0220 	orr.w	r2, r2, #32
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	e007      	b.n	8008d82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0220 	bic.w	r2, r2, #32
 8008d80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7edb      	ldrb	r3, [r3, #27]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d108      	bne.n	8008d9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0210 	bic.w	r2, r2, #16
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e007      	b.n	8008dac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0210 	orr.w	r2, r2, #16
 8008daa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7f1b      	ldrb	r3, [r3, #28]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d108      	bne.n	8008dc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0208 	orr.w	r2, r2, #8
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e007      	b.n	8008dd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0208 	bic.w	r2, r2, #8
 8008dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7f5b      	ldrb	r3, [r3, #29]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d108      	bne.n	8008df0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0204 	orr.w	r2, r2, #4
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e007      	b.n	8008e00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0204 	bic.w	r2, r2, #4
 8008dfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	ea42 0103 	orr.w	r1, r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	1e5a      	subs	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <__NVIC_SetPriorityGrouping>:
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <__NVIC_SetPriorityGrouping+0x44>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e72:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <__NVIC_SetPriorityGrouping+0x44>)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	60d3      	str	r3, [r2, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	e000ed00 	.word	0xe000ed00

08008e88 <__NVIC_GetPriorityGrouping>:
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	f003 0307 	and.w	r3, r3, #7
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bc80      	pop	{r7}
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	e000ed00 	.word	0xe000ed00

08008ea4 <__NVIC_EnableIRQ>:
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	db0b      	blt.n	8008ece <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 021f 	and.w	r2, r3, #31
 8008ebc:	4906      	ldr	r1, [pc, #24]	; (8008ed8 <__NVIC_EnableIRQ+0x34>)
 8008ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8008eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr
 8008ed8:	e000e100 	.word	0xe000e100

08008edc <__NVIC_SetPriority>:
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	db0a      	blt.n	8008f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	490c      	ldr	r1, [pc, #48]	; (8008f28 <__NVIC_SetPriority+0x4c>)
 8008ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008efa:	0112      	lsls	r2, r2, #4
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	440b      	add	r3, r1
 8008f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f04:	e00a      	b.n	8008f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	4908      	ldr	r1, [pc, #32]	; (8008f2c <__NVIC_SetPriority+0x50>)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	3b04      	subs	r3, #4
 8008f14:	0112      	lsls	r2, r2, #4
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	440b      	add	r3, r1
 8008f1a:	761a      	strb	r2, [r3, #24]
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	e000e100 	.word	0xe000e100
 8008f2c:	e000ed00 	.word	0xe000ed00

08008f30 <NVIC_EncodePriority>:
{
 8008f30:	b480      	push	{r7}
 8008f32:	b089      	sub	sp, #36	; 0x24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f1c3 0307 	rsb	r3, r3, #7
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	bf28      	it	cs
 8008f4e:	2304      	movcs	r3, #4
 8008f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	3304      	adds	r3, #4
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d902      	bls.n	8008f60 <NVIC_EncodePriority+0x30>
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	3b03      	subs	r3, #3
 8008f5e:	e000      	b.n	8008f62 <NVIC_EncodePriority+0x32>
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6e:	43da      	mvns	r2, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	401a      	ands	r2, r3
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f82:	43d9      	mvns	r1, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f88:	4313      	orrs	r3, r2
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3724      	adds	r7, #36	; 0x24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bc80      	pop	{r7}
 8008f92:	4770      	bx	lr

08008f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fa4:	d301      	bcc.n	8008faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e00f      	b.n	8008fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008faa:	4a0a      	ldr	r2, [pc, #40]	; (8008fd4 <SysTick_Config+0x40>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008fb2:	210f      	movs	r1, #15
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb8:	f7ff ff90 	bl	8008edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <SysTick_Config+0x40>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008fc2:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <SysTick_Config+0x40>)
 8008fc4:	2207      	movs	r2, #7
 8008fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	e000e010 	.word	0xe000e010

08008fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff ff2d 	bl	8008e40 <__NVIC_SetPriorityGrouping>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009000:	f7ff ff42 	bl	8008e88 <__NVIC_GetPriorityGrouping>
 8009004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	6978      	ldr	r0, [r7, #20]
 800900c:	f7ff ff90 	bl	8008f30 <NVIC_EncodePriority>
 8009010:	4602      	mov	r2, r0
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff ff5f 	bl	8008edc <__NVIC_SetPriority>
}
 800901e:	bf00      	nop
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	4603      	mov	r3, r0
 800902e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff ff35 	bl	8008ea4 <__NVIC_EnableIRQ>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ffa2 	bl	8008f94 <SysTick_Config>
 8009050:	4603      	mov	r3, r0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b02      	cmp	r3, #2
 8009070:	d008      	beq.n	8009084 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2204      	movs	r2, #4
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e020      	b.n	80090c6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 020e 	bic.w	r2, r2, #14
 8009092:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0201 	bic.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ac:	2101      	movs	r1, #1
 80090ae:	fa01 f202 	lsl.w	r2, r1, r2
 80090b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d005      	beq.n	80090f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2204      	movs	r2, #4
 80090ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	73fb      	strb	r3, [r7, #15]
 80090f2:	e0d6      	b.n	80092a2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 020e 	bic.w	r2, r2, #14
 8009102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0201 	bic.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	4b64      	ldr	r3, [pc, #400]	; (80092ac <HAL_DMA_Abort_IT+0x1dc>)
 800911c:	429a      	cmp	r2, r3
 800911e:	d958      	bls.n	80091d2 <HAL_DMA_Abort_IT+0x102>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a62      	ldr	r2, [pc, #392]	; (80092b0 <HAL_DMA_Abort_IT+0x1e0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d04f      	beq.n	80091ca <HAL_DMA_Abort_IT+0xfa>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a61      	ldr	r2, [pc, #388]	; (80092b4 <HAL_DMA_Abort_IT+0x1e4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d048      	beq.n	80091c6 <HAL_DMA_Abort_IT+0xf6>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a5f      	ldr	r2, [pc, #380]	; (80092b8 <HAL_DMA_Abort_IT+0x1e8>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d040      	beq.n	80091c0 <HAL_DMA_Abort_IT+0xf0>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a5e      	ldr	r2, [pc, #376]	; (80092bc <HAL_DMA_Abort_IT+0x1ec>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d038      	beq.n	80091ba <HAL_DMA_Abort_IT+0xea>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a5c      	ldr	r2, [pc, #368]	; (80092c0 <HAL_DMA_Abort_IT+0x1f0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d030      	beq.n	80091b4 <HAL_DMA_Abort_IT+0xe4>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a5b      	ldr	r2, [pc, #364]	; (80092c4 <HAL_DMA_Abort_IT+0x1f4>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d028      	beq.n	80091ae <HAL_DMA_Abort_IT+0xde>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a52      	ldr	r2, [pc, #328]	; (80092ac <HAL_DMA_Abort_IT+0x1dc>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d020      	beq.n	80091a8 <HAL_DMA_Abort_IT+0xd8>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a57      	ldr	r2, [pc, #348]	; (80092c8 <HAL_DMA_Abort_IT+0x1f8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d019      	beq.n	80091a4 <HAL_DMA_Abort_IT+0xd4>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a55      	ldr	r2, [pc, #340]	; (80092cc <HAL_DMA_Abort_IT+0x1fc>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d012      	beq.n	80091a0 <HAL_DMA_Abort_IT+0xd0>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a54      	ldr	r2, [pc, #336]	; (80092d0 <HAL_DMA_Abort_IT+0x200>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00a      	beq.n	800919a <HAL_DMA_Abort_IT+0xca>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a52      	ldr	r2, [pc, #328]	; (80092d4 <HAL_DMA_Abort_IT+0x204>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d102      	bne.n	8009194 <HAL_DMA_Abort_IT+0xc4>
 800918e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009192:	e01b      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 8009194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009198:	e018      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 800919a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800919e:	e015      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091a0:	2310      	movs	r3, #16
 80091a2:	e013      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e011      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ac:	e00e      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80091b2:	e00b      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091b8:	e008      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091be:	e005      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091c4:	e002      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091c6:	2310      	movs	r3, #16
 80091c8:	e000      	b.n	80091cc <HAL_DMA_Abort_IT+0xfc>
 80091ca:	2301      	movs	r3, #1
 80091cc:	4a42      	ldr	r2, [pc, #264]	; (80092d8 <HAL_DMA_Abort_IT+0x208>)
 80091ce:	6053      	str	r3, [r2, #4]
 80091d0:	e057      	b.n	8009282 <HAL_DMA_Abort_IT+0x1b2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a36      	ldr	r2, [pc, #216]	; (80092b0 <HAL_DMA_Abort_IT+0x1e0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d04f      	beq.n	800927c <HAL_DMA_Abort_IT+0x1ac>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a34      	ldr	r2, [pc, #208]	; (80092b4 <HAL_DMA_Abort_IT+0x1e4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d048      	beq.n	8009278 <HAL_DMA_Abort_IT+0x1a8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a33      	ldr	r2, [pc, #204]	; (80092b8 <HAL_DMA_Abort_IT+0x1e8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d040      	beq.n	8009272 <HAL_DMA_Abort_IT+0x1a2>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a31      	ldr	r2, [pc, #196]	; (80092bc <HAL_DMA_Abort_IT+0x1ec>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d038      	beq.n	800926c <HAL_DMA_Abort_IT+0x19c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a30      	ldr	r2, [pc, #192]	; (80092c0 <HAL_DMA_Abort_IT+0x1f0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d030      	beq.n	8009266 <HAL_DMA_Abort_IT+0x196>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a2e      	ldr	r2, [pc, #184]	; (80092c4 <HAL_DMA_Abort_IT+0x1f4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d028      	beq.n	8009260 <HAL_DMA_Abort_IT+0x190>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a26      	ldr	r2, [pc, #152]	; (80092ac <HAL_DMA_Abort_IT+0x1dc>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d020      	beq.n	800925a <HAL_DMA_Abort_IT+0x18a>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a2a      	ldr	r2, [pc, #168]	; (80092c8 <HAL_DMA_Abort_IT+0x1f8>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d019      	beq.n	8009256 <HAL_DMA_Abort_IT+0x186>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a29      	ldr	r2, [pc, #164]	; (80092cc <HAL_DMA_Abort_IT+0x1fc>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d012      	beq.n	8009252 <HAL_DMA_Abort_IT+0x182>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a27      	ldr	r2, [pc, #156]	; (80092d0 <HAL_DMA_Abort_IT+0x200>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00a      	beq.n	800924c <HAL_DMA_Abort_IT+0x17c>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a26      	ldr	r2, [pc, #152]	; (80092d4 <HAL_DMA_Abort_IT+0x204>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d102      	bne.n	8009246 <HAL_DMA_Abort_IT+0x176>
 8009240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009244:	e01b      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800924a:	e018      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 800924c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009250:	e015      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009252:	2310      	movs	r3, #16
 8009254:	e013      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009256:	2301      	movs	r3, #1
 8009258:	e011      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 800925a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800925e:	e00e      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009264:	e00b      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800926a:	e008      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 800926c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009270:	e005      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009276:	e002      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 8009278:	2310      	movs	r3, #16
 800927a:	e000      	b.n	800927e <HAL_DMA_Abort_IT+0x1ae>
 800927c:	2301      	movs	r3, #1
 800927e:	4a17      	ldr	r2, [pc, #92]	; (80092dc <HAL_DMA_Abort_IT+0x20c>)
 8009280:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
    } 
  }
  return status;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	40020080 	.word	0x40020080
 80092b0:	40020008 	.word	0x40020008
 80092b4:	4002001c 	.word	0x4002001c
 80092b8:	40020030 	.word	0x40020030
 80092bc:	40020044 	.word	0x40020044
 80092c0:	40020058 	.word	0x40020058
 80092c4:	4002006c 	.word	0x4002006c
 80092c8:	40020408 	.word	0x40020408
 80092cc:	4002041c 	.word	0x4002041c
 80092d0:	40020430 	.word	0x40020430
 80092d4:	40020444 	.word	0x40020444
 80092d8:	40020400 	.word	0x40020400
 80092dc:	40020000 	.word	0x40020000

080092e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b08b      	sub	sp, #44	; 0x2c
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80092ea:	2300      	movs	r3, #0
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80092ee:	2300      	movs	r3, #0
 80092f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092f2:	e179      	b.n	80095e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80092f4:	2201      	movs	r2, #1
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	fa02 f303 	lsl.w	r3, r2, r3
 80092fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	4013      	ands	r3, r2
 8009306:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	429a      	cmp	r2, r3
 800930e:	f040 8168 	bne.w	80095e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	4a96      	ldr	r2, [pc, #600]	; (8009570 <HAL_GPIO_Init+0x290>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d05e      	beq.n	80093da <HAL_GPIO_Init+0xfa>
 800931c:	4a94      	ldr	r2, [pc, #592]	; (8009570 <HAL_GPIO_Init+0x290>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d875      	bhi.n	800940e <HAL_GPIO_Init+0x12e>
 8009322:	4a94      	ldr	r2, [pc, #592]	; (8009574 <HAL_GPIO_Init+0x294>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d058      	beq.n	80093da <HAL_GPIO_Init+0xfa>
 8009328:	4a92      	ldr	r2, [pc, #584]	; (8009574 <HAL_GPIO_Init+0x294>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d86f      	bhi.n	800940e <HAL_GPIO_Init+0x12e>
 800932e:	4a92      	ldr	r2, [pc, #584]	; (8009578 <HAL_GPIO_Init+0x298>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d052      	beq.n	80093da <HAL_GPIO_Init+0xfa>
 8009334:	4a90      	ldr	r2, [pc, #576]	; (8009578 <HAL_GPIO_Init+0x298>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d869      	bhi.n	800940e <HAL_GPIO_Init+0x12e>
 800933a:	4a90      	ldr	r2, [pc, #576]	; (800957c <HAL_GPIO_Init+0x29c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d04c      	beq.n	80093da <HAL_GPIO_Init+0xfa>
 8009340:	4a8e      	ldr	r2, [pc, #568]	; (800957c <HAL_GPIO_Init+0x29c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d863      	bhi.n	800940e <HAL_GPIO_Init+0x12e>
 8009346:	4a8e      	ldr	r2, [pc, #568]	; (8009580 <HAL_GPIO_Init+0x2a0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d046      	beq.n	80093da <HAL_GPIO_Init+0xfa>
 800934c:	4a8c      	ldr	r2, [pc, #560]	; (8009580 <HAL_GPIO_Init+0x2a0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d85d      	bhi.n	800940e <HAL_GPIO_Init+0x12e>
 8009352:	2b12      	cmp	r3, #18
 8009354:	d82a      	bhi.n	80093ac <HAL_GPIO_Init+0xcc>
 8009356:	2b12      	cmp	r3, #18
 8009358:	d859      	bhi.n	800940e <HAL_GPIO_Init+0x12e>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_GPIO_Init+0x80>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	080093db 	.word	0x080093db
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093c7 	.word	0x080093c7
 800936c:	08009409 	.word	0x08009409
 8009370:	0800940f 	.word	0x0800940f
 8009374:	0800940f 	.word	0x0800940f
 8009378:	0800940f 	.word	0x0800940f
 800937c:	0800940f 	.word	0x0800940f
 8009380:	0800940f 	.word	0x0800940f
 8009384:	0800940f 	.word	0x0800940f
 8009388:	0800940f 	.word	0x0800940f
 800938c:	0800940f 	.word	0x0800940f
 8009390:	0800940f 	.word	0x0800940f
 8009394:	0800940f 	.word	0x0800940f
 8009398:	0800940f 	.word	0x0800940f
 800939c:	0800940f 	.word	0x0800940f
 80093a0:	0800940f 	.word	0x0800940f
 80093a4:	080093bd 	.word	0x080093bd
 80093a8:	080093d1 	.word	0x080093d1
 80093ac:	4a75      	ldr	r2, [pc, #468]	; (8009584 <HAL_GPIO_Init+0x2a4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80093b2:	e02c      	b.n	800940e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	623b      	str	r3, [r7, #32]
          break;
 80093ba:	e029      	b.n	8009410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	623b      	str	r3, [r7, #32]
          break;
 80093c4:	e024      	b.n	8009410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	3308      	adds	r3, #8
 80093cc:	623b      	str	r3, [r7, #32]
          break;
 80093ce:	e01f      	b.n	8009410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	330c      	adds	r3, #12
 80093d6:	623b      	str	r3, [r7, #32]
          break;
 80093d8:	e01a      	b.n	8009410 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80093e2:	2304      	movs	r3, #4
 80093e4:	623b      	str	r3, [r7, #32]
          break;
 80093e6:	e013      	b.n	8009410 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d105      	bne.n	80093fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80093f0:	2308      	movs	r3, #8
 80093f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	611a      	str	r2, [r3, #16]
          break;
 80093fa:	e009      	b.n	8009410 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80093fc:	2308      	movs	r3, #8
 80093fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	615a      	str	r2, [r3, #20]
          break;
 8009406:	e003      	b.n	8009410 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009408:	2300      	movs	r3, #0
 800940a:	623b      	str	r3, [r7, #32]
          break;
 800940c:	e000      	b.n	8009410 <HAL_GPIO_Init+0x130>
          break;
 800940e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2bff      	cmp	r3, #255	; 0xff
 8009414:	d801      	bhi.n	800941a <HAL_GPIO_Init+0x13a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	e001      	b.n	800941e <HAL_GPIO_Init+0x13e>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3304      	adds	r3, #4
 800941e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	2bff      	cmp	r3, #255	; 0xff
 8009424:	d802      	bhi.n	800942c <HAL_GPIO_Init+0x14c>
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	e002      	b.n	8009432 <HAL_GPIO_Init+0x152>
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	3b08      	subs	r3, #8
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	210f      	movs	r1, #15
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	fa01 f303 	lsl.w	r3, r1, r3
 8009440:	43db      	mvns	r3, r3
 8009442:	401a      	ands	r2, r3
 8009444:	6a39      	ldr	r1, [r7, #32]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	fa01 f303 	lsl.w	r3, r1, r3
 800944c:	431a      	orrs	r2, r3
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 80c1 	beq.w	80095e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009460:	4b49      	ldr	r3, [pc, #292]	; (8009588 <HAL_GPIO_Init+0x2a8>)
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	4a48      	ldr	r2, [pc, #288]	; (8009588 <HAL_GPIO_Init+0x2a8>)
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	6193      	str	r3, [r2, #24]
 800946c:	4b46      	ldr	r3, [pc, #280]	; (8009588 <HAL_GPIO_Init+0x2a8>)
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	60bb      	str	r3, [r7, #8]
 8009476:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009478:	4a44      	ldr	r2, [pc, #272]	; (800958c <HAL_GPIO_Init+0x2ac>)
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	089b      	lsrs	r3, r3, #2
 800947e:	3302      	adds	r3, #2
 8009480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009484:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	220f      	movs	r2, #15
 8009490:	fa02 f303 	lsl.w	r3, r2, r3
 8009494:	43db      	mvns	r3, r3
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4013      	ands	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a3c      	ldr	r2, [pc, #240]	; (8009590 <HAL_GPIO_Init+0x2b0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d01f      	beq.n	80094e4 <HAL_GPIO_Init+0x204>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a3b      	ldr	r2, [pc, #236]	; (8009594 <HAL_GPIO_Init+0x2b4>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d019      	beq.n	80094e0 <HAL_GPIO_Init+0x200>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a3a      	ldr	r2, [pc, #232]	; (8009598 <HAL_GPIO_Init+0x2b8>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d013      	beq.n	80094dc <HAL_GPIO_Init+0x1fc>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a39      	ldr	r2, [pc, #228]	; (800959c <HAL_GPIO_Init+0x2bc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00d      	beq.n	80094d8 <HAL_GPIO_Init+0x1f8>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a38      	ldr	r2, [pc, #224]	; (80095a0 <HAL_GPIO_Init+0x2c0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d007      	beq.n	80094d4 <HAL_GPIO_Init+0x1f4>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a37      	ldr	r2, [pc, #220]	; (80095a4 <HAL_GPIO_Init+0x2c4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d101      	bne.n	80094d0 <HAL_GPIO_Init+0x1f0>
 80094cc:	2305      	movs	r3, #5
 80094ce:	e00a      	b.n	80094e6 <HAL_GPIO_Init+0x206>
 80094d0:	2306      	movs	r3, #6
 80094d2:	e008      	b.n	80094e6 <HAL_GPIO_Init+0x206>
 80094d4:	2304      	movs	r3, #4
 80094d6:	e006      	b.n	80094e6 <HAL_GPIO_Init+0x206>
 80094d8:	2303      	movs	r3, #3
 80094da:	e004      	b.n	80094e6 <HAL_GPIO_Init+0x206>
 80094dc:	2302      	movs	r3, #2
 80094de:	e002      	b.n	80094e6 <HAL_GPIO_Init+0x206>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <HAL_GPIO_Init+0x206>
 80094e4:	2300      	movs	r3, #0
 80094e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e8:	f002 0203 	and.w	r2, r2, #3
 80094ec:	0092      	lsls	r2, r2, #2
 80094ee:	4093      	lsls	r3, r2
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80094f6:	4925      	ldr	r1, [pc, #148]	; (800958c <HAL_GPIO_Init+0x2ac>)
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	089b      	lsrs	r3, r3, #2
 80094fc:	3302      	adds	r3, #2
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d006      	beq.n	800951e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009510:	4b25      	ldr	r3, [pc, #148]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	4924      	ldr	r1, [pc, #144]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	4313      	orrs	r3, r2
 800951a:	608b      	str	r3, [r1, #8]
 800951c:	e006      	b.n	800952c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800951e:	4b22      	ldr	r3, [pc, #136]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	43db      	mvns	r3, r3
 8009526:	4920      	ldr	r1, [pc, #128]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009528:	4013      	ands	r3, r2
 800952a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d006      	beq.n	8009546 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009538:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	491a      	ldr	r1, [pc, #104]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	4313      	orrs	r3, r2
 8009542:	60cb      	str	r3, [r1, #12]
 8009544:	e006      	b.n	8009554 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009546:	4b18      	ldr	r3, [pc, #96]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	43db      	mvns	r3, r3
 800954e:	4916      	ldr	r1, [pc, #88]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009550:	4013      	ands	r3, r2
 8009552:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d025      	beq.n	80095ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009560:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	4910      	ldr	r1, [pc, #64]	; (80095a8 <HAL_GPIO_Init+0x2c8>)
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	4313      	orrs	r3, r2
 800956a:	604b      	str	r3, [r1, #4]
 800956c:	e025      	b.n	80095ba <HAL_GPIO_Init+0x2da>
 800956e:	bf00      	nop
 8009570:	10320000 	.word	0x10320000
 8009574:	10310000 	.word	0x10310000
 8009578:	10220000 	.word	0x10220000
 800957c:	10210000 	.word	0x10210000
 8009580:	10120000 	.word	0x10120000
 8009584:	10110000 	.word	0x10110000
 8009588:	40021000 	.word	0x40021000
 800958c:	40010000 	.word	0x40010000
 8009590:	40010800 	.word	0x40010800
 8009594:	40010c00 	.word	0x40010c00
 8009598:	40011000 	.word	0x40011000
 800959c:	40011400 	.word	0x40011400
 80095a0:	40011800 	.word	0x40011800
 80095a4:	40011c00 	.word	0x40011c00
 80095a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80095ac:	4b15      	ldr	r3, [pc, #84]	; (8009604 <HAL_GPIO_Init+0x324>)
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	43db      	mvns	r3, r3
 80095b4:	4913      	ldr	r1, [pc, #76]	; (8009604 <HAL_GPIO_Init+0x324>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d006      	beq.n	80095d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <HAL_GPIO_Init+0x324>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	490e      	ldr	r1, [pc, #56]	; (8009604 <HAL_GPIO_Init+0x324>)
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	600b      	str	r3, [r1, #0]
 80095d2:	e006      	b.n	80095e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80095d4:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <HAL_GPIO_Init+0x324>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	43db      	mvns	r3, r3
 80095dc:	4909      	ldr	r1, [pc, #36]	; (8009604 <HAL_GPIO_Init+0x324>)
 80095de:	4013      	ands	r3, r2
 80095e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	3301      	adds	r3, #1
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	fa22 f303 	lsr.w	r3, r2, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f47f ae7e 	bne.w	80092f4 <HAL_GPIO_Init+0x14>
  }
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	372c      	adds	r7, #44	; 0x2c
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr
 8009604:	40010400 	.word	0x40010400

08009608 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009608:	b480      	push	{r7}
 800960a:	b089      	sub	sp, #36	; 0x24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009612:	2300      	movs	r3, #0
 8009614:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009616:	e0a6      	b.n	8009766 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009618:	2201      	movs	r2, #1
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	fa02 f303 	lsl.w	r3, r2, r3
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	4013      	ands	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8099 	beq.w	8009760 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800962e:	4a54      	ldr	r2, [pc, #336]	; (8009780 <HAL_GPIO_DeInit+0x178>)
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	089b      	lsrs	r3, r3, #2
 8009634:	3302      	adds	r3, #2
 8009636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800963a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	220f      	movs	r2, #15
 8009646:	fa02 f303 	lsl.w	r3, r2, r3
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4013      	ands	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a4c      	ldr	r2, [pc, #304]	; (8009784 <HAL_GPIO_DeInit+0x17c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d01f      	beq.n	8009698 <HAL_GPIO_DeInit+0x90>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a4b      	ldr	r2, [pc, #300]	; (8009788 <HAL_GPIO_DeInit+0x180>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d019      	beq.n	8009694 <HAL_GPIO_DeInit+0x8c>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a4a      	ldr	r2, [pc, #296]	; (800978c <HAL_GPIO_DeInit+0x184>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d013      	beq.n	8009690 <HAL_GPIO_DeInit+0x88>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a49      	ldr	r2, [pc, #292]	; (8009790 <HAL_GPIO_DeInit+0x188>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00d      	beq.n	800968c <HAL_GPIO_DeInit+0x84>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a48      	ldr	r2, [pc, #288]	; (8009794 <HAL_GPIO_DeInit+0x18c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d007      	beq.n	8009688 <HAL_GPIO_DeInit+0x80>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a47      	ldr	r2, [pc, #284]	; (8009798 <HAL_GPIO_DeInit+0x190>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d101      	bne.n	8009684 <HAL_GPIO_DeInit+0x7c>
 8009680:	2305      	movs	r3, #5
 8009682:	e00a      	b.n	800969a <HAL_GPIO_DeInit+0x92>
 8009684:	2306      	movs	r3, #6
 8009686:	e008      	b.n	800969a <HAL_GPIO_DeInit+0x92>
 8009688:	2304      	movs	r3, #4
 800968a:	e006      	b.n	800969a <HAL_GPIO_DeInit+0x92>
 800968c:	2303      	movs	r3, #3
 800968e:	e004      	b.n	800969a <HAL_GPIO_DeInit+0x92>
 8009690:	2302      	movs	r3, #2
 8009692:	e002      	b.n	800969a <HAL_GPIO_DeInit+0x92>
 8009694:	2301      	movs	r3, #1
 8009696:	e000      	b.n	800969a <HAL_GPIO_DeInit+0x92>
 8009698:	2300      	movs	r3, #0
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	f002 0203 	and.w	r2, r2, #3
 80096a0:	0092      	lsls	r2, r2, #2
 80096a2:	4093      	lsls	r3, r2
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d132      	bne.n	8009710 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80096aa:	4b3c      	ldr	r3, [pc, #240]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	43db      	mvns	r3, r3
 80096b2:	493a      	ldr	r1, [pc, #232]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80096b8:	4b38      	ldr	r3, [pc, #224]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	43db      	mvns	r3, r3
 80096c0:	4936      	ldr	r1, [pc, #216]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80096c6:	4b35      	ldr	r3, [pc, #212]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	43db      	mvns	r3, r3
 80096ce:	4933      	ldr	r1, [pc, #204]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80096d4:	4b31      	ldr	r3, [pc, #196]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	43db      	mvns	r3, r3
 80096dc:	492f      	ldr	r1, [pc, #188]	; (800979c <HAL_GPIO_DeInit+0x194>)
 80096de:	4013      	ands	r3, r2
 80096e0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	f003 0303 	and.w	r3, r3, #3
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	220f      	movs	r2, #15
 80096ec:	fa02 f303 	lsl.w	r3, r2, r3
 80096f0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80096f2:	4a23      	ldr	r2, [pc, #140]	; (8009780 <HAL_GPIO_DeInit+0x178>)
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	089b      	lsrs	r3, r3, #2
 80096f8:	3302      	adds	r3, #2
 80096fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	43da      	mvns	r2, r3
 8009702:	481f      	ldr	r0, [pc, #124]	; (8009780 <HAL_GPIO_DeInit+0x178>)
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	089b      	lsrs	r3, r3, #2
 8009708:	400a      	ands	r2, r1
 800970a:	3302      	adds	r3, #2
 800970c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	2bff      	cmp	r3, #255	; 0xff
 8009714:	d801      	bhi.n	800971a <HAL_GPIO_DeInit+0x112>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	e001      	b.n	800971e <HAL_GPIO_DeInit+0x116>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3304      	adds	r3, #4
 800971e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	2bff      	cmp	r3, #255	; 0xff
 8009724:	d802      	bhi.n	800972c <HAL_GPIO_DeInit+0x124>
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	e002      	b.n	8009732 <HAL_GPIO_DeInit+0x12a>
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	3b08      	subs	r3, #8
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	210f      	movs	r1, #15
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	fa01 f303 	lsl.w	r3, r1, r3
 8009740:	43db      	mvns	r3, r3
 8009742:	401a      	ands	r2, r3
 8009744:	2104      	movs	r1, #4
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	fa01 f303 	lsl.w	r3, r1, r3
 800974c:	431a      	orrs	r2, r3
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	43db      	mvns	r3, r3
 800975a:	401a      	ands	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	3301      	adds	r3, #1
 8009764:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	fa22 f303 	lsr.w	r3, r2, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	f47f af52 	bne.w	8009618 <HAL_GPIO_DeInit+0x10>
  }
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	3724      	adds	r7, #36	; 0x24
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr
 8009780:	40010000 	.word	0x40010000
 8009784:	40010800 	.word	0x40010800
 8009788:	40010c00 	.word	0x40010c00
 800978c:	40011000 	.word	0x40011000
 8009790:	40011400 	.word	0x40011400
 8009794:	40011800 	.word	0x40011800
 8009798:	40011c00 	.word	0x40011c00
 800979c:	40010400 	.word	0x40010400

080097a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	887b      	ldrh	r3, [r7, #2]
 80097b2:	4013      	ands	r3, r2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80097b8:	2301      	movs	r3, #1
 80097ba:	73fb      	strb	r3, [r7, #15]
 80097bc:	e001      	b.n	80097c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr

080097ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	460b      	mov	r3, r1
 80097d8:	807b      	strh	r3, [r7, #2]
 80097da:	4613      	mov	r3, r2
 80097dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80097de:	787b      	ldrb	r3, [r7, #1]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80097e4:	887a      	ldrh	r2, [r7, #2]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80097ea:	e003      	b.n	80097f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	041a      	lsls	r2, r3, #16
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	611a      	str	r2, [r3, #16]
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bc80      	pop	{r7}
 80097fc:	4770      	bx	lr

080097fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009810:	887a      	ldrh	r2, [r7, #2]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4013      	ands	r3, r2
 8009816:	041a      	lsls	r2, r3, #16
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	43d9      	mvns	r1, r3
 800981c:	887b      	ldrh	r3, [r7, #2]
 800981e:	400b      	ands	r3, r1
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	611a      	str	r2, [r3, #16]
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr

08009830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e12b      	b.n	8009a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7fe fff8 	bl	800884c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2224      	movs	r2, #36	; 0x24
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0201 	bic.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009894:	f001 fdb8 	bl	800b408 <HAL_RCC_GetPCLK1Freq>
 8009898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4a81      	ldr	r2, [pc, #516]	; (8009aa4 <HAL_I2C_Init+0x274>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d807      	bhi.n	80098b4 <HAL_I2C_Init+0x84>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a80      	ldr	r2, [pc, #512]	; (8009aa8 <HAL_I2C_Init+0x278>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	bf94      	ite	ls
 80098ac:	2301      	movls	r3, #1
 80098ae:	2300      	movhi	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	e006      	b.n	80098c2 <HAL_I2C_Init+0x92>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4a7d      	ldr	r2, [pc, #500]	; (8009aac <HAL_I2C_Init+0x27c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bf94      	ite	ls
 80098bc:	2301      	movls	r3, #1
 80098be:	2300      	movhi	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e0e7      	b.n	8009a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4a78      	ldr	r2, [pc, #480]	; (8009ab0 <HAL_I2C_Init+0x280>)
 80098ce:	fba2 2303 	umull	r2, r3, r2, r3
 80098d2:	0c9b      	lsrs	r3, r3, #18
 80098d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a6a      	ldr	r2, [pc, #424]	; (8009aa4 <HAL_I2C_Init+0x274>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d802      	bhi.n	8009904 <HAL_I2C_Init+0xd4>
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	3301      	adds	r3, #1
 8009902:	e009      	b.n	8009918 <HAL_I2C_Init+0xe8>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	4a69      	ldr	r2, [pc, #420]	; (8009ab4 <HAL_I2C_Init+0x284>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	099b      	lsrs	r3, r3, #6
 8009916:	3301      	adds	r3, #1
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	6812      	ldr	r2, [r2, #0]
 800991c:	430b      	orrs	r3, r1
 800991e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800992a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	495c      	ldr	r1, [pc, #368]	; (8009aa4 <HAL_I2C_Init+0x274>)
 8009934:	428b      	cmp	r3, r1
 8009936:	d819      	bhi.n	800996c <HAL_I2C_Init+0x13c>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	1e59      	subs	r1, r3, #1
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	fbb1 f3f3 	udiv	r3, r1, r3
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800994c:	400b      	ands	r3, r1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <HAL_I2C_Init+0x138>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1e59      	subs	r1, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009960:	3301      	adds	r3, #1
 8009962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009966:	e051      	b.n	8009a0c <HAL_I2C_Init+0x1dc>
 8009968:	2304      	movs	r3, #4
 800996a:	e04f      	b.n	8009a0c <HAL_I2C_Init+0x1dc>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d111      	bne.n	8009998 <HAL_I2C_Init+0x168>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	1e58      	subs	r0, r3, #1
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6859      	ldr	r1, [r3, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	440b      	add	r3, r1
 8009982:	fbb0 f3f3 	udiv	r3, r0, r3
 8009986:	3301      	adds	r3, #1
 8009988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800998c:	2b00      	cmp	r3, #0
 800998e:	bf0c      	ite	eq
 8009990:	2301      	moveq	r3, #1
 8009992:	2300      	movne	r3, #0
 8009994:	b2db      	uxtb	r3, r3
 8009996:	e012      	b.n	80099be <HAL_I2C_Init+0x18e>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1e58      	subs	r0, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6859      	ldr	r1, [r3, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	0099      	lsls	r1, r3, #2
 80099a8:	440b      	add	r3, r1
 80099aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ae:	3301      	adds	r3, #1
 80099b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bf0c      	ite	eq
 80099b8:	2301      	moveq	r3, #1
 80099ba:	2300      	movne	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_I2C_Init+0x196>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e022      	b.n	8009a0c <HAL_I2C_Init+0x1dc>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10e      	bne.n	80099ec <HAL_I2C_Init+0x1bc>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1e58      	subs	r0, r3, #1
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6859      	ldr	r1, [r3, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	440b      	add	r3, r1
 80099dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80099e0:	3301      	adds	r3, #1
 80099e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	e00f      	b.n	8009a0c <HAL_I2C_Init+0x1dc>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	1e58      	subs	r0, r3, #1
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6859      	ldr	r1, [r3, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	440b      	add	r3, r1
 80099fa:	0099      	lsls	r1, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a02:	3301      	adds	r3, #1
 8009a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	6809      	ldr	r1, [r1, #0]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69da      	ldr	r2, [r3, #28]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6911      	ldr	r1, [r2, #16]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	68d2      	ldr	r2, [r2, #12]
 8009a46:	4311      	orrs	r1, r2
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6812      	ldr	r2, [r2, #0]
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	695a      	ldr	r2, [r3, #20]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	000186a0 	.word	0x000186a0
 8009aa8:	001e847f 	.word	0x001e847f
 8009aac:	003d08ff 	.word	0x003d08ff
 8009ab0:	431bde83 	.word	0x431bde83
 8009ab4:	10624dd3 	.word	0x10624dd3

08009ab8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e021      	b.n	8009b0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2224      	movs	r2, #36	; 0x24
 8009ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fe fef0 	bl	80088c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	607a      	str	r2, [r7, #4]
 8009b22:	461a      	mov	r2, r3
 8009b24:	460b      	mov	r3, r1
 8009b26:	817b      	strh	r3, [r7, #10]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b2c:	f7ff f85e 	bl	8008bec <HAL_GetTick>
 8009b30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	f040 80e0 	bne.w	8009d00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	2319      	movs	r3, #25
 8009b46:	2201      	movs	r2, #1
 8009b48:	4970      	ldr	r1, [pc, #448]	; (8009d0c <HAL_I2C_Master_Transmit+0x1f4>)
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 fe5c 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009b56:	2302      	movs	r3, #2
 8009b58:	e0d3      	b.n	8009d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_I2C_Master_Transmit+0x50>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e0cc      	b.n	8009d02 <HAL_I2C_Master_Transmit+0x1ea>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d007      	beq.n	8009b8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0201 	orr.w	r2, r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2221      	movs	r2, #33	; 0x21
 8009ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2210      	movs	r2, #16
 8009baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	893a      	ldrh	r2, [r7, #8]
 8009bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a50      	ldr	r2, [pc, #320]	; (8009d10 <HAL_I2C_Master_Transmit+0x1f8>)
 8009bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009bd0:	8979      	ldrh	r1, [r7, #10]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a3a      	ldr	r2, [r7, #32]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fc16 	bl	800a408 <I2C_MasterRequestWrite>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e08d      	b.n	8009d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009be6:	2300      	movs	r3, #0
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009bfc:	e066      	b.n	8009ccc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	6a39      	ldr	r1, [r7, #32]
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 ff1a 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00d      	beq.n	8009c2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d107      	bne.n	8009c26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e06b      	b.n	8009d02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c52:	3b01      	subs	r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d11b      	bne.n	8009ca0 <HAL_I2C_Master_Transmit+0x188>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d017      	beq.n	8009ca0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	6a39      	ldr	r1, [r7, #32]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 ff11 	bl	800aacc <I2C_WaitOnBTFFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00d      	beq.n	8009ccc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d107      	bne.n	8009cc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e01a      	b.n	8009d02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d194      	bne.n	8009bfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e000      	b.n	8009d02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009d00:	2302      	movs	r3, #2
  }
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	00100002 	.word	0x00100002
 8009d10:	ffff0000 	.word	0xffff0000

08009d14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	4611      	mov	r1, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	4603      	mov	r3, r0
 8009d24:	817b      	strh	r3, [r7, #10]
 8009d26:	460b      	mov	r3, r1
 8009d28:	813b      	strh	r3, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d2e:	f7fe ff5d 	bl	8008bec <HAL_GetTick>
 8009d32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	f040 80d9 	bne.w	8009ef4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	2319      	movs	r3, #25
 8009d48:	2201      	movs	r2, #1
 8009d4a:	496d      	ldr	r1, [pc, #436]	; (8009f00 <HAL_I2C_Mem_Write+0x1ec>)
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fd5b 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e0cc      	b.n	8009ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_I2C_Mem_Write+0x56>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e0c5      	b.n	8009ef6 <HAL_I2C_Mem_Write+0x1e2>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d007      	beq.n	8009d90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f042 0201 	orr.w	r2, r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2221      	movs	r2, #33	; 0x21
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2240      	movs	r2, #64	; 0x40
 8009dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a3a      	ldr	r2, [r7, #32]
 8009dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4a4d      	ldr	r2, [pc, #308]	; (8009f04 <HAL_I2C_Mem_Write+0x1f0>)
 8009dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009dd2:	88f8      	ldrh	r0, [r7, #6]
 8009dd4:	893a      	ldrh	r2, [r7, #8]
 8009dd6:	8979      	ldrh	r1, [r7, #10]
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	4603      	mov	r3, r0
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 fb92 	bl	800a50c <I2C_RequestMemoryWrite>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d052      	beq.n	8009e94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e081      	b.n	8009ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 fe20 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00d      	beq.n	8009e1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e06:	2b04      	cmp	r3, #4
 8009e08:	d107      	bne.n	8009e1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e06b      	b.n	8009ef6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	3b01      	subs	r3, #1
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f003 0304 	and.w	r3, r3, #4
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d11b      	bne.n	8009e94 <HAL_I2C_Mem_Write+0x180>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d017      	beq.n	8009e94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1aa      	bne.n	8009df2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 fe13 	bl	800aacc <I2C_WaitOnBTFFlagUntilTimeout>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00d      	beq.n	8009ec8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d107      	bne.n	8009ec4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e016      	b.n	8009ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2220      	movs	r2, #32
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	e000      	b.n	8009ef6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ef4:	2302      	movs	r3, #2
  }
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	00100002 	.word	0x00100002
 8009f04:	ffff0000 	.word	0xffff0000

08009f08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08c      	sub	sp, #48	; 0x30
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	461a      	mov	r2, r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	817b      	strh	r3, [r7, #10]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	813b      	strh	r3, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f26:	f7fe fe61 	bl	8008bec <HAL_GetTick>
 8009f2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	f040 8244 	bne.w	800a3c2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	2319      	movs	r3, #25
 8009f40:	2201      	movs	r2, #1
 8009f42:	4982      	ldr	r1, [pc, #520]	; (800a14c <HAL_I2C_Mem_Read+0x244>)
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 fc5f 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
 8009f52:	e237      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_I2C_Mem_Read+0x5a>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e230      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d007      	beq.n	8009f88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2222      	movs	r2, #34	; 0x22
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2240      	movs	r2, #64	; 0x40
 8009fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4a62      	ldr	r2, [pc, #392]	; (800a150 <HAL_I2C_Mem_Read+0x248>)
 8009fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fca:	88f8      	ldrh	r0, [r7, #6]
 8009fcc:	893a      	ldrh	r2, [r7, #8]
 8009fce:	8979      	ldrh	r1, [r7, #10]
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	4603      	mov	r3, r0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fb2c 	bl	800a638 <I2C_RequestMemoryRead>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e1ec      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d113      	bne.n	800a01a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	e1c0      	b.n	800a39c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d11e      	bne.n	800a060 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a032:	b672      	cpsid	i
}
 800a034:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a036:	2300      	movs	r3, #0
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	61bb      	str	r3, [r7, #24]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	61bb      	str	r3, [r7, #24]
 800a04a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a05a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a05c:	b662      	cpsie	i
}
 800a05e:	e035      	b.n	800a0cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a064:	2b02      	cmp	r3, #2
 800a066:	d11e      	bne.n	800a0a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a078:	b672      	cpsid	i
}
 800a07a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0a2:	b662      	cpsie	i
}
 800a0a4:	e012      	b.n	800a0cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	613b      	str	r3, [r7, #16]
 800a0ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a0cc:	e166      	b.n	800a39c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	f200 811f 	bhi.w	800a316 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d123      	bne.n	800a128 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fd39 	bl	800ab5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e167      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	b2d2      	uxtb	r2, r2
 800a100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b01      	subs	r3, #1
 800a120:	b29a      	uxth	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a126:	e139      	b.n	800a39c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d152      	bne.n	800a1d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	2200      	movs	r2, #0
 800a138:	4906      	ldr	r1, [pc, #24]	; (800a154 <HAL_I2C_Mem_Read+0x24c>)
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 fb64 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e13c      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
 800a14a:	bf00      	nop
 800a14c:	00100002 	.word	0x00100002
 800a150:	ffff0000 	.word	0xffff0000
 800a154:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a158:	b672      	cpsid	i
}
 800a15a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a16a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a194:	b29b      	uxth	r3, r3
 800a196:	3b01      	subs	r3, #1
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a19e:	b662      	cpsie	i
}
 800a1a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1d4:	e0e2      	b.n	800a39c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	2200      	movs	r2, #0
 800a1de:	497b      	ldr	r1, [pc, #492]	; (800a3cc <HAL_I2C_Mem_Read+0x4c4>)
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 fb11 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0e9      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a200:	b672      	cpsid	i
}
 800a202:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a220:	3b01      	subs	r3, #1
 800a222:	b29a      	uxth	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	3b01      	subs	r3, #1
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a236:	4b66      	ldr	r3, [pc, #408]	; (800a3d0 <HAL_I2C_Mem_Read+0x4c8>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	08db      	lsrs	r3, r3, #3
 800a23c:	4a65      	ldr	r2, [pc, #404]	; (800a3d4 <HAL_I2C_Mem_Read+0x4cc>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	0a1a      	lsrs	r2, r3, #8
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	00da      	lsls	r2, r3, #3
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	3b01      	subs	r3, #1
 800a254:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d118      	bne.n	800a28e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2220      	movs	r2, #32
 800a266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a276:	f043 0220 	orr.w	r2, r3, #32
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a27e:	b662      	cpsie	i
}
 800a280:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e09a      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d1d9      	bne.n	800a250 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	691a      	ldr	r2, [r3, #16]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a2de:	b662      	cpsie	i
}
 800a2e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	b2d2      	uxtb	r2, r2
 800a2ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fe:	3b01      	subs	r3, #1
 800a300:	b29a      	uxth	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	3b01      	subs	r3, #1
 800a30e:	b29a      	uxth	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a314:	e042      	b.n	800a39c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fc1e 	bl	800ab5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e04c      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691a      	ldr	r2, [r3, #16]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	b2d2      	uxtb	r2, r2
 800a336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a346:	3b01      	subs	r3, #1
 800a348:	b29a      	uxth	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b04      	cmp	r3, #4
 800a368:	d118      	bne.n	800a39c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a374:	b2d2      	uxtb	r2, r2
 800a376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a386:	3b01      	subs	r3, #1
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a392:	b29b      	uxth	r3, r3
 800a394:	3b01      	subs	r3, #1
 800a396:	b29a      	uxth	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f47f ae94 	bne.w	800a0ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e000      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a3c2:	2302      	movs	r3, #2
  }
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3728      	adds	r7, #40	; 0x28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	00010004 	.word	0x00010004
 800a3d0:	20000b40 	.word	0x20000b40
 800a3d4:	14f8b589 	.word	0x14f8b589

0800a3d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e6:	b2db      	uxtb	r3, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr

0800a3f2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	607a      	str	r2, [r7, #4]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	460b      	mov	r3, r1
 800a416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b08      	cmp	r3, #8
 800a422:	d006      	beq.n	800a432 <I2C_MasterRequestWrite+0x2a>
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d003      	beq.n	800a432 <I2C_MasterRequestWrite+0x2a>
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a430:	d108      	bne.n	800a444 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	e00b      	b.n	800a45c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	2b12      	cmp	r3, #18
 800a44a:	d107      	bne.n	800a45c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a45a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 f9cd 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00d      	beq.n	800a490 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a482:	d103      	bne.n	800a48c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a48a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e035      	b.n	800a4fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a498:	d108      	bne.n	800a4ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a49a:	897b      	ldrh	r3, [r7, #10]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a4a8:	611a      	str	r2, [r3, #16]
 800a4aa:	e01b      	b.n	800a4e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a4ac:	897b      	ldrh	r3, [r7, #10]
 800a4ae:	11db      	asrs	r3, r3, #7
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	f003 0306 	and.w	r3, r3, #6
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f063 030f 	orn	r3, r3, #15
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	490e      	ldr	r1, [pc, #56]	; (800a504 <I2C_MasterRequestWrite+0xfc>)
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fa16 	bl	800a8fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e010      	b.n	800a4fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a4da:	897b      	ldrh	r3, [r7, #10]
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	4907      	ldr	r1, [pc, #28]	; (800a508 <I2C_MasterRequestWrite+0x100>)
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fa06 	bl	800a8fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	00010008 	.word	0x00010008
 800a508:	00010002 	.word	0x00010002

0800a50c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	4603      	mov	r3, r0
 800a51c:	817b      	strh	r3, [r7, #10]
 800a51e:	460b      	mov	r3, r1
 800a520:	813b      	strh	r3, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f960 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00d      	beq.n	800a56a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a55c:	d103      	bne.n	800a566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e05f      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a56a:	897b      	ldrh	r3, [r7, #10]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	6a3a      	ldr	r2, [r7, #32]
 800a57e:	492d      	ldr	r1, [pc, #180]	; (800a634 <I2C_RequestMemoryWrite+0x128>)
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 f9bb 	bl	800a8fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e04c      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a8:	6a39      	ldr	r1, [r7, #32]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fa46 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d107      	bne.n	800a5ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e02b      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d105      	bne.n	800a5e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5d8:	893b      	ldrh	r3, [r7, #8]
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	611a      	str	r2, [r3, #16]
 800a5e2:	e021      	b.n	800a628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a5e4:	893b      	ldrh	r3, [r7, #8]
 800a5e6:	0a1b      	lsrs	r3, r3, #8
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f4:	6a39      	ldr	r1, [r7, #32]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fa20 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	2b04      	cmp	r3, #4
 800a608:	d107      	bne.n	800a61a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e005      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a61e:	893b      	ldrh	r3, [r7, #8]
 800a620:	b2da      	uxtb	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	00010002 	.word	0x00010002

0800a638 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	461a      	mov	r2, r3
 800a646:	4603      	mov	r3, r0
 800a648:	817b      	strh	r3, [r7, #10]
 800a64a:	460b      	mov	r3, r1
 800a64c:	813b      	strh	r3, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a660:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	2200      	movs	r2, #0
 800a67a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f8c2 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a698:	d103      	bne.n	800a6a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e0aa      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6a6:	897b      	ldrh	r3, [r7, #10]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	6a3a      	ldr	r2, [r7, #32]
 800a6ba:	4952      	ldr	r1, [pc, #328]	; (800a804 <I2C_RequestMemoryRead+0x1cc>)
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f91d 	bl	800a8fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e097      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e4:	6a39      	ldr	r1, [r7, #32]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 f9a8 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00d      	beq.n	800a70e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d107      	bne.n	800a70a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e076      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d105      	bne.n	800a720 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a714:	893b      	ldrh	r3, [r7, #8]
 800a716:	b2da      	uxtb	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	611a      	str	r2, [r3, #16]
 800a71e:	e021      	b.n	800a764 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a720:	893b      	ldrh	r3, [r7, #8]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	b29b      	uxth	r3, r3
 800a726:	b2da      	uxtb	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a730:	6a39      	ldr	r1, [r7, #32]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f982 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00d      	beq.n	800a75a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	2b04      	cmp	r3, #4
 800a744:	d107      	bne.n	800a756 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e050      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a75a:	893b      	ldrh	r3, [r7, #8]
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a766:	6a39      	ldr	r1, [r7, #32]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f967 	bl	800aa3c <I2C_WaitOnTXEFlagUntilTimeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00d      	beq.n	800a790 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d107      	bne.n	800a78c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a78a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e035      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a79e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f82b 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00d      	beq.n	800a7d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c6:	d103      	bne.n	800a7d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e013      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a7d4:	897b      	ldrh	r3, [r7, #10]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	6a3a      	ldr	r2, [r7, #32]
 800a7e8:	4906      	ldr	r1, [pc, #24]	; (800a804 <I2C_RequestMemoryRead+0x1cc>)
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f886 	bl	800a8fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	00010002 	.word	0x00010002

0800a808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	4613      	mov	r3, r2
 800a816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a818:	e048      	b.n	800a8ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a820:	d044      	beq.n	800a8ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a822:	f7fe f9e3 	bl	8008bec <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d302      	bcc.n	800a838 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d139      	bne.n	800a8ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	0c1b      	lsrs	r3, r3, #16
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d10d      	bne.n	800a85e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	43da      	mvns	r2, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	4013      	ands	r3, r2
 800a84e:	b29b      	uxth	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	bf0c      	ite	eq
 800a854:	2301      	moveq	r3, #1
 800a856:	2300      	movne	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	461a      	mov	r2, r3
 800a85c:	e00c      	b.n	800a878 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	43da      	mvns	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	4013      	ands	r3, r2
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bf0c      	ite	eq
 800a870:	2301      	moveq	r3, #1
 800a872:	2300      	movne	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	461a      	mov	r2, r3
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d116      	bne.n	800a8ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2220      	movs	r2, #32
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a898:	f043 0220 	orr.w	r2, r3, #32
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e023      	b.n	800a8f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	0c1b      	lsrs	r3, r3, #16
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d10d      	bne.n	800a8d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	43da      	mvns	r2, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	bf0c      	ite	eq
 800a8c8:	2301      	moveq	r3, #1
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	e00c      	b.n	800a8ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	43da      	mvns	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2301      	moveq	r3, #1
 800a8e6:	2300      	movne	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d093      	beq.n	800a81a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a90a:	e071      	b.n	800a9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a91a:	d123      	bne.n	800a964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a92a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a950:	f043 0204 	orr.w	r2, r3, #4
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e067      	b.n	800aa34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a96a:	d041      	beq.n	800a9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a96c:	f7fe f93e 	bl	8008bec <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d302      	bcc.n	800a982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d136      	bne.n	800a9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	0c1b      	lsrs	r3, r3, #16
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d10c      	bne.n	800a9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	43da      	mvns	r2, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	4013      	ands	r3, r2
 800a998:	b29b      	uxth	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	bf14      	ite	ne
 800a99e:	2301      	movne	r3, #1
 800a9a0:	2300      	moveq	r3, #0
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	e00b      	b.n	800a9be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	43da      	mvns	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d016      	beq.n	800a9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9dc:	f043 0220 	orr.w	r2, r3, #32
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e021      	b.n	800aa34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	0c1b      	lsrs	r3, r3, #16
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d10c      	bne.n	800aa14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	43da      	mvns	r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	4013      	ands	r3, r2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bf14      	ite	ne
 800aa0c:	2301      	movne	r3, #1
 800aa0e:	2300      	moveq	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	e00b      	b.n	800aa2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	43da      	mvns	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	bf14      	ite	ne
 800aa26:	2301      	movne	r3, #1
 800aa28:	2300      	moveq	r3, #0
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f47f af6d 	bne.w	800a90c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa48:	e034      	b.n	800aab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 f8e3 	bl	800ac16 <I2C_IsAcknowledgeFailed>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e034      	b.n	800aac4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa60:	d028      	beq.n	800aab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa62:	f7fe f8c3 	bl	8008bec <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d302      	bcc.n	800aa78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11d      	bne.n	800aab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d016      	beq.n	800aab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa0:	f043 0220 	orr.w	r2, r3, #32
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e007      	b.n	800aac4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabe:	2b80      	cmp	r3, #128	; 0x80
 800aac0:	d1c3      	bne.n	800aa4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aad8:	e034      	b.n	800ab44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 f89b 	bl	800ac16 <I2C_IsAcknowledgeFailed>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e034      	b.n	800ab54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaf0:	d028      	beq.n	800ab44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaf2:	f7fe f87b 	bl	8008bec <HAL_GetTick>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d302      	bcc.n	800ab08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11d      	bne.n	800ab44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d016      	beq.n	800ab44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab30:	f043 0220 	orr.w	r2, r3, #32
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e007      	b.n	800ab54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d1c3      	bne.n	800aada <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab68:	e049      	b.n	800abfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d119      	bne.n	800abac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f06f 0210 	mvn.w	r2, #16
 800ab80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e030      	b.n	800ac0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abac:	f7fe f81e 	bl	8008bec <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d302      	bcc.n	800abc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d11d      	bne.n	800abfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abcc:	2b40      	cmp	r3, #64	; 0x40
 800abce:	d016      	beq.n	800abfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2220      	movs	r2, #32
 800abda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	f043 0220 	orr.w	r2, r3, #32
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e007      	b.n	800ac0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac08:	2b40      	cmp	r3, #64	; 0x40
 800ac0a:	d1ae      	bne.n	800ab6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac2c:	d11b      	bne.n	800ac66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2220      	movs	r2, #32
 800ac42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac52:	f043 0204 	orr.w	r2, r3, #4
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bc80      	pop	{r7}
 800ac70:	4770      	bx	lr
	...

0800ac74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e272      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8087 	beq.w	800ada2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac94:	4b92      	ldr	r3, [pc, #584]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f003 030c 	and.w	r3, r3, #12
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d00c      	beq.n	800acba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aca0:	4b8f      	ldr	r3, [pc, #572]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f003 030c 	and.w	r3, r3, #12
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d112      	bne.n	800acd2 <HAL_RCC_OscConfig+0x5e>
 800acac:	4b8c      	ldr	r3, [pc, #560]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb8:	d10b      	bne.n	800acd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acba:	4b89      	ldr	r3, [pc, #548]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d06c      	beq.n	800ada0 <HAL_RCC_OscConfig+0x12c>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d168      	bne.n	800ada0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e24c      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acda:	d106      	bne.n	800acea <HAL_RCC_OscConfig+0x76>
 800acdc:	4b80      	ldr	r3, [pc, #512]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a7f      	ldr	r2, [pc, #508]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ace2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	e02e      	b.n	800ad48 <HAL_RCC_OscConfig+0xd4>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10c      	bne.n	800ad0c <HAL_RCC_OscConfig+0x98>
 800acf2:	4b7b      	ldr	r3, [pc, #492]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a7a      	ldr	r2, [pc, #488]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800acf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	4b78      	ldr	r3, [pc, #480]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a77      	ldr	r2, [pc, #476]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	e01d      	b.n	800ad48 <HAL_RCC_OscConfig+0xd4>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad14:	d10c      	bne.n	800ad30 <HAL_RCC_OscConfig+0xbc>
 800ad16:	4b72      	ldr	r3, [pc, #456]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a71      	ldr	r2, [pc, #452]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	4b6f      	ldr	r3, [pc, #444]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a6e      	ldr	r2, [pc, #440]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	e00b      	b.n	800ad48 <HAL_RCC_OscConfig+0xd4>
 800ad30:	4b6b      	ldr	r3, [pc, #428]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a6a      	ldr	r2, [pc, #424]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	4b68      	ldr	r3, [pc, #416]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a67      	ldr	r2, [pc, #412]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d013      	beq.n	800ad78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad50:	f7fd ff4c 	bl	8008bec <HAL_GetTick>
 800ad54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad56:	e008      	b.n	800ad6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad58:	f7fd ff48 	bl	8008bec <HAL_GetTick>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	2b64      	cmp	r3, #100	; 0x64
 800ad64:	d901      	bls.n	800ad6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	e200      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad6a:	4b5d      	ldr	r3, [pc, #372]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0f0      	beq.n	800ad58 <HAL_RCC_OscConfig+0xe4>
 800ad76:	e014      	b.n	800ada2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad78:	f7fd ff38 	bl	8008bec <HAL_GetTick>
 800ad7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad80:	f7fd ff34 	bl	8008bec <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b64      	cmp	r3, #100	; 0x64
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e1ec      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad92:	4b53      	ldr	r3, [pc, #332]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1f0      	bne.n	800ad80 <HAL_RCC_OscConfig+0x10c>
 800ad9e:	e000      	b.n	800ada2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ada0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d063      	beq.n	800ae76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800adae:	4b4c      	ldr	r3, [pc, #304]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f003 030c 	and.w	r3, r3, #12
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800adba:	4b49      	ldr	r3, [pc, #292]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f003 030c 	and.w	r3, r3, #12
 800adc2:	2b08      	cmp	r3, #8
 800adc4:	d11c      	bne.n	800ae00 <HAL_RCC_OscConfig+0x18c>
 800adc6:	4b46      	ldr	r3, [pc, #280]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d116      	bne.n	800ae00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800add2:	4b43      	ldr	r3, [pc, #268]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <HAL_RCC_OscConfig+0x176>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d001      	beq.n	800adea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e1c0      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adea:	4b3d      	ldr	r3, [pc, #244]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	4939      	ldr	r1, [pc, #228]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adfe:	e03a      	b.n	800ae76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d020      	beq.n	800ae4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae08:	4b36      	ldr	r3, [pc, #216]	; (800aee4 <HAL_RCC_OscConfig+0x270>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae0e:	f7fd feed 	bl	8008bec <HAL_GetTick>
 800ae12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae14:	e008      	b.n	800ae28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae16:	f7fd fee9 	bl	8008bec <HAL_GetTick>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d901      	bls.n	800ae28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e1a1      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae28:	4b2d      	ldr	r3, [pc, #180]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0302 	and.w	r3, r3, #2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0f0      	beq.n	800ae16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae34:	4b2a      	ldr	r3, [pc, #168]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	4927      	ldr	r1, [pc, #156]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	600b      	str	r3, [r1, #0]
 800ae48:	e015      	b.n	800ae76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae4a:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <HAL_RCC_OscConfig+0x270>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae50:	f7fd fecc 	bl	8008bec <HAL_GetTick>
 800ae54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae56:	e008      	b.n	800ae6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae58:	f7fd fec8 	bl	8008bec <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d901      	bls.n	800ae6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e180      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae6a:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1f0      	bne.n	800ae58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0308 	and.w	r3, r3, #8
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d03a      	beq.n	800aef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d019      	beq.n	800aebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae8a:	4b17      	ldr	r3, [pc, #92]	; (800aee8 <HAL_RCC_OscConfig+0x274>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae90:	f7fd feac 	bl	8008bec <HAL_GetTick>
 800ae94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae96:	e008      	b.n	800aeaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae98:	f7fd fea8 	bl	8008bec <HAL_GetTick>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d901      	bls.n	800aeaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	e160      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <HAL_RCC_OscConfig+0x26c>)
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0f0      	beq.n	800ae98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	f000 face 	bl	800b458 <RCC_Delay>
 800aebc:	e01c      	b.n	800aef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aebe:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <HAL_RCC_OscConfig+0x274>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aec4:	f7fd fe92 	bl	8008bec <HAL_GetTick>
 800aec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeca:	e00f      	b.n	800aeec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aecc:	f7fd fe8e 	bl	8008bec <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d908      	bls.n	800aeec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e146      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
 800aede:	bf00      	nop
 800aee0:	40021000 	.word	0x40021000
 800aee4:	42420000 	.word	0x42420000
 800aee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeec:	4b92      	ldr	r3, [pc, #584]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e9      	bne.n	800aecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 80a6 	beq.w	800b052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af0a:	4b8b      	ldr	r3, [pc, #556]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10d      	bne.n	800af32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af16:	4b88      	ldr	r3, [pc, #544]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	4a87      	ldr	r2, [pc, #540]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af20:	61d3      	str	r3, [r2, #28]
 800af22:	4b85      	ldr	r3, [pc, #532]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af2a:	60bb      	str	r3, [r7, #8]
 800af2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af2e:	2301      	movs	r3, #1
 800af30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af32:	4b82      	ldr	r3, [pc, #520]	; (800b13c <HAL_RCC_OscConfig+0x4c8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d118      	bne.n	800af70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af3e:	4b7f      	ldr	r3, [pc, #508]	; (800b13c <HAL_RCC_OscConfig+0x4c8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a7e      	ldr	r2, [pc, #504]	; (800b13c <HAL_RCC_OscConfig+0x4c8>)
 800af44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af4a:	f7fd fe4f 	bl	8008bec <HAL_GetTick>
 800af4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af50:	e008      	b.n	800af64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af52:	f7fd fe4b 	bl	8008bec <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b64      	cmp	r3, #100	; 0x64
 800af5e:	d901      	bls.n	800af64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e103      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af64:	4b75      	ldr	r3, [pc, #468]	; (800b13c <HAL_RCC_OscConfig+0x4c8>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0f0      	beq.n	800af52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d106      	bne.n	800af86 <HAL_RCC_OscConfig+0x312>
 800af78:	4b6f      	ldr	r3, [pc, #444]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	4a6e      	ldr	r2, [pc, #440]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	6213      	str	r3, [r2, #32]
 800af84:	e02d      	b.n	800afe2 <HAL_RCC_OscConfig+0x36e>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10c      	bne.n	800afa8 <HAL_RCC_OscConfig+0x334>
 800af8e:	4b6a      	ldr	r3, [pc, #424]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	4a69      	ldr	r2, [pc, #420]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af94:	f023 0301 	bic.w	r3, r3, #1
 800af98:	6213      	str	r3, [r2, #32]
 800af9a:	4b67      	ldr	r3, [pc, #412]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	4a66      	ldr	r2, [pc, #408]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afa0:	f023 0304 	bic.w	r3, r3, #4
 800afa4:	6213      	str	r3, [r2, #32]
 800afa6:	e01c      	b.n	800afe2 <HAL_RCC_OscConfig+0x36e>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	2b05      	cmp	r3, #5
 800afae:	d10c      	bne.n	800afca <HAL_RCC_OscConfig+0x356>
 800afb0:	4b61      	ldr	r3, [pc, #388]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	4a60      	ldr	r2, [pc, #384]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afb6:	f043 0304 	orr.w	r3, r3, #4
 800afba:	6213      	str	r3, [r2, #32]
 800afbc:	4b5e      	ldr	r3, [pc, #376]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	4a5d      	ldr	r2, [pc, #372]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afc2:	f043 0301 	orr.w	r3, r3, #1
 800afc6:	6213      	str	r3, [r2, #32]
 800afc8:	e00b      	b.n	800afe2 <HAL_RCC_OscConfig+0x36e>
 800afca:	4b5b      	ldr	r3, [pc, #364]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	4a5a      	ldr	r2, [pc, #360]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afd0:	f023 0301 	bic.w	r3, r3, #1
 800afd4:	6213      	str	r3, [r2, #32]
 800afd6:	4b58      	ldr	r3, [pc, #352]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	4a57      	ldr	r2, [pc, #348]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800afdc:	f023 0304 	bic.w	r3, r3, #4
 800afe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d015      	beq.n	800b016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afea:	f7fd fdff 	bl	8008bec <HAL_GetTick>
 800afee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aff0:	e00a      	b.n	800b008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aff2:	f7fd fdfb 	bl	8008bec <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b000:	4293      	cmp	r3, r2
 800b002:	d901      	bls.n	800b008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e0b1      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b008:	4b4b      	ldr	r3, [pc, #300]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	f003 0302 	and.w	r3, r3, #2
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0ee      	beq.n	800aff2 <HAL_RCC_OscConfig+0x37e>
 800b014:	e014      	b.n	800b040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b016:	f7fd fde9 	bl	8008bec <HAL_GetTick>
 800b01a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b01c:	e00a      	b.n	800b034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b01e:	f7fd fde5 	bl	8008bec <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	f241 3288 	movw	r2, #5000	; 0x1388
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d901      	bls.n	800b034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e09b      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b034:	4b40      	ldr	r3, [pc, #256]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	f003 0302 	and.w	r3, r3, #2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1ee      	bne.n	800b01e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d105      	bne.n	800b052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b046:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	4a3b      	ldr	r2, [pc, #236]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b04c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8087 	beq.w	800b16a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b05c:	4b36      	ldr	r3, [pc, #216]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f003 030c 	and.w	r3, r3, #12
 800b064:	2b08      	cmp	r3, #8
 800b066:	d061      	beq.n	800b12c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d146      	bne.n	800b0fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b070:	4b33      	ldr	r3, [pc, #204]	; (800b140 <HAL_RCC_OscConfig+0x4cc>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b076:	f7fd fdb9 	bl	8008bec <HAL_GetTick>
 800b07a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b07c:	e008      	b.n	800b090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b07e:	f7fd fdb5 	bl	8008bec <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d901      	bls.n	800b090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e06d      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b090:	4b29      	ldr	r3, [pc, #164]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1f0      	bne.n	800b07e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a4:	d108      	bne.n	800b0b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	4921      	ldr	r1, [pc, #132]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0b8:	4b1f      	ldr	r3, [pc, #124]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a19      	ldr	r1, [r3, #32]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	491b      	ldr	r1, [pc, #108]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0d0:	4b1b      	ldr	r3, [pc, #108]	; (800b140 <HAL_RCC_OscConfig+0x4cc>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0d6:	f7fd fd89 	bl	8008bec <HAL_GetTick>
 800b0da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b0dc:	e008      	b.n	800b0f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0de:	f7fd fd85 	bl	8008bec <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d901      	bls.n	800b0f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e03d      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b0f0:	4b11      	ldr	r3, [pc, #68]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0f0      	beq.n	800b0de <HAL_RCC_OscConfig+0x46a>
 800b0fc:	e035      	b.n	800b16a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0fe:	4b10      	ldr	r3, [pc, #64]	; (800b140 <HAL_RCC_OscConfig+0x4cc>)
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b104:	f7fd fd72 	bl	8008bec <HAL_GetTick>
 800b108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b10a:	e008      	b.n	800b11e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b10c:	f7fd fd6e 	bl	8008bec <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d901      	bls.n	800b11e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e026      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b11e:	4b06      	ldr	r3, [pc, #24]	; (800b138 <HAL_RCC_OscConfig+0x4c4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f0      	bne.n	800b10c <HAL_RCC_OscConfig+0x498>
 800b12a:	e01e      	b.n	800b16a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d107      	bne.n	800b144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e019      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
 800b138:	40021000 	.word	0x40021000
 800b13c:	40007000 	.word	0x40007000
 800b140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b144:	4b0b      	ldr	r3, [pc, #44]	; (800b174 <HAL_RCC_OscConfig+0x500>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	429a      	cmp	r2, r3
 800b156:	d106      	bne.n	800b166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b162:	429a      	cmp	r2, r3
 800b164:	d001      	beq.n	800b16a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e000      	b.n	800b16c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	40021000 	.word	0x40021000

0800b178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	e0d0      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b18c:	4b6a      	ldr	r3, [pc, #424]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0307 	and.w	r3, r3, #7
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d910      	bls.n	800b1bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b19a:	4b67      	ldr	r3, [pc, #412]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f023 0207 	bic.w	r2, r3, #7
 800b1a2:	4965      	ldr	r1, [pc, #404]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1aa:	4b63      	ldr	r3, [pc, #396]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 0307 	and.w	r3, r3, #7
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d001      	beq.n	800b1bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e0b8      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d020      	beq.n	800b20a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1d4:	4b59      	ldr	r3, [pc, #356]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	4a58      	ldr	r2, [pc, #352]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b1de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0308 	and.w	r3, r3, #8
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1ec:	4b53      	ldr	r3, [pc, #332]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	4a52      	ldr	r2, [pc, #328]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b1f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1f8:	4b50      	ldr	r3, [pc, #320]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	494d      	ldr	r1, [pc, #308]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b206:	4313      	orrs	r3, r2
 800b208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0301 	and.w	r3, r3, #1
 800b212:	2b00      	cmp	r3, #0
 800b214:	d040      	beq.n	800b298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d107      	bne.n	800b22e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b21e:	4b47      	ldr	r3, [pc, #284]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d115      	bne.n	800b256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e07f      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d107      	bne.n	800b246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b236:	4b41      	ldr	r3, [pc, #260]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d109      	bne.n	800b256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e073      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b246:	4b3d      	ldr	r3, [pc, #244]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e06b      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b256:	4b39      	ldr	r3, [pc, #228]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	f023 0203 	bic.w	r2, r3, #3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4936      	ldr	r1, [pc, #216]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b264:	4313      	orrs	r3, r2
 800b266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b268:	f7fd fcc0 	bl	8008bec <HAL_GetTick>
 800b26c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b26e:	e00a      	b.n	800b286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b270:	f7fd fcbc 	bl	8008bec <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27e:	4293      	cmp	r3, r2
 800b280:	d901      	bls.n	800b286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e053      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b286:	4b2d      	ldr	r3, [pc, #180]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f003 020c 	and.w	r2, r3, #12
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	429a      	cmp	r2, r3
 800b296:	d1eb      	bne.n	800b270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b298:	4b27      	ldr	r3, [pc, #156]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0307 	and.w	r3, r3, #7
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d210      	bcs.n	800b2c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2a6:	4b24      	ldr	r3, [pc, #144]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f023 0207 	bic.w	r2, r3, #7
 800b2ae:	4922      	ldr	r1, [pc, #136]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2b6:	4b20      	ldr	r3, [pc, #128]	; (800b338 <HAL_RCC_ClockConfig+0x1c0>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0307 	and.w	r3, r3, #7
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d001      	beq.n	800b2c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e032      	b.n	800b32e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d008      	beq.n	800b2e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2d4:	4b19      	ldr	r3, [pc, #100]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4916      	ldr	r1, [pc, #88]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0308 	and.w	r3, r3, #8
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d009      	beq.n	800b306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b2f2:	4b12      	ldr	r3, [pc, #72]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	00db      	lsls	r3, r3, #3
 800b300:	490e      	ldr	r1, [pc, #56]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b302:	4313      	orrs	r3, r2
 800b304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b306:	f000 f821 	bl	800b34c <HAL_RCC_GetSysClockFreq>
 800b30a:	4602      	mov	r2, r0
 800b30c:	4b0b      	ldr	r3, [pc, #44]	; (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	091b      	lsrs	r3, r3, #4
 800b312:	f003 030f 	and.w	r3, r3, #15
 800b316:	490a      	ldr	r1, [pc, #40]	; (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b318:	5ccb      	ldrb	r3, [r1, r3]
 800b31a:	fa22 f303 	lsr.w	r3, r2, r3
 800b31e:	4a09      	ldr	r2, [pc, #36]	; (800b344 <HAL_RCC_ClockConfig+0x1cc>)
 800b320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <HAL_RCC_ClockConfig+0x1d0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4618      	mov	r0, r3
 800b328:	f7fd fc1e 	bl	8008b68 <HAL_InitTick>

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	40022000 	.word	0x40022000
 800b33c:	40021000 	.word	0x40021000
 800b340:	0800d750 	.word	0x0800d750
 800b344:	20000b40 	.word	0x20000b40
 800b348:	20000b44 	.word	0x20000b44

0800b34c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	2300      	movs	r3, #0
 800b358:	60bb      	str	r3, [r7, #8]
 800b35a:	2300      	movs	r3, #0
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	2300      	movs	r3, #0
 800b360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b366:	4b1e      	ldr	r3, [pc, #120]	; (800b3e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f003 030c 	and.w	r3, r3, #12
 800b372:	2b04      	cmp	r3, #4
 800b374:	d002      	beq.n	800b37c <HAL_RCC_GetSysClockFreq+0x30>
 800b376:	2b08      	cmp	r3, #8
 800b378:	d003      	beq.n	800b382 <HAL_RCC_GetSysClockFreq+0x36>
 800b37a:	e027      	b.n	800b3cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b37c:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800b37e:	613b      	str	r3, [r7, #16]
      break;
 800b380:	e027      	b.n	800b3d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	0c9b      	lsrs	r3, r3, #18
 800b386:	f003 030f 	and.w	r3, r3, #15
 800b38a:	4a17      	ldr	r2, [pc, #92]	; (800b3e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b38c:	5cd3      	ldrb	r3, [r2, r3]
 800b38e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d010      	beq.n	800b3bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b39a:	4b11      	ldr	r3, [pc, #68]	; (800b3e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	0c5b      	lsrs	r3, r3, #17
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	4a11      	ldr	r2, [pc, #68]	; (800b3ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800b3a6:	5cd3      	ldrb	r3, [r2, r3]
 800b3a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a0d      	ldr	r2, [pc, #52]	; (800b3e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800b3ae:	fb03 f202 	mul.w	r2, r3, r2
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b8:	617b      	str	r3, [r7, #20]
 800b3ba:	e004      	b.n	800b3c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a0c      	ldr	r2, [pc, #48]	; (800b3f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
 800b3c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	613b      	str	r3, [r7, #16]
      break;
 800b3ca:	e002      	b.n	800b3d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b3cc:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800b3ce:	613b      	str	r3, [r7, #16]
      break;
 800b3d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b3d2:	693b      	ldr	r3, [r7, #16]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	371c      	adds	r7, #28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bc80      	pop	{r7}
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	40021000 	.word	0x40021000
 800b3e4:	007a1200 	.word	0x007a1200
 800b3e8:	0800d768 	.word	0x0800d768
 800b3ec:	0800d778 	.word	0x0800d778
 800b3f0:	003d0900 	.word	0x003d0900

0800b3f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	; (800b404 <HAL_RCC_GetHCLKFreq+0x10>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bc80      	pop	{r7}
 800b402:	4770      	bx	lr
 800b404:	20000b40 	.word	0x20000b40

0800b408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b40c:	f7ff fff2 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 800b410:	4602      	mov	r2, r0
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	0a1b      	lsrs	r3, r3, #8
 800b418:	f003 0307 	and.w	r3, r3, #7
 800b41c:	4903      	ldr	r1, [pc, #12]	; (800b42c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b41e:	5ccb      	ldrb	r3, [r1, r3]
 800b420:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b424:	4618      	mov	r0, r3
 800b426:	bd80      	pop	{r7, pc}
 800b428:	40021000 	.word	0x40021000
 800b42c:	0800d760 	.word	0x0800d760

0800b430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b434:	f7ff ffde 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 800b438:	4602      	mov	r2, r0
 800b43a:	4b05      	ldr	r3, [pc, #20]	; (800b450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	0adb      	lsrs	r3, r3, #11
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	4903      	ldr	r1, [pc, #12]	; (800b454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b446:	5ccb      	ldrb	r3, [r1, r3]
 800b448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	40021000 	.word	0x40021000
 800b454:	0800d760 	.word	0x0800d760

0800b458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b460:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <RCC_Delay+0x34>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a0a      	ldr	r2, [pc, #40]	; (800b490 <RCC_Delay+0x38>)
 800b466:	fba2 2303 	umull	r2, r3, r2, r3
 800b46a:	0a5b      	lsrs	r3, r3, #9
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	fb02 f303 	mul.w	r3, r2, r3
 800b472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b474:	bf00      	nop
  }
  while (Delay --);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	1e5a      	subs	r2, r3, #1
 800b47a:	60fa      	str	r2, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1f9      	bne.n	800b474 <RCC_Delay+0x1c>
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	bc80      	pop	{r7}
 800b48a:	4770      	bx	lr
 800b48c:	20000b40 	.word	0x20000b40
 800b490:	10624dd3 	.word	0x10624dd3

0800b494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e041      	b.n	800b52a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d106      	bne.n	800b4c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fd fa26 	bl	800890c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	f000 fa82 	bl	800b9dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
	...

0800b534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b01      	cmp	r3, #1
 800b546:	d001      	beq.n	800b54c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e044      	b.n	800b5d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2202      	movs	r2, #2
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 0201 	orr.w	r2, r2, #1
 800b562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a1d      	ldr	r2, [pc, #116]	; (800b5e0 <HAL_TIM_Base_Start_IT+0xac>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d018      	beq.n	800b5a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a1c      	ldr	r2, [pc, #112]	; (800b5e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d013      	beq.n	800b5a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b580:	d00e      	beq.n	800b5a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a18      	ldr	r2, [pc, #96]	; (800b5e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d009      	beq.n	800b5a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a16      	ldr	r2, [pc, #88]	; (800b5ec <HAL_TIM_Base_Start_IT+0xb8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d004      	beq.n	800b5a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a15      	ldr	r2, [pc, #84]	; (800b5f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d111      	bne.n	800b5c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b06      	cmp	r3, #6
 800b5b0:	d010      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f042 0201 	orr.w	r2, r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c2:	e007      	b.n	800b5d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0201 	orr.w	r2, r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bc80      	pop	{r7}
 800b5de:	4770      	bx	lr
 800b5e0:	40012c00 	.word	0x40012c00
 800b5e4:	40013400 	.word	0x40013400
 800b5e8:	40000400 	.word	0x40000400
 800b5ec:	40000800 	.word	0x40000800
 800b5f0:	40000c00 	.word	0x40000c00

0800b5f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b02      	cmp	r3, #2
 800b608:	d122      	bne.n	800b650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	f003 0302 	and.w	r3, r3, #2
 800b614:	2b02      	cmp	r3, #2
 800b616:	d11b      	bne.n	800b650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f06f 0202 	mvn.w	r2, #2
 800b620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f9b4 	bl	800b9a4 <HAL_TIM_IC_CaptureCallback>
 800b63c:	e005      	b.n	800b64a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f9a7 	bl	800b992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f9b6 	bl	800b9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	f003 0304 	and.w	r3, r3, #4
 800b65a:	2b04      	cmp	r3, #4
 800b65c:	d122      	bne.n	800b6a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d11b      	bne.n	800b6a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f06f 0204 	mvn.w	r2, #4
 800b674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2202      	movs	r2, #2
 800b67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f98a 	bl	800b9a4 <HAL_TIM_IC_CaptureCallback>
 800b690:	e005      	b.n	800b69e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f97d 	bl	800b992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f98c 	bl	800b9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	f003 0308 	and.w	r3, r3, #8
 800b6ae:	2b08      	cmp	r3, #8
 800b6b0:	d122      	bne.n	800b6f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f003 0308 	and.w	r3, r3, #8
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d11b      	bne.n	800b6f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0208 	mvn.w	r2, #8
 800b6c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2204      	movs	r2, #4
 800b6ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f960 	bl	800b9a4 <HAL_TIM_IC_CaptureCallback>
 800b6e4:	e005      	b.n	800b6f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f953 	bl	800b992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f962 	bl	800b9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b10      	cmp	r3, #16
 800b704:	d122      	bne.n	800b74c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b10      	cmp	r3, #16
 800b712:	d11b      	bne.n	800b74c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0210 	mvn.w	r2, #16
 800b71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2208      	movs	r2, #8
 800b722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f936 	bl	800b9a4 <HAL_TIM_IC_CaptureCallback>
 800b738:	e005      	b.n	800b746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f929 	bl	800b992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f938 	bl	800b9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b01      	cmp	r3, #1
 800b758:	d10e      	bne.n	800b778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b01      	cmp	r3, #1
 800b766:	d107      	bne.n	800b778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f06f 0201 	mvn.w	r2, #1
 800b770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7fc fd62 	bl	800823c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b782:	2b80      	cmp	r3, #128	; 0x80
 800b784:	d10e      	bne.n	800b7a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b790:	2b80      	cmp	r3, #128	; 0x80
 800b792:	d107      	bne.n	800b7a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 faa1 	bl	800bce6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ae:	2b40      	cmp	r3, #64	; 0x40
 800b7b0:	d10e      	bne.n	800b7d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7bc:	2b40      	cmp	r3, #64	; 0x40
 800b7be:	d107      	bne.n	800b7d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f8fc 	bl	800b9c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b20      	cmp	r3, #32
 800b7dc:	d10e      	bne.n	800b7fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f003 0320 	and.w	r3, r3, #32
 800b7e8:	2b20      	cmp	r3, #32
 800b7ea:	d107      	bne.n	800b7fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f06f 0220 	mvn.w	r2, #32
 800b7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fa6c 	bl	800bcd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d101      	bne.n	800b820 <HAL_TIM_ConfigClockSource+0x1c>
 800b81c:	2302      	movs	r3, #2
 800b81e:	e0b4      	b.n	800b98a <HAL_TIM_ConfigClockSource+0x186>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2202      	movs	r2, #2
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b83e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b858:	d03e      	beq.n	800b8d8 <HAL_TIM_ConfigClockSource+0xd4>
 800b85a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b85e:	f200 8087 	bhi.w	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b866:	f000 8086 	beq.w	800b976 <HAL_TIM_ConfigClockSource+0x172>
 800b86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b86e:	d87f      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b870:	2b70      	cmp	r3, #112	; 0x70
 800b872:	d01a      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0xa6>
 800b874:	2b70      	cmp	r3, #112	; 0x70
 800b876:	d87b      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b878:	2b60      	cmp	r3, #96	; 0x60
 800b87a:	d050      	beq.n	800b91e <HAL_TIM_ConfigClockSource+0x11a>
 800b87c:	2b60      	cmp	r3, #96	; 0x60
 800b87e:	d877      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b880:	2b50      	cmp	r3, #80	; 0x50
 800b882:	d03c      	beq.n	800b8fe <HAL_TIM_ConfigClockSource+0xfa>
 800b884:	2b50      	cmp	r3, #80	; 0x50
 800b886:	d873      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b888:	2b40      	cmp	r3, #64	; 0x40
 800b88a:	d058      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x13a>
 800b88c:	2b40      	cmp	r3, #64	; 0x40
 800b88e:	d86f      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b890:	2b30      	cmp	r3, #48	; 0x30
 800b892:	d064      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b894:	2b30      	cmp	r3, #48	; 0x30
 800b896:	d86b      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d060      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d867      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d05c      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b8a4:	2b10      	cmp	r3, #16
 800b8a6:	d05a      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b8a8:	e062      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8ba:	f000 f980 	bl	800bbbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	609a      	str	r2, [r3, #8]
      break;
 800b8d6:	e04f      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8e8:	f000 f969 	bl	800bbbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8fa:	609a      	str	r2, [r3, #8]
      break;
 800b8fc:	e03c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b90a:	461a      	mov	r2, r3
 800b90c:	f000 f8e0 	bl	800bad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2150      	movs	r1, #80	; 0x50
 800b916:	4618      	mov	r0, r3
 800b918:	f000 f937 	bl	800bb8a <TIM_ITRx_SetConfig>
      break;
 800b91c:	e02c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b92a:	461a      	mov	r2, r3
 800b92c:	f000 f8fe 	bl	800bb2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2160      	movs	r1, #96	; 0x60
 800b936:	4618      	mov	r0, r3
 800b938:	f000 f927 	bl	800bb8a <TIM_ITRx_SetConfig>
      break;
 800b93c:	e01c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b94a:	461a      	mov	r2, r3
 800b94c:	f000 f8c0 	bl	800bad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2140      	movs	r1, #64	; 0x40
 800b956:	4618      	mov	r0, r3
 800b958:	f000 f917 	bl	800bb8a <TIM_ITRx_SetConfig>
      break;
 800b95c:	e00c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f000 f90e 	bl	800bb8a <TIM_ITRx_SetConfig>
      break;
 800b96e:	e003      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
      break;
 800b974:	e000      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b992:	b480      	push	{r7}
 800b994:	b083      	sub	sp, #12
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b99a:	bf00      	nop
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bc80      	pop	{r7}
 800b9a2:	4770      	bx	lr

0800b9a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bc80      	pop	{r7}
 800b9b4:	4770      	bx	lr

0800b9b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bc80      	pop	{r7}
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bc80      	pop	{r7}
 800b9d8:	4770      	bx	lr
	...

0800b9dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a33      	ldr	r2, [pc, #204]	; (800babc <TIM_Base_SetConfig+0xe0>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d013      	beq.n	800ba1c <TIM_Base_SetConfig+0x40>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a32      	ldr	r2, [pc, #200]	; (800bac0 <TIM_Base_SetConfig+0xe4>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d00f      	beq.n	800ba1c <TIM_Base_SetConfig+0x40>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba02:	d00b      	beq.n	800ba1c <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a2f      	ldr	r2, [pc, #188]	; (800bac4 <TIM_Base_SetConfig+0xe8>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d007      	beq.n	800ba1c <TIM_Base_SetConfig+0x40>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a2e      	ldr	r2, [pc, #184]	; (800bac8 <TIM_Base_SetConfig+0xec>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d003      	beq.n	800ba1c <TIM_Base_SetConfig+0x40>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a2d      	ldr	r2, [pc, #180]	; (800bacc <TIM_Base_SetConfig+0xf0>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d108      	bne.n	800ba2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a22      	ldr	r2, [pc, #136]	; (800babc <TIM_Base_SetConfig+0xe0>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d013      	beq.n	800ba5e <TIM_Base_SetConfig+0x82>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a21      	ldr	r2, [pc, #132]	; (800bac0 <TIM_Base_SetConfig+0xe4>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d00f      	beq.n	800ba5e <TIM_Base_SetConfig+0x82>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba44:	d00b      	beq.n	800ba5e <TIM_Base_SetConfig+0x82>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a1e      	ldr	r2, [pc, #120]	; (800bac4 <TIM_Base_SetConfig+0xe8>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d007      	beq.n	800ba5e <TIM_Base_SetConfig+0x82>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a1d      	ldr	r2, [pc, #116]	; (800bac8 <TIM_Base_SetConfig+0xec>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d003      	beq.n	800ba5e <TIM_Base_SetConfig+0x82>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a1c      	ldr	r2, [pc, #112]	; (800bacc <TIM_Base_SetConfig+0xf0>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d108      	bne.n	800ba70 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	689a      	ldr	r2, [r3, #8]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <TIM_Base_SetConfig+0xe0>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d003      	beq.n	800baa4 <TIM_Base_SetConfig+0xc8>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a08      	ldr	r2, [pc, #32]	; (800bac0 <TIM_Base_SetConfig+0xe4>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d103      	bne.n	800baac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	615a      	str	r2, [r3, #20]
}
 800bab2:	bf00      	nop
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bc80      	pop	{r7}
 800baba:	4770      	bx	lr
 800babc:	40012c00 	.word	0x40012c00
 800bac0:	40013400 	.word	0x40013400
 800bac4:	40000400 	.word	0x40000400
 800bac8:	40000800 	.word	0x40000800
 800bacc:	40000c00 	.word	0x40000c00

0800bad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	f023 0201 	bic.w	r2, r3, #1
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bafa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	011b      	lsls	r3, r3, #4
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f023 030a 	bic.w	r3, r3, #10
 800bb0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb0e:	697a      	ldr	r2, [r7, #20]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	621a      	str	r2, [r3, #32]
}
 800bb22:	bf00      	nop
 800bb24:	371c      	adds	r7, #28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bc80      	pop	{r7}
 800bb2a:	4770      	bx	lr

0800bb2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a1b      	ldr	r3, [r3, #32]
 800bb3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	f023 0210 	bic.w	r2, r3, #16
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	031b      	lsls	r3, r3, #12
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	621a      	str	r2, [r3, #32]
}
 800bb80:	bf00      	nop
 800bb82:	371c      	adds	r7, #28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bc80      	pop	{r7}
 800bb88:	4770      	bx	lr

0800bb8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	f043 0307 	orr.w	r3, r3, #7
 800bbac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	609a      	str	r2, [r3, #8]
}
 800bbb4:	bf00      	nop
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bc80      	pop	{r7}
 800bbbc:	4770      	bx	lr

0800bbbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b087      	sub	sp, #28
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
 800bbca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	021a      	lsls	r2, r3, #8
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	609a      	str	r2, [r3, #8]
}
 800bbf2:	bf00      	nop
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bc80      	pop	{r7}
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d101      	bne.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc10:	2302      	movs	r3, #2
 800bc12:	e050      	b.n	800bcb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a1b      	ldr	r2, [pc, #108]	; (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d018      	beq.n	800bc8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a19      	ldr	r2, [pc, #100]	; (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d013      	beq.n	800bc8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc6a:	d00e      	beq.n	800bc8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a15      	ldr	r2, [pc, #84]	; (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d009      	beq.n	800bc8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a14      	ldr	r2, [pc, #80]	; (800bccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d004      	beq.n	800bc8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a12      	ldr	r2, [pc, #72]	; (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d10c      	bne.n	800bca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bc80      	pop	{r7}
 800bcbe:	4770      	bx	lr
 800bcc0:	40012c00 	.word	0x40012c00
 800bcc4:	40013400 	.word	0x40013400
 800bcc8:	40000400 	.word	0x40000400
 800bccc:	40000800 	.word	0x40000800
 800bcd0:	40000c00 	.word	0x40000c00

0800bcd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bc80      	pop	{r7}
 800bce4:	4770      	bx	lr

0800bce6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e042      	b.n	800bd90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7fc fe1a 	bl	8008958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2224      	movs	r2, #36	; 0x24
 800bd28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68da      	ldr	r2, [r3, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fd11 	bl	800c764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	695a      	ldr	r2, [r3, #20]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68da      	ldr	r2, [r3, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	4613      	mov	r3, r2
 800bda4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b20      	cmp	r3, #32
 800bdb0:	d121      	bne.n	800bdf6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <HAL_UART_Transmit_IT+0x26>
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e01a      	b.n	800bdf8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	88fa      	ldrh	r2, [r7, #6]
 800bdcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	88fa      	ldrh	r2, [r7, #6]
 800bdd2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2221      	movs	r2, #33	; 0x21
 800bdde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68da      	ldr	r2, [r3, #12]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdf0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e000      	b.n	800bdf8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bdf6:	2302      	movs	r3, #2
  }
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bc80      	pop	{r7}
 800be00:	4770      	bx	lr

0800be02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	60b9      	str	r1, [r7, #8]
 800be0c:	4613      	mov	r3, r2
 800be0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b20      	cmp	r3, #32
 800be1a:	d112      	bne.n	800be42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <HAL_UART_Receive_IT+0x26>
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	e00b      	b.n	800be44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800be32:	88fb      	ldrh	r3, [r7, #6]
 800be34:	461a      	mov	r2, r3
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 fabf 	bl	800c3bc <UART_Start_Receive_IT>
 800be3e:	4603      	mov	r3, r0
 800be40:	e000      	b.n	800be44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800be42:	2302      	movs	r3, #2
  }
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b0ba      	sub	sp, #232	; 0xe8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800be72:	2300      	movs	r3, #0
 800be74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800be78:	2300      	movs	r3, #0
 800be7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be82:	f003 030f 	and.w	r3, r3, #15
 800be86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10f      	bne.n	800beb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d009      	beq.n	800beb2 <HAL_UART_IRQHandler+0x66>
 800be9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bea2:	f003 0320 	and.w	r3, r3, #32
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d003      	beq.n	800beb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fb9c 	bl	800c5e8 <UART_Receive_IT>
      return;
 800beb0:	e25b      	b.n	800c36a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800beb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 80de 	beq.w	800c078 <HAL_UART_IRQHandler+0x22c>
 800bebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d106      	bne.n	800bed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800becc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 80d1 	beq.w	800c078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00b      	beq.n	800befa <HAL_UART_IRQHandler+0xae>
 800bee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beea:	2b00      	cmp	r3, #0
 800beec:	d005      	beq.n	800befa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef2:	f043 0201 	orr.w	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800befa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800befe:	f003 0304 	and.w	r3, r3, #4
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <HAL_UART_IRQHandler+0xd2>
 800bf06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d005      	beq.n	800bf1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf16:	f043 0202 	orr.w	r2, r3, #2
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00b      	beq.n	800bf42 <HAL_UART_IRQHandler+0xf6>
 800bf2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d005      	beq.n	800bf42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	f043 0204 	orr.w	r2, r3, #4
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf46:	f003 0308 	and.w	r3, r3, #8
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d011      	beq.n	800bf72 <HAL_UART_IRQHandler+0x126>
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d005      	beq.n	800bf72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6a:	f043 0208 	orr.w	r2, r3, #8
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 81f2 	beq.w	800c360 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf80:	f003 0320 	and.w	r3, r3, #32
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d008      	beq.n	800bf9a <HAL_UART_IRQHandler+0x14e>
 800bf88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf8c:	f003 0320 	and.w	r3, r3, #32
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fb27 	bl	800c5e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	bf14      	ite	ne
 800bfa8:	2301      	movne	r3, #1
 800bfaa:	2300      	moveq	r3, #0
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb6:	f003 0308 	and.w	r3, r3, #8
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d103      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x17a>
 800bfbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d04f      	beq.n	800c066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fa31 	bl	800c42e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d041      	beq.n	800c05e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3314      	adds	r3, #20
 800bfe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3314      	adds	r3, #20
 800c002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c00a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c016:	e841 2300 	strex	r3, r2, [r1]
 800c01a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c01e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1d9      	bne.n	800bfda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d013      	beq.n	800c056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c032:	4a7e      	ldr	r2, [pc, #504]	; (800c22c <HAL_UART_IRQHandler+0x3e0>)
 800c034:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fd f848 	bl	80090d0 <HAL_DMA_Abort_IT>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d016      	beq.n	800c074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c050:	4610      	mov	r0, r2
 800c052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c054:	e00e      	b.n	800c074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f99c 	bl	800c394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	e00a      	b.n	800c074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f998 	bl	800c394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c064:	e006      	b.n	800c074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f994 	bl	800c394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c072:	e175      	b.n	800c360 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c074:	bf00      	nop
    return;
 800c076:	e173      	b.n	800c360 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	f040 814f 	bne.w	800c320 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c086:	f003 0310 	and.w	r3, r3, #16
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f000 8148 	beq.w	800c320 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c094:	f003 0310 	and.w	r3, r3, #16
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8141 	beq.w	800c320 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	60bb      	str	r3, [r7, #8]
 800c0b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 80b6 	beq.w	800c230 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 8145 	beq.w	800c364 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	f080 813e 	bcs.w	800c364 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	f000 8088 	beq.w	800c20c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	330c      	adds	r3, #12
 800c102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c10a:	e853 3f00 	ldrex	r3, [r3]
 800c10e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c11a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	330c      	adds	r3, #12
 800c124:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c128:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c12c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c130:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c134:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c138:	e841 2300 	strex	r3, r2, [r1]
 800c13c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1d9      	bne.n	800c0fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3314      	adds	r3, #20
 800c14e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c152:	e853 3f00 	ldrex	r3, [r3]
 800c156:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3314      	adds	r3, #20
 800c168:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c16c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c170:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c174:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c17e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e1      	bne.n	800c148 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3314      	adds	r3, #20
 800c18a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c19a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3314      	adds	r3, #20
 800c1a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e3      	bne.n	800c184 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2220      	movs	r2, #32
 800c1c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	330c      	adds	r3, #12
 800c1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d4:	e853 3f00 	ldrex	r3, [r3]
 800c1d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1dc:	f023 0310 	bic.w	r3, r3, #16
 800c1e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	330c      	adds	r3, #12
 800c1ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1ee:	65ba      	str	r2, [r7, #88]	; 0x58
 800c1f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1f6:	e841 2300 	strex	r3, r2, [r1]
 800c1fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1e3      	bne.n	800c1ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc ff27 	bl	800905a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	b29b      	uxth	r3, r3
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f8bf 	bl	800c3a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c228:	e09c      	b.n	800c364 <HAL_UART_IRQHandler+0x518>
 800c22a:	bf00      	nop
 800c22c:	0800c4f3 	.word	0x0800c4f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c238:	b29b      	uxth	r3, r3
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c244:	b29b      	uxth	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 808e 	beq.w	800c368 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c24c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 8089 	beq.w	800c368 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	330c      	adds	r3, #12
 800c25c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c26c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	330c      	adds	r3, #12
 800c276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c27a:	647a      	str	r2, [r7, #68]	; 0x44
 800c27c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c282:	e841 2300 	strex	r3, r2, [r1]
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1e3      	bne.n	800c256 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3314      	adds	r3, #20
 800c294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	e853 3f00 	ldrex	r3, [r3]
 800c29c:	623b      	str	r3, [r7, #32]
   return(result);
 800c29e:	6a3b      	ldr	r3, [r7, #32]
 800c2a0:	f023 0301 	bic.w	r3, r3, #1
 800c2a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3314      	adds	r3, #20
 800c2ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2b2:	633a      	str	r2, [r7, #48]	; 0x30
 800c2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e3      	bne.n	800c28e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	330c      	adds	r3, #12
 800c2da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	e853 3f00 	ldrex	r3, [r3]
 800c2e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f023 0310 	bic.w	r3, r3, #16
 800c2ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	330c      	adds	r3, #12
 800c2f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c2f8:	61fa      	str	r2, [r7, #28]
 800c2fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fc:	69b9      	ldr	r1, [r7, #24]
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	e841 2300 	strex	r3, r2, [r1]
 800c304:	617b      	str	r3, [r7, #20]
   return(result);
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1e3      	bne.n	800c2d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f844 	bl	800c3a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c31e:	e023      	b.n	800c368 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <HAL_UART_IRQHandler+0x4f4>
 800c32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c334:	2b00      	cmp	r3, #0
 800c336:	d003      	beq.n	800c340 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f8ee 	bl	800c51a <UART_Transmit_IT>
    return;
 800c33e:	e014      	b.n	800c36a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00e      	beq.n	800c36a <HAL_UART_IRQHandler+0x51e>
 800c34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c354:	2b00      	cmp	r3, #0
 800c356:	d008      	beq.n	800c36a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 f92d 	bl	800c5b8 <UART_EndTransmit_IT>
    return;
 800c35e:	e004      	b.n	800c36a <HAL_UART_IRQHandler+0x51e>
    return;
 800c360:	bf00      	nop
 800c362:	e002      	b.n	800c36a <HAL_UART_IRQHandler+0x51e>
      return;
 800c364:	bf00      	nop
 800c366:	e000      	b.n	800c36a <HAL_UART_IRQHandler+0x51e>
      return;
 800c368:	bf00      	nop
  }
}
 800c36a:	37e8      	adds	r7, #232	; 0xe8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bc80      	pop	{r7}
 800c380:	4770      	bx	lr

0800c382 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c382:	b480      	push	{r7}
 800c384:	b083      	sub	sp, #12
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c38a:	bf00      	nop
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	bc80      	pop	{r7}
 800c392:	4770      	bx	lr

0800c394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bc80      	pop	{r7}
 800c3a4:	4770      	bx	lr

0800c3a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bc80      	pop	{r7}
 800c3ba:	4770      	bx	lr

0800c3bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	88fa      	ldrh	r2, [r7, #6]
 800c3d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	88fa      	ldrh	r2, [r7, #6]
 800c3da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2222      	movs	r2, #34	; 0x22
 800c3e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d007      	beq.n	800c402 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c400:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f042 0201 	orr.w	r2, r2, #1
 800c410:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f042 0220 	orr.w	r2, r2, #32
 800c420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	bc80      	pop	{r7}
 800c42c:	4770      	bx	lr

0800c42e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c42e:	b480      	push	{r7}
 800c430:	b095      	sub	sp, #84	; 0x54
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	330c      	adds	r3, #12
 800c43c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c440:	e853 3f00 	ldrex	r3, [r3]
 800c444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c44c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	330c      	adds	r3, #12
 800c454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c456:	643a      	str	r2, [r7, #64]	; 0x40
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c45c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c45e:	e841 2300 	strex	r3, r2, [r1]
 800c462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1e5      	bne.n	800c436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3314      	adds	r3, #20
 800c470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6a3b      	ldr	r3, [r7, #32]
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	61fb      	str	r3, [r7, #28]
   return(result);
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	f023 0301 	bic.w	r3, r3, #1
 800c480:	64bb      	str	r3, [r7, #72]	; 0x48
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3314      	adds	r3, #20
 800c488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c48a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c48c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c492:	e841 2300 	strex	r3, r2, [r1]
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1e5      	bne.n	800c46a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d119      	bne.n	800c4da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	330c      	adds	r3, #12
 800c4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f023 0310 	bic.w	r3, r3, #16
 800c4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	330c      	adds	r3, #12
 800c4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4c6:	61ba      	str	r2, [r7, #24]
 800c4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6979      	ldr	r1, [r7, #20]
 800c4cc:	69ba      	ldr	r2, [r7, #24]
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e5      	bne.n	800c4a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c4e8:	bf00      	nop
 800c4ea:	3754      	adds	r7, #84	; 0x54
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bc80      	pop	{r7}
 800c4f0:	4770      	bx	lr

0800c4f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7ff ff41 	bl	800c394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c512:	bf00      	nop
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b085      	sub	sp, #20
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b21      	cmp	r3, #33	; 0x21
 800c52c:	d13e      	bne.n	800c5ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c536:	d114      	bne.n	800c562 <UART_Transmit_IT+0x48>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d110      	bne.n	800c562 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6a1b      	ldr	r3, [r3, #32]
 800c544:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c554:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a1b      	ldr	r3, [r3, #32]
 800c55a:	1c9a      	adds	r2, r3, #2
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	621a      	str	r2, [r3, #32]
 800c560:	e008      	b.n	800c574 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	1c59      	adds	r1, r3, #1
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	6211      	str	r1, [r2, #32]
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c578:	b29b      	uxth	r3, r3
 800c57a:	3b01      	subs	r3, #1
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	4619      	mov	r1, r3
 800c582:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10f      	bne.n	800c5a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68da      	ldr	r2, [r3, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c596:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68da      	ldr	r2, [r3, #12]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e000      	b.n	800c5ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c5ac:	2302      	movs	r3, #2
  }
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bc80      	pop	{r7}
 800c5b6:	4770      	bx	lr

0800c5b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68da      	ldr	r2, [r3, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff fec9 	bl	800c370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08c      	sub	sp, #48	; 0x30
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b22      	cmp	r3, #34	; 0x22
 800c5fa:	f040 80ae 	bne.w	800c75a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c606:	d117      	bne.n	800c638 <UART_Receive_IT+0x50>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d113      	bne.n	800c638 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c618:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	b29b      	uxth	r3, r3
 800c622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c626:	b29a      	uxth	r2, r3
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c630:	1c9a      	adds	r2, r3, #2
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	629a      	str	r2, [r3, #40]	; 0x28
 800c636:	e026      	b.n	800c686 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c64a:	d007      	beq.n	800c65c <UART_Receive_IT+0x74>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <UART_Receive_IT+0x82>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	691b      	ldr	r3, [r3, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	b2da      	uxtb	r2, r3
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	701a      	strb	r2, [r3, #0]
 800c668:	e008      	b.n	800c67c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c676:	b2da      	uxtb	r2, r3
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	3b01      	subs	r3, #1
 800c68e:	b29b      	uxth	r3, r3
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	4619      	mov	r1, r3
 800c694:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c696:	2b00      	cmp	r3, #0
 800c698:	d15d      	bne.n	800c756 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f022 0220 	bic.w	r2, r2, #32
 800c6a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68da      	ldr	r2, [r3, #12]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	695a      	ldr	r2, [r3, #20]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f022 0201 	bic.w	r2, r2, #1
 800c6c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2220      	movs	r2, #32
 800c6ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d135      	bne.n	800c74c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	330c      	adds	r3, #12
 800c6ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	e853 3f00 	ldrex	r3, [r3]
 800c6f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f023 0310 	bic.w	r3, r3, #16
 800c6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	330c      	adds	r3, #12
 800c704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c706:	623a      	str	r2, [r7, #32]
 800c708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70a:	69f9      	ldr	r1, [r7, #28]
 800c70c:	6a3a      	ldr	r2, [r7, #32]
 800c70e:	e841 2300 	strex	r3, r2, [r1]
 800c712:	61bb      	str	r3, [r7, #24]
   return(result);
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1e5      	bne.n	800c6e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0310 	and.w	r3, r3, #16
 800c724:	2b10      	cmp	r3, #16
 800c726:	d10a      	bne.n	800c73e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c728:	2300      	movs	r3, #0
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff fe2e 	bl	800c3a6 <HAL_UARTEx_RxEventCallback>
 800c74a:	e002      	b.n	800c752 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff fe18 	bl	800c382 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	e002      	b.n	800c75c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	e000      	b.n	800c75c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c75a:	2302      	movs	r3, #2
  }
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3730      	adds	r7, #48	; 0x30
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68da      	ldr	r2, [r3, #12]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	689a      	ldr	r2, [r3, #8]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	4313      	orrs	r3, r2
 800c792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c79e:	f023 030c 	bic.w	r3, r3, #12
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6812      	ldr	r2, [r2, #0]
 800c7a6:	68b9      	ldr	r1, [r7, #8]
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	699a      	ldr	r2, [r3, #24]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a2c      	ldr	r2, [pc, #176]	; (800c878 <UART_SetConfig+0x114>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d103      	bne.n	800c7d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c7cc:	f7fe fe30 	bl	800b430 <HAL_RCC_GetPCLK2Freq>
 800c7d0:	60f8      	str	r0, [r7, #12]
 800c7d2:	e002      	b.n	800c7da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c7d4:	f7fe fe18 	bl	800b408 <HAL_RCC_GetPCLK1Freq>
 800c7d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	4413      	add	r3, r2
 800c7e2:	009a      	lsls	r2, r3, #2
 800c7e4:	441a      	add	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f0:	4a22      	ldr	r2, [pc, #136]	; (800c87c <UART_SetConfig+0x118>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	095b      	lsrs	r3, r3, #5
 800c7f8:	0119      	lsls	r1, r3, #4
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	009a      	lsls	r2, r3, #2
 800c804:	441a      	add	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c810:	4b1a      	ldr	r3, [pc, #104]	; (800c87c <UART_SetConfig+0x118>)
 800c812:	fba3 0302 	umull	r0, r3, r3, r2
 800c816:	095b      	lsrs	r3, r3, #5
 800c818:	2064      	movs	r0, #100	; 0x64
 800c81a:	fb00 f303 	mul.w	r3, r0, r3
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	011b      	lsls	r3, r3, #4
 800c822:	3332      	adds	r3, #50	; 0x32
 800c824:	4a15      	ldr	r2, [pc, #84]	; (800c87c <UART_SetConfig+0x118>)
 800c826:	fba2 2303 	umull	r2, r3, r2, r3
 800c82a:	095b      	lsrs	r3, r3, #5
 800c82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c830:	4419      	add	r1, r3
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	009a      	lsls	r2, r3, #2
 800c83c:	441a      	add	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	fbb2 f2f3 	udiv	r2, r2, r3
 800c848:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <UART_SetConfig+0x118>)
 800c84a:	fba3 0302 	umull	r0, r3, r3, r2
 800c84e:	095b      	lsrs	r3, r3, #5
 800c850:	2064      	movs	r0, #100	; 0x64
 800c852:	fb00 f303 	mul.w	r3, r0, r3
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	011b      	lsls	r3, r3, #4
 800c85a:	3332      	adds	r3, #50	; 0x32
 800c85c:	4a07      	ldr	r2, [pc, #28]	; (800c87c <UART_SetConfig+0x118>)
 800c85e:	fba2 2303 	umull	r2, r3, r2, r3
 800c862:	095b      	lsrs	r3, r3, #5
 800c864:	f003 020f 	and.w	r2, r3, #15
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	440a      	add	r2, r1
 800c86e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	40013800 	.word	0x40013800
 800c87c:	51eb851f 	.word	0x51eb851f

0800c880 <__itoa>:
 800c880:	1e93      	subs	r3, r2, #2
 800c882:	2b22      	cmp	r3, #34	; 0x22
 800c884:	b510      	push	{r4, lr}
 800c886:	460c      	mov	r4, r1
 800c888:	d904      	bls.n	800c894 <__itoa+0x14>
 800c88a:	2300      	movs	r3, #0
 800c88c:	461c      	mov	r4, r3
 800c88e:	700b      	strb	r3, [r1, #0]
 800c890:	4620      	mov	r0, r4
 800c892:	bd10      	pop	{r4, pc}
 800c894:	2a0a      	cmp	r2, #10
 800c896:	d109      	bne.n	800c8ac <__itoa+0x2c>
 800c898:	2800      	cmp	r0, #0
 800c89a:	da07      	bge.n	800c8ac <__itoa+0x2c>
 800c89c:	232d      	movs	r3, #45	; 0x2d
 800c89e:	700b      	strb	r3, [r1, #0]
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	4240      	negs	r0, r0
 800c8a4:	4421      	add	r1, r4
 800c8a6:	f000 f8d9 	bl	800ca5c <__utoa>
 800c8aa:	e7f1      	b.n	800c890 <__itoa+0x10>
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	e7f9      	b.n	800c8a4 <__itoa+0x24>

0800c8b0 <itoa>:
 800c8b0:	f7ff bfe6 	b.w	800c880 <__itoa>

0800c8b4 <malloc>:
 800c8b4:	4b02      	ldr	r3, [pc, #8]	; (800c8c0 <malloc+0xc>)
 800c8b6:	4601      	mov	r1, r0
 800c8b8:	6818      	ldr	r0, [r3, #0]
 800c8ba:	f000 b823 	b.w	800c904 <_malloc_r>
 800c8be:	bf00      	nop
 800c8c0:	20000b98 	.word	0x20000b98

0800c8c4 <sbrk_aligned>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	4e0e      	ldr	r6, [pc, #56]	; (800c900 <sbrk_aligned+0x3c>)
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	6831      	ldr	r1, [r6, #0]
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	b911      	cbnz	r1, 800c8d6 <sbrk_aligned+0x12>
 800c8d0:	f000 f946 	bl	800cb60 <_sbrk_r>
 800c8d4:	6030      	str	r0, [r6, #0]
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4628      	mov	r0, r5
 800c8da:	f000 f941 	bl	800cb60 <_sbrk_r>
 800c8de:	1c43      	adds	r3, r0, #1
 800c8e0:	d00a      	beq.n	800c8f8 <sbrk_aligned+0x34>
 800c8e2:	1cc4      	adds	r4, r0, #3
 800c8e4:	f024 0403 	bic.w	r4, r4, #3
 800c8e8:	42a0      	cmp	r0, r4
 800c8ea:	d007      	beq.n	800c8fc <sbrk_aligned+0x38>
 800c8ec:	1a21      	subs	r1, r4, r0
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f000 f936 	bl	800cb60 <_sbrk_r>
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d101      	bne.n	800c8fc <sbrk_aligned+0x38>
 800c8f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	20001408 	.word	0x20001408

0800c904 <_malloc_r>:
 800c904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c908:	1ccd      	adds	r5, r1, #3
 800c90a:	f025 0503 	bic.w	r5, r5, #3
 800c90e:	3508      	adds	r5, #8
 800c910:	2d0c      	cmp	r5, #12
 800c912:	bf38      	it	cc
 800c914:	250c      	movcc	r5, #12
 800c916:	2d00      	cmp	r5, #0
 800c918:	4607      	mov	r7, r0
 800c91a:	db01      	blt.n	800c920 <_malloc_r+0x1c>
 800c91c:	42a9      	cmp	r1, r5
 800c91e:	d905      	bls.n	800c92c <_malloc_r+0x28>
 800c920:	230c      	movs	r3, #12
 800c922:	2600      	movs	r6, #0
 800c924:	603b      	str	r3, [r7, #0]
 800c926:	4630      	mov	r0, r6
 800c928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c92c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca00 <_malloc_r+0xfc>
 800c930:	f000 f868 	bl	800ca04 <__malloc_lock>
 800c934:	f8d8 3000 	ldr.w	r3, [r8]
 800c938:	461c      	mov	r4, r3
 800c93a:	bb5c      	cbnz	r4, 800c994 <_malloc_r+0x90>
 800c93c:	4629      	mov	r1, r5
 800c93e:	4638      	mov	r0, r7
 800c940:	f7ff ffc0 	bl	800c8c4 <sbrk_aligned>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	4604      	mov	r4, r0
 800c948:	d155      	bne.n	800c9f6 <_malloc_r+0xf2>
 800c94a:	f8d8 4000 	ldr.w	r4, [r8]
 800c94e:	4626      	mov	r6, r4
 800c950:	2e00      	cmp	r6, #0
 800c952:	d145      	bne.n	800c9e0 <_malloc_r+0xdc>
 800c954:	2c00      	cmp	r4, #0
 800c956:	d048      	beq.n	800c9ea <_malloc_r+0xe6>
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	4631      	mov	r1, r6
 800c95c:	4638      	mov	r0, r7
 800c95e:	eb04 0903 	add.w	r9, r4, r3
 800c962:	f000 f8fd 	bl	800cb60 <_sbrk_r>
 800c966:	4581      	cmp	r9, r0
 800c968:	d13f      	bne.n	800c9ea <_malloc_r+0xe6>
 800c96a:	6821      	ldr	r1, [r4, #0]
 800c96c:	4638      	mov	r0, r7
 800c96e:	1a6d      	subs	r5, r5, r1
 800c970:	4629      	mov	r1, r5
 800c972:	f7ff ffa7 	bl	800c8c4 <sbrk_aligned>
 800c976:	3001      	adds	r0, #1
 800c978:	d037      	beq.n	800c9ea <_malloc_r+0xe6>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	442b      	add	r3, r5
 800c97e:	6023      	str	r3, [r4, #0]
 800c980:	f8d8 3000 	ldr.w	r3, [r8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d038      	beq.n	800c9fa <_malloc_r+0xf6>
 800c988:	685a      	ldr	r2, [r3, #4]
 800c98a:	42a2      	cmp	r2, r4
 800c98c:	d12b      	bne.n	800c9e6 <_malloc_r+0xe2>
 800c98e:	2200      	movs	r2, #0
 800c990:	605a      	str	r2, [r3, #4]
 800c992:	e00f      	b.n	800c9b4 <_malloc_r+0xb0>
 800c994:	6822      	ldr	r2, [r4, #0]
 800c996:	1b52      	subs	r2, r2, r5
 800c998:	d41f      	bmi.n	800c9da <_malloc_r+0xd6>
 800c99a:	2a0b      	cmp	r2, #11
 800c99c:	d917      	bls.n	800c9ce <_malloc_r+0xca>
 800c99e:	1961      	adds	r1, r4, r5
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	6025      	str	r5, [r4, #0]
 800c9a4:	bf18      	it	ne
 800c9a6:	6059      	strne	r1, [r3, #4]
 800c9a8:	6863      	ldr	r3, [r4, #4]
 800c9aa:	bf08      	it	eq
 800c9ac:	f8c8 1000 	streq.w	r1, [r8]
 800c9b0:	5162      	str	r2, [r4, r5]
 800c9b2:	604b      	str	r3, [r1, #4]
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	f104 060b 	add.w	r6, r4, #11
 800c9ba:	f000 f829 	bl	800ca10 <__malloc_unlock>
 800c9be:	f026 0607 	bic.w	r6, r6, #7
 800c9c2:	1d23      	adds	r3, r4, #4
 800c9c4:	1af2      	subs	r2, r6, r3
 800c9c6:	d0ae      	beq.n	800c926 <_malloc_r+0x22>
 800c9c8:	1b9b      	subs	r3, r3, r6
 800c9ca:	50a3      	str	r3, [r4, r2]
 800c9cc:	e7ab      	b.n	800c926 <_malloc_r+0x22>
 800c9ce:	42a3      	cmp	r3, r4
 800c9d0:	6862      	ldr	r2, [r4, #4]
 800c9d2:	d1dd      	bne.n	800c990 <_malloc_r+0x8c>
 800c9d4:	f8c8 2000 	str.w	r2, [r8]
 800c9d8:	e7ec      	b.n	800c9b4 <_malloc_r+0xb0>
 800c9da:	4623      	mov	r3, r4
 800c9dc:	6864      	ldr	r4, [r4, #4]
 800c9de:	e7ac      	b.n	800c93a <_malloc_r+0x36>
 800c9e0:	4634      	mov	r4, r6
 800c9e2:	6876      	ldr	r6, [r6, #4]
 800c9e4:	e7b4      	b.n	800c950 <_malloc_r+0x4c>
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	e7cc      	b.n	800c984 <_malloc_r+0x80>
 800c9ea:	230c      	movs	r3, #12
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	603b      	str	r3, [r7, #0]
 800c9f0:	f000 f80e 	bl	800ca10 <__malloc_unlock>
 800c9f4:	e797      	b.n	800c926 <_malloc_r+0x22>
 800c9f6:	6025      	str	r5, [r4, #0]
 800c9f8:	e7dc      	b.n	800c9b4 <_malloc_r+0xb0>
 800c9fa:	605b      	str	r3, [r3, #4]
 800c9fc:	deff      	udf	#255	; 0xff
 800c9fe:	bf00      	nop
 800ca00:	20001404 	.word	0x20001404

0800ca04 <__malloc_lock>:
 800ca04:	4801      	ldr	r0, [pc, #4]	; (800ca0c <__malloc_lock+0x8>)
 800ca06:	f000 b8e5 	b.w	800cbd4 <__retarget_lock_acquire_recursive>
 800ca0a:	bf00      	nop
 800ca0c:	20001544 	.word	0x20001544

0800ca10 <__malloc_unlock>:
 800ca10:	4801      	ldr	r0, [pc, #4]	; (800ca18 <__malloc_unlock+0x8>)
 800ca12:	f000 b8e0 	b.w	800cbd6 <__retarget_lock_release_recursive>
 800ca16:	bf00      	nop
 800ca18:	20001544 	.word	0x20001544

0800ca1c <siprintf>:
 800ca1c:	b40e      	push	{r1, r2, r3}
 800ca1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca22:	b500      	push	{lr}
 800ca24:	b09c      	sub	sp, #112	; 0x70
 800ca26:	ab1d      	add	r3, sp, #116	; 0x74
 800ca28:	9002      	str	r0, [sp, #8]
 800ca2a:	9006      	str	r0, [sp, #24]
 800ca2c:	9107      	str	r1, [sp, #28]
 800ca2e:	9104      	str	r1, [sp, #16]
 800ca30:	4808      	ldr	r0, [pc, #32]	; (800ca54 <siprintf+0x38>)
 800ca32:	4909      	ldr	r1, [pc, #36]	; (800ca58 <siprintf+0x3c>)
 800ca34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca38:	9105      	str	r1, [sp, #20]
 800ca3a:	6800      	ldr	r0, [r0, #0]
 800ca3c:	a902      	add	r1, sp, #8
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	f000 f974 	bl	800cd2c <_svfiprintf_r>
 800ca44:	2200      	movs	r2, #0
 800ca46:	9b02      	ldr	r3, [sp, #8]
 800ca48:	701a      	strb	r2, [r3, #0]
 800ca4a:	b01c      	add	sp, #112	; 0x70
 800ca4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca50:	b003      	add	sp, #12
 800ca52:	4770      	bx	lr
 800ca54:	20000b98 	.word	0x20000b98
 800ca58:	ffff0208 	.word	0xffff0208

0800ca5c <__utoa>:
 800ca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5e:	b08b      	sub	sp, #44	; 0x2c
 800ca60:	4605      	mov	r5, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	466e      	mov	r6, sp
 800ca66:	4c1d      	ldr	r4, [pc, #116]	; (800cadc <__utoa+0x80>)
 800ca68:	f104 0c20 	add.w	ip, r4, #32
 800ca6c:	4637      	mov	r7, r6
 800ca6e:	6820      	ldr	r0, [r4, #0]
 800ca70:	6861      	ldr	r1, [r4, #4]
 800ca72:	3408      	adds	r4, #8
 800ca74:	c703      	stmia	r7!, {r0, r1}
 800ca76:	4564      	cmp	r4, ip
 800ca78:	463e      	mov	r6, r7
 800ca7a:	d1f7      	bne.n	800ca6c <__utoa+0x10>
 800ca7c:	7921      	ldrb	r1, [r4, #4]
 800ca7e:	6820      	ldr	r0, [r4, #0]
 800ca80:	7139      	strb	r1, [r7, #4]
 800ca82:	1e91      	subs	r1, r2, #2
 800ca84:	2922      	cmp	r1, #34	; 0x22
 800ca86:	6038      	str	r0, [r7, #0]
 800ca88:	f04f 0100 	mov.w	r1, #0
 800ca8c:	d904      	bls.n	800ca98 <__utoa+0x3c>
 800ca8e:	7019      	strb	r1, [r3, #0]
 800ca90:	460b      	mov	r3, r1
 800ca92:	4618      	mov	r0, r3
 800ca94:	b00b      	add	sp, #44	; 0x2c
 800ca96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca98:	1e58      	subs	r0, r3, #1
 800ca9a:	4684      	mov	ip, r0
 800ca9c:	fbb5 f7f2 	udiv	r7, r5, r2
 800caa0:	fb02 5617 	mls	r6, r2, r7, r5
 800caa4:	3628      	adds	r6, #40	; 0x28
 800caa6:	446e      	add	r6, sp
 800caa8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800caac:	460c      	mov	r4, r1
 800caae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cab2:	462e      	mov	r6, r5
 800cab4:	42b2      	cmp	r2, r6
 800cab6:	463d      	mov	r5, r7
 800cab8:	f101 0101 	add.w	r1, r1, #1
 800cabc:	d9ee      	bls.n	800ca9c <__utoa+0x40>
 800cabe:	2200      	movs	r2, #0
 800cac0:	545a      	strb	r2, [r3, r1]
 800cac2:	1919      	adds	r1, r3, r4
 800cac4:	1aa5      	subs	r5, r4, r2
 800cac6:	42aa      	cmp	r2, r5
 800cac8:	dae3      	bge.n	800ca92 <__utoa+0x36>
 800caca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cace:	780e      	ldrb	r6, [r1, #0]
 800cad0:	3201      	adds	r2, #1
 800cad2:	7006      	strb	r6, [r0, #0]
 800cad4:	f801 5901 	strb.w	r5, [r1], #-1
 800cad8:	e7f4      	b.n	800cac4 <__utoa+0x68>
 800cada:	bf00      	nop
 800cadc:	0800d77a 	.word	0x0800d77a

0800cae0 <strcat>:
 800cae0:	4602      	mov	r2, r0
 800cae2:	b510      	push	{r4, lr}
 800cae4:	7814      	ldrb	r4, [r2, #0]
 800cae6:	4613      	mov	r3, r2
 800cae8:	3201      	adds	r2, #1
 800caea:	2c00      	cmp	r4, #0
 800caec:	d1fa      	bne.n	800cae4 <strcat+0x4>
 800caee:	3b01      	subs	r3, #1
 800caf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caf8:	2a00      	cmp	r2, #0
 800cafa:	d1f9      	bne.n	800caf0 <strcat+0x10>
 800cafc:	bd10      	pop	{r4, pc}

0800cafe <strncpy>:
 800cafe:	4603      	mov	r3, r0
 800cb00:	b510      	push	{r4, lr}
 800cb02:	3901      	subs	r1, #1
 800cb04:	b132      	cbz	r2, 800cb14 <strncpy+0x16>
 800cb06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb0a:	3a01      	subs	r2, #1
 800cb0c:	f803 4b01 	strb.w	r4, [r3], #1
 800cb10:	2c00      	cmp	r4, #0
 800cb12:	d1f7      	bne.n	800cb04 <strncpy+0x6>
 800cb14:	2100      	movs	r1, #0
 800cb16:	441a      	add	r2, r3
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d100      	bne.n	800cb1e <strncpy+0x20>
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb22:	e7f9      	b.n	800cb18 <strncpy+0x1a>

0800cb24 <strstr>:
 800cb24:	780a      	ldrb	r2, [r1, #0]
 800cb26:	b570      	push	{r4, r5, r6, lr}
 800cb28:	b96a      	cbnz	r2, 800cb46 <strstr+0x22>
 800cb2a:	bd70      	pop	{r4, r5, r6, pc}
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d109      	bne.n	800cb44 <strstr+0x20>
 800cb30:	460c      	mov	r4, r1
 800cb32:	4605      	mov	r5, r0
 800cb34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d0f6      	beq.n	800cb2a <strstr+0x6>
 800cb3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cb40:	429e      	cmp	r6, r3
 800cb42:	d0f7      	beq.n	800cb34 <strstr+0x10>
 800cb44:	3001      	adds	r0, #1
 800cb46:	7803      	ldrb	r3, [r0, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1ef      	bne.n	800cb2c <strstr+0x8>
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	e7ec      	b.n	800cb2a <strstr+0x6>

0800cb50 <memset>:
 800cb50:	4603      	mov	r3, r0
 800cb52:	4402      	add	r2, r0
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d100      	bne.n	800cb5a <memset+0xa>
 800cb58:	4770      	bx	lr
 800cb5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cb5e:	e7f9      	b.n	800cb54 <memset+0x4>

0800cb60 <_sbrk_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	2300      	movs	r3, #0
 800cb64:	4d05      	ldr	r5, [pc, #20]	; (800cb7c <_sbrk_r+0x1c>)
 800cb66:	4604      	mov	r4, r0
 800cb68:	4608      	mov	r0, r1
 800cb6a:	602b      	str	r3, [r5, #0]
 800cb6c:	f7fb ff84 	bl	8008a78 <_sbrk>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_sbrk_r+0x1a>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_sbrk_r+0x1a>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	20001548 	.word	0x20001548

0800cb80 <__errno>:
 800cb80:	4b01      	ldr	r3, [pc, #4]	; (800cb88 <__errno+0x8>)
 800cb82:	6818      	ldr	r0, [r3, #0]
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	20000b98 	.word	0x20000b98

0800cb8c <__libc_init_array>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	2600      	movs	r6, #0
 800cb90:	4d0c      	ldr	r5, [pc, #48]	; (800cbc4 <__libc_init_array+0x38>)
 800cb92:	4c0d      	ldr	r4, [pc, #52]	; (800cbc8 <__libc_init_array+0x3c>)
 800cb94:	1b64      	subs	r4, r4, r5
 800cb96:	10a4      	asrs	r4, r4, #2
 800cb98:	42a6      	cmp	r6, r4
 800cb9a:	d109      	bne.n	800cbb0 <__libc_init_array+0x24>
 800cb9c:	f000 fbc6 	bl	800d32c <_init>
 800cba0:	2600      	movs	r6, #0
 800cba2:	4d0a      	ldr	r5, [pc, #40]	; (800cbcc <__libc_init_array+0x40>)
 800cba4:	4c0a      	ldr	r4, [pc, #40]	; (800cbd0 <__libc_init_array+0x44>)
 800cba6:	1b64      	subs	r4, r4, r5
 800cba8:	10a4      	asrs	r4, r4, #2
 800cbaa:	42a6      	cmp	r6, r4
 800cbac:	d105      	bne.n	800cbba <__libc_init_array+0x2e>
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
 800cbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb4:	4798      	blx	r3
 800cbb6:	3601      	adds	r6, #1
 800cbb8:	e7ee      	b.n	800cb98 <__libc_init_array+0xc>
 800cbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbbe:	4798      	blx	r3
 800cbc0:	3601      	adds	r6, #1
 800cbc2:	e7f2      	b.n	800cbaa <__libc_init_array+0x1e>
 800cbc4:	0800d7d4 	.word	0x0800d7d4
 800cbc8:	0800d7d4 	.word	0x0800d7d4
 800cbcc:	0800d7d4 	.word	0x0800d7d4
 800cbd0:	0800d7d8 	.word	0x0800d7d8

0800cbd4 <__retarget_lock_acquire_recursive>:
 800cbd4:	4770      	bx	lr

0800cbd6 <__retarget_lock_release_recursive>:
 800cbd6:	4770      	bx	lr

0800cbd8 <strcpy>:
 800cbd8:	4603      	mov	r3, r0
 800cbda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbde:	f803 2b01 	strb.w	r2, [r3], #1
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	d1f9      	bne.n	800cbda <strcpy+0x2>
 800cbe6:	4770      	bx	lr

0800cbe8 <_free_r>:
 800cbe8:	b538      	push	{r3, r4, r5, lr}
 800cbea:	4605      	mov	r5, r0
 800cbec:	2900      	cmp	r1, #0
 800cbee:	d040      	beq.n	800cc72 <_free_r+0x8a>
 800cbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf4:	1f0c      	subs	r4, r1, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	bfb8      	it	lt
 800cbfa:	18e4      	addlt	r4, r4, r3
 800cbfc:	f7ff ff02 	bl	800ca04 <__malloc_lock>
 800cc00:	4a1c      	ldr	r2, [pc, #112]	; (800cc74 <_free_r+0x8c>)
 800cc02:	6813      	ldr	r3, [r2, #0]
 800cc04:	b933      	cbnz	r3, 800cc14 <_free_r+0x2c>
 800cc06:	6063      	str	r3, [r4, #4]
 800cc08:	6014      	str	r4, [r2, #0]
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc10:	f7ff befe 	b.w	800ca10 <__malloc_unlock>
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	d908      	bls.n	800cc2a <_free_r+0x42>
 800cc18:	6820      	ldr	r0, [r4, #0]
 800cc1a:	1821      	adds	r1, r4, r0
 800cc1c:	428b      	cmp	r3, r1
 800cc1e:	bf01      	itttt	eq
 800cc20:	6819      	ldreq	r1, [r3, #0]
 800cc22:	685b      	ldreq	r3, [r3, #4]
 800cc24:	1809      	addeq	r1, r1, r0
 800cc26:	6021      	streq	r1, [r4, #0]
 800cc28:	e7ed      	b.n	800cc06 <_free_r+0x1e>
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	b10b      	cbz	r3, 800cc34 <_free_r+0x4c>
 800cc30:	42a3      	cmp	r3, r4
 800cc32:	d9fa      	bls.n	800cc2a <_free_r+0x42>
 800cc34:	6811      	ldr	r1, [r2, #0]
 800cc36:	1850      	adds	r0, r2, r1
 800cc38:	42a0      	cmp	r0, r4
 800cc3a:	d10b      	bne.n	800cc54 <_free_r+0x6c>
 800cc3c:	6820      	ldr	r0, [r4, #0]
 800cc3e:	4401      	add	r1, r0
 800cc40:	1850      	adds	r0, r2, r1
 800cc42:	4283      	cmp	r3, r0
 800cc44:	6011      	str	r1, [r2, #0]
 800cc46:	d1e0      	bne.n	800cc0a <_free_r+0x22>
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	4408      	add	r0, r1
 800cc4e:	6010      	str	r0, [r2, #0]
 800cc50:	6053      	str	r3, [r2, #4]
 800cc52:	e7da      	b.n	800cc0a <_free_r+0x22>
 800cc54:	d902      	bls.n	800cc5c <_free_r+0x74>
 800cc56:	230c      	movs	r3, #12
 800cc58:	602b      	str	r3, [r5, #0]
 800cc5a:	e7d6      	b.n	800cc0a <_free_r+0x22>
 800cc5c:	6820      	ldr	r0, [r4, #0]
 800cc5e:	1821      	adds	r1, r4, r0
 800cc60:	428b      	cmp	r3, r1
 800cc62:	bf01      	itttt	eq
 800cc64:	6819      	ldreq	r1, [r3, #0]
 800cc66:	685b      	ldreq	r3, [r3, #4]
 800cc68:	1809      	addeq	r1, r1, r0
 800cc6a:	6021      	streq	r1, [r4, #0]
 800cc6c:	6063      	str	r3, [r4, #4]
 800cc6e:	6054      	str	r4, [r2, #4]
 800cc70:	e7cb      	b.n	800cc0a <_free_r+0x22>
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	20001404 	.word	0x20001404

0800cc78 <__ssputs_r>:
 800cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc7c:	461f      	mov	r7, r3
 800cc7e:	688e      	ldr	r6, [r1, #8]
 800cc80:	4682      	mov	sl, r0
 800cc82:	42be      	cmp	r6, r7
 800cc84:	460c      	mov	r4, r1
 800cc86:	4690      	mov	r8, r2
 800cc88:	680b      	ldr	r3, [r1, #0]
 800cc8a:	d82c      	bhi.n	800cce6 <__ssputs_r+0x6e>
 800cc8c:	898a      	ldrh	r2, [r1, #12]
 800cc8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc92:	d026      	beq.n	800cce2 <__ssputs_r+0x6a>
 800cc94:	6965      	ldr	r5, [r4, #20]
 800cc96:	6909      	ldr	r1, [r1, #16]
 800cc98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc9c:	eba3 0901 	sub.w	r9, r3, r1
 800cca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cca4:	1c7b      	adds	r3, r7, #1
 800cca6:	444b      	add	r3, r9
 800cca8:	106d      	asrs	r5, r5, #1
 800ccaa:	429d      	cmp	r5, r3
 800ccac:	bf38      	it	cc
 800ccae:	461d      	movcc	r5, r3
 800ccb0:	0553      	lsls	r3, r2, #21
 800ccb2:	d527      	bpl.n	800cd04 <__ssputs_r+0x8c>
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7ff fe25 	bl	800c904 <_malloc_r>
 800ccba:	4606      	mov	r6, r0
 800ccbc:	b360      	cbz	r0, 800cd18 <__ssputs_r+0xa0>
 800ccbe:	464a      	mov	r2, r9
 800ccc0:	6921      	ldr	r1, [r4, #16]
 800ccc2:	f000 fb1c 	bl	800d2fe <memcpy>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd0:	81a3      	strh	r3, [r4, #12]
 800ccd2:	6126      	str	r6, [r4, #16]
 800ccd4:	444e      	add	r6, r9
 800ccd6:	6026      	str	r6, [r4, #0]
 800ccd8:	463e      	mov	r6, r7
 800ccda:	6165      	str	r5, [r4, #20]
 800ccdc:	eba5 0509 	sub.w	r5, r5, r9
 800cce0:	60a5      	str	r5, [r4, #8]
 800cce2:	42be      	cmp	r6, r7
 800cce4:	d900      	bls.n	800cce8 <__ssputs_r+0x70>
 800cce6:	463e      	mov	r6, r7
 800cce8:	4632      	mov	r2, r6
 800ccea:	4641      	mov	r1, r8
 800ccec:	6820      	ldr	r0, [r4, #0]
 800ccee:	f000 fade 	bl	800d2ae <memmove>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	68a3      	ldr	r3, [r4, #8]
 800ccf6:	1b9b      	subs	r3, r3, r6
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	4433      	add	r3, r6
 800ccfe:	6023      	str	r3, [r4, #0]
 800cd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd04:	462a      	mov	r2, r5
 800cd06:	f000 faa3 	bl	800d250 <_realloc_r>
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d1e0      	bne.n	800ccd2 <__ssputs_r+0x5a>
 800cd10:	4650      	mov	r0, sl
 800cd12:	6921      	ldr	r1, [r4, #16]
 800cd14:	f7ff ff68 	bl	800cbe8 <_free_r>
 800cd18:	230c      	movs	r3, #12
 800cd1a:	f8ca 3000 	str.w	r3, [sl]
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	e7e9      	b.n	800cd00 <__ssputs_r+0x88>

0800cd2c <_svfiprintf_r>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	4698      	mov	r8, r3
 800cd32:	898b      	ldrh	r3, [r1, #12]
 800cd34:	4607      	mov	r7, r0
 800cd36:	061b      	lsls	r3, r3, #24
 800cd38:	460d      	mov	r5, r1
 800cd3a:	4614      	mov	r4, r2
 800cd3c:	b09d      	sub	sp, #116	; 0x74
 800cd3e:	d50e      	bpl.n	800cd5e <_svfiprintf_r+0x32>
 800cd40:	690b      	ldr	r3, [r1, #16]
 800cd42:	b963      	cbnz	r3, 800cd5e <_svfiprintf_r+0x32>
 800cd44:	2140      	movs	r1, #64	; 0x40
 800cd46:	f7ff fddd 	bl	800c904 <_malloc_r>
 800cd4a:	6028      	str	r0, [r5, #0]
 800cd4c:	6128      	str	r0, [r5, #16]
 800cd4e:	b920      	cbnz	r0, 800cd5a <_svfiprintf_r+0x2e>
 800cd50:	230c      	movs	r3, #12
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd58:	e0d0      	b.n	800cefc <_svfiprintf_r+0x1d0>
 800cd5a:	2340      	movs	r3, #64	; 0x40
 800cd5c:	616b      	str	r3, [r5, #20]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9309      	str	r3, [sp, #36]	; 0x24
 800cd62:	2320      	movs	r3, #32
 800cd64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd68:	2330      	movs	r3, #48	; 0x30
 800cd6a:	f04f 0901 	mov.w	r9, #1
 800cd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cf14 <_svfiprintf_r+0x1e8>
 800cd76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd7a:	4623      	mov	r3, r4
 800cd7c:	469a      	mov	sl, r3
 800cd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd82:	b10a      	cbz	r2, 800cd88 <_svfiprintf_r+0x5c>
 800cd84:	2a25      	cmp	r2, #37	; 0x25
 800cd86:	d1f9      	bne.n	800cd7c <_svfiprintf_r+0x50>
 800cd88:	ebba 0b04 	subs.w	fp, sl, r4
 800cd8c:	d00b      	beq.n	800cda6 <_svfiprintf_r+0x7a>
 800cd8e:	465b      	mov	r3, fp
 800cd90:	4622      	mov	r2, r4
 800cd92:	4629      	mov	r1, r5
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff ff6f 	bl	800cc78 <__ssputs_r>
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f000 80a9 	beq.w	800cef2 <_svfiprintf_r+0x1c6>
 800cda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda2:	445a      	add	r2, fp
 800cda4:	9209      	str	r2, [sp, #36]	; 0x24
 800cda6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 80a1 	beq.w	800cef2 <_svfiprintf_r+0x1c6>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdba:	f10a 0a01 	add.w	sl, sl, #1
 800cdbe:	9304      	str	r3, [sp, #16]
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdc6:	931a      	str	r3, [sp, #104]	; 0x68
 800cdc8:	4654      	mov	r4, sl
 800cdca:	2205      	movs	r2, #5
 800cdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd0:	4850      	ldr	r0, [pc, #320]	; (800cf14 <_svfiprintf_r+0x1e8>)
 800cdd2:	f000 fa86 	bl	800d2e2 <memchr>
 800cdd6:	9a04      	ldr	r2, [sp, #16]
 800cdd8:	b9d8      	cbnz	r0, 800ce12 <_svfiprintf_r+0xe6>
 800cdda:	06d0      	lsls	r0, r2, #27
 800cddc:	bf44      	itt	mi
 800cdde:	2320      	movmi	r3, #32
 800cde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde4:	0711      	lsls	r1, r2, #28
 800cde6:	bf44      	itt	mi
 800cde8:	232b      	movmi	r3, #43	; 0x2b
 800cdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdee:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf2:	2b2a      	cmp	r3, #42	; 0x2a
 800cdf4:	d015      	beq.n	800ce22 <_svfiprintf_r+0xf6>
 800cdf6:	4654      	mov	r4, sl
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	f04f 0c0a 	mov.w	ip, #10
 800cdfe:	9a07      	ldr	r2, [sp, #28]
 800ce00:	4621      	mov	r1, r4
 800ce02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce06:	3b30      	subs	r3, #48	; 0x30
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	d94d      	bls.n	800cea8 <_svfiprintf_r+0x17c>
 800ce0c:	b1b0      	cbz	r0, 800ce3c <_svfiprintf_r+0x110>
 800ce0e:	9207      	str	r2, [sp, #28]
 800ce10:	e014      	b.n	800ce3c <_svfiprintf_r+0x110>
 800ce12:	eba0 0308 	sub.w	r3, r0, r8
 800ce16:	fa09 f303 	lsl.w	r3, r9, r3
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	46a2      	mov	sl, r4
 800ce1e:	9304      	str	r3, [sp, #16]
 800ce20:	e7d2      	b.n	800cdc8 <_svfiprintf_r+0x9c>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	1d19      	adds	r1, r3, #4
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	9103      	str	r1, [sp, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bfbb      	ittet	lt
 800ce2e:	425b      	neglt	r3, r3
 800ce30:	f042 0202 	orrlt.w	r2, r2, #2
 800ce34:	9307      	strge	r3, [sp, #28]
 800ce36:	9307      	strlt	r3, [sp, #28]
 800ce38:	bfb8      	it	lt
 800ce3a:	9204      	strlt	r2, [sp, #16]
 800ce3c:	7823      	ldrb	r3, [r4, #0]
 800ce3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce40:	d10c      	bne.n	800ce5c <_svfiprintf_r+0x130>
 800ce42:	7863      	ldrb	r3, [r4, #1]
 800ce44:	2b2a      	cmp	r3, #42	; 0x2a
 800ce46:	d134      	bne.n	800ceb2 <_svfiprintf_r+0x186>
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	3402      	adds	r4, #2
 800ce4c:	1d1a      	adds	r2, r3, #4
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	9203      	str	r2, [sp, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bfb8      	it	lt
 800ce56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce5a:	9305      	str	r3, [sp, #20]
 800ce5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cf18 <_svfiprintf_r+0x1ec>
 800ce60:	2203      	movs	r2, #3
 800ce62:	4650      	mov	r0, sl
 800ce64:	7821      	ldrb	r1, [r4, #0]
 800ce66:	f000 fa3c 	bl	800d2e2 <memchr>
 800ce6a:	b138      	cbz	r0, 800ce7c <_svfiprintf_r+0x150>
 800ce6c:	2240      	movs	r2, #64	; 0x40
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	eba0 000a 	sub.w	r0, r0, sl
 800ce74:	4082      	lsls	r2, r0
 800ce76:	4313      	orrs	r3, r2
 800ce78:	3401      	adds	r4, #1
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce80:	2206      	movs	r2, #6
 800ce82:	4826      	ldr	r0, [pc, #152]	; (800cf1c <_svfiprintf_r+0x1f0>)
 800ce84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce88:	f000 fa2b 	bl	800d2e2 <memchr>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d038      	beq.n	800cf02 <_svfiprintf_r+0x1d6>
 800ce90:	4b23      	ldr	r3, [pc, #140]	; (800cf20 <_svfiprintf_r+0x1f4>)
 800ce92:	bb1b      	cbnz	r3, 800cedc <_svfiprintf_r+0x1b0>
 800ce94:	9b03      	ldr	r3, [sp, #12]
 800ce96:	3307      	adds	r3, #7
 800ce98:	f023 0307 	bic.w	r3, r3, #7
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	9303      	str	r3, [sp, #12]
 800cea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea2:	4433      	add	r3, r6
 800cea4:	9309      	str	r3, [sp, #36]	; 0x24
 800cea6:	e768      	b.n	800cd7a <_svfiprintf_r+0x4e>
 800cea8:	460c      	mov	r4, r1
 800ceaa:	2001      	movs	r0, #1
 800ceac:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb0:	e7a6      	b.n	800ce00 <_svfiprintf_r+0xd4>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f04f 0c0a 	mov.w	ip, #10
 800ceb8:	4619      	mov	r1, r3
 800ceba:	3401      	adds	r4, #1
 800cebc:	9305      	str	r3, [sp, #20]
 800cebe:	4620      	mov	r0, r4
 800cec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec4:	3a30      	subs	r2, #48	; 0x30
 800cec6:	2a09      	cmp	r2, #9
 800cec8:	d903      	bls.n	800ced2 <_svfiprintf_r+0x1a6>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0c6      	beq.n	800ce5c <_svfiprintf_r+0x130>
 800cece:	9105      	str	r1, [sp, #20]
 800ced0:	e7c4      	b.n	800ce5c <_svfiprintf_r+0x130>
 800ced2:	4604      	mov	r4, r0
 800ced4:	2301      	movs	r3, #1
 800ced6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceda:	e7f0      	b.n	800cebe <_svfiprintf_r+0x192>
 800cedc:	ab03      	add	r3, sp, #12
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	462a      	mov	r2, r5
 800cee2:	4638      	mov	r0, r7
 800cee4:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <_svfiprintf_r+0x1f8>)
 800cee6:	a904      	add	r1, sp, #16
 800cee8:	f3af 8000 	nop.w
 800ceec:	1c42      	adds	r2, r0, #1
 800ceee:	4606      	mov	r6, r0
 800cef0:	d1d6      	bne.n	800cea0 <_svfiprintf_r+0x174>
 800cef2:	89ab      	ldrh	r3, [r5, #12]
 800cef4:	065b      	lsls	r3, r3, #25
 800cef6:	f53f af2d 	bmi.w	800cd54 <_svfiprintf_r+0x28>
 800cefa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cefc:	b01d      	add	sp, #116	; 0x74
 800cefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf02:	ab03      	add	r3, sp, #12
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	462a      	mov	r2, r5
 800cf08:	4638      	mov	r0, r7
 800cf0a:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <_svfiprintf_r+0x1f8>)
 800cf0c:	a904      	add	r1, sp, #16
 800cf0e:	f000 f87d 	bl	800d00c <_printf_i>
 800cf12:	e7eb      	b.n	800ceec <_svfiprintf_r+0x1c0>
 800cf14:	0800d79f 	.word	0x0800d79f
 800cf18:	0800d7a5 	.word	0x0800d7a5
 800cf1c:	0800d7a9 	.word	0x0800d7a9
 800cf20:	00000000 	.word	0x00000000
 800cf24:	0800cc79 	.word	0x0800cc79

0800cf28 <_printf_common>:
 800cf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	4616      	mov	r6, r2
 800cf2e:	4699      	mov	r9, r3
 800cf30:	688a      	ldr	r2, [r1, #8]
 800cf32:	690b      	ldr	r3, [r1, #16]
 800cf34:	4607      	mov	r7, r0
 800cf36:	4293      	cmp	r3, r2
 800cf38:	bfb8      	it	lt
 800cf3a:	4613      	movlt	r3, r2
 800cf3c:	6033      	str	r3, [r6, #0]
 800cf3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf42:	460c      	mov	r4, r1
 800cf44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf48:	b10a      	cbz	r2, 800cf4e <_printf_common+0x26>
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	6033      	str	r3, [r6, #0]
 800cf4e:	6823      	ldr	r3, [r4, #0]
 800cf50:	0699      	lsls	r1, r3, #26
 800cf52:	bf42      	ittt	mi
 800cf54:	6833      	ldrmi	r3, [r6, #0]
 800cf56:	3302      	addmi	r3, #2
 800cf58:	6033      	strmi	r3, [r6, #0]
 800cf5a:	6825      	ldr	r5, [r4, #0]
 800cf5c:	f015 0506 	ands.w	r5, r5, #6
 800cf60:	d106      	bne.n	800cf70 <_printf_common+0x48>
 800cf62:	f104 0a19 	add.w	sl, r4, #25
 800cf66:	68e3      	ldr	r3, [r4, #12]
 800cf68:	6832      	ldr	r2, [r6, #0]
 800cf6a:	1a9b      	subs	r3, r3, r2
 800cf6c:	42ab      	cmp	r3, r5
 800cf6e:	dc2b      	bgt.n	800cfc8 <_printf_common+0xa0>
 800cf70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf74:	1e13      	subs	r3, r2, #0
 800cf76:	6822      	ldr	r2, [r4, #0]
 800cf78:	bf18      	it	ne
 800cf7a:	2301      	movne	r3, #1
 800cf7c:	0692      	lsls	r2, r2, #26
 800cf7e:	d430      	bmi.n	800cfe2 <_printf_common+0xba>
 800cf80:	4649      	mov	r1, r9
 800cf82:	4638      	mov	r0, r7
 800cf84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf88:	47c0      	blx	r8
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d023      	beq.n	800cfd6 <_printf_common+0xae>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	6922      	ldr	r2, [r4, #16]
 800cf92:	f003 0306 	and.w	r3, r3, #6
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	bf14      	ite	ne
 800cf9a:	2500      	movne	r5, #0
 800cf9c:	6833      	ldreq	r3, [r6, #0]
 800cf9e:	f04f 0600 	mov.w	r6, #0
 800cfa2:	bf08      	it	eq
 800cfa4:	68e5      	ldreq	r5, [r4, #12]
 800cfa6:	f104 041a 	add.w	r4, r4, #26
 800cfaa:	bf08      	it	eq
 800cfac:	1aed      	subeq	r5, r5, r3
 800cfae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cfb2:	bf08      	it	eq
 800cfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	bfc4      	itt	gt
 800cfbc:	1a9b      	subgt	r3, r3, r2
 800cfbe:	18ed      	addgt	r5, r5, r3
 800cfc0:	42b5      	cmp	r5, r6
 800cfc2:	d11a      	bne.n	800cffa <_printf_common+0xd2>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	e008      	b.n	800cfda <_printf_common+0xb2>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4652      	mov	r2, sl
 800cfcc:	4649      	mov	r1, r9
 800cfce:	4638      	mov	r0, r7
 800cfd0:	47c0      	blx	r8
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d103      	bne.n	800cfde <_printf_common+0xb6>
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfde:	3501      	adds	r5, #1
 800cfe0:	e7c1      	b.n	800cf66 <_printf_common+0x3e>
 800cfe2:	2030      	movs	r0, #48	; 0x30
 800cfe4:	18e1      	adds	r1, r4, r3
 800cfe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfea:	1c5a      	adds	r2, r3, #1
 800cfec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cff0:	4422      	add	r2, r4
 800cff2:	3302      	adds	r3, #2
 800cff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cff8:	e7c2      	b.n	800cf80 <_printf_common+0x58>
 800cffa:	2301      	movs	r3, #1
 800cffc:	4622      	mov	r2, r4
 800cffe:	4649      	mov	r1, r9
 800d000:	4638      	mov	r0, r7
 800d002:	47c0      	blx	r8
 800d004:	3001      	adds	r0, #1
 800d006:	d0e6      	beq.n	800cfd6 <_printf_common+0xae>
 800d008:	3601      	adds	r6, #1
 800d00a:	e7d9      	b.n	800cfc0 <_printf_common+0x98>

0800d00c <_printf_i>:
 800d00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d010:	7e0f      	ldrb	r7, [r1, #24]
 800d012:	4691      	mov	r9, r2
 800d014:	2f78      	cmp	r7, #120	; 0x78
 800d016:	4680      	mov	r8, r0
 800d018:	460c      	mov	r4, r1
 800d01a:	469a      	mov	sl, r3
 800d01c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d01e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d022:	d807      	bhi.n	800d034 <_printf_i+0x28>
 800d024:	2f62      	cmp	r7, #98	; 0x62
 800d026:	d80a      	bhi.n	800d03e <_printf_i+0x32>
 800d028:	2f00      	cmp	r7, #0
 800d02a:	f000 80d5 	beq.w	800d1d8 <_printf_i+0x1cc>
 800d02e:	2f58      	cmp	r7, #88	; 0x58
 800d030:	f000 80c1 	beq.w	800d1b6 <_printf_i+0x1aa>
 800d034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d03c:	e03a      	b.n	800d0b4 <_printf_i+0xa8>
 800d03e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d042:	2b15      	cmp	r3, #21
 800d044:	d8f6      	bhi.n	800d034 <_printf_i+0x28>
 800d046:	a101      	add	r1, pc, #4	; (adr r1, 800d04c <_printf_i+0x40>)
 800d048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d04c:	0800d0a5 	.word	0x0800d0a5
 800d050:	0800d0b9 	.word	0x0800d0b9
 800d054:	0800d035 	.word	0x0800d035
 800d058:	0800d035 	.word	0x0800d035
 800d05c:	0800d035 	.word	0x0800d035
 800d060:	0800d035 	.word	0x0800d035
 800d064:	0800d0b9 	.word	0x0800d0b9
 800d068:	0800d035 	.word	0x0800d035
 800d06c:	0800d035 	.word	0x0800d035
 800d070:	0800d035 	.word	0x0800d035
 800d074:	0800d035 	.word	0x0800d035
 800d078:	0800d1bf 	.word	0x0800d1bf
 800d07c:	0800d0e5 	.word	0x0800d0e5
 800d080:	0800d179 	.word	0x0800d179
 800d084:	0800d035 	.word	0x0800d035
 800d088:	0800d035 	.word	0x0800d035
 800d08c:	0800d1e1 	.word	0x0800d1e1
 800d090:	0800d035 	.word	0x0800d035
 800d094:	0800d0e5 	.word	0x0800d0e5
 800d098:	0800d035 	.word	0x0800d035
 800d09c:	0800d035 	.word	0x0800d035
 800d0a0:	0800d181 	.word	0x0800d181
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	1d1a      	adds	r2, r3, #4
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	602a      	str	r2, [r5, #0]
 800d0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e0a0      	b.n	800d1fa <_printf_i+0x1ee>
 800d0b8:	6820      	ldr	r0, [r4, #0]
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	0607      	lsls	r7, r0, #24
 800d0be:	f103 0104 	add.w	r1, r3, #4
 800d0c2:	6029      	str	r1, [r5, #0]
 800d0c4:	d501      	bpl.n	800d0ca <_printf_i+0xbe>
 800d0c6:	681e      	ldr	r6, [r3, #0]
 800d0c8:	e003      	b.n	800d0d2 <_printf_i+0xc6>
 800d0ca:	0646      	lsls	r6, r0, #25
 800d0cc:	d5fb      	bpl.n	800d0c6 <_printf_i+0xba>
 800d0ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d0d2:	2e00      	cmp	r6, #0
 800d0d4:	da03      	bge.n	800d0de <_printf_i+0xd2>
 800d0d6:	232d      	movs	r3, #45	; 0x2d
 800d0d8:	4276      	negs	r6, r6
 800d0da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0de:	230a      	movs	r3, #10
 800d0e0:	4859      	ldr	r0, [pc, #356]	; (800d248 <_printf_i+0x23c>)
 800d0e2:	e012      	b.n	800d10a <_printf_i+0xfe>
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	6820      	ldr	r0, [r4, #0]
 800d0e8:	1d19      	adds	r1, r3, #4
 800d0ea:	6029      	str	r1, [r5, #0]
 800d0ec:	0605      	lsls	r5, r0, #24
 800d0ee:	d501      	bpl.n	800d0f4 <_printf_i+0xe8>
 800d0f0:	681e      	ldr	r6, [r3, #0]
 800d0f2:	e002      	b.n	800d0fa <_printf_i+0xee>
 800d0f4:	0641      	lsls	r1, r0, #25
 800d0f6:	d5fb      	bpl.n	800d0f0 <_printf_i+0xe4>
 800d0f8:	881e      	ldrh	r6, [r3, #0]
 800d0fa:	2f6f      	cmp	r7, #111	; 0x6f
 800d0fc:	bf0c      	ite	eq
 800d0fe:	2308      	moveq	r3, #8
 800d100:	230a      	movne	r3, #10
 800d102:	4851      	ldr	r0, [pc, #324]	; (800d248 <_printf_i+0x23c>)
 800d104:	2100      	movs	r1, #0
 800d106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d10a:	6865      	ldr	r5, [r4, #4]
 800d10c:	2d00      	cmp	r5, #0
 800d10e:	bfa8      	it	ge
 800d110:	6821      	ldrge	r1, [r4, #0]
 800d112:	60a5      	str	r5, [r4, #8]
 800d114:	bfa4      	itt	ge
 800d116:	f021 0104 	bicge.w	r1, r1, #4
 800d11a:	6021      	strge	r1, [r4, #0]
 800d11c:	b90e      	cbnz	r6, 800d122 <_printf_i+0x116>
 800d11e:	2d00      	cmp	r5, #0
 800d120:	d04b      	beq.n	800d1ba <_printf_i+0x1ae>
 800d122:	4615      	mov	r5, r2
 800d124:	fbb6 f1f3 	udiv	r1, r6, r3
 800d128:	fb03 6711 	mls	r7, r3, r1, r6
 800d12c:	5dc7      	ldrb	r7, [r0, r7]
 800d12e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d132:	4637      	mov	r7, r6
 800d134:	42bb      	cmp	r3, r7
 800d136:	460e      	mov	r6, r1
 800d138:	d9f4      	bls.n	800d124 <_printf_i+0x118>
 800d13a:	2b08      	cmp	r3, #8
 800d13c:	d10b      	bne.n	800d156 <_printf_i+0x14a>
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	07de      	lsls	r6, r3, #31
 800d142:	d508      	bpl.n	800d156 <_printf_i+0x14a>
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	6861      	ldr	r1, [r4, #4]
 800d148:	4299      	cmp	r1, r3
 800d14a:	bfde      	ittt	le
 800d14c:	2330      	movle	r3, #48	; 0x30
 800d14e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d152:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d156:	1b52      	subs	r2, r2, r5
 800d158:	6122      	str	r2, [r4, #16]
 800d15a:	464b      	mov	r3, r9
 800d15c:	4621      	mov	r1, r4
 800d15e:	4640      	mov	r0, r8
 800d160:	f8cd a000 	str.w	sl, [sp]
 800d164:	aa03      	add	r2, sp, #12
 800d166:	f7ff fedf 	bl	800cf28 <_printf_common>
 800d16a:	3001      	adds	r0, #1
 800d16c:	d14a      	bne.n	800d204 <_printf_i+0x1f8>
 800d16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d172:	b004      	add	sp, #16
 800d174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	f043 0320 	orr.w	r3, r3, #32
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	2778      	movs	r7, #120	; 0x78
 800d182:	4832      	ldr	r0, [pc, #200]	; (800d24c <_printf_i+0x240>)
 800d184:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d188:	6823      	ldr	r3, [r4, #0]
 800d18a:	6829      	ldr	r1, [r5, #0]
 800d18c:	061f      	lsls	r7, r3, #24
 800d18e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d192:	d402      	bmi.n	800d19a <_printf_i+0x18e>
 800d194:	065f      	lsls	r7, r3, #25
 800d196:	bf48      	it	mi
 800d198:	b2b6      	uxthmi	r6, r6
 800d19a:	07df      	lsls	r7, r3, #31
 800d19c:	bf48      	it	mi
 800d19e:	f043 0320 	orrmi.w	r3, r3, #32
 800d1a2:	6029      	str	r1, [r5, #0]
 800d1a4:	bf48      	it	mi
 800d1a6:	6023      	strmi	r3, [r4, #0]
 800d1a8:	b91e      	cbnz	r6, 800d1b2 <_printf_i+0x1a6>
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	f023 0320 	bic.w	r3, r3, #32
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	2310      	movs	r3, #16
 800d1b4:	e7a6      	b.n	800d104 <_printf_i+0xf8>
 800d1b6:	4824      	ldr	r0, [pc, #144]	; (800d248 <_printf_i+0x23c>)
 800d1b8:	e7e4      	b.n	800d184 <_printf_i+0x178>
 800d1ba:	4615      	mov	r5, r2
 800d1bc:	e7bd      	b.n	800d13a <_printf_i+0x12e>
 800d1be:	682b      	ldr	r3, [r5, #0]
 800d1c0:	6826      	ldr	r6, [r4, #0]
 800d1c2:	1d18      	adds	r0, r3, #4
 800d1c4:	6961      	ldr	r1, [r4, #20]
 800d1c6:	6028      	str	r0, [r5, #0]
 800d1c8:	0635      	lsls	r5, r6, #24
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	d501      	bpl.n	800d1d2 <_printf_i+0x1c6>
 800d1ce:	6019      	str	r1, [r3, #0]
 800d1d0:	e002      	b.n	800d1d8 <_printf_i+0x1cc>
 800d1d2:	0670      	lsls	r0, r6, #25
 800d1d4:	d5fb      	bpl.n	800d1ce <_printf_i+0x1c2>
 800d1d6:	8019      	strh	r1, [r3, #0]
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4615      	mov	r5, r2
 800d1dc:	6123      	str	r3, [r4, #16]
 800d1de:	e7bc      	b.n	800d15a <_printf_i+0x14e>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	1d1a      	adds	r2, r3, #4
 800d1e6:	602a      	str	r2, [r5, #0]
 800d1e8:	681d      	ldr	r5, [r3, #0]
 800d1ea:	6862      	ldr	r2, [r4, #4]
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f000 f878 	bl	800d2e2 <memchr>
 800d1f2:	b108      	cbz	r0, 800d1f8 <_printf_i+0x1ec>
 800d1f4:	1b40      	subs	r0, r0, r5
 800d1f6:	6060      	str	r0, [r4, #4]
 800d1f8:	6863      	ldr	r3, [r4, #4]
 800d1fa:	6123      	str	r3, [r4, #16]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d202:	e7aa      	b.n	800d15a <_printf_i+0x14e>
 800d204:	462a      	mov	r2, r5
 800d206:	4649      	mov	r1, r9
 800d208:	4640      	mov	r0, r8
 800d20a:	6923      	ldr	r3, [r4, #16]
 800d20c:	47d0      	blx	sl
 800d20e:	3001      	adds	r0, #1
 800d210:	d0ad      	beq.n	800d16e <_printf_i+0x162>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	079b      	lsls	r3, r3, #30
 800d216:	d413      	bmi.n	800d240 <_printf_i+0x234>
 800d218:	68e0      	ldr	r0, [r4, #12]
 800d21a:	9b03      	ldr	r3, [sp, #12]
 800d21c:	4298      	cmp	r0, r3
 800d21e:	bfb8      	it	lt
 800d220:	4618      	movlt	r0, r3
 800d222:	e7a6      	b.n	800d172 <_printf_i+0x166>
 800d224:	2301      	movs	r3, #1
 800d226:	4632      	mov	r2, r6
 800d228:	4649      	mov	r1, r9
 800d22a:	4640      	mov	r0, r8
 800d22c:	47d0      	blx	sl
 800d22e:	3001      	adds	r0, #1
 800d230:	d09d      	beq.n	800d16e <_printf_i+0x162>
 800d232:	3501      	adds	r5, #1
 800d234:	68e3      	ldr	r3, [r4, #12]
 800d236:	9903      	ldr	r1, [sp, #12]
 800d238:	1a5b      	subs	r3, r3, r1
 800d23a:	42ab      	cmp	r3, r5
 800d23c:	dcf2      	bgt.n	800d224 <_printf_i+0x218>
 800d23e:	e7eb      	b.n	800d218 <_printf_i+0x20c>
 800d240:	2500      	movs	r5, #0
 800d242:	f104 0619 	add.w	r6, r4, #25
 800d246:	e7f5      	b.n	800d234 <_printf_i+0x228>
 800d248:	0800d7b0 	.word	0x0800d7b0
 800d24c:	0800d7c1 	.word	0x0800d7c1

0800d250 <_realloc_r>:
 800d250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d254:	4680      	mov	r8, r0
 800d256:	4614      	mov	r4, r2
 800d258:	460e      	mov	r6, r1
 800d25a:	b921      	cbnz	r1, 800d266 <_realloc_r+0x16>
 800d25c:	4611      	mov	r1, r2
 800d25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d262:	f7ff bb4f 	b.w	800c904 <_malloc_r>
 800d266:	b92a      	cbnz	r2, 800d274 <_realloc_r+0x24>
 800d268:	f7ff fcbe 	bl	800cbe8 <_free_r>
 800d26c:	4625      	mov	r5, r4
 800d26e:	4628      	mov	r0, r5
 800d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d274:	f000 f851 	bl	800d31a <_malloc_usable_size_r>
 800d278:	4284      	cmp	r4, r0
 800d27a:	4607      	mov	r7, r0
 800d27c:	d802      	bhi.n	800d284 <_realloc_r+0x34>
 800d27e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d282:	d812      	bhi.n	800d2aa <_realloc_r+0x5a>
 800d284:	4621      	mov	r1, r4
 800d286:	4640      	mov	r0, r8
 800d288:	f7ff fb3c 	bl	800c904 <_malloc_r>
 800d28c:	4605      	mov	r5, r0
 800d28e:	2800      	cmp	r0, #0
 800d290:	d0ed      	beq.n	800d26e <_realloc_r+0x1e>
 800d292:	42bc      	cmp	r4, r7
 800d294:	4622      	mov	r2, r4
 800d296:	4631      	mov	r1, r6
 800d298:	bf28      	it	cs
 800d29a:	463a      	movcs	r2, r7
 800d29c:	f000 f82f 	bl	800d2fe <memcpy>
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f7ff fca0 	bl	800cbe8 <_free_r>
 800d2a8:	e7e1      	b.n	800d26e <_realloc_r+0x1e>
 800d2aa:	4635      	mov	r5, r6
 800d2ac:	e7df      	b.n	800d26e <_realloc_r+0x1e>

0800d2ae <memmove>:
 800d2ae:	4288      	cmp	r0, r1
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	eb01 0402 	add.w	r4, r1, r2
 800d2b6:	d902      	bls.n	800d2be <memmove+0x10>
 800d2b8:	4284      	cmp	r4, r0
 800d2ba:	4623      	mov	r3, r4
 800d2bc:	d807      	bhi.n	800d2ce <memmove+0x20>
 800d2be:	1e43      	subs	r3, r0, #1
 800d2c0:	42a1      	cmp	r1, r4
 800d2c2:	d008      	beq.n	800d2d6 <memmove+0x28>
 800d2c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2cc:	e7f8      	b.n	800d2c0 <memmove+0x12>
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	4402      	add	r2, r0
 800d2d2:	428a      	cmp	r2, r1
 800d2d4:	d100      	bne.n	800d2d8 <memmove+0x2a>
 800d2d6:	bd10      	pop	{r4, pc}
 800d2d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2e0:	e7f7      	b.n	800d2d2 <memmove+0x24>

0800d2e2 <memchr>:
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	b2c9      	uxtb	r1, r1
 800d2e8:	4402      	add	r2, r0
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	d101      	bne.n	800d2f4 <memchr+0x12>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e003      	b.n	800d2fc <memchr+0x1a>
 800d2f4:	7804      	ldrb	r4, [r0, #0]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	428c      	cmp	r4, r1
 800d2fa:	d1f6      	bne.n	800d2ea <memchr+0x8>
 800d2fc:	bd10      	pop	{r4, pc}

0800d2fe <memcpy>:
 800d2fe:	440a      	add	r2, r1
 800d300:	4291      	cmp	r1, r2
 800d302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d306:	d100      	bne.n	800d30a <memcpy+0xc>
 800d308:	4770      	bx	lr
 800d30a:	b510      	push	{r4, lr}
 800d30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d310:	4291      	cmp	r1, r2
 800d312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d316:	d1f9      	bne.n	800d30c <memcpy+0xe>
 800d318:	bd10      	pop	{r4, pc}

0800d31a <_malloc_usable_size_r>:
 800d31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d31e:	1f18      	subs	r0, r3, #4
 800d320:	2b00      	cmp	r3, #0
 800d322:	bfbc      	itt	lt
 800d324:	580b      	ldrlt	r3, [r1, r0]
 800d326:	18c0      	addlt	r0, r0, r3
 800d328:	4770      	bx	lr
	...

0800d32c <_init>:
 800d32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32e:	bf00      	nop
 800d330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d332:	bc08      	pop	{r3}
 800d334:	469e      	mov	lr, r3
 800d336:	4770      	bx	lr

0800d338 <_fini>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	bf00      	nop
 800d33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33e:	bc08      	pop	{r3}
 800d340:	469e      	mov	lr, r3
 800d342:	4770      	bx	lr
