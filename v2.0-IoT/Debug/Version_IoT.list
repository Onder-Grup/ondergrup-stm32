
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcc8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f54  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee00  0800ee00  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee00  0800ee00  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee00  0800ee00  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee00  0800ee00  0001ee00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800ee08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000a20  0800f828  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  0800f828  00021090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139bf  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d5  00000000  00000000  0003444b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3a  00000000  00000000  00037d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b00  00000000  00000000  00053a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fe41  00000000  00000000  0006c554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005370  00000000  00000000  0010c398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800de94 	.word	0x0800de94

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800de94 	.word	0x0800de94

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00d f9d2 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c fb44 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f009 fa74 	bl	800974c <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00d f9c0 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c fb32 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f009 fa62 	bl	800974c <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00d f9ae 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c fb20 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f009 fa50 	bl	800974c <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00d f99c 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c fb0e 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f009 fa3e 	bl	800974c <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00d f9a7 	bl	800d63c <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00d f994 	bl	800d63c <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00d f958 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00c faca 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f009 f9fa 	bl	800974c <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800deac 	.word	0x0800deac
 8000364:	20000a3c 	.word	0x20000a3c
 8000368:	0800debc 	.word	0x0800debc
 800036c:	0800dec8 	.word	0x0800dec8
 8000370:	0800ded0 	.word	0x0800ded0
 8000374:	0800dee0 	.word	0x0800dee0
 8000378:	0800deec 	.word	0x0800deec
 800037c:	0800def0 	.word	0x0800def0
 8000380:	0800def4 	.word	0x0800def4

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00d f91d 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00c fa8c 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f009 f9bc 	bl	800974c <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00d f8fb 	bl	800d5ec <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00d f8eb 	bl	800d5ec <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00c fa57 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f009 f987 	bl	800974c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00c fa43 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f009 f973 	bl	800974c <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800def8 	.word	0x0800def8
 8000474:	0800df08 	.word	0x0800df08
 8000478:	20000a3c 	.word	0x20000a3c
 800047c:	0800df84 	.word	0x0800df84
 8000480:	0800df28 	.word	0x0800df28
 8000484:	0800df98 	.word	0x0800df98

08000488 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800048c:	b0fb      	sub	sp, #492	; 0x1ec
 800048e:	af00      	add	r7, sp, #0
 8000490:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000494:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000498:	6018      	str	r0, [r3, #0]
 800049a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800049e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80004a2:	6019      	str	r1, [r3, #0]
	char local_txB[50];
	int len;

	char bufferRX[200];

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80004a4:	4a6f      	ldr	r2, [pc, #444]	; (8000664 <checkMachineID+0x1dc>)
 80004a6:	4970      	ldr	r1, [pc, #448]	; (8000668 <checkMachineID+0x1e0>)
 80004a8:	4870      	ldr	r0, [pc, #448]	; (800066c <checkMachineID+0x1e4>)
 80004aa:	f00d f89f 	bl	800d5ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80004ae:	486f      	ldr	r0, [pc, #444]	; (800066c <checkMachineID+0x1e4>)
 80004b0:	f7ff feb8 	bl	8000224 <strlen>
 80004b4:	4603      	mov	r3, r0
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80004bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80004c0:	496a      	ldr	r1, [pc, #424]	; (800066c <checkMachineID+0x1e4>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	f00c fa0e 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80004c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004cc:	f009 f93e 	bl	800974c <HAL_Delay>

	sprintf(local_txA,
 80004d0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80004d4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80004d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80004dc:	4b64      	ldr	r3, [pc, #400]	; (8000670 <checkMachineID+0x1e8>)
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	4964      	ldr	r1, [pc, #400]	; (8000674 <checkMachineID+0x1ec>)
 80004e2:	f00d f883 	bl	800d5ec <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, Server2);
	len = strlen(local_txA);
 80004e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe9a 	bl	8000224 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80004f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80004fa:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80004fe:	495e      	ldr	r1, [pc, #376]	; (8000678 <checkMachineID+0x1f0>)
 8000500:	4618      	mov	r0, r3
 8000502:	f00d f873 	bl	800d5ec <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000506:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe8a 	bl	8000224 <strlen>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000518:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800051c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	f00c f9df 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000526:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800052a:	f009 f90f 	bl	800974c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800052e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe76 	bl	8000224 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000540:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000544:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	f00c f9cb 	bl	800c8e4 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 800054e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000552:	f009 f8fb 	bl	800974c <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800055e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000562:	22c8      	movs	r2, #200	; 0xc8
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	f00c f9f2 	bl	800c94e <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 800056a:	f241 3088 	movw	r0, #5000	; 0x1388
 800056e:	f009 f8ed 	bl	800974c <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") != NULL) {
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4941      	ldr	r1, [pc, #260]	; (800067c <checkMachineID+0x1f4>)
 8000578:	4618      	mov	r0, r3
 800057a:	f00d f88e 	bl	800d69a <strstr>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d067      	beq.n	8000654 <checkMachineID+0x1cc>

	    char *jsonStart = strstr(bufferRX, "{");
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	217b      	movs	r1, #123	; 0x7b
 800058a:	4618      	mov	r0, r3
 800058c:	f00d f865 	bl	800d65a <strchr>
 8000590:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
	    char *jsonEnd = strstr(bufferRX, "}");
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	217d      	movs	r1, #125	; 0x7d
 800059a:	4618      	mov	r0, r3
 800059c:	f00d f85d 	bl	800d65a <strchr>
 80005a0:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc

	    if (jsonStart != NULL && jsonEnd != NULL) {
 80005a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d053      	beq.n	8000654 <checkMachineID+0x1cc>
 80005ac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d04f      	beq.n	8000654 <checkMachineID+0x1cc>
 80005b4:	466b      	mov	r3, sp
 80005b6:	461e      	mov	r6, r3
	        int jsonLength = jsonEnd - jsonStart + 1;
 80005b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80005bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	        char jsonResponse[jsonLength + 1];
 80005c8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80005cc:	1c59      	adds	r1, r3, #1
 80005ce:	1e4b      	subs	r3, r1, #1
 80005d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80005d4:	460a      	mov	r2, r1
 80005d6:	2300      	movs	r3, #0
 80005d8:	4690      	mov	r8, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005f0:	460a      	mov	r2, r1
 80005f2:	2300      	movs	r3, #0
 80005f4:	4614      	mov	r4, r2
 80005f6:	461d      	mov	r5, r3
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	00eb      	lsls	r3, r5, #3
 8000602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000606:	00e2      	lsls	r2, r4, #3
 8000608:	460b      	mov	r3, r1
 800060a:	3307      	adds	r3, #7
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	ebad 0d03 	sub.w	sp, sp, r3
 8000614:	466b      	mov	r3, sp
 8000616:	3300      	adds	r3, #0
 8000618:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	        strncpy(jsonResponse, jsonStart, jsonLength);
 800061c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000620:	461a      	mov	r2, r3
 8000622:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8000626:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 800062a:	f00d f823 	bl	800d674 <strncpy>
	        jsonResponse[jsonLength] = '\0';
 800062e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8000632:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000636:	4413      	add	r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

	        if (strstr(jsonResponse, "\"message\": \"Machine ID is available.\"") != NULL) {
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <checkMachineID+0x1f8>)
 800063e:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8000642:	f00d f82a 	bl	800d69a <strstr>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <checkMachineID+0x1ca>
	            return 1; // Yanıt başarılı
 800064c:	2301      	movs	r3, #1
 800064e:	46b5      	mov	sp, r6
 8000650:	e001      	b.n	8000656 <checkMachineID+0x1ce>
 8000652:	46b5      	mov	sp, r6
		return 1;
	} else {
		return 0;
	}*/

	return 0; // Yanıt başarısız
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000662:	bf00      	nop
 8000664:	0800def8 	.word	0x0800def8
 8000668:	0800df08 	.word	0x0800df08
 800066c:	20000a3c 	.word	0x20000a3c
 8000670:	0800df84 	.word	0x0800df84
 8000674:	0800dfa8 	.word	0x0800dfa8
 8000678:	0800df98 	.word	0x0800df98
 800067c:	0800dfec 	.word	0x0800dfec
 8000680:	0800dffc 	.word	0x0800dffc

08000684 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f023 030f 	bic.w	r3, r3, #15
 8000694:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800069c:	7b7b      	ldrb	r3, [r7, #13]
 800069e:	f043 030c 	orr.w	r3, r3, #12
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80006a6:	7b7b      	ldrb	r3, [r7, #13]
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	f043 030c 	orr.w	r3, r3, #12
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80006ba:	7b3b      	ldrb	r3, [r7, #12]
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006c4:	bf00      	nop
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <lcd_send_cmd+0xd8>)
 80006c8:	f00a fc39 	bl	800af3e <HAL_I2C_GetError>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d0f9      	beq.n	80006c6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006d2:	bf00      	nop
 80006d4:	4821      	ldr	r0, [pc, #132]	; (800075c <lcd_send_cmd+0xd8>)
 80006d6:	f00a fc25 	bl	800af24 <HAL_I2C_GetState>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d1f9      	bne.n	80006d4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <lcd_send_cmd+0xdc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d116      	bne.n	8000716 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e00f      	b.n	800070e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f022 0208 	bic.w	r2, r2, #8
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	3310      	adds	r3, #16
 8000702:	443b      	add	r3, r7
 8000704:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d9ec      	bls.n	80006ee <lcd_send_cmd+0x6a>
 8000714:	e015      	b.n	8000742 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	73bb      	strb	r3, [r7, #14]
 800071a:	e00f      	b.n	800073c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	f042 0208 	orr.w	r2, r2, #8
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	3310      	adds	r3, #16
 8000730:	443b      	add	r3, r7
 8000732:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	3301      	adds	r3, #1
 800073a:	73bb      	strb	r3, [r7, #14]
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d9ec      	bls.n	800071c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000742:	f107 0208 	add.w	r2, r7, #8
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2304      	movs	r3, #4
 800074c:	214e      	movs	r1, #78	; 0x4e
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <lcd_send_cmd+0xd8>)
 8000750:	f009 ff88 	bl	800a664 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000e5c 	.word	0x20000e5c
 8000760:	20000b36 	.word	0x20000b36

08000764 <lcd_send_data>:

void lcd_send_data (char data) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f023 030f 	bic.w	r3, r3, #15
 8000774:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f043 030d 	orr.w	r3, r3, #13
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000786:	7b7b      	ldrb	r3, [r7, #13]
 8000788:	f043 0309 	orr.w	r3, r3, #9
 800078c:	b2db      	uxtb	r3, r3
 800078e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000790:	7b3b      	ldrb	r3, [r7, #12]
 8000792:	f043 030d 	orr.w	r3, r3, #13
 8000796:	b2db      	uxtb	r3, r3
 8000798:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800079a:	7b3b      	ldrb	r3, [r7, #12]
 800079c:	f043 0309 	orr.w	r3, r3, #9
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80007a4:	bf00      	nop
 80007a6:	4825      	ldr	r0, [pc, #148]	; (800083c <lcd_send_data+0xd8>)
 80007a8:	f00a fbc9 	bl	800af3e <HAL_I2C_GetError>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d0f9      	beq.n	80007a6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007b2:	bf00      	nop
 80007b4:	4821      	ldr	r0, [pc, #132]	; (800083c <lcd_send_data+0xd8>)
 80007b6:	f00a fbb5 	bl	800af24 <HAL_I2C_GetState>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d1f9      	bne.n	80007b4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <lcd_send_data+0xdc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d116      	bne.n	80007f6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e00f      	b.n	80007ee <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3310      	adds	r3, #16
 80007d2:	443b      	add	r3, r7
 80007d4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f022 0208 	bic.w	r2, r2, #8
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	3310      	adds	r3, #16
 80007e2:	443b      	add	r3, r7
 80007e4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d9ec      	bls.n	80007ce <lcd_send_data+0x6a>
 80007f4:	e015      	b.n	8000822 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
 80007fa:	e00f      	b.n	800081c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	3310      	adds	r3, #16
 8000800:	443b      	add	r3, r7
 8000802:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	f042 0208 	orr.w	r2, r2, #8
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	3310      	adds	r3, #16
 8000810:	443b      	add	r3, r7
 8000812:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	73bb      	strb	r3, [r7, #14]
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d9ec      	bls.n	80007fc <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000822:	f107 0208 	add.w	r2, r7, #8
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2304      	movs	r3, #4
 800082c:	214e      	movs	r1, #78	; 0x4e
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <lcd_send_data+0xd8>)
 8000830:	f009 ff18 	bl	800a664 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000e5c 	.word	0x20000e5c
 8000840:	20000b36 	.word	0x20000b36

08000844 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800084c:	e006      	b.n	800085c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff84 	bl	8000764 <lcd_send_data>
	while (*str) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f4      	bne.n	800084e <lcd_send_string+0xa>
	}
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f023 030f 	bic.w	r3, r3, #15
 8000880:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	f043 030d 	orr.w	r3, r3, #13
 800088e:	b2db      	uxtb	r3, r3
 8000890:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	f043 0309 	orr.w	r3, r3, #9
 8000898:	b2db      	uxtb	r3, r3
 800089a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800089c:	7b3b      	ldrb	r3, [r7, #12]
 800089e:	f043 030d 	orr.w	r3, r3, #13
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	f043 0309 	orr.w	r3, r3, #9
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80008b0:	bf00      	nop
 80008b2:	4825      	ldr	r0, [pc, #148]	; (8000948 <lcd_send_char+0xd8>)
 80008b4:	f00a fb43 	bl	800af3e <HAL_I2C_GetError>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d0f9      	beq.n	80008b2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80008be:	bf00      	nop
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <lcd_send_char+0xd8>)
 80008c2:	f00a fb2f 	bl	800af24 <HAL_I2C_GetState>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b20      	cmp	r3, #32
 80008ca:	d1f9      	bne.n	80008c0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <lcd_send_char+0xdc>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d116      	bne.n	8000902 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e00f      	b.n	80008fa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	3310      	adds	r3, #16
 80008de:	443b      	add	r3, r7
 80008e0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	f022 0208 	bic.w	r2, r2, #8
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	3310      	adds	r3, #16
 80008ee:	443b      	add	r3, r7
 80008f0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	3301      	adds	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d9ec      	bls.n	80008da <lcd_send_char+0x6a>
 8000900:	e015      	b.n	800092e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]
 8000906:	e00f      	b.n	8000928 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	3310      	adds	r3, #16
 800090c:	443b      	add	r3, r7
 800090e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	f042 0208 	orr.w	r2, r2, #8
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	3310      	adds	r3, #16
 800091c:	443b      	add	r3, r7
 800091e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	3301      	adds	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9ec      	bls.n	8000908 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2304      	movs	r3, #4
 8000938:	214e      	movs	r1, #78	; 0x4e
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <lcd_send_char+0xd8>)
 800093c:	f009 fe92 	bl	800a664 <HAL_I2C_Master_Transmit>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000e5c 	.word	0x20000e5c
 800094c:	20000b36 	.word	0x20000b36

08000950 <lcd_init>:

void lcd_init (void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000954:	2002      	movs	r0, #2
 8000956:	f7ff fe95 	bl	8000684 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f7ff fe92 	bl	8000684 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000960:	200c      	movs	r0, #12
 8000962:	f7ff fe8f 	bl	8000684 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000966:	2080      	movs	r0, #128	; 0x80
 8000968:	f7ff fe8c 	bl	8000684 <lcd_send_cmd>
	lcd_backlight(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 f86d 	bl	8000a4c <lcd_backlight>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}

08000976 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	460a      	mov	r2, r1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	4613      	mov	r3, r2
 8000984:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d106      	bne.n	800099a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	337f      	adds	r3, #127	; 0x7f
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe76 	bl	8000684 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000998:	e008      	b.n	80009ac <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d105      	bne.n	80009ac <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	3b41      	subs	r3, #65	; 0x41
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe6c 	bl	8000684 <lcd_send_cmd>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	603a      	str	r2, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	460b      	mov	r3, r1
 80009c2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80009c4:	79ba      	ldrb	r2, [r7, #6]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffd3 	bl	8000976 <lcd_gotoxy>
	lcd_send_string(str);
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	f7ff ff37 	bl	8000844 <lcd_send_string>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	460b      	mov	r3, r1
 80009ea:	71bb      	strb	r3, [r7, #6]
 80009ec:	4613      	mov	r3, r2
 80009ee:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80009f0:	79ba      	ldrb	r2, [r7, #6]
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffbd 	bl	8000976 <lcd_gotoxy>
    lcd_send_char(ch);
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff36 	bl	8000870 <lcd_send_char>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <lcd_clear>:

void lcd_clear(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fe37 	bl	8000684 <lcd_send_cmd>
    HAL_Delay(2);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f008 fe98 	bl	800974c <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000a30:	79ba      	ldrb	r2, [r7, #6]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff9d 	bl	8000976 <lcd_gotoxy>

    lcd_send_char(' ');
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f7ff ff17 	bl	8000870 <lcd_send_char>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <lcd_backlight+0x20>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe11 	bl	8000684 <lcd_send_cmd>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000b36 	.word	0x20000b36

08000a70 <lcd_cursor>:

void lcd_cursor(int state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000a7e:	200e      	movs	r0, #14
 8000a80:	f7ff fe00 	bl	8000684 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f7ff fdfd 	bl	8000684 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8000a8a:	e002      	b.n	8000a92 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f7ff fdf9 	bl	8000684 <lcd_send_cmd>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa0:	f3bf 8f4f 	dsb	sy
}
 8000aa4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <__NVIC_SystemReset+0x24>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000aae:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <__NVIC_SystemReset+0x24>)
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_SystemReset+0x28>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab6:	f3bf 8f4f 	dsb	sy
}
 8000aba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <__NVIC_SystemReset+0x20>
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	05fa0004 	.word	0x05fa0004

08000ac8 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fba7 	bl	8000224 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00c fc90 	bl	800d400 <malloc>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <copyText+0x2a>
        strcpy(result, text);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f00c fe27 	bl	800d740 <strcpy>
    }
    return result;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000b06:	20c8      	movs	r0, #200	; 0xc8
 8000b08:	f008 fe20 	bl	800974c <HAL_Delay>
	lcd_clear();
 8000b0c:	f7ff ff7e 	bl	8000a0c <lcd_clear>
	if(type == 1 && page == 0) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d143      	bne.n	8000b9e <printTemplate+0xa2>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d140      	bne.n	8000b9e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000b1c:	4ac1      	ldr	r2, [pc, #772]	; (8000e24 <printTemplate+0x328>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ff47 	bl	80009b4 <lcd_print>
		lcd_print(2, 3, "0");
 8000b26:	4ac0      	ldr	r2, [pc, #768]	; (8000e28 <printTemplate+0x32c>)
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff ff42 	bl	80009b4 <lcd_print>
		lcd_print(2, 4, "1");
 8000b30:	4abe      	ldr	r2, [pc, #760]	; (8000e2c <printTemplate+0x330>)
 8000b32:	2104      	movs	r1, #4
 8000b34:	2002      	movs	r0, #2
 8000b36:	f7ff ff3d 	bl	80009b4 <lcd_print>
		lcd_print(2, 5, "2");
 8000b3a:	4abd      	ldr	r2, [pc, #756]	; (8000e30 <printTemplate+0x334>)
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff ff38 	bl	80009b4 <lcd_print>
		lcd_print(2, 6, "3");
 8000b44:	4abb      	ldr	r2, [pc, #748]	; (8000e34 <printTemplate+0x338>)
 8000b46:	2106      	movs	r1, #6
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff ff33 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "4");
 8000b4e:	4aba      	ldr	r2, [pc, #744]	; (8000e38 <printTemplate+0x33c>)
 8000b50:	2107      	movs	r1, #7
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff ff2e 	bl	80009b4 <lcd_print>
		lcd_print(2, 10, "5");
 8000b58:	4ab8      	ldr	r2, [pc, #736]	; (8000e3c <printTemplate+0x340>)
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff ff29 	bl	80009b4 <lcd_print>
		lcd_print(2, 11, "6");
 8000b62:	4ab7      	ldr	r2, [pc, #732]	; (8000e40 <printTemplate+0x344>)
 8000b64:	210b      	movs	r1, #11
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff ff24 	bl	80009b4 <lcd_print>
		lcd_print(2, 12, "7");
 8000b6c:	4ab5      	ldr	r2, [pc, #724]	; (8000e44 <printTemplate+0x348>)
 8000b6e:	210c      	movs	r1, #12
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff ff1f 	bl	80009b4 <lcd_print>
		lcd_print(2, 13, "8");
 8000b76:	4ab4      	ldr	r2, [pc, #720]	; (8000e48 <printTemplate+0x34c>)
 8000b78:	210d      	movs	r1, #13
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff ff1a 	bl	80009b4 <lcd_print>
		lcd_print(2, 14, "9");
 8000b80:	4ab2      	ldr	r2, [pc, #712]	; (8000e4c <printTemplate+0x350>)
 8000b82:	210e      	movs	r1, #14
 8000b84:	2002      	movs	r0, #2
 8000b86:	f7ff ff15 	bl	80009b4 <lcd_print>
		lcd_print(1, 5, machineID);
 8000b8a:	4ab1      	ldr	r2, [pc, #708]	; (8000e50 <printTemplate+0x354>)
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ff10 	bl	80009b4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000b94:	2103      	movs	r1, #3
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff feed 	bl	8000976 <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000b9c:	e19a      	b.n	8000ed4 <printTemplate+0x3d8>
	} else if(type == 2) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	f040 80b5 	bne.w	8000d10 <printTemplate+0x214>
		if(page == 1) {
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d120      	bne.n	8000bee <printTemplate+0xf2>
			lcd_clear();
 8000bac:	f7ff ff2e 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f008 fdcb 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000bb6:	4aa7      	ldr	r2, [pc, #668]	; (8000e54 <printTemplate+0x358>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fefa 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000bc0:	48a5      	ldr	r0, [pc, #660]	; (8000e58 <printTemplate+0x35c>)
 8000bc2:	f7ff fb2f 	bl	8000224 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d805      	bhi.n	8000bd8 <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 8000bcc:	4aa2      	ldr	r2, [pc, #648]	; (8000e58 <printTemplate+0x35c>)
 8000bce:	2107      	movs	r1, #7
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff feef 	bl	80009b4 <lcd_print>
 8000bd6:	e004      	b.n	8000be2 <printTemplate+0xe6>
				slideText(wifiSSID, 7, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2107      	movs	r1, #7
 8000bdc:	489e      	ldr	r0, [pc, #632]	; (8000e58 <printTemplate+0x35c>)
 8000bde:	f001 f813 	bl	8001c08 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000be2:	4a9e      	ldr	r2, [pc, #632]	; (8000e5c <printTemplate+0x360>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fee4 	bl	80009b4 <lcd_print>
}
 8000bec:	e172      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d120      	bne.n	8000c36 <printTemplate+0x13a>
			lcd_clear();
 8000bf4:	f7ff ff0a 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f008 fda7 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000bfe:	4a95      	ldr	r2, [pc, #596]	; (8000e54 <printTemplate+0x358>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fed6 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000c08:	4893      	ldr	r0, [pc, #588]	; (8000e58 <printTemplate+0x35c>)
 8000c0a:	f7ff fb0b 	bl	8000224 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b0a      	cmp	r3, #10
 8000c12:	d805      	bhi.n	8000c20 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 8000c14:	4a90      	ldr	r2, [pc, #576]	; (8000e58 <printTemplate+0x35c>)
 8000c16:	2107      	movs	r1, #7
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fecb 	bl	80009b4 <lcd_print>
 8000c1e:	e004      	b.n	8000c2a <printTemplate+0x12e>
				slideText(wifiSSID, 7, 1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2107      	movs	r1, #7
 8000c24:	488c      	ldr	r0, [pc, #560]	; (8000e58 <printTemplate+0x35c>)
 8000c26:	f000 ffef 	bl	8001c08 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000c2a:	4a8d      	ldr	r2, [pc, #564]	; (8000e60 <printTemplate+0x364>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff fec0 	bl	80009b4 <lcd_print>
}
 8000c34:	e14e      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d120      	bne.n	8000c7e <printTemplate+0x182>
			lcd_clear();
 8000c3c:	f7ff fee6 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f008 fd83 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000c46:	4a83      	ldr	r2, [pc, #524]	; (8000e54 <printTemplate+0x358>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff feb2 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000c50:	4881      	ldr	r0, [pc, #516]	; (8000e58 <printTemplate+0x35c>)
 8000c52:	f7ff fae7 	bl	8000224 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b0a      	cmp	r3, #10
 8000c5a:	d805      	bhi.n	8000c68 <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000c5c:	4a7e      	ldr	r2, [pc, #504]	; (8000e58 <printTemplate+0x35c>)
 8000c5e:	2107      	movs	r1, #7
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fea7 	bl	80009b4 <lcd_print>
 8000c66:	e004      	b.n	8000c72 <printTemplate+0x176>
				slideText(wifiSSID, 7, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	487a      	ldr	r0, [pc, #488]	; (8000e58 <printTemplate+0x35c>)
 8000c6e:	f000 ffcb 	bl	8001c08 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000c72:	4a7c      	ldr	r2, [pc, #496]	; (8000e64 <printTemplate+0x368>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fe9c 	bl	80009b4 <lcd_print>
}
 8000c7c:	e12a      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d120      	bne.n	8000cc6 <printTemplate+0x1ca>
			lcd_clear();
 8000c84:	f7ff fec2 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f008 fd5f 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000c8e:	4a71      	ldr	r2, [pc, #452]	; (8000e54 <printTemplate+0x358>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fe8e 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000c98:	486f      	ldr	r0, [pc, #444]	; (8000e58 <printTemplate+0x35c>)
 8000c9a:	f7ff fac3 	bl	8000224 <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b0a      	cmp	r3, #10
 8000ca2:	d805      	bhi.n	8000cb0 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000ca4:	4a6c      	ldr	r2, [pc, #432]	; (8000e58 <printTemplate+0x35c>)
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fe83 	bl	80009b4 <lcd_print>
 8000cae:	e004      	b.n	8000cba <printTemplate+0x1be>
				slideText(wifiSSID, 7, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2107      	movs	r1, #7
 8000cb4:	4868      	ldr	r0, [pc, #416]	; (8000e58 <printTemplate+0x35c>)
 8000cb6:	f000 ffa7 	bl	8001c08 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000cba:	4a6b      	ldr	r2, [pc, #428]	; (8000e68 <printTemplate+0x36c>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f7ff fe78 	bl	80009b4 <lcd_print>
}
 8000cc4:	e106      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	f040 8103 	bne.w	8000ed4 <printTemplate+0x3d8>
			lcd_clear();
 8000cce:	f7ff fe9d 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f008 fd3a 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000cd8:	4a5e      	ldr	r2, [pc, #376]	; (8000e54 <printTemplate+0x358>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fe69 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000ce2:	485d      	ldr	r0, [pc, #372]	; (8000e58 <printTemplate+0x35c>)
 8000ce4:	f7ff fa9e 	bl	8000224 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d805      	bhi.n	8000cfa <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 8000cee:	4a5a      	ldr	r2, [pc, #360]	; (8000e58 <printTemplate+0x35c>)
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fe5e 	bl	80009b4 <lcd_print>
 8000cf8:	e004      	b.n	8000d04 <printTemplate+0x208>
				slideText(wifiSSID, 7, 1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	4856      	ldr	r0, [pc, #344]	; (8000e58 <printTemplate+0x35c>)
 8000d00:	f000 ff82 	bl	8001c08 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000d04:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <printTemplate+0x370>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff fe53 	bl	80009b4 <lcd_print>
}
 8000d0e:	e0e1      	b.n	8000ed4 <printTemplate+0x3d8>
	} else if(type == 3) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	f040 80de 	bne.w	8000ed4 <printTemplate+0x3d8>
		if(page == 1) {
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d120      	bne.n	8000d60 <printTemplate+0x264>
			lcd_clear();
 8000d1e:	f7ff fe75 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000d22:	2064      	movs	r0, #100	; 0x64
 8000d24:	f008 fd12 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000d28:	4a51      	ldr	r2, [pc, #324]	; (8000e70 <printTemplate+0x374>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fe41 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000d32:	4850      	ldr	r0, [pc, #320]	; (8000e74 <printTemplate+0x378>)
 8000d34:	f7ff fa76 	bl	8000224 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d805      	bhi.n	8000d4a <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 8000d3e:	4a4d      	ldr	r2, [pc, #308]	; (8000e74 <printTemplate+0x378>)
 8000d40:	2107      	movs	r1, #7
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fe36 	bl	80009b4 <lcd_print>
 8000d48:	e004      	b.n	8000d54 <printTemplate+0x258>
				slideText(wifiPass, 7, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	4849      	ldr	r0, [pc, #292]	; (8000e74 <printTemplate+0x378>)
 8000d50:	f000 ff5a 	bl	8001c08 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000d54:	4a41      	ldr	r2, [pc, #260]	; (8000e5c <printTemplate+0x360>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fe2b 	bl	80009b4 <lcd_print>
}
 8000d5e:	e0b9      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d120      	bne.n	8000da8 <printTemplate+0x2ac>
			lcd_clear();
 8000d66:	f7ff fe51 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f008 fcee 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000d70:	4a3f      	ldr	r2, [pc, #252]	; (8000e70 <printTemplate+0x374>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe1d 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000d7a:	483e      	ldr	r0, [pc, #248]	; (8000e74 <printTemplate+0x378>)
 8000d7c:	f7ff fa52 	bl	8000224 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d805      	bhi.n	8000d92 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000d86:	4a3b      	ldr	r2, [pc, #236]	; (8000e74 <printTemplate+0x378>)
 8000d88:	2107      	movs	r1, #7
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fe12 	bl	80009b4 <lcd_print>
 8000d90:	e004      	b.n	8000d9c <printTemplate+0x2a0>
				slideText(wifiPass, 7, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2107      	movs	r1, #7
 8000d96:	4837      	ldr	r0, [pc, #220]	; (8000e74 <printTemplate+0x378>)
 8000d98:	f000 ff36 	bl	8001c08 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000d9c:	4a30      	ldr	r2, [pc, #192]	; (8000e60 <printTemplate+0x364>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fe07 	bl	80009b4 <lcd_print>
}
 8000da6:	e095      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d120      	bne.n	8000df0 <printTemplate+0x2f4>
			lcd_clear();
 8000dae:	f7ff fe2d 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000db2:	2064      	movs	r0, #100	; 0x64
 8000db4:	f008 fcca 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000db8:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <printTemplate+0x374>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fdf9 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000dc2:	482c      	ldr	r0, [pc, #176]	; (8000e74 <printTemplate+0x378>)
 8000dc4:	f7ff fa2e 	bl	8000224 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b0a      	cmp	r3, #10
 8000dcc:	d805      	bhi.n	8000dda <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <printTemplate+0x378>)
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fdee 	bl	80009b4 <lcd_print>
 8000dd8:	e004      	b.n	8000de4 <printTemplate+0x2e8>
				slideText(wifiPass, 7, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2107      	movs	r1, #7
 8000dde:	4825      	ldr	r0, [pc, #148]	; (8000e74 <printTemplate+0x378>)
 8000de0:	f000 ff12 	bl	8001c08 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <printTemplate+0x368>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff fde3 	bl	80009b4 <lcd_print>
}
 8000dee:	e071      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d14b      	bne.n	8000e8e <printTemplate+0x392>
			lcd_clear();
 8000df6:	f7ff fe09 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f008 fca6 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <printTemplate+0x374>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fdd5 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <printTemplate+0x378>)
 8000e0c:	f7ff fa0a 	bl	8000224 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	d830      	bhi.n	8000e78 <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <printTemplate+0x378>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fdca 	bl	80009b4 <lcd_print>
 8000e20:	e02f      	b.n	8000e82 <printTemplate+0x386>
 8000e22:	bf00      	nop
 8000e24:	0800e024 	.word	0x0800e024
 8000e28:	0800e02c 	.word	0x0800e02c
 8000e2c:	0800e030 	.word	0x0800e030
 8000e30:	0800e034 	.word	0x0800e034
 8000e34:	0800e038 	.word	0x0800e038
 8000e38:	0800e03c 	.word	0x0800e03c
 8000e3c:	0800e040 	.word	0x0800e040
 8000e40:	0800e044 	.word	0x0800e044
 8000e44:	0800e048 	.word	0x0800e048
 8000e48:	0800e04c 	.word	0x0800e04c
 8000e4c:	0800e050 	.word	0x0800e050
 8000e50:	20000bf4 	.word	0x20000bf4
 8000e54:	0800e054 	.word	0x0800e054
 8000e58:	20000c00 	.word	0x20000c00
 8000e5c:	0800e05c 	.word	0x0800e05c
 8000e60:	0800e070 	.word	0x0800e070
 8000e64:	0800e084 	.word	0x0800e084
 8000e68:	0800e098 	.word	0x0800e098
 8000e6c:	0800e0ac 	.word	0x0800e0ac
 8000e70:	0800e0c0 	.word	0x0800e0c0
 8000e74:	20000c24 	.word	0x20000c24
				slideText(wifiPass, 7, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <printTemplate+0x3e0>)
 8000e7e:	f000 fec3 	bl	8001c08 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <printTemplate+0x3e4>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff fd94 	bl	80009b4 <lcd_print>
}
 8000e8c:	e022      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d11f      	bne.n	8000ed4 <printTemplate+0x3d8>
			lcd_clear();
 8000e94:	f7ff fdba 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f008 fc57 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e9e:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <printTemplate+0x3e8>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fd86 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <printTemplate+0x3e0>)
 8000eaa:	f7ff f9bb 	bl	8000224 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b0a      	cmp	r3, #10
 8000eb2:	d805      	bhi.n	8000ec0 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <printTemplate+0x3e0>)
 8000eb6:	2107      	movs	r1, #7
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fd7b 	bl	80009b4 <lcd_print>
 8000ebe:	e004      	b.n	8000eca <printTemplate+0x3ce>
				slideText(wifiPass, 7, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <printTemplate+0x3e0>)
 8000ec6:	f000 fe9f 	bl	8001c08 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <printTemplate+0x3ec>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fd70 	bl	80009b4 <lcd_print>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000c24 	.word	0x20000c24
 8000ee0:	0800e098 	.word	0x0800e098
 8000ee4:	0800e0c0 	.word	0x0800e0c0
 8000ee8:	0800e0ac 	.word	0x0800e0ac

08000eec <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <getCharFromCursorPosition+0x1c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000960 	.word	0x20000960

08000f0c <takeSafeVal>:

void takeSafeVal(I2C_HandleTypeDef *hi2c1) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 8000f14:	1d38      	adds	r0, r7, #4
 8000f16:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2391      	movs	r3, #145	; 0x91
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <takeSafeVal+0x3c>)
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2391      	movs	r3, #145	; 0x91
 8000f26:	2200      	movs	r2, #0
 8000f28:	21a0      	movs	r1, #160	; 0xa0
 8000f2a:	f009 fd93 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_Delay(500);
 8000f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f32:	f008 fc0b 	bl	800974c <HAL_Delay>

	safeVal = eepromData[58];
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <takeSafeVal+0x3c>)
 8000f38:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <takeSafeVal+0x40>)
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000b38 	.word	0x20000b38
 8000f4c:	20000c46 	.word	0x20000c46

08000f50 <iotModeStartup>:

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 58, 1, &eepromData, 1, 3000);
	HAL_Delay(500);
}

void iotModeStartup(I2C_HandleTypeDef *hi2c1, UART_HandleTypeDef *huart1) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	eepromKontrol4IoT();
 8000f5a:	f005 fb8d 	bl	8006678 <eepromKontrol4IoT>
	HAL_Delay(50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f008 fbf4 	bl	800974c <HAL_Delay>
	takeSafeVal(&hi2c1);
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffd0 	bl	8000f0c <takeSafeVal>

	if(safeVal == 0) {
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <iotModeStartup+0xfc>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d166      	bne.n	8001042 <iotModeStartup+0xf2>
		if(strlen(machineID) == 0) {
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <iotModeStartup+0x100>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <iotModeStartup+0x36>
			 takeMachineID(1, &hi2c1);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2001      	movs	r0, #1
 8000f82:	f000 f877 	bl	8001074 <takeMachineID>
		}

		lcd_clear();
 8000f86:	f7ff fd41 	bl	8000a0c <lcd_clear>
		HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f008 fbdd 	bl	800974c <HAL_Delay>

		if(iotMode == 1) {
 8000f92:	4b30      	ldr	r3, [pc, #192]	; (8001054 <iotModeStartup+0x104>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d14f      	bne.n	800103a <iotModeStartup+0xea>
			if(strlen(wifiSSID) == 0) {
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <iotModeStartup+0x108>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d104      	bne.n	8000fac <iotModeStartup+0x5c>
				takeWifiSSID(1, &hi2c1);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 f97e 	bl	80012a8 <takeWifiSSID>
			}

			lcd_clear();
 8000fac:	f7ff fd2e 	bl	8000a0c <lcd_clear>
			HAL_Delay(500);
 8000fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb4:	f008 fbca 	bl	800974c <HAL_Delay>

			if(strlen(wifiPass) == 0) {
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <iotModeStartup+0x10c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <iotModeStartup+0x7a>
				takeWifiPass(1, &hi2c1);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 faf7 	bl	80015b8 <takeWifiPass>
			}

			lcd_print(1, 1, "Wifi Ayarlaniyor");
 8000fca:	4a25      	ldr	r2, [pc, #148]	; (8001060 <iotModeStartup+0x110>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fcf0 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Lutfen Bekleyin ");
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <iotModeStartup+0x114>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff fceb 	bl	80009b4 <lcd_print>
			ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <iotModeStartup+0x10c>)
 8000fe2:	491d      	ldr	r1, [pc, #116]	; (8001058 <iotModeStartup+0x108>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f925 	bl	8000234 <ESP8266_Init>
			HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fee:	f008 fbad 	bl	800974c <HAL_Delay>
		}

		while(idKontrol != 1) {
 8000ff2:	e022      	b.n	800103a <iotModeStartup+0xea>
			lcd_clear();
 8000ff4:	f7ff fd0a 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f008 fba7 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "ID HATASI       ");
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <iotModeStartup+0x118>)
 8001000:	2101      	movs	r1, #1
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fcd6 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "YENI ID GIRIN...");
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <iotModeStartup+0x11c>)
 800100a:	2101      	movs	r1, #1
 800100c:	2002      	movs	r0, #2
 800100e:	f7ff fcd1 	bl	80009b4 <lcd_print>
			HAL_Delay(2000);
 8001012:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001016:	f008 fb99 	bl	800974c <HAL_Delay>
			takeMachineID(0);
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f82a 	bl	8001074 <takeMachineID>
			HAL_Delay(300);
 8001020:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001024:	f008 fb92 	bl	800974c <HAL_Delay>
			idKontrol = checkMachineID(&huart1, machineID);
 8001028:	463b      	mov	r3, r7
 800102a:	4909      	ldr	r1, [pc, #36]	; (8001050 <iotModeStartup+0x100>)
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa2b 	bl	8000488 <checkMachineID>
 8001032:	4603      	mov	r3, r0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <iotModeStartup+0x120>)
 8001038:	701a      	strb	r2, [r3, #0]
		while(idKontrol != 1) {
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <iotModeStartup+0x120>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d1d8      	bne.n	8000ff4 <iotModeStartup+0xa4>
		}
	}
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000c46 	.word	0x20000c46
 8001050:	20000bf4 	.word	0x20000bf4
 8001054:	20000cbc 	.word	0x20000cbc
 8001058:	20000c00 	.word	0x20000c00
 800105c:	20000c24 	.word	0x20000c24
 8001060:	0800e0c8 	.word	0x0800e0c8
 8001064:	0800e0dc 	.word	0x0800e0dc
 8001068:	0800e0f0 	.word	0x0800e0f0
 800106c:	0800e104 	.word	0x0800e104
 8001070:	20000c45 	.word	0x20000c45

08001074 <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fcf6 	bl	8000a70 <lcd_cursor>

	if(state == 0) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d104      	bne.n	8001094 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 800108a:	220c      	movs	r2, #12
 800108c:	2100      	movs	r1, #0
 800108e:	4883      	ldr	r0, [pc, #524]	; (800129c <takeMachineID+0x228>)
 8001090:	f00c facc 	bl	800d62c <memset>
	}

    int cursorPosition = 3;
 8001094:	2303      	movs	r3, #3
 8001096:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 800109c:	2305      	movs	r3, #5
 800109e:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 80010a0:	2100      	movs	r1, #0
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fd2a 	bl	8000afc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010a8:	2108      	movs	r1, #8
 80010aa:	487d      	ldr	r0, [pc, #500]	; (80012a0 <takeMachineID+0x22c>)
 80010ac:	f009 f91e 	bl	800a2ec <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <takeMachineID+0x54>
        	lcd_cursor(0);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fcda 	bl	8000a70 <lcd_cursor>

        	writeCharToEEPROM4ID(&hi2c1, machineID);
 80010bc:	463b      	mov	r3, r7
 80010be:	4977      	ldr	r1, [pc, #476]	; (800129c <takeMachineID+0x228>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fc1f 	bl	8001904 <writeCharToEEPROM4ID>

            break;
 80010c6:	e0e4      	b.n	8001292 <takeMachineID+0x21e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010c8:	2101      	movs	r1, #1
 80010ca:	4875      	ldr	r0, [pc, #468]	; (80012a0 <takeMachineID+0x22c>)
 80010cc:	f009 f90e 	bl	800a2ec <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d112      	bne.n	80010fc <takeMachineID+0x88>
        	if(cursorPosition == 7) {
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d102      	bne.n	80010e2 <takeMachineID+0x6e>
        		cursorPosition = 10;
 80010dc:	230a      	movs	r3, #10
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e008      	b.n	80010f4 <takeMachineID+0x80>
        	} else if (cursorPosition == 14) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b0e      	cmp	r3, #14
 80010e6:	d102      	bne.n	80010ee <takeMachineID+0x7a>
                cursorPosition = 3;
 80010e8:	2303      	movs	r3, #3
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e002      	b.n	80010f4 <takeMachineID+0x80>
            } else {
            	cursorPosition++;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 80010f4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80010f8:	f008 fb28 	bl	800974c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010fc:	2108      	movs	r1, #8
 80010fe:	4869      	ldr	r0, [pc, #420]	; (80012a4 <takeMachineID+0x230>)
 8001100:	f009 f8f4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d112      	bne.n	8001130 <takeMachineID+0xbc>
            if (cursorPosition == 3) {
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d102      	bne.n	8001116 <takeMachineID+0xa2>
                cursorPosition = 14;
 8001110:	230e      	movs	r3, #14
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e008      	b.n	8001128 <takeMachineID+0xb4>
            } else if(cursorPosition == 10) {
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b0a      	cmp	r3, #10
 800111a:	d102      	bne.n	8001122 <takeMachineID+0xae>
            	cursorPosition = 7;
 800111c:	2307      	movs	r3, #7
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e002      	b.n	8001128 <takeMachineID+0xb4>
            } else {
            	cursorPosition--;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3b01      	subs	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8001128:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800112c:	f008 fb0e 	bl	800974c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001130:	2102      	movs	r1, #2
 8001132:	485b      	ldr	r0, [pc, #364]	; (80012a0 <takeMachineID+0x22c>)
 8001134:	f009 f8da 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d16c      	bne.n	8001218 <takeMachineID+0x1a4>
        	if(cursorPosition == 3) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d105      	bne.n	8001150 <takeMachineID+0xdc>
        		machineID[machineIDLoc] = '0';
 8001144:	4a55      	ldr	r2, [pc, #340]	; (800129c <takeMachineID+0x228>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4413      	add	r3, r2
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e04f      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 4) {
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d105      	bne.n	8001162 <takeMachineID+0xee>
        		machineID[machineIDLoc] = '1';
 8001156:	4a51      	ldr	r2, [pc, #324]	; (800129c <takeMachineID+0x228>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4413      	add	r3, r2
 800115c:	2231      	movs	r2, #49	; 0x31
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e046      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 5) {
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d105      	bne.n	8001174 <takeMachineID+0x100>
        		machineID[machineIDLoc] = '2';
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <takeMachineID+0x228>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4413      	add	r3, r2
 800116e:	2232      	movs	r2, #50	; 0x32
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e03d      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 6) {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b06      	cmp	r3, #6
 8001178:	d105      	bne.n	8001186 <takeMachineID+0x112>
        		machineID[machineIDLoc] = '3';
 800117a:	4a48      	ldr	r2, [pc, #288]	; (800129c <takeMachineID+0x228>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	2233      	movs	r2, #51	; 0x33
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e034      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 7) {
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d105      	bne.n	8001198 <takeMachineID+0x124>
        		machineID[machineIDLoc] = '4';
 800118c:	4a43      	ldr	r2, [pc, #268]	; (800129c <takeMachineID+0x228>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4413      	add	r3, r2
 8001192:	2234      	movs	r2, #52	; 0x34
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e02b      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 10) {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d105      	bne.n	80011aa <takeMachineID+0x136>
        		machineID[machineIDLoc] = '5';
 800119e:	4a3f      	ldr	r2, [pc, #252]	; (800129c <takeMachineID+0x228>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4413      	add	r3, r2
 80011a4:	2235      	movs	r2, #53	; 0x35
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e022      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 11) {
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b0b      	cmp	r3, #11
 80011ae:	d105      	bne.n	80011bc <takeMachineID+0x148>
        		machineID[machineIDLoc] = '6';
 80011b0:	4a3a      	ldr	r2, [pc, #232]	; (800129c <takeMachineID+0x228>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4413      	add	r3, r2
 80011b6:	2236      	movs	r2, #54	; 0x36
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e019      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 12) {
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d105      	bne.n	80011ce <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '7';
 80011c2:	4a36      	ldr	r2, [pc, #216]	; (800129c <takeMachineID+0x228>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	2237      	movs	r2, #55	; 0x37
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e010      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 13) {
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b0d      	cmp	r3, #13
 80011d2:	d105      	bne.n	80011e0 <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '8';
 80011d4:	4a31      	ldr	r2, [pc, #196]	; (800129c <takeMachineID+0x228>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4413      	add	r3, r2
 80011da:	2238      	movs	r2, #56	; 0x38
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <takeMachineID+0x17c>
        	} else if(cursorPosition == 14) {
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2b0e      	cmp	r3, #14
 80011e4:	d104      	bne.n	80011f0 <takeMachineID+0x17c>
        		machineID[machineIDLoc] = '9';
 80011e6:	4a2d      	ldr	r2, [pc, #180]	; (800129c <takeMachineID+0x228>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4413      	add	r3, r2
 80011ec:	2239      	movs	r2, #57	; 0x39
 80011ee:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <takeMachineID+0x228>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fbed 	bl	80009de <lcd_print_char>

        	writeLoc++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	3301      	adds	r3, #1
 800120e:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8001210:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001214:	f008 fa9a 	bl	800974c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001218:	2104      	movs	r1, #4
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <takeMachineID+0x22c>)
 800121c:	f009 f866 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d12e      	bne.n	8001284 <takeMachineID+0x210>
            if(strlen(machineID) >= 1) {
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <takeMachineID+0x228>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d027      	beq.n	800127e <takeMachineID+0x20a>

                machineID[machineIDLoc] = '\0';
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <takeMachineID+0x228>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3304      	adds	r3, #4
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff fbec 	bl	8000a20 <lcd_delete_char>
                HAL_Delay(50);
 8001248:	2032      	movs	r0, #50	; 0x32
 800124a:	f008 fa7f 	bl	800974c <HAL_Delay>

                if(writeLoc > 5) {
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b05      	cmp	r3, #5
 8001252:	dd03      	ble.n	800125c <takeMachineID+0x1e8>
                	writeLoc--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e004      	b.n	8001266 <takeMachineID+0x1f2>
                } else if(writeLoc < 5) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b04      	cmp	r3, #4
 8001260:	dc01      	bgt.n	8001266 <takeMachineID+0x1f2>
                	writeLoc = 5;
 8001262:	2305      	movs	r3, #5
 8001264:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd03      	ble.n	8001274 <takeMachineID+0x200>
                	machineIDLoc--;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	3b01      	subs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e004      	b.n	800127e <takeMachineID+0x20a>
                } else if(machineIDLoc < 0) {
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	da01      	bge.n	800127e <takeMachineID+0x20a>
                	machineIDLoc = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 800127e:	20fa      	movs	r0, #250	; 0xfa
 8001280:	f008 fa64 	bl	800974c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	2002      	movs	r0, #2
 800128c:	f7ff fb73 	bl	8000976 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001290:	e70a      	b.n	80010a8 <takeMachineID+0x34>
    }
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000bf4 	.word	0x20000bf4
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40011000 	.word	0x40011000

080012a8 <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fbdc 	bl	8000a70 <lcd_cursor>

    if(state == 0) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d104      	bne.n	80012c8 <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 80012be:	2221      	movs	r2, #33	; 0x21
 80012c0:	2100      	movs	r1, #0
 80012c2:	4878      	ldr	r0, [pc, #480]	; (80014a4 <takeWifiSSID+0x1fc>)
 80012c4:	f00c f9b2 	bl	800d62c <memset>
    }

    int realCharPos = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 80012cc:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <takeWifiSSID+0x200>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
    page = 1;
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <takeWifiSSID+0x204>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 80012dc:	2307      	movs	r3, #7
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 80012e0:	2101      	movs	r1, #1
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff fc0a 	bl	8000afc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012e8:	2108      	movs	r1, #8
 80012ea:	4871      	ldr	r0, [pc, #452]	; (80014b0 <takeWifiSSID+0x208>)
 80012ec:	f008 fffe 	bl	800a2ec <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d109      	bne.n	800130a <takeWifiSSID+0x62>
            lcd_cursor(0);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fbba 	bl	8000a70 <lcd_cursor>

            writeCharToEEPROM4Wifi(&hi2c1, wifiSSID, 1);
 80012fc:	463b      	mov	r3, r7
 80012fe:	2201      	movs	r2, #1
 8001300:	4968      	ldr	r1, [pc, #416]	; (80014a4 <takeWifiSSID+0x1fc>)
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fb4a 	bl	800199c <writeCharToEEPROM4Wifi>

            break;
 8001308:	e14c      	b.n	80015a4 <takeWifiSSID+0x2fc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800130a:	2101      	movs	r1, #1
 800130c:	4868      	ldr	r0, [pc, #416]	; (80014b0 <takeWifiSSID+0x208>)
 800130e:	f008 ffed 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d166      	bne.n	80013e6 <takeWifiSSID+0x13e>
        	realCharPos++;
 8001318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131a:	3301      	adds	r3, #1
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 800131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001320:	2b50      	cmp	r3, #80	; 0x50
 8001322:	dd01      	ble.n	8001328 <takeWifiSSID+0x80>
        		realCharPos = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8001328:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <takeWifiSSID+0x200>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b10      	cmp	r3, #16
 800132e:	d152      	bne.n	80013d6 <takeWifiSSID+0x12e>
            	if(page == 1) {
 8001330:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <takeWifiSSID+0x204>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10c      	bne.n	8001352 <takeWifiSSID+0xaa>
            		cursorPosition = 1;
 8001338:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <takeWifiSSID+0x200>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
            		page++;
 800133e:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <takeWifiSSID+0x204>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a59      	ldr	r2, [pc, #356]	; (80014ac <takeWifiSSID+0x204>)
 8001346:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8001348:	2102      	movs	r1, #2
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff fbd6 	bl	8000afc <printTemplate>
 8001350:	e046      	b.n	80013e0 <takeWifiSSID+0x138>
            	} else if(page == 2) {
 8001352:	4b56      	ldr	r3, [pc, #344]	; (80014ac <takeWifiSSID+0x204>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d10c      	bne.n	8001374 <takeWifiSSID+0xcc>
            		cursorPosition = 1;
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <takeWifiSSID+0x200>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
            		page++;
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <takeWifiSSID+0x204>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <takeWifiSSID+0x204>)
 8001368:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 800136a:	2103      	movs	r1, #3
 800136c:	2002      	movs	r0, #2
 800136e:	f7ff fbc5 	bl	8000afc <printTemplate>
 8001372:	e035      	b.n	80013e0 <takeWifiSSID+0x138>
            	} else if(page == 3) {
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <takeWifiSSID+0x204>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d10c      	bne.n	8001396 <takeWifiSSID+0xee>
            		cursorPosition = 1;
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <takeWifiSSID+0x200>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
            		page++;
 8001382:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <takeWifiSSID+0x204>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <takeWifiSSID+0x204>)
 800138a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 800138c:	2104      	movs	r1, #4
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff fbb4 	bl	8000afc <printTemplate>
 8001394:	e024      	b.n	80013e0 <takeWifiSSID+0x138>
            	} else if(page == 4) {
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <takeWifiSSID+0x204>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b04      	cmp	r3, #4
 800139c:	d10c      	bne.n	80013b8 <takeWifiSSID+0x110>
            		cursorPosition = 1;
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <takeWifiSSID+0x200>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
            		page++;
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <takeWifiSSID+0x204>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a40      	ldr	r2, [pc, #256]	; (80014ac <takeWifiSSID+0x204>)
 80013ac:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80013ae:	2105      	movs	r1, #5
 80013b0:	2002      	movs	r0, #2
 80013b2:	f7ff fba3 	bl	8000afc <printTemplate>
 80013b6:	e013      	b.n	80013e0 <takeWifiSSID+0x138>
            	} else if(page == 5) {
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <takeWifiSSID+0x204>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10f      	bne.n	80013e0 <takeWifiSSID+0x138>
            		cursorPosition = 1;
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <takeWifiSSID+0x200>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <takeWifiSSID+0x204>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80013cc:	2101      	movs	r1, #1
 80013ce:	2002      	movs	r0, #2
 80013d0:	f7ff fb94 	bl	8000afc <printTemplate>
 80013d4:	e004      	b.n	80013e0 <takeWifiSSID+0x138>
            	}
            } else {
            	cursorPosition++;
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <takeWifiSSID+0x200>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <takeWifiSSID+0x200>)
 80013de:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80013e0:	20fa      	movs	r0, #250	; 0xfa
 80013e2:	f008 f9b3 	bl	800974c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80013e6:	2108      	movs	r1, #8
 80013e8:	4832      	ldr	r0, [pc, #200]	; (80014b4 <takeWifiSSID+0x20c>)
 80013ea:	f008 ff7f 	bl	800a2ec <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d169      	bne.n	80014c8 <takeWifiSSID+0x220>
        	realCharPos--;
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	3b01      	subs	r3, #1
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dc01      	bgt.n	8001404 <takeWifiSSID+0x15c>
        		realCharPos = 80;
 8001400:	2350      	movs	r3, #80	; 0x50
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <takeWifiSSID+0x200>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d155      	bne.n	80014b8 <takeWifiSSID+0x210>
            	if(page == 1) {
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <takeWifiSSID+0x204>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10a      	bne.n	800142a <takeWifiSSID+0x182>
            		cursorPosition = 16;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <takeWifiSSID+0x200>)
 8001416:	2210      	movs	r2, #16
 8001418:	601a      	str	r2, [r3, #0]
            		page = 5;
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <takeWifiSSID+0x204>)
 800141c:	2205      	movs	r2, #5
 800141e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8001420:	2105      	movs	r1, #5
 8001422:	2002      	movs	r0, #2
 8001424:	f7ff fb6a 	bl	8000afc <printTemplate>
 8001428:	e04b      	b.n	80014c2 <takeWifiSSID+0x21a>
            	} else if(page == 2) {
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <takeWifiSSID+0x204>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d10a      	bne.n	8001448 <takeWifiSSID+0x1a0>
            		cursorPosition = 16;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <takeWifiSSID+0x200>)
 8001434:	2210      	movs	r2, #16
 8001436:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <takeWifiSSID+0x204>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800143e:	2101      	movs	r1, #1
 8001440:	2002      	movs	r0, #2
 8001442:	f7ff fb5b 	bl	8000afc <printTemplate>
 8001446:	e03c      	b.n	80014c2 <takeWifiSSID+0x21a>
            	} else if(page == 3) {
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <takeWifiSSID+0x204>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d10a      	bne.n	8001466 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <takeWifiSSID+0x200>)
 8001452:	2210      	movs	r2, #16
 8001454:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <takeWifiSSID+0x204>)
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 800145c:	2102      	movs	r1, #2
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff fb4c 	bl	8000afc <printTemplate>
 8001464:	e02d      	b.n	80014c2 <takeWifiSSID+0x21a>
            	} else if(page == 4) {
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <takeWifiSSID+0x204>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d10a      	bne.n	8001484 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <takeWifiSSID+0x200>)
 8001470:	2210      	movs	r2, #16
 8001472:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <takeWifiSSID+0x204>)
 8001476:	2203      	movs	r2, #3
 8001478:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 800147a:	2103      	movs	r1, #3
 800147c:	2002      	movs	r0, #2
 800147e:	f7ff fb3d 	bl	8000afc <printTemplate>
 8001482:	e01e      	b.n	80014c2 <takeWifiSSID+0x21a>
            	} else if(page == 5) {
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <takeWifiSSID+0x204>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d11a      	bne.n	80014c2 <takeWifiSSID+0x21a>
            		cursorPosition = 16;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <takeWifiSSID+0x200>)
 800148e:	2210      	movs	r2, #16
 8001490:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <takeWifiSSID+0x204>)
 8001494:	2204      	movs	r2, #4
 8001496:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8001498:	2104      	movs	r1, #4
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff fb2e 	bl	8000afc <printTemplate>
 80014a0:	e00f      	b.n	80014c2 <takeWifiSSID+0x21a>
 80014a2:	bf00      	nop
 80014a4:	20000c00 	.word	0x20000c00
 80014a8:	20000944 	.word	0x20000944
 80014ac:	20000948 	.word	0x20000948
 80014b0:	40010800 	.word	0x40010800
 80014b4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80014b8:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <takeWifiSSID+0x304>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <takeWifiSSID+0x304>)
 80014c0:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80014c2:	20fa      	movs	r0, #250	; 0xfa
 80014c4:	f008 f942 	bl	800974c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80014c8:	2102      	movs	r1, #2
 80014ca:	4839      	ldr	r0, [pc, #228]	; (80015b0 <takeWifiSSID+0x308>)
 80014cc:	f008 ff0e 	bl	800a2ec <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d128      	bne.n	8001528 <takeWifiSSID+0x280>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	3b01      	subs	r3, #1
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd06 	bl	8000eec <getCharFromCursorPosition>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4a33      	ldr	r2, [pc, #204]	; (80015b4 <takeWifiSSID+0x30c>)
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	4413      	add	r3, r2
 80014ea:	460a      	mov	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f0:	b2d9      	uxtb	r1, r3
 80014f2:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <takeWifiSSID+0x30c>)
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fa6e 	bl	80009de <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b2d9      	uxtb	r1, r3
 800150a:	f107 0208 	add.w	r2, r7, #8
 800150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001510:	4413      	add	r3, r2
 8001512:	460a      	mov	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	3301      	adds	r3, #1
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	3301      	adds	r3, #1
 8001520:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 8001522:	20fa      	movs	r0, #250	; 0xfa
 8001524:	f008 f912 	bl	800974c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001528:	2104      	movs	r1, #4
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <takeWifiSSID+0x308>)
 800152c:	f008 fede 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d12e      	bne.n	8001594 <takeWifiSSID+0x2ec>
        	if(strlen(wifiSSID) >= 1) {
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <takeWifiSSID+0x30c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d027      	beq.n	800158e <takeWifiSSID+0x2e6>
        		wifiSSID[wifiNameLoc] = '\0';
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <takeWifiSSID+0x30c>)
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	4413      	add	r3, r2
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3306      	adds	r3, #6
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fa64 	bl	8000a20 <lcd_delete_char>
        		HAL_Delay(50);
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f008 f8f7 	bl	800974c <HAL_Delay>
        		if(writeLoc > 7) {
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	2b07      	cmp	r3, #7
 8001562:	dd03      	ble.n	800156c <takeWifiSSID+0x2c4>
        			writeLoc--;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	3b01      	subs	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156a:	e004      	b.n	8001576 <takeWifiSSID+0x2ce>
        		} else if(writeLoc < 7) {
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	2b06      	cmp	r3, #6
 8001570:	dc01      	bgt.n	8001576 <takeWifiSSID+0x2ce>
        			writeLoc = 7;
 8001572:	2307      	movs	r3, #7
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 8001576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd03      	ble.n	8001584 <takeWifiSSID+0x2dc>
        			wifiNameLoc--;
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	3b01      	subs	r3, #1
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
 8001582:	e004      	b.n	800158e <takeWifiSSID+0x2e6>
        		} else if(wifiNameLoc < 0) {
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	2b00      	cmp	r3, #0
 8001588:	da01      	bge.n	800158e <takeWifiSSID+0x2e6>
        			wifiNameLoc = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 800158e:	20fa      	movs	r0, #250	; 0xfa
 8001590:	f008 f8dc 	bl	800974c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <takeWifiSSID+0x304>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	2002      	movs	r0, #2
 800159e:	f7ff f9ea 	bl	8000976 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80015a2:	e6a1      	b.n	80012e8 <takeWifiSSID+0x40>
    }
}
 80015a4:	bf00      	nop
 80015a6:	3738      	adds	r7, #56	; 0x38
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000944 	.word	0x20000944
 80015b0:	40010800 	.word	0x40010800
 80015b4:	20000c00 	.word	0x20000c00

080015b8 <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	; 0x38
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fa54 	bl	8000a70 <lcd_cursor>

    if(state == 0) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80015ce:	2221      	movs	r2, #33	; 0x21
 80015d0:	2100      	movs	r1, #0
 80015d2:	4878      	ldr	r0, [pc, #480]	; (80017b4 <takeWifiPass+0x1fc>)
 80015d4:	f00c f82a 	bl	800d62c <memset>
    }

    int realCharPos = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 80015dc:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <takeWifiPass+0x200>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
    page = 1;
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <takeWifiPass+0x204>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 80015ec:	2307      	movs	r3, #7
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 80015f0:	2101      	movs	r1, #1
 80015f2:	2003      	movs	r0, #3
 80015f4:	f7ff fa82 	bl	8000afc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80015f8:	2108      	movs	r1, #8
 80015fa:	4871      	ldr	r0, [pc, #452]	; (80017c0 <takeWifiPass+0x208>)
 80015fc:	f008 fe76 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d109      	bne.n	800161a <takeWifiPass+0x62>
            lcd_cursor(0);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fa32 	bl	8000a70 <lcd_cursor>

            writeCharToEEPROM4Wifi(&hi2c1, wifiPass, 2);
 800160c:	463b      	mov	r3, r7
 800160e:	2202      	movs	r2, #2
 8001610:	4968      	ldr	r1, [pc, #416]	; (80017b4 <takeWifiPass+0x1fc>)
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f9c2 	bl	800199c <writeCharToEEPROM4Wifi>

            break;
 8001618:	e14c      	b.n	80018b4 <takeWifiPass+0x2fc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800161a:	2101      	movs	r1, #1
 800161c:	4868      	ldr	r0, [pc, #416]	; (80017c0 <takeWifiPass+0x208>)
 800161e:	f008 fe65 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d166      	bne.n	80016f6 <takeWifiPass+0x13e>
        	realCharPos++;
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	3301      	adds	r3, #1
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 800162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001630:	2b50      	cmp	r3, #80	; 0x50
 8001632:	dd01      	ble.n	8001638 <takeWifiPass+0x80>
        	    realCharPos = 1;
 8001634:	2301      	movs	r3, #1
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8001638:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <takeWifiPass+0x200>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b10      	cmp	r3, #16
 800163e:	d152      	bne.n	80016e6 <takeWifiPass+0x12e>
            	if(page == 1) {
 8001640:	4b5e      	ldr	r3, [pc, #376]	; (80017bc <takeWifiPass+0x204>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10c      	bne.n	8001662 <takeWifiPass+0xaa>
            		cursorPosition = 1;
 8001648:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <takeWifiPass+0x200>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
            		page++;
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <takeWifiPass+0x204>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a59      	ldr	r2, [pc, #356]	; (80017bc <takeWifiPass+0x204>)
 8001656:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001658:	2102      	movs	r1, #2
 800165a:	2003      	movs	r0, #3
 800165c:	f7ff fa4e 	bl	8000afc <printTemplate>
 8001660:	e046      	b.n	80016f0 <takeWifiPass+0x138>
            	} else if(page == 2) {
 8001662:	4b56      	ldr	r3, [pc, #344]	; (80017bc <takeWifiPass+0x204>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d10c      	bne.n	8001684 <takeWifiPass+0xcc>
            		cursorPosition = 1;
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <takeWifiPass+0x200>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
            		page++;
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <takeWifiPass+0x204>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a51      	ldr	r2, [pc, #324]	; (80017bc <takeWifiPass+0x204>)
 8001678:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800167a:	2103      	movs	r1, #3
 800167c:	2003      	movs	r0, #3
 800167e:	f7ff fa3d 	bl	8000afc <printTemplate>
 8001682:	e035      	b.n	80016f0 <takeWifiPass+0x138>
            	} else if(page == 3) {
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <takeWifiPass+0x204>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d10c      	bne.n	80016a6 <takeWifiPass+0xee>
            		cursorPosition = 1;
 800168c:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <takeWifiPass+0x200>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
            		page++;
 8001692:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <takeWifiPass+0x204>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <takeWifiPass+0x204>)
 800169a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800169c:	2104      	movs	r1, #4
 800169e:	2003      	movs	r0, #3
 80016a0:	f7ff fa2c 	bl	8000afc <printTemplate>
 80016a4:	e024      	b.n	80016f0 <takeWifiPass+0x138>
            	} else if(page == 4) {
 80016a6:	4b45      	ldr	r3, [pc, #276]	; (80017bc <takeWifiPass+0x204>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d10c      	bne.n	80016c8 <takeWifiPass+0x110>
            		cursorPosition = 1;
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <takeWifiPass+0x200>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
            		page++;
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <takeWifiPass+0x204>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <takeWifiPass+0x204>)
 80016bc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80016be:	2105      	movs	r1, #5
 80016c0:	2003      	movs	r0, #3
 80016c2:	f7ff fa1b 	bl	8000afc <printTemplate>
 80016c6:	e013      	b.n	80016f0 <takeWifiPass+0x138>
            	} else if(page == 5) {
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <takeWifiPass+0x204>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d10f      	bne.n	80016f0 <takeWifiPass+0x138>
            		cursorPosition = 1;
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <takeWifiPass+0x200>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
            		page = 1;
 80016d6:	4b39      	ldr	r3, [pc, #228]	; (80017bc <takeWifiPass+0x204>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80016dc:	2101      	movs	r1, #1
 80016de:	2003      	movs	r0, #3
 80016e0:	f7ff fa0c 	bl	8000afc <printTemplate>
 80016e4:	e004      	b.n	80016f0 <takeWifiPass+0x138>
            	}
            } else {
            	cursorPosition++;
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <takeWifiPass+0x200>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <takeWifiPass+0x200>)
 80016ee:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80016f0:	20fa      	movs	r0, #250	; 0xfa
 80016f2:	f008 f82b 	bl	800974c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80016f6:	2108      	movs	r1, #8
 80016f8:	4832      	ldr	r0, [pc, #200]	; (80017c4 <takeWifiPass+0x20c>)
 80016fa:	f008 fdf7 	bl	800a2ec <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b01      	cmp	r3, #1
 8001702:	d169      	bne.n	80017d8 <takeWifiPass+0x220>
        	realCharPos--;
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	3b01      	subs	r3, #1
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170c:	2b00      	cmp	r3, #0
 800170e:	dc01      	bgt.n	8001714 <takeWifiPass+0x15c>
        	    realCharPos = 80;
 8001710:	2350      	movs	r3, #80	; 0x50
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <takeWifiPass+0x200>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d155      	bne.n	80017c8 <takeWifiPass+0x210>
            	if(page == 1) {
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <takeWifiPass+0x204>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10a      	bne.n	800173a <takeWifiPass+0x182>
            		cursorPosition = 16;
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <takeWifiPass+0x200>)
 8001726:	2210      	movs	r2, #16
 8001728:	601a      	str	r2, [r3, #0]
            		page = 5;
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <takeWifiPass+0x204>)
 800172c:	2205      	movs	r2, #5
 800172e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001730:	2105      	movs	r1, #5
 8001732:	2003      	movs	r0, #3
 8001734:	f7ff f9e2 	bl	8000afc <printTemplate>
 8001738:	e04b      	b.n	80017d2 <takeWifiPass+0x21a>
            	} else if(page == 2) {
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <takeWifiPass+0x204>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d10a      	bne.n	8001758 <takeWifiPass+0x1a0>
            		cursorPosition = 16;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <takeWifiPass+0x200>)
 8001744:	2210      	movs	r2, #16
 8001746:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <takeWifiPass+0x204>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800174e:	2101      	movs	r1, #1
 8001750:	2003      	movs	r0, #3
 8001752:	f7ff f9d3 	bl	8000afc <printTemplate>
 8001756:	e03c      	b.n	80017d2 <takeWifiPass+0x21a>
            	} else if(page == 3) {
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <takeWifiPass+0x204>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d10a      	bne.n	8001776 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <takeWifiPass+0x200>)
 8001762:	2210      	movs	r2, #16
 8001764:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <takeWifiPass+0x204>)
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800176c:	2102      	movs	r1, #2
 800176e:	2003      	movs	r0, #3
 8001770:	f7ff f9c4 	bl	8000afc <printTemplate>
 8001774:	e02d      	b.n	80017d2 <takeWifiPass+0x21a>
            	} else if(page == 4) {
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <takeWifiPass+0x204>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d10a      	bne.n	8001794 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <takeWifiPass+0x200>)
 8001780:	2210      	movs	r2, #16
 8001782:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <takeWifiPass+0x204>)
 8001786:	2203      	movs	r2, #3
 8001788:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800178a:	2103      	movs	r1, #3
 800178c:	2003      	movs	r0, #3
 800178e:	f7ff f9b5 	bl	8000afc <printTemplate>
 8001792:	e01e      	b.n	80017d2 <takeWifiPass+0x21a>
            	} else if(page == 5) {
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <takeWifiPass+0x204>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d11a      	bne.n	80017d2 <takeWifiPass+0x21a>
            		cursorPosition = 16;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <takeWifiPass+0x200>)
 800179e:	2210      	movs	r2, #16
 80017a0:	601a      	str	r2, [r3, #0]
            		page = 4;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <takeWifiPass+0x204>)
 80017a4:	2204      	movs	r2, #4
 80017a6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80017a8:	2104      	movs	r1, #4
 80017aa:	2003      	movs	r0, #3
 80017ac:	f7ff f9a6 	bl	8000afc <printTemplate>
 80017b0:	e00f      	b.n	80017d2 <takeWifiPass+0x21a>
 80017b2:	bf00      	nop
 80017b4:	20000c24 	.word	0x20000c24
 80017b8:	20000944 	.word	0x20000944
 80017bc:	20000948 	.word	0x20000948
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <takeWifiPass+0x304>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <takeWifiPass+0x304>)
 80017d0:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80017d2:	20fa      	movs	r0, #250	; 0xfa
 80017d4:	f007 ffba 	bl	800974c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80017d8:	2102      	movs	r1, #2
 80017da:	4839      	ldr	r0, [pc, #228]	; (80018c0 <takeWifiPass+0x308>)
 80017dc:	f008 fd86 	bl	800a2ec <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d128      	bne.n	8001838 <takeWifiPass+0x280>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fb7e 	bl	8000eec <getCharFromCursorPosition>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4a33      	ldr	r2, [pc, #204]	; (80018c4 <takeWifiPass+0x30c>)
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	4413      	add	r3, r2
 80017fa:	460a      	mov	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	b2d9      	uxtb	r1, r3
 8001802:	4a30      	ldr	r2, [pc, #192]	; (80018c4 <takeWifiPass+0x30c>)
 8001804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff f8e6 	bl	80009de <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b2d9      	uxtb	r1, r3
 800181a:	f107 0208 	add.w	r2, r7, #8
 800181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001820:	4413      	add	r3, r2
 8001822:	460a      	mov	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	3301      	adds	r3, #1
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 800182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182e:	3301      	adds	r3, #1
 8001830:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 8001832:	20fa      	movs	r0, #250	; 0xfa
 8001834:	f007 ff8a 	bl	800974c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001838:	2104      	movs	r1, #4
 800183a:	4821      	ldr	r0, [pc, #132]	; (80018c0 <takeWifiPass+0x308>)
 800183c:	f008 fd56 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d12e      	bne.n	80018a4 <takeWifiPass+0x2ec>
            if(strlen(wifiPass) >= 1) {
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <takeWifiPass+0x30c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d027      	beq.n	800189e <takeWifiPass+0x2e6>
            	wifiPass[wifiPassLoc] = '\0';
 800184e:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <takeWifiPass+0x30c>)
 8001850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001852:	4413      	add	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3306      	adds	r3, #6
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4619      	mov	r1, r3
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff f8dc 	bl	8000a20 <lcd_delete_char>
            	HAL_Delay(50);
 8001868:	2032      	movs	r0, #50	; 0x32
 800186a:	f007 ff6f 	bl	800974c <HAL_Delay>

            	if(writeLoc > 7) {
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	2b07      	cmp	r3, #7
 8001872:	dd03      	ble.n	800187c <takeWifiPass+0x2c4>
            		writeLoc--;
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	3b01      	subs	r3, #1
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187a:	e004      	b.n	8001886 <takeWifiPass+0x2ce>
            	} else if(writeLoc < 7) {
 800187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187e:	2b06      	cmp	r3, #6
 8001880:	dc01      	bgt.n	8001886 <takeWifiPass+0x2ce>
            		writeLoc = 7;
 8001882:	2307      	movs	r3, #7
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 8001886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001888:	2b00      	cmp	r3, #0
 800188a:	dd03      	ble.n	8001894 <takeWifiPass+0x2dc>
            		wifiPassLoc--;
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	3b01      	subs	r3, #1
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
 8001892:	e004      	b.n	800189e <takeWifiPass+0x2e6>
            	} else if(wifiPassLoc < 0) {
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	2b00      	cmp	r3, #0
 8001898:	da01      	bge.n	800189e <takeWifiPass+0x2e6>
            		wifiPassLoc = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 800189e:	20fa      	movs	r0, #250	; 0xfa
 80018a0:	f007 ff54 	bl	800974c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <takeWifiPass+0x304>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4619      	mov	r1, r3
 80018ac:	2002      	movs	r0, #2
 80018ae:	f7ff f862 	bl	8000976 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80018b2:	e6a1      	b.n	80015f8 <takeWifiPass+0x40>
    }
}
 80018b4:	bf00      	nop
 80018b6:	3738      	adds	r7, #56	; 0x38
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000944 	.word	0x20000944
 80018c0:	40010800 	.word	0x40010800
 80018c4:	20000c24 	.word	0x20000c24

080018c8 <writeDataToEEPROM>:

void writeDataToEEPROM(I2C_HandleTypeDef *hi2c1, uint8_t startPos) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, startPos, 145, &eepromData, 145, 3000);
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	1d38      	adds	r0, r7, #4
 80018da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2391      	movs	r3, #145	; 0x91
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <writeDataToEEPROM+0x38>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2391      	movs	r3, #145	; 0x91
 80018ea:	21a0      	movs	r1, #160	; 0xa0
 80018ec:	f008 ffb8 	bl	800a860 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80018f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f4:	f007 ff2a 	bl	800974c <HAL_Delay>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000b38 	.word	0x20000b38

08001904 <writeCharToEEPROM4ID>:

void writeCharToEEPROM4ID(I2C_HandleTypeDef *hi2c1, const char* sendArray) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	uint8_t karakterLength = strlen(sendArray);
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f7fe fc88 	bl	8000224 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	72fb      	strb	r3, [r7, #11]
	uint8_t tempArrayLength = strlen(numbersArray);
 8001918:	481d      	ldr	r0, [pc, #116]	; (8001990 <writeCharToEEPROM4ID+0x8c>)
 800191a:	f7fe fc83 	bl	8000224 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	72bb      	strb	r3, [r7, #10]

	uint8_t loopVal = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]

	for(int i=0; i<karakterLength; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e022      	b.n	8001972 <writeCharToEEPROM4ID+0x6e>
		for(int z=0; z<tempArrayLength; z++) {
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e018      	b.n	8001964 <writeCharToEEPROM4ID+0x60>
			if(sendArray[i] == numbersArray[z]) {
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	4413      	add	r3, r2
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	4915      	ldr	r1, [pc, #84]	; (8001990 <writeCharToEEPROM4ID+0x8c>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	440b      	add	r3, r1
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d10b      	bne.n	800195e <writeCharToEEPROM4ID+0x5a>
				eepromData[idStartPos + loopVal] = z;
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <writeCharToEEPROM4ID+0x90>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	4413      	add	r3, r2
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a10      	ldr	r2, [pc, #64]	; (8001998 <writeCharToEEPROM4ID+0x94>)
 8001956:	54d1      	strb	r1, [r2, r3]
				loopVal++;
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	3301      	adds	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
		for(int z=0; z<tempArrayLength; z++) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	7abb      	ldrb	r3, [r7, #10]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbe2      	blt.n	8001932 <writeCharToEEPROM4ID+0x2e>
	for(int i=0; i<karakterLength; i++) {
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	3301      	adds	r3, #1
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbd8      	blt.n	800192c <writeCharToEEPROM4ID+0x28>
			}
		}
	}

	writeDataToEEPROM(&hi2c1, idStartPos);
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <writeCharToEEPROM4ID+0x90>)
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffa0 	bl	80018c8 <writeDataToEEPROM>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200009b4 	.word	0x200009b4
 8001994:	200009bf 	.word	0x200009bf
 8001998:	20000b38 	.word	0x20000b38

0800199c <writeCharToEEPROM4Wifi>:

void writeCharToEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, const char* sendArray, uint8_t stat) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	4613      	mov	r3, r2
 80019a8:	71fb      	strb	r3, [r7, #7]
	uint8_t karakterLength = strlen(sendArray);
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f7fe fc3a 	bl	8000224 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	74fb      	strb	r3, [r7, #19]
	uint8_t tempArrayLength = strlen(charactersArray);
 80019b4:	482a      	ldr	r0, [pc, #168]	; (8001a60 <writeCharToEEPROM4Wifi+0xc4>)
 80019b6:	f7fe fc35 	bl	8000224 <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	74bb      	strb	r3, [r7, #18]

	uint8_t loopVal = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	77fb      	strb	r3, [r7, #31]
	for(int i=0; i<karakterLength; i++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	e02f      	b.n	8001a28 <writeCharToEEPROM4Wifi+0x8c>
		for(int z=0; z<tempArrayLength; z++) {
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e025      	b.n	8001a1a <writeCharToEEPROM4Wifi+0x7e>
			if(sendArray[i] == charactersArray[z]) {
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	4922      	ldr	r1, [pc, #136]	; (8001a60 <writeCharToEEPROM4Wifi+0xc4>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d118      	bne.n	8001a14 <writeCharToEEPROM4Wifi+0x78>
				if(stat == 1) {
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d109      	bne.n	80019fc <writeCharToEEPROM4Wifi+0x60>
					eepromData[ssidStartPos + loopVal] = z;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <writeCharToEEPROM4Wifi+0xc8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	4413      	add	r3, r2
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	b2d1      	uxtb	r1, r2
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <writeCharToEEPROM4Wifi+0xcc>)
 80019f8:	54d1      	strb	r1, [r2, r3]
 80019fa:	e008      	b.n	8001a0e <writeCharToEEPROM4Wifi+0x72>
				} else {
					eepromData[passStartPos + loopVal] = z;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <writeCharToEEPROM4Wifi+0xd0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	4413      	add	r3, r2
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	b2d1      	uxtb	r1, r2
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <writeCharToEEPROM4Wifi+0xcc>)
 8001a0c:	54d1      	strb	r1, [r2, r3]
				}
				loopVal++;
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	3301      	adds	r3, #1
 8001a12:	77fb      	strb	r3, [r7, #31]
		for(int z=0; z<tempArrayLength; z++) {
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	7cbb      	ldrb	r3, [r7, #18]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbd5      	blt.n	80019ce <writeCharToEEPROM4Wifi+0x32>
	for(int i=0; i<karakterLength; i++) {
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	7cfb      	ldrb	r3, [r7, #19]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbcb      	blt.n	80019c8 <writeCharToEEPROM4Wifi+0x2c>
			}
		}
	}

	if(stat == 1) {
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <writeCharToEEPROM4Wifi+0xac>
		writeDataToEEPROM(&hi2c1, ssidStartPos);
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <writeCharToEEPROM4Wifi+0xc8>)
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff41 	bl	80018c8 <writeDataToEEPROM>
	} else {
		writeDataToEEPROM(&hi2c1, passStartPos);
	}
}
 8001a46:	e007      	b.n	8001a58 <writeCharToEEPROM4Wifi+0xbc>
		writeDataToEEPROM(&hi2c1, passStartPos);
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <writeCharToEEPROM4Wifi+0xd0>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff38 	bl	80018c8 <writeDataToEEPROM>
}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000960 	.word	0x20000960
 8001a64:	200009c0 	.word	0x200009c0
 8001a68:	20000b38 	.word	0x20000b38
 8001a6c:	200009c1 	.word	0x200009c1

08001a70 <convertChars>:

void convertChars(const uint8_t* writeArray, uint8_t state) {
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t arrayLength = sizeof(writeArray)/sizeof(writeArray[0]);
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	72fb      	strb	r3, [r7, #11]

	if(state == 0) {
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <convertChars+0x44>
		for(int i=0; i<arrayLength; i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00e      	b.n	8001aaa <convertChars+0x3a>
			machineID[i] = numbersArray[writeArray[i]];
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <convertChars+0xb0>)
 8001a98:	5c99      	ldrb	r1, [r3, r2]
 8001a9a:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <convertChars+0xb4>)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbec      	blt.n	8001a8c <convertChars+0x1c>
	} else {
		for(int i=0; i<arrayLength; i++) {
			wifiPass[i] = charactersArray[writeArray[i]];
		}
	}
}
 8001ab2:	e02f      	b.n	8001b14 <convertChars+0xa4>
	} else if(state == 1) {
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d116      	bne.n	8001ae8 <convertChars+0x78>
		for(int i=0; i<arrayLength; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	e00e      	b.n	8001ade <convertChars+0x6e>
			wifiSSID[i] = charactersArray[writeArray[i]];
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <convertChars+0xb8>)
 8001acc:	5c99      	ldrb	r1, [r3, r2]
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <convertChars+0xbc>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	3301      	adds	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbec      	blt.n	8001ac0 <convertChars+0x50>
}
 8001ae6:	e015      	b.n	8001b14 <convertChars+0xa4>
		for(int i=0; i<arrayLength; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e00e      	b.n	8001b0c <convertChars+0x9c>
			wifiPass[i] = charactersArray[writeArray[i]];
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <convertChars+0xb8>)
 8001afa:	5c99      	ldrb	r1, [r3, r2]
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <convertChars+0xc0>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4413      	add	r3, r2
 8001b02:	460a      	mov	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbec      	blt.n	8001aee <convertChars+0x7e>
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200009b4 	.word	0x200009b4
 8001b24:	20000bf4 	.word	0x20000bf4
 8001b28:	20000960 	.word	0x20000960
 8001b2c:	20000c00 	.word	0x20000c00
 8001b30:	20000c24 	.word	0x20000c24

08001b34 <takeCharFromEEPROM4ID>:

void takeCharFromEEPROM4ID(I2C_HandleTypeDef *hi2c1) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, idStartPos, 11, readedID, 11, 3000);
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <takeCharFromEEPROM4ID+0x40>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	1d38      	adds	r0, r7, #4
 8001b44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	230b      	movs	r3, #11
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <takeCharFromEEPROM4ID+0x44>)
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	230b      	movs	r3, #11
 8001b54:	21a0      	movs	r1, #160	; 0xa0
 8001b56:	f008 ff7d 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8001b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5e:	f007 fdf5 	bl	800974c <HAL_Delay>

	convertChars(readedID, 0);
 8001b62:	2100      	movs	r1, #0
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <takeCharFromEEPROM4ID+0x44>)
 8001b66:	f7ff ff83 	bl	8001a70 <convertChars>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200009bf 	.word	0x200009bf
 8001b78:	20000c48 	.word	0x20000c48

08001b7c <takeCharFromEEPROM4Wifi>:

void takeCharFromEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, uint8_t state) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af04      	add	r7, sp, #16
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	if(state == 1) {
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d118      	bne.n	8001bc0 <takeCharFromEEPROM4Wifi+0x44>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, ssidStartPos, 32, readedSSID, 32, 3000);
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <takeCharFromEEPROM4Wifi+0x7c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <takeCharFromEEPROM4Wifi+0x80>)
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	21a0      	movs	r1, #160	; 0xa0
 8001ba8:	f008 ff54 	bl	800aa54 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb0:	f007 fdcc 	bl	800974c <HAL_Delay>

		convertChars(readedSSID, state);
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4810      	ldr	r0, [pc, #64]	; (8001bfc <takeCharFromEEPROM4Wifi+0x80>)
 8001bba:	f7ff ff59 	bl	8001a70 <convertChars>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, passStartPos, 32, readedPASS, 32, 3000);
		HAL_Delay(1000);

		convertChars(readedPASS, state);
	}
}
 8001bbe:	e017      	b.n	8001bf0 <takeCharFromEEPROM4Wifi+0x74>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, passStartPos, 32, readedPASS, 32, 3000);
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <takeCharFromEEPROM4Wifi+0x84>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	1d38      	adds	r0, r7, #4
 8001bc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2320      	movs	r3, #32
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <takeCharFromEEPROM4Wifi+0x88>)
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	21a0      	movs	r1, #160	; 0xa0
 8001bda:	f008 ff3b 	bl	800aa54 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be2:	f007 fdb3 	bl	800974c <HAL_Delay>
		convertChars(readedPASS, state);
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <takeCharFromEEPROM4Wifi+0x88>)
 8001bec:	f7ff ff40 	bl	8001a70 <convertChars>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200009c0 	.word	0x200009c0
 8001bfc:	20000c54 	.word	0x20000c54
 8001c00:	200009c1 	.word	0x200009c1
 8001c04:	20000c78 	.word	0x20000c78

08001c08 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	for(int z=0; z < strlen(text); z++) {
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e023      	b.n	8001c62 <slideText+0x5a>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4413      	add	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e014      	b.n	8001c4e <slideText+0x46>
			lcd_print_char(startLine, i-z, text[i]);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	b2d8      	uxtb	r0, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	b2d9      	uxtb	r1, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f7fe fece 	bl	80009de <lcd_print_char>
			HAL_Delay(50);
 8001c42:	2032      	movs	r0, #50	; 0x32
 8001c44:	f007 fd82 	bl	800974c <HAL_Delay>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7fe fae8 	bl	8000224 <strlen>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8e3      	bhi.n	8001c24 <slideText+0x1c>
	for(int z=0; z < strlen(text); z++) {
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7fe fade 	bl	8000224 <strlen>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8d4      	bhi.n	8001c1a <slideText+0x12>
		}
	}
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c84:	2101      	movs	r1, #1
 8001c86:	488f      	ldr	r0, [pc, #572]	; (8001ec4 <menu+0x248>)
 8001c88:	f008 fb30 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	f040 808e 	bne.w	8001db0 <menu+0x134>
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <menu+0x24c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8086 	beq.w	8001db0 <menu+0x134>
		menuSayac = menuSayac+1;
 8001ca4:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <menu+0x250>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b87      	ldr	r3, [pc, #540]	; (8001ecc <menu+0x250>)
 8001cae:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001cb0:	4b86      	ldr	r3, [pc, #536]	; (8001ecc <menu+0x250>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b24      	cmp	r3, #36	; 0x24
 8001cb6:	d102      	bne.n	8001cbe <menu+0x42>
			menuSayac = 1;
 8001cb8:	4b84      	ldr	r3, [pc, #528]	; (8001ecc <menu+0x250>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001cbe:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <menu+0x250>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d106      	bne.n	8001cd4 <menu+0x58>
 8001cc6:	4b82      	ldr	r3, [pc, #520]	; (8001ed0 <menu+0x254>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <menu+0x58>
			menuSayac = 21;
 8001cce:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <menu+0x250>)
 8001cd0:	2215      	movs	r2, #21
 8001cd2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001cd4:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <menu+0x250>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d106      	bne.n	8001cea <menu+0x6e>
 8001cdc:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <menu+0x258>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <menu+0x6e>
			menuSayac = 16;
 8001ce4:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <menu+0x250>)
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001cea:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <menu+0x250>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b0d      	cmp	r3, #13
 8001cf0:	d106      	bne.n	8001d00 <menu+0x84>
 8001cf2:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <menu+0x258>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <menu+0x84>
			menuSayac = 16;
 8001cfa:	4b74      	ldr	r3, [pc, #464]	; (8001ecc <menu+0x250>)
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001d00:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <menu+0x250>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d106      	bne.n	8001d16 <menu+0x9a>
 8001d08:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <menu+0x258>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d102      	bne.n	8001d16 <menu+0x9a>
			menuSayac = 13;
 8001d10:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <menu+0x250>)
 8001d12:	220d      	movs	r2, #13
 8001d14:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001d16:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <menu+0x250>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d10a      	bne.n	8001d34 <menu+0xb8>
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <menu+0x25c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d003      	beq.n	8001d2e <menu+0xb2>
 8001d26:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <menu+0x25c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d102      	bne.n	8001d34 <menu+0xb8>
			menuSayac = 11;
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <menu+0x250>)
 8001d30:	220b      	movs	r2, #11
 8001d32:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001d34:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <menu+0x250>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d10e      	bne.n	8001d5a <menu+0xde>
 8001d3c:	4b67      	ldr	r3, [pc, #412]	; (8001edc <menu+0x260>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d003      	beq.n	8001d4c <menu+0xd0>
 8001d44:	4b65      	ldr	r3, [pc, #404]	; (8001edc <menu+0x260>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d106      	bne.n	8001d5a <menu+0xde>
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <menu+0x258>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <menu+0xde>
			menuSayac = 16;
 8001d54:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <menu+0x250>)
 8001d56:	2210      	movs	r2, #16
 8001d58:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <menu+0x250>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d10e      	bne.n	8001d80 <menu+0x104>
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <menu+0x260>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d003      	beq.n	8001d72 <menu+0xf6>
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <menu+0x260>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d106      	bne.n	8001d80 <menu+0x104>
 8001d72:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <menu+0x258>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d102      	bne.n	8001d80 <menu+0x104>
			menuSayac = 13;
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <menu+0x250>)
 8001d7c:	220d      	movs	r2, #13
 8001d7e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001d80:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <menu+0x250>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d106      	bne.n	8001d96 <menu+0x11a>
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <menu+0x264>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <menu+0x11a>
			menuSayac = 16;
 8001d90:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <menu+0x250>)
 8001d92:	2210      	movs	r2, #16
 8001d94:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001d96:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <menu+0x250>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b18      	cmp	r3, #24
 8001d9c:	d106      	bne.n	8001dac <menu+0x130>
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <menu+0x254>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <menu+0x130>
			menuSayac = 26;
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <menu+0x250>)
 8001da8:	221a      	movs	r2, #26
 8001daa:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001dac:	f004 fd04 	bl	80067b8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001db0:	2108      	movs	r1, #8
 8001db2:	484c      	ldr	r0, [pc, #304]	; (8001ee4 <menu+0x268>)
 8001db4:	f008 fa9a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d175      	bne.n	8001eaa <menu+0x22e>
 8001dbe:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <menu+0x24c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	f083 0301 	eor.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d06e      	beq.n	8001eaa <menu+0x22e>
		if (menuSayac <= 1) {
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <menu+0x250>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d802      	bhi.n	8001dda <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <menu+0x250>)
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <menu+0x250>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <menu+0x250>)
 8001de4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <menu+0x250>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b14      	cmp	r3, #20
 8001dec:	d106      	bne.n	8001dfc <menu+0x180>
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <menu+0x254>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <menu+0x180>
			menuSayac = 17;
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <menu+0x250>)
 8001df8:	2211      	movs	r2, #17
 8001dfa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <menu+0x250>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d106      	bne.n	8001e12 <menu+0x196>
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <menu+0x258>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <menu+0x196>
			menuSayac = 7;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <menu+0x250>)
 8001e0e:	2207      	movs	r2, #7
 8001e10:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <menu+0x250>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	d106      	bne.n	8001e28 <menu+0x1ac>
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <menu+0x258>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <menu+0x1ac>
			menuSayac = 12;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <menu+0x250>)
 8001e24:	220c      	movs	r2, #12
 8001e26:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <menu+0x250>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d106      	bne.n	8001e3e <menu+0x1c2>
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <menu+0x258>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d102      	bne.n	8001e3e <menu+0x1c2>
			menuSayac = 8;
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <menu+0x250>)
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <menu+0x250>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d10a      	bne.n	8001e5c <menu+0x1e0>
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <menu+0x25c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d003      	beq.n	8001e56 <menu+0x1da>
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <menu+0x25c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d102      	bne.n	8001e5c <menu+0x1e0>
			menuSayac = 9;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <menu+0x250>)
 8001e58:	2209      	movs	r2, #9
 8001e5a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <menu+0x250>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d10a      	bne.n	8001e7a <menu+0x1fe>
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <menu+0x260>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d003      	beq.n	8001e74 <menu+0x1f8>
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <menu+0x260>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d102      	bne.n	8001e7a <menu+0x1fe>
			menuSayac = 11;
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <menu+0x250>)
 8001e76:	220b      	movs	r2, #11
 8001e78:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <menu+0x250>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	d106      	bne.n	8001e90 <menu+0x214>
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <menu+0x264>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <menu+0x214>
			menuSayac = 14;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <menu+0x250>)
 8001e8c:	220e      	movs	r2, #14
 8001e8e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <menu+0x250>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b19      	cmp	r3, #25
 8001e96:	d106      	bne.n	8001ea6 <menu+0x22a>
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <menu+0x254>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <menu+0x22a>
			menuSayac = 23;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <menu+0x250>)
 8001ea2:	2217      	movs	r2, #23
 8001ea4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001ea6:	f004 fc87 	bl	80067b8 <bekle>
	}

	if (menuSayac == 0) {
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <menu+0x250>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d134      	bne.n	8001f1c <menu+0x2a0>
		if(dilSecim == 0) {
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <menu+0x26c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d122      	bne.n	8001f00 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <menu+0x270>)
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e016      	b.n	8001ef0 <menu+0x274>
 8001ec2:	bf00      	nop
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	20000ccc 	.word	0x20000ccc
 8001ecc:	20000c9d 	.word	0x20000c9d
 8001ed0:	20000cac 	.word	0x20000cac
 8001ed4:	20000ca5 	.word	0x20000ca5
 8001ed8:	20000ca6 	.word	0x20000ca6
 8001edc:	20000ca7 	.word	0x20000ca7
 8001ee0:	20000ca8 	.word	0x20000ca8
 8001ee4:	40011000 	.word	0x40011000
 8001ee8:	20000cbe 	.word	0x20000cbe
 8001eec:	0800e118 	.word	0x0800e118
 8001ef0:	f7fe fd60 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001ef4:	4a94      	ldr	r2, [pc, #592]	; (8002148 <menu+0x4cc>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7fe fd5b 	bl	80009b4 <lcd_print>
 8001efe:	e00d      	b.n	8001f1c <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001f00:	4b92      	ldr	r3, [pc, #584]	; (800214c <menu+0x4d0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d109      	bne.n	8001f1c <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001f08:	4a91      	ldr	r2, [pc, #580]	; (8002150 <menu+0x4d4>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7fe fd51 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001f12:	4a90      	ldr	r2, [pc, #576]	; (8002154 <menu+0x4d8>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7fe fd4c 	bl	80009b4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001f1c:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <menu+0x4dc>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	f040 82b5 	bne.w	8002490 <menu+0x814>
		if(dilSecim == 0) {
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <menu+0x4d0>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001f2e:	4a8b      	ldr	r2, [pc, #556]	; (800215c <menu+0x4e0>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7fe fd3e 	bl	80009b4 <lcd_print>
 8001f38:	e008      	b.n	8001f4c <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001f3a:	4b84      	ldr	r3, [pc, #528]	; (800214c <menu+0x4d0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d104      	bne.n	8001f4c <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001f42:	4a87      	ldr	r2, [pc, #540]	; (8002160 <menu+0x4e4>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7fe fd34 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001f4c:	4b85      	ldr	r3, [pc, #532]	; (8002164 <menu+0x4e8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d123      	bne.n	8001f9c <menu+0x320>
			if(dilSecim == 0) {
 8001f54:	4b7d      	ldr	r3, [pc, #500]	; (800214c <menu+0x4d0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001f5c:	4a82      	ldr	r2, [pc, #520]	; (8002168 <menu+0x4ec>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2002      	movs	r0, #2
 8001f62:	f7fe fd27 	bl	80009b4 <lcd_print>
 8001f66:	e008      	b.n	8001f7a <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001f68:	4b78      	ldr	r3, [pc, #480]	; (800214c <menu+0x4d0>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d104      	bne.n	8001f7a <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001f70:	4a7e      	ldr	r2, [pc, #504]	; (800216c <menu+0x4f0>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7fe fd1d 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001f7a:	4a7d      	ldr	r2, [pc, #500]	; (8002170 <menu+0x4f4>)
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f7fe fd18 	bl	80009b4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001f84:	4b7b      	ldr	r3, [pc, #492]	; (8002174 <menu+0x4f8>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	220a      	movs	r2, #10
 8001f8a:	497b      	ldr	r1, [pc, #492]	; (8002178 <menu+0x4fc>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00b fa35 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 8001f92:	4a79      	ldr	r2, [pc, #484]	; (8002178 <menu+0x4fc>)
 8001f94:	210e      	movs	r1, #14
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7fe fd0c 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001f9c:	4b71      	ldr	r3, [pc, #452]	; (8002164 <menu+0x4e8>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d123      	bne.n	8001fec <menu+0x370>
			if(dilSecim == 0) {
 8001fa4:	4b69      	ldr	r3, [pc, #420]	; (800214c <menu+0x4d0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001fac:	4a73      	ldr	r2, [pc, #460]	; (800217c <menu+0x500>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7fe fcff 	bl	80009b4 <lcd_print>
 8001fb6:	e008      	b.n	8001fca <menu+0x34e>
			} else if(dilSecim == 1) {
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <menu+0x4d0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d104      	bne.n	8001fca <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 8001fc0:	4a6f      	ldr	r2, [pc, #444]	; (8002180 <menu+0x504>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe fcf5 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001fca:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <menu+0x508>)
 8001fcc:	210f      	movs	r1, #15
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f7fe fcf0 	bl	80009b4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001fd4:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <menu+0x50c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	220a      	movs	r2, #10
 8001fda:	4967      	ldr	r1, [pc, #412]	; (8002178 <menu+0x4fc>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00b fa0d 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 8001fe2:	4a65      	ldr	r2, [pc, #404]	; (8002178 <menu+0x4fc>)
 8001fe4:	210e      	movs	r1, #14
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f7fe fce4 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001fec:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <menu+0x4e8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <menu+0x3c0>
			if(dilSecim == 0) {
 8001ff4:	4b55      	ldr	r3, [pc, #340]	; (800214c <menu+0x4d0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001ffc:	4a63      	ldr	r2, [pc, #396]	; (800218c <menu+0x510>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2002      	movs	r0, #2
 8002002:	f7fe fcd7 	bl	80009b4 <lcd_print>
 8002006:	e008      	b.n	800201a <menu+0x39e>
			} else if(dilSecim == 1) {
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <menu+0x4d0>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d104      	bne.n	800201a <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8002010:	4a5f      	ldr	r2, [pc, #380]	; (8002190 <menu+0x514>)
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f7fe fccd 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800201a:	4a5a      	ldr	r2, [pc, #360]	; (8002184 <menu+0x508>)
 800201c:	210f      	movs	r1, #15
 800201e:	2002      	movs	r0, #2
 8002020:	f7fe fcc8 	bl	80009b4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8002024:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <menu+0x518>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	220a      	movs	r2, #10
 800202a:	4953      	ldr	r1, [pc, #332]	; (8002178 <menu+0x4fc>)
 800202c:	4618      	mov	r0, r3
 800202e:	f00b f9e5 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 8002032:	4a51      	ldr	r2, [pc, #324]	; (8002178 <menu+0x4fc>)
 8002034:	210e      	movs	r1, #14
 8002036:	2002      	movs	r0, #2
 8002038:	f7fe fcbc 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800203c:	4b49      	ldr	r3, [pc, #292]	; (8002164 <menu+0x4e8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d123      	bne.n	800208c <menu+0x410>
			if(dilSecim == 0) {
 8002044:	4b41      	ldr	r3, [pc, #260]	; (800214c <menu+0x4d0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <menu+0x51c>)
 800204e:	2101      	movs	r1, #1
 8002050:	2002      	movs	r0, #2
 8002052:	f7fe fcaf 	bl	80009b4 <lcd_print>
 8002056:	e008      	b.n	800206a <menu+0x3ee>
			} else if(dilSecim == 1) {
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <menu+0x4d0>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d104      	bne.n	800206a <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8002060:	4a4e      	ldr	r2, [pc, #312]	; (800219c <menu+0x520>)
 8002062:	2101      	movs	r1, #1
 8002064:	2002      	movs	r0, #2
 8002066:	f7fe fca5 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800206a:	4a46      	ldr	r2, [pc, #280]	; (8002184 <menu+0x508>)
 800206c:	210f      	movs	r1, #15
 800206e:	2002      	movs	r0, #2
 8002070:	f7fe fca0 	bl	80009b4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8002074:	4b4a      	ldr	r3, [pc, #296]	; (80021a0 <menu+0x524>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	220a      	movs	r2, #10
 800207a:	493f      	ldr	r1, [pc, #252]	; (8002178 <menu+0x4fc>)
 800207c:	4618      	mov	r0, r3
 800207e:	f00b f9bd 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 8002082:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <menu+0x4fc>)
 8002084:	210e      	movs	r1, #14
 8002086:	2002      	movs	r0, #2
 8002088:	f7fe fc94 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <menu+0x4e8>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d123      	bne.n	80020dc <menu+0x460>
			if(dilSecim == 0) {
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <menu+0x4d0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800209c:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <menu+0x528>)
 800209e:	2101      	movs	r1, #1
 80020a0:	2002      	movs	r0, #2
 80020a2:	f7fe fc87 	bl	80009b4 <lcd_print>
 80020a6:	e008      	b.n	80020ba <menu+0x43e>
			} else if(dilSecim == 1) {
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <menu+0x4d0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d104      	bne.n	80020ba <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 80020b0:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <menu+0x52c>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fc7d 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80020ba:	4a32      	ldr	r2, [pc, #200]	; (8002184 <menu+0x508>)
 80020bc:	210f      	movs	r1, #15
 80020be:	2002      	movs	r0, #2
 80020c0:	f7fe fc78 	bl	80009b4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <menu+0x530>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	220a      	movs	r2, #10
 80020ca:	492b      	ldr	r1, [pc, #172]	; (8002178 <menu+0x4fc>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00b f995 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 80020d2:	4a29      	ldr	r2, [pc, #164]	; (8002178 <menu+0x4fc>)
 80020d4:	210e      	movs	r1, #14
 80020d6:	2002      	movs	r0, #2
 80020d8:	f7fe fc6c 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <menu+0x4e8>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d123      	bne.n	800212c <menu+0x4b0>
			if(dilSecim == 0) {
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <menu+0x4d0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80020ec:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <menu+0x534>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	2002      	movs	r0, #2
 80020f2:	f7fe fc5f 	bl	80009b4 <lcd_print>
 80020f6:	e008      	b.n	800210a <menu+0x48e>
			} else if(dilSecim == 1) {
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <menu+0x4d0>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d104      	bne.n	800210a <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8002100:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <menu+0x538>)
 8002102:	2101      	movs	r1, #1
 8002104:	2002      	movs	r0, #2
 8002106:	f7fe fc55 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <menu+0x508>)
 800210c:	210f      	movs	r1, #15
 800210e:	2002      	movs	r0, #2
 8002110:	f7fe fc50 	bl	80009b4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <menu+0x53c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	220a      	movs	r2, #10
 800211a:	4917      	ldr	r1, [pc, #92]	; (8002178 <menu+0x4fc>)
 800211c:	4618      	mov	r0, r3
 800211e:	f00b f96d 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <menu+0x4fc>)
 8002124:	210e      	movs	r1, #14
 8002126:	2002      	movs	r0, #2
 8002128:	f7fe fc44 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <menu+0x4e8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d15f      	bne.n	80021f4 <menu+0x578>
			if(dilSecim == 0) {
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <menu+0x4d0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d141      	bne.n	80021c0 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <menu+0x540>)
 800213e:	2101      	movs	r1, #1
 8002140:	2002      	movs	r0, #2
 8002142:	f7fe fc37 	bl	80009b4 <lcd_print>
 8002146:	e044      	b.n	80021d2 <menu+0x556>
 8002148:	0800e12c 	.word	0x0800e12c
 800214c:	20000cbe 	.word	0x20000cbe
 8002150:	0800e140 	.word	0x0800e140
 8002154:	0800e154 	.word	0x0800e154
 8002158:	20000c9d 	.word	0x20000c9d
 800215c:	0800e168 	.word	0x0800e168
 8002160:	0800e17c 	.word	0x0800e17c
 8002164:	20000c9f 	.word	0x20000c9f
 8002168:	0800e190 	.word	0x0800e190
 800216c:	0800e1a0 	.word	0x0800e1a0
 8002170:	0800e1b0 	.word	0x0800e1b0
 8002174:	20000cbf 	.word	0x20000cbf
 8002178:	20000bcc 	.word	0x20000bcc
 800217c:	0800e1b4 	.word	0x0800e1b4
 8002180:	0800e1c4 	.word	0x0800e1c4
 8002184:	0800e1d4 	.word	0x0800e1d4
 8002188:	20000cc0 	.word	0x20000cc0
 800218c:	0800e1d8 	.word	0x0800e1d8
 8002190:	0800e1e8 	.word	0x0800e1e8
 8002194:	20000cc1 	.word	0x20000cc1
 8002198:	0800e1f8 	.word	0x0800e1f8
 800219c:	0800e208 	.word	0x0800e208
 80021a0:	20000cc2 	.word	0x20000cc2
 80021a4:	0800e218 	.word	0x0800e218
 80021a8:	0800e228 	.word	0x0800e228
 80021ac:	20000cc3 	.word	0x20000cc3
 80021b0:	0800e238 	.word	0x0800e238
 80021b4:	0800e248 	.word	0x0800e248
 80021b8:	20000cc4 	.word	0x20000cc4
 80021bc:	0800e258 	.word	0x0800e258
			} else if(dilSecim == 1) {
 80021c0:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <menu+0x684>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d104      	bne.n	80021d2 <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <menu+0x688>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	2002      	movs	r0, #2
 80021ce:	f7fe fbf1 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80021d2:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <menu+0x68c>)
 80021d4:	210f      	movs	r1, #15
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7fe fbec 	bl	80009b4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <menu+0x690>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	220a      	movs	r2, #10
 80021e2:	494b      	ldr	r1, [pc, #300]	; (8002310 <menu+0x694>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00b f909 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 80021ea:	4a49      	ldr	r2, [pc, #292]	; (8002310 <menu+0x694>)
 80021ec:	210e      	movs	r1, #14
 80021ee:	2002      	movs	r0, #2
 80021f0:	f7fe fbe0 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <menu+0x698>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	d123      	bne.n	8002244 <menu+0x5c8>
			if(dilSecim == 0) {
 80021fc:	4b40      	ldr	r3, [pc, #256]	; (8002300 <menu+0x684>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8002204:	4a44      	ldr	r2, [pc, #272]	; (8002318 <menu+0x69c>)
 8002206:	2101      	movs	r1, #1
 8002208:	2002      	movs	r0, #2
 800220a:	f7fe fbd3 	bl	80009b4 <lcd_print>
 800220e:	e008      	b.n	8002222 <menu+0x5a6>
			} else if(dilSecim == 1) {
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <menu+0x684>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d104      	bne.n	8002222 <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <menu+0x6a0>)
 800221a:	2101      	movs	r1, #1
 800221c:	2002      	movs	r0, #2
 800221e:	f7fe fbc9 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8002222:	4a39      	ldr	r2, [pc, #228]	; (8002308 <menu+0x68c>)
 8002224:	210f      	movs	r1, #15
 8002226:	2002      	movs	r0, #2
 8002228:	f7fe fbc4 	bl	80009b4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <menu+0x6a4>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	220a      	movs	r2, #10
 8002232:	4937      	ldr	r1, [pc, #220]	; (8002310 <menu+0x694>)
 8002234:	4618      	mov	r0, r3
 8002236:	f00b f8e1 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <menu+0x694>)
 800223c:	210e      	movs	r1, #14
 800223e:	2002      	movs	r0, #2
 8002240:	f7fe fbb8 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <menu+0x698>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d123      	bne.n	8002294 <menu+0x618>
			if(dilSecim == 0) {
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <menu+0x684>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8002254:	4a33      	ldr	r2, [pc, #204]	; (8002324 <menu+0x6a8>)
 8002256:	2101      	movs	r1, #1
 8002258:	2002      	movs	r0, #2
 800225a:	f7fe fbab 	bl	80009b4 <lcd_print>
 800225e:	e008      	b.n	8002272 <menu+0x5f6>
			} else if(dilSecim == 1) {
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <menu+0x684>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8002268:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <menu+0x6ac>)
 800226a:	2101      	movs	r1, #1
 800226c:	2002      	movs	r0, #2
 800226e:	f7fe fba1 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <menu+0x68c>)
 8002274:	210f      	movs	r1, #15
 8002276:	2002      	movs	r0, #2
 8002278:	f7fe fb9c 	bl	80009b4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <menu+0x6b0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	220a      	movs	r2, #10
 8002282:	4923      	ldr	r1, [pc, #140]	; (8002310 <menu+0x694>)
 8002284:	4618      	mov	r0, r3
 8002286:	f00b f8b9 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 800228a:	4a21      	ldr	r2, [pc, #132]	; (8002310 <menu+0x694>)
 800228c:	210e      	movs	r1, #14
 800228e:	2002      	movs	r0, #2
 8002290:	f7fe fb90 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <menu+0x698>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b09      	cmp	r3, #9
 800229a:	d123      	bne.n	80022e4 <menu+0x668>
			if(dilSecim == 0) {
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <menu+0x684>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <menu+0x6b4>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	2002      	movs	r0, #2
 80022aa:	f7fe fb83 	bl	80009b4 <lcd_print>
 80022ae:	e008      	b.n	80022c2 <menu+0x646>
			} else if(dilSecim == 1) {
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <menu+0x684>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d104      	bne.n	80022c2 <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <menu+0x6b8>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	2002      	movs	r0, #2
 80022be:	f7fe fb79 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <menu+0x6bc>)
 80022c4:	2110      	movs	r1, #16
 80022c6:	2002      	movs	r0, #2
 80022c8:	f7fe fb74 	bl	80009b4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <menu+0x6c0>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	220a      	movs	r2, #10
 80022d2:	490f      	ldr	r1, [pc, #60]	; (8002310 <menu+0x694>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00b f891 	bl	800d3fc <itoa>
			lcd_print(2, 15, snum);
 80022da:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <menu+0x694>)
 80022dc:	210f      	movs	r1, #15
 80022de:	2002      	movs	r0, #2
 80022e0:	f7fe fb68 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <menu+0x698>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b0a      	cmp	r3, #10
 80022ea:	d134      	bne.n	8002356 <menu+0x6da>
			if(dilSecim == 0) {
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <menu+0x684>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d127      	bne.n	8002344 <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <menu+0x6c4>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	2002      	movs	r0, #2
 80022fa:	f7fe fb5b 	bl	80009b4 <lcd_print>
 80022fe:	e02a      	b.n	8002356 <menu+0x6da>
 8002300:	20000cbe 	.word	0x20000cbe
 8002304:	0800e268 	.word	0x0800e268
 8002308:	0800e1d4 	.word	0x0800e1d4
 800230c:	20000cc5 	.word	0x20000cc5
 8002310:	20000bcc 	.word	0x20000bcc
 8002314:	20000c9f 	.word	0x20000c9f
 8002318:	0800e278 	.word	0x0800e278
 800231c:	0800e288 	.word	0x0800e288
 8002320:	20000cc6 	.word	0x20000cc6
 8002324:	0800e298 	.word	0x0800e298
 8002328:	0800e2a8 	.word	0x0800e2a8
 800232c:	20000cc7 	.word	0x20000cc7
 8002330:	0800e2b8 	.word	0x0800e2b8
 8002334:	0800e2c8 	.word	0x0800e2c8
 8002338:	0800e2d8 	.word	0x0800e2d8
 800233c:	20000cc8 	.word	0x20000cc8
 8002340:	0800e2dc 	.word	0x0800e2dc
			} else if(dilSecim == 1) {
 8002344:	4b82      	ldr	r3, [pc, #520]	; (8002550 <menu+0x8d4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d104      	bne.n	8002356 <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 800234c:	4a81      	ldr	r2, [pc, #516]	; (8002554 <menu+0x8d8>)
 800234e:	2101      	movs	r1, #1
 8002350:	2002      	movs	r0, #2
 8002352:	f7fe fb2f 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002356:	2102      	movs	r1, #2
 8002358:	487f      	ldr	r0, [pc, #508]	; (8002558 <menu+0x8dc>)
 800235a:	f007 ffc7 	bl	800a2ec <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d119      	bne.n	8002398 <menu+0x71c>
 8002364:	4b7d      	ldr	r3, [pc, #500]	; (800255c <menu+0x8e0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <menu+0x71c>
 8002372:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <menu+0x8e4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800237a:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <menu+0x8e8>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b78      	ldr	r3, [pc, #480]	; (8002564 <menu+0x8e8>)
 8002384:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8002386:	4b77      	ldr	r3, [pc, #476]	; (8002564 <menu+0x8e8>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d902      	bls.n	8002394 <menu+0x718>
				hataGostermeSirasi = 0;
 800238e:	4b75      	ldr	r3, [pc, #468]	; (8002564 <menu+0x8e8>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002394:	f004 fa10 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002398:	2104      	movs	r1, #4
 800239a:	486f      	ldr	r0, [pc, #444]	; (8002558 <menu+0x8dc>)
 800239c:	f007 ffa6 	bl	800a2ec <HAL_GPIO_ReadPin>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d119      	bne.n	80023da <menu+0x75e>
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <menu+0x8e0>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <menu+0x75e>
 80023b4:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <menu+0x8e4>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10e      	bne.n	80023da <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80023bc:	4b69      	ldr	r3, [pc, #420]	; (8002564 <menu+0x8e8>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <menu+0x8e8>)
 80023c6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <menu+0x8e8>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b0b      	cmp	r3, #11
 80023ce:	d902      	bls.n	80023d6 <menu+0x75a>
	    		hataGostermeSirasi = 10;
 80023d0:	4b64      	ldr	r3, [pc, #400]	; (8002564 <menu+0x8e8>)
 80023d2:	220a      	movs	r2, #10
 80023d4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80023d6:	f004 f9ef 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80023da:	2108      	movs	r1, #8
 80023dc:	485e      	ldr	r0, [pc, #376]	; (8002558 <menu+0x8dc>)
 80023de:	f007 ff85 	bl	800a2ec <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d153      	bne.n	8002490 <menu+0x814>
 80023e8:	4b5c      	ldr	r3, [pc, #368]	; (800255c <menu+0x8e0>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04c      	beq.n	8002490 <menu+0x814>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <menu+0x8e8>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b0a      	cmp	r3, #10
 80023fc:	d148      	bne.n	8002490 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <menu+0x8ec>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <menu+0x8f0>)
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <menu+0x8f4>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <menu+0x8f0>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <menu+0x8f8>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	4b52      	ldr	r3, [pc, #328]	; (800256c <menu+0x8f0>)
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <menu+0x8fc>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	4b4f      	ldr	r3, [pc, #316]	; (800256c <menu+0x8f0>)
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <menu+0x900>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <menu+0x8f0>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8002444:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <menu+0x904>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	4b48      	ldr	r3, [pc, #288]	; (800256c <menu+0x8f0>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8002452:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <menu+0x908>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	4b44      	ldr	r3, [pc, #272]	; (800256c <menu+0x8f0>)
 800245a:	2200      	movs	r2, #0
 800245c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002460:	4b49      	ldr	r3, [pc, #292]	; (8002588 <menu+0x90c>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <menu+0x8f0>)
 8002468:	2200      	movs	r2, #0
 800246a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <menu+0x910>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <menu+0x8f0>)
 8002476:	2200      	movs	r2, #0
 8002478:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <menu+0x914>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	4b3a      	ldr	r3, [pc, #232]	; (800256c <menu+0x8f0>)
 8002484:	2200      	movs	r2, #0
 8002486:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <menu+0x918>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <menu+0x91c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b02      	cmp	r3, #2
 8002496:	f040 80fc 	bne.w	8002692 <menu+0xa16>
		if(dilSecim == 0) {
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <menu+0x8d4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80024a2:	4a3e      	ldr	r2, [pc, #248]	; (800259c <menu+0x920>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe fa84 	bl	80009b4 <lcd_print>
 80024ac:	e008      	b.n	80024c0 <menu+0x844>
		} else if(dilSecim == 1) {
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <menu+0x8d4>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d104      	bne.n	80024c0 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80024b6:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <menu+0x924>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7fe fa7a 	bl	80009b4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <menu+0x8e4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <menu+0x854>
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <menu+0x8e4>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d112      	bne.n	80024f6 <menu+0x87a>
			if(dilSecim == 0) {
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <menu+0x8d4>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80024d8:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <menu+0x928>)
 80024da:	2101      	movs	r1, #1
 80024dc:	2002      	movs	r0, #2
 80024de:	f7fe fa69 	bl	80009b4 <lcd_print>
 80024e2:	e008      	b.n	80024f6 <menu+0x87a>
			} else if(dilSecim == 1) {
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <menu+0x8d4>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d104      	bne.n	80024f6 <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <menu+0x92c>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	2002      	movs	r0, #2
 80024f2:	f7fe fa5f 	bl	80009b4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <menu+0x930>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <menu+0x8b0>
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <menu+0x8e4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d112      	bne.n	800252c <menu+0x8b0>
			if(dilSecim == 0) {
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <menu+0x8d4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <menu+0x934>)
 8002510:	2101      	movs	r1, #1
 8002512:	2002      	movs	r0, #2
 8002514:	f7fe fa4e 	bl	80009b4 <lcd_print>
 8002518:	e008      	b.n	800252c <menu+0x8b0>
			} else if(dilSecim == 1) {
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <menu+0x8d4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d104      	bne.n	800252c <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <menu+0x938>)
 8002524:	2101      	movs	r1, #1
 8002526:	2002      	movs	r0, #2
 8002528:	f7fe fa44 	bl	80009b4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <menu+0x930>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d14c      	bne.n	80025ce <menu+0x952>
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <menu+0x8e4>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d148      	bne.n	80025ce <menu+0x952>
			if(dilSecim == 0) {
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <menu+0x8d4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d13b      	bne.n	80025bc <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <menu+0x93c>)
 8002546:	2101      	movs	r1, #1
 8002548:	2002      	movs	r0, #2
 800254a:	f7fe fa33 	bl	80009b4 <lcd_print>
 800254e:	e03e      	b.n	80025ce <menu+0x952>
 8002550:	20000cbe 	.word	0x20000cbe
 8002554:	0800e2f0 	.word	0x0800e2f0
 8002558:	40010800 	.word	0x40010800
 800255c:	20000ccc 	.word	0x20000ccc
 8002560:	20000cac 	.word	0x20000cac
 8002564:	20000c9f 	.word	0x20000c9f
 8002568:	20000cbf 	.word	0x20000cbf
 800256c:	20000b38 	.word	0x20000b38
 8002570:	20000cc0 	.word	0x20000cc0
 8002574:	20000cc1 	.word	0x20000cc1
 8002578:	20000cc2 	.word	0x20000cc2
 800257c:	20000cc3 	.word	0x20000cc3
 8002580:	20000cc4 	.word	0x20000cc4
 8002584:	20000cc5 	.word	0x20000cc5
 8002588:	20000cc6 	.word	0x20000cc6
 800258c:	20000cc7 	.word	0x20000cc7
 8002590:	20000cc8 	.word	0x20000cc8
 8002594:	20000cc9 	.word	0x20000cc9
 8002598:	20000c9d 	.word	0x20000c9d
 800259c:	0800e304 	.word	0x0800e304
 80025a0:	0800e318 	.word	0x0800e318
 80025a4:	0800e32c 	.word	0x0800e32c
 80025a8:	0800e340 	.word	0x0800e340
 80025ac:	20000c9e 	.word	0x20000c9e
 80025b0:	0800e354 	.word	0x0800e354
 80025b4:	0800e364 	.word	0x0800e364
 80025b8:	0800e374 	.word	0x0800e374
			} else if(dilSecim == 1) {
 80025bc:	4b98      	ldr	r3, [pc, #608]	; (8002820 <menu+0xba4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d104      	bne.n	80025ce <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 80025c4:	4a97      	ldr	r2, [pc, #604]	; (8002824 <menu+0xba8>)
 80025c6:	2101      	movs	r1, #1
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe f9f3 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80025ce:	2102      	movs	r1, #2
 80025d0:	4895      	ldr	r0, [pc, #596]	; (8002828 <menu+0xbac>)
 80025d2:	f007 fe8b 	bl	800a2ec <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d119      	bne.n	8002610 <menu+0x994>
 80025dc:	4b93      	ldr	r3, [pc, #588]	; (800282c <menu+0xbb0>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f083 0301 	eor.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <menu+0x994>
 80025ea:	4b91      	ldr	r3, [pc, #580]	; (8002830 <menu+0xbb4>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10e      	bne.n	8002610 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 80025f2:	4b90      	ldr	r3, [pc, #576]	; (8002834 <menu+0xbb8>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <menu+0xbb8>)
 80025fc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80025fe:	4b8d      	ldr	r3, [pc, #564]	; (8002834 <menu+0xbb8>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d902      	bls.n	800260c <menu+0x990>
				calismaSekli = 0;
 8002606:	4b8b      	ldr	r3, [pc, #556]	; (8002834 <menu+0xbb8>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800260c:	f004 f8d4 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002610:	2104      	movs	r1, #4
 8002612:	4885      	ldr	r0, [pc, #532]	; (8002828 <menu+0xbac>)
 8002614:	f007 fe6a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	2b01      	cmp	r3, #1
 800261c:	d119      	bne.n	8002652 <menu+0x9d6>
 800261e:	4b83      	ldr	r3, [pc, #524]	; (800282c <menu+0xbb0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f083 0301 	eor.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <menu+0x9d6>
 800262c:	4b80      	ldr	r3, [pc, #512]	; (8002830 <menu+0xbb4>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10e      	bne.n	8002652 <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8002634:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <menu+0xbb8>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	3b01      	subs	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <menu+0xbb8>)
 800263e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002640:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <menu+0xbb8>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <menu+0x9d2>
	    		calismaSekli = 1;
 8002648:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <menu+0xbb8>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800264e:	f004 f8b3 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002652:	2108      	movs	r1, #8
 8002654:	4874      	ldr	r0, [pc, #464]	; (8002828 <menu+0xbac>)
 8002656:	f007 fe49 	bl	800a2ec <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d118      	bne.n	8002692 <menu+0xa16>
 8002660:	4b72      	ldr	r3, [pc, #456]	; (800282c <menu+0xbb0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d011      	beq.n	8002692 <menu+0xa16>
			eepromData[1] = calismaSekli;
 800266e:	4b71      	ldr	r3, [pc, #452]	; (8002834 <menu+0xbb8>)
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b71      	ldr	r3, [pc, #452]	; (8002838 <menu+0xbbc>)
 8002674:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8002676:	4b6f      	ldr	r3, [pc, #444]	; (8002834 <menu+0xbb8>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d106      	bne.n	800268c <menu+0xa10>
				altLimit = 1;
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <menu+0xbc0>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002684:	4b6d      	ldr	r3, [pc, #436]	; (800283c <menu+0xbc0>)
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <menu+0xbbc>)
 800268a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800268c:	4b6c      	ldr	r3, [pc, #432]	; (8002840 <menu+0xbc4>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8002692:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <menu+0xbc8>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	f040 8083 	bne.w	80027a2 <menu+0xb26>
		if(dilSecim == 0) {
 800269c:	4b60      	ldr	r3, [pc, #384]	; (8002820 <menu+0xba4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80026a4:	4a68      	ldr	r2, [pc, #416]	; (8002848 <menu+0xbcc>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	2001      	movs	r0, #1
 80026aa:	f7fe f983 	bl	80009b4 <lcd_print>
 80026ae:	e008      	b.n	80026c2 <menu+0xa46>
		} else if(dilSecim == 1) {
 80026b0:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <menu+0xba4>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d104      	bne.n	80026c2 <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 80026b8:	4a64      	ldr	r2, [pc, #400]	; (800284c <menu+0xbd0>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	2001      	movs	r0, #1
 80026be:	f7fe f979 	bl	80009b4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <menu+0xbd4>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d113      	bne.n	80026f2 <menu+0xa76>
			if(dilSecim == 0) {
 80026ca:	4b55      	ldr	r3, [pc, #340]	; (8002820 <menu+0xba4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 80026d2:	4a60      	ldr	r2, [pc, #384]	; (8002854 <menu+0xbd8>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	2002      	movs	r0, #2
 80026d8:	f7fe f96c 	bl	80009b4 <lcd_print>
 80026dc:	e012      	b.n	8002704 <menu+0xa88>
			} else if(dilSecim == 1) {
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <menu+0xba4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10e      	bne.n	8002704 <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 80026e6:	4a5c      	ldr	r2, [pc, #368]	; (8002858 <menu+0xbdc>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	2002      	movs	r0, #2
 80026ec:	f7fe f962 	bl	80009b4 <lcd_print>
 80026f0:	e008      	b.n	8002704 <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <menu+0xbd4>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d104      	bne.n	8002704 <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 80026fa:	4a58      	ldr	r2, [pc, #352]	; (800285c <menu+0xbe0>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2002      	movs	r0, #2
 8002700:	f7fe f958 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002704:	2102      	movs	r1, #2
 8002706:	4848      	ldr	r0, [pc, #288]	; (8002828 <menu+0xbac>)
 8002708:	f007 fdf0 	bl	800a2ec <HAL_GPIO_ReadPin>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d115      	bne.n	800273e <menu+0xac2>
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <menu+0xbb0>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	f083 0301 	eor.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <menu+0xbd4>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <menu+0xbd4>)
 800272a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800272c:	4b48      	ldr	r3, [pc, #288]	; (8002850 <menu+0xbd4>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d902      	bls.n	800273a <menu+0xabe>
				emniyetCercevesi = 0;
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <menu+0xbd4>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800273a:	f004 f83d 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800273e:	2104      	movs	r1, #4
 8002740:	4839      	ldr	r0, [pc, #228]	; (8002828 <menu+0xbac>)
 8002742:	f007 fdd3 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b01      	cmp	r3, #1
 800274a:	d115      	bne.n	8002778 <menu+0xafc>
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <menu+0xbb0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00e      	beq.n	8002778 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <menu+0xbd4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	3b01      	subs	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <menu+0xbd4>)
 8002764:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <menu+0xbd4>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <menu+0xaf8>
		   		emniyetCercevesi = 1;
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <menu+0xbd4>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002774:	f004 f820 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002778:	2108      	movs	r1, #8
 800277a:	482b      	ldr	r0, [pc, #172]	; (8002828 <menu+0xbac>)
 800277c:	f007 fdb6 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10d      	bne.n	80027a2 <menu+0xb26>
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <menu+0xbb0>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f083 0301 	eor.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <menu+0xbd4>)
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <menu+0xbbc>)
 800279a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <menu+0xbc4>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <menu+0xbc8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	f040 80ba 	bne.w	8002920 <menu+0xca4>
		if(dilSecim == 0) {
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <menu+0xba4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <menu+0xbe4>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7fe f8fb 	bl	80009b4 <lcd_print>
 80027be:	e008      	b.n	80027d2 <menu+0xb56>
		} else if(dilSecim == 1) {
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <menu+0xba4>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d104      	bne.n	80027d2 <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <menu+0xbe8>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	2001      	movs	r0, #1
 80027ce:	f7fe f8f1 	bl	80009b4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80027d2:	4b25      	ldr	r3, [pc, #148]	; (8002868 <menu+0xbec>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d113      	bne.n	8002802 <menu+0xb86>
			if(dilSecim == 0) {
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <menu+0xba4>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <menu+0xbd8>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	2002      	movs	r0, #2
 80027e8:	f7fe f8e4 	bl	80009b4 <lcd_print>
 80027ec:	e049      	b.n	8002882 <menu+0xc06>
			} else if(dilSecim == 1) {
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <menu+0xba4>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d145      	bne.n	8002882 <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <menu+0xbdc>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	2002      	movs	r0, #2
 80027fc:	f7fe f8da 	bl	80009b4 <lcd_print>
 8002800:	e03f      	b.n	8002882 <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <menu+0xbec>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d13b      	bne.n	8002882 <menu+0xc06>
			if(dilSecim == 0) {
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <menu+0xba4>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d12e      	bne.n	8002870 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <menu+0xbf0>)
 8002814:	2101      	movs	r1, #1
 8002816:	2002      	movs	r0, #2
 8002818:	f7fe f8cc 	bl	80009b4 <lcd_print>
 800281c:	e031      	b.n	8002882 <menu+0xc06>
 800281e:	bf00      	nop
 8002820:	20000cbe 	.word	0x20000cbe
 8002824:	0800e384 	.word	0x0800e384
 8002828:	40010800 	.word	0x40010800
 800282c:	20000ccc 	.word	0x20000ccc
 8002830:	20000cac 	.word	0x20000cac
 8002834:	20000c9e 	.word	0x20000c9e
 8002838:	20000b38 	.word	0x20000b38
 800283c:	20000ca3 	.word	0x20000ca3
 8002840:	20000cc9 	.word	0x20000cc9
 8002844:	20000c9d 	.word	0x20000c9d
 8002848:	0800e394 	.word	0x0800e394
 800284c:	0800e3a8 	.word	0x0800e3a8
 8002850:	20000ca1 	.word	0x20000ca1
 8002854:	0800e3bc 	.word	0x0800e3bc
 8002858:	0800e3d0 	.word	0x0800e3d0
 800285c:	0800e3e4 	.word	0x0800e3e4
 8002860:	0800e3f4 	.word	0x0800e3f4
 8002864:	0800e408 	.word	0x0800e408
 8002868:	20000ca2 	.word	0x20000ca2
 800286c:	0800e41c 	.word	0x0800e41c
			} else if(dilSecim == 1) {
 8002870:	4b92      	ldr	r3, [pc, #584]	; (8002abc <menu+0xe40>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d104      	bne.n	8002882 <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002878:	4a91      	ldr	r2, [pc, #580]	; (8002ac0 <menu+0xe44>)
 800287a:	2101      	movs	r1, #1
 800287c:	2002      	movs	r0, #2
 800287e:	f7fe f899 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002882:	2102      	movs	r1, #2
 8002884:	488f      	ldr	r0, [pc, #572]	; (8002ac4 <menu+0xe48>)
 8002886:	f007 fd31 	bl	800a2ec <HAL_GPIO_ReadPin>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d115      	bne.n	80028bc <menu+0xc40>
 8002890:	4b8d      	ldr	r3, [pc, #564]	; (8002ac8 <menu+0xe4c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 800289e:	4b8b      	ldr	r3, [pc, #556]	; (8002acc <menu+0xe50>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b89      	ldr	r3, [pc, #548]	; (8002acc <menu+0xe50>)
 80028a8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <menu+0xe50>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d902      	bls.n	80028b8 <menu+0xc3c>
				yavaslamaLimit = 0;
 80028b2:	4b86      	ldr	r3, [pc, #536]	; (8002acc <menu+0xe50>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028b8:	f003 ff7e 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028bc:	2104      	movs	r1, #4
 80028be:	4881      	ldr	r0, [pc, #516]	; (8002ac4 <menu+0xe48>)
 80028c0:	f007 fd14 	bl	800a2ec <HAL_GPIO_ReadPin>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d115      	bne.n	80028f6 <menu+0xc7a>
 80028ca:	4b7f      	ldr	r3, [pc, #508]	; (8002ac8 <menu+0xe4c>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 80028d8:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <menu+0xe50>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <menu+0xe50>)
 80028e2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80028e4:	4b79      	ldr	r3, [pc, #484]	; (8002acc <menu+0xe50>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <menu+0xc76>
		   		yavaslamaLimit = 1;
 80028ec:	4b77      	ldr	r3, [pc, #476]	; (8002acc <menu+0xe50>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028f2:	f003 ff61 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f6:	2108      	movs	r1, #8
 80028f8:	4872      	ldr	r0, [pc, #456]	; (8002ac4 <menu+0xe48>)
 80028fa:	f007 fcf7 	bl	800a2ec <HAL_GPIO_ReadPin>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <menu+0xca4>
 8002904:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <menu+0xe4c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 8002912:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <menu+0xe50>)
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	4b6e      	ldr	r3, [pc, #440]	; (8002ad0 <menu+0xe54>)
 8002918:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800291a:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <menu+0xe58>)
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002920:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <menu+0xe5c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b05      	cmp	r3, #5
 8002926:	f040 80b9 	bne.w	8002a9c <menu+0xe20>
		if(dilSecim == 0) {
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <menu+0xe40>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002932:	4a6a      	ldr	r2, [pc, #424]	; (8002adc <menu+0xe60>)
 8002934:	2101      	movs	r1, #1
 8002936:	2001      	movs	r0, #1
 8002938:	f7fe f83c 	bl	80009b4 <lcd_print>
 800293c:	e008      	b.n	8002950 <menu+0xcd4>
		} else if(dilSecim == 1) {
 800293e:	4b5f      	ldr	r3, [pc, #380]	; (8002abc <menu+0xe40>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d104      	bne.n	8002950 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002946:	4a66      	ldr	r2, [pc, #408]	; (8002ae0 <menu+0xe64>)
 8002948:	2101      	movs	r1, #1
 800294a:	2001      	movs	r0, #1
 800294c:	f7fe f832 	bl	80009b4 <lcd_print>
		}

		if(altLimit == 0) {
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <menu+0xe68>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d113      	bne.n	8002980 <menu+0xd04>
			if(dilSecim == 0) {
 8002958:	4b58      	ldr	r3, [pc, #352]	; (8002abc <menu+0xe40>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002960:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <menu+0xe6c>)
 8002962:	2101      	movs	r1, #1
 8002964:	2002      	movs	r0, #2
 8002966:	f7fe f825 	bl	80009b4 <lcd_print>
 800296a:	e020      	b.n	80029ae <menu+0xd32>
			} else if(dilSecim == 1) {
 800296c:	4b53      	ldr	r3, [pc, #332]	; (8002abc <menu+0xe40>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d11c      	bne.n	80029ae <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 8002974:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <menu+0xe70>)
 8002976:	2101      	movs	r1, #1
 8002978:	2002      	movs	r0, #2
 800297a:	f7fe f81b 	bl	80009b4 <lcd_print>
 800297e:	e016      	b.n	80029ae <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002980:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <menu+0xe68>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d112      	bne.n	80029ae <menu+0xd32>
			if(dilSecim == 0){
 8002988:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <menu+0xe40>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <menu+0xe74>)
 8002992:	2101      	movs	r1, #1
 8002994:	2002      	movs	r0, #2
 8002996:	f7fe f80d 	bl	80009b4 <lcd_print>
 800299a:	e008      	b.n	80029ae <menu+0xd32>
			} else if(dilSecim == 1){
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <menu+0xe40>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d104      	bne.n	80029ae <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 80029a4:	4a46      	ldr	r2, [pc, #280]	; (8002ac0 <menu+0xe44>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	2002      	movs	r0, #2
 80029aa:	f7fe f803 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80029ae:	2102      	movs	r1, #2
 80029b0:	4844      	ldr	r0, [pc, #272]	; (8002ac4 <menu+0xe48>)
 80029b2:	f007 fc9b 	bl	800a2ec <HAL_GPIO_ReadPin>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d119      	bne.n	80029f0 <menu+0xd74>
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <menu+0xe4c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f083 0301 	eor.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <menu+0xd74>
 80029ca:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <menu+0xe78>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <menu+0xd74>
			altLimit = altLimit + 1;
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <menu+0xe68>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <menu+0xe68>)
 80029dc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80029de:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <menu+0xe68>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d902      	bls.n	80029ec <menu+0xd70>
				altLimit = 0;
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <menu+0xe68>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029ec:	f003 fee4 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80029f0:	2104      	movs	r1, #4
 80029f2:	4834      	ldr	r0, [pc, #208]	; (8002ac4 <menu+0xe48>)
 80029f4:	f007 fc7a 	bl	800a2ec <HAL_GPIO_ReadPin>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d119      	bne.n	8002a32 <menu+0xdb6>
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <menu+0xe4c>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	f083 0301 	eor.w	r3, r3, #1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <menu+0xdb6>
 8002a0c:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <menu+0xe78>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10e      	bne.n	8002a32 <menu+0xdb6>
			altLimit = altLimit - 1;
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <menu+0xe68>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <menu+0xe68>)
 8002a1e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <menu+0xe68>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <menu+0xdb2>
		   		altLimit = 1;
 8002a28:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <menu+0xe68>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2e:	f003 fec3 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a32:	2108      	movs	r1, #8
 8002a34:	4823      	ldr	r0, [pc, #140]	; (8002ac4 <menu+0xe48>)
 8002a36:	f007 fc59 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d12d      	bne.n	8002a9c <menu+0xe20>
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <menu+0xe4c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d026      	beq.n	8002a9c <menu+0xe20>
			eepromData[5] = altLimit;
 8002a4e:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <menu+0xe68>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <menu+0xe54>)
 8002a54:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <menu+0xe68>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d110      	bne.n	8002a80 <menu+0xe04>
 8002a5e:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <menu+0xe7c>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <menu+0xdf2>
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <menu+0xe7c>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d108      	bne.n	8002a80 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <menu+0xe7c>)
 8002a70:	2203      	movs	r2, #3
 8002a72:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <menu+0xe7c>)
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <menu+0xe54>)
 8002a7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002a7e:	e00a      	b.n	8002a96 <menu+0xe1a>
			} else if(altLimit == 0) {
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <menu+0xe68>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <menu+0xe1a>
				platformSilindirTipi = 0;
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <menu+0xe80>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <menu+0xe80>)
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <menu+0xe54>)
 8002a94:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <menu+0xe58>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <menu+0xe5c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	f040 80b6 	bne.w	8002c12 <menu+0xf96>
		if(dilSecim == 0) {
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <menu+0xe40>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d12a      	bne.n	8002b04 <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002aae:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <menu+0xe84>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7fd ff7e 	bl	80009b4 <lcd_print>
 8002ab8:	e02d      	b.n	8002b16 <menu+0xe9a>
 8002aba:	bf00      	nop
 8002abc:	20000cbe 	.word	0x20000cbe
 8002ac0:	0800e430 	.word	0x0800e430
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	20000ccc 	.word	0x20000ccc
 8002acc:	20000ca2 	.word	0x20000ca2
 8002ad0:	20000b38 	.word	0x20000b38
 8002ad4:	20000cc9 	.word	0x20000cc9
 8002ad8:	20000c9d 	.word	0x20000c9d
 8002adc:	0800e444 	.word	0x0800e444
 8002ae0:	0800e458 	.word	0x0800e458
 8002ae4:	20000ca3 	.word	0x20000ca3
 8002ae8:	0800e3bc 	.word	0x0800e3bc
 8002aec:	0800e3d0 	.word	0x0800e3d0
 8002af0:	0800e41c 	.word	0x0800e41c
 8002af4:	20000c9e 	.word	0x20000c9e
 8002af8:	20000caa 	.word	0x20000caa
 8002afc:	20000cb0 	.word	0x20000cb0
 8002b00:	0800e46c 	.word	0x0800e46c
		} else if(dilSecim == 1){
 8002b04:	4b7a      	ldr	r3, [pc, #488]	; (8002cf0 <menu+0x1074>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d104      	bne.n	8002b16 <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002b0c:	4a79      	ldr	r2, [pc, #484]	; (8002cf4 <menu+0x1078>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7fd ff4f 	bl	80009b4 <lcd_print>
		}
		if(basincSalteri == 0){
 8002b16:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <menu+0x107c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <menu+0xeca>
			if(dilSecim == 0) {
 8002b1e:	4b74      	ldr	r3, [pc, #464]	; (8002cf0 <menu+0x1074>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 8002b26:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <menu+0x1080>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f7fd ff42 	bl	80009b4 <lcd_print>
 8002b30:	e020      	b.n	8002b74 <menu+0xef8>
			} else if(dilSecim == 1){
 8002b32:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <menu+0x1074>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d11c      	bne.n	8002b74 <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 8002b3a:	4a71      	ldr	r2, [pc, #452]	; (8002d00 <menu+0x1084>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f7fd ff38 	bl	80009b4 <lcd_print>
 8002b44:	e016      	b.n	8002b74 <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 8002b46:	4b6c      	ldr	r3, [pc, #432]	; (8002cf8 <menu+0x107c>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d112      	bne.n	8002b74 <menu+0xef8>
			if(dilSecim == 0) {
 8002b4e:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <menu+0x1074>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 8002b56:	4a6b      	ldr	r2, [pc, #428]	; (8002d04 <menu+0x1088>)
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7fd ff2a 	bl	80009b4 <lcd_print>
 8002b60:	e008      	b.n	8002b74 <menu+0xef8>
			} else if(dilSecim == 1) {
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <menu+0x1074>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d104      	bne.n	8002b74 <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002b6a:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <menu+0x108c>)
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2002      	movs	r0, #2
 8002b70:	f7fd ff20 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b74:	2102      	movs	r1, #2
 8002b76:	4865      	ldr	r0, [pc, #404]	; (8002d0c <menu+0x1090>)
 8002b78:	f007 fbb8 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d115      	bne.n	8002bae <menu+0xf32>
 8002b82:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <menu+0x1094>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <menu+0x107c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <menu+0x107c>)
 8002b9a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002b9c:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <menu+0x107c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d902      	bls.n	8002baa <menu+0xf2e>
				basincSalteri = 0;
 8002ba4:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <menu+0x107c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002baa:	f003 fe05 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bae:	2104      	movs	r1, #4
 8002bb0:	4856      	ldr	r0, [pc, #344]	; (8002d0c <menu+0x1090>)
 8002bb2:	f007 fb9b 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d115      	bne.n	8002be8 <menu+0xf6c>
 8002bbc:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <menu+0x1094>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 8002bca:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <menu+0x107c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <menu+0x107c>)
 8002bd4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002bd6:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <menu+0x107c>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <menu+0xf68>
		   		basincSalteri = 1;
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <menu+0x107c>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002be4:	f003 fde8 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be8:	2108      	movs	r1, #8
 8002bea:	4848      	ldr	r0, [pc, #288]	; (8002d0c <menu+0x1090>)
 8002bec:	f007 fb7e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10d      	bne.n	8002c12 <menu+0xf96>
 8002bf6:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <menu+0x1094>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d006      	beq.n	8002c12 <menu+0xf96>
			eepromData[6] = basincSalteri;
 8002c04:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <menu+0x107c>)
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <menu+0x1098>)
 8002c0a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002c0c:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <menu+0x109c>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002c12:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <menu+0x10a0>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	f040 80f5 	bne.w	8002e06 <menu+0x118a>
		if(dilSecim == 0) {
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <menu+0x1074>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002c24:	4a3e      	ldr	r2, [pc, #248]	; (8002d20 <menu+0x10a4>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f7fd fec3 	bl	80009b4 <lcd_print>
 8002c2e:	e008      	b.n	8002c42 <menu+0xfc6>
		} else if(dilSecim == 1){
 8002c30:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <menu+0x1074>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d104      	bne.n	8002c42 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002c38:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <menu+0x10a8>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7fd feb9 	bl	80009b4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <menu+0x10ac>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d113      	bne.n	8002c72 <menu+0xff6>
			if(dilSecim == 0) {
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <menu+0x1074>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <menu+0x1080>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	2002      	movs	r0, #2
 8002c58:	f7fd feac 	bl	80009b4 <lcd_print>
 8002c5c:	e079      	b.n	8002d52 <menu+0x10d6>
			} else if(dilSecim == 1){
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <menu+0x1074>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d175      	bne.n	8002d52 <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 8002c66:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <menu+0x1084>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	2002      	movs	r0, #2
 8002c6c:	f7fd fea2 	bl	80009b4 <lcd_print>
 8002c70:	e06f      	b.n	8002d52 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <menu+0x10ac>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d113      	bne.n	8002ca2 <menu+0x1026>
			if(dilSecim == 0) {
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <menu+0x1074>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002c82:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <menu+0x10b0>)
 8002c84:	2101      	movs	r1, #1
 8002c86:	2002      	movs	r0, #2
 8002c88:	f7fd fe94 	bl	80009b4 <lcd_print>
 8002c8c:	e061      	b.n	8002d52 <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <menu+0x1074>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d15d      	bne.n	8002d52 <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <menu+0x10b4>)
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7fd fe8a 	bl	80009b4 <lcd_print>
 8002ca0:	e057      	b.n	8002d52 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <menu+0x10ac>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d113      	bne.n	8002cd2 <menu+0x1056>
			if(dilSecim == 0) {
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <menu+0x1074>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002cb2:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <menu+0x10b8>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f7fd fe7c 	bl	80009b4 <lcd_print>
 8002cbc:	e049      	b.n	8002d52 <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <menu+0x1074>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d145      	bne.n	8002d52 <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <menu+0x10bc>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2002      	movs	r0, #2
 8002ccc:	f7fd fe72 	bl	80009b4 <lcd_print>
 8002cd0:	e03f      	b.n	8002d52 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <menu+0x10ac>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d13b      	bne.n	8002d52 <menu+0x10d6>
			if(dilSecim == 0) {
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <menu+0x1074>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d12e      	bne.n	8002d40 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <menu+0x10c0>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	f7fd fe64 	bl	80009b4 <lcd_print>
 8002cec:	e031      	b.n	8002d52 <menu+0x10d6>
 8002cee:	bf00      	nop
 8002cf0:	20000cbe 	.word	0x20000cbe
 8002cf4:	0800e47c 	.word	0x0800e47c
 8002cf8:	20000ca4 	.word	0x20000ca4
 8002cfc:	0800e3bc 	.word	0x0800e3bc
 8002d00:	0800e3d0 	.word	0x0800e3d0
 8002d04:	0800e41c 	.word	0x0800e41c
 8002d08:	0800e430 	.word	0x0800e430
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	20000ccc 	.word	0x20000ccc
 8002d14:	20000b38 	.word	0x20000b38
 8002d18:	20000cc9 	.word	0x20000cc9
 8002d1c:	20000c9d 	.word	0x20000c9d
 8002d20:	0800e48c 	.word	0x0800e48c
 8002d24:	0800e4a0 	.word	0x0800e4a0
 8002d28:	20000ca5 	.word	0x20000ca5
 8002d2c:	0800e4b4 	.word	0x0800e4b4
 8002d30:	0800e4c8 	.word	0x0800e4c8
 8002d34:	0800e4dc 	.word	0x0800e4dc
 8002d38:	0800e4f0 	.word	0x0800e4f0
 8002d3c:	0800e504 	.word	0x0800e504
			} else if(dilSecim == 1){
 8002d40:	4b99      	ldr	r3, [pc, #612]	; (8002fa8 <menu+0x132c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d104      	bne.n	8002d52 <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002d48:	4a98      	ldr	r2, [pc, #608]	; (8002fac <menu+0x1330>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f7fd fe31 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d52:	2102      	movs	r1, #2
 8002d54:	4896      	ldr	r0, [pc, #600]	; (8002fb0 <menu+0x1334>)
 8002d56:	f007 fac9 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d115      	bne.n	8002d8c <menu+0x1110>
 8002d60:	4b94      	ldr	r3, [pc, #592]	; (8002fb4 <menu+0x1338>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f083 0301 	eor.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 8002d6e:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <menu+0x133c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b90      	ldr	r3, [pc, #576]	; (8002fb8 <menu+0x133c>)
 8002d78:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002d7a:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <menu+0x133c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d902      	bls.n	8002d88 <menu+0x110c>
				kapiSecimleri = 0;
 8002d82:	4b8d      	ldr	r3, [pc, #564]	; (8002fb8 <menu+0x133c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d88:	f003 fd16 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	4888      	ldr	r0, [pc, #544]	; (8002fb0 <menu+0x1334>)
 8002d90:	f007 faac 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d115      	bne.n	8002dc6 <menu+0x114a>
 8002d9a:	4b86      	ldr	r3, [pc, #536]	; (8002fb4 <menu+0x1338>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f083 0301 	eor.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002da8:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <menu+0x133c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <menu+0x133c>)
 8002db2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002db4:	4b80      	ldr	r3, [pc, #512]	; (8002fb8 <menu+0x133c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d902      	bls.n	8002dc2 <menu+0x1146>
		   		kapiSecimleri = 3;
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <menu+0x133c>)
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dc2:	f003 fcf9 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	4879      	ldr	r0, [pc, #484]	; (8002fb0 <menu+0x1334>)
 8002dca:	f007 fa8f 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d118      	bne.n	8002e06 <menu+0x118a>
 8002dd4:	4b77      	ldr	r3, [pc, #476]	; (8002fb4 <menu+0x1338>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d011      	beq.n	8002e06 <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 8002de2:	4b75      	ldr	r3, [pc, #468]	; (8002fb8 <menu+0x133c>)
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <menu+0x1340>)
 8002de8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <menu+0x133c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <menu+0x1184>
				altLimit = 1;
 8002df2:	4b73      	ldr	r3, [pc, #460]	; (8002fc0 <menu+0x1344>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <menu+0x1344>)
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <menu+0x1340>)
 8002dfe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002e00:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <menu+0x1348>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002e06:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <menu+0x134c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	f040 8092 	bne.w	8002f34 <menu+0x12b8>
		if(dilSecim == 0) {
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <menu+0x132c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002e18:	4a6c      	ldr	r2, [pc, #432]	; (8002fcc <menu+0x1350>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7fd fdc9 	bl	80009b4 <lcd_print>
 8002e22:	e008      	b.n	8002e36 <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002e24:	4b60      	ldr	r3, [pc, #384]	; (8002fa8 <menu+0x132c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d104      	bne.n	8002e36 <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002e2c:	4a68      	ldr	r2, [pc, #416]	; (8002fd0 <menu+0x1354>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2001      	movs	r0, #1
 8002e32:	f7fd fdbf 	bl	80009b4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <menu+0x1358>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <menu+0x11ea>
			if(dilSecim == 0) {
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <menu+0x132c>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002e46:	4a64      	ldr	r2, [pc, #400]	; (8002fd8 <menu+0x135c>)
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f7fd fdb2 	bl	80009b4 <lcd_print>
 8002e50:	e020      	b.n	8002e94 <menu+0x1218>
			} else if(dilSecim == 1) {
 8002e52:	4b55      	ldr	r3, [pc, #340]	; (8002fa8 <menu+0x132c>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d11c      	bne.n	8002e94 <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002e5a:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <menu+0x1360>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f7fd fda8 	bl	80009b4 <lcd_print>
 8002e64:	e016      	b.n	8002e94 <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002e66:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <menu+0x1358>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d112      	bne.n	8002e94 <menu+0x1218>
			if(dilSecim == 0){
 8002e6e:	4b4e      	ldr	r3, [pc, #312]	; (8002fa8 <menu+0x132c>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002e76:	4a5a      	ldr	r2, [pc, #360]	; (8002fe0 <menu+0x1364>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	f7fd fd9a 	bl	80009b4 <lcd_print>
 8002e80:	e008      	b.n	8002e94 <menu+0x1218>
			} else if(dilSecim == 1){
 8002e82:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <menu+0x132c>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d104      	bne.n	8002e94 <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <menu+0x1368>)
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f7fd fd90 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e94:	2102      	movs	r1, #2
 8002e96:	4846      	ldr	r0, [pc, #280]	; (8002fb0 <menu+0x1334>)
 8002e98:	f007 fa28 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d115      	bne.n	8002ece <menu+0x1252>
 8002ea2:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <menu+0x1338>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002eb0:	4b48      	ldr	r3, [pc, #288]	; (8002fd4 <menu+0x1358>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <menu+0x1358>)
 8002eba:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002ebc:	4b45      	ldr	r3, [pc, #276]	; (8002fd4 <menu+0x1358>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d902      	bls.n	8002eca <menu+0x124e>
				kapiAcTipi = 0;
 8002ec4:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <menu+0x1358>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002eca:	f003 fc75 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ece:	2104      	movs	r1, #4
 8002ed0:	4837      	ldr	r0, [pc, #220]	; (8002fb0 <menu+0x1334>)
 8002ed2:	f007 fa0b 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d115      	bne.n	8002f08 <menu+0x128c>
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <menu+0x1338>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00e      	beq.n	8002f08 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <menu+0x1358>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <menu+0x1358>)
 8002ef4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <menu+0x1358>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <menu+0x1288>
		   		kapiAcTipi = 1;
 8002efe:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <menu+0x1358>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f04:	f003 fc58 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f08:	2108      	movs	r1, #8
 8002f0a:	4829      	ldr	r0, [pc, #164]	; (8002fb0 <menu+0x1334>)
 8002f0c:	f007 f9ee 	bl	800a2ec <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10e      	bne.n	8002f34 <menu+0x12b8>
 8002f16:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <menu+0x1338>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <menu+0x1358>)
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <menu+0x1340>)
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002f2e:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <menu+0x1348>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <menu+0x134c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b09      	cmp	r3, #9
 8002f3a:	f040 80b9 	bne.w	80030b0 <menu+0x1434>
		if(dilSecim == 0){
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <menu+0x132c>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <menu+0x136c>)
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f7fd fd32 	bl	80009b4 <lcd_print>
 8002f50:	e008      	b.n	8002f64 <menu+0x12e8>
		} else if(dilSecim == 1) {
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <menu+0x132c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d104      	bne.n	8002f64 <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002f5a:	4a24      	ldr	r2, [pc, #144]	; (8002fec <menu+0x1370>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fd fd28 	bl	80009b4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <menu+0x1374>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <menu+0x1378>)
 8002f6e:	2101      	movs	r1, #1
 8002f70:	2002      	movs	r0, #2
 8002f72:	f7fd fd1f 	bl	80009b4 <lcd_print>
 8002f76:	e04c      	b.n	8003012 <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <menu+0x1374>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d13f      	bne.n	8003000 <menu+0x1384>
			if(dilSecim == 0){
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <menu+0x132c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <menu+0x137c>)
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f7fd fd11 	bl	80009b4 <lcd_print>
 8002f92:	e03e      	b.n	8003012 <menu+0x1396>
			} else if(dilSecim == 1) {
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <menu+0x132c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d13a      	bne.n	8003012 <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <menu+0x1380>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	2002      	movs	r0, #2
 8002fa2:	f7fd fd07 	bl	80009b4 <lcd_print>
 8002fa6:	e034      	b.n	8003012 <menu+0x1396>
 8002fa8:	20000cbe 	.word	0x20000cbe
 8002fac:	0800e518 	.word	0x0800e518
 8002fb0:	40010800 	.word	0x40010800
 8002fb4:	20000ccc 	.word	0x20000ccc
 8002fb8:	20000ca5 	.word	0x20000ca5
 8002fbc:	20000b38 	.word	0x20000b38
 8002fc0:	20000ca3 	.word	0x20000ca3
 8002fc4:	20000cc9 	.word	0x20000cc9
 8002fc8:	20000c9d 	.word	0x20000c9d
 8002fcc:	0800e52c 	.word	0x0800e52c
 8002fd0:	0800e540 	.word	0x0800e540
 8002fd4:	20000ca9 	.word	0x20000ca9
 8002fd8:	0800e554 	.word	0x0800e554
 8002fdc:	0800e564 	.word	0x0800e564
 8002fe0:	0800e574 	.word	0x0800e574
 8002fe4:	0800e588 	.word	0x0800e588
 8002fe8:	0800e59c 	.word	0x0800e59c
 8002fec:	0800e5b0 	.word	0x0800e5b0
 8002ff0:	20000ca6 	.word	0x20000ca6
 8002ff4:	0800e5c4 	.word	0x0800e5c4
 8002ff8:	0800e5d8 	.word	0x0800e5d8
 8002ffc:	0800e5e8 	.word	0x0800e5e8
			}
		} else if(kapi1Tip == 2) {
 8003000:	4b8a      	ldr	r3, [pc, #552]	; (800322c <menu+0x15b0>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d104      	bne.n	8003012 <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8003008:	4a89      	ldr	r2, [pc, #548]	; (8003230 <menu+0x15b4>)
 800300a:	2101      	movs	r1, #1
 800300c:	2002      	movs	r0, #2
 800300e:	f7fd fcd1 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003012:	2102      	movs	r1, #2
 8003014:	4887      	ldr	r0, [pc, #540]	; (8003234 <menu+0x15b8>)
 8003016:	f007 f969 	bl	800a2ec <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d115      	bne.n	800304c <menu+0x13d0>
 8003020:	4b85      	ldr	r3, [pc, #532]	; (8003238 <menu+0x15bc>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 800302e:	4b7f      	ldr	r3, [pc, #508]	; (800322c <menu+0x15b0>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b7d      	ldr	r3, [pc, #500]	; (800322c <menu+0x15b0>)
 8003038:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800303a:	4b7c      	ldr	r3, [pc, #496]	; (800322c <menu+0x15b0>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <menu+0x13cc>
				kapi1Tip = 0;
 8003042:	4b7a      	ldr	r3, [pc, #488]	; (800322c <menu+0x15b0>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003048:	f003 fbb6 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800304c:	2104      	movs	r1, #4
 800304e:	4879      	ldr	r0, [pc, #484]	; (8003234 <menu+0x15b8>)
 8003050:	f007 f94c 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d115      	bne.n	8003086 <menu+0x140a>
 800305a:	4b77      	ldr	r3, [pc, #476]	; (8003238 <menu+0x15bc>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8003068:	4b70      	ldr	r3, [pc, #448]	; (800322c <menu+0x15b0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b6e      	ldr	r3, [pc, #440]	; (800322c <menu+0x15b0>)
 8003072:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8003074:	4b6d      	ldr	r3, [pc, #436]	; (800322c <menu+0x15b0>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d902      	bls.n	8003082 <menu+0x1406>
		   		kapi1Tip = 2;
 800307c:	4b6b      	ldr	r3, [pc, #428]	; (800322c <menu+0x15b0>)
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003082:	f003 fb99 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003086:	2108      	movs	r1, #8
 8003088:	486a      	ldr	r0, [pc, #424]	; (8003234 <menu+0x15b8>)
 800308a:	f007 f92f 	bl	800a2ec <HAL_GPIO_ReadPin>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10d      	bne.n	80030b0 <menu+0x1434>
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <menu+0x15bc>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <menu+0x15b0>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <menu+0x15c0>)
 80030a8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80030aa:	4b65      	ldr	r3, [pc, #404]	; (8003240 <menu+0x15c4>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <menu+0x15c8>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b0a      	cmp	r3, #10
 80030b6:	d17f      	bne.n	80031b8 <menu+0x153c>
		if(dilSecim == 0) {
 80030b8:	4b63      	ldr	r3, [pc, #396]	; (8003248 <menu+0x15cc>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80030c0:	4a62      	ldr	r2, [pc, #392]	; (800324c <menu+0x15d0>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7fd fc75 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030ca:	4a61      	ldr	r2, [pc, #388]	; (8003250 <menu+0x15d4>)
 80030cc:	2101      	movs	r1, #1
 80030ce:	2002      	movs	r0, #2
 80030d0:	f7fd fc70 	bl	80009b4 <lcd_print>
 80030d4:	e00d      	b.n	80030f2 <menu+0x1476>
		} else if(dilSecim == 1) {
 80030d6:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <menu+0x15cc>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d109      	bne.n	80030f2 <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80030de:	4a5d      	ldr	r2, [pc, #372]	; (8003254 <menu+0x15d8>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7fd fc66 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80030e8:	4a5b      	ldr	r2, [pc, #364]	; (8003258 <menu+0x15dc>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	2002      	movs	r0, #2
 80030ee:	f7fd fc61 	bl	80009b4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <menu+0x15e0>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	220a      	movs	r2, #10
 80030f8:	4959      	ldr	r1, [pc, #356]	; (8003260 <menu+0x15e4>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00a f97e 	bl	800d3fc <itoa>
		lcd_print(2,16,snum);
 8003100:	4a57      	ldr	r2, [pc, #348]	; (8003260 <menu+0x15e4>)
 8003102:	2110      	movs	r1, #16
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd fc55 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800310a:	2102      	movs	r1, #2
 800310c:	4849      	ldr	r0, [pc, #292]	; (8003234 <menu+0x15b8>)
 800310e:	f007 f8ed 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d119      	bne.n	800314c <menu+0x14d0>
 8003118:	4b47      	ldr	r3, [pc, #284]	; (8003238 <menu+0x15bc>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	f083 0301 	eor.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <menu+0x14d0>
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <menu+0x15b0>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 800312e:	4b4b      	ldr	r3, [pc, #300]	; (800325c <menu+0x15e0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <menu+0x15e0>)
 8003138:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800313a:	4b48      	ldr	r3, [pc, #288]	; (800325c <menu+0x15e0>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b05      	cmp	r3, #5
 8003140:	d902      	bls.n	8003148 <menu+0x14cc>
				kapi1AcSure = 0;
 8003142:	4b46      	ldr	r3, [pc, #280]	; (800325c <menu+0x15e0>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003148:	f003 fb36 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800314c:	2104      	movs	r1, #4
 800314e:	4839      	ldr	r0, [pc, #228]	; (8003234 <menu+0x15b8>)
 8003150:	f007 f8cc 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d119      	bne.n	800318e <menu+0x1512>
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <menu+0x15bc>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d012      	beq.n	800318e <menu+0x1512>
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <menu+0x15b0>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10e      	bne.n	800318e <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8003170:	4b3a      	ldr	r3, [pc, #232]	; (800325c <menu+0x15e0>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3b01      	subs	r3, #1
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <menu+0x15e0>)
 800317a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800317c:	4b37      	ldr	r3, [pc, #220]	; (800325c <menu+0x15e0>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b06      	cmp	r3, #6
 8003182:	d902      	bls.n	800318a <menu+0x150e>
		   		kapi1AcSure = 5;
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <menu+0x15e0>)
 8003186:	2205      	movs	r2, #5
 8003188:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800318a:	f003 fb15 	bl	80067b8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800318e:	2108      	movs	r1, #8
 8003190:	4828      	ldr	r0, [pc, #160]	; (8003234 <menu+0x15b8>)
 8003192:	f007 f8ab 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10d      	bne.n	80031b8 <menu+0x153c>
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <menu+0x15bc>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 80031aa:	4b2c      	ldr	r3, [pc, #176]	; (800325c <menu+0x15e0>)
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <menu+0x15c0>)
 80031b0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <menu+0x15c4>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <menu+0x15c8>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b0b      	cmp	r3, #11
 80031be:	f040 80b5 	bne.w	800332c <menu+0x16b0>
		if(dilSecim == 0) {
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <menu+0x15cc>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80031ca:	4a26      	ldr	r2, [pc, #152]	; (8003264 <menu+0x15e8>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	2001      	movs	r0, #1
 80031d0:	f7fd fbf0 	bl	80009b4 <lcd_print>
 80031d4:	e008      	b.n	80031e8 <menu+0x156c>
		} else if(dilSecim == 1) {
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <menu+0x15cc>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d104      	bne.n	80031e8 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <menu+0x15ec>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	2001      	movs	r0, #1
 80031e4:	f7fd fbe6 	bl	80009b4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <menu+0x15f0>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <menu+0x15f4>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f7fd fbdd 	bl	80009b4 <lcd_print>
 80031fa:	e048      	b.n	800328e <menu+0x1612>
		} else if(kapi2Tip == 1) {
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <menu+0x15f0>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d13b      	bne.n	800327c <menu+0x1600>
			if(dilSecim == 0) {
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <menu+0x15cc>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <menu+0x15f8>)
 800320e:	2101      	movs	r1, #1
 8003210:	2002      	movs	r0, #2
 8003212:	f7fd fbcf 	bl	80009b4 <lcd_print>
 8003216:	e03a      	b.n	800328e <menu+0x1612>
			} else if(dilSecim == 1) {
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <menu+0x15cc>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d136      	bne.n	800328e <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <menu+0x15fc>)
 8003222:	2101      	movs	r1, #1
 8003224:	2002      	movs	r0, #2
 8003226:	f7fd fbc5 	bl	80009b4 <lcd_print>
 800322a:	e030      	b.n	800328e <menu+0x1612>
 800322c:	20000ca6 	.word	0x20000ca6
 8003230:	0800e5fc 	.word	0x0800e5fc
 8003234:	40010800 	.word	0x40010800
 8003238:	20000ccc 	.word	0x20000ccc
 800323c:	20000b38 	.word	0x20000b38
 8003240:	20000cc9 	.word	0x20000cc9
 8003244:	20000c9d 	.word	0x20000c9d
 8003248:	20000cbe 	.word	0x20000cbe
 800324c:	0800e60c 	.word	0x0800e60c
 8003250:	0800e620 	.word	0x0800e620
 8003254:	0800e630 	.word	0x0800e630
 8003258:	0800e644 	.word	0x0800e644
 800325c:	20000cb6 	.word	0x20000cb6
 8003260:	20000bcc 	.word	0x20000bcc
 8003264:	0800e654 	.word	0x0800e654
 8003268:	0800e668 	.word	0x0800e668
 800326c:	20000ca7 	.word	0x20000ca7
 8003270:	0800e5c4 	.word	0x0800e5c4
 8003274:	0800e5d8 	.word	0x0800e5d8
 8003278:	0800e5e8 	.word	0x0800e5e8
			}
		} else if(kapi2Tip == 2) {
 800327c:	4b8a      	ldr	r3, [pc, #552]	; (80034a8 <menu+0x182c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d104      	bne.n	800328e <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8003284:	4a89      	ldr	r2, [pc, #548]	; (80034ac <menu+0x1830>)
 8003286:	2101      	movs	r1, #1
 8003288:	2002      	movs	r0, #2
 800328a:	f7fd fb93 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800328e:	2102      	movs	r1, #2
 8003290:	4887      	ldr	r0, [pc, #540]	; (80034b0 <menu+0x1834>)
 8003292:	f007 f82b 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d115      	bne.n	80032c8 <menu+0x164c>
 800329c:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <menu+0x1838>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f083 0301 	eor.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 80032aa:	4b7f      	ldr	r3, [pc, #508]	; (80034a8 <menu+0x182c>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4b7d      	ldr	r3, [pc, #500]	; (80034a8 <menu+0x182c>)
 80032b4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80032b6:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <menu+0x182c>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <menu+0x1648>
				kapi2Tip = 0;
 80032be:	4b7a      	ldr	r3, [pc, #488]	; (80034a8 <menu+0x182c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032c4:	f003 fa78 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c8:	2104      	movs	r1, #4
 80032ca:	4879      	ldr	r0, [pc, #484]	; (80034b0 <menu+0x1834>)
 80032cc:	f007 f80e 	bl	800a2ec <HAL_GPIO_ReadPin>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d115      	bne.n	8003302 <menu+0x1686>
 80032d6:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <menu+0x1838>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	f083 0301 	eor.w	r3, r3, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 80032e4:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <menu+0x182c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	4b6e      	ldr	r3, [pc, #440]	; (80034a8 <menu+0x182c>)
 80032ee:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80032f0:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <menu+0x182c>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d902      	bls.n	80032fe <menu+0x1682>
		   		kapi2Tip = 2;
 80032f8:	4b6b      	ldr	r3, [pc, #428]	; (80034a8 <menu+0x182c>)
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032fe:	f003 fa5b 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003302:	2108      	movs	r1, #8
 8003304:	486a      	ldr	r0, [pc, #424]	; (80034b0 <menu+0x1834>)
 8003306:	f006 fff1 	bl	800a2ec <HAL_GPIO_ReadPin>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10d      	bne.n	800332c <menu+0x16b0>
 8003310:	4b68      	ldr	r3, [pc, #416]	; (80034b4 <menu+0x1838>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 800331e:	4b62      	ldr	r3, [pc, #392]	; (80034a8 <menu+0x182c>)
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <menu+0x183c>)
 8003324:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8003326:	4b65      	ldr	r3, [pc, #404]	; (80034bc <menu+0x1840>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <menu+0x1844>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d17f      	bne.n	8003434 <menu+0x17b8>
		if(dilSecim == 0) {
 8003334:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <menu+0x1848>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 800333c:	4a62      	ldr	r2, [pc, #392]	; (80034c8 <menu+0x184c>)
 800333e:	2101      	movs	r1, #1
 8003340:	2001      	movs	r0, #1
 8003342:	f7fd fb37 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003346:	4a61      	ldr	r2, [pc, #388]	; (80034cc <menu+0x1850>)
 8003348:	2101      	movs	r1, #1
 800334a:	2002      	movs	r0, #2
 800334c:	f7fd fb32 	bl	80009b4 <lcd_print>
 8003350:	e00d      	b.n	800336e <menu+0x16f2>
		} else if(dilSecim == 1) {
 8003352:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <menu+0x1848>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d109      	bne.n	800336e <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800335a:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <menu+0x1854>)
 800335c:	2101      	movs	r1, #1
 800335e:	2001      	movs	r0, #1
 8003360:	f7fd fb28 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003364:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <menu+0x1858>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f7fd fb23 	bl	80009b4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <menu+0x185c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	220a      	movs	r2, #10
 8003374:	4959      	ldr	r1, [pc, #356]	; (80034dc <menu+0x1860>)
 8003376:	4618      	mov	r0, r3
 8003378:	f00a f840 	bl	800d3fc <itoa>
		lcd_print(2,16,snum);
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <menu+0x1860>)
 800337e:	2110      	movs	r1, #16
 8003380:	2002      	movs	r0, #2
 8003382:	f7fd fb17 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8003386:	2102      	movs	r1, #2
 8003388:	4849      	ldr	r0, [pc, #292]	; (80034b0 <menu+0x1834>)
 800338a:	f006 ffaf 	bl	800a2ec <HAL_GPIO_ReadPin>
 800338e:	4603      	mov	r3, r0
 8003390:	2b01      	cmp	r3, #1
 8003392:	d119      	bne.n	80033c8 <menu+0x174c>
 8003394:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <menu+0x1838>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <menu+0x174c>
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <menu+0x182c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 80033aa:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <menu+0x185c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <menu+0x185c>)
 80033b4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80033b6:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <menu+0x185c>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d902      	bls.n	80033c4 <menu+0x1748>
				kapi2AcSure = 0;
 80033be:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <menu+0x185c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033c4:	f003 f9f8 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80033c8:	2104      	movs	r1, #4
 80033ca:	4839      	ldr	r0, [pc, #228]	; (80034b0 <menu+0x1834>)
 80033cc:	f006 ff8e 	bl	800a2ec <HAL_GPIO_ReadPin>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d119      	bne.n	800340a <menu+0x178e>
 80033d6:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <menu+0x1838>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f083 0301 	eor.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <menu+0x178e>
 80033e4:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <menu+0x182c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <menu+0x185c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <menu+0x185c>)
 80033f6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80033f8:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <menu+0x185c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b06      	cmp	r3, #6
 80033fe:	d902      	bls.n	8003406 <menu+0x178a>
		   		kapi2AcSure = 5;
 8003400:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <menu+0x185c>)
 8003402:	2205      	movs	r2, #5
 8003404:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003406:	f003 f9d7 	bl	80067b8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800340a:	2108      	movs	r1, #8
 800340c:	4828      	ldr	r0, [pc, #160]	; (80034b0 <menu+0x1834>)
 800340e:	f006 ff6d 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10d      	bne.n	8003434 <menu+0x17b8>
 8003418:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <menu+0x1838>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <menu+0x185c>)
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <menu+0x183c>)
 800342c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <menu+0x1840>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <menu+0x1844>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b0d      	cmp	r3, #13
 800343a:	f040 80b5 	bne.w	80035a8 <menu+0x192c>
		if(dilSecim == 0) {
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <menu+0x1848>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d105      	bne.n	8003452 <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <menu+0x1864>)
 8003448:	2101      	movs	r1, #1
 800344a:	2001      	movs	r0, #1
 800344c:	f7fd fab2 	bl	80009b4 <lcd_print>
 8003450:	e008      	b.n	8003464 <menu+0x17e8>
		} else if(dilSecim == 1){
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <menu+0x1848>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d104      	bne.n	8003464 <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <menu+0x1868>)
 800345c:	2101      	movs	r1, #1
 800345e:	2001      	movs	r0, #1
 8003460:	f7fd faa8 	bl	80009b4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <menu+0x186c>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <menu+0x1870>)
 800346e:	2101      	movs	r1, #1
 8003470:	2002      	movs	r0, #2
 8003472:	f7fd fa9f 	bl	80009b4 <lcd_print>
 8003476:	e048      	b.n	800350a <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <menu+0x186c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d13b      	bne.n	80034f8 <menu+0x187c>
			if(dilSecim == 0) {
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <menu+0x1848>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <menu+0x1874>)
 800348a:	2101      	movs	r1, #1
 800348c:	2002      	movs	r0, #2
 800348e:	f7fd fa91 	bl	80009b4 <lcd_print>
 8003492:	e03a      	b.n	800350a <menu+0x188e>
			} else if(dilSecim == 1) {
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <menu+0x1848>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d136      	bne.n	800350a <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <menu+0x1878>)
 800349e:	2101      	movs	r1, #1
 80034a0:	2002      	movs	r0, #2
 80034a2:	f7fd fa87 	bl	80009b4 <lcd_print>
 80034a6:	e030      	b.n	800350a <menu+0x188e>
 80034a8:	20000ca7 	.word	0x20000ca7
 80034ac:	0800e5fc 	.word	0x0800e5fc
 80034b0:	40010800 	.word	0x40010800
 80034b4:	20000ccc 	.word	0x20000ccc
 80034b8:	20000b38 	.word	0x20000b38
 80034bc:	20000cc9 	.word	0x20000cc9
 80034c0:	20000c9d 	.word	0x20000c9d
 80034c4:	20000cbe 	.word	0x20000cbe
 80034c8:	0800e67c 	.word	0x0800e67c
 80034cc:	0800e620 	.word	0x0800e620
 80034d0:	0800e690 	.word	0x0800e690
 80034d4:	0800e644 	.word	0x0800e644
 80034d8:	20000cb7 	.word	0x20000cb7
 80034dc:	20000bcc 	.word	0x20000bcc
 80034e0:	0800e6a4 	.word	0x0800e6a4
 80034e4:	0800e6b8 	.word	0x0800e6b8
 80034e8:	20000ca8 	.word	0x20000ca8
 80034ec:	0800e5c4 	.word	0x0800e5c4
 80034f0:	0800e5d8 	.word	0x0800e5d8
 80034f4:	0800e5e8 	.word	0x0800e5e8
			}
		} else if(kapitablaTip == 2) {
 80034f8:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <menu+0x19ec>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d104      	bne.n	800350a <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8003500:	4a5a      	ldr	r2, [pc, #360]	; (800366c <menu+0x19f0>)
 8003502:	2101      	movs	r1, #1
 8003504:	2002      	movs	r0, #2
 8003506:	f7fd fa55 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800350a:	2102      	movs	r1, #2
 800350c:	4858      	ldr	r0, [pc, #352]	; (8003670 <menu+0x19f4>)
 800350e:	f006 feed 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d115      	bne.n	8003544 <menu+0x18c8>
 8003518:	4b56      	ldr	r3, [pc, #344]	; (8003674 <menu+0x19f8>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00e      	beq.n	8003544 <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <menu+0x19ec>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <menu+0x19ec>)
 8003530:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8003532:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <menu+0x19ec>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <menu+0x18c4>
				kapitablaTip = 0;
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <menu+0x19ec>)
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003540:	f003 f93a 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003544:	2104      	movs	r1, #4
 8003546:	484a      	ldr	r0, [pc, #296]	; (8003670 <menu+0x19f4>)
 8003548:	f006 fed0 	bl	800a2ec <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d115      	bne.n	800357e <menu+0x1902>
 8003552:	4b48      	ldr	r3, [pc, #288]	; (8003674 <menu+0x19f8>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8003560:	4b41      	ldr	r3, [pc, #260]	; (8003668 <menu+0x19ec>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	3b01      	subs	r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <menu+0x19ec>)
 800356a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 800356c:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <menu+0x19ec>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d902      	bls.n	800357a <menu+0x18fe>
		   		kapitablaTip = 2;
 8003574:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <menu+0x19ec>)
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800357a:	f003 f91d 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800357e:	2108      	movs	r1, #8
 8003580:	483b      	ldr	r0, [pc, #236]	; (8003670 <menu+0x19f4>)
 8003582:	f006 feb3 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003586:	4603      	mov	r3, r0
 8003588:	2b01      	cmp	r3, #1
 800358a:	d10d      	bne.n	80035a8 <menu+0x192c>
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <menu+0x19f8>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	f083 0301 	eor.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <menu+0x19ec>)
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <menu+0x19fc>)
 80035a0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <menu+0x1a00>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <menu+0x1a04>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b0e      	cmp	r3, #14
 80035ae:	f040 80f2 	bne.w	8003796 <menu+0x1b1a>
		if(dilSecim == 0) {
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <menu+0x1a08>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80035ba:	4a33      	ldr	r2, [pc, #204]	; (8003688 <menu+0x1a0c>)
 80035bc:	2101      	movs	r1, #1
 80035be:	2001      	movs	r0, #1
 80035c0:	f7fd f9f8 	bl	80009b4 <lcd_print>
 80035c4:	e008      	b.n	80035d8 <menu+0x195c>
		} else if(dilSecim == 1) {
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <menu+0x1a08>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d104      	bne.n	80035d8 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80035ce:	4a2f      	ldr	r2, [pc, #188]	; (800368c <menu+0x1a10>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fd f9ee 	bl	80009b4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <menu+0x1a14>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d113      	bne.n	8003608 <menu+0x198c>
			if(dilSecim == 0){
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <menu+0x1a08>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 80035e8:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <menu+0x1a18>)
 80035ea:	2101      	movs	r1, #1
 80035ec:	2002      	movs	r0, #2
 80035ee:	f7fd f9e1 	bl	80009b4 <lcd_print>
 80035f2:	e071      	b.n	80036d8 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <menu+0x1a08>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d16d      	bne.n	80036d8 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <menu+0x1a1c>)
 80035fe:	2101      	movs	r1, #1
 8003600:	2002      	movs	r0, #2
 8003602:	f7fd f9d7 	bl	80009b4 <lcd_print>
 8003606:	e067      	b.n	80036d8 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <menu+0x1a14>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d112      	bne.n	8003636 <menu+0x19ba>
			if(dilSecim == 0){
 8003610:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <menu+0x1a08>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <menu+0x1a20>)
 800361a:	2101      	movs	r1, #1
 800361c:	2002      	movs	r0, #2
 800361e:	f7fd f9c9 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1){
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <menu+0x1a08>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d156      	bne.n	80036d8 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <menu+0x1a24>)
 800362c:	2101      	movs	r1, #1
 800362e:	2002      	movs	r0, #2
 8003630:	f7fd f9c0 	bl	80009b4 <lcd_print>
 8003634:	e050      	b.n	80036d8 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <menu+0x1a14>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d136      	bne.n	80036ac <menu+0x1a30>
			if(dilSecim == 0){
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <menu+0x1a08>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8003646:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <menu+0x1a28>)
 8003648:	2101      	movs	r1, #1
 800364a:	2002      	movs	r0, #2
 800364c:	f7fd f9b2 	bl	80009b4 <lcd_print>
 8003650:	e042      	b.n	80036d8 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <menu+0x1a08>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d13e      	bne.n	80036d8 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <menu+0x1a2c>)
 800365c:	2101      	movs	r1, #1
 800365e:	2002      	movs	r0, #2
 8003660:	f7fd f9a8 	bl	80009b4 <lcd_print>
 8003664:	e038      	b.n	80036d8 <menu+0x1a5c>
 8003666:	bf00      	nop
 8003668:	20000ca8 	.word	0x20000ca8
 800366c:	0800e5fc 	.word	0x0800e5fc
 8003670:	40010800 	.word	0x40010800
 8003674:	20000ccc 	.word	0x20000ccc
 8003678:	20000b38 	.word	0x20000b38
 800367c:	20000cc9 	.word	0x20000cc9
 8003680:	20000c9d 	.word	0x20000c9d
 8003684:	20000cbe 	.word	0x20000cbe
 8003688:	0800e6cc 	.word	0x0800e6cc
 800368c:	0800e6e0 	.word	0x0800e6e0
 8003690:	20000caa 	.word	0x20000caa
 8003694:	0800e6f4 	.word	0x0800e6f4
 8003698:	0800e704 	.word	0x0800e704
 800369c:	0800e714 	.word	0x0800e714
 80036a0:	0800e724 	.word	0x0800e724
 80036a4:	0800e734 	.word	0x0800e734
 80036a8:	0800e748 	.word	0x0800e748
			}
		} else if(kapiTablaAcKonum == 3) {
 80036ac:	4b9b      	ldr	r3, [pc, #620]	; (800391c <menu+0x1ca0>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d111      	bne.n	80036d8 <menu+0x1a5c>
			if(dilSecim == 0) {
 80036b4:	4b9a      	ldr	r3, [pc, #616]	; (8003920 <menu+0x1ca4>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 80036bc:	4a99      	ldr	r2, [pc, #612]	; (8003924 <menu+0x1ca8>)
 80036be:	2101      	movs	r1, #1
 80036c0:	2002      	movs	r0, #2
 80036c2:	f7fd f977 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 80036c6:	4b96      	ldr	r3, [pc, #600]	; (8003920 <menu+0x1ca4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d104      	bne.n	80036d8 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 80036ce:	4a96      	ldr	r2, [pc, #600]	; (8003928 <menu+0x1cac>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	2002      	movs	r0, #2
 80036d4:	f7fd f96e 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d8:	2102      	movs	r1, #2
 80036da:	4894      	ldr	r0, [pc, #592]	; (800392c <menu+0x1cb0>)
 80036dc:	f006 fe06 	bl	800a2ec <HAL_GPIO_ReadPin>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d115      	bne.n	8003712 <menu+0x1a96>
 80036e6:	4b92      	ldr	r3, [pc, #584]	; (8003930 <menu+0x1cb4>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	f083 0301 	eor.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80036f4:	4b89      	ldr	r3, [pc, #548]	; (800391c <menu+0x1ca0>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	4b87      	ldr	r3, [pc, #540]	; (800391c <menu+0x1ca0>)
 80036fe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003700:	4b86      	ldr	r3, [pc, #536]	; (800391c <menu+0x1ca0>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d902      	bls.n	800370e <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8003708:	4b84      	ldr	r3, [pc, #528]	; (800391c <menu+0x1ca0>)
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800370e:	f003 f853 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003712:	2104      	movs	r1, #4
 8003714:	4885      	ldr	r0, [pc, #532]	; (800392c <menu+0x1cb0>)
 8003716:	f006 fde9 	bl	800a2ec <HAL_GPIO_ReadPin>
 800371a:	4603      	mov	r3, r0
 800371c:	2b01      	cmp	r3, #1
 800371e:	d115      	bne.n	800374c <menu+0x1ad0>
 8003720:	4b83      	ldr	r3, [pc, #524]	; (8003930 <menu+0x1cb4>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800372e:	4b7b      	ldr	r3, [pc, #492]	; (800391c <menu+0x1ca0>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b79      	ldr	r3, [pc, #484]	; (800391c <menu+0x1ca0>)
 8003738:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800373a:	4b78      	ldr	r3, [pc, #480]	; (800391c <menu+0x1ca0>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d902      	bls.n	8003748 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <menu+0x1ca0>)
 8003744:	2202      	movs	r2, #2
 8003746:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003748:	f003 f836 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800374c:	2108      	movs	r1, #8
 800374e:	4877      	ldr	r0, [pc, #476]	; (800392c <menu+0x1cb0>)
 8003750:	f006 fdcc 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d11d      	bne.n	8003796 <menu+0x1b1a>
 800375a:	4b75      	ldr	r3, [pc, #468]	; (8003930 <menu+0x1cb4>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	f083 0301 	eor.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8003768:	4b6c      	ldr	r3, [pc, #432]	; (800391c <menu+0x1ca0>)
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	4b71      	ldr	r3, [pc, #452]	; (8003934 <menu+0x1cb8>)
 800376e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <menu+0x1ca0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <menu+0x1b06>
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <menu+0x1ca0>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d106      	bne.n	8003790 <menu+0x1b14>
				altLimit = 1;
 8003782:	4b6d      	ldr	r3, [pc, #436]	; (8003938 <menu+0x1cbc>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003788:	4b6b      	ldr	r3, [pc, #428]	; (8003938 <menu+0x1cbc>)
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	4b69      	ldr	r3, [pc, #420]	; (8003934 <menu+0x1cb8>)
 800378e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003790:	4b6a      	ldr	r3, [pc, #424]	; (800393c <menu+0x1cc0>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8003796:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <menu+0x1cc4>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d17f      	bne.n	800389e <menu+0x1c22>
		if(dilSecim == 0) {
 800379e:	4b60      	ldr	r3, [pc, #384]	; (8003920 <menu+0x1ca4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80037a6:	4a67      	ldr	r2, [pc, #412]	; (8003944 <menu+0x1cc8>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7fd f902 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <menu+0x1ccc>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7fd f8fd 	bl	80009b4 <lcd_print>
 80037ba:	e00d      	b.n	80037d8 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <menu+0x1ca4>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d109      	bne.n	80037d8 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80037c4:	4a61      	ldr	r2, [pc, #388]	; (800394c <menu+0x1cd0>)
 80037c6:	2101      	movs	r1, #1
 80037c8:	2001      	movs	r0, #1
 80037ca:	f7fd f8f3 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80037ce:	4a60      	ldr	r2, [pc, #384]	; (8003950 <menu+0x1cd4>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	2002      	movs	r0, #2
 80037d4:	f7fd f8ee 	bl	80009b4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80037d8:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <menu+0x1cd8>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	220a      	movs	r2, #10
 80037de:	495e      	ldr	r1, [pc, #376]	; (8003958 <menu+0x1cdc>)
 80037e0:	4618      	mov	r0, r3
 80037e2:	f009 fe0b 	bl	800d3fc <itoa>
		lcd_print(2,16,snum);
 80037e6:	4a5c      	ldr	r2, [pc, #368]	; (8003958 <menu+0x1cdc>)
 80037e8:	2110      	movs	r1, #16
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7fd f8e2 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80037f0:	2102      	movs	r1, #2
 80037f2:	484e      	ldr	r0, [pc, #312]	; (800392c <menu+0x1cb0>)
 80037f4:	f006 fd7a 	bl	800a2ec <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d119      	bne.n	8003832 <menu+0x1bb6>
 80037fe:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <menu+0x1cb4>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f083 0301 	eor.w	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <menu+0x1bb6>
 800380c:	4b53      	ldr	r3, [pc, #332]	; (800395c <menu+0x1ce0>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10e      	bne.n	8003832 <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <menu+0x1cd8>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b4d      	ldr	r3, [pc, #308]	; (8003954 <menu+0x1cd8>)
 800381e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003820:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <menu+0x1cd8>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b05      	cmp	r3, #5
 8003826:	d902      	bls.n	800382e <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003828:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <menu+0x1cd8>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800382e:	f002 ffc3 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003832:	2104      	movs	r1, #4
 8003834:	483d      	ldr	r0, [pc, #244]	; (800392c <menu+0x1cb0>)
 8003836:	f006 fd59 	bl	800a2ec <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d119      	bne.n	8003874 <menu+0x1bf8>
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <menu+0x1cb4>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f083 0301 	eor.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <menu+0x1bf8>
 800384e:	4b43      	ldr	r3, [pc, #268]	; (800395c <menu+0x1ce0>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10e      	bne.n	8003874 <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <menu+0x1cd8>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <menu+0x1cd8>)
 8003860:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003862:	4b3c      	ldr	r3, [pc, #240]	; (8003954 <menu+0x1cd8>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b06      	cmp	r3, #6
 8003868:	d902      	bls.n	8003870 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 800386a:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <menu+0x1cd8>)
 800386c:	2205      	movs	r2, #5
 800386e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003870:	f002 ffa2 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003874:	2108      	movs	r1, #8
 8003876:	482d      	ldr	r0, [pc, #180]	; (800392c <menu+0x1cb0>)
 8003878:	f006 fd38 	bl	800a2ec <HAL_GPIO_ReadPin>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10d      	bne.n	800389e <menu+0x1c22>
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <menu+0x1cb4>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <menu+0x1cd8>)
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	4b27      	ldr	r3, [pc, #156]	; (8003934 <menu+0x1cb8>)
 8003896:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003898:	4b28      	ldr	r3, [pc, #160]	; (800393c <menu+0x1cc0>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800389e:	4b28      	ldr	r3, [pc, #160]	; (8003940 <menu+0x1cc4>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	f040 80bc 	bne.w	8003a20 <menu+0x1da4>
		if(dilSecim == 0) {
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <menu+0x1ca4>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <menu+0x1ce4>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	2001      	movs	r0, #1
 80038b6:	f7fd f87d 	bl	80009b4 <lcd_print>
 80038ba:	e008      	b.n	80038ce <menu+0x1c52>
		} else if(dilSecim == 1) {
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <menu+0x1ca4>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d104      	bne.n	80038ce <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <menu+0x1ce8>)
 80038c6:	2101      	movs	r1, #1
 80038c8:	2001      	movs	r0, #1
 80038ca:	f7fd f873 	bl	80009b4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <menu+0x1cec>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <menu+0x1c82>
			if(dilSecim == 0) {
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <menu+0x1ca4>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 80038de:	4a11      	ldr	r2, [pc, #68]	; (8003924 <menu+0x1ca8>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2002      	movs	r0, #2
 80038e4:	f7fd f866 	bl	80009b4 <lcd_print>
 80038e8:	e04b      	b.n	8003982 <menu+0x1d06>
			} else if(dilSecim == 1) {
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <menu+0x1ca4>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d147      	bne.n	8003982 <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <menu+0x1cac>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	2002      	movs	r0, #2
 80038f8:	f7fd f85c 	bl	80009b4 <lcd_print>
 80038fc:	e041      	b.n	8003982 <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <menu+0x1cec>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d13d      	bne.n	8003982 <menu+0x1d06>
			if(dilSecim == 0) {
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <menu+0x1ca4>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d130      	bne.n	8003970 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <menu+0x1cf0>)
 8003910:	2101      	movs	r1, #1
 8003912:	2002      	movs	r0, #2
 8003914:	f7fd f84e 	bl	80009b4 <lcd_print>
 8003918:	e033      	b.n	8003982 <menu+0x1d06>
 800391a:	bf00      	nop
 800391c:	20000caa 	.word	0x20000caa
 8003920:	20000cbe 	.word	0x20000cbe
 8003924:	0800e3bc 	.word	0x0800e3bc
 8003928:	0800e3d0 	.word	0x0800e3d0
 800392c:	40010800 	.word	0x40010800
 8003930:	20000ccc 	.word	0x20000ccc
 8003934:	20000b38 	.word	0x20000b38
 8003938:	20000ca3 	.word	0x20000ca3
 800393c:	20000cc9 	.word	0x20000cc9
 8003940:	20000c9d 	.word	0x20000c9d
 8003944:	0800e75c 	.word	0x0800e75c
 8003948:	0800e620 	.word	0x0800e620
 800394c:	0800e770 	.word	0x0800e770
 8003950:	0800e644 	.word	0x0800e644
 8003954:	20000cb8 	.word	0x20000cb8
 8003958:	20000bcc 	.word	0x20000bcc
 800395c:	20000ca8 	.word	0x20000ca8
 8003960:	0800e784 	.word	0x0800e784
 8003964:	0800e798 	.word	0x0800e798
 8003968:	20000cab 	.word	0x20000cab
 800396c:	0800e41c 	.word	0x0800e41c
			} else if(dilSecim == 1) {
 8003970:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <menu+0x1f5c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d104      	bne.n	8003982 <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003978:	4a98      	ldr	r2, [pc, #608]	; (8003bdc <menu+0x1f60>)
 800397a:	2101      	movs	r1, #1
 800397c:	2002      	movs	r0, #2
 800397e:	f7fd f819 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003982:	2102      	movs	r1, #2
 8003984:	4896      	ldr	r0, [pc, #600]	; (8003be0 <menu+0x1f64>)
 8003986:	f006 fcb1 	bl	800a2ec <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d115      	bne.n	80039bc <menu+0x1d40>
 8003990:	4b94      	ldr	r3, [pc, #592]	; (8003be4 <menu+0x1f68>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 800399e:	4b92      	ldr	r3, [pc, #584]	; (8003be8 <menu+0x1f6c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <menu+0x1f6c>)
 80039a8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80039aa:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <menu+0x1f6c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d902      	bls.n	80039b8 <menu+0x1d3c>
				yukariYavasLimit = 0;
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <menu+0x1f6c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039b8:	f002 fefe 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039bc:	2104      	movs	r1, #4
 80039be:	4888      	ldr	r0, [pc, #544]	; (8003be0 <menu+0x1f64>)
 80039c0:	f006 fc94 	bl	800a2ec <HAL_GPIO_ReadPin>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d115      	bne.n	80039f6 <menu+0x1d7a>
 80039ca:	4b86      	ldr	r3, [pc, #536]	; (8003be4 <menu+0x1f68>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	f083 0301 	eor.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80039d8:	4b83      	ldr	r3, [pc, #524]	; (8003be8 <menu+0x1f6c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <menu+0x1f6c>)
 80039e2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80039e4:	4b80      	ldr	r3, [pc, #512]	; (8003be8 <menu+0x1f6c>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <menu+0x1d76>
		   		yukariYavasLimit = 1;
 80039ec:	4b7e      	ldr	r3, [pc, #504]	; (8003be8 <menu+0x1f6c>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039f2:	f002 fee1 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f6:	2108      	movs	r1, #8
 80039f8:	4879      	ldr	r0, [pc, #484]	; (8003be0 <menu+0x1f64>)
 80039fa:	f006 fc77 	bl	800a2ec <HAL_GPIO_ReadPin>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <menu+0x1da4>
 8003a04:	4b77      	ldr	r3, [pc, #476]	; (8003be4 <menu+0x1f68>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f083 0301 	eor.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <menu+0x1f6c>)
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	4b75      	ldr	r3, [pc, #468]	; (8003bec <menu+0x1f70>)
 8003a18:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003a1a:	4b75      	ldr	r3, [pc, #468]	; (8003bf0 <menu+0x1f74>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003a20:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <menu+0x1f78>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b11      	cmp	r3, #17
 8003a26:	f040 80c3 	bne.w	8003bb0 <menu+0x1f34>
		if(dilSecim == 0) {
 8003a2a:	4b6b      	ldr	r3, [pc, #428]	; (8003bd8 <menu+0x1f5c>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003a32:	4a71      	ldr	r2, [pc, #452]	; (8003bf8 <menu+0x1f7c>)
 8003a34:	2101      	movs	r1, #1
 8003a36:	2001      	movs	r0, #1
 8003a38:	f7fc ffbc 	bl	80009b4 <lcd_print>
 8003a3c:	e008      	b.n	8003a50 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 8003a3e:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <menu+0x1f5c>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d104      	bne.n	8003a50 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003a46:	4a6d      	ldr	r2, [pc, #436]	; (8003bfc <menu+0x1f80>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f7fc ffb2 	bl	80009b4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003a50:	4b6b      	ldr	r3, [pc, #428]	; (8003c00 <menu+0x1f84>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d113      	bne.n	8003a80 <menu+0x1e04>
			if(dilSecim == 0){
 8003a58:	4b5f      	ldr	r3, [pc, #380]	; (8003bd8 <menu+0x1f5c>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003a60:	4a68      	ldr	r2, [pc, #416]	; (8003c04 <menu+0x1f88>)
 8003a62:	2101      	movs	r1, #1
 8003a64:	2002      	movs	r0, #2
 8003a66:	f7fc ffa5 	bl	80009b4 <lcd_print>
 8003a6a:	e038      	b.n	8003ade <menu+0x1e62>
			} else if(dilSecim == 1){
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <menu+0x1f5c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d134      	bne.n	8003ade <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 8003a74:	4a64      	ldr	r2, [pc, #400]	; (8003c08 <menu+0x1f8c>)
 8003a76:	2101      	movs	r1, #1
 8003a78:	2002      	movs	r0, #2
 8003a7a:	f7fc ff9b 	bl	80009b4 <lcd_print>
 8003a7e:	e02e      	b.n	8003ade <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a80:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <menu+0x1f84>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d113      	bne.n	8003ab0 <menu+0x1e34>
			if(dilSecim == 0){
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <menu+0x1f5c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003a90:	4a5e      	ldr	r2, [pc, #376]	; (8003c0c <menu+0x1f90>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2002      	movs	r0, #2
 8003a96:	f7fc ff8d 	bl	80009b4 <lcd_print>
 8003a9a:	e020      	b.n	8003ade <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003a9c:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <menu+0x1f5c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d11c      	bne.n	8003ade <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <menu+0x1f94>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f7fc ff83 	bl	80009b4 <lcd_print>
 8003aae:	e016      	b.n	8003ade <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <menu+0x1f84>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d112      	bne.n	8003ade <menu+0x1e62>
			if(dilSecim == 0) {
 8003ab8:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <menu+0x1f5c>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 8003ac0:	4a54      	ldr	r2, [pc, #336]	; (8003c14 <menu+0x1f98>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	f7fc ff75 	bl	80009b4 <lcd_print>
 8003aca:	e008      	b.n	8003ade <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003acc:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <menu+0x1f5c>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d104      	bne.n	8003ade <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 8003ad4:	4a50      	ldr	r2, [pc, #320]	; (8003c18 <menu+0x1f9c>)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	2002      	movs	r0, #2
 8003ada:	f7fc ff6b 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ade:	2102      	movs	r1, #2
 8003ae0:	483f      	ldr	r0, [pc, #252]	; (8003be0 <menu+0x1f64>)
 8003ae2:	f006 fc03 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d115      	bne.n	8003b18 <menu+0x1e9c>
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <menu+0x1f68>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f083 0301 	eor.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003afa:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <menu+0x1f84>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <menu+0x1f84>)
 8003b04:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <menu+0x1f84>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <menu+0x1f84>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b14:	f002 fe50 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b18:	2104      	movs	r1, #4
 8003b1a:	4831      	ldr	r0, [pc, #196]	; (8003be0 <menu+0x1f64>)
 8003b1c:	f006 fbe6 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d115      	bne.n	8003b52 <menu+0x1ed6>
 8003b26:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <menu+0x1f68>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003b34:	4b32      	ldr	r3, [pc, #200]	; (8003c00 <menu+0x1f84>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <menu+0x1f84>)
 8003b3e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <menu+0x1f84>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d902      	bls.n	8003b4e <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003b48:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <menu+0x1f84>)
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b4e:	f002 fe33 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b52:	2108      	movs	r1, #8
 8003b54:	4822      	ldr	r0, [pc, #136]	; (8003be0 <menu+0x1f64>)
 8003b56:	f006 fbc9 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d127      	bne.n	8003bb0 <menu+0x1f34>
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <menu+0x1f68>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	f083 0301 	eor.w	r3, r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <menu+0x1f84>)
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <menu+0x1f70>)
 8003b74:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <menu+0x1f84>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <menu+0x1f0a>
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <menu+0x1f84>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d106      	bne.n	8003b94 <menu+0x1f18>
				calismaSekli = 0;
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <menu+0x1fa0>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <menu+0x1fa0>)
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	4b16      	ldr	r3, [pc, #88]	; (8003bec <menu+0x1f70>)
 8003b92:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <menu+0x1f84>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d106      	bne.n	8003baa <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <menu+0x1fa4>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <menu+0x1fa4>)
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <menu+0x1f70>)
 8003ba8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <menu+0x1f74>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <menu+0x1f78>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b12      	cmp	r3, #18
 8003bb6:	f040 80d5 	bne.w	8003d64 <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <menu+0x1f84>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d13c      	bne.n	8003c3c <menu+0x1fc0>
			if(dilSecim == 0) {
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <menu+0x1f5c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12e      	bne.n	8003c28 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <menu+0x1fa8>)
 8003bcc:	2101      	movs	r1, #1
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f7fc fef0 	bl	80009b4 <lcd_print>
 8003bd4:	e048      	b.n	8003c68 <menu+0x1fec>
 8003bd6:	bf00      	nop
 8003bd8:	20000cbe 	.word	0x20000cbe
 8003bdc:	0800e430 	.word	0x0800e430
 8003be0:	40010800 	.word	0x40010800
 8003be4:	20000ccc 	.word	0x20000ccc
 8003be8:	20000cab 	.word	0x20000cab
 8003bec:	20000b38 	.word	0x20000b38
 8003bf0:	20000cc9 	.word	0x20000cc9
 8003bf4:	20000c9d 	.word	0x20000c9d
 8003bf8:	0800e7ac 	.word	0x0800e7ac
 8003bfc:	0800e7c0 	.word	0x0800e7c0
 8003c00:	20000cac 	.word	0x20000cac
 8003c04:	0800e7d4 	.word	0x0800e7d4
 8003c08:	0800e7e4 	.word	0x0800e7e4
 8003c0c:	0800e7f4 	.word	0x0800e7f4
 8003c10:	0800e804 	.word	0x0800e804
 8003c14:	0800e3bc 	.word	0x0800e3bc
 8003c18:	0800e3d0 	.word	0x0800e3d0
 8003c1c:	20000c9e 	.word	0x20000c9e
 8003c20:	20000caf 	.word	0x20000caf
 8003c24:	0800e814 	.word	0x0800e814
			} else if(dilSecim == 1) {
 8003c28:	4b7b      	ldr	r3, [pc, #492]	; (8003e18 <menu+0x219c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d11b      	bne.n	8003c68 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003c30:	4a7a      	ldr	r2, [pc, #488]	; (8003e1c <menu+0x21a0>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7fc febd 	bl	80009b4 <lcd_print>
 8003c3a:	e015      	b.n	8003c68 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c3c:	4b78      	ldr	r3, [pc, #480]	; (8003e20 <menu+0x21a4>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d111      	bne.n	8003c68 <menu+0x1fec>
			if(dilSecim == 0){
 8003c44:	4b74      	ldr	r3, [pc, #464]	; (8003e18 <menu+0x219c>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003c4c:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <menu+0x21a8>)
 8003c4e:	2101      	movs	r1, #1
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fc feaf 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1){
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <menu+0x219c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d104      	bne.n	8003c68 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003c5e:	4a72      	ldr	r2, [pc, #456]	; (8003e28 <menu+0x21ac>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	2001      	movs	r0, #1
 8003c64:	f7fc fea6 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003c68:	4b70      	ldr	r3, [pc, #448]	; (8003e2c <menu+0x21b0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d113      	bne.n	8003c98 <menu+0x201c>
			if(dilSecim == 0) {
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <menu+0x219c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003c78:	4a6d      	ldr	r2, [pc, #436]	; (8003e30 <menu+0x21b4>)
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fc fe99 	bl	80009b4 <lcd_print>
 8003c82:	e020      	b.n	8003cc6 <menu+0x204a>
			} else if(dilSecim == 1){
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <menu+0x219c>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d11c      	bne.n	8003cc6 <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003c8c:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <menu+0x21b8>)
 8003c8e:	2101      	movs	r1, #1
 8003c90:	2002      	movs	r0, #2
 8003c92:	f7fc fe8f 	bl	80009b4 <lcd_print>
 8003c96:	e016      	b.n	8003cc6 <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003c98:	4b64      	ldr	r3, [pc, #400]	; (8003e2c <menu+0x21b0>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d112      	bne.n	8003cc6 <menu+0x204a>
			if(dilSecim == 0){
 8003ca0:	4b5d      	ldr	r3, [pc, #372]	; (8003e18 <menu+0x219c>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003ca8:	4a63      	ldr	r2, [pc, #396]	; (8003e38 <menu+0x21bc>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	2002      	movs	r0, #2
 8003cae:	f7fc fe81 	bl	80009b4 <lcd_print>
 8003cb2:	e008      	b.n	8003cc6 <menu+0x204a>
			} else if(dilSecim == 1){
 8003cb4:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <menu+0x219c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d104      	bne.n	8003cc6 <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 8003cbc:	4a5f      	ldr	r2, [pc, #380]	; (8003e3c <menu+0x21c0>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f7fc fe77 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	485d      	ldr	r0, [pc, #372]	; (8003e40 <menu+0x21c4>)
 8003cca:	f006 fb0f 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d115      	bne.n	8003d00 <menu+0x2084>
 8003cd4:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <menu+0x21c8>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003ce2:	4b52      	ldr	r3, [pc, #328]	; (8003e2c <menu+0x21b0>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <menu+0x21b0>)
 8003cec:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003cee:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <menu+0x21b0>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d902      	bls.n	8003cfc <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 8003cf6:	4b4d      	ldr	r3, [pc, #308]	; (8003e2c <menu+0x21b0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cfc:	f002 fd5c 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d00:	2104      	movs	r1, #4
 8003d02:	484f      	ldr	r0, [pc, #316]	; (8003e40 <menu+0x21c4>)
 8003d04:	f006 faf2 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d115      	bne.n	8003d3a <menu+0x20be>
 8003d0e:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <menu+0x21c8>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f083 0301 	eor.w	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003d1c:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <menu+0x21b0>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <menu+0x21b0>)
 8003d26:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003d28:	4b40      	ldr	r3, [pc, #256]	; (8003e2c <menu+0x21b0>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003d30:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <menu+0x21b0>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d36:	f002 fd3f 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3a:	2108      	movs	r1, #8
 8003d3c:	4840      	ldr	r0, [pc, #256]	; (8003e40 <menu+0x21c4>)
 8003d3e:	f006 fad5 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10d      	bne.n	8003d64 <menu+0x20e8>
 8003d48:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <menu+0x21c8>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 8003d56:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <menu+0x21b0>)
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <menu+0x21cc>)
 8003d5c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <menu+0x21d0>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003d64:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <menu+0x21d4>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b13      	cmp	r3, #19
 8003d6a:	f040 80d5 	bne.w	8003f18 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 8003d6e:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <menu+0x21a4>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d113      	bne.n	8003d9e <menu+0x2122>
			if(dilSecim == 0) {
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <menu+0x219c>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003d7e:	4a35      	ldr	r2, [pc, #212]	; (8003e54 <menu+0x21d8>)
 8003d80:	2101      	movs	r1, #1
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7fc fe16 	bl	80009b4 <lcd_print>
 8003d88:	e01f      	b.n	8003dca <menu+0x214e>
			} else if(dilSecim == 1) {
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <menu+0x219c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d11b      	bne.n	8003dca <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003d92:	4a31      	ldr	r2, [pc, #196]	; (8003e58 <menu+0x21dc>)
 8003d94:	2101      	movs	r1, #1
 8003d96:	2001      	movs	r0, #1
 8003d98:	f7fc fe0c 	bl	80009b4 <lcd_print>
 8003d9c:	e015      	b.n	8003dca <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <menu+0x21a4>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d111      	bne.n	8003dca <menu+0x214e>
			if(dilSecim == 0) {
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <menu+0x219c>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <menu+0x21e0>)
 8003db0:	2101      	movs	r1, #1
 8003db2:	2001      	movs	r0, #1
 8003db4:	f7fc fdfe 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <menu+0x219c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d104      	bne.n	8003dca <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <menu+0x21e4>)
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f7fc fdf5 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <menu+0x21e8>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d113      	bne.n	8003dfa <menu+0x217e>
			if(dilSecim == 0) {
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <menu+0x219c>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <menu+0x21b4>)
 8003ddc:	2101      	movs	r1, #1
 8003dde:	2002      	movs	r0, #2
 8003de0:	f7fc fde8 	bl	80009b4 <lcd_print>
 8003de4:	e049      	b.n	8003e7a <menu+0x21fe>
			} else if(dilSecim == 1) {
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <menu+0x219c>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d145      	bne.n	8003e7a <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <menu+0x21b8>)
 8003df0:	2101      	movs	r1, #1
 8003df2:	2002      	movs	r0, #2
 8003df4:	f7fc fdde 	bl	80009b4 <lcd_print>
 8003df8:	e03f      	b.n	8003e7a <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <menu+0x21e8>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d13b      	bne.n	8003e7a <menu+0x21fe>
			if(dilSecim == 0) {
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <menu+0x219c>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d12e      	bne.n	8003e68 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003e0a:	4a0b      	ldr	r2, [pc, #44]	; (8003e38 <menu+0x21bc>)
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	2002      	movs	r0, #2
 8003e10:	f7fc fdd0 	bl	80009b4 <lcd_print>
 8003e14:	e031      	b.n	8003e7a <menu+0x21fe>
 8003e16:	bf00      	nop
 8003e18:	20000cbe 	.word	0x20000cbe
 8003e1c:	0800e828 	.word	0x0800e828
 8003e20:	20000cac 	.word	0x20000cac
 8003e24:	0800e838 	.word	0x0800e838
 8003e28:	0800e84c 	.word	0x0800e84c
 8003e2c:	20000cad 	.word	0x20000cad
 8003e30:	0800e3bc 	.word	0x0800e3bc
 8003e34:	0800e3d0 	.word	0x0800e3d0
 8003e38:	0800e41c 	.word	0x0800e41c
 8003e3c:	0800e430 	.word	0x0800e430
 8003e40:	40010800 	.word	0x40010800
 8003e44:	20000ccc 	.word	0x20000ccc
 8003e48:	20000b38 	.word	0x20000b38
 8003e4c:	20000cc9 	.word	0x20000cc9
 8003e50:	20000c9d 	.word	0x20000c9d
 8003e54:	0800e860 	.word	0x0800e860
 8003e58:	0800e874 	.word	0x0800e874
 8003e5c:	0800e888 	.word	0x0800e888
 8003e60:	0800e89c 	.word	0x0800e89c
 8003e64:	20000cae 	.word	0x20000cae
			} else if(dilSecim == 1) {
 8003e68:	4b90      	ldr	r3, [pc, #576]	; (80040ac <menu+0x2430>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d104      	bne.n	8003e7a <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003e70:	4a8f      	ldr	r2, [pc, #572]	; (80040b0 <menu+0x2434>)
 8003e72:	2101      	movs	r1, #1
 8003e74:	2002      	movs	r0, #2
 8003e76:	f7fc fd9d 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	488d      	ldr	r0, [pc, #564]	; (80040b4 <menu+0x2438>)
 8003e7e:	f006 fa35 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d115      	bne.n	8003eb4 <menu+0x2238>
 8003e88:	4b8b      	ldr	r3, [pc, #556]	; (80040b8 <menu+0x243c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f083 0301 	eor.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00e      	beq.n	8003eb4 <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003e96:	4b89      	ldr	r3, [pc, #548]	; (80040bc <menu+0x2440>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4b87      	ldr	r3, [pc, #540]	; (80040bc <menu+0x2440>)
 8003ea0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003ea2:	4b86      	ldr	r3, [pc, #536]	; (80040bc <menu+0x2440>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d902      	bls.n	8003eb0 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003eaa:	4b84      	ldr	r3, [pc, #528]	; (80040bc <menu+0x2440>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003eb0:	f002 fc82 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	487f      	ldr	r0, [pc, #508]	; (80040b4 <menu+0x2438>)
 8003eb8:	f006 fa18 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d115      	bne.n	8003eee <menu+0x2272>
 8003ec2:	4b7d      	ldr	r3, [pc, #500]	; (80040b8 <menu+0x243c>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	f083 0301 	eor.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00e      	beq.n	8003eee <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003ed0:	4b7a      	ldr	r3, [pc, #488]	; (80040bc <menu+0x2440>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	4b78      	ldr	r3, [pc, #480]	; (80040bc <menu+0x2440>)
 8003eda:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003edc:	4b77      	ldr	r3, [pc, #476]	; (80040bc <menu+0x2440>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 8003ee4:	4b75      	ldr	r3, [pc, #468]	; (80040bc <menu+0x2440>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003eea:	f002 fc65 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eee:	2108      	movs	r1, #8
 8003ef0:	4870      	ldr	r0, [pc, #448]	; (80040b4 <menu+0x2438>)
 8003ef2:	f006 f9fb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d10d      	bne.n	8003f18 <menu+0x229c>
 8003efc:	4b6e      	ldr	r3, [pc, #440]	; (80040b8 <menu+0x243c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	f083 0301 	eor.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <menu+0x2440>)
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	4b6c      	ldr	r3, [pc, #432]	; (80040c0 <menu+0x2444>)
 8003f10:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003f12:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <menu+0x2448>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003f18:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <menu+0x244c>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b14      	cmp	r3, #20
 8003f1e:	f040 80b5 	bne.w	800408c <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 8003f22:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <menu+0x2450>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d113      	bne.n	8003f52 <menu+0x22d6>
			if(dilSecim == 0) {
 8003f2a:	4b60      	ldr	r3, [pc, #384]	; (80040ac <menu+0x2430>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003f32:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <menu+0x2454>)
 8003f34:	2101      	movs	r1, #1
 8003f36:	2001      	movs	r0, #1
 8003f38:	f7fc fd3c 	bl	80009b4 <lcd_print>
 8003f3c:	e020      	b.n	8003f80 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	; (80040ac <menu+0x2430>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d11c      	bne.n	8003f80 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003f46:	4a63      	ldr	r2, [pc, #396]	; (80040d4 <menu+0x2458>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	f7fc fd32 	bl	80009b4 <lcd_print>
 8003f50:	e016      	b.n	8003f80 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003f52:	4b5e      	ldr	r3, [pc, #376]	; (80040cc <menu+0x2450>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d112      	bne.n	8003f80 <menu+0x2304>
			if(dilSecim == 0) {
 8003f5a:	4b54      	ldr	r3, [pc, #336]	; (80040ac <menu+0x2430>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003f62:	4a5d      	ldr	r2, [pc, #372]	; (80040d8 <menu+0x245c>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7fc fd24 	bl	80009b4 <lcd_print>
 8003f6c:	e008      	b.n	8003f80 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <menu+0x2430>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d104      	bne.n	8003f80 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003f76:	4a59      	ldr	r2, [pc, #356]	; (80040dc <menu+0x2460>)
 8003f78:	2101      	movs	r1, #1
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f7fc fd1a 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003f80:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <menu+0x2464>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d113      	bne.n	8003fb0 <menu+0x2334>
			if(dilSecim == 0) {
 8003f88:	4b48      	ldr	r3, [pc, #288]	; (80040ac <menu+0x2430>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003f90:	4a54      	ldr	r2, [pc, #336]	; (80040e4 <menu+0x2468>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	2002      	movs	r0, #2
 8003f96:	f7fc fd0d 	bl	80009b4 <lcd_print>
 8003f9a:	e020      	b.n	8003fde <menu+0x2362>
			} else if(dilSecim == 1) {
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <menu+0x2430>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d11c      	bne.n	8003fde <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 8003fa4:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <menu+0x246c>)
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	2002      	movs	r0, #2
 8003faa:	f7fc fd03 	bl	80009b4 <lcd_print>
 8003fae:	e016      	b.n	8003fde <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003fb0:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <menu+0x2464>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d112      	bne.n	8003fde <menu+0x2362>
			if(dilSecim == 0) {
 8003fb8:	4b3c      	ldr	r3, [pc, #240]	; (80040ac <menu+0x2430>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 8003fc0:	4a4a      	ldr	r2, [pc, #296]	; (80040ec <menu+0x2470>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f7fc fcf5 	bl	80009b4 <lcd_print>
 8003fca:	e008      	b.n	8003fde <menu+0x2362>
			} else if(dilSecim == 1) {
 8003fcc:	4b37      	ldr	r3, [pc, #220]	; (80040ac <menu+0x2430>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d104      	bne.n	8003fde <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 8003fd4:	4a46      	ldr	r2, [pc, #280]	; (80040f0 <menu+0x2474>)
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f7fc fceb 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003fde:	2102      	movs	r1, #2
 8003fe0:	4834      	ldr	r0, [pc, #208]	; (80040b4 <menu+0x2438>)
 8003fe2:	f006 f983 	bl	800a2ec <HAL_GPIO_ReadPin>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d119      	bne.n	8004020 <menu+0x23a4>
 8003fec:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <menu+0x243c>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f083 0301 	eor.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <menu+0x23a4>
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <menu+0x2450>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d10e      	bne.n	8004020 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <menu+0x2464>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <menu+0x2464>)
 800400c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <menu+0x2464>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d902      	bls.n	800401c <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <menu+0x2464>)
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800401c:	f002 fbcc 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8004020:	2104      	movs	r1, #4
 8004022:	4824      	ldr	r0, [pc, #144]	; (80040b4 <menu+0x2438>)
 8004024:	f006 f962 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004028:	4603      	mov	r3, r0
 800402a:	2b01      	cmp	r3, #1
 800402c:	d119      	bne.n	8004062 <menu+0x23e6>
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <menu+0x243c>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	f083 0301 	eor.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <menu+0x23e6>
 800403c:	4b23      	ldr	r3, [pc, #140]	; (80040cc <menu+0x2450>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d10e      	bne.n	8004062 <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <menu+0x2464>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	3b01      	subs	r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <menu+0x2464>)
 800404e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8004050:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <menu+0x2464>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <menu+0x2464>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800405e:	f002 fbab 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004062:	2108      	movs	r1, #8
 8004064:	4813      	ldr	r0, [pc, #76]	; (80040b4 <menu+0x2438>)
 8004066:	f006 f941 	bl	800a2ec <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10d      	bne.n	800408c <menu+0x2410>
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <menu+0x243c>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	f083 0301 	eor.w	r3, r3, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <menu+0x2464>)
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <menu+0x2444>)
 8004084:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <menu+0x2448>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <menu+0x244c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b15      	cmp	r3, #21
 8004092:	f040 80c2 	bne.w	800421a <menu+0x259e>
		if(dilSecim == 0) {
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <menu+0x2430>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12c      	bne.n	80040f8 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <menu+0x2478>)
 80040a0:	2101      	movs	r1, #1
 80040a2:	2001      	movs	r0, #1
 80040a4:	f7fc fc86 	bl	80009b4 <lcd_print>
 80040a8:	e02f      	b.n	800410a <menu+0x248e>
 80040aa:	bf00      	nop
 80040ac:	20000cbe 	.word	0x20000cbe
 80040b0:	0800e430 	.word	0x0800e430
 80040b4:	40010800 	.word	0x40010800
 80040b8:	20000ccc 	.word	0x20000ccc
 80040bc:	20000cae 	.word	0x20000cae
 80040c0:	20000b38 	.word	0x20000b38
 80040c4:	20000cc9 	.word	0x20000cc9
 80040c8:	20000c9d 	.word	0x20000c9d
 80040cc:	20000cac 	.word	0x20000cac
 80040d0:	0800e8b0 	.word	0x0800e8b0
 80040d4:	0800e8c4 	.word	0x0800e8c4
 80040d8:	0800e8d8 	.word	0x0800e8d8
 80040dc:	0800e8ec 	.word	0x0800e8ec
 80040e0:	20000caf 	.word	0x20000caf
 80040e4:	0800e900 	.word	0x0800e900
 80040e8:	0800e914 	.word	0x0800e914
 80040ec:	0800e924 	.word	0x0800e924
 80040f0:	0800e938 	.word	0x0800e938
 80040f4:	0800e948 	.word	0x0800e948
		} else if(dilSecim == 1) {
 80040f8:	4b9c      	ldr	r3, [pc, #624]	; (800436c <menu+0x26f0>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d104      	bne.n	800410a <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8004100:	4a9b      	ldr	r2, [pc, #620]	; (8004370 <menu+0x26f4>)
 8004102:	2101      	movs	r1, #1
 8004104:	2001      	movs	r0, #1
 8004106:	f7fc fc55 	bl	80009b4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800410a:	4b9a      	ldr	r3, [pc, #616]	; (8004374 <menu+0x26f8>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d112      	bne.n	8004138 <menu+0x24bc>
			if(dilSecim == 0) {
 8004112:	4b96      	ldr	r3, [pc, #600]	; (800436c <menu+0x26f0>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 800411a:	4a97      	ldr	r2, [pc, #604]	; (8004378 <menu+0x26fc>)
 800411c:	2101      	movs	r1, #1
 800411e:	2002      	movs	r0, #2
 8004120:	f7fc fc48 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 8004124:	4b91      	ldr	r3, [pc, #580]	; (800436c <menu+0x26f0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d11c      	bne.n	8004166 <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 800412c:	4a93      	ldr	r2, [pc, #588]	; (800437c <menu+0x2700>)
 800412e:	2101      	movs	r1, #1
 8004130:	2002      	movs	r0, #2
 8004132:	f7fc fc3f 	bl	80009b4 <lcd_print>
 8004136:	e016      	b.n	8004166 <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8004138:	4b8e      	ldr	r3, [pc, #568]	; (8004374 <menu+0x26f8>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d112      	bne.n	8004166 <menu+0x24ea>
			if(dilSecim == 0) {
 8004140:	4b8a      	ldr	r3, [pc, #552]	; (800436c <menu+0x26f0>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8004148:	4a8d      	ldr	r2, [pc, #564]	; (8004380 <menu+0x2704>)
 800414a:	2101      	movs	r1, #1
 800414c:	2002      	movs	r0, #2
 800414e:	f7fc fc31 	bl	80009b4 <lcd_print>
 8004152:	e008      	b.n	8004166 <menu+0x24ea>
			} else if(dilSecim == 1) {
 8004154:	4b85      	ldr	r3, [pc, #532]	; (800436c <menu+0x26f0>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d104      	bne.n	8004166 <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 800415c:	4a89      	ldr	r2, [pc, #548]	; (8004384 <menu+0x2708>)
 800415e:	2101      	movs	r1, #1
 8004160:	2002      	movs	r0, #2
 8004162:	f7fc fc27 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004166:	2102      	movs	r1, #2
 8004168:	4887      	ldr	r0, [pc, #540]	; (8004388 <menu+0x270c>)
 800416a:	f006 f8bf 	bl	800a2ec <HAL_GPIO_ReadPin>
 800416e:	4603      	mov	r3, r0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d115      	bne.n	80041a0 <menu+0x2524>
 8004174:	4b85      	ldr	r3, [pc, #532]	; (800438c <menu+0x2710>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f083 0301 	eor.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00e      	beq.n	80041a0 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8004182:	4b7c      	ldr	r3, [pc, #496]	; (8004374 <menu+0x26f8>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	3301      	adds	r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b7a      	ldr	r3, [pc, #488]	; (8004374 <menu+0x26f8>)
 800418c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800418e:	4b79      	ldr	r3, [pc, #484]	; (8004374 <menu+0x26f8>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d902      	bls.n	800419c <menu+0x2520>
				platformSilindirTipi = 0;
 8004196:	4b77      	ldr	r3, [pc, #476]	; (8004374 <menu+0x26f8>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800419c:	f002 fb0c 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041a0:	2104      	movs	r1, #4
 80041a2:	4879      	ldr	r0, [pc, #484]	; (8004388 <menu+0x270c>)
 80041a4:	f006 f8a2 	bl	800a2ec <HAL_GPIO_ReadPin>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d115      	bne.n	80041da <menu+0x255e>
 80041ae:	4b77      	ldr	r3, [pc, #476]	; (800438c <menu+0x2710>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f083 0301 	eor.w	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 80041bc:	4b6d      	ldr	r3, [pc, #436]	; (8004374 <menu+0x26f8>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <menu+0x26f8>)
 80041c6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80041c8:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <menu+0x26f8>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <menu+0x255a>
		   		platformSilindirTipi = 1;
 80041d0:	4b68      	ldr	r3, [pc, #416]	; (8004374 <menu+0x26f8>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041d6:	f002 faef 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041da:	2108      	movs	r1, #8
 80041dc:	486a      	ldr	r0, [pc, #424]	; (8004388 <menu+0x270c>)
 80041de:	f006 f885 	bl	800a2ec <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d118      	bne.n	800421a <menu+0x259e>
 80041e8:	4b68      	ldr	r3, [pc, #416]	; (800438c <menu+0x2710>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 80041f6:	4b5f      	ldr	r3, [pc, #380]	; (8004374 <menu+0x26f8>)
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	4b65      	ldr	r3, [pc, #404]	; (8004390 <menu+0x2714>)
 80041fc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80041fe:	4b5d      	ldr	r3, [pc, #372]	; (8004374 <menu+0x26f8>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d106      	bne.n	8004214 <menu+0x2598>
				altLimit = 1;
 8004206:	4b63      	ldr	r3, [pc, #396]	; (8004394 <menu+0x2718>)
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800420c:	4b61      	ldr	r3, [pc, #388]	; (8004394 <menu+0x2718>)
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <menu+0x2714>)
 8004212:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8004214:	4b60      	ldr	r3, [pc, #384]	; (8004398 <menu+0x271c>)
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800421a:	4b60      	ldr	r3, [pc, #384]	; (800439c <menu+0x2720>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b16      	cmp	r3, #22
 8004220:	f040 8081 	bne.w	8004326 <menu+0x26aa>
		if(dilSecim == 0) {
 8004224:	4b51      	ldr	r3, [pc, #324]	; (800436c <menu+0x26f0>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 800422c:	4a5c      	ldr	r2, [pc, #368]	; (80043a0 <menu+0x2724>)
 800422e:	2101      	movs	r1, #1
 8004230:	2001      	movs	r0, #1
 8004232:	f7fc fbbf 	bl	80009b4 <lcd_print>
 8004236:	e008      	b.n	800424a <menu+0x25ce>
		} else if(dilSecim == 1) {
 8004238:	4b4c      	ldr	r3, [pc, #304]	; (800436c <menu+0x26f0>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d104      	bne.n	800424a <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8004240:	4a58      	ldr	r2, [pc, #352]	; (80043a4 <menu+0x2728>)
 8004242:	2101      	movs	r1, #1
 8004244:	2001      	movs	r0, #1
 8004246:	f7fc fbb5 	bl	80009b4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800424a:	4b48      	ldr	r3, [pc, #288]	; (800436c <menu+0x26f0>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8004252:	4a55      	ldr	r2, [pc, #340]	; (80043a8 <menu+0x272c>)
 8004254:	2101      	movs	r1, #1
 8004256:	2002      	movs	r0, #2
 8004258:	f7fc fbac 	bl	80009b4 <lcd_print>
 800425c:	e008      	b.n	8004270 <menu+0x25f4>
			} else if(dilSecim == 1){
 800425e:	4b43      	ldr	r3, [pc, #268]	; (800436c <menu+0x26f0>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d104      	bne.n	8004270 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8004266:	4a51      	ldr	r2, [pc, #324]	; (80043ac <menu+0x2730>)
 8004268:	2101      	movs	r1, #1
 800426a:	2002      	movs	r0, #2
 800426c:	f7fc fba2 	bl	80009b4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8004270:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <menu+0x2734>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	220a      	movs	r2, #10
 8004276:	494f      	ldr	r1, [pc, #316]	; (80043b4 <menu+0x2738>)
 8004278:	4618      	mov	r0, r3
 800427a:	f009 f8bf 	bl	800d3fc <itoa>
		lcd_print(2,16,snum);
 800427e:	4a4d      	ldr	r2, [pc, #308]	; (80043b4 <menu+0x2738>)
 8004280:	2110      	movs	r1, #16
 8004282:	2002      	movs	r0, #2
 8004284:	f7fc fb96 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004288:	2102      	movs	r1, #2
 800428a:	483f      	ldr	r0, [pc, #252]	; (8004388 <menu+0x270c>)
 800428c:	f006 f82e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d115      	bne.n	80042c2 <menu+0x2646>
 8004296:	4b3d      	ldr	r3, [pc, #244]	; (800438c <menu+0x2710>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	f083 0301 	eor.w	r3, r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00e      	beq.n	80042c2 <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 80042a4:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <menu+0x2734>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b40      	ldr	r3, [pc, #256]	; (80043b0 <menu+0x2734>)
 80042ae:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80042b0:	4b3f      	ldr	r3, [pc, #252]	; (80043b0 <menu+0x2734>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d902      	bls.n	80042be <menu+0x2642>
				yukariValfTmr = 0;
 80042b8:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <menu+0x2734>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042be:	f002 fa7b 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042c2:	2104      	movs	r1, #4
 80042c4:	4830      	ldr	r0, [pc, #192]	; (8004388 <menu+0x270c>)
 80042c6:	f006 f811 	bl	800a2ec <HAL_GPIO_ReadPin>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d115      	bne.n	80042fc <menu+0x2680>
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <menu+0x2710>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f083 0301 	eor.w	r3, r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 80042de:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <menu+0x2734>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <menu+0x2734>)
 80042e8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80042ea:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <menu+0x2734>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d902      	bls.n	80042f8 <menu+0x267c>
		   		yukariValfTmr = 5;
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <menu+0x2734>)
 80042f4:	2205      	movs	r2, #5
 80042f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042f8:	f002 fa5e 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042fc:	2108      	movs	r1, #8
 80042fe:	4822      	ldr	r0, [pc, #136]	; (8004388 <menu+0x270c>)
 8004300:	f005 fff4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004304:	4603      	mov	r3, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10d      	bne.n	8004326 <menu+0x26aa>
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <menu+0x2710>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	f083 0301 	eor.w	r3, r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <menu+0x2734>)
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <menu+0x2714>)
 800431e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <menu+0x271c>)
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <menu+0x2720>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b17      	cmp	r3, #23
 800432c:	f040 80ac 	bne.w	8004488 <menu+0x280c>
		if(dilSecim == 0) {
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <menu+0x26f0>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8004338:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <menu+0x273c>)
 800433a:	2101      	movs	r1, #1
 800433c:	2001      	movs	r0, #1
 800433e:	f7fc fb39 	bl	80009b4 <lcd_print>
 8004342:	e008      	b.n	8004356 <menu+0x26da>
		} else if(dilSecim == 1) {
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <menu+0x26f0>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d104      	bne.n	8004356 <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <menu+0x2740>)
 800434e:	2101      	movs	r1, #1
 8004350:	2001      	movs	r0, #1
 8004352:	f7fc fb2f 	bl	80009b4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <menu+0x26f0>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d130      	bne.n	80043c0 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <menu+0x272c>)
 8004360:	2101      	movs	r1, #1
 8004362:	2002      	movs	r0, #2
 8004364:	f7fc fb26 	bl	80009b4 <lcd_print>
 8004368:	e033      	b.n	80043d2 <menu+0x2756>
 800436a:	bf00      	nop
 800436c:	20000cbe 	.word	0x20000cbe
 8004370:	0800e95c 	.word	0x0800e95c
 8004374:	20000cb0 	.word	0x20000cb0
 8004378:	0800e900 	.word	0x0800e900
 800437c:	0800e914 	.word	0x0800e914
 8004380:	0800e924 	.word	0x0800e924
 8004384:	0800e938 	.word	0x0800e938
 8004388:	40010800 	.word	0x40010800
 800438c:	20000ccc 	.word	0x20000ccc
 8004390:	20000b38 	.word	0x20000b38
 8004394:	20000ca3 	.word	0x20000ca3
 8004398:	20000cc9 	.word	0x20000cc9
 800439c:	20000c9d 	.word	0x20000c9d
 80043a0:	0800e96c 	.word	0x0800e96c
 80043a4:	0800e980 	.word	0x0800e980
 80043a8:	0800e620 	.word	0x0800e620
 80043ac:	0800e994 	.word	0x0800e994
 80043b0:	20000cb1 	.word	0x20000cb1
 80043b4:	20000bcc 	.word	0x20000bcc
 80043b8:	0800e9a4 	.word	0x0800e9a4
 80043bc:	0800e9b8 	.word	0x0800e9b8
			} else if(dilSecim == 1) {
 80043c0:	4b98      	ldr	r3, [pc, #608]	; (8004624 <menu+0x29a8>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d104      	bne.n	80043d2 <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 80043c8:	4a97      	ldr	r2, [pc, #604]	; (8004628 <menu+0x29ac>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	2002      	movs	r0, #2
 80043ce:	f7fc faf1 	bl	80009b4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80043d2:	4b96      	ldr	r3, [pc, #600]	; (800462c <menu+0x29b0>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	220a      	movs	r2, #10
 80043d8:	4995      	ldr	r1, [pc, #596]	; (8004630 <menu+0x29b4>)
 80043da:	4618      	mov	r0, r3
 80043dc:	f009 f80e 	bl	800d3fc <itoa>
		lcd_print(2,16,snum);
 80043e0:	4a93      	ldr	r2, [pc, #588]	; (8004630 <menu+0x29b4>)
 80043e2:	2110      	movs	r1, #16
 80043e4:	2002      	movs	r0, #2
 80043e6:	f7fc fae5 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043ea:	2102      	movs	r1, #2
 80043ec:	4891      	ldr	r0, [pc, #580]	; (8004634 <menu+0x29b8>)
 80043ee:	f005 ff7d 	bl	800a2ec <HAL_GPIO_ReadPin>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d115      	bne.n	8004424 <menu+0x27a8>
 80043f8:	4b8f      	ldr	r3, [pc, #572]	; (8004638 <menu+0x29bc>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f083 0301 	eor.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00e      	beq.n	8004424 <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <menu+0x29b0>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b87      	ldr	r3, [pc, #540]	; (800462c <menu+0x29b0>)
 8004410:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8004412:	4b86      	ldr	r3, [pc, #536]	; (800462c <menu+0x29b0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d902      	bls.n	8004420 <menu+0x27a4>
				asagiValfTmr = 0;
 800441a:	4b84      	ldr	r3, [pc, #528]	; (800462c <menu+0x29b0>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004420:	f002 f9ca 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004424:	2104      	movs	r1, #4
 8004426:	4883      	ldr	r0, [pc, #524]	; (8004634 <menu+0x29b8>)
 8004428:	f005 ff60 	bl	800a2ec <HAL_GPIO_ReadPin>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d115      	bne.n	800445e <menu+0x27e2>
 8004432:	4b81      	ldr	r3, [pc, #516]	; (8004638 <menu+0x29bc>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f083 0301 	eor.w	r3, r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8004440:	4b7a      	ldr	r3, [pc, #488]	; (800462c <menu+0x29b0>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	3b01      	subs	r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b78      	ldr	r3, [pc, #480]	; (800462c <menu+0x29b0>)
 800444a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800444c:	4b77      	ldr	r3, [pc, #476]	; (800462c <menu+0x29b0>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d902      	bls.n	800445a <menu+0x27de>
		   		asagiValfTmr = 5;
 8004454:	4b75      	ldr	r3, [pc, #468]	; (800462c <menu+0x29b0>)
 8004456:	2205      	movs	r2, #5
 8004458:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800445a:	f002 f9ad 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800445e:	2108      	movs	r1, #8
 8004460:	4874      	ldr	r0, [pc, #464]	; (8004634 <menu+0x29b8>)
 8004462:	f005 ff43 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004466:	4603      	mov	r3, r0
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10d      	bne.n	8004488 <menu+0x280c>
 800446c:	4b72      	ldr	r3, [pc, #456]	; (8004638 <menu+0x29bc>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 800447a:	4b6c      	ldr	r3, [pc, #432]	; (800462c <menu+0x29b0>)
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	4b6f      	ldr	r3, [pc, #444]	; (800463c <menu+0x29c0>)
 8004480:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8004482:	4b6f      	ldr	r3, [pc, #444]	; (8004640 <menu+0x29c4>)
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8004488:	4b6e      	ldr	r3, [pc, #440]	; (8004644 <menu+0x29c8>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b18      	cmp	r3, #24
 800448e:	f040 809d 	bne.w	80045cc <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8004492:	4b6d      	ldr	r3, [pc, #436]	; (8004648 <menu+0x29cc>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d113      	bne.n	80044c2 <menu+0x2846>
			if(dilSecim == 0) {
 800449a:	4b62      	ldr	r3, [pc, #392]	; (8004624 <menu+0x29a8>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80044a2:	4a6a      	ldr	r2, [pc, #424]	; (800464c <menu+0x29d0>)
 80044a4:	2101      	movs	r1, #1
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7fc fa84 	bl	80009b4 <lcd_print>
 80044ac:	e020      	b.n	80044f0 <menu+0x2874>
			} else if(dilSecim == 1) {
 80044ae:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <menu+0x29a8>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d11c      	bne.n	80044f0 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80044b6:	4a66      	ldr	r2, [pc, #408]	; (8004650 <menu+0x29d4>)
 80044b8:	2101      	movs	r1, #1
 80044ba:	2001      	movs	r0, #1
 80044bc:	f7fc fa7a 	bl	80009b4 <lcd_print>
 80044c0:	e016      	b.n	80044f0 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80044c2:	4b61      	ldr	r3, [pc, #388]	; (8004648 <menu+0x29cc>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d112      	bne.n	80044f0 <menu+0x2874>
			if(dilSecim == 0) {
 80044ca:	4b56      	ldr	r3, [pc, #344]	; (8004624 <menu+0x29a8>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80044d2:	4a60      	ldr	r2, [pc, #384]	; (8004654 <menu+0x29d8>)
 80044d4:	2101      	movs	r1, #1
 80044d6:	2001      	movs	r0, #1
 80044d8:	f7fc fa6c 	bl	80009b4 <lcd_print>
 80044dc:	e008      	b.n	80044f0 <menu+0x2874>
			} else if(dilSecim == 1) {
 80044de:	4b51      	ldr	r3, [pc, #324]	; (8004624 <menu+0x29a8>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d104      	bne.n	80044f0 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80044e6:	4a5c      	ldr	r2, [pc, #368]	; (8004658 <menu+0x29dc>)
 80044e8:	2101      	movs	r1, #1
 80044ea:	2001      	movs	r0, #1
 80044ec:	f7fc fa62 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <menu+0x29a8>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 80044f8:	4a58      	ldr	r2, [pc, #352]	; (800465c <menu+0x29e0>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	2002      	movs	r0, #2
 80044fe:	f7fc fa59 	bl	80009b4 <lcd_print>
 8004502:	e008      	b.n	8004516 <menu+0x289a>
			} else if(dilSecim == 1) {
 8004504:	4b47      	ldr	r3, [pc, #284]	; (8004624 <menu+0x29a8>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d104      	bne.n	8004516 <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 800450c:	4a46      	ldr	r2, [pc, #280]	; (8004628 <menu+0x29ac>)
 800450e:	2101      	movs	r1, #1
 8004510:	2002      	movs	r0, #2
 8004512:	f7fc fa4f 	bl	80009b4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8004516:	4b52      	ldr	r3, [pc, #328]	; (8004660 <menu+0x29e4>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	220a      	movs	r2, #10
 800451c:	4944      	ldr	r1, [pc, #272]	; (8004630 <menu+0x29b4>)
 800451e:	4618      	mov	r0, r3
 8004520:	f008 ff6c 	bl	800d3fc <itoa>
		lcd_print(2, 16, snum);
 8004524:	4a42      	ldr	r2, [pc, #264]	; (8004630 <menu+0x29b4>)
 8004526:	2110      	movs	r1, #16
 8004528:	2002      	movs	r0, #2
 800452a:	f7fc fa43 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800452e:	2102      	movs	r1, #2
 8004530:	4840      	ldr	r0, [pc, #256]	; (8004634 <menu+0x29b8>)
 8004532:	f005 fedb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d115      	bne.n	8004568 <menu+0x28ec>
 800453c:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <menu+0x29bc>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f083 0301 	eor.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00e      	beq.n	8004568 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800454a:	4b45      	ldr	r3, [pc, #276]	; (8004660 <menu+0x29e4>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b43      	ldr	r3, [pc, #268]	; (8004660 <menu+0x29e4>)
 8004554:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8004556:	4b42      	ldr	r3, [pc, #264]	; (8004660 <menu+0x29e4>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b05      	cmp	r3, #5
 800455c:	d902      	bls.n	8004564 <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 800455e:	4b40      	ldr	r3, [pc, #256]	; (8004660 <menu+0x29e4>)
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004564:	f002 f928 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004568:	2104      	movs	r1, #4
 800456a:	4832      	ldr	r0, [pc, #200]	; (8004634 <menu+0x29b8>)
 800456c:	f005 febe 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004570:	4603      	mov	r3, r0
 8004572:	2b01      	cmp	r3, #1
 8004574:	d115      	bne.n	80045a2 <menu+0x2926>
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <menu+0x29bc>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f083 0301 	eor.w	r3, r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00e      	beq.n	80045a2 <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <menu+0x29e4>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	4b34      	ldr	r3, [pc, #208]	; (8004660 <menu+0x29e4>)
 800458e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004590:	4b33      	ldr	r3, [pc, #204]	; (8004660 <menu+0x29e4>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d902      	bls.n	800459e <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8004598:	4b31      	ldr	r3, [pc, #196]	; (8004660 <menu+0x29e4>)
 800459a:	2205      	movs	r2, #5
 800459c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800459e:	f002 f90b 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045a2:	2108      	movs	r1, #8
 80045a4:	4823      	ldr	r0, [pc, #140]	; (8004634 <menu+0x29b8>)
 80045a6:	f005 fea1 	bl	800a2ec <HAL_GPIO_ReadPin>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10d      	bne.n	80045cc <menu+0x2950>
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <menu+0x29bc>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f083 0301 	eor.w	r3, r3, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 80045be:	4b28      	ldr	r3, [pc, #160]	; (8004660 <menu+0x29e4>)
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <menu+0x29c0>)
 80045c4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80045c6:	4b1e      	ldr	r3, [pc, #120]	; (8004640 <menu+0x29c4>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <menu+0x29c8>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b19      	cmp	r3, #25
 80045d2:	f040 80c4 	bne.w	800475e <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 80045d6:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <menu+0x29cc>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d113      	bne.n	8004606 <menu+0x298a>
			if(dilSecim == 0) {
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <menu+0x29a8>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <menu+0x29e8>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	2001      	movs	r0, #1
 80045ec:	f7fc f9e2 	bl	80009b4 <lcd_print>
 80045f0:	e047      	b.n	8004682 <menu+0x2a06>
			} else if(dilSecim == 1) {
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <menu+0x29a8>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d143      	bne.n	8004682 <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <menu+0x29ec>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fc f9d8 	bl	80009b4 <lcd_print>
 8004604:	e03d      	b.n	8004682 <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <menu+0x29cc>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d139      	bne.n	8004682 <menu+0x2a06>
			if(dilSecim == 0) {
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <menu+0x29a8>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d12c      	bne.n	8004670 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <menu+0x29f0>)
 8004618:	2101      	movs	r1, #1
 800461a:	2001      	movs	r0, #1
 800461c:	f7fc f9ca 	bl	80009b4 <lcd_print>
 8004620:	e02f      	b.n	8004682 <menu+0x2a06>
 8004622:	bf00      	nop
 8004624:	20000cbe 	.word	0x20000cbe
 8004628:	0800e994 	.word	0x0800e994
 800462c:	20000cb2 	.word	0x20000cb2
 8004630:	20000bcc 	.word	0x20000bcc
 8004634:	40010800 	.word	0x40010800
 8004638:	20000ccc 	.word	0x20000ccc
 800463c:	20000b38 	.word	0x20000b38
 8004640:	20000cc9 	.word	0x20000cc9
 8004644:	20000c9d 	.word	0x20000c9d
 8004648:	20000cac 	.word	0x20000cac
 800464c:	0800e9cc 	.word	0x0800e9cc
 8004650:	0800e9e0 	.word	0x0800e9e0
 8004654:	0800e9f4 	.word	0x0800e9f4
 8004658:	0800ea08 	.word	0x0800ea08
 800465c:	0800e620 	.word	0x0800e620
 8004660:	20000cb3 	.word	0x20000cb3
 8004664:	0800ea1c 	.word	0x0800ea1c
 8004668:	0800ea30 	.word	0x0800ea30
 800466c:	0800ea44 	.word	0x0800ea44
			} else if(dilSecim == 1) {
 8004670:	4b73      	ldr	r3, [pc, #460]	; (8004840 <menu+0x2bc4>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d104      	bne.n	8004682 <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8004678:	4a72      	ldr	r2, [pc, #456]	; (8004844 <menu+0x2bc8>)
 800467a:	2101      	movs	r1, #1
 800467c:	2001      	movs	r0, #1
 800467e:	f7fc f999 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8004682:	4b6f      	ldr	r3, [pc, #444]	; (8004840 <menu+0x2bc4>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 800468a:	4a6f      	ldr	r2, [pc, #444]	; (8004848 <menu+0x2bcc>)
 800468c:	2101      	movs	r1, #1
 800468e:	2002      	movs	r0, #2
 8004690:	f7fc f990 	bl	80009b4 <lcd_print>
 8004694:	e008      	b.n	80046a8 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8004696:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <menu+0x2bc4>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d104      	bne.n	80046a8 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 800469e:	4a6b      	ldr	r2, [pc, #428]	; (800484c <menu+0x2bd0>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	2002      	movs	r0, #2
 80046a4:	f7fc f986 	bl	80009b4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80046a8:	4b69      	ldr	r3, [pc, #420]	; (8004850 <menu+0x2bd4>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	220a      	movs	r2, #10
 80046ae:	4969      	ldr	r1, [pc, #420]	; (8004854 <menu+0x2bd8>)
 80046b0:	4618      	mov	r0, r3
 80046b2:	f008 fea3 	bl	800d3fc <itoa>
		lcd_print(2,16,snum);
 80046b6:	4a67      	ldr	r2, [pc, #412]	; (8004854 <menu+0x2bd8>)
 80046b8:	2110      	movs	r1, #16
 80046ba:	2002      	movs	r0, #2
 80046bc:	f7fc f97a 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046c0:	2102      	movs	r1, #2
 80046c2:	4865      	ldr	r0, [pc, #404]	; (8004858 <menu+0x2bdc>)
 80046c4:	f005 fe12 	bl	800a2ec <HAL_GPIO_ReadPin>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d115      	bne.n	80046fa <menu+0x2a7e>
 80046ce:	4b63      	ldr	r3, [pc, #396]	; (800485c <menu+0x2be0>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f083 0301 	eor.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80046dc:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <menu+0x2bd4>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <menu+0x2bd4>)
 80046e6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <menu+0x2bd4>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d902      	bls.n	80046f6 <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 80046f0:	4b57      	ldr	r3, [pc, #348]	; (8004850 <menu+0x2bd4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046f6:	f002 f85f 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046fa:	2104      	movs	r1, #4
 80046fc:	4856      	ldr	r0, [pc, #344]	; (8004858 <menu+0x2bdc>)
 80046fe:	f005 fdf5 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d115      	bne.n	8004734 <menu+0x2ab8>
 8004708:	4b54      	ldr	r3, [pc, #336]	; (800485c <menu+0x2be0>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f083 0301 	eor.w	r3, r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8004716:	4b4e      	ldr	r3, [pc, #312]	; (8004850 <menu+0x2bd4>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b4c      	ldr	r3, [pc, #304]	; (8004850 <menu+0x2bd4>)
 8004720:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004722:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <menu+0x2bd4>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b06      	cmp	r3, #6
 8004728:	d902      	bls.n	8004730 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 800472a:	4b49      	ldr	r3, [pc, #292]	; (8004850 <menu+0x2bd4>)
 800472c:	2205      	movs	r2, #5
 800472e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004730:	f002 f842 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004734:	2108      	movs	r1, #8
 8004736:	4848      	ldr	r0, [pc, #288]	; (8004858 <menu+0x2bdc>)
 8004738:	f005 fdd8 	bl	800a2ec <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10d      	bne.n	800475e <menu+0x2ae2>
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <menu+0x2be0>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f083 0301 	eor.w	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <menu+0x2bd4>)
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	4b42      	ldr	r3, [pc, #264]	; (8004860 <menu+0x2be4>)
 8004756:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <menu+0x2be8>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800475e:	4b42      	ldr	r3, [pc, #264]	; (8004868 <menu+0x2bec>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b1a      	cmp	r3, #26
 8004764:	f040 80ec 	bne.w	8004940 <menu+0x2cc4>
		if(dilSecim == 0) {
 8004768:	4b35      	ldr	r3, [pc, #212]	; (8004840 <menu+0x2bc4>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004770:	4a3e      	ldr	r2, [pc, #248]	; (800486c <menu+0x2bf0>)
 8004772:	2101      	movs	r1, #1
 8004774:	2001      	movs	r0, #1
 8004776:	f7fc f91d 	bl	80009b4 <lcd_print>
 800477a:	e008      	b.n	800478e <menu+0x2b12>
		} else if(dilSecim == 1) {
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <menu+0x2bc4>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d104      	bne.n	800478e <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 8004784:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <menu+0x2bf4>)
 8004786:	2101      	movs	r1, #1
 8004788:	2001      	movs	r0, #1
 800478a:	f7fc f913 	bl	80009b4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <menu+0x2bf8>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b63      	cmp	r3, #99	; 0x63
 8004794:	d91e      	bls.n	80047d4 <menu+0x2b58>
			if(dilSecim == 0) {
 8004796:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <menu+0x2bc4>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <menu+0x2bcc>)
 80047a0:	2101      	movs	r1, #1
 80047a2:	2002      	movs	r0, #2
 80047a4:	f7fc f906 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <menu+0x2bc4>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d104      	bne.n	80047ba <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 80047b0:	4a26      	ldr	r2, [pc, #152]	; (800484c <menu+0x2bd0>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	2002      	movs	r0, #2
 80047b6:	f7fc f8fd 	bl	80009b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <menu+0x2bf8>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	220a      	movs	r2, #10
 80047c0:	4924      	ldr	r1, [pc, #144]	; (8004854 <menu+0x2bd8>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f008 fe1a 	bl	800d3fc <itoa>
			lcd_print(2,14,snum);
 80047c8:	4a22      	ldr	r2, [pc, #136]	; (8004854 <menu+0x2bd8>)
 80047ca:	210e      	movs	r1, #14
 80047cc:	2002      	movs	r0, #2
 80047ce:	f7fc f8f1 	bl	80009b4 <lcd_print>
 80047d2:	e066      	b.n	80048a2 <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80047d4:	4b27      	ldr	r3, [pc, #156]	; (8004874 <menu+0x2bf8>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b09      	cmp	r3, #9
 80047da:	d923      	bls.n	8004824 <menu+0x2ba8>
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <menu+0x2bf8>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b63      	cmp	r3, #99	; 0x63
 80047e2:	d81f      	bhi.n	8004824 <menu+0x2ba8>
			if(dilSecim == 0) {
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <menu+0x2bc4>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <menu+0x2bcc>)
 80047ee:	2101      	movs	r1, #1
 80047f0:	2002      	movs	r0, #2
 80047f2:	f7fc f8df 	bl	80009b4 <lcd_print>
 80047f6:	e008      	b.n	800480a <menu+0x2b8e>
			} else if(dilSecim == 1) {
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <menu+0x2bc4>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d104      	bne.n	800480a <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <menu+0x2bd0>)
 8004802:	2101      	movs	r1, #1
 8004804:	2002      	movs	r0, #2
 8004806:	f7fc f8d5 	bl	80009b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <menu+0x2bf8>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	220a      	movs	r2, #10
 8004810:	4910      	ldr	r1, [pc, #64]	; (8004854 <menu+0x2bd8>)
 8004812:	4618      	mov	r0, r3
 8004814:	f008 fdf2 	bl	800d3fc <itoa>
			lcd_print(2, 15, snum);
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <menu+0x2bd8>)
 800481a:	210f      	movs	r1, #15
 800481c:	2002      	movs	r0, #2
 800481e:	f7fc f8c9 	bl	80009b4 <lcd_print>
 8004822:	e03e      	b.n	80048a2 <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <menu+0x2bf8>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b09      	cmp	r3, #9
 800482a:	d83a      	bhi.n	80048a2 <menu+0x2c26>
			if(dilSecim == 0) {
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <menu+0x2bc4>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d121      	bne.n	8004878 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <menu+0x2bcc>)
 8004836:	2101      	movs	r1, #1
 8004838:	2002      	movs	r0, #2
 800483a:	f7fc f8bb 	bl	80009b4 <lcd_print>
 800483e:	e024      	b.n	800488a <menu+0x2c0e>
 8004840:	20000cbe 	.word	0x20000cbe
 8004844:	0800ea58 	.word	0x0800ea58
 8004848:	0800e620 	.word	0x0800e620
 800484c:	0800e994 	.word	0x0800e994
 8004850:	20000cb4 	.word	0x20000cb4
 8004854:	20000bcc 	.word	0x20000bcc
 8004858:	40010800 	.word	0x40010800
 800485c:	20000ccc 	.word	0x20000ccc
 8004860:	20000b38 	.word	0x20000b38
 8004864:	20000cc9 	.word	0x20000cc9
 8004868:	20000c9d 	.word	0x20000c9d
 800486c:	0800ea6c 	.word	0x0800ea6c
 8004870:	0800ea80 	.word	0x0800ea80
 8004874:	20000cb5 	.word	0x20000cb5
			} else if(dilSecim == 1) {
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <menu+0x2e3c>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d104      	bne.n	800488a <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004880:	4a8e      	ldr	r2, [pc, #568]	; (8004abc <menu+0x2e40>)
 8004882:	2101      	movs	r1, #1
 8004884:	2002      	movs	r0, #2
 8004886:	f7fc f895 	bl	80009b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800488a:	4b8d      	ldr	r3, [pc, #564]	; (8004ac0 <menu+0x2e44>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	220a      	movs	r2, #10
 8004890:	498c      	ldr	r1, [pc, #560]	; (8004ac4 <menu+0x2e48>)
 8004892:	4618      	mov	r0, r3
 8004894:	f008 fdb2 	bl	800d3fc <itoa>
			lcd_print(2, 16, snum);
 8004898:	4a8a      	ldr	r2, [pc, #552]	; (8004ac4 <menu+0x2e48>)
 800489a:	2110      	movs	r1, #16
 800489c:	2002      	movs	r0, #2
 800489e:	f7fc f889 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80048a2:	2102      	movs	r1, #2
 80048a4:	4888      	ldr	r0, [pc, #544]	; (8004ac8 <menu+0x2e4c>)
 80048a6:	f005 fd21 	bl	800a2ec <HAL_GPIO_ReadPin>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d115      	bne.n	80048dc <menu+0x2c60>
 80048b0:	4b86      	ldr	r3, [pc, #536]	; (8004acc <menu+0x2e50>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f083 0301 	eor.w	r3, r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00e      	beq.n	80048dc <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 80048be:	4b80      	ldr	r3, [pc, #512]	; (8004ac0 <menu+0x2e44>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4b7e      	ldr	r3, [pc, #504]	; (8004ac0 <menu+0x2e44>)
 80048c8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80048ca:	4b7d      	ldr	r3, [pc, #500]	; (8004ac0 <menu+0x2e44>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2bb4      	cmp	r3, #180	; 0xb4
 80048d0:	d902      	bls.n	80048d8 <menu+0x2c5c>
				makineCalismaTmr = 0;
 80048d2:	4b7b      	ldr	r3, [pc, #492]	; (8004ac0 <menu+0x2e44>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80048d8:	f001 ff6e 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048dc:	2104      	movs	r1, #4
 80048de:	487a      	ldr	r0, [pc, #488]	; (8004ac8 <menu+0x2e4c>)
 80048e0:	f005 fd04 	bl	800a2ec <HAL_GPIO_ReadPin>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d115      	bne.n	8004916 <menu+0x2c9a>
 80048ea:	4b78      	ldr	r3, [pc, #480]	; (8004acc <menu+0x2e50>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	f083 0301 	eor.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 80048f8:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <menu+0x2e44>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	4b6f      	ldr	r3, [pc, #444]	; (8004ac0 <menu+0x2e44>)
 8004902:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004904:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <menu+0x2e44>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2bb5      	cmp	r3, #181	; 0xb5
 800490a:	d902      	bls.n	8004912 <menu+0x2c96>
		   		makineCalismaTmr = 180;
 800490c:	4b6c      	ldr	r3, [pc, #432]	; (8004ac0 <menu+0x2e44>)
 800490e:	22b4      	movs	r2, #180	; 0xb4
 8004910:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004912:	f001 ff51 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004916:	2108      	movs	r1, #8
 8004918:	486b      	ldr	r0, [pc, #428]	; (8004ac8 <menu+0x2e4c>)
 800491a:	f005 fce7 	bl	800a2ec <HAL_GPIO_ReadPin>
 800491e:	4603      	mov	r3, r0
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10d      	bne.n	8004940 <menu+0x2cc4>
 8004924:	4b69      	ldr	r3, [pc, #420]	; (8004acc <menu+0x2e50>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f083 0301 	eor.w	r3, r3, #1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 8004932:	4b63      	ldr	r3, [pc, #396]	; (8004ac0 <menu+0x2e44>)
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <menu+0x2e54>)
 8004938:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800493a:	4b66      	ldr	r3, [pc, #408]	; (8004ad4 <menu+0x2e58>)
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004940:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <menu+0x2e5c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b1b      	cmp	r3, #27
 8004946:	f040 8083 	bne.w	8004a50 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 800494a:	4a64      	ldr	r2, [pc, #400]	; (8004adc <menu+0x2e60>)
 800494c:	2101      	movs	r1, #1
 800494e:	2001      	movs	r0, #1
 8004950:	f7fc f830 	bl	80009b4 <lcd_print>

		if(buzzer == 0) {
 8004954:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <menu+0x2e64>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d113      	bne.n	8004984 <menu+0x2d08>
			if(dilSecim == 0) {
 800495c:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <menu+0x2e3c>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 8004964:	4a5f      	ldr	r2, [pc, #380]	; (8004ae4 <menu+0x2e68>)
 8004966:	2101      	movs	r1, #1
 8004968:	2002      	movs	r0, #2
 800496a:	f7fc f823 	bl	80009b4 <lcd_print>
 800496e:	e020      	b.n	80049b2 <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004970:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <menu+0x2e3c>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d11c      	bne.n	80049b2 <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004978:	4a5b      	ldr	r2, [pc, #364]	; (8004ae8 <menu+0x2e6c>)
 800497a:	2101      	movs	r1, #1
 800497c:	2002      	movs	r0, #2
 800497e:	f7fc f819 	bl	80009b4 <lcd_print>
 8004982:	e016      	b.n	80049b2 <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 8004984:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <menu+0x2e64>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d112      	bne.n	80049b2 <menu+0x2d36>
			if(dilSecim == 0) {
 800498c:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <menu+0x2e3c>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d105      	bne.n	80049a0 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 8004994:	4a55      	ldr	r2, [pc, #340]	; (8004aec <menu+0x2e70>)
 8004996:	2101      	movs	r1, #1
 8004998:	2002      	movs	r0, #2
 800499a:	f7fc f80b 	bl	80009b4 <lcd_print>
 800499e:	e008      	b.n	80049b2 <menu+0x2d36>
			} else if(dilSecim == 1) {
 80049a0:	4b45      	ldr	r3, [pc, #276]	; (8004ab8 <menu+0x2e3c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d104      	bne.n	80049b2 <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 80049a8:	4a51      	ldr	r2, [pc, #324]	; (8004af0 <menu+0x2e74>)
 80049aa:	2101      	movs	r1, #1
 80049ac:	2002      	movs	r0, #2
 80049ae:	f7fc f801 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80049b2:	2102      	movs	r1, #2
 80049b4:	4844      	ldr	r0, [pc, #272]	; (8004ac8 <menu+0x2e4c>)
 80049b6:	f005 fc99 	bl	800a2ec <HAL_GPIO_ReadPin>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d115      	bne.n	80049ec <menu+0x2d70>
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <menu+0x2e50>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f083 0301 	eor.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <menu+0x2d70>
			buzzer = buzzer + 1;
 80049ce:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <menu+0x2e64>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <menu+0x2e64>)
 80049d8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80049da:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <menu+0x2e64>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d902      	bls.n	80049e8 <menu+0x2d6c>
				buzzer = 0;
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <menu+0x2e64>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80049e8:	f001 fee6 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ec:	2104      	movs	r1, #4
 80049ee:	4836      	ldr	r0, [pc, #216]	; (8004ac8 <menu+0x2e4c>)
 80049f0:	f005 fc7c 	bl	800a2ec <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d115      	bne.n	8004a26 <menu+0x2daa>
 80049fa:	4b34      	ldr	r3, [pc, #208]	; (8004acc <menu+0x2e50>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <menu+0x2daa>
			buzzer = buzzer - 1;
 8004a08:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <menu+0x2e64>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <menu+0x2e64>)
 8004a12:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <menu+0x2e64>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <menu+0x2da6>
		   		buzzer = 1;
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <menu+0x2e64>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004a22:	f001 fec9 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a26:	2108      	movs	r1, #8
 8004a28:	4827      	ldr	r0, [pc, #156]	; (8004ac8 <menu+0x2e4c>)
 8004a2a:	f005 fc5f 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10d      	bne.n	8004a50 <menu+0x2dd4>
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <menu+0x2e50>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f083 0301 	eor.w	r3, r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d006      	beq.n	8004a50 <menu+0x2dd4>
			eepromData[25] = buzzer;
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <menu+0x2e64>)
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <menu+0x2e54>)
 8004a48:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004a4a:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <menu+0x2e58>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <menu+0x2e5c>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b1c      	cmp	r3, #28
 8004a56:	f040 80ab 	bne.w	8004bb0 <menu+0x2f34>
		calismaSayModu = 0;
 8004a5a:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <menu+0x2e78>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004a60:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <menu+0x2e7c>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7fb ffa5 	bl	80009b4 <lcd_print>

		if(demoMode == 0) {
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <menu+0x2e80>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d113      	bne.n	8004a9a <menu+0x2e1e>
			if(dilSecim == 0) {
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <menu+0x2e3c>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <menu+0x2e68>)
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	2002      	movs	r0, #2
 8004a80:	f7fb ff98 	bl	80009b4 <lcd_print>
 8004a84:	e045      	b.n	8004b12 <menu+0x2e96>
			} else if(dilSecim == 1) {
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <menu+0x2e3c>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d141      	bne.n	8004b12 <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 8004a8e:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <menu+0x2e6c>)
 8004a90:	2101      	movs	r1, #1
 8004a92:	2002      	movs	r0, #2
 8004a94:	f7fb ff8e 	bl	80009b4 <lcd_print>
 8004a98:	e03b      	b.n	8004b12 <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 8004a9a:	4b18      	ldr	r3, [pc, #96]	; (8004afc <menu+0x2e80>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d137      	bne.n	8004b12 <menu+0x2e96>
			if(dilSecim == 0){
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <menu+0x2e3c>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d12a      	bne.n	8004b00 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004aaa:	4a10      	ldr	r2, [pc, #64]	; (8004aec <menu+0x2e70>)
 8004aac:	2101      	movs	r1, #1
 8004aae:	2002      	movs	r0, #2
 8004ab0:	f7fb ff80 	bl	80009b4 <lcd_print>
 8004ab4:	e02d      	b.n	8004b12 <menu+0x2e96>
 8004ab6:	bf00      	nop
 8004ab8:	20000cbe 	.word	0x20000cbe
 8004abc:	0800e994 	.word	0x0800e994
 8004ac0:	20000cb5 	.word	0x20000cb5
 8004ac4:	20000bcc 	.word	0x20000bcc
 8004ac8:	40010800 	.word	0x40010800
 8004acc:	20000ccc 	.word	0x20000ccc
 8004ad0:	20000b38 	.word	0x20000b38
 8004ad4:	20000cc9 	.word	0x20000cc9
 8004ad8:	20000c9d 	.word	0x20000c9d
 8004adc:	0800ea94 	.word	0x0800ea94
 8004ae0:	20000cb9 	.word	0x20000cb9
 8004ae4:	0800e3bc 	.word	0x0800e3bc
 8004ae8:	0800e3d0 	.word	0x0800e3d0
 8004aec:	0800e41c 	.word	0x0800e41c
 8004af0:	0800e430 	.word	0x0800e430
 8004af4:	20000cbd 	.word	0x20000cbd
 8004af8:	0800eaa8 	.word	0x0800eaa8
 8004afc:	20000cbb 	.word	0x20000cbb
			} else if(dilSecim == 1) {
 8004b00:	4b71      	ldr	r3, [pc, #452]	; (8004cc8 <menu+0x304c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d104      	bne.n	8004b12 <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004b08:	4a70      	ldr	r2, [pc, #448]	; (8004ccc <menu+0x3050>)
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	2002      	movs	r0, #2
 8004b0e:	f7fb ff51 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b12:	2102      	movs	r1, #2
 8004b14:	486e      	ldr	r0, [pc, #440]	; (8004cd0 <menu+0x3054>)
 8004b16:	f005 fbe9 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d115      	bne.n	8004b4c <menu+0x2ed0>
 8004b20:	4b6c      	ldr	r3, [pc, #432]	; (8004cd4 <menu+0x3058>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f083 0301 	eor.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <menu+0x2ed0>
			demoMode = demoMode + 1;
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <menu+0x305c>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <menu+0x305c>)
 8004b38:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <menu+0x305c>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d902      	bls.n	8004b48 <menu+0x2ecc>
				demoMode = 0;
 8004b42:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <menu+0x305c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004b48:	f001 fe36 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4860      	ldr	r0, [pc, #384]	; (8004cd0 <menu+0x3054>)
 8004b50:	f005 fbcc 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d115      	bne.n	8004b86 <menu+0x2f0a>
 8004b5a:	4b5e      	ldr	r3, [pc, #376]	; (8004cd4 <menu+0x3058>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004b68:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <menu+0x305c>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <menu+0x305c>)
 8004b72:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004b74:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <menu+0x305c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <menu+0x2f06>
		   		demoMode = 1;
 8004b7c:	4b56      	ldr	r3, [pc, #344]	; (8004cd8 <menu+0x305c>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004b82:	f001 fe19 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b86:	2108      	movs	r1, #8
 8004b88:	4851      	ldr	r0, [pc, #324]	; (8004cd0 <menu+0x3054>)
 8004b8a:	f005 fbaf 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10d      	bne.n	8004bb0 <menu+0x2f34>
 8004b94:	4b4f      	ldr	r3, [pc, #316]	; (8004cd4 <menu+0x3058>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	f083 0301 	eor.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <menu+0x2f34>
			eepromData[26] = demoMode;
 8004ba2:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <menu+0x305c>)
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	4b4d      	ldr	r3, [pc, #308]	; (8004cdc <menu+0x3060>)
 8004ba8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004baa:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <menu+0x3064>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <menu+0x3068>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b1d      	cmp	r3, #29
 8004bb6:	f040 8132 	bne.w	8004e1e <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004bba:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <menu+0x306c>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d113      	bne.n	8004bea <menu+0x2f6e>
 8004bc2:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <menu+0x3070>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10f      	bne.n	8004bea <menu+0x2f6e>
 8004bca:	4b49      	ldr	r3, [pc, #292]	; (8004cf0 <menu+0x3074>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <menu+0x2f6e>
 8004bd2:	4b48      	ldr	r3, [pc, #288]	; (8004cf4 <menu+0x3078>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <menu+0x2f6e>
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <menu+0x307c>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <menu+0x2f6e>
			calismaSayisiYar = 0;
 8004be2:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <menu+0x3080>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e002      	b.n	8004bf0 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 8004bea:	4b44      	ldr	r3, [pc, #272]	; (8004cfc <menu+0x3080>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <menu+0x3084>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d154      	bne.n	8004ca2 <menu+0x3026>
			if(dilSecim == 0) {
 8004bf8:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <menu+0x304c>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004c00:	4a40      	ldr	r2, [pc, #256]	; (8004d04 <menu+0x3088>)
 8004c02:	2101      	movs	r1, #1
 8004c04:	2001      	movs	r0, #1
 8004c06:	f7fb fed5 	bl	80009b4 <lcd_print>
 8004c0a:	e008      	b.n	8004c1e <menu+0x2fa2>
			} else if(dilSecim == 1) {
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <menu+0x304c>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d104      	bne.n	8004c1e <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 8004c14:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <menu+0x308c>)
 8004c16:	2101      	movs	r1, #1
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fb fecb 	bl	80009b4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <menu+0x307c>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	220a      	movs	r2, #10
 8004c24:	4939      	ldr	r1, [pc, #228]	; (8004d0c <menu+0x3090>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f008 fbe8 	bl	800d3fc <itoa>
			lcd_print(2, 12, snum);
 8004c2c:	4a37      	ldr	r2, [pc, #220]	; (8004d0c <menu+0x3090>)
 8004c2e:	210c      	movs	r1, #12
 8004c30:	2002      	movs	r0, #2
 8004c32:	f7fb febf 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004c36:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <menu+0x3078>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	220a      	movs	r2, #10
 8004c3c:	4933      	ldr	r1, [pc, #204]	; (8004d0c <menu+0x3090>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f008 fbdc 	bl	800d3fc <itoa>
			lcd_print(2, 13, snum);
 8004c44:	4a31      	ldr	r2, [pc, #196]	; (8004d0c <menu+0x3090>)
 8004c46:	210d      	movs	r1, #13
 8004c48:	2002      	movs	r0, #2
 8004c4a:	f7fb feb3 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <menu+0x3074>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	220a      	movs	r2, #10
 8004c54:	492d      	ldr	r1, [pc, #180]	; (8004d0c <menu+0x3090>)
 8004c56:	4618      	mov	r0, r3
 8004c58:	f008 fbd0 	bl	800d3fc <itoa>
			lcd_print(2, 14, snum);
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <menu+0x3090>)
 8004c5e:	210e      	movs	r1, #14
 8004c60:	2002      	movs	r0, #2
 8004c62:	f7fb fea7 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004c66:	4b21      	ldr	r3, [pc, #132]	; (8004cec <menu+0x3070>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	220a      	movs	r2, #10
 8004c6c:	4927      	ldr	r1, [pc, #156]	; (8004d0c <menu+0x3090>)
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f008 fbc4 	bl	800d3fc <itoa>
			lcd_print(2, 15, snum);
 8004c74:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <menu+0x3090>)
 8004c76:	210f      	movs	r1, #15
 8004c78:	2002      	movs	r0, #2
 8004c7a:	f7fb fe9b 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <menu+0x306c>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	220a      	movs	r2, #10
 8004c84:	4921      	ldr	r1, [pc, #132]	; (8004d0c <menu+0x3090>)
 8004c86:	4618      	mov	r0, r3
 8004c88:	f008 fbb8 	bl	800d3fc <itoa>
			lcd_print(2, 16, snum);
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <menu+0x3090>)
 8004c8e:	2110      	movs	r1, #16
 8004c90:	2002      	movs	r0, #2
 8004c92:	f7fb fe8f 	bl	80009b4 <lcd_print>

			lcd_print(2, 1, "           ");
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <menu+0x3094>)
 8004c98:	2101      	movs	r1, #1
 8004c9a:	2002      	movs	r0, #2
 8004c9c:	f7fb fe8a 	bl	80009b4 <lcd_print>
 8004ca0:	e048      	b.n	8004d34 <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <menu+0x3084>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d144      	bne.n	8004d34 <menu+0x30b8>
			if(dilSecim == 0) {
 8004caa:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <menu+0x304c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d132      	bne.n	8004d18 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004cb2:	4a14      	ldr	r2, [pc, #80]	; (8004d04 <menu+0x3088>)
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f7fb fe7c 	bl	80009b4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004cbc:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <menu+0x3098>)
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	2002      	movs	r0, #2
 8004cc2:	f7fb fe77 	bl	80009b4 <lcd_print>
 8004cc6:	e035      	b.n	8004d34 <menu+0x30b8>
 8004cc8:	20000cbe 	.word	0x20000cbe
 8004ccc:	0800e430 	.word	0x0800e430
 8004cd0:	40010800 	.word	0x40010800
 8004cd4:	20000ccc 	.word	0x20000ccc
 8004cd8:	20000cbb 	.word	0x20000cbb
 8004cdc:	20000b38 	.word	0x20000b38
 8004ce0:	20000cc9 	.word	0x20000cc9
 8004ce4:	20000c9d 	.word	0x20000c9d
 8004ce8:	20000c9a 	.word	0x20000c9a
 8004cec:	20000c9b 	.word	0x20000c9b
 8004cf0:	200009c2 	.word	0x200009c2
 8004cf4:	200009c3 	.word	0x200009c3
 8004cf8:	20000c9c 	.word	0x20000c9c
 8004cfc:	20000cde 	.word	0x20000cde
 8004d00:	20000cbd 	.word	0x20000cbd
 8004d04:	0800eab8 	.word	0x0800eab8
 8004d08:	0800eacc 	.word	0x0800eacc
 8004d0c:	20000bcc 	.word	0x20000bcc
 8004d10:	0800eae0 	.word	0x0800eae0
 8004d14:	0800eaec 	.word	0x0800eaec
			} else if(dilSecim == 1) {
 8004d18:	4b94      	ldr	r3, [pc, #592]	; (8004f6c <menu+0x32f0>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d109      	bne.n	8004d34 <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004d20:	4a93      	ldr	r2, [pc, #588]	; (8004f70 <menu+0x32f4>)
 8004d22:	2101      	movs	r1, #1
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fb fe45 	bl	80009b4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004d2a:	4a92      	ldr	r2, [pc, #584]	; (8004f74 <menu+0x32f8>)
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	2002      	movs	r0, #2
 8004d30:	f7fb fe40 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004d34:	2102      	movs	r1, #2
 8004d36:	4890      	ldr	r0, [pc, #576]	; (8004f78 <menu+0x32fc>)
 8004d38:	f005 fad8 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d119      	bne.n	8004d76 <menu+0x30fa>
 8004d42:	4b8e      	ldr	r3, [pc, #568]	; (8004f7c <menu+0x3300>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	f083 0301 	eor.w	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d012      	beq.n	8004d76 <menu+0x30fa>
 8004d50:	4b8b      	ldr	r3, [pc, #556]	; (8004f80 <menu+0x3304>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00e      	beq.n	8004d76 <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004d58:	4b8a      	ldr	r3, [pc, #552]	; (8004f84 <menu+0x3308>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <menu+0x3308>)
 8004d62:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004d64:	4b87      	ldr	r3, [pc, #540]	; (8004f84 <menu+0x3308>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d902      	bls.n	8004d72 <menu+0x30f6>
				calismaSayModu = 0;
 8004d6c:	4b85      	ldr	r3, [pc, #532]	; (8004f84 <menu+0x3308>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004d72:	f001 fd21 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004d76:	2104      	movs	r1, #4
 8004d78:	487f      	ldr	r0, [pc, #508]	; (8004f78 <menu+0x32fc>)
 8004d7a:	f005 fab7 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d119      	bne.n	8004db8 <menu+0x313c>
 8004d84:	4b7d      	ldr	r3, [pc, #500]	; (8004f7c <menu+0x3300>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	f083 0301 	eor.w	r3, r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <menu+0x313c>
 8004d92:	4b7b      	ldr	r3, [pc, #492]	; (8004f80 <menu+0x3304>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 8004d9a:	4b7a      	ldr	r3, [pc, #488]	; (8004f84 <menu+0x3308>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4b78      	ldr	r3, [pc, #480]	; (8004f84 <menu+0x3308>)
 8004da4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004da6:	4b77      	ldr	r3, [pc, #476]	; (8004f84 <menu+0x3308>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <menu+0x3138>
		   		calismaSayModu = 1;
 8004dae:	4b75      	ldr	r3, [pc, #468]	; (8004f84 <menu+0x3308>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004db4:	f001 fd00 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004db8:	2108      	movs	r1, #8
 8004dba:	486f      	ldr	r0, [pc, #444]	; (8004f78 <menu+0x32fc>)
 8004dbc:	f005 fa96 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d12b      	bne.n	8004e1e <menu+0x31a2>
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <menu+0x3300>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f083 0301 	eor.w	r3, r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d024      	beq.n	8004e1e <menu+0x31a2>
			eepromData[32] = 0;
 8004dd4:	4b6c      	ldr	r3, [pc, #432]	; (8004f88 <menu+0x330c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004ddc:	4b6a      	ldr	r3, [pc, #424]	; (8004f88 <menu+0x330c>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004de2:	4b69      	ldr	r3, [pc, #420]	; (8004f88 <menu+0x330c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004de8:	4b67      	ldr	r3, [pc, #412]	; (8004f88 <menu+0x330c>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004dee:	4b66      	ldr	r3, [pc, #408]	; (8004f88 <menu+0x330c>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004df4:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <menu+0x3310>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004dfa:	4b65      	ldr	r3, [pc, #404]	; (8004f90 <menu+0x3314>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004e00:	4b64      	ldr	r3, [pc, #400]	; (8004f94 <menu+0x3318>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004e06:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <menu+0x331c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004e0c:	4b63      	ldr	r3, [pc, #396]	; (8004f9c <menu+0x3320>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004e12:	4b5c      	ldr	r3, [pc, #368]	; (8004f84 <menu+0x3308>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <menu+0x3324>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004e1e:	4b61      	ldr	r3, [pc, #388]	; (8004fa4 <menu+0x3328>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b1e      	cmp	r3, #30
 8004e24:	d16f      	bne.n	8004f06 <menu+0x328a>
		calismaSayModu = 0;
 8004e26:	4b57      	ldr	r3, [pc, #348]	; (8004f84 <menu+0x3308>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004e2c:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <menu+0x32f0>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004e34:	4a5c      	ldr	r2, [pc, #368]	; (8004fa8 <menu+0x332c>)
 8004e36:	2101      	movs	r1, #1
 8004e38:	2001      	movs	r0, #1
 8004e3a:	f7fb fdbb 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004e3e:	4a5b      	ldr	r2, [pc, #364]	; (8004fac <menu+0x3330>)
 8004e40:	2101      	movs	r1, #1
 8004e42:	2002      	movs	r0, #2
 8004e44:	f7fb fdb6 	bl	80009b4 <lcd_print>
 8004e48:	e00d      	b.n	8004e66 <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004e4a:	4b48      	ldr	r3, [pc, #288]	; (8004f6c <menu+0x32f0>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d109      	bne.n	8004e66 <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004e52:	4a57      	ldr	r2, [pc, #348]	; (8004fb0 <menu+0x3334>)
 8004e54:	2101      	movs	r1, #1
 8004e56:	2001      	movs	r0, #1
 8004e58:	f7fb fdac 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004e5c:	4a55      	ldr	r2, [pc, #340]	; (8004fb4 <menu+0x3338>)
 8004e5e:	2101      	movs	r1, #1
 8004e60:	2002      	movs	r0, #2
 8004e62:	f7fb fda7 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e66:	2102      	movs	r1, #2
 8004e68:	4843      	ldr	r0, [pc, #268]	; (8004f78 <menu+0x32fc>)
 8004e6a:	f005 fa3f 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d115      	bne.n	8004ea0 <menu+0x3224>
 8004e74:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <menu+0x3300>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f083 0301 	eor.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00e      	beq.n	8004ea0 <menu+0x3224>
			dilSecim = dilSecim + 1;
 8004e82:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <menu+0x32f0>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <menu+0x32f0>)
 8004e8c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004e8e:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <menu+0x32f0>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d902      	bls.n	8004e9c <menu+0x3220>
				dilSecim = 0;
 8004e96:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <menu+0x32f0>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004e9c:	f001 fc8c 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	4835      	ldr	r0, [pc, #212]	; (8004f78 <menu+0x32fc>)
 8004ea4:	f005 fa22 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d115      	bne.n	8004eda <menu+0x325e>
 8004eae:	4b33      	ldr	r3, [pc, #204]	; (8004f7c <menu+0x3300>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f083 0301 	eor.w	r3, r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <menu+0x325e>
			dilSecim = dilSecim - 1;
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <menu+0x32f0>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <menu+0x32f0>)
 8004ec6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004ec8:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <menu+0x32f0>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <menu+0x325a>
		   		dilSecim = 1;
 8004ed0:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <menu+0x32f0>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004ed6:	f001 fc6f 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004eda:	2108      	movs	r1, #8
 8004edc:	4826      	ldr	r0, [pc, #152]	; (8004f78 <menu+0x32fc>)
 8004ede:	f005 fa05 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10e      	bne.n	8004f06 <menu+0x328a>
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <menu+0x3300>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f083 0301 	eor.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <menu+0x328a>
			eepromData[33] = dilSecim;
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <menu+0x32f0>)
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <menu+0x330c>)
 8004efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <menu+0x3324>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <menu+0x3328>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b1f      	cmp	r3, #31
 8004f0c:	f040 80b7 	bne.w	800507e <menu+0x3402>
		calismaSayModu = 0;
 8004f10:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <menu+0x3308>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004f16:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <menu+0x333c>)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f7fb fd4a 	bl	80009b4 <lcd_print>

		if(iotMode == 0) {
 8004f20:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <menu+0x3340>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d113      	bne.n	8004f50 <menu+0x32d4>
			if(dilSecim == 0) {
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <menu+0x32f0>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <menu+0x3344>)
 8004f32:	2101      	movs	r1, #1
 8004f34:	2002      	movs	r0, #2
 8004f36:	f7fb fd3d 	bl	80009b4 <lcd_print>
 8004f3a:	e050      	b.n	8004fde <menu+0x3362>
			} else if(dilSecim == 1) {
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <menu+0x32f0>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d14c      	bne.n	8004fde <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <menu+0x3348>)
 8004f46:	2101      	movs	r1, #1
 8004f48:	2002      	movs	r0, #2
 8004f4a:	f7fb fd33 	bl	80009b4 <lcd_print>
 8004f4e:	e046      	b.n	8004fde <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <menu+0x3340>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d142      	bne.n	8004fde <menu+0x3362>
			if(dilSecim == 0){
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <menu+0x32f0>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d135      	bne.n	8004fcc <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <menu+0x334c>)
 8004f62:	2101      	movs	r1, #1
 8004f64:	2002      	movs	r0, #2
 8004f66:	f7fb fd25 	bl	80009b4 <lcd_print>
 8004f6a:	e038      	b.n	8004fde <menu+0x3362>
 8004f6c:	20000cbe 	.word	0x20000cbe
 8004f70:	0800eacc 	.word	0x0800eacc
 8004f74:	0800eb00 	.word	0x0800eb00
 8004f78:	40010800 	.word	0x40010800
 8004f7c:	20000ccc 	.word	0x20000ccc
 8004f80:	20000cde 	.word	0x20000cde
 8004f84:	20000cbd 	.word	0x20000cbd
 8004f88:	20000b38 	.word	0x20000b38
 8004f8c:	20000c9c 	.word	0x20000c9c
 8004f90:	200009c3 	.word	0x200009c3
 8004f94:	200009c2 	.word	0x200009c2
 8004f98:	20000c9b 	.word	0x20000c9b
 8004f9c:	20000c9a 	.word	0x20000c9a
 8004fa0:	20000cc9 	.word	0x20000cc9
 8004fa4:	20000c9d 	.word	0x20000c9d
 8004fa8:	0800eb14 	.word	0x0800eb14
 8004fac:	0800eb28 	.word	0x0800eb28
 8004fb0:	0800eb3c 	.word	0x0800eb3c
 8004fb4:	0800eb50 	.word	0x0800eb50
 8004fb8:	0800eb64 	.word	0x0800eb64
 8004fbc:	20000cbc 	.word	0x20000cbc
 8004fc0:	0800e3bc 	.word	0x0800e3bc
 8004fc4:	0800e3d0 	.word	0x0800e3d0
 8004fc8:	0800e41c 	.word	0x0800e41c
			} else if(dilSecim == 1) {
 8004fcc:	4bb0      	ldr	r3, [pc, #704]	; (8005290 <menu+0x3614>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d104      	bne.n	8004fde <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 8004fd4:	4aaf      	ldr	r2, [pc, #700]	; (8005294 <menu+0x3618>)
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	2002      	movs	r0, #2
 8004fda:	f7fb fceb 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004fde:	2102      	movs	r1, #2
 8004fe0:	48ad      	ldr	r0, [pc, #692]	; (8005298 <menu+0x361c>)
 8004fe2:	f005 f983 	bl	800a2ec <HAL_GPIO_ReadPin>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d115      	bne.n	8005018 <menu+0x339c>
 8004fec:	4bab      	ldr	r3, [pc, #684]	; (800529c <menu+0x3620>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f083 0301 	eor.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <menu+0x339c>
			iotMode = iotMode + 1;
 8004ffa:	4ba9      	ldr	r3, [pc, #676]	; (80052a0 <menu+0x3624>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4ba7      	ldr	r3, [pc, #668]	; (80052a0 <menu+0x3624>)
 8005004:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8005006:	4ba6      	ldr	r3, [pc, #664]	; (80052a0 <menu+0x3624>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d902      	bls.n	8005014 <menu+0x3398>
				iotMode = 0;
 800500e:	4ba4      	ldr	r3, [pc, #656]	; (80052a0 <menu+0x3624>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8005014:	f001 fbd0 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005018:	2104      	movs	r1, #4
 800501a:	489f      	ldr	r0, [pc, #636]	; (8005298 <menu+0x361c>)
 800501c:	f005 f966 	bl	800a2ec <HAL_GPIO_ReadPin>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d115      	bne.n	8005052 <menu+0x33d6>
 8005026:	4b9d      	ldr	r3, [pc, #628]	; (800529c <menu+0x3620>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f083 0301 	eor.w	r3, r3, #1
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00e      	beq.n	8005052 <menu+0x33d6>
			iotMode = iotMode - 1;
 8005034:	4b9a      	ldr	r3, [pc, #616]	; (80052a0 <menu+0x3624>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	4b98      	ldr	r3, [pc, #608]	; (80052a0 <menu+0x3624>)
 800503e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8005040:	4b97      	ldr	r3, [pc, #604]	; (80052a0 <menu+0x3624>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <menu+0x33d2>
		   		iotMode = 1;
 8005048:	4b95      	ldr	r3, [pc, #596]	; (80052a0 <menu+0x3624>)
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800504e:	f001 fbb3 	bl	80067b8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005052:	2108      	movs	r1, #8
 8005054:	4890      	ldr	r0, [pc, #576]	; (8005298 <menu+0x361c>)
 8005056:	f005 f949 	bl	800a2ec <HAL_GPIO_ReadPin>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10e      	bne.n	800507e <menu+0x3402>
 8005060:	4b8e      	ldr	r3, [pc, #568]	; (800529c <menu+0x3620>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f083 0301 	eor.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <menu+0x3402>
			eepromData[37] = iotMode;
 800506e:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <menu+0x3624>)
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	4b8c      	ldr	r3, [pc, #560]	; (80052a4 <menu+0x3628>)
 8005074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8005078:	4b8b      	ldr	r3, [pc, #556]	; (80052a8 <menu+0x362c>)
 800507a:	2201      	movs	r2, #1
 800507c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800507e:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <menu+0x3630>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b20      	cmp	r3, #32
 8005084:	d145      	bne.n	8005112 <menu+0x3496>
		calismaSayModu = 0;
 8005086:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <menu+0x3634>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 800508c:	4a89      	ldr	r2, [pc, #548]	; (80052b4 <menu+0x3638>)
 800508e:	2101      	movs	r1, #1
 8005090:	2001      	movs	r0, #1
 8005092:	f7fb fc8f 	bl	80009b4 <lcd_print>

		lcd_print(2, 1, machineID);
 8005096:	4a88      	ldr	r2, [pc, #544]	; (80052b8 <menu+0x363c>)
 8005098:	2101      	movs	r1, #1
 800509a:	2002      	movs	r0, #2
 800509c:	f7fb fc8a 	bl	80009b4 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80050a0:	4885      	ldr	r0, [pc, #532]	; (80052b8 <menu+0x363c>)
 80050a2:	f7fb f8bf 	bl	8000224 <strlen>
 80050a6:	4603      	mov	r3, r0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3301      	adds	r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	4a83      	ldr	r2, [pc, #524]	; (80052bc <menu+0x3640>)
 80050b0:	4619      	mov	r1, r3
 80050b2:	2002      	movs	r0, #2
 80050b4:	f7fb fc7e 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80050b8:	2102      	movs	r1, #2
 80050ba:	4877      	ldr	r0, [pc, #476]	; (8005298 <menu+0x361c>)
 80050bc:	f005 f916 	bl	800a2ec <HAL_GPIO_ReadPin>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d125      	bne.n	8005112 <menu+0x3496>
 80050c6:	2104      	movs	r1, #4
 80050c8:	4873      	ldr	r0, [pc, #460]	; (8005298 <menu+0x361c>)
 80050ca:	f005 f90f 	bl	800a2ec <HAL_GPIO_ReadPin>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d11e      	bne.n	8005112 <menu+0x3496>
 80050d4:	4b71      	ldr	r3, [pc, #452]	; (800529c <menu+0x3620>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f083 0301 	eor.w	r3, r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d017      	beq.n	8005112 <menu+0x3496>
			takeMachineID(0, &hi2c1);
 80050e2:	1d3b      	adds	r3, r7, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	2000      	movs	r0, #0
 80050e8:	f7fb ffc4 	bl	8001074 <takeMachineID>

			lcd_print(2, 1, machineID);
 80050ec:	4a72      	ldr	r2, [pc, #456]	; (80052b8 <menu+0x363c>)
 80050ee:	2101      	movs	r1, #1
 80050f0:	2002      	movs	r0, #2
 80050f2:	f7fb fc5f 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 80050f6:	4870      	ldr	r0, [pc, #448]	; (80052b8 <menu+0x363c>)
 80050f8:	f7fb f894 	bl	8000224 <strlen>
 80050fc:	4603      	mov	r3, r0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	3301      	adds	r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4a6d      	ldr	r2, [pc, #436]	; (80052bc <menu+0x3640>)
 8005106:	4619      	mov	r1, r3
 8005108:	2002      	movs	r0, #2
 800510a:	f7fb fc53 	bl	80009b4 <lcd_print>

			bekle();
 800510e:	f001 fb53 	bl	80067b8 <bekle>
		}
	}

	if (menuSayac == 33) {
 8005112:	4b66      	ldr	r3, [pc, #408]	; (80052ac <menu+0x3630>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b21      	cmp	r3, #33	; 0x21
 8005118:	d151      	bne.n	80051be <menu+0x3542>
		calismaSayModu = 0;
 800511a:	4b65      	ldr	r3, [pc, #404]	; (80052b0 <menu+0x3634>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8005120:	4a67      	ldr	r2, [pc, #412]	; (80052c0 <menu+0x3644>)
 8005122:	2101      	movs	r1, #1
 8005124:	2001      	movs	r0, #1
 8005126:	f7fb fc45 	bl	80009b4 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 800512a:	4866      	ldr	r0, [pc, #408]	; (80052c4 <menu+0x3648>)
 800512c:	f7fb f87a 	bl	8000224 <strlen>
 8005130:	4603      	mov	r3, r0
 8005132:	2b10      	cmp	r3, #16
 8005134:	d811      	bhi.n	800515a <menu+0x34de>
			lcd_print(2, 1, wifiSSID);
 8005136:	4a63      	ldr	r2, [pc, #396]	; (80052c4 <menu+0x3648>)
 8005138:	2101      	movs	r1, #1
 800513a:	2002      	movs	r0, #2
 800513c:	f7fb fc3a 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8005140:	4860      	ldr	r0, [pc, #384]	; (80052c4 <menu+0x3648>)
 8005142:	f7fb f86f 	bl	8000224 <strlen>
 8005146:	4603      	mov	r3, r0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3301      	adds	r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4a5b      	ldr	r2, [pc, #364]	; (80052bc <menu+0x3640>)
 8005150:	4619      	mov	r1, r3
 8005152:	2002      	movs	r0, #2
 8005154:	f7fb fc2e 	bl	80009b4 <lcd_print>
 8005158:	e004      	b.n	8005164 <menu+0x34e8>
		} else {
			slideText(wifiSSID, 1, 2);
 800515a:	2202      	movs	r2, #2
 800515c:	2101      	movs	r1, #1
 800515e:	4859      	ldr	r0, [pc, #356]	; (80052c4 <menu+0x3648>)
 8005160:	f7fc fd52 	bl	8001c08 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005164:	2102      	movs	r1, #2
 8005166:	484c      	ldr	r0, [pc, #304]	; (8005298 <menu+0x361c>)
 8005168:	f005 f8c0 	bl	800a2ec <HAL_GPIO_ReadPin>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d125      	bne.n	80051be <menu+0x3542>
 8005172:	2104      	movs	r1, #4
 8005174:	4848      	ldr	r0, [pc, #288]	; (8005298 <menu+0x361c>)
 8005176:	f005 f8b9 	bl	800a2ec <HAL_GPIO_ReadPin>
 800517a:	4603      	mov	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	d11e      	bne.n	80051be <menu+0x3542>
 8005180:	4b46      	ldr	r3, [pc, #280]	; (800529c <menu+0x3620>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f083 0301 	eor.w	r3, r3, #1
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d017      	beq.n	80051be <menu+0x3542>
			takeWifiSSID(0, &hi2c1);
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	4619      	mov	r1, r3
 8005192:	2000      	movs	r0, #0
 8005194:	f7fc f888 	bl	80012a8 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8005198:	4a4a      	ldr	r2, [pc, #296]	; (80052c4 <menu+0x3648>)
 800519a:	2101      	movs	r1, #1
 800519c:	2002      	movs	r0, #2
 800519e:	f7fb fc09 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80051a2:	4848      	ldr	r0, [pc, #288]	; (80052c4 <menu+0x3648>)
 80051a4:	f7fb f83e 	bl	8000224 <strlen>
 80051a8:	4603      	mov	r3, r0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	3301      	adds	r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4a42      	ldr	r2, [pc, #264]	; (80052bc <menu+0x3640>)
 80051b2:	4619      	mov	r1, r3
 80051b4:	2002      	movs	r0, #2
 80051b6:	f7fb fbfd 	bl	80009b4 <lcd_print>

			bekle();
 80051ba:	f001 fafd 	bl	80067b8 <bekle>
		}
	}

	if (menuSayac == 34) {
 80051be:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <menu+0x3630>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b22      	cmp	r3, #34	; 0x22
 80051c4:	d151      	bne.n	800526a <menu+0x35ee>
		calismaSayModu = 0;
 80051c6:	4b3a      	ldr	r3, [pc, #232]	; (80052b0 <menu+0x3634>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80051cc:	4a3e      	ldr	r2, [pc, #248]	; (80052c8 <menu+0x364c>)
 80051ce:	2101      	movs	r1, #1
 80051d0:	2001      	movs	r0, #1
 80051d2:	f7fb fbef 	bl	80009b4 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80051d6:	483d      	ldr	r0, [pc, #244]	; (80052cc <menu+0x3650>)
 80051d8:	f7fb f824 	bl	8000224 <strlen>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d811      	bhi.n	8005206 <menu+0x358a>
			lcd_print(2, 1, wifiPass);
 80051e2:	4a3a      	ldr	r2, [pc, #232]	; (80052cc <menu+0x3650>)
 80051e4:	2101      	movs	r1, #1
 80051e6:	2002      	movs	r0, #2
 80051e8:	f7fb fbe4 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80051ec:	4837      	ldr	r0, [pc, #220]	; (80052cc <menu+0x3650>)
 80051ee:	f7fb f819 	bl	8000224 <strlen>
 80051f2:	4603      	mov	r3, r0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	4a30      	ldr	r2, [pc, #192]	; (80052bc <menu+0x3640>)
 80051fc:	4619      	mov	r1, r3
 80051fe:	2002      	movs	r0, #2
 8005200:	f7fb fbd8 	bl	80009b4 <lcd_print>
 8005204:	e004      	b.n	8005210 <menu+0x3594>
		} else {
			slideText(wifiPass, 1, 2);
 8005206:	2202      	movs	r2, #2
 8005208:	2101      	movs	r1, #1
 800520a:	4830      	ldr	r0, [pc, #192]	; (80052cc <menu+0x3650>)
 800520c:	f7fc fcfc 	bl	8001c08 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005210:	2102      	movs	r1, #2
 8005212:	4821      	ldr	r0, [pc, #132]	; (8005298 <menu+0x361c>)
 8005214:	f005 f86a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d125      	bne.n	800526a <menu+0x35ee>
 800521e:	2104      	movs	r1, #4
 8005220:	481d      	ldr	r0, [pc, #116]	; (8005298 <menu+0x361c>)
 8005222:	f005 f863 	bl	800a2ec <HAL_GPIO_ReadPin>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11e      	bne.n	800526a <menu+0x35ee>
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <menu+0x3620>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d017      	beq.n	800526a <menu+0x35ee>
			takeWifiPass(0, &hi2c1);
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	4619      	mov	r1, r3
 800523e:	2000      	movs	r0, #0
 8005240:	f7fc f9ba 	bl	80015b8 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <menu+0x3650>)
 8005246:	2101      	movs	r1, #1
 8005248:	2002      	movs	r0, #2
 800524a:	f7fb fbb3 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 800524e:	481f      	ldr	r0, [pc, #124]	; (80052cc <menu+0x3650>)
 8005250:	f7fa ffe8 	bl	8000224 <strlen>
 8005254:	4603      	mov	r3, r0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	3301      	adds	r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	4a17      	ldr	r2, [pc, #92]	; (80052bc <menu+0x3640>)
 800525e:	4619      	mov	r1, r3
 8005260:	2002      	movs	r0, #2
 8005262:	f7fb fba7 	bl	80009b4 <lcd_print>

			bekle();
 8005266:	f001 faa7 	bl	80067b8 <bekle>
		}
	}

	if (menuSayac == 35) {
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <menu+0x3630>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b23      	cmp	r3, #35	; 0x23
 8005270:	d152      	bne.n	8005318 <menu+0x369c>
		if(dilSecim == 0) {
 8005272:	4b07      	ldr	r3, [pc, #28]	; (8005290 <menu+0x3614>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d12e      	bne.n	80052d8 <menu+0x365c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <menu+0x3654>)
 800527c:	2101      	movs	r1, #1
 800527e:	2001      	movs	r0, #1
 8005280:	f7fb fb98 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8005284:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <menu+0x3658>)
 8005286:	2101      	movs	r1, #1
 8005288:	2002      	movs	r0, #2
 800528a:	f7fb fb93 	bl	80009b4 <lcd_print>
 800528e:	e031      	b.n	80052f4 <menu+0x3678>
 8005290:	20000cbe 	.word	0x20000cbe
 8005294:	0800e430 	.word	0x0800e430
 8005298:	40010800 	.word	0x40010800
 800529c:	20000ccc 	.word	0x20000ccc
 80052a0:	20000cbc 	.word	0x20000cbc
 80052a4:	20000b38 	.word	0x20000b38
 80052a8:	20000cc9 	.word	0x20000cc9
 80052ac:	20000c9d 	.word	0x20000c9d
 80052b0:	20000cbd 	.word	0x20000cbd
 80052b4:	0800eb78 	.word	0x0800eb78
 80052b8:	20000bf4 	.word	0x20000bf4
 80052bc:	2000094c 	.word	0x2000094c
 80052c0:	0800eb8c 	.word	0x0800eb8c
 80052c4:	20000c00 	.word	0x20000c00
 80052c8:	0800eba0 	.word	0x0800eba0
 80052cc:	20000c24 	.word	0x20000c24
 80052d0:	0800ebb4 	.word	0x0800ebb4
 80052d4:	0800ebc8 	.word	0x0800ebc8
		} else if(dilSecim == 1) {
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <menu+0x36a4>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d109      	bne.n	80052f4 <menu+0x3678>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80052e0:	4a10      	ldr	r2, [pc, #64]	; (8005324 <menu+0x36a8>)
 80052e2:	2101      	movs	r1, #1
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fb fb65 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80052ea:	4a0f      	ldr	r2, [pc, #60]	; (8005328 <menu+0x36ac>)
 80052ec:	2101      	movs	r1, #1
 80052ee:	2002      	movs	r0, #2
 80052f0:	f7fb fb60 	bl	80009b4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80052f4:	2108      	movs	r1, #8
 80052f6:	480d      	ldr	r0, [pc, #52]	; (800532c <menu+0x36b0>)
 80052f8:	f004 fff8 	bl	800a2ec <HAL_GPIO_ReadPin>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10a      	bne.n	8005318 <menu+0x369c>
			menuGiris = 0;
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <menu+0x36b4>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8005308:	f7fb fb80 	bl	8000a0c <lcd_clear>
			HAL_Delay(500);
 800530c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005310:	f004 fa1c 	bl	800974c <HAL_Delay>
			NVIC_SystemReset();
 8005314:	f7fb fbc2 	bl	8000a9c <__NVIC_SystemReset>
		}
	}
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000cbe 	.word	0x20000cbe
 8005324:	0800ebdc 	.word	0x0800ebdc
 8005328:	0800ebf0 	.word	0x0800ebf0
 800532c:	40010800 	.word	0x40010800
 8005330:	20000cba 	.word	0x20000cba

08005334 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 800533e:	48a9      	ldr	r0, [pc, #676]	; (80055e4 <loadMenuTexts+0x2b0>)
 8005340:	f7fb fbc2 	bl	8000ac8 <copyText>
 8005344:	4603      	mov	r3, r0
 8005346:	4aa8      	ldr	r2, [pc, #672]	; (80055e8 <loadMenuTexts+0x2b4>)
 8005348:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 800534a:	48a8      	ldr	r0, [pc, #672]	; (80055ec <loadMenuTexts+0x2b8>)
 800534c:	f7fb fbbc 	bl	8000ac8 <copyText>
 8005350:	4603      	mov	r3, r0
 8005352:	4aa7      	ldr	r2, [pc, #668]	; (80055f0 <loadMenuTexts+0x2bc>)
 8005354:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8005356:	48a7      	ldr	r0, [pc, #668]	; (80055f4 <loadMenuTexts+0x2c0>)
 8005358:	f7fb fbb6 	bl	8000ac8 <copyText>
 800535c:	4603      	mov	r3, r0
 800535e:	4aa6      	ldr	r2, [pc, #664]	; (80055f8 <loadMenuTexts+0x2c4>)
 8005360:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8005362:	48a6      	ldr	r0, [pc, #664]	; (80055fc <loadMenuTexts+0x2c8>)
 8005364:	f7fb fbb0 	bl	8000ac8 <copyText>
 8005368:	4603      	mov	r3, r0
 800536a:	4aa5      	ldr	r2, [pc, #660]	; (8005600 <loadMenuTexts+0x2cc>)
 800536c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800536e:	48a5      	ldr	r0, [pc, #660]	; (8005604 <loadMenuTexts+0x2d0>)
 8005370:	f7fb fbaa 	bl	8000ac8 <copyText>
 8005374:	4603      	mov	r3, r0
 8005376:	4aa4      	ldr	r2, [pc, #656]	; (8005608 <loadMenuTexts+0x2d4>)
 8005378:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 800537a:	48a4      	ldr	r0, [pc, #656]	; (800560c <loadMenuTexts+0x2d8>)
 800537c:	f7fb fba4 	bl	8000ac8 <copyText>
 8005380:	4603      	mov	r3, r0
 8005382:	4aa3      	ldr	r2, [pc, #652]	; (8005610 <loadMenuTexts+0x2dc>)
 8005384:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8005386:	48a3      	ldr	r0, [pc, #652]	; (8005614 <loadMenuTexts+0x2e0>)
 8005388:	f7fb fb9e 	bl	8000ac8 <copyText>
 800538c:	4603      	mov	r3, r0
 800538e:	4aa2      	ldr	r2, [pc, #648]	; (8005618 <loadMenuTexts+0x2e4>)
 8005390:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 82d1 	bne.w	800593c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 800539a:	48a0      	ldr	r0, [pc, #640]	; (800561c <loadMenuTexts+0x2e8>)
 800539c:	f7fb fb94 	bl	8000ac8 <copyText>
 80053a0:	4603      	mov	r3, r0
 80053a2:	4a9f      	ldr	r2, [pc, #636]	; (8005620 <loadMenuTexts+0x2ec>)
 80053a4:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 80053a6:	489f      	ldr	r0, [pc, #636]	; (8005624 <loadMenuTexts+0x2f0>)
 80053a8:	f7fb fb8e 	bl	8000ac8 <copyText>
 80053ac:	4603      	mov	r3, r0
 80053ae:	4a9e      	ldr	r2, [pc, #632]	; (8005628 <loadMenuTexts+0x2f4>)
 80053b0:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 80053b2:	489e      	ldr	r0, [pc, #632]	; (800562c <loadMenuTexts+0x2f8>)
 80053b4:	f7fb fb88 	bl	8000ac8 <copyText>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a9d      	ldr	r2, [pc, #628]	; (8005630 <loadMenuTexts+0x2fc>)
 80053bc:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 80053be:	489d      	ldr	r0, [pc, #628]	; (8005634 <loadMenuTexts+0x300>)
 80053c0:	f7fb fb82 	bl	8000ac8 <copyText>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4a9c      	ldr	r2, [pc, #624]	; (8005638 <loadMenuTexts+0x304>)
 80053c8:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 80053ca:	489c      	ldr	r0, [pc, #624]	; (800563c <loadMenuTexts+0x308>)
 80053cc:	f7fb fb7c 	bl	8000ac8 <copyText>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4a9b      	ldr	r2, [pc, #620]	; (8005640 <loadMenuTexts+0x30c>)
 80053d4:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 80053d6:	489b      	ldr	r0, [pc, #620]	; (8005644 <loadMenuTexts+0x310>)
 80053d8:	f7fb fb76 	bl	8000ac8 <copyText>
 80053dc:	4603      	mov	r3, r0
 80053de:	4a9a      	ldr	r2, [pc, #616]	; (8005648 <loadMenuTexts+0x314>)
 80053e0:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 80053e2:	489a      	ldr	r0, [pc, #616]	; (800564c <loadMenuTexts+0x318>)
 80053e4:	f7fb fb70 	bl	8000ac8 <copyText>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4a99      	ldr	r2, [pc, #612]	; (8005650 <loadMenuTexts+0x31c>)
 80053ec:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 80053ee:	4899      	ldr	r0, [pc, #612]	; (8005654 <loadMenuTexts+0x320>)
 80053f0:	f7fb fb6a 	bl	8000ac8 <copyText>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a98      	ldr	r2, [pc, #608]	; (8005658 <loadMenuTexts+0x324>)
 80053f8:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 80053fa:	4898      	ldr	r0, [pc, #608]	; (800565c <loadMenuTexts+0x328>)
 80053fc:	f7fb fb64 	bl	8000ac8 <copyText>
 8005400:	4603      	mov	r3, r0
 8005402:	4a97      	ldr	r2, [pc, #604]	; (8005660 <loadMenuTexts+0x32c>)
 8005404:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8005406:	4897      	ldr	r0, [pc, #604]	; (8005664 <loadMenuTexts+0x330>)
 8005408:	f7fb fb5e 	bl	8000ac8 <copyText>
 800540c:	4603      	mov	r3, r0
 800540e:	4a96      	ldr	r2, [pc, #600]	; (8005668 <loadMenuTexts+0x334>)
 8005410:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8005412:	4896      	ldr	r0, [pc, #600]	; (800566c <loadMenuTexts+0x338>)
 8005414:	f7fb fb58 	bl	8000ac8 <copyText>
 8005418:	4603      	mov	r3, r0
 800541a:	4a95      	ldr	r2, [pc, #596]	; (8005670 <loadMenuTexts+0x33c>)
 800541c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 800541e:	4895      	ldr	r0, [pc, #596]	; (8005674 <loadMenuTexts+0x340>)
 8005420:	f7fb fb52 	bl	8000ac8 <copyText>
 8005424:	4603      	mov	r3, r0
 8005426:	4a94      	ldr	r2, [pc, #592]	; (8005678 <loadMenuTexts+0x344>)
 8005428:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 800542a:	4894      	ldr	r0, [pc, #592]	; (800567c <loadMenuTexts+0x348>)
 800542c:	f7fb fb4c 	bl	8000ac8 <copyText>
 8005430:	4603      	mov	r3, r0
 8005432:	4a93      	ldr	r2, [pc, #588]	; (8005680 <loadMenuTexts+0x34c>)
 8005434:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8005436:	4893      	ldr	r0, [pc, #588]	; (8005684 <loadMenuTexts+0x350>)
 8005438:	f7fb fb46 	bl	8000ac8 <copyText>
 800543c:	4603      	mov	r3, r0
 800543e:	4a92      	ldr	r2, [pc, #584]	; (8005688 <loadMenuTexts+0x354>)
 8005440:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8005442:	4892      	ldr	r0, [pc, #584]	; (800568c <loadMenuTexts+0x358>)
 8005444:	f7fb fb40 	bl	8000ac8 <copyText>
 8005448:	4603      	mov	r3, r0
 800544a:	4a91      	ldr	r2, [pc, #580]	; (8005690 <loadMenuTexts+0x35c>)
 800544c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 800544e:	4891      	ldr	r0, [pc, #580]	; (8005694 <loadMenuTexts+0x360>)
 8005450:	f7fb fb3a 	bl	8000ac8 <copyText>
 8005454:	4603      	mov	r3, r0
 8005456:	4a90      	ldr	r2, [pc, #576]	; (8005698 <loadMenuTexts+0x364>)
 8005458:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800545a:	4890      	ldr	r0, [pc, #576]	; (800569c <loadMenuTexts+0x368>)
 800545c:	f7fb fb34 	bl	8000ac8 <copyText>
 8005460:	4603      	mov	r3, r0
 8005462:	4a8f      	ldr	r2, [pc, #572]	; (80056a0 <loadMenuTexts+0x36c>)
 8005464:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8005466:	488f      	ldr	r0, [pc, #572]	; (80056a4 <loadMenuTexts+0x370>)
 8005468:	f7fb fb2e 	bl	8000ac8 <copyText>
 800546c:	4603      	mov	r3, r0
 800546e:	4a8e      	ldr	r2, [pc, #568]	; (80056a8 <loadMenuTexts+0x374>)
 8005470:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8005472:	488e      	ldr	r0, [pc, #568]	; (80056ac <loadMenuTexts+0x378>)
 8005474:	f7fb fb28 	bl	8000ac8 <copyText>
 8005478:	4603      	mov	r3, r0
 800547a:	4a8d      	ldr	r2, [pc, #564]	; (80056b0 <loadMenuTexts+0x37c>)
 800547c:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 800547e:	488d      	ldr	r0, [pc, #564]	; (80056b4 <loadMenuTexts+0x380>)
 8005480:	f7fb fb22 	bl	8000ac8 <copyText>
 8005484:	4603      	mov	r3, r0
 8005486:	4a8c      	ldr	r2, [pc, #560]	; (80056b8 <loadMenuTexts+0x384>)
 8005488:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 800548a:	488c      	ldr	r0, [pc, #560]	; (80056bc <loadMenuTexts+0x388>)
 800548c:	f7fb fb1c 	bl	8000ac8 <copyText>
 8005490:	4603      	mov	r3, r0
 8005492:	4a8b      	ldr	r2, [pc, #556]	; (80056c0 <loadMenuTexts+0x38c>)
 8005494:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8005496:	488b      	ldr	r0, [pc, #556]	; (80056c4 <loadMenuTexts+0x390>)
 8005498:	f7fb fb16 	bl	8000ac8 <copyText>
 800549c:	4603      	mov	r3, r0
 800549e:	4a8a      	ldr	r2, [pc, #552]	; (80056c8 <loadMenuTexts+0x394>)
 80054a0:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 80054a2:	488a      	ldr	r0, [pc, #552]	; (80056cc <loadMenuTexts+0x398>)
 80054a4:	f7fb fb10 	bl	8000ac8 <copyText>
 80054a8:	4603      	mov	r3, r0
 80054aa:	4a89      	ldr	r2, [pc, #548]	; (80056d0 <loadMenuTexts+0x39c>)
 80054ac:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 80054ae:	4889      	ldr	r0, [pc, #548]	; (80056d4 <loadMenuTexts+0x3a0>)
 80054b0:	f7fb fb0a 	bl	8000ac8 <copyText>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4a88      	ldr	r2, [pc, #544]	; (80056d8 <loadMenuTexts+0x3a4>)
 80054b8:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 80054ba:	4888      	ldr	r0, [pc, #544]	; (80056dc <loadMenuTexts+0x3a8>)
 80054bc:	f7fb fb04 	bl	8000ac8 <copyText>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4a87      	ldr	r2, [pc, #540]	; (80056e0 <loadMenuTexts+0x3ac>)
 80054c4:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 80054c6:	4887      	ldr	r0, [pc, #540]	; (80056e4 <loadMenuTexts+0x3b0>)
 80054c8:	f7fb fafe 	bl	8000ac8 <copyText>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4a86      	ldr	r2, [pc, #536]	; (80056e8 <loadMenuTexts+0x3b4>)
 80054d0:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 80054d2:	4886      	ldr	r0, [pc, #536]	; (80056ec <loadMenuTexts+0x3b8>)
 80054d4:	f7fb faf8 	bl	8000ac8 <copyText>
 80054d8:	4603      	mov	r3, r0
 80054da:	4a85      	ldr	r2, [pc, #532]	; (80056f0 <loadMenuTexts+0x3bc>)
 80054dc:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 80054de:	4885      	ldr	r0, [pc, #532]	; (80056f4 <loadMenuTexts+0x3c0>)
 80054e0:	f7fb faf2 	bl	8000ac8 <copyText>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4a84      	ldr	r2, [pc, #528]	; (80056f8 <loadMenuTexts+0x3c4>)
 80054e8:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 80054ea:	4884      	ldr	r0, [pc, #528]	; (80056fc <loadMenuTexts+0x3c8>)
 80054ec:	f7fb faec 	bl	8000ac8 <copyText>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4a83      	ldr	r2, [pc, #524]	; (8005700 <loadMenuTexts+0x3cc>)
 80054f4:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 80054f6:	4883      	ldr	r0, [pc, #524]	; (8005704 <loadMenuTexts+0x3d0>)
 80054f8:	f7fb fae6 	bl	8000ac8 <copyText>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4a82      	ldr	r2, [pc, #520]	; (8005708 <loadMenuTexts+0x3d4>)
 8005500:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8005502:	4882      	ldr	r0, [pc, #520]	; (800570c <loadMenuTexts+0x3d8>)
 8005504:	f7fb fae0 	bl	8000ac8 <copyText>
 8005508:	4603      	mov	r3, r0
 800550a:	4a81      	ldr	r2, [pc, #516]	; (8005710 <loadMenuTexts+0x3dc>)
 800550c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 800550e:	4881      	ldr	r0, [pc, #516]	; (8005714 <loadMenuTexts+0x3e0>)
 8005510:	f7fb fada 	bl	8000ac8 <copyText>
 8005514:	4603      	mov	r3, r0
 8005516:	4a80      	ldr	r2, [pc, #512]	; (8005718 <loadMenuTexts+0x3e4>)
 8005518:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 800551a:	4880      	ldr	r0, [pc, #512]	; (800571c <loadMenuTexts+0x3e8>)
 800551c:	f7fb fad4 	bl	8000ac8 <copyText>
 8005520:	4603      	mov	r3, r0
 8005522:	4a7f      	ldr	r2, [pc, #508]	; (8005720 <loadMenuTexts+0x3ec>)
 8005524:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8005526:	487f      	ldr	r0, [pc, #508]	; (8005724 <loadMenuTexts+0x3f0>)
 8005528:	f7fb face 	bl	8000ac8 <copyText>
 800552c:	4603      	mov	r3, r0
 800552e:	4a7e      	ldr	r2, [pc, #504]	; (8005728 <loadMenuTexts+0x3f4>)
 8005530:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8005532:	487e      	ldr	r0, [pc, #504]	; (800572c <loadMenuTexts+0x3f8>)
 8005534:	f7fb fac8 	bl	8000ac8 <copyText>
 8005538:	4603      	mov	r3, r0
 800553a:	4a7d      	ldr	r2, [pc, #500]	; (8005730 <loadMenuTexts+0x3fc>)
 800553c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 800553e:	487d      	ldr	r0, [pc, #500]	; (8005734 <loadMenuTexts+0x400>)
 8005540:	f7fb fac2 	bl	8000ac8 <copyText>
 8005544:	4603      	mov	r3, r0
 8005546:	4a7c      	ldr	r2, [pc, #496]	; (8005738 <loadMenuTexts+0x404>)
 8005548:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 800554a:	487c      	ldr	r0, [pc, #496]	; (800573c <loadMenuTexts+0x408>)
 800554c:	f7fb fabc 	bl	8000ac8 <copyText>
 8005550:	4603      	mov	r3, r0
 8005552:	4a7b      	ldr	r2, [pc, #492]	; (8005740 <loadMenuTexts+0x40c>)
 8005554:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8005556:	487b      	ldr	r0, [pc, #492]	; (8005744 <loadMenuTexts+0x410>)
 8005558:	f7fb fab6 	bl	8000ac8 <copyText>
 800555c:	4603      	mov	r3, r0
 800555e:	4a7a      	ldr	r2, [pc, #488]	; (8005748 <loadMenuTexts+0x414>)
 8005560:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8005562:	487a      	ldr	r0, [pc, #488]	; (800574c <loadMenuTexts+0x418>)
 8005564:	f7fb fab0 	bl	8000ac8 <copyText>
 8005568:	4603      	mov	r3, r0
 800556a:	4a79      	ldr	r2, [pc, #484]	; (8005750 <loadMenuTexts+0x41c>)
 800556c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 800556e:	4879      	ldr	r0, [pc, #484]	; (8005754 <loadMenuTexts+0x420>)
 8005570:	f7fb faaa 	bl	8000ac8 <copyText>
 8005574:	4603      	mov	r3, r0
 8005576:	4a78      	ldr	r2, [pc, #480]	; (8005758 <loadMenuTexts+0x424>)
 8005578:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 800557a:	4878      	ldr	r0, [pc, #480]	; (800575c <loadMenuTexts+0x428>)
 800557c:	f7fb faa4 	bl	8000ac8 <copyText>
 8005580:	4603      	mov	r3, r0
 8005582:	4a77      	ldr	r2, [pc, #476]	; (8005760 <loadMenuTexts+0x42c>)
 8005584:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8005586:	4877      	ldr	r0, [pc, #476]	; (8005764 <loadMenuTexts+0x430>)
 8005588:	f7fb fa9e 	bl	8000ac8 <copyText>
 800558c:	4603      	mov	r3, r0
 800558e:	4a76      	ldr	r2, [pc, #472]	; (8005768 <loadMenuTexts+0x434>)
 8005590:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8005592:	4876      	ldr	r0, [pc, #472]	; (800576c <loadMenuTexts+0x438>)
 8005594:	f7fb fa98 	bl	8000ac8 <copyText>
 8005598:	4603      	mov	r3, r0
 800559a:	4a75      	ldr	r2, [pc, #468]	; (8005770 <loadMenuTexts+0x43c>)
 800559c:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 800559e:	4875      	ldr	r0, [pc, #468]	; (8005774 <loadMenuTexts+0x440>)
 80055a0:	f7fb fa92 	bl	8000ac8 <copyText>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4a74      	ldr	r2, [pc, #464]	; (8005778 <loadMenuTexts+0x444>)
 80055a8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 80055aa:	4874      	ldr	r0, [pc, #464]	; (800577c <loadMenuTexts+0x448>)
 80055ac:	f7fb fa8c 	bl	8000ac8 <copyText>
 80055b0:	4603      	mov	r3, r0
 80055b2:	4a73      	ldr	r2, [pc, #460]	; (8005780 <loadMenuTexts+0x44c>)
 80055b4:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 80055b6:	4873      	ldr	r0, [pc, #460]	; (8005784 <loadMenuTexts+0x450>)
 80055b8:	f7fb fa86 	bl	8000ac8 <copyText>
 80055bc:	4603      	mov	r3, r0
 80055be:	4a72      	ldr	r2, [pc, #456]	; (8005788 <loadMenuTexts+0x454>)
 80055c0:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 80055c2:	4872      	ldr	r0, [pc, #456]	; (800578c <loadMenuTexts+0x458>)
 80055c4:	f7fb fa80 	bl	8000ac8 <copyText>
 80055c8:	4603      	mov	r3, r0
 80055ca:	4a71      	ldr	r2, [pc, #452]	; (8005790 <loadMenuTexts+0x45c>)
 80055cc:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 80055ce:	4871      	ldr	r0, [pc, #452]	; (8005794 <loadMenuTexts+0x460>)
 80055d0:	f7fb fa7a 	bl	8000ac8 <copyText>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a70      	ldr	r2, [pc, #448]	; (8005798 <loadMenuTexts+0x464>)
 80055d8:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 80055da:	4870      	ldr	r0, [pc, #448]	; (800579c <loadMenuTexts+0x468>)
 80055dc:	f7fb fa74 	bl	8000ac8 <copyText>
 80055e0:	4603      	mov	r3, r0
 80055e2:	e0dd      	b.n	80057a0 <loadMenuTexts+0x46c>
 80055e4:	20000000 	.word	0x20000000
 80055e8:	20000d04 	.word	0x20000d04
 80055ec:	20000010 	.word	0x20000010
 80055f0:	20000d08 	.word	0x20000d08
 80055f4:	20000020 	.word	0x20000020
 80055f8:	20000d60 	.word	0x20000d60
 80055fc:	20000030 	.word	0x20000030
 8005600:	20000d90 	.word	0x20000d90
 8005604:	20000040 	.word	0x20000040
 8005608:	20000d98 	.word	0x20000d98
 800560c:	20000050 	.word	0x20000050
 8005610:	20000e10 	.word	0x20000e10
 8005614:	20000060 	.word	0x20000060
 8005618:	20000e14 	.word	0x20000e14
 800561c:	20000070 	.word	0x20000070
 8005620:	20000d0c 	.word	0x20000d0c
 8005624:	20000080 	.word	0x20000080
 8005628:	20000d10 	.word	0x20000d10
 800562c:	20000090 	.word	0x20000090
 8005630:	20000d14 	.word	0x20000d14
 8005634:	200000a0 	.word	0x200000a0
 8005638:	20000d18 	.word	0x20000d18
 800563c:	200000b0 	.word	0x200000b0
 8005640:	20000d1c 	.word	0x20000d1c
 8005644:	200000c0 	.word	0x200000c0
 8005648:	20000d20 	.word	0x20000d20
 800564c:	200000d0 	.word	0x200000d0
 8005650:	20000d24 	.word	0x20000d24
 8005654:	200000e0 	.word	0x200000e0
 8005658:	20000d28 	.word	0x20000d28
 800565c:	200000f0 	.word	0x200000f0
 8005660:	20000d2c 	.word	0x20000d2c
 8005664:	20000100 	.word	0x20000100
 8005668:	20000d30 	.word	0x20000d30
 800566c:	20000110 	.word	0x20000110
 8005670:	20000d34 	.word	0x20000d34
 8005674:	20000120 	.word	0x20000120
 8005678:	20000d38 	.word	0x20000d38
 800567c:	20000130 	.word	0x20000130
 8005680:	20000d3c 	.word	0x20000d3c
 8005684:	20000140 	.word	0x20000140
 8005688:	20000d40 	.word	0x20000d40
 800568c:	20000150 	.word	0x20000150
 8005690:	20000d44 	.word	0x20000d44
 8005694:	20000160 	.word	0x20000160
 8005698:	20000d48 	.word	0x20000d48
 800569c:	20000170 	.word	0x20000170
 80056a0:	20000d4c 	.word	0x20000d4c
 80056a4:	20000180 	.word	0x20000180
 80056a8:	20000d50 	.word	0x20000d50
 80056ac:	20000190 	.word	0x20000190
 80056b0:	20000d54 	.word	0x20000d54
 80056b4:	200001a0 	.word	0x200001a0
 80056b8:	20000d58 	.word	0x20000d58
 80056bc:	200001b0 	.word	0x200001b0
 80056c0:	20000d5c 	.word	0x20000d5c
 80056c4:	200001c0 	.word	0x200001c0
 80056c8:	20000d64 	.word	0x20000d64
 80056cc:	200001d0 	.word	0x200001d0
 80056d0:	20000d68 	.word	0x20000d68
 80056d4:	200001e0 	.word	0x200001e0
 80056d8:	20000d6c 	.word	0x20000d6c
 80056dc:	200001f0 	.word	0x200001f0
 80056e0:	20000d70 	.word	0x20000d70
 80056e4:	20000200 	.word	0x20000200
 80056e8:	20000d74 	.word	0x20000d74
 80056ec:	20000210 	.word	0x20000210
 80056f0:	20000d78 	.word	0x20000d78
 80056f4:	20000220 	.word	0x20000220
 80056f8:	20000d7c 	.word	0x20000d7c
 80056fc:	20000230 	.word	0x20000230
 8005700:	20000d80 	.word	0x20000d80
 8005704:	20000240 	.word	0x20000240
 8005708:	20000d84 	.word	0x20000d84
 800570c:	20000250 	.word	0x20000250
 8005710:	20000d88 	.word	0x20000d88
 8005714:	20000260 	.word	0x20000260
 8005718:	20000d8c 	.word	0x20000d8c
 800571c:	20000270 	.word	0x20000270
 8005720:	20000d94 	.word	0x20000d94
 8005724:	20000280 	.word	0x20000280
 8005728:	20000d9c 	.word	0x20000d9c
 800572c:	20000290 	.word	0x20000290
 8005730:	20000da0 	.word	0x20000da0
 8005734:	200002a0 	.word	0x200002a0
 8005738:	20000da4 	.word	0x20000da4
 800573c:	200002b0 	.word	0x200002b0
 8005740:	20000da8 	.word	0x20000da8
 8005744:	200002c0 	.word	0x200002c0
 8005748:	20000dac 	.word	0x20000dac
 800574c:	200002d0 	.word	0x200002d0
 8005750:	20000db0 	.word	0x20000db0
 8005754:	200002e0 	.word	0x200002e0
 8005758:	20000db4 	.word	0x20000db4
 800575c:	200002f0 	.word	0x200002f0
 8005760:	20000db8 	.word	0x20000db8
 8005764:	20000300 	.word	0x20000300
 8005768:	20000dbc 	.word	0x20000dbc
 800576c:	20000310 	.word	0x20000310
 8005770:	20000dc0 	.word	0x20000dc0
 8005774:	20000320 	.word	0x20000320
 8005778:	20000dc4 	.word	0x20000dc4
 800577c:	20000330 	.word	0x20000330
 8005780:	20000dc8 	.word	0x20000dc8
 8005784:	20000340 	.word	0x20000340
 8005788:	20000dcc 	.word	0x20000dcc
 800578c:	20000350 	.word	0x20000350
 8005790:	20000dd0 	.word	0x20000dd0
 8005794:	20000360 	.word	0x20000360
 8005798:	20000dd4 	.word	0x20000dd4
 800579c:	20000370 	.word	0x20000370
 80057a0:	4a3d      	ldr	r2, [pc, #244]	; (8005898 <loadMenuTexts+0x564>)
 80057a2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80057a4:	483d      	ldr	r0, [pc, #244]	; (800589c <loadMenuTexts+0x568>)
 80057a6:	f7fb f98f 	bl	8000ac8 <copyText>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4a3c      	ldr	r2, [pc, #240]	; (80058a0 <loadMenuTexts+0x56c>)
 80057ae:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80057b0:	483c      	ldr	r0, [pc, #240]	; (80058a4 <loadMenuTexts+0x570>)
 80057b2:	f7fb f989 	bl	8000ac8 <copyText>
 80057b6:	4603      	mov	r3, r0
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <loadMenuTexts+0x574>)
 80057ba:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80057bc:	483b      	ldr	r0, [pc, #236]	; (80058ac <loadMenuTexts+0x578>)
 80057be:	f7fb f983 	bl	8000ac8 <copyText>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4a3a      	ldr	r2, [pc, #232]	; (80058b0 <loadMenuTexts+0x57c>)
 80057c6:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80057c8:	483a      	ldr	r0, [pc, #232]	; (80058b4 <loadMenuTexts+0x580>)
 80057ca:	f7fb f97d 	bl	8000ac8 <copyText>
 80057ce:	4603      	mov	r3, r0
 80057d0:	4a39      	ldr	r2, [pc, #228]	; (80058b8 <loadMenuTexts+0x584>)
 80057d2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 80057d4:	4839      	ldr	r0, [pc, #228]	; (80058bc <loadMenuTexts+0x588>)
 80057d6:	f7fb f977 	bl	8000ac8 <copyText>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a38      	ldr	r2, [pc, #224]	; (80058c0 <loadMenuTexts+0x58c>)
 80057de:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 80057e0:	4838      	ldr	r0, [pc, #224]	; (80058c4 <loadMenuTexts+0x590>)
 80057e2:	f7fb f971 	bl	8000ac8 <copyText>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4a37      	ldr	r2, [pc, #220]	; (80058c8 <loadMenuTexts+0x594>)
 80057ea:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 80057ec:	4837      	ldr	r0, [pc, #220]	; (80058cc <loadMenuTexts+0x598>)
 80057ee:	f7fb f96b 	bl	8000ac8 <copyText>
 80057f2:	4603      	mov	r3, r0
 80057f4:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <loadMenuTexts+0x59c>)
 80057f6:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 80057f8:	4836      	ldr	r0, [pc, #216]	; (80058d4 <loadMenuTexts+0x5a0>)
 80057fa:	f7fb f965 	bl	8000ac8 <copyText>
 80057fe:	4603      	mov	r3, r0
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <loadMenuTexts+0x5a4>)
 8005802:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005804:	4835      	ldr	r0, [pc, #212]	; (80058dc <loadMenuTexts+0x5a8>)
 8005806:	f7fb f95f 	bl	8000ac8 <copyText>
 800580a:	4603      	mov	r3, r0
 800580c:	4a34      	ldr	r2, [pc, #208]	; (80058e0 <loadMenuTexts+0x5ac>)
 800580e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005810:	4834      	ldr	r0, [pc, #208]	; (80058e4 <loadMenuTexts+0x5b0>)
 8005812:	f7fb f959 	bl	8000ac8 <copyText>
 8005816:	4603      	mov	r3, r0
 8005818:	4a33      	ldr	r2, [pc, #204]	; (80058e8 <loadMenuTexts+0x5b4>)
 800581a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800581c:	4833      	ldr	r0, [pc, #204]	; (80058ec <loadMenuTexts+0x5b8>)
 800581e:	f7fb f953 	bl	8000ac8 <copyText>
 8005822:	4603      	mov	r3, r0
 8005824:	4a32      	ldr	r2, [pc, #200]	; (80058f0 <loadMenuTexts+0x5bc>)
 8005826:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005828:	4832      	ldr	r0, [pc, #200]	; (80058f4 <loadMenuTexts+0x5c0>)
 800582a:	f7fb f94d 	bl	8000ac8 <copyText>
 800582e:	4603      	mov	r3, r0
 8005830:	4a31      	ldr	r2, [pc, #196]	; (80058f8 <loadMenuTexts+0x5c4>)
 8005832:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005834:	4831      	ldr	r0, [pc, #196]	; (80058fc <loadMenuTexts+0x5c8>)
 8005836:	f7fb f947 	bl	8000ac8 <copyText>
 800583a:	4603      	mov	r3, r0
 800583c:	4a30      	ldr	r2, [pc, #192]	; (8005900 <loadMenuTexts+0x5cc>)
 800583e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005840:	4830      	ldr	r0, [pc, #192]	; (8005904 <loadMenuTexts+0x5d0>)
 8005842:	f7fb f941 	bl	8000ac8 <copyText>
 8005846:	4603      	mov	r3, r0
 8005848:	4a2f      	ldr	r2, [pc, #188]	; (8005908 <loadMenuTexts+0x5d4>)
 800584a:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 800584c:	482f      	ldr	r0, [pc, #188]	; (800590c <loadMenuTexts+0x5d8>)
 800584e:	f7fb f93b 	bl	8000ac8 <copyText>
 8005852:	4603      	mov	r3, r0
 8005854:	4a2e      	ldr	r2, [pc, #184]	; (8005910 <loadMenuTexts+0x5dc>)
 8005856:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005858:	482e      	ldr	r0, [pc, #184]	; (8005914 <loadMenuTexts+0x5e0>)
 800585a:	f7fb f935 	bl	8000ac8 <copyText>
 800585e:	4603      	mov	r3, r0
 8005860:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <loadMenuTexts+0x5e4>)
 8005862:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005864:	482d      	ldr	r0, [pc, #180]	; (800591c <loadMenuTexts+0x5e8>)
 8005866:	f7fb f92f 	bl	8000ac8 <copyText>
 800586a:	4603      	mov	r3, r0
 800586c:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <loadMenuTexts+0x5ec>)
 800586e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005870:	482c      	ldr	r0, [pc, #176]	; (8005924 <loadMenuTexts+0x5f0>)
 8005872:	f7fb f929 	bl	8000ac8 <copyText>
 8005876:	4603      	mov	r3, r0
 8005878:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <loadMenuTexts+0x5f4>)
 800587a:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 800587c:	482b      	ldr	r0, [pc, #172]	; (800592c <loadMenuTexts+0x5f8>)
 800587e:	f7fb f923 	bl	8000ac8 <copyText>
 8005882:	4603      	mov	r3, r0
 8005884:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <loadMenuTexts+0x5fc>)
 8005886:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005888:	482a      	ldr	r0, [pc, #168]	; (8005934 <loadMenuTexts+0x600>)
 800588a:	f7fb f91d 	bl	8000ac8 <copyText>
 800588e:	4603      	mov	r3, r0
 8005890:	4a29      	ldr	r2, [pc, #164]	; (8005938 <loadMenuTexts+0x604>)
 8005892:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005894:	e2d3      	b.n	8005e3e <loadMenuTexts+0xb0a>
 8005896:	bf00      	nop
 8005898:	20000dd8 	.word	0x20000dd8
 800589c:	20000380 	.word	0x20000380
 80058a0:	20000ddc 	.word	0x20000ddc
 80058a4:	20000390 	.word	0x20000390
 80058a8:	20000de0 	.word	0x20000de0
 80058ac:	200003a0 	.word	0x200003a0
 80058b0:	20000de4 	.word	0x20000de4
 80058b4:	200003b0 	.word	0x200003b0
 80058b8:	20000de8 	.word	0x20000de8
 80058bc:	200003c0 	.word	0x200003c0
 80058c0:	20000dec 	.word	0x20000dec
 80058c4:	200003d0 	.word	0x200003d0
 80058c8:	20000df0 	.word	0x20000df0
 80058cc:	200003e0 	.word	0x200003e0
 80058d0:	20000df4 	.word	0x20000df4
 80058d4:	200003f0 	.word	0x200003f0
 80058d8:	20000df8 	.word	0x20000df8
 80058dc:	20000400 	.word	0x20000400
 80058e0:	20000dfc 	.word	0x20000dfc
 80058e4:	20000410 	.word	0x20000410
 80058e8:	20000e00 	.word	0x20000e00
 80058ec:	20000420 	.word	0x20000420
 80058f0:	20000e04 	.word	0x20000e04
 80058f4:	20000430 	.word	0x20000430
 80058f8:	20000e08 	.word	0x20000e08
 80058fc:	20000440 	.word	0x20000440
 8005900:	20000e0c 	.word	0x20000e0c
 8005904:	20000450 	.word	0x20000450
 8005908:	20000e18 	.word	0x20000e18
 800590c:	20000460 	.word	0x20000460
 8005910:	20000e1c 	.word	0x20000e1c
 8005914:	20000470 	.word	0x20000470
 8005918:	20000e20 	.word	0x20000e20
 800591c:	20000480 	.word	0x20000480
 8005920:	20000e24 	.word	0x20000e24
 8005924:	20000490 	.word	0x20000490
 8005928:	20000e28 	.word	0x20000e28
 800592c:	200004a0 	.word	0x200004a0
 8005930:	20000e2c 	.word	0x20000e2c
 8005934:	200004b0 	.word	0x200004b0
 8005938:	20000e30 	.word	0x20000e30
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800593c:	48a9      	ldr	r0, [pc, #676]	; (8005be4 <loadMenuTexts+0x8b0>)
 800593e:	f7fb f8c3 	bl	8000ac8 <copyText>
 8005942:	4603      	mov	r3, r0
 8005944:	4aa8      	ldr	r2, [pc, #672]	; (8005be8 <loadMenuTexts+0x8b4>)
 8005946:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005948:	48a8      	ldr	r0, [pc, #672]	; (8005bec <loadMenuTexts+0x8b8>)
 800594a:	f7fb f8bd 	bl	8000ac8 <copyText>
 800594e:	4603      	mov	r3, r0
 8005950:	4aa7      	ldr	r2, [pc, #668]	; (8005bf0 <loadMenuTexts+0x8bc>)
 8005952:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005954:	48a7      	ldr	r0, [pc, #668]	; (8005bf4 <loadMenuTexts+0x8c0>)
 8005956:	f7fb f8b7 	bl	8000ac8 <copyText>
 800595a:	4603      	mov	r3, r0
 800595c:	4aa6      	ldr	r2, [pc, #664]	; (8005bf8 <loadMenuTexts+0x8c4>)
 800595e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005960:	48a6      	ldr	r0, [pc, #664]	; (8005bfc <loadMenuTexts+0x8c8>)
 8005962:	f7fb f8b1 	bl	8000ac8 <copyText>
 8005966:	4603      	mov	r3, r0
 8005968:	4aa5      	ldr	r2, [pc, #660]	; (8005c00 <loadMenuTexts+0x8cc>)
 800596a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 800596c:	48a5      	ldr	r0, [pc, #660]	; (8005c04 <loadMenuTexts+0x8d0>)
 800596e:	f7fb f8ab 	bl	8000ac8 <copyText>
 8005972:	4603      	mov	r3, r0
 8005974:	4aa4      	ldr	r2, [pc, #656]	; (8005c08 <loadMenuTexts+0x8d4>)
 8005976:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005978:	48a4      	ldr	r0, [pc, #656]	; (8005c0c <loadMenuTexts+0x8d8>)
 800597a:	f7fb f8a5 	bl	8000ac8 <copyText>
 800597e:	4603      	mov	r3, r0
 8005980:	4aa3      	ldr	r2, [pc, #652]	; (8005c10 <loadMenuTexts+0x8dc>)
 8005982:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005984:	48a3      	ldr	r0, [pc, #652]	; (8005c14 <loadMenuTexts+0x8e0>)
 8005986:	f7fb f89f 	bl	8000ac8 <copyText>
 800598a:	4603      	mov	r3, r0
 800598c:	4aa2      	ldr	r2, [pc, #648]	; (8005c18 <loadMenuTexts+0x8e4>)
 800598e:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005990:	48a2      	ldr	r0, [pc, #648]	; (8005c1c <loadMenuTexts+0x8e8>)
 8005992:	f7fb f899 	bl	8000ac8 <copyText>
 8005996:	4603      	mov	r3, r0
 8005998:	4aa1      	ldr	r2, [pc, #644]	; (8005c20 <loadMenuTexts+0x8ec>)
 800599a:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 800599c:	48a1      	ldr	r0, [pc, #644]	; (8005c24 <loadMenuTexts+0x8f0>)
 800599e:	f7fb f893 	bl	8000ac8 <copyText>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4aa0      	ldr	r2, [pc, #640]	; (8005c28 <loadMenuTexts+0x8f4>)
 80059a6:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80059a8:	48a0      	ldr	r0, [pc, #640]	; (8005c2c <loadMenuTexts+0x8f8>)
 80059aa:	f7fb f88d 	bl	8000ac8 <copyText>
 80059ae:	4603      	mov	r3, r0
 80059b0:	4a9f      	ldr	r2, [pc, #636]	; (8005c30 <loadMenuTexts+0x8fc>)
 80059b2:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80059b4:	489f      	ldr	r0, [pc, #636]	; (8005c34 <loadMenuTexts+0x900>)
 80059b6:	f7fb f887 	bl	8000ac8 <copyText>
 80059ba:	4603      	mov	r3, r0
 80059bc:	4a9e      	ldr	r2, [pc, #632]	; (8005c38 <loadMenuTexts+0x904>)
 80059be:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80059c0:	489e      	ldr	r0, [pc, #632]	; (8005c3c <loadMenuTexts+0x908>)
 80059c2:	f7fb f881 	bl	8000ac8 <copyText>
 80059c6:	4603      	mov	r3, r0
 80059c8:	4a9d      	ldr	r2, [pc, #628]	; (8005c40 <loadMenuTexts+0x90c>)
 80059ca:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80059cc:	489d      	ldr	r0, [pc, #628]	; (8005c44 <loadMenuTexts+0x910>)
 80059ce:	f7fb f87b 	bl	8000ac8 <copyText>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a9c      	ldr	r2, [pc, #624]	; (8005c48 <loadMenuTexts+0x914>)
 80059d6:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80059d8:	489c      	ldr	r0, [pc, #624]	; (8005c4c <loadMenuTexts+0x918>)
 80059da:	f7fb f875 	bl	8000ac8 <copyText>
 80059de:	4603      	mov	r3, r0
 80059e0:	4a9b      	ldr	r2, [pc, #620]	; (8005c50 <loadMenuTexts+0x91c>)
 80059e2:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80059e4:	489b      	ldr	r0, [pc, #620]	; (8005c54 <loadMenuTexts+0x920>)
 80059e6:	f7fb f86f 	bl	8000ac8 <copyText>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4a9a      	ldr	r2, [pc, #616]	; (8005c58 <loadMenuTexts+0x924>)
 80059ee:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80059f0:	489a      	ldr	r0, [pc, #616]	; (8005c5c <loadMenuTexts+0x928>)
 80059f2:	f7fb f869 	bl	8000ac8 <copyText>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4a99      	ldr	r2, [pc, #612]	; (8005c60 <loadMenuTexts+0x92c>)
 80059fa:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80059fc:	4899      	ldr	r0, [pc, #612]	; (8005c64 <loadMenuTexts+0x930>)
 80059fe:	f7fb f863 	bl	8000ac8 <copyText>
 8005a02:	4603      	mov	r3, r0
 8005a04:	4a98      	ldr	r2, [pc, #608]	; (8005c68 <loadMenuTexts+0x934>)
 8005a06:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005a08:	4898      	ldr	r0, [pc, #608]	; (8005c6c <loadMenuTexts+0x938>)
 8005a0a:	f7fb f85d 	bl	8000ac8 <copyText>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4a97      	ldr	r2, [pc, #604]	; (8005c70 <loadMenuTexts+0x93c>)
 8005a12:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005a14:	4897      	ldr	r0, [pc, #604]	; (8005c74 <loadMenuTexts+0x940>)
 8005a16:	f7fb f857 	bl	8000ac8 <copyText>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4a96      	ldr	r2, [pc, #600]	; (8005c78 <loadMenuTexts+0x944>)
 8005a1e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005a20:	4896      	ldr	r0, [pc, #600]	; (8005c7c <loadMenuTexts+0x948>)
 8005a22:	f7fb f851 	bl	8000ac8 <copyText>
 8005a26:	4603      	mov	r3, r0
 8005a28:	4a95      	ldr	r2, [pc, #596]	; (8005c80 <loadMenuTexts+0x94c>)
 8005a2a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005a2c:	4895      	ldr	r0, [pc, #596]	; (8005c84 <loadMenuTexts+0x950>)
 8005a2e:	f7fb f84b 	bl	8000ac8 <copyText>
 8005a32:	4603      	mov	r3, r0
 8005a34:	4a94      	ldr	r2, [pc, #592]	; (8005c88 <loadMenuTexts+0x954>)
 8005a36:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005a38:	4894      	ldr	r0, [pc, #592]	; (8005c8c <loadMenuTexts+0x958>)
 8005a3a:	f7fb f845 	bl	8000ac8 <copyText>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a93      	ldr	r2, [pc, #588]	; (8005c90 <loadMenuTexts+0x95c>)
 8005a42:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005a44:	4893      	ldr	r0, [pc, #588]	; (8005c94 <loadMenuTexts+0x960>)
 8005a46:	f7fb f83f 	bl	8000ac8 <copyText>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4a92      	ldr	r2, [pc, #584]	; (8005c98 <loadMenuTexts+0x964>)
 8005a4e:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005a50:	4892      	ldr	r0, [pc, #584]	; (8005c9c <loadMenuTexts+0x968>)
 8005a52:	f7fb f839 	bl	8000ac8 <copyText>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a91      	ldr	r2, [pc, #580]	; (8005ca0 <loadMenuTexts+0x96c>)
 8005a5a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005a5c:	4891      	ldr	r0, [pc, #580]	; (8005ca4 <loadMenuTexts+0x970>)
 8005a5e:	f7fb f833 	bl	8000ac8 <copyText>
 8005a62:	4603      	mov	r3, r0
 8005a64:	4a90      	ldr	r2, [pc, #576]	; (8005ca8 <loadMenuTexts+0x974>)
 8005a66:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005a68:	4890      	ldr	r0, [pc, #576]	; (8005cac <loadMenuTexts+0x978>)
 8005a6a:	f7fb f82d 	bl	8000ac8 <copyText>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4a8f      	ldr	r2, [pc, #572]	; (8005cb0 <loadMenuTexts+0x97c>)
 8005a72:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005a74:	488f      	ldr	r0, [pc, #572]	; (8005cb4 <loadMenuTexts+0x980>)
 8005a76:	f7fb f827 	bl	8000ac8 <copyText>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4a8e      	ldr	r2, [pc, #568]	; (8005cb8 <loadMenuTexts+0x984>)
 8005a7e:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005a80:	488e      	ldr	r0, [pc, #568]	; (8005cbc <loadMenuTexts+0x988>)
 8005a82:	f7fb f821 	bl	8000ac8 <copyText>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a8d      	ldr	r2, [pc, #564]	; (8005cc0 <loadMenuTexts+0x98c>)
 8005a8a:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005a8c:	488d      	ldr	r0, [pc, #564]	; (8005cc4 <loadMenuTexts+0x990>)
 8005a8e:	f7fb f81b 	bl	8000ac8 <copyText>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4a8c      	ldr	r2, [pc, #560]	; (8005cc8 <loadMenuTexts+0x994>)
 8005a96:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005a98:	488c      	ldr	r0, [pc, #560]	; (8005ccc <loadMenuTexts+0x998>)
 8005a9a:	f7fb f815 	bl	8000ac8 <copyText>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4a8b      	ldr	r2, [pc, #556]	; (8005cd0 <loadMenuTexts+0x99c>)
 8005aa2:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005aa4:	488b      	ldr	r0, [pc, #556]	; (8005cd4 <loadMenuTexts+0x9a0>)
 8005aa6:	f7fb f80f 	bl	8000ac8 <copyText>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4a8a      	ldr	r2, [pc, #552]	; (8005cd8 <loadMenuTexts+0x9a4>)
 8005aae:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005ab0:	488a      	ldr	r0, [pc, #552]	; (8005cdc <loadMenuTexts+0x9a8>)
 8005ab2:	f7fb f809 	bl	8000ac8 <copyText>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4a89      	ldr	r2, [pc, #548]	; (8005ce0 <loadMenuTexts+0x9ac>)
 8005aba:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005abc:	4889      	ldr	r0, [pc, #548]	; (8005ce4 <loadMenuTexts+0x9b0>)
 8005abe:	f7fb f803 	bl	8000ac8 <copyText>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4a88      	ldr	r2, [pc, #544]	; (8005ce8 <loadMenuTexts+0x9b4>)
 8005ac6:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005ac8:	4888      	ldr	r0, [pc, #544]	; (8005cec <loadMenuTexts+0x9b8>)
 8005aca:	f7fa fffd 	bl	8000ac8 <copyText>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4a87      	ldr	r2, [pc, #540]	; (8005cf0 <loadMenuTexts+0x9bc>)
 8005ad2:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005ad4:	4887      	ldr	r0, [pc, #540]	; (8005cf4 <loadMenuTexts+0x9c0>)
 8005ad6:	f7fa fff7 	bl	8000ac8 <copyText>
 8005ada:	4603      	mov	r3, r0
 8005adc:	4a86      	ldr	r2, [pc, #536]	; (8005cf8 <loadMenuTexts+0x9c4>)
 8005ade:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005ae0:	4886      	ldr	r0, [pc, #536]	; (8005cfc <loadMenuTexts+0x9c8>)
 8005ae2:	f7fa fff1 	bl	8000ac8 <copyText>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4a85      	ldr	r2, [pc, #532]	; (8005d00 <loadMenuTexts+0x9cc>)
 8005aea:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005aec:	4885      	ldr	r0, [pc, #532]	; (8005d04 <loadMenuTexts+0x9d0>)
 8005aee:	f7fa ffeb 	bl	8000ac8 <copyText>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4a84      	ldr	r2, [pc, #528]	; (8005d08 <loadMenuTexts+0x9d4>)
 8005af6:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005af8:	4884      	ldr	r0, [pc, #528]	; (8005d0c <loadMenuTexts+0x9d8>)
 8005afa:	f7fa ffe5 	bl	8000ac8 <copyText>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4a83      	ldr	r2, [pc, #524]	; (8005d10 <loadMenuTexts+0x9dc>)
 8005b02:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005b04:	4883      	ldr	r0, [pc, #524]	; (8005d14 <loadMenuTexts+0x9e0>)
 8005b06:	f7fa ffdf 	bl	8000ac8 <copyText>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4a82      	ldr	r2, [pc, #520]	; (8005d18 <loadMenuTexts+0x9e4>)
 8005b0e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005b10:	4882      	ldr	r0, [pc, #520]	; (8005d1c <loadMenuTexts+0x9e8>)
 8005b12:	f7fa ffd9 	bl	8000ac8 <copyText>
 8005b16:	4603      	mov	r3, r0
 8005b18:	4a81      	ldr	r2, [pc, #516]	; (8005d20 <loadMenuTexts+0x9ec>)
 8005b1a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005b1c:	4881      	ldr	r0, [pc, #516]	; (8005d24 <loadMenuTexts+0x9f0>)
 8005b1e:	f7fa ffd3 	bl	8000ac8 <copyText>
 8005b22:	4603      	mov	r3, r0
 8005b24:	4a80      	ldr	r2, [pc, #512]	; (8005d28 <loadMenuTexts+0x9f4>)
 8005b26:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005b28:	4880      	ldr	r0, [pc, #512]	; (8005d2c <loadMenuTexts+0x9f8>)
 8005b2a:	f7fa ffcd 	bl	8000ac8 <copyText>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4a7f      	ldr	r2, [pc, #508]	; (8005d30 <loadMenuTexts+0x9fc>)
 8005b32:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005b34:	487f      	ldr	r0, [pc, #508]	; (8005d34 <loadMenuTexts+0xa00>)
 8005b36:	f7fa ffc7 	bl	8000ac8 <copyText>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4a7e      	ldr	r2, [pc, #504]	; (8005d38 <loadMenuTexts+0xa04>)
 8005b3e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005b40:	487e      	ldr	r0, [pc, #504]	; (8005d3c <loadMenuTexts+0xa08>)
 8005b42:	f7fa ffc1 	bl	8000ac8 <copyText>
 8005b46:	4603      	mov	r3, r0
 8005b48:	4a7d      	ldr	r2, [pc, #500]	; (8005d40 <loadMenuTexts+0xa0c>)
 8005b4a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005b4c:	487d      	ldr	r0, [pc, #500]	; (8005d44 <loadMenuTexts+0xa10>)
 8005b4e:	f7fa ffbb 	bl	8000ac8 <copyText>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4a7c      	ldr	r2, [pc, #496]	; (8005d48 <loadMenuTexts+0xa14>)
 8005b56:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005b58:	487c      	ldr	r0, [pc, #496]	; (8005d4c <loadMenuTexts+0xa18>)
 8005b5a:	f7fa ffb5 	bl	8000ac8 <copyText>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4a7b      	ldr	r2, [pc, #492]	; (8005d50 <loadMenuTexts+0xa1c>)
 8005b62:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005b64:	487b      	ldr	r0, [pc, #492]	; (8005d54 <loadMenuTexts+0xa20>)
 8005b66:	f7fa ffaf 	bl	8000ac8 <copyText>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4a7a      	ldr	r2, [pc, #488]	; (8005d58 <loadMenuTexts+0xa24>)
 8005b6e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005b70:	487a      	ldr	r0, [pc, #488]	; (8005d5c <loadMenuTexts+0xa28>)
 8005b72:	f7fa ffa9 	bl	8000ac8 <copyText>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a79      	ldr	r2, [pc, #484]	; (8005d60 <loadMenuTexts+0xa2c>)
 8005b7a:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005b7c:	4879      	ldr	r0, [pc, #484]	; (8005d64 <loadMenuTexts+0xa30>)
 8005b7e:	f7fa ffa3 	bl	8000ac8 <copyText>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4a78      	ldr	r2, [pc, #480]	; (8005d68 <loadMenuTexts+0xa34>)
 8005b86:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005b88:	4878      	ldr	r0, [pc, #480]	; (8005d6c <loadMenuTexts+0xa38>)
 8005b8a:	f7fa ff9d 	bl	8000ac8 <copyText>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4a77      	ldr	r2, [pc, #476]	; (8005d70 <loadMenuTexts+0xa3c>)
 8005b92:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005b94:	4877      	ldr	r0, [pc, #476]	; (8005d74 <loadMenuTexts+0xa40>)
 8005b96:	f7fa ff97 	bl	8000ac8 <copyText>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4a76      	ldr	r2, [pc, #472]	; (8005d78 <loadMenuTexts+0xa44>)
 8005b9e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005ba0:	4876      	ldr	r0, [pc, #472]	; (8005d7c <loadMenuTexts+0xa48>)
 8005ba2:	f7fa ff91 	bl	8000ac8 <copyText>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4a75      	ldr	r2, [pc, #468]	; (8005d80 <loadMenuTexts+0xa4c>)
 8005baa:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005bac:	4875      	ldr	r0, [pc, #468]	; (8005d84 <loadMenuTexts+0xa50>)
 8005bae:	f7fa ff8b 	bl	8000ac8 <copyText>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4a74      	ldr	r2, [pc, #464]	; (8005d88 <loadMenuTexts+0xa54>)
 8005bb6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005bb8:	4874      	ldr	r0, [pc, #464]	; (8005d8c <loadMenuTexts+0xa58>)
 8005bba:	f7fa ff85 	bl	8000ac8 <copyText>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4a73      	ldr	r2, [pc, #460]	; (8005d90 <loadMenuTexts+0xa5c>)
 8005bc2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005bc4:	4873      	ldr	r0, [pc, #460]	; (8005d94 <loadMenuTexts+0xa60>)
 8005bc6:	f7fa ff7f 	bl	8000ac8 <copyText>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4a72      	ldr	r2, [pc, #456]	; (8005d98 <loadMenuTexts+0xa64>)
 8005bce:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005bd0:	4872      	ldr	r0, [pc, #456]	; (8005d9c <loadMenuTexts+0xa68>)
 8005bd2:	f7fa ff79 	bl	8000ac8 <copyText>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4a71      	ldr	r2, [pc, #452]	; (8005da0 <loadMenuTexts+0xa6c>)
 8005bda:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005bdc:	4871      	ldr	r0, [pc, #452]	; (8005da4 <loadMenuTexts+0xa70>)
 8005bde:	f7fa ff73 	bl	8000ac8 <copyText>
 8005be2:	e0e1      	b.n	8005da8 <loadMenuTexts+0xa74>
 8005be4:	200004c0 	.word	0x200004c0
 8005be8:	20000d0c 	.word	0x20000d0c
 8005bec:	200004d0 	.word	0x200004d0
 8005bf0:	20000d10 	.word	0x20000d10
 8005bf4:	200004e0 	.word	0x200004e0
 8005bf8:	20000d14 	.word	0x20000d14
 8005bfc:	200004f0 	.word	0x200004f0
 8005c00:	20000d18 	.word	0x20000d18
 8005c04:	20000500 	.word	0x20000500
 8005c08:	20000d1c 	.word	0x20000d1c
 8005c0c:	20000510 	.word	0x20000510
 8005c10:	20000d20 	.word	0x20000d20
 8005c14:	20000520 	.word	0x20000520
 8005c18:	20000d24 	.word	0x20000d24
 8005c1c:	20000530 	.word	0x20000530
 8005c20:	20000d28 	.word	0x20000d28
 8005c24:	20000540 	.word	0x20000540
 8005c28:	20000d2c 	.word	0x20000d2c
 8005c2c:	20000550 	.word	0x20000550
 8005c30:	20000d30 	.word	0x20000d30
 8005c34:	20000560 	.word	0x20000560
 8005c38:	20000d34 	.word	0x20000d34
 8005c3c:	20000570 	.word	0x20000570
 8005c40:	20000d38 	.word	0x20000d38
 8005c44:	20000580 	.word	0x20000580
 8005c48:	20000d3c 	.word	0x20000d3c
 8005c4c:	20000590 	.word	0x20000590
 8005c50:	20000d40 	.word	0x20000d40
 8005c54:	200005a0 	.word	0x200005a0
 8005c58:	20000d44 	.word	0x20000d44
 8005c5c:	200005b0 	.word	0x200005b0
 8005c60:	20000d48 	.word	0x20000d48
 8005c64:	200005c0 	.word	0x200005c0
 8005c68:	20000d4c 	.word	0x20000d4c
 8005c6c:	200005d0 	.word	0x200005d0
 8005c70:	20000d50 	.word	0x20000d50
 8005c74:	200005e0 	.word	0x200005e0
 8005c78:	20000d54 	.word	0x20000d54
 8005c7c:	200005f0 	.word	0x200005f0
 8005c80:	20000d58 	.word	0x20000d58
 8005c84:	20000600 	.word	0x20000600
 8005c88:	20000d5c 	.word	0x20000d5c
 8005c8c:	20000610 	.word	0x20000610
 8005c90:	20000d64 	.word	0x20000d64
 8005c94:	20000620 	.word	0x20000620
 8005c98:	20000d68 	.word	0x20000d68
 8005c9c:	20000630 	.word	0x20000630
 8005ca0:	20000d6c 	.word	0x20000d6c
 8005ca4:	20000640 	.word	0x20000640
 8005ca8:	20000d70 	.word	0x20000d70
 8005cac:	20000650 	.word	0x20000650
 8005cb0:	20000d74 	.word	0x20000d74
 8005cb4:	20000660 	.word	0x20000660
 8005cb8:	20000d78 	.word	0x20000d78
 8005cbc:	20000670 	.word	0x20000670
 8005cc0:	20000d7c 	.word	0x20000d7c
 8005cc4:	20000680 	.word	0x20000680
 8005cc8:	20000d80 	.word	0x20000d80
 8005ccc:	20000690 	.word	0x20000690
 8005cd0:	20000d84 	.word	0x20000d84
 8005cd4:	200006a0 	.word	0x200006a0
 8005cd8:	20000d88 	.word	0x20000d88
 8005cdc:	200006b0 	.word	0x200006b0
 8005ce0:	20000d8c 	.word	0x20000d8c
 8005ce4:	200006c0 	.word	0x200006c0
 8005ce8:	20000d94 	.word	0x20000d94
 8005cec:	200006d0 	.word	0x200006d0
 8005cf0:	20000d9c 	.word	0x20000d9c
 8005cf4:	200006e0 	.word	0x200006e0
 8005cf8:	20000da0 	.word	0x20000da0
 8005cfc:	200006f0 	.word	0x200006f0
 8005d00:	20000da4 	.word	0x20000da4
 8005d04:	20000700 	.word	0x20000700
 8005d08:	20000da8 	.word	0x20000da8
 8005d0c:	20000710 	.word	0x20000710
 8005d10:	20000dac 	.word	0x20000dac
 8005d14:	20000720 	.word	0x20000720
 8005d18:	20000db0 	.word	0x20000db0
 8005d1c:	20000730 	.word	0x20000730
 8005d20:	20000db4 	.word	0x20000db4
 8005d24:	20000740 	.word	0x20000740
 8005d28:	20000db8 	.word	0x20000db8
 8005d2c:	20000750 	.word	0x20000750
 8005d30:	20000dbc 	.word	0x20000dbc
 8005d34:	20000760 	.word	0x20000760
 8005d38:	20000dc0 	.word	0x20000dc0
 8005d3c:	20000770 	.word	0x20000770
 8005d40:	20000dc4 	.word	0x20000dc4
 8005d44:	20000780 	.word	0x20000780
 8005d48:	20000dc8 	.word	0x20000dc8
 8005d4c:	20000790 	.word	0x20000790
 8005d50:	20000dcc 	.word	0x20000dcc
 8005d54:	200007a0 	.word	0x200007a0
 8005d58:	20000dd0 	.word	0x20000dd0
 8005d5c:	200007b0 	.word	0x200007b0
 8005d60:	20000dd4 	.word	0x20000dd4
 8005d64:	200007c0 	.word	0x200007c0
 8005d68:	20000dd8 	.word	0x20000dd8
 8005d6c:	200007d0 	.word	0x200007d0
 8005d70:	20000ddc 	.word	0x20000ddc
 8005d74:	200007e0 	.word	0x200007e0
 8005d78:	20000de0 	.word	0x20000de0
 8005d7c:	200007f0 	.word	0x200007f0
 8005d80:	20000de4 	.word	0x20000de4
 8005d84:	20000800 	.word	0x20000800
 8005d88:	20000de8 	.word	0x20000de8
 8005d8c:	20000810 	.word	0x20000810
 8005d90:	20000dec 	.word	0x20000dec
 8005d94:	20000820 	.word	0x20000820
 8005d98:	20000df0 	.word	0x20000df0
 8005d9c:	20000830 	.word	0x20000830
 8005da0:	20000df4 	.word	0x20000df4
 8005da4:	20000840 	.word	0x20000840
 8005da8:	4603      	mov	r3, r0
 8005daa:	4a27      	ldr	r2, [pc, #156]	; (8005e48 <loadMenuTexts+0xb14>)
 8005dac:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005dae:	4827      	ldr	r0, [pc, #156]	; (8005e4c <loadMenuTexts+0xb18>)
 8005db0:	f7fa fe8a 	bl	8000ac8 <copyText>
 8005db4:	4603      	mov	r3, r0
 8005db6:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <loadMenuTexts+0xb1c>)
 8005db8:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005dba:	4826      	ldr	r0, [pc, #152]	; (8005e54 <loadMenuTexts+0xb20>)
 8005dbc:	f7fa fe84 	bl	8000ac8 <copyText>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <loadMenuTexts+0xb24>)
 8005dc4:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005dc6:	4825      	ldr	r0, [pc, #148]	; (8005e5c <loadMenuTexts+0xb28>)
 8005dc8:	f7fa fe7e 	bl	8000ac8 <copyText>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4a24      	ldr	r2, [pc, #144]	; (8005e60 <loadMenuTexts+0xb2c>)
 8005dd0:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005dd2:	4824      	ldr	r0, [pc, #144]	; (8005e64 <loadMenuTexts+0xb30>)
 8005dd4:	f7fa fe78 	bl	8000ac8 <copyText>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <loadMenuTexts+0xb34>)
 8005ddc:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005dde:	4823      	ldr	r0, [pc, #140]	; (8005e6c <loadMenuTexts+0xb38>)
 8005de0:	f7fa fe72 	bl	8000ac8 <copyText>
 8005de4:	4603      	mov	r3, r0
 8005de6:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <loadMenuTexts+0xb3c>)
 8005de8:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005dea:	4822      	ldr	r0, [pc, #136]	; (8005e74 <loadMenuTexts+0xb40>)
 8005dec:	f7fa fe6c 	bl	8000ac8 <copyText>
 8005df0:	4603      	mov	r3, r0
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <loadMenuTexts+0xb44>)
 8005df4:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005df6:	4821      	ldr	r0, [pc, #132]	; (8005e7c <loadMenuTexts+0xb48>)
 8005df8:	f7fa fe66 	bl	8000ac8 <copyText>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <loadMenuTexts+0xb4c>)
 8005e00:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005e02:	4820      	ldr	r0, [pc, #128]	; (8005e84 <loadMenuTexts+0xb50>)
 8005e04:	f7fa fe60 	bl	8000ac8 <copyText>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4a1f      	ldr	r2, [pc, #124]	; (8005e88 <loadMenuTexts+0xb54>)
 8005e0c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005e0e:	481f      	ldr	r0, [pc, #124]	; (8005e8c <loadMenuTexts+0xb58>)
 8005e10:	f7fa fe5a 	bl	8000ac8 <copyText>
 8005e14:	4603      	mov	r3, r0
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <loadMenuTexts+0xb5c>)
 8005e18:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005e1a:	481e      	ldr	r0, [pc, #120]	; (8005e94 <loadMenuTexts+0xb60>)
 8005e1c:	f7fa fe54 	bl	8000ac8 <copyText>
 8005e20:	4603      	mov	r3, r0
 8005e22:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <loadMenuTexts+0xb64>)
 8005e24:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005e26:	481d      	ldr	r0, [pc, #116]	; (8005e9c <loadMenuTexts+0xb68>)
 8005e28:	f7fa fe4e 	bl	8000ac8 <copyText>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <loadMenuTexts+0xb6c>)
 8005e30:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005e32:	481c      	ldr	r0, [pc, #112]	; (8005ea4 <loadMenuTexts+0xb70>)
 8005e34:	f7fa fe48 	bl	8000ac8 <copyText>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <loadMenuTexts+0xb74>)
 8005e3c:	6013      	str	r3, [r2, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000df8 	.word	0x20000df8
 8005e4c:	20000850 	.word	0x20000850
 8005e50:	20000dfc 	.word	0x20000dfc
 8005e54:	20000860 	.word	0x20000860
 8005e58:	20000e00 	.word	0x20000e00
 8005e5c:	20000870 	.word	0x20000870
 8005e60:	20000e04 	.word	0x20000e04
 8005e64:	20000880 	.word	0x20000880
 8005e68:	20000e08 	.word	0x20000e08
 8005e6c:	20000890 	.word	0x20000890
 8005e70:	20000e0c 	.word	0x20000e0c
 8005e74:	200008a0 	.word	0x200008a0
 8005e78:	20000e18 	.word	0x20000e18
 8005e7c:	200008b0 	.word	0x200008b0
 8005e80:	20000e1c 	.word	0x20000e1c
 8005e84:	200008c0 	.word	0x200008c0
 8005e88:	20000e20 	.word	0x20000e20
 8005e8c:	200008d0 	.word	0x200008d0
 8005e90:	20000e24 	.word	0x20000e24
 8005e94:	200008e0 	.word	0x200008e0
 8005e98:	20000e28 	.word	0x20000e28
 8005e9c:	200008f0 	.word	0x200008f0
 8005ea0:	20000e2c 	.word	0x20000e2c
 8005ea4:	20000900 	.word	0x20000900
 8005ea8:	20000e30 	.word	0x20000e30

08005eac <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d105      	bne.n	8005ec8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005ebc:	4a22      	ldr	r2, [pc, #136]	; (8005f48 <lcdUpdate+0x9c>)
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	2002      	movs	r0, #2
 8005ec2:	f7fa fd77 	bl	80009b4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005ec6:	e03b      	b.n	8005f40 <lcdUpdate+0x94>
	} else if(y==2) {
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d105      	bne.n	8005eda <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005ece:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <lcdUpdate+0x9c>)
 8005ed0:	2102      	movs	r1, #2
 8005ed2:	2002      	movs	r0, #2
 8005ed4:	f7fa fd6e 	bl	80009b4 <lcd_print>
}
 8005ed8:	e032      	b.n	8005f40 <lcdUpdate+0x94>
	} else if(y==3) {
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d105      	bne.n	8005eec <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <lcdUpdate+0x9c>)
 8005ee2:	2103      	movs	r1, #3
 8005ee4:	2002      	movs	r0, #2
 8005ee6:	f7fa fd65 	bl	80009b4 <lcd_print>
}
 8005eea:	e029      	b.n	8005f40 <lcdUpdate+0x94>
	} else if(y==4) {
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d105      	bne.n	8005efe <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <lcdUpdate+0x9c>)
 8005ef4:	2104      	movs	r1, #4
 8005ef6:	2002      	movs	r0, #2
 8005ef8:	f7fa fd5c 	bl	80009b4 <lcd_print>
}
 8005efc:	e020      	b.n	8005f40 <lcdUpdate+0x94>
	} else if(y==5) {
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	2b05      	cmp	r3, #5
 8005f02:	d105      	bne.n	8005f10 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005f04:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <lcdUpdate+0x9c>)
 8005f06:	2105      	movs	r1, #5
 8005f08:	2002      	movs	r0, #2
 8005f0a:	f7fa fd53 	bl	80009b4 <lcd_print>
}
 8005f0e:	e017      	b.n	8005f40 <lcdUpdate+0x94>
	} else if(y==6) {
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d105      	bne.n	8005f22 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005f16:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <lcdUpdate+0x9c>)
 8005f18:	2106      	movs	r1, #6
 8005f1a:	2002      	movs	r0, #2
 8005f1c:	f7fa fd4a 	bl	80009b4 <lcd_print>
}
 8005f20:	e00e      	b.n	8005f40 <lcdUpdate+0x94>
	} else if (y==7) {
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	2b07      	cmp	r3, #7
 8005f26:	d10b      	bne.n	8005f40 <lcdUpdate+0x94>
		lcd_clear();
 8005f28:	f7fa fd70 	bl	8000a0c <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005f2c:	4a07      	ldr	r2, [pc, #28]	; (8005f4c <lcdUpdate+0xa0>)
 8005f2e:	2101      	movs	r1, #1
 8005f30:	2001      	movs	r0, #1
 8005f32:	f7fa fd3f 	bl	80009b4 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005f36:	4a06      	ldr	r2, [pc, #24]	; (8005f50 <lcdUpdate+0xa4>)
 8005f38:	2101      	movs	r1, #1
 8005f3a:	2002      	movs	r0, #2
 8005f3c:	f7fa fd3a 	bl	80009b4 <lcd_print>
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	0800e2d8 	.word	0x0800e2d8
 8005f4c:	0800ec04 	.word	0x0800ec04
 8005f50:	0800ec18 	.word	0x0800ec18

08005f54 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d11d      	bne.n	8005fa0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005f64:	4b62      	ldr	r3, [pc, #392]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005f6c:	4a61      	ldr	r2, [pc, #388]	; (80060f4 <hataKoduLcdGoster+0x1a0>)
 8005f6e:	2101      	movs	r1, #1
 8005f70:	2001      	movs	r0, #1
 8005f72:	f7fa fd1f 	bl	80009b4 <lcd_print>
 8005f76:	e008      	b.n	8005f8a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005f78:	4b5d      	ldr	r3, [pc, #372]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d104      	bne.n	8005f8a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <hataKoduLcdGoster+0x1a4>)
 8005f82:	2101      	movs	r1, #1
 8005f84:	2001      	movs	r0, #1
 8005f86:	f7fa fd15 	bl	80009b4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005f8a:	4a5c      	ldr	r2, [pc, #368]	; (80060fc <hataKoduLcdGoster+0x1a8>)
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	2002      	movs	r0, #2
 8005f90:	f7fa fd10 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8005f94:	4a5a      	ldr	r2, [pc, #360]	; (8006100 <hataKoduLcdGoster+0x1ac>)
 8005f96:	2107      	movs	r1, #7
 8005f98:	2002      	movs	r0, #2
 8005f9a:	f7fa fd0b 	bl	80009b4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005f9e:	e0a3      	b.n	80060e8 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d11d      	bne.n	8005fe2 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005fa6:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005fae:	4a51      	ldr	r2, [pc, #324]	; (80060f4 <hataKoduLcdGoster+0x1a0>)
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f7fa fcfe 	bl	80009b4 <lcd_print>
 8005fb8:	e008      	b.n	8005fcc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005fba:	4b4d      	ldr	r3, [pc, #308]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d104      	bne.n	8005fcc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005fc2:	4a4d      	ldr	r2, [pc, #308]	; (80060f8 <hataKoduLcdGoster+0x1a4>)
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	f7fa fcf4 	bl	80009b4 <lcd_print>
		lcd_print(2, 2, "2");
 8005fcc:	4a4d      	ldr	r2, [pc, #308]	; (8006104 <hataKoduLcdGoster+0x1b0>)
 8005fce:	2102      	movs	r1, #2
 8005fd0:	2002      	movs	r0, #2
 8005fd2:	f7fa fcef 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8005fd6:	4a4a      	ldr	r2, [pc, #296]	; (8006100 <hataKoduLcdGoster+0x1ac>)
 8005fd8:	2107      	movs	r1, #7
 8005fda:	2002      	movs	r0, #2
 8005fdc:	f7fa fcea 	bl	80009b4 <lcd_print>
}
 8005fe0:	e082      	b.n	80060e8 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d11d      	bne.n	8006024 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005fe8:	4b41      	ldr	r3, [pc, #260]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005ff0:	4a40      	ldr	r2, [pc, #256]	; (80060f4 <hataKoduLcdGoster+0x1a0>)
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f7fa fcdd 	bl	80009b4 <lcd_print>
 8005ffa:	e008      	b.n	800600e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005ffc:	4b3c      	ldr	r3, [pc, #240]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d104      	bne.n	800600e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8006004:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <hataKoduLcdGoster+0x1a4>)
 8006006:	2101      	movs	r1, #1
 8006008:	2001      	movs	r0, #1
 800600a:	f7fa fcd3 	bl	80009b4 <lcd_print>
		lcd_print(2, 3, "3");
 800600e:	4a3e      	ldr	r2, [pc, #248]	; (8006108 <hataKoduLcdGoster+0x1b4>)
 8006010:	2103      	movs	r1, #3
 8006012:	2002      	movs	r0, #2
 8006014:	f7fa fcce 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8006018:	4a39      	ldr	r2, [pc, #228]	; (8006100 <hataKoduLcdGoster+0x1ac>)
 800601a:	2107      	movs	r1, #7
 800601c:	2002      	movs	r0, #2
 800601e:	f7fa fcc9 	bl	80009b4 <lcd_print>
}
 8006022:	e061      	b.n	80060e8 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2b04      	cmp	r3, #4
 8006028:	d11d      	bne.n	8006066 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d105      	bne.n	800603e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8006032:	4a30      	ldr	r2, [pc, #192]	; (80060f4 <hataKoduLcdGoster+0x1a0>)
 8006034:	2101      	movs	r1, #1
 8006036:	2001      	movs	r0, #1
 8006038:	f7fa fcbc 	bl	80009b4 <lcd_print>
 800603c:	e008      	b.n	8006050 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800603e:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d104      	bne.n	8006050 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8006046:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <hataKoduLcdGoster+0x1a4>)
 8006048:	2101      	movs	r1, #1
 800604a:	2001      	movs	r0, #1
 800604c:	f7fa fcb2 	bl	80009b4 <lcd_print>
		lcd_print(2, 4, "4");
 8006050:	4a2e      	ldr	r2, [pc, #184]	; (800610c <hataKoduLcdGoster+0x1b8>)
 8006052:	2104      	movs	r1, #4
 8006054:	2002      	movs	r0, #2
 8006056:	f7fa fcad 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 800605a:	4a29      	ldr	r2, [pc, #164]	; (8006100 <hataKoduLcdGoster+0x1ac>)
 800605c:	2107      	movs	r1, #7
 800605e:	2002      	movs	r0, #2
 8006060:	f7fa fca8 	bl	80009b4 <lcd_print>
}
 8006064:	e040      	b.n	80060e8 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	2b05      	cmp	r3, #5
 800606a:	d11d      	bne.n	80060a8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 800606c:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <hataKoduLcdGoster+0x1a0>)
 8006076:	2101      	movs	r1, #1
 8006078:	2001      	movs	r0, #1
 800607a:	f7fa fc9b 	bl	80009b4 <lcd_print>
 800607e:	e008      	b.n	8006092 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d104      	bne.n	8006092 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8006088:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <hataKoduLcdGoster+0x1a4>)
 800608a:	2101      	movs	r1, #1
 800608c:	2001      	movs	r0, #1
 800608e:	f7fa fc91 	bl	80009b4 <lcd_print>
		lcd_print(2, 5, "5");
 8006092:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <hataKoduLcdGoster+0x1bc>)
 8006094:	2105      	movs	r1, #5
 8006096:	2002      	movs	r0, #2
 8006098:	f7fa fc8c 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 800609c:	4a18      	ldr	r2, [pc, #96]	; (8006100 <hataKoduLcdGoster+0x1ac>)
 800609e:	2107      	movs	r1, #7
 80060a0:	2002      	movs	r0, #2
 80060a2:	f7fa fc87 	bl	80009b4 <lcd_print>
}
 80060a6:	e01f      	b.n	80060e8 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b06      	cmp	r3, #6
 80060ac:	d11c      	bne.n	80060e8 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80060b6:	4a0f      	ldr	r2, [pc, #60]	; (80060f4 <hataKoduLcdGoster+0x1a0>)
 80060b8:	2101      	movs	r1, #1
 80060ba:	2001      	movs	r0, #1
 80060bc:	f7fa fc7a 	bl	80009b4 <lcd_print>
 80060c0:	e008      	b.n	80060d4 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <hataKoduLcdGoster+0x19c>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d104      	bne.n	80060d4 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <hataKoduLcdGoster+0x1a4>)
 80060cc:	2101      	movs	r1, #1
 80060ce:	2001      	movs	r0, #1
 80060d0:	f7fa fc70 	bl	80009b4 <lcd_print>
		lcd_print(2, 6, "6");
 80060d4:	4a0f      	ldr	r2, [pc, #60]	; (8006114 <hataKoduLcdGoster+0x1c0>)
 80060d6:	2106      	movs	r1, #6
 80060d8:	2002      	movs	r0, #2
 80060da:	f7fa fc6b 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <hataKoduLcdGoster+0x1ac>)
 80060e0:	2107      	movs	r1, #7
 80060e2:	2002      	movs	r0, #2
 80060e4:	f7fa fc66 	bl	80009b4 <lcd_print>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000cbe 	.word	0x20000cbe
 80060f4:	0800ec2c 	.word	0x0800ec2c
 80060f8:	0800ec40 	.word	0x0800ec40
 80060fc:	0800e030 	.word	0x0800e030
 8006100:	0800ec54 	.word	0x0800ec54
 8006104:	0800e034 	.word	0x0800e034
 8006108:	0800e038 	.word	0x0800e038
 800610c:	0800e03c 	.word	0x0800e03c
 8006110:	0800e040 	.word	0x0800e040
 8006114:	0800e044 	.word	0x0800e044

08006118 <convertAndSendData>:

void convertAndSendData() {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 800611e:	4a14      	ldr	r2, [pc, #80]	; (8006170 <convertAndSendData+0x58>)
 8006120:	2101      	movs	r1, #1
 8006122:	2001      	movs	r0, #1
 8006124:	f7fa fc46 	bl	80009b4 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <convertAndSendData+0x5c>)
 800612a:	2101      	movs	r1, #1
 800612c:	2002      	movs	r0, #2
 800612e:	f7fa fc41 	bl	80009b4 <lcd_print>
	for(int i=0; i<2; i++) {
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	e00a      	b.n	800614e <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8006138:	f002 fb5e 	bl	80087f8 <mergeData>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	490d      	ldr	r1, [pc, #52]	; (8006178 <convertAndSendData+0x60>)
 8006142:	480e      	ldr	r0, [pc, #56]	; (800617c <convertAndSendData+0x64>)
 8006144:	f7fa f91e 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3301      	adds	r3, #1
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b01      	cmp	r3, #1
 8006152:	ddf1      	ble.n	8006138 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8006154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006158:	f003 faf8 	bl	800974c <HAL_Delay>
	lcd_clear();
 800615c:	f7fa fc56 	bl	8000a0c <lcd_clear>
	HAL_Delay(500);
 8006160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006164:	f003 faf2 	bl	800974c <HAL_Delay>
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	0800ec60 	.word	0x0800ec60
 8006174:	0800ec6c 	.word	0x0800ec6c
 8006178:	20000bf4 	.word	0x20000bf4
 800617c:	20000ef8 	.word	0x20000ef8

08006180 <eepromKontrol>:

void eepromKontrol(int type) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af04      	add	r7, sp, #16
 8006186:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,145,eepromData,145,3000);
 8006188:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800618c:	9302      	str	r3, [sp, #8]
 800618e:	2391      	movs	r3, #145	; 0x91
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	4b9c      	ldr	r3, [pc, #624]	; (8006404 <eepromKontrol+0x284>)
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	2391      	movs	r3, #145	; 0x91
 8006198:	2200      	movs	r2, #0
 800619a:	21a0      	movs	r1, #160	; 0xa0
 800619c:	489a      	ldr	r0, [pc, #616]	; (8006408 <eepromKontrol+0x288>)
 800619e:	f004 fc59 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80061a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061a6:	f003 fad1 	bl	800974c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80061aa:	4b96      	ldr	r3, [pc, #600]	; (8006404 <eepromKontrol+0x284>)
 80061ac:	78da      	ldrb	r2, [r3, #3]
 80061ae:	4b97      	ldr	r3, [pc, #604]	; (800640c <eepromKontrol+0x28c>)
 80061b0:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80061b2:	4b94      	ldr	r3, [pc, #592]	; (8006404 <eepromKontrol+0x284>)
 80061b4:	785a      	ldrb	r2, [r3, #1]
 80061b6:	4b96      	ldr	r3, [pc, #600]	; (8006410 <eepromKontrol+0x290>)
 80061b8:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80061ba:	4b92      	ldr	r3, [pc, #584]	; (8006404 <eepromKontrol+0x284>)
 80061bc:	789a      	ldrb	r2, [r3, #2]
 80061be:	4b95      	ldr	r3, [pc, #596]	; (8006414 <eepromKontrol+0x294>)
 80061c0:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80061c2:	4b90      	ldr	r3, [pc, #576]	; (8006404 <eepromKontrol+0x284>)
 80061c4:	791a      	ldrb	r2, [r3, #4]
 80061c6:	4b94      	ldr	r3, [pc, #592]	; (8006418 <eepromKontrol+0x298>)
 80061c8:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80061ca:	4b8e      	ldr	r3, [pc, #568]	; (8006404 <eepromKontrol+0x284>)
 80061cc:	795a      	ldrb	r2, [r3, #5]
 80061ce:	4b93      	ldr	r3, [pc, #588]	; (800641c <eepromKontrol+0x29c>)
 80061d0:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80061d2:	4b8c      	ldr	r3, [pc, #560]	; (8006404 <eepromKontrol+0x284>)
 80061d4:	799a      	ldrb	r2, [r3, #6]
 80061d6:	4b92      	ldr	r3, [pc, #584]	; (8006420 <eepromKontrol+0x2a0>)
 80061d8:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80061da:	4b8a      	ldr	r3, [pc, #552]	; (8006404 <eepromKontrol+0x284>)
 80061dc:	79da      	ldrb	r2, [r3, #7]
 80061de:	4b91      	ldr	r3, [pc, #580]	; (8006424 <eepromKontrol+0x2a4>)
 80061e0:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80061e2:	4b88      	ldr	r3, [pc, #544]	; (8006404 <eepromKontrol+0x284>)
 80061e4:	7a1a      	ldrb	r2, [r3, #8]
 80061e6:	4b90      	ldr	r3, [pc, #576]	; (8006428 <eepromKontrol+0x2a8>)
 80061e8:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80061ea:	4b86      	ldr	r3, [pc, #536]	; (8006404 <eepromKontrol+0x284>)
 80061ec:	7a5a      	ldrb	r2, [r3, #9]
 80061ee:	4b8f      	ldr	r3, [pc, #572]	; (800642c <eepromKontrol+0x2ac>)
 80061f0:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80061f2:	4b84      	ldr	r3, [pc, #528]	; (8006404 <eepromKontrol+0x284>)
 80061f4:	7a9a      	ldrb	r2, [r3, #10]
 80061f6:	4b8e      	ldr	r3, [pc, #568]	; (8006430 <eepromKontrol+0x2b0>)
 80061f8:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80061fa:	4b82      	ldr	r3, [pc, #520]	; (8006404 <eepromKontrol+0x284>)
 80061fc:	7ada      	ldrb	r2, [r3, #11]
 80061fe:	4b8d      	ldr	r3, [pc, #564]	; (8006434 <eepromKontrol+0x2b4>)
 8006200:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8006202:	4b80      	ldr	r3, [pc, #512]	; (8006404 <eepromKontrol+0x284>)
 8006204:	7b1a      	ldrb	r2, [r3, #12]
 8006206:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <eepromKontrol+0x2b8>)
 8006208:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 800620a:	4b7e      	ldr	r3, [pc, #504]	; (8006404 <eepromKontrol+0x284>)
 800620c:	7b5a      	ldrb	r2, [r3, #13]
 800620e:	4b8b      	ldr	r3, [pc, #556]	; (800643c <eepromKontrol+0x2bc>)
 8006210:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8006212:	4b7c      	ldr	r3, [pc, #496]	; (8006404 <eepromKontrol+0x284>)
 8006214:	7b9a      	ldrb	r2, [r3, #14]
 8006216:	4b8a      	ldr	r3, [pc, #552]	; (8006440 <eepromKontrol+0x2c0>)
 8006218:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 800621a:	4b7a      	ldr	r3, [pc, #488]	; (8006404 <eepromKontrol+0x284>)
 800621c:	7bda      	ldrb	r2, [r3, #15]
 800621e:	4b89      	ldr	r3, [pc, #548]	; (8006444 <eepromKontrol+0x2c4>)
 8006220:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8006222:	4b78      	ldr	r3, [pc, #480]	; (8006404 <eepromKontrol+0x284>)
 8006224:	7c1a      	ldrb	r2, [r3, #16]
 8006226:	4b88      	ldr	r3, [pc, #544]	; (8006448 <eepromKontrol+0x2c8>)
 8006228:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800622a:	4b76      	ldr	r3, [pc, #472]	; (8006404 <eepromKontrol+0x284>)
 800622c:	7c5a      	ldrb	r2, [r3, #17]
 800622e:	4b87      	ldr	r3, [pc, #540]	; (800644c <eepromKontrol+0x2cc>)
 8006230:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8006232:	4b74      	ldr	r3, [pc, #464]	; (8006404 <eepromKontrol+0x284>)
 8006234:	7c9a      	ldrb	r2, [r3, #18]
 8006236:	4b86      	ldr	r3, [pc, #536]	; (8006450 <eepromKontrol+0x2d0>)
 8006238:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 800623a:	4b72      	ldr	r3, [pc, #456]	; (8006404 <eepromKontrol+0x284>)
 800623c:	7cda      	ldrb	r2, [r3, #19]
 800623e:	4b85      	ldr	r3, [pc, #532]	; (8006454 <eepromKontrol+0x2d4>)
 8006240:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8006242:	4b70      	ldr	r3, [pc, #448]	; (8006404 <eepromKontrol+0x284>)
 8006244:	7d1a      	ldrb	r2, [r3, #20]
 8006246:	4b84      	ldr	r3, [pc, #528]	; (8006458 <eepromKontrol+0x2d8>)
 8006248:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800624a:	4b6e      	ldr	r3, [pc, #440]	; (8006404 <eepromKontrol+0x284>)
 800624c:	7d5a      	ldrb	r2, [r3, #21]
 800624e:	4b83      	ldr	r3, [pc, #524]	; (800645c <eepromKontrol+0x2dc>)
 8006250:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8006252:	4b6c      	ldr	r3, [pc, #432]	; (8006404 <eepromKontrol+0x284>)
 8006254:	7d9a      	ldrb	r2, [r3, #22]
 8006256:	4b82      	ldr	r3, [pc, #520]	; (8006460 <eepromKontrol+0x2e0>)
 8006258:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800625a:	4b6a      	ldr	r3, [pc, #424]	; (8006404 <eepromKontrol+0x284>)
 800625c:	7dda      	ldrb	r2, [r3, #23]
 800625e:	4b81      	ldr	r3, [pc, #516]	; (8006464 <eepromKontrol+0x2e4>)
 8006260:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8006262:	4b68      	ldr	r3, [pc, #416]	; (8006404 <eepromKontrol+0x284>)
 8006264:	7e1a      	ldrb	r2, [r3, #24]
 8006266:	4b80      	ldr	r3, [pc, #512]	; (8006468 <eepromKontrol+0x2e8>)
 8006268:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800626a:	4b66      	ldr	r3, [pc, #408]	; (8006404 <eepromKontrol+0x284>)
 800626c:	7e5a      	ldrb	r2, [r3, #25]
 800626e:	4b7f      	ldr	r3, [pc, #508]	; (800646c <eepromKontrol+0x2ec>)
 8006270:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8006272:	4b64      	ldr	r3, [pc, #400]	; (8006404 <eepromKontrol+0x284>)
 8006274:	7e9a      	ldrb	r2, [r3, #26]
 8006276:	4b7e      	ldr	r3, [pc, #504]	; (8006470 <eepromKontrol+0x2f0>)
 8006278:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800627a:	4b62      	ldr	r3, [pc, #392]	; (8006404 <eepromKontrol+0x284>)
 800627c:	7eda      	ldrb	r2, [r3, #27]
 800627e:	4b7d      	ldr	r3, [pc, #500]	; (8006474 <eepromKontrol+0x2f4>)
 8006280:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8006282:	4b60      	ldr	r3, [pc, #384]	; (8006404 <eepromKontrol+0x284>)
 8006284:	7f1a      	ldrb	r2, [r3, #28]
 8006286:	4b7c      	ldr	r3, [pc, #496]	; (8006478 <eepromKontrol+0x2f8>)
 8006288:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800628a:	4b5e      	ldr	r3, [pc, #376]	; (8006404 <eepromKontrol+0x284>)
 800628c:	7f5a      	ldrb	r2, [r3, #29]
 800628e:	4b7b      	ldr	r3, [pc, #492]	; (800647c <eepromKontrol+0x2fc>)
 8006290:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8006292:	4b5c      	ldr	r3, [pc, #368]	; (8006404 <eepromKontrol+0x284>)
 8006294:	7f9a      	ldrb	r2, [r3, #30]
 8006296:	4b7a      	ldr	r3, [pc, #488]	; (8006480 <eepromKontrol+0x300>)
 8006298:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800629a:	4b5a      	ldr	r3, [pc, #360]	; (8006404 <eepromKontrol+0x284>)
 800629c:	7fda      	ldrb	r2, [r3, #31]
 800629e:	4b79      	ldr	r3, [pc, #484]	; (8006484 <eepromKontrol+0x304>)
 80062a0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80062a2:	4b58      	ldr	r3, [pc, #352]	; (8006404 <eepromKontrol+0x284>)
 80062a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80062a8:	4b77      	ldr	r3, [pc, #476]	; (8006488 <eepromKontrol+0x308>)
 80062aa:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80062ac:	4b55      	ldr	r3, [pc, #340]	; (8006404 <eepromKontrol+0x284>)
 80062ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80062b2:	4b76      	ldr	r3, [pc, #472]	; (800648c <eepromKontrol+0x30c>)
 80062b4:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 80062b6:	4b53      	ldr	r3, [pc, #332]	; (8006404 <eepromKontrol+0x284>)
 80062b8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80062bc:	4b74      	ldr	r3, [pc, #464]	; (8006490 <eepromKontrol+0x310>)
 80062be:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80062c0:	4b50      	ldr	r3, [pc, #320]	; (8006404 <eepromKontrol+0x284>)
 80062c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80062c6:	4b73      	ldr	r3, [pc, #460]	; (8006494 <eepromKontrol+0x314>)
 80062c8:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 80062ca:	4b4e      	ldr	r3, [pc, #312]	; (8006404 <eepromKontrol+0x284>)
 80062cc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80062d0:	4b71      	ldr	r3, [pc, #452]	; (8006498 <eepromKontrol+0x318>)
 80062d2:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 80062d4:	4b4b      	ldr	r3, [pc, #300]	; (8006404 <eepromKontrol+0x284>)
 80062d6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80062da:	4b70      	ldr	r3, [pc, #448]	; (800649c <eepromKontrol+0x31c>)
 80062dc:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 80062de:	4b49      	ldr	r3, [pc, #292]	; (8006404 <eepromKontrol+0x284>)
 80062e0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80062e4:	4b6e      	ldr	r3, [pc, #440]	; (80064a0 <eepromKontrol+0x320>)
 80062e6:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 80062e8:	4b46      	ldr	r3, [pc, #280]	; (8006404 <eepromKontrol+0x284>)
 80062ea:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80062ee:	4b6d      	ldr	r3, [pc, #436]	; (80064a4 <eepromKontrol+0x324>)
 80062f0:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80062f2:	4b44      	ldr	r3, [pc, #272]	; (8006404 <eepromKontrol+0x284>)
 80062f4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80062f8:	4b6b      	ldr	r3, [pc, #428]	; (80064a8 <eepromKontrol+0x328>)
 80062fa:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80062fc:	4b41      	ldr	r3, [pc, #260]	; (8006404 <eepromKontrol+0x284>)
 80062fe:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006302:	4b6a      	ldr	r3, [pc, #424]	; (80064ac <eepromKontrol+0x32c>)
 8006304:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8006306:	4b3f      	ldr	r3, [pc, #252]	; (8006404 <eepromKontrol+0x284>)
 8006308:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800630c:	4b68      	ldr	r3, [pc, #416]	; (80064b0 <eepromKontrol+0x330>)
 800630e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8006310:	4b3c      	ldr	r3, [pc, #240]	; (8006404 <eepromKontrol+0x284>)
 8006312:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006316:	4b67      	ldr	r3, [pc, #412]	; (80064b4 <eepromKontrol+0x334>)
 8006318:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 800631a:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <eepromKontrol+0x284>)
 800631c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006320:	4b65      	ldr	r3, [pc, #404]	; (80064b8 <eepromKontrol+0x338>)
 8006322:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8006324:	4b37      	ldr	r3, [pc, #220]	; (8006404 <eepromKontrol+0x284>)
 8006326:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800632a:	4b64      	ldr	r3, [pc, #400]	; (80064bc <eepromKontrol+0x33c>)
 800632c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 800632e:	4b35      	ldr	r3, [pc, #212]	; (8006404 <eepromKontrol+0x284>)
 8006330:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006334:	4b62      	ldr	r3, [pc, #392]	; (80064c0 <eepromKontrol+0x340>)
 8006336:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8006338:	4b32      	ldr	r3, [pc, #200]	; (8006404 <eepromKontrol+0x284>)
 800633a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800633e:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <eepromKontrol+0x344>)
 8006340:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8006342:	4b52      	ldr	r3, [pc, #328]	; (800648c <eepromKontrol+0x30c>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fff4 	bl	8005334 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 800634c:	4b4e      	ldr	r3, [pc, #312]	; (8006488 <eepromKontrol+0x308>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b09      	cmp	r3, #9
 8006352:	d902      	bls.n	800635a <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8006354:	4b4c      	ldr	r3, [pc, #304]	; (8006488 <eepromKontrol+0x308>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800635a:	4b4a      	ldr	r3, [pc, #296]	; (8006484 <eepromKontrol+0x304>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b09      	cmp	r3, #9
 8006360:	d902      	bls.n	8006368 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8006362:	4b48      	ldr	r3, [pc, #288]	; (8006484 <eepromKontrol+0x304>)
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8006368:	4b45      	ldr	r3, [pc, #276]	; (8006480 <eepromKontrol+0x300>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b09      	cmp	r3, #9
 800636e:	d902      	bls.n	8006376 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8006370:	4b43      	ldr	r3, [pc, #268]	; (8006480 <eepromKontrol+0x300>)
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8006376:	4b41      	ldr	r3, [pc, #260]	; (800647c <eepromKontrol+0x2fc>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b09      	cmp	r3, #9
 800637c:	d902      	bls.n	8006384 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 800637e:	4b3f      	ldr	r3, [pc, #252]	; (800647c <eepromKontrol+0x2fc>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8006384:	4b3c      	ldr	r3, [pc, #240]	; (8006478 <eepromKontrol+0x2f8>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b09      	cmp	r3, #9
 800638a:	d902      	bls.n	8006392 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 800638c:	4b3a      	ldr	r3, [pc, #232]	; (8006478 <eepromKontrol+0x2f8>)
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8006392:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <eepromKontrol+0x290>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d902      	bls.n	80063a0 <eepromKontrol+0x220>
	    calismaSekli=0;
 800639a:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <eepromKontrol+0x290>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <eepromKontrol+0x294>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d902      	bls.n	80063ae <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 80063a8:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <eepromKontrol+0x294>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80063ae:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <eepromKontrol+0x298>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d902      	bls.n	80063bc <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 80063b6:	4b18      	ldr	r3, [pc, #96]	; (8006418 <eepromKontrol+0x298>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <eepromKontrol+0x29c>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d902      	bls.n	80063ca <eepromKontrol+0x24a>
	    altLimit=1;
 80063c4:	4b15      	ldr	r3, [pc, #84]	; (800641c <eepromKontrol+0x29c>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 80063ca:	4b15      	ldr	r3, [pc, #84]	; (8006420 <eepromKontrol+0x2a0>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d902      	bls.n	80063d8 <eepromKontrol+0x258>
	    basincSalteri=1;
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <eepromKontrol+0x2a0>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <eepromKontrol+0x2a4>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d902      	bls.n	80063e6 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <eepromKontrol+0x2a4>)
 80063e2:	2203      	movs	r2, #3
 80063e4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 80063e6:	4b2d      	ldr	r3, [pc, #180]	; (800649c <eepromKontrol+0x31c>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d902      	bls.n	80063f4 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 80063ee:	4b2b      	ldr	r3, [pc, #172]	; (800649c <eepromKontrol+0x31c>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <eepromKontrol+0x2a8>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d965      	bls.n	80064c8 <eepromKontrol+0x348>
	    kapi1Tip=1;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <eepromKontrol+0x2a8>)
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e061      	b.n	80064c8 <eepromKontrol+0x348>
 8006404:	20000b38 	.word	0x20000b38
 8006408:	20000e5c 	.word	0x20000e5c
 800640c:	20000bc9 	.word	0x20000bc9
 8006410:	20000c9e 	.word	0x20000c9e
 8006414:	20000ca1 	.word	0x20000ca1
 8006418:	20000ca2 	.word	0x20000ca2
 800641c:	20000ca3 	.word	0x20000ca3
 8006420:	20000ca4 	.word	0x20000ca4
 8006424:	20000ca5 	.word	0x20000ca5
 8006428:	20000ca6 	.word	0x20000ca6
 800642c:	20000cb6 	.word	0x20000cb6
 8006430:	20000ca7 	.word	0x20000ca7
 8006434:	20000cb7 	.word	0x20000cb7
 8006438:	20000ca8 	.word	0x20000ca8
 800643c:	20000cb8 	.word	0x20000cb8
 8006440:	20000cab 	.word	0x20000cab
 8006444:	20000cac 	.word	0x20000cac
 8006448:	20000cad 	.word	0x20000cad
 800644c:	20000cae 	.word	0x20000cae
 8006450:	20000caf 	.word	0x20000caf
 8006454:	20000cb0 	.word	0x20000cb0
 8006458:	20000cb1 	.word	0x20000cb1
 800645c:	20000cb2 	.word	0x20000cb2
 8006460:	20000cb3 	.word	0x20000cb3
 8006464:	20000cb4 	.word	0x20000cb4
 8006468:	20000cb5 	.word	0x20000cb5
 800646c:	20000cb9 	.word	0x20000cb9
 8006470:	20000cbb 	.word	0x20000cbb
 8006474:	20000c99 	.word	0x20000c99
 8006478:	20000c9a 	.word	0x20000c9a
 800647c:	20000c9b 	.word	0x20000c9b
 8006480:	200009c2 	.word	0x200009c2
 8006484:	200009c3 	.word	0x200009c3
 8006488:	20000c9c 	.word	0x20000c9c
 800648c:	20000cbe 	.word	0x20000cbe
 8006490:	20000cbc 	.word	0x20000cbc
 8006494:	20000caa 	.word	0x20000caa
 8006498:	20000cbd 	.word	0x20000cbd
 800649c:	20000ca9 	.word	0x20000ca9
 80064a0:	20000cbf 	.word	0x20000cbf
 80064a4:	20000cc0 	.word	0x20000cc0
 80064a8:	20000cc1 	.word	0x20000cc1
 80064ac:	20000cc2 	.word	0x20000cc2
 80064b0:	20000cc3 	.word	0x20000cc3
 80064b4:	20000cc4 	.word	0x20000cc4
 80064b8:	20000cc5 	.word	0x20000cc5
 80064bc:	20000cc6 	.word	0x20000cc6
 80064c0:	20000cc7 	.word	0x20000cc7
 80064c4:	20000cc8 	.word	0x20000cc8
	}

	if(kapi1AcSure>5) {
 80064c8:	4b55      	ldr	r3, [pc, #340]	; (8006620 <eepromKontrol+0x4a0>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d902      	bls.n	80064d6 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 80064d0:	4b53      	ldr	r3, [pc, #332]	; (8006620 <eepromKontrol+0x4a0>)
 80064d2:	2205      	movs	r2, #5
 80064d4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80064d6:	4b53      	ldr	r3, [pc, #332]	; (8006624 <eepromKontrol+0x4a4>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d902      	bls.n	80064e4 <eepromKontrol+0x364>
	    kapi2Tip=1;
 80064de:	4b51      	ldr	r3, [pc, #324]	; (8006624 <eepromKontrol+0x4a4>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 80064e4:	4b50      	ldr	r3, [pc, #320]	; (8006628 <eepromKontrol+0x4a8>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b05      	cmp	r3, #5
 80064ea:	d902      	bls.n	80064f2 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 80064ec:	4b4e      	ldr	r3, [pc, #312]	; (8006628 <eepromKontrol+0x4a8>)
 80064ee:	2205      	movs	r2, #5
 80064f0:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80064f2:	4b4e      	ldr	r3, [pc, #312]	; (800662c <eepromKontrol+0x4ac>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d902      	bls.n	8006500 <eepromKontrol+0x380>
	    kapitablaTip=1;
 80064fa:	4b4c      	ldr	r3, [pc, #304]	; (800662c <eepromKontrol+0x4ac>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8006500:	4b4b      	ldr	r3, [pc, #300]	; (8006630 <eepromKontrol+0x4b0>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d902      	bls.n	800650e <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8006508:	4b49      	ldr	r3, [pc, #292]	; (8006630 <eepromKontrol+0x4b0>)
 800650a:	2202      	movs	r2, #2
 800650c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 800650e:	4b49      	ldr	r3, [pc, #292]	; (8006634 <eepromKontrol+0x4b4>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b05      	cmp	r3, #5
 8006514:	d902      	bls.n	800651c <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8006516:	4b47      	ldr	r3, [pc, #284]	; (8006634 <eepromKontrol+0x4b4>)
 8006518:	2205      	movs	r2, #5
 800651a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 800651c:	4b46      	ldr	r3, [pc, #280]	; (8006638 <eepromKontrol+0x4b8>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d902      	bls.n	800652a <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8006524:	4b44      	ldr	r3, [pc, #272]	; (8006638 <eepromKontrol+0x4b8>)
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 800652a:	4b44      	ldr	r3, [pc, #272]	; (800663c <eepromKontrol+0x4bc>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d902      	bls.n	8006538 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8006532:	4b42      	ldr	r3, [pc, #264]	; (800663c <eepromKontrol+0x4bc>)
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8006538:	4b41      	ldr	r3, [pc, #260]	; (8006640 <eepromKontrol+0x4c0>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d902      	bls.n	8006546 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8006540:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <eepromKontrol+0x4c0>)
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <eepromKontrol+0x4c4>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d902      	bls.n	8006554 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 800654e:	4b3d      	ldr	r3, [pc, #244]	; (8006644 <eepromKontrol+0x4c4>)
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8006554:	4b3c      	ldr	r3, [pc, #240]	; (8006648 <eepromKontrol+0x4c8>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d902      	bls.n	8006562 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 800655c:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <eepromKontrol+0x4c8>)
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8006562:	4b3a      	ldr	r3, [pc, #232]	; (800664c <eepromKontrol+0x4cc>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d902      	bls.n	8006570 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <eepromKontrol+0x4cc>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8006570:	4b37      	ldr	r3, [pc, #220]	; (8006650 <eepromKontrol+0x4d0>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b05      	cmp	r3, #5
 8006576:	d902      	bls.n	800657e <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8006578:	4b35      	ldr	r3, [pc, #212]	; (8006650 <eepromKontrol+0x4d0>)
 800657a:	2200      	movs	r2, #0
 800657c:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 800657e:	4b35      	ldr	r3, [pc, #212]	; (8006654 <eepromKontrol+0x4d4>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b05      	cmp	r3, #5
 8006584:	d902      	bls.n	800658c <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8006586:	4b33      	ldr	r3, [pc, #204]	; (8006654 <eepromKontrol+0x4d4>)
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800658c:	4b32      	ldr	r3, [pc, #200]	; (8006658 <eepromKontrol+0x4d8>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b05      	cmp	r3, #5
 8006592:	d902      	bls.n	800659a <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8006594:	4b30      	ldr	r3, [pc, #192]	; (8006658 <eepromKontrol+0x4d8>)
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 800659a:	4b30      	ldr	r3, [pc, #192]	; (800665c <eepromKontrol+0x4dc>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b05      	cmp	r3, #5
 80065a0:	d902      	bls.n	80065a8 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 80065a2:	4b2e      	ldr	r3, [pc, #184]	; (800665c <eepromKontrol+0x4dc>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80065a8:	4b2d      	ldr	r3, [pc, #180]	; (8006660 <eepromKontrol+0x4e0>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2bb4      	cmp	r3, #180	; 0xb4
 80065ae:	d902      	bls.n	80065b6 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 80065b0:	4b2b      	ldr	r3, [pc, #172]	; (8006660 <eepromKontrol+0x4e0>)
 80065b2:	223c      	movs	r2, #60	; 0x3c
 80065b4:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <eepromKontrol+0x4e4>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d902      	bls.n	80065c4 <eepromKontrol+0x444>
	    buzzer=0;
 80065be:	4b29      	ldr	r3, [pc, #164]	; (8006664 <eepromKontrol+0x4e4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80065c4:	4b28      	ldr	r3, [pc, #160]	; (8006668 <eepromKontrol+0x4e8>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d902      	bls.n	80065d2 <eepromKontrol+0x452>
	    demoMode=0;
 80065cc:	4b26      	ldr	r3, [pc, #152]	; (8006668 <eepromKontrol+0x4e8>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80065d2:	4b26      	ldr	r3, [pc, #152]	; (800666c <eepromKontrol+0x4ec>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d902      	bls.n	80065e0 <eepromKontrol+0x460>
	    calismaSayModu=0;
 80065da:	4b24      	ldr	r3, [pc, #144]	; (800666c <eepromKontrol+0x4ec>)
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 80065e0:	4b23      	ldr	r3, [pc, #140]	; (8006670 <eepromKontrol+0x4f0>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d902      	bls.n	80065ee <eepromKontrol+0x46e>
	    dilSecim=0;
 80065e8:	4b21      	ldr	r3, [pc, #132]	; (8006670 <eepromKontrol+0x4f0>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80065ee:	4b21      	ldr	r3, [pc, #132]	; (8006674 <eepromKontrol+0x4f4>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d902      	bls.n	80065fc <eepromKontrol+0x47c>
		iotMode=0;
 80065f6:	4b1f      	ldr	r3, [pc, #124]	; (8006674 <eepromKontrol+0x4f4>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 80065fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006600:	f003 f8a4 	bl	800974c <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8006604:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <eepromKontrol+0x4f4>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d104      	bne.n	8006616 <eepromKontrol+0x496>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <eepromKontrol+0x496>
		convertAndSendData();
 8006612:	f7ff fd81 	bl	8006118 <convertAndSendData>
	}
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000cb6 	.word	0x20000cb6
 8006624:	20000ca7 	.word	0x20000ca7
 8006628:	20000cb7 	.word	0x20000cb7
 800662c:	20000ca8 	.word	0x20000ca8
 8006630:	20000caa 	.word	0x20000caa
 8006634:	20000cb8 	.word	0x20000cb8
 8006638:	20000cab 	.word	0x20000cab
 800663c:	20000cac 	.word	0x20000cac
 8006640:	20000cad 	.word	0x20000cad
 8006644:	20000cae 	.word	0x20000cae
 8006648:	20000caf 	.word	0x20000caf
 800664c:	20000cb0 	.word	0x20000cb0
 8006650:	20000cb1 	.word	0x20000cb1
 8006654:	20000cb2 	.word	0x20000cb2
 8006658:	20000cb3 	.word	0x20000cb3
 800665c:	20000cb4 	.word	0x20000cb4
 8006660:	20000cb5 	.word	0x20000cb5
 8006664:	20000cb9 	.word	0x20000cb9
 8006668:	20000cbb 	.word	0x20000cbb
 800666c:	20000cbd 	.word	0x20000cbd
 8006670:	20000cbe 	.word	0x20000cbe
 8006674:	20000cbc 	.word	0x20000cbc

08006678 <eepromKontrol4IoT>:

void eepromKontrol4IoT() {
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
	takeCharFromEEPROM4ID(&hi2c1);
 800667c:	480e      	ldr	r0, [pc, #56]	; (80066b8 <eepromKontrol4IoT+0x40>)
 800667e:	f7fb fa59 	bl	8001b34 <takeCharFromEEPROM4ID>
	HAL_Delay(500);
 8006682:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006686:	f003 f861 	bl	800974c <HAL_Delay>
	if(iotMode == 1) {
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <eepromKontrol4IoT+0x44>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d10f      	bne.n	80066b2 <eepromKontrol4IoT+0x3a>
		takeCharFromEEPROM4Wifi(&hi2c1, 1);
 8006692:	2101      	movs	r1, #1
 8006694:	4808      	ldr	r0, [pc, #32]	; (80066b8 <eepromKontrol4IoT+0x40>)
 8006696:	f7fb fa71 	bl	8001b7c <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 800669a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800669e:	f003 f855 	bl	800974c <HAL_Delay>
		takeCharFromEEPROM4Wifi(&hi2c1, 2);
 80066a2:	2102      	movs	r1, #2
 80066a4:	4804      	ldr	r0, [pc, #16]	; (80066b8 <eepromKontrol4IoT+0x40>)
 80066a6:	f7fb fa69 	bl	8001b7c <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 80066aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066ae:	f003 f84d 	bl	800974c <HAL_Delay>
	}
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000e5c 	.word	0x20000e5c
 80066bc:	20000cbc 	.word	0x20000cbc

080066c0 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af04      	add	r7, sp, #16
 80066c6:	4603      	mov	r3, r0
 80066c8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80066ca:	4b26      	ldr	r3, [pc, #152]	; (8006764 <hata2EEPROM+0xa4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	4b25      	ldr	r3, [pc, #148]	; (8006768 <hata2EEPROM+0xa8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4413      	add	r3, r2
 80066d6:	4a25      	ldr	r2, [pc, #148]	; (800676c <hata2EEPROM+0xac>)
 80066d8:	5cd3      	ldrb	r3, [r2, r3]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80066de:	f000 f849 	bl	8006774 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80066e2:	e000      	b.n	80066e6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80066e4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e012      	b.n	8006712 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <hata2EEPROM+0xa8>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <hata2EEPROM+0xac>)
 80066f6:	5cd3      	ldrb	r3, [r2, r3]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <hata2EEPROM+0xa8>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	4919      	ldr	r1, [pc, #100]	; (800676c <hata2EEPROM+0xac>)
 8006706:	79fa      	ldrb	r2, [r7, #7]
 8006708:	54ca      	strb	r2, [r1, r3]
					break;
 800670a:	e007      	b.n	800671c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <hata2EEPROM+0xa4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	429a      	cmp	r2, r3
 800671a:	dbe7      	blt.n	80066ec <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <hata2EEPROM+0xa8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	b299      	uxth	r1, r3
 8006722:	4b10      	ldr	r3, [pc, #64]	; (8006764 <hata2EEPROM+0xa4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	b298      	uxth	r0, r3
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <hata2EEPROM+0xa8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a0f      	ldr	r2, [pc, #60]	; (800676c <hata2EEPROM+0xac>)
 800672e:	4413      	add	r3, r2
 8006730:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <hata2EEPROM+0xa4>)
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	b292      	uxth	r2, r2
 8006736:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800673a:	9402      	str	r4, [sp, #8]
 800673c:	9201      	str	r2, [sp, #4]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4603      	mov	r3, r0
 8006742:	460a      	mov	r2, r1
 8006744:	21a0      	movs	r1, #160	; 0xa0
 8006746:	480a      	ldr	r0, [pc, #40]	; (8006770 <hata2EEPROM+0xb0>)
 8006748:	f004 f88a 	bl	800a860 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800674c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006750:	f002 fffc 	bl	800974c <HAL_Delay>
	eepromKontrol(1);
 8006754:	2001      	movs	r0, #1
 8006756:	f7ff fd13 	bl	8006180 <eepromKontrol>
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bd90      	pop	{r4, r7, pc}
 8006762:	bf00      	nop
 8006764:	20000938 	.word	0x20000938
 8006768:	2000093c 	.word	0x2000093c
 800676c:	20000b38 	.word	0x20000b38
 8006770:	20000e5c 	.word	0x20000e5c

08006774 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800677a:	2300      	movs	r3, #0
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	e009      	b.n	8006794 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006780:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <eepromDataFillWithEmpty+0x38>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <eepromDataFillWithEmpty+0x3c>)
 800678a:	2100      	movs	r1, #0
 800678c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3301      	adds	r3, #1
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <eepromDataFillWithEmpty+0x40>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	dbf0      	blt.n	8006780 <eepromDataFillWithEmpty+0xc>
	}
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20000910 	.word	0x20000910
 80067b0:	20000b38 	.word	0x20000b38
 80067b4:	20000938 	.word	0x20000938

080067b8 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
	timer1=millis;
 80067bc:	4b47      	ldr	r3, [pc, #284]	; (80068dc <bekle+0x124>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a47      	ldr	r2, [pc, #284]	; (80068e0 <bekle+0x128>)
 80067c2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067c4:	e002      	b.n	80067cc <bekle+0x14>
    	butonKontrol = 1;
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <bekle+0x12c>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067cc:	2101      	movs	r1, #1
 80067ce:	4846      	ldr	r0, [pc, #280]	; (80068e8 <bekle+0x130>)
 80067d0:	f003 fd8c 	bl	800a2ec <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d109      	bne.n	80067ee <bekle+0x36>
 80067da:	4b40      	ldr	r3, [pc, #256]	; (80068dc <bekle+0x124>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <bekle+0x128>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d0ef      	beq.n	80067c6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067e6:	e002      	b.n	80067ee <bekle+0x36>
    	butonKontrol = 1;
 80067e8:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <bekle+0x12c>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067ee:	2108      	movs	r1, #8
 80067f0:	483e      	ldr	r0, [pc, #248]	; (80068ec <bekle+0x134>)
 80067f2:	f003 fd7b 	bl	800a2ec <HAL_GPIO_ReadPin>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d109      	bne.n	8006810 <bekle+0x58>
 80067fc:	4b37      	ldr	r3, [pc, #220]	; (80068dc <bekle+0x124>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b37      	ldr	r3, [pc, #220]	; (80068e0 <bekle+0x128>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d0ef      	beq.n	80067e8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006808:	e002      	b.n	8006810 <bekle+0x58>
    	butonKontrol = 1;
 800680a:	4b36      	ldr	r3, [pc, #216]	; (80068e4 <bekle+0x12c>)
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006810:	2102      	movs	r1, #2
 8006812:	4835      	ldr	r0, [pc, #212]	; (80068e8 <bekle+0x130>)
 8006814:	f003 fd6a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d109      	bne.n	8006832 <bekle+0x7a>
 800681e:	4b2f      	ldr	r3, [pc, #188]	; (80068dc <bekle+0x124>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4b2f      	ldr	r3, [pc, #188]	; (80068e0 <bekle+0x128>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d0ef      	beq.n	800680a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800682a:	e002      	b.n	8006832 <bekle+0x7a>
    	butonKontrol = 1;
 800682c:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <bekle+0x12c>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006832:	2104      	movs	r1, #4
 8006834:	482c      	ldr	r0, [pc, #176]	; (80068e8 <bekle+0x130>)
 8006836:	f003 fd59 	bl	800a2ec <HAL_GPIO_ReadPin>
 800683a:	4603      	mov	r3, r0
 800683c:	2b01      	cmp	r3, #1
 800683e:	d109      	bne.n	8006854 <bekle+0x9c>
 8006840:	4b26      	ldr	r3, [pc, #152]	; (80068dc <bekle+0x124>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <bekle+0x128>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d0ef      	beq.n	800682c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800684c:	e002      	b.n	8006854 <bekle+0x9c>
    	butonKontrol = 1;
 800684e:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <bekle+0x12c>)
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006854:	2108      	movs	r1, #8
 8006856:	4824      	ldr	r0, [pc, #144]	; (80068e8 <bekle+0x130>)
 8006858:	f003 fd48 	bl	800a2ec <HAL_GPIO_ReadPin>
 800685c:	4603      	mov	r3, r0
 800685e:	2b01      	cmp	r3, #1
 8006860:	d109      	bne.n	8006876 <bekle+0xbe>
 8006862:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <bekle+0x124>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b1e      	ldr	r3, [pc, #120]	; (80068e0 <bekle+0x128>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d0ef      	beq.n	800684e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800686e:	e002      	b.n	8006876 <bekle+0xbe>
    	butonKontrol = 1;
 8006870:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <bekle+0x12c>)
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006876:	2180      	movs	r1, #128	; 0x80
 8006878:	481c      	ldr	r0, [pc, #112]	; (80068ec <bekle+0x134>)
 800687a:	f003 fd37 	bl	800a2ec <HAL_GPIO_ReadPin>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <bekle+0xe0>
 8006884:	4b15      	ldr	r3, [pc, #84]	; (80068dc <bekle+0x124>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <bekle+0x128>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d0ef      	beq.n	8006870 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006890:	e002      	b.n	8006898 <bekle+0xe0>
    	butonKontrol = 1;
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <bekle+0x12c>)
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800689c:	4813      	ldr	r0, [pc, #76]	; (80068ec <bekle+0x134>)
 800689e:	f003 fd25 	bl	800a2ec <HAL_GPIO_ReadPin>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <bekle+0x104>
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <bekle+0x124>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <bekle+0x128>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d0ee      	beq.n	8006892 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80068b4:	e002      	b.n	80068bc <bekle+0x104>
    	butonKontrol = 1;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <bekle+0x12c>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80068bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068c0:	480a      	ldr	r0, [pc, #40]	; (80068ec <bekle+0x134>)
 80068c2:	f003 fd13 	bl	800a2ec <HAL_GPIO_ReadPin>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <bekle+0x120>
 80068cc:	4b03      	ldr	r3, [pc, #12]	; (80068dc <bekle+0x124>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <bekle+0x128>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d0ee      	beq.n	80068b6 <bekle+0xfe>
    }

}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000bd4 	.word	0x20000bd4
 80068e0:	20000bdc 	.word	0x20000bdc
 80068e4:	20000ccc 	.word	0x20000ccc
 80068e8:	40010800 	.word	0x40010800
 80068ec:	40011000 	.word	0x40011000

080068f0 <i2cTest>:

void i2cTest() {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80068f6:	463b      	mov	r3, r7
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8006902:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <i2cTest+0x154>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b4e      	ldr	r3, [pc, #312]	; (8006a44 <i2cTest+0x154>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8006912:	484c      	ldr	r0, [pc, #304]	; (8006a44 <i2cTest+0x154>)
 8006914:	f003 fe76 	bl	800a604 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006918:	23c0      	movs	r3, #192	; 0xc0
 800691a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800691c:	2311      	movs	r3, #17
 800691e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006920:	2301      	movs	r3, #1
 8006922:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006924:	2303      	movs	r3, #3
 8006926:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006928:	463b      	mov	r3, r7
 800692a:	4619      	mov	r1, r3
 800692c:	4846      	ldr	r0, [pc, #280]	; (8006a48 <i2cTest+0x158>)
 800692e:	f003 fa7d 	bl	8009e2c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006932:	2201      	movs	r2, #1
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	4844      	ldr	r0, [pc, #272]	; (8006a48 <i2cTest+0x158>)
 8006938:	f003 fcef 	bl	800a31a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800693c:	2201      	movs	r2, #1
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	4841      	ldr	r0, [pc, #260]	; (8006a48 <i2cTest+0x158>)
 8006942:	f003 fcea 	bl	800a31a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006946:	200a      	movs	r0, #10
 8006948:	f002 ff00 	bl	800974c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800694c:	bf00      	nop
 800694e:	2140      	movs	r1, #64	; 0x40
 8006950:	483d      	ldr	r0, [pc, #244]	; (8006a48 <i2cTest+0x158>)
 8006952:	f003 fccb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006956:	4603      	mov	r3, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	d006      	beq.n	800696a <i2cTest+0x7a>
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	483a      	ldr	r0, [pc, #232]	; (8006a48 <i2cTest+0x158>)
 8006960:	f003 fcc4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d1f1      	bne.n	800694e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800696a:	2200      	movs	r2, #0
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	4836      	ldr	r0, [pc, #216]	; (8006a48 <i2cTest+0x158>)
 8006970:	f003 fcd3 	bl	800a31a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006974:	200a      	movs	r0, #10
 8006976:	f002 fee9 	bl	800974c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800697a:	bf00      	nop
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	4832      	ldr	r0, [pc, #200]	; (8006a48 <i2cTest+0x158>)
 8006980:	f003 fcb4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006984:	4603      	mov	r3, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	d0f8      	beq.n	800697c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800698a:	2200      	movs	r2, #0
 800698c:	2140      	movs	r1, #64	; 0x40
 800698e:	482e      	ldr	r0, [pc, #184]	; (8006a48 <i2cTest+0x158>)
 8006990:	f003 fcc3 	bl	800a31a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006994:	200a      	movs	r0, #10
 8006996:	f002 fed9 	bl	800974c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800699a:	bf00      	nop
 800699c:	2140      	movs	r1, #64	; 0x40
 800699e:	482a      	ldr	r0, [pc, #168]	; (8006a48 <i2cTest+0x158>)
 80069a0:	f003 fca4 	bl	800a2ec <HAL_GPIO_ReadPin>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d0f8      	beq.n	800699c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80069aa:	2201      	movs	r2, #1
 80069ac:	2140      	movs	r1, #64	; 0x40
 80069ae:	4826      	ldr	r0, [pc, #152]	; (8006a48 <i2cTest+0x158>)
 80069b0:	f003 fcb3 	bl	800a31a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80069b4:	200a      	movs	r0, #10
 80069b6:	f002 fec9 	bl	800974c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80069ba:	bf00      	nop
 80069bc:	2140      	movs	r1, #64	; 0x40
 80069be:	4822      	ldr	r0, [pc, #136]	; (8006a48 <i2cTest+0x158>)
 80069c0:	f003 fc94 	bl	800a2ec <HAL_GPIO_ReadPin>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d1f8      	bne.n	80069bc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80069ca:	2201      	movs	r2, #1
 80069cc:	2180      	movs	r1, #128	; 0x80
 80069ce:	481e      	ldr	r0, [pc, #120]	; (8006a48 <i2cTest+0x158>)
 80069d0:	f003 fca3 	bl	800a31a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80069d4:	200a      	movs	r0, #10
 80069d6:	f002 feb9 	bl	800974c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80069da:	bf00      	nop
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	481a      	ldr	r0, [pc, #104]	; (8006a48 <i2cTest+0x158>)
 80069e0:	f003 fc84 	bl	800a2ec <HAL_GPIO_ReadPin>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d1f8      	bne.n	80069dc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069ea:	23c0      	movs	r3, #192	; 0xc0
 80069ec:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80069ee:	2312      	movs	r3, #18
 80069f0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80069f2:	2301      	movs	r3, #1
 80069f4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80069f6:	2303      	movs	r3, #3
 80069f8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80069fa:	463b      	mov	r3, r7
 80069fc:	4619      	mov	r1, r3
 80069fe:	4812      	ldr	r0, [pc, #72]	; (8006a48 <i2cTest+0x158>)
 8006a00:	f003 fa14 	bl	8009e2c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <i2cTest+0x154>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <i2cTest+0x154>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a12:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <i2cTest+0x154>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <i2cTest+0x154>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a22:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <i2cTest+0x154>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <i2cTest+0x154>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006a34:	4803      	ldr	r0, [pc, #12]	; (8006a44 <i2cTest+0x154>)
 8006a36:	f003 fca1 	bl	800a37c <HAL_I2C_Init>
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000e5c 	.word	0x20000e5c
 8006a48:	40010c00 	.word	0x40010c00

08006a4c <checkLCDBacklight>:

void checkLCDBacklight() {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <checkLCDBacklight+0x34>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <checkLCDBacklight+0x38>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	1ad2      	subs	r2, r2, r3
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <checkLCDBacklight+0x3c>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	460b      	mov	r3, r1
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d303      	bcc.n	8006a74 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f7f9 ffed 	bl	8000a4c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006a72:	e002      	b.n	8006a7a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006a74:	2001      	movs	r0, #1
 8006a76:	f7f9 ffe9 	bl	8000a4c <lcd_backlight>
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000bd4 	.word	0x20000bd4
 8006a84:	20000bf0 	.word	0x20000bf0
 8006a88:	20000940 	.word	0x20000940

08006a8c <checkBasincSalteri>:

void checkBasincSalteri() {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <checkBasincSalteri+0x54>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <checkBasincSalteri+0x12>
		basincVar=1;
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <checkBasincSalteri+0x58>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <checkBasincSalteri+0x54>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d119      	bne.n	8006ada <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aaa:	480f      	ldr	r0, [pc, #60]	; (8006ae8 <checkBasincSalteri+0x5c>)
 8006aac:	f003 fc1e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <checkBasincSalteri+0x60>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <checkBasincSalteri+0x64>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d90a      	bls.n	8006ada <checkBasincSalteri+0x4e>
				basincVar=1;
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <checkBasincSalteri+0x58>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006aca:	e006      	b.n	8006ada <checkBasincSalteri+0x4e>
			timer5=millis;
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <checkBasincSalteri+0x60>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a07      	ldr	r2, [pc, #28]	; (8006af0 <checkBasincSalteri+0x64>)
 8006ad2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006ad4:	4b03      	ldr	r3, [pc, #12]	; (8006ae4 <checkBasincSalteri+0x58>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000ca4 	.word	0x20000ca4
 8006ae4:	20000ca0 	.word	0x20000ca0
 8006ae8:	40011000 	.word	0x40011000
 8006aec:	20000bd4 	.word	0x20000bd4
 8006af0:	20000bec 	.word	0x20000bec

08006af4 <checkBasGonder>:

void checkBasGonder() {
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <checkBasGonder+0x74>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10b      	bne.n	8006b18 <checkBasGonder+0x24>
 8006b00:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <checkBasGonder+0x78>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <checkBasGonder+0x24>
 8006b08:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <checkBasGonder+0x7c>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006b10:	4b18      	ldr	r3, [pc, #96]	; (8006b74 <checkBasGonder+0x80>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e009      	b.n	8006b2c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006b18:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <checkBasGonder+0x78>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <checkBasGonder+0x80>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <checkBasGonder+0x74>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10b      	bne.n	8006b4c <checkBasGonder+0x58>
 8006b34:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <checkBasGonder+0x84>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <checkBasGonder+0x58>
 8006b3c:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <checkBasGonder+0x7c>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d103      	bne.n	8006b4c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006b44:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <checkBasGonder+0x88>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006b4a:	e009      	b.n	8006b60 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <checkBasGonder+0x84>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f083 0301 	eor.w	r3, r3, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <checkBasGonder+0x88>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	20000c9e 	.word	0x20000c9e
 8006b6c:	20000cd2 	.word	0x20000cd2
 8006b70:	20000cac 	.word	0x20000cac
 8006b74:	20000cd9 	.word	0x20000cd9
 8006b78:	20000cd5 	.word	0x20000cd5
 8006b7c:	20000cda 	.word	0x20000cda

08006b80 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <checkKapiSecimleri+0x98>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006b8c:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006b92:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <checkKapiSecimleri+0x98>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10e      	bne.n	8006bb8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b9e:	4820      	ldr	r0, [pc, #128]	; (8006c20 <checkKapiSecimleri+0xa0>)
 8006ba0:	f003 fba4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006baa:	4b1c      	ldr	r3, [pc, #112]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e002      	b.n	8006bb8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006bb8:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <checkKapiSecimleri+0x98>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d10e      	bne.n	8006bde <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bc4:	4816      	ldr	r0, [pc, #88]	; (8006c20 <checkKapiSecimleri+0xa0>)
 8006bc6:	f003 fb91 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d103      	bne.n	8006bd8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e002      	b.n	8006bde <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006bd8:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <checkKapiSecimleri+0x98>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d116      	bne.n	8006c14 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bea:	480d      	ldr	r0, [pc, #52]	; (8006c20 <checkKapiSecimleri+0xa0>)
 8006bec:	f003 fb7e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <checkKapiSecimleri+0x8e>
 8006bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bfa:	4809      	ldr	r0, [pc, #36]	; (8006c20 <checkKapiSecimleri+0xa0>)
 8006bfc:	f003 fb76 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006c0c:	e002      	b.n	8006c14 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8006c0e:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <checkKapiSecimleri+0x9c>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000ca5 	.word	0x20000ca5
 8006c1c:	20000cf0 	.word	0x20000cf0
 8006c20:	40010800 	.word	0x40010800

08006c24 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006c28:	4b62      	ldr	r3, [pc, #392]	; (8006db4 <checkAktifCalisma+0x190>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f041 8332 	bne.w	8008296 <checkAktifCalisma+0x1672>
 8006c32:	4b61      	ldr	r3, [pc, #388]	; (8006db8 <checkAktifCalisma+0x194>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f041 832d 	bne.w	8008296 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006c3c:	4b5f      	ldr	r3, [pc, #380]	; (8006dbc <checkAktifCalisma+0x198>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11a      	bne.n	8006c7a <checkAktifCalisma+0x56>
 8006c44:	4b5e      	ldr	r3, [pc, #376]	; (8006dc0 <checkAktifCalisma+0x19c>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d116      	bne.n	8006c7a <checkAktifCalisma+0x56>
 8006c4c:	4b5d      	ldr	r3, [pc, #372]	; (8006dc4 <checkAktifCalisma+0x1a0>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <checkAktifCalisma+0x46>
 8006c54:	4b5c      	ldr	r3, [pc, #368]	; (8006dc8 <checkAktifCalisma+0x1a4>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f083 0301 	eor.w	r3, r3, #1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <checkAktifCalisma+0x46>
 8006c62:	4b5a      	ldr	r3, [pc, #360]	; (8006dcc <checkAktifCalisma+0x1a8>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d007      	beq.n	8006c7a <checkAktifCalisma+0x56>
 8006c6a:	4b59      	ldr	r3, [pc, #356]	; (8006dd0 <checkAktifCalisma+0x1ac>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d018      	beq.n	8006ca4 <checkAktifCalisma+0x80>
 8006c72:	4b58      	ldr	r3, [pc, #352]	; (8006dd4 <checkAktifCalisma+0x1b0>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d114      	bne.n	8006ca4 <checkAktifCalisma+0x80>
 8006c7a:	4b57      	ldr	r3, [pc, #348]	; (8006dd8 <checkAktifCalisma+0x1b4>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <checkAktifCalisma+0x80>
 8006c82:	4b56      	ldr	r3, [pc, #344]	; (8006ddc <checkAktifCalisma+0x1b8>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00c      	beq.n	8006ca4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c90:	4853      	ldr	r0, [pc, #332]	; (8006de0 <checkAktifCalisma+0x1bc>)
 8006c92:	f003 fb42 	bl	800a31a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006c96:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <checkAktifCalisma+0x1c0>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006c9c:	4b52      	ldr	r3, [pc, #328]	; (8006de8 <checkAktifCalisma+0x1c4>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e008      	b.n	8006cb6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006caa:	484d      	ldr	r0, [pc, #308]	; (8006de0 <checkAktifCalisma+0x1bc>)
 8006cac:	f003 fb35 	bl	800a31a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006cb0:	4b4c      	ldr	r3, [pc, #304]	; (8006de4 <checkAktifCalisma+0x1c0>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006cb6:	4b40      	ldr	r3, [pc, #256]	; (8006db8 <checkAktifCalisma+0x194>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d160      	bne.n	8006d80 <checkAktifCalisma+0x15c>
 8006cbe:	4b46      	ldr	r3, [pc, #280]	; (8006dd8 <checkAktifCalisma+0x1b4>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d05c      	beq.n	8006d80 <checkAktifCalisma+0x15c>
 8006cc6:	4b45      	ldr	r3, [pc, #276]	; (8006ddc <checkAktifCalisma+0x1b8>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d058      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8006cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cd2:	4843      	ldr	r0, [pc, #268]	; (8006de0 <checkAktifCalisma+0x1bc>)
 8006cd4:	f003 fb0a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <checkAktifCalisma+0xc2>
 8006cde:	4b43      	ldr	r3, [pc, #268]	; (8006dec <checkAktifCalisma+0x1c8>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d04c      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	4841      	ldr	r0, [pc, #260]	; (8006df0 <checkAktifCalisma+0x1cc>)
 8006cea:	f003 faff 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d145      	bne.n	8006d80 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006cf4:	4b3f      	ldr	r3, [pc, #252]	; (8006df4 <checkAktifCalisma+0x1d0>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d041      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d00:	4837      	ldr	r0, [pc, #220]	; (8006de0 <checkAktifCalisma+0x1bc>)
 8006d02:	f003 faf3 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10e      	bne.n	8006d2a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d10:	4833      	ldr	r0, [pc, #204]	; (8006de0 <checkAktifCalisma+0x1bc>)
 8006d12:	f003 faeb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d106      	bne.n	8006d2a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	4834      	ldr	r0, [pc, #208]	; (8006df0 <checkAktifCalisma+0x1cc>)
 8006d20:	f003 fae4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d003      	beq.n	8006d32 <checkAktifCalisma+0x10e>
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <checkAktifCalisma+0x198>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d026      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <checkAktifCalisma+0x1a0>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	f083 0301 	eor.w	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01f      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006d40:	4b1f      	ldr	r3, [pc, #124]	; (8006dc0 <checkAktifCalisma+0x19c>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f083 0301 	eor.w	r3, r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d018      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <checkAktifCalisma+0x1ac>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f083 0301 	eor.w	r3, r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d011      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006d5c:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <checkAktifCalisma+0x1d4>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f083 0301 	eor.w	r3, r3, #1
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <checkAktifCalisma+0x1d8>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006d78:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <checkAktifCalisma+0x198>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e002      	b.n	8006d86 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006d80:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <checkAktifCalisma+0x198>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <checkAktifCalisma+0x198>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d03a      	beq.n	8006e04 <checkAktifCalisma+0x1e0>
 8006d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d92:	4817      	ldr	r0, [pc, #92]	; (8006df0 <checkAktifCalisma+0x1cc>)
 8006d94:	f003 faaa 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d132      	bne.n	8006e04 <checkAktifCalisma+0x1e0>
 8006d9e:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <checkAktifCalisma+0x1dc>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02e      	beq.n	8006e04 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006da6:	2201      	movs	r2, #1
 8006da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dac:	480c      	ldr	r0, [pc, #48]	; (8006de0 <checkAktifCalisma+0x1bc>)
 8006dae:	f003 fab4 	bl	800a31a <HAL_GPIO_WritePin>
 8006db2:	e02d      	b.n	8006e10 <checkAktifCalisma+0x1ec>
 8006db4:	20000cbb 	.word	0x20000cbb
 8006db8:	20000cba 	.word	0x20000cba
 8006dbc:	20000cd2 	.word	0x20000cd2
 8006dc0:	20000cd3 	.word	0x20000cd3
 8006dc4:	20000cd5 	.word	0x20000cd5
 8006dc8:	20000ccd 	.word	0x20000ccd
 8006dcc:	20000cb0 	.word	0x20000cb0
 8006dd0:	20000cd4 	.word	0x20000cd4
 8006dd4:	20000caf 	.word	0x20000caf
 8006dd8:	20000cef 	.word	0x20000cef
 8006ddc:	20000cf0 	.word	0x20000cf0
 8006de0:	40010c00 	.word	0x40010c00
 8006de4:	20000cf1 	.word	0x20000cf1
 8006de8:	20000cdc 	.word	0x20000cdc
 8006dec:	20000cd9 	.word	0x20000cd9
 8006df0:	40011000 	.word	0x40011000
 8006df4:	20000ca0 	.word	0x20000ca0
 8006df8:	20000cd7 	.word	0x20000cd7
 8006dfc:	20000cd8 	.word	0x20000cd8
 8006e00:	20000cab 	.word	0x20000cab
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e0a:	4860      	ldr	r0, [pc, #384]	; (8006f8c <checkAktifCalisma+0x368>)
 8006e0c:	f003 fa85 	bl	800a31a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006e10:	4b5f      	ldr	r3, [pc, #380]	; (8006f90 <checkAktifCalisma+0x36c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <checkAktifCalisma+0x21c>
 8006e18:	4b5e      	ldr	r3, [pc, #376]	; (8006f94 <checkAktifCalisma+0x370>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d007      	beq.n	8006e30 <checkAktifCalisma+0x20c>
 8006e20:	4b5c      	ldr	r3, [pc, #368]	; (8006f94 <checkAktifCalisma+0x370>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d003      	beq.n	8006e30 <checkAktifCalisma+0x20c>
 8006e28:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <checkAktifCalisma+0x374>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006e30:	2201      	movs	r2, #1
 8006e32:	2104      	movs	r1, #4
 8006e34:	4855      	ldr	r0, [pc, #340]	; (8006f8c <checkAktifCalisma+0x368>)
 8006e36:	f003 fa70 	bl	800a31a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006e3a:	4b58      	ldr	r3, [pc, #352]	; (8006f9c <checkAktifCalisma+0x378>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006e40:	4b56      	ldr	r3, [pc, #344]	; (8006f9c <checkAktifCalisma+0x378>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d02f      	beq.n	8006ea8 <checkAktifCalisma+0x284>
 8006e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e4c:	484f      	ldr	r0, [pc, #316]	; (8006f8c <checkAktifCalisma+0x368>)
 8006e4e:	f003 fa4d 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d106      	bne.n	8006e66 <checkAktifCalisma+0x242>
 8006e58:	4b51      	ldr	r3, [pc, #324]	; (8006fa0 <checkAktifCalisma+0x37c>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f083 0301 	eor.w	r3, r3, #1
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <checkAktifCalisma+0x250>
 8006e66:	2102      	movs	r1, #2
 8006e68:	484e      	ldr	r0, [pc, #312]	; (8006fa4 <checkAktifCalisma+0x380>)
 8006e6a:	f003 fa3f 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d119      	bne.n	8006ea8 <checkAktifCalisma+0x284>
 8006e74:	4b4c      	ldr	r3, [pc, #304]	; (8006fa8 <checkAktifCalisma+0x384>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d015      	beq.n	8006ea8 <checkAktifCalisma+0x284>
 8006e7c:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <checkAktifCalisma+0x388>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d011      	beq.n	8006ea8 <checkAktifCalisma+0x284>
 8006e84:	4b4a      	ldr	r3, [pc, #296]	; (8006fb0 <checkAktifCalisma+0x38c>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <checkAktifCalisma+0x284>
 8006e8c:	4b49      	ldr	r3, [pc, #292]	; (8006fb4 <checkAktifCalisma+0x390>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f083 0301 	eor.w	r3, r3, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d006      	beq.n	8006ea8 <checkAktifCalisma+0x284>
			timer2=millis;
 8006e9a:	4b47      	ldr	r3, [pc, #284]	; (8006fb8 <checkAktifCalisma+0x394>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a47      	ldr	r2, [pc, #284]	; (8006fbc <checkAktifCalisma+0x398>)
 8006ea0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006ea2:	4b44      	ldr	r3, [pc, #272]	; (8006fb4 <checkAktifCalisma+0x390>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006ea8:	4b43      	ldr	r3, [pc, #268]	; (8006fb8 <checkAktifCalisma+0x394>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <checkAktifCalisma+0x398>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a43      	ldr	r2, [pc, #268]	; (8006fc0 <checkAktifCalisma+0x39c>)
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d303      	bcc.n	8006ec2 <checkAktifCalisma+0x29e>
 8006eba:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <checkAktifCalisma+0x390>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d111      	bne.n	8006ee6 <checkAktifCalisma+0x2c2>
 8006ec2:	4b39      	ldr	r3, [pc, #228]	; (8006fa8 <checkAktifCalisma+0x384>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f083 0301 	eor.w	r3, r3, #1
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <checkAktifCalisma+0x2c2>
 8006ed0:	4b36      	ldr	r3, [pc, #216]	; (8006fac <checkAktifCalisma+0x388>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f083 0301 	eor.w	r3, r3, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <checkAktifCalisma+0x2c2>
 8006ede:	4b34      	ldr	r3, [pc, #208]	; (8006fb0 <checkAktifCalisma+0x38c>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2104      	movs	r1, #4
 8006eea:	4828      	ldr	r0, [pc, #160]	; (8006f8c <checkAktifCalisma+0x368>)
 8006eec:	f003 fa15 	bl	800a31a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	; (8006f9c <checkAktifCalisma+0x378>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006ef6:	4b2f      	ldr	r3, [pc, #188]	; (8006fb4 <checkAktifCalisma+0x390>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006efc:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <checkAktifCalisma+0x3a0>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006f04:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <checkAktifCalisma+0x3a4>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006f0a:	4b2e      	ldr	r3, [pc, #184]	; (8006fc4 <checkAktifCalisma+0x3a0>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d116      	bne.n	8006f40 <checkAktifCalisma+0x31c>
 8006f12:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <checkAktifCalisma+0x3a8>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d112      	bne.n	8006f40 <checkAktifCalisma+0x31c>
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	4821      	ldr	r0, [pc, #132]	; (8006fa4 <checkAktifCalisma+0x380>)
 8006f1e:	f003 f9e5 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <checkAktifCalisma+0x31c>
 8006f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f2c:	4817      	ldr	r0, [pc, #92]	; (8006f8c <checkAktifCalisma+0x368>)
 8006f2e:	f003 f9dd 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d103      	bne.n	8006f40 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006f38:	4b23      	ldr	r3, [pc, #140]	; (8006fc8 <checkAktifCalisma+0x3a4>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e011      	b.n	8006f64 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006f40:	4b20      	ldr	r3, [pc, #128]	; (8006fc4 <checkAktifCalisma+0x3a0>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d10d      	bne.n	8006f64 <checkAktifCalisma+0x340>
 8006f48:	2101      	movs	r1, #1
 8006f4a:	4816      	ldr	r0, [pc, #88]	; (8006fa4 <checkAktifCalisma+0x380>)
 8006f4c:	f003 f9ce 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d106      	bne.n	8006f64 <checkAktifCalisma+0x340>
 8006f56:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <checkAktifCalisma+0x3a8>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006f5e:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <checkAktifCalisma+0x3a4>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006f64:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <checkAktifCalisma+0x3a0>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d134      	bne.n	8006fd6 <checkAktifCalisma+0x3b2>
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <checkAktifCalisma+0x3a8>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d130      	bne.n	8006fd6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006f74:	2101      	movs	r1, #1
 8006f76:	480b      	ldr	r0, [pc, #44]	; (8006fa4 <checkAktifCalisma+0x380>)
 8006f78:	f003 f9b8 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d126      	bne.n	8006fd0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <checkAktifCalisma+0x3a4>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e025      	b.n	8006fd6 <checkAktifCalisma+0x3b2>
 8006f8a:	bf00      	nop
 8006f8c:	40010c00 	.word	0x40010c00
 8006f90:	20000cd2 	.word	0x20000cd2
 8006f94:	20000cac 	.word	0x20000cac
 8006f98:	20000cb0 	.word	0x20000cb0
 8006f9c:	20000cd6 	.word	0x20000cd6
 8006fa0:	20000cd9 	.word	0x20000cd9
 8006fa4:	40011000 	.word	0x40011000
 8006fa8:	20000cef 	.word	0x20000cef
 8006fac:	20000cf0 	.word	0x20000cf0
 8006fb0:	20000ca0 	.word	0x20000ca0
 8006fb4:	20000cce 	.word	0x20000cce
 8006fb8:	20000bd4 	.word	0x20000bd4
 8006fbc:	20000be0 	.word	0x20000be0
 8006fc0:	20000cb1 	.word	0x20000cb1
 8006fc4:	20000ca1 	.word	0x20000ca1
 8006fc8:	20000cf4 	.word	0x20000cf4
 8006fcc:	20000c9e 	.word	0x20000c9e
			} else {
				cerceveVar=0;
 8006fd0:	4b7f      	ldr	r3, [pc, #508]	; (80071d0 <checkAktifCalisma+0x5ac>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <checkAktifCalisma+0x5b0>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d17c      	bne.n	80070d8 <checkAktifCalisma+0x4b4>
 8006fde:	4b7e      	ldr	r3, [pc, #504]	; (80071d8 <checkAktifCalisma+0x5b4>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d078      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
 8006fe6:	4b7d      	ldr	r3, [pc, #500]	; (80071dc <checkAktifCalisma+0x5b8>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d074      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ff2:	487b      	ldr	r0, [pc, #492]	; (80071e0 <checkAktifCalisma+0x5bc>)
 8006ff4:	f003 f97a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <checkAktifCalisma+0x3e2>
 8006ffe:	4b79      	ldr	r3, [pc, #484]	; (80071e4 <checkAktifCalisma+0x5c0>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d068      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8007006:	4b72      	ldr	r3, [pc, #456]	; (80071d0 <checkAktifCalisma+0x5ac>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d064      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
 800700e:	4b76      	ldr	r3, [pc, #472]	; (80071e8 <checkAktifCalisma+0x5c4>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f083 0301 	eor.w	r3, r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d05d      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800701c:	2104      	movs	r1, #4
 800701e:	4873      	ldr	r0, [pc, #460]	; (80071ec <checkAktifCalisma+0x5c8>)
 8007020:	f003 f964 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <checkAktifCalisma+0x40e>
 800702a:	4b71      	ldr	r3, [pc, #452]	; (80071f0 <checkAktifCalisma+0x5cc>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d152      	bne.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8007032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007036:	486a      	ldr	r0, [pc, #424]	; (80071e0 <checkAktifCalisma+0x5bc>)
 8007038:	f003 f958 	bl	800a2ec <HAL_GPIO_ReadPin>
 800703c:	4603      	mov	r3, r0
 800703e:	2b01      	cmp	r3, #1
 8007040:	d10e      	bne.n	8007060 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8007042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007046:	4866      	ldr	r0, [pc, #408]	; (80071e0 <checkAktifCalisma+0x5bc>)
 8007048:	f003 f950 	bl	800a2ec <HAL_GPIO_ReadPin>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d106      	bne.n	8007060 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8007052:	2140      	movs	r1, #64	; 0x40
 8007054:	4865      	ldr	r0, [pc, #404]	; (80071ec <checkAktifCalisma+0x5c8>)
 8007056:	f003 f949 	bl	800a2ec <HAL_GPIO_ReadPin>
 800705a:	4603      	mov	r3, r0
 800705c:	2b01      	cmp	r3, #1
 800705e:	d003      	beq.n	8007068 <checkAktifCalisma+0x444>
 8007060:	4b64      	ldr	r3, [pc, #400]	; (80071f4 <checkAktifCalisma+0x5d0>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d037      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8007068:	4b63      	ldr	r3, [pc, #396]	; (80071f8 <checkAktifCalisma+0x5d4>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f083 0301 	eor.w	r3, r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d030      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8007076:	4b61      	ldr	r3, [pc, #388]	; (80071fc <checkAktifCalisma+0x5d8>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f083 0301 	eor.w	r3, r3, #1
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d029      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8007084:	4b5e      	ldr	r3, [pc, #376]	; (8007200 <checkAktifCalisma+0x5dc>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f083 0301 	eor.w	r3, r3, #1
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d022      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8007092:	4b5c      	ldr	r3, [pc, #368]	; (8007204 <checkAktifCalisma+0x5e0>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f083 0301 	eor.w	r3, r3, #1
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01b      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80070a0:	4b59      	ldr	r3, [pc, #356]	; (8007208 <checkAktifCalisma+0x5e4>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d014      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80070ae:	4b57      	ldr	r3, [pc, #348]	; (800720c <checkAktifCalisma+0x5e8>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f083 0301 	eor.w	r3, r3, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00d      	beq.n	80070d8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80070bc:	2201      	movs	r2, #1
 80070be:	2102      	movs	r1, #2
 80070c0:	4847      	ldr	r0, [pc, #284]	; (80071e0 <checkAktifCalisma+0x5bc>)
 80070c2:	f003 f92a 	bl	800a31a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80070c6:	4b4b      	ldr	r3, [pc, #300]	; (80071f4 <checkAktifCalisma+0x5d0>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80070cc:	4b50      	ldr	r3, [pc, #320]	; (8007210 <checkAktifCalisma+0x5ec>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80070d2:	4b50      	ldr	r3, [pc, #320]	; (8007214 <checkAktifCalisma+0x5f0>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80070d8:	4b46      	ldr	r3, [pc, #280]	; (80071f4 <checkAktifCalisma+0x5d0>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d033      	beq.n	8007148 <checkAktifCalisma+0x524>
 80070e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80070e4:	483e      	ldr	r0, [pc, #248]	; (80071e0 <checkAktifCalisma+0x5bc>)
 80070e6:	f003 f901 	bl	800a2ec <HAL_GPIO_ReadPin>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d106      	bne.n	80070fe <checkAktifCalisma+0x4da>
 80070f0:	4b3c      	ldr	r3, [pc, #240]	; (80071e4 <checkAktifCalisma+0x5c0>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	f083 0301 	eor.w	r3, r3, #1
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <checkAktifCalisma+0x4f0>
 80070fe:	2104      	movs	r1, #4
 8007100:	483a      	ldr	r0, [pc, #232]	; (80071ec <checkAktifCalisma+0x5c8>)
 8007102:	f003 f8f3 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007106:	4603      	mov	r3, r0
 8007108:	2b01      	cmp	r3, #1
 800710a:	d11d      	bne.n	8007148 <checkAktifCalisma+0x524>
 800710c:	4b38      	ldr	r3, [pc, #224]	; (80071f0 <checkAktifCalisma+0x5cc>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d019      	beq.n	8007148 <checkAktifCalisma+0x524>
 8007114:	4b30      	ldr	r3, [pc, #192]	; (80071d8 <checkAktifCalisma+0x5b4>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d015      	beq.n	8007148 <checkAktifCalisma+0x524>
 800711c:	4b2f      	ldr	r3, [pc, #188]	; (80071dc <checkAktifCalisma+0x5b8>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d011      	beq.n	8007148 <checkAktifCalisma+0x524>
 8007124:	4b2a      	ldr	r3, [pc, #168]	; (80071d0 <checkAktifCalisma+0x5ac>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <checkAktifCalisma+0x524>
 800712c:	4b3a      	ldr	r3, [pc, #232]	; (8007218 <checkAktifCalisma+0x5f4>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f083 0301 	eor.w	r3, r3, #1
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d006      	beq.n	8007148 <checkAktifCalisma+0x524>
			timer2=millis;
 800713a:	4b38      	ldr	r3, [pc, #224]	; (800721c <checkAktifCalisma+0x5f8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a38      	ldr	r2, [pc, #224]	; (8007220 <checkAktifCalisma+0x5fc>)
 8007140:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8007142:	4b35      	ldr	r3, [pc, #212]	; (8007218 <checkAktifCalisma+0x5f4>)
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8007148:	4b34      	ldr	r3, [pc, #208]	; (800721c <checkAktifCalisma+0x5f8>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b34      	ldr	r3, [pc, #208]	; (8007220 <checkAktifCalisma+0x5fc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	4a34      	ldr	r2, [pc, #208]	; (8007224 <checkAktifCalisma+0x600>)
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	4293      	cmp	r3, r2
 8007158:	d303      	bcc.n	8007162 <checkAktifCalisma+0x53e>
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <checkAktifCalisma+0x5f4>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d114      	bne.n	800718c <checkAktifCalisma+0x568>
 8007162:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <checkAktifCalisma+0x5b4>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f083 0301 	eor.w	r3, r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10d      	bne.n	800718c <checkAktifCalisma+0x568>
 8007170:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <checkAktifCalisma+0x5b8>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f083 0301 	eor.w	r3, r3, #1
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <checkAktifCalisma+0x568>
 800717e:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <checkAktifCalisma+0x5ac>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f083 0301 	eor.w	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800718c:	2200      	movs	r2, #0
 800718e:	2102      	movs	r1, #2
 8007190:	4813      	ldr	r0, [pc, #76]	; (80071e0 <checkAktifCalisma+0x5bc>)
 8007192:	f003 f8c2 	bl	800a31a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <checkAktifCalisma+0x5d0>)
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800719c:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <checkAktifCalisma+0x5f4>)
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <checkAktifCalisma+0x5d0>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d040      	beq.n	800722c <checkAktifCalisma+0x608>
 80071aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071ae:	480f      	ldr	r0, [pc, #60]	; (80071ec <checkAktifCalisma+0x5c8>)
 80071b0:	f003 f89c 	bl	800a2ec <HAL_GPIO_ReadPin>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d138      	bne.n	800722c <checkAktifCalisma+0x608>
 80071ba:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <checkAktifCalisma+0x604>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d034      	beq.n	800722c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80071c2:	2201      	movs	r2, #1
 80071c4:	2101      	movs	r1, #1
 80071c6:	4806      	ldr	r0, [pc, #24]	; (80071e0 <checkAktifCalisma+0x5bc>)
 80071c8:	f003 f8a7 	bl	800a31a <HAL_GPIO_WritePin>
 80071cc:	e033      	b.n	8007236 <checkAktifCalisma+0x612>
 80071ce:	bf00      	nop
 80071d0:	20000cf4 	.word	0x20000cf4
 80071d4:	20000cba 	.word	0x20000cba
 80071d8:	20000cef 	.word	0x20000cef
 80071dc:	20000cf0 	.word	0x20000cf0
 80071e0:	40010c00 	.word	0x40010c00
 80071e4:	20000cda 	.word	0x20000cda
 80071e8:	20000cee 	.word	0x20000cee
 80071ec:	40011000 	.word	0x40011000
 80071f0:	20000ca3 	.word	0x20000ca3
 80071f4:	20000cd5 	.word	0x20000cd5
 80071f8:	20000cd2 	.word	0x20000cd2
 80071fc:	20000cd6 	.word	0x20000cd6
 8007200:	20000cd3 	.word	0x20000cd3
 8007204:	20000cd4 	.word	0x20000cd4
 8007208:	20000cd7 	.word	0x20000cd7
 800720c:	20000cd8 	.word	0x20000cd8
 8007210:	20000cdd 	.word	0x20000cdd
 8007214:	20000cfe 	.word	0x20000cfe
 8007218:	20000ccd 	.word	0x20000ccd
 800721c:	20000bd4 	.word	0x20000bd4
 8007220:	20000be0 	.word	0x20000be0
 8007224:	20000cb2 	.word	0x20000cb2
 8007228:	20000ca2 	.word	0x20000ca2
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800722c:	2200      	movs	r2, #0
 800722e:	2101      	movs	r1, #1
 8007230:	4836      	ldr	r0, [pc, #216]	; (800730c <checkAktifCalisma+0x6e8>)
 8007232:	f003 f872 	bl	800a31a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8007236:	4b36      	ldr	r3, [pc, #216]	; (8007310 <checkAktifCalisma+0x6ec>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f040 8080 	bne.w	8007340 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8007240:	4b34      	ldr	r3, [pc, #208]	; (8007314 <checkAktifCalisma+0x6f0>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d003      	beq.n	8007250 <checkAktifCalisma+0x62c>
 8007248:	4b32      	ldr	r3, [pc, #200]	; (8007314 <checkAktifCalisma+0x6f0>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d177      	bne.n	8007340 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8007250:	4b31      	ldr	r3, [pc, #196]	; (8007318 <checkAktifCalisma+0x6f4>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d073      	beq.n	8007340 <checkAktifCalisma+0x71c>
 8007258:	4b30      	ldr	r3, [pc, #192]	; (800731c <checkAktifCalisma+0x6f8>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d06f      	beq.n	8007340 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8007260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007264:	4829      	ldr	r0, [pc, #164]	; (800730c <checkAktifCalisma+0x6e8>)
 8007266:	f003 f841 	bl	800a2ec <HAL_GPIO_ReadPin>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d167      	bne.n	8007340 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8007270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007274:	482a      	ldr	r0, [pc, #168]	; (8007320 <checkAktifCalisma+0x6fc>)
 8007276:	f003 f839 	bl	800a2ec <HAL_GPIO_ReadPin>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <checkAktifCalisma+0x664>
 8007280:	4b28      	ldr	r3, [pc, #160]	; (8007324 <checkAktifCalisma+0x700>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d15b      	bne.n	8007340 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8007288:	2140      	movs	r1, #64	; 0x40
 800728a:	4825      	ldr	r0, [pc, #148]	; (8007320 <checkAktifCalisma+0x6fc>)
 800728c:	f003 f82e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d10f      	bne.n	80072b6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8007296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800729a:	481c      	ldr	r0, [pc, #112]	; (800730c <checkAktifCalisma+0x6e8>)
 800729c:	f003 f826 	bl	800a2ec <HAL_GPIO_ReadPin>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d107      	bne.n	80072b6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80072a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072aa:	4818      	ldr	r0, [pc, #96]	; (800730c <checkAktifCalisma+0x6e8>)
 80072ac:	f003 f81e 	bl	800a2ec <HAL_GPIO_ReadPin>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d003      	beq.n	80072be <checkAktifCalisma+0x69a>
 80072b6:	4b1c      	ldr	r3, [pc, #112]	; (8007328 <checkAktifCalisma+0x704>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d040      	beq.n	8007340 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80072be:	4b1b      	ldr	r3, [pc, #108]	; (800732c <checkAktifCalisma+0x708>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	f083 0301 	eor.w	r3, r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d039      	beq.n	8007340 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80072cc:	4b18      	ldr	r3, [pc, #96]	; (8007330 <checkAktifCalisma+0x70c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f083 0301 	eor.w	r3, r3, #1
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d032      	beq.n	8007340 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80072da:	4b16      	ldr	r3, [pc, #88]	; (8007334 <checkAktifCalisma+0x710>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	f083 0301 	eor.w	r3, r3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02b      	beq.n	8007340 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80072e8:	4b13      	ldr	r3, [pc, #76]	; (8007338 <checkAktifCalisma+0x714>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f083 0301 	eor.w	r3, r3, #1
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d024      	beq.n	8007340 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80072f6:	4b11      	ldr	r3, [pc, #68]	; (800733c <checkAktifCalisma+0x718>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f083 0301 	eor.w	r3, r3, #1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01d      	beq.n	8007340 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <checkAktifCalisma+0x704>)
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e01c      	b.n	8007346 <checkAktifCalisma+0x722>
 800730c:	40010c00 	.word	0x40010c00
 8007310:	20000cba 	.word	0x20000cba
 8007314:	20000cac 	.word	0x20000cac
 8007318:	20000cef 	.word	0x20000cef
 800731c:	20000cf0 	.word	0x20000cf0
 8007320:	40011000 	.word	0x40011000
 8007324:	20000cad 	.word	0x20000cad
 8007328:	20000cd3 	.word	0x20000cd3
 800732c:	20000cd2 	.word	0x20000cd2
 8007330:	20000cd6 	.word	0x20000cd6
 8007334:	20000cd5 	.word	0x20000cd5
 8007338:	20000cd4 	.word	0x20000cd4
 800733c:	20000cd8 	.word	0x20000cd8
		} else {
			devmotoryukaricalisiyor=0;
 8007340:	4b64      	ldr	r3, [pc, #400]	; (80074d4 <checkAktifCalisma+0x8b0>)
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8007346:	4b63      	ldr	r3, [pc, #396]	; (80074d4 <checkAktifCalisma+0x8b0>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800734e:	2201      	movs	r2, #1
 8007350:	2120      	movs	r1, #32
 8007352:	4861      	ldr	r0, [pc, #388]	; (80074d8 <checkAktifCalisma+0x8b4>)
 8007354:	f002 ffe1 	bl	800a31a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8007358:	4b60      	ldr	r3, [pc, #384]	; (80074dc <checkAktifCalisma+0x8b8>)
 800735a:	2201      	movs	r2, #1
 800735c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800735e:	4b5f      	ldr	r3, [pc, #380]	; (80074dc <checkAktifCalisma+0x8b8>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d025      	beq.n	80073b2 <checkAktifCalisma+0x78e>
 8007366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800736a:	485d      	ldr	r0, [pc, #372]	; (80074e0 <checkAktifCalisma+0x8bc>)
 800736c:	f002 ffbe 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d007      	beq.n	8007386 <checkAktifCalisma+0x762>
 8007376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800737a:	4857      	ldr	r0, [pc, #348]	; (80074d8 <checkAktifCalisma+0x8b4>)
 800737c:	f002 ffb6 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007380:	4603      	mov	r3, r0
 8007382:	2b01      	cmp	r3, #1
 8007384:	d115      	bne.n	80073b2 <checkAktifCalisma+0x78e>
 8007386:	4b57      	ldr	r3, [pc, #348]	; (80074e4 <checkAktifCalisma+0x8c0>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <checkAktifCalisma+0x78e>
 800738e:	4b56      	ldr	r3, [pc, #344]	; (80074e8 <checkAktifCalisma+0x8c4>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <checkAktifCalisma+0x78e>
 8007396:	4b55      	ldr	r3, [pc, #340]	; (80074ec <checkAktifCalisma+0x8c8>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	f083 0301 	eor.w	r3, r3, #1
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d006      	beq.n	80073b2 <checkAktifCalisma+0x78e>
			timer2=millis;
 80073a4:	4b52      	ldr	r3, [pc, #328]	; (80074f0 <checkAktifCalisma+0x8cc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a52      	ldr	r2, [pc, #328]	; (80074f4 <checkAktifCalisma+0x8d0>)
 80073aa:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80073ac:	4b4f      	ldr	r3, [pc, #316]	; (80074ec <checkAktifCalisma+0x8c8>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80073b2:	4b4f      	ldr	r3, [pc, #316]	; (80074f0 <checkAktifCalisma+0x8cc>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b4f      	ldr	r3, [pc, #316]	; (80074f4 <checkAktifCalisma+0x8d0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	4a4e      	ldr	r2, [pc, #312]	; (80074f8 <checkAktifCalisma+0x8d4>)
 80073be:	7812      	ldrb	r2, [r2, #0]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d303      	bcc.n	80073cc <checkAktifCalisma+0x7a8>
 80073c4:	4b49      	ldr	r3, [pc, #292]	; (80074ec <checkAktifCalisma+0x8c8>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10d      	bne.n	80073e8 <checkAktifCalisma+0x7c4>
 80073cc:	4b45      	ldr	r3, [pc, #276]	; (80074e4 <checkAktifCalisma+0x8c0>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f083 0301 	eor.w	r3, r3, #1
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <checkAktifCalisma+0x7c4>
 80073da:	4b43      	ldr	r3, [pc, #268]	; (80074e8 <checkAktifCalisma+0x8c4>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f083 0301 	eor.w	r3, r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80073e8:	2200      	movs	r2, #0
 80073ea:	2120      	movs	r1, #32
 80073ec:	483a      	ldr	r0, [pc, #232]	; (80074d8 <checkAktifCalisma+0x8b4>)
 80073ee:	f002 ff94 	bl	800a31a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80073f2:	4b3a      	ldr	r3, [pc, #232]	; (80074dc <checkAktifCalisma+0x8b8>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80073f8:	4b3c      	ldr	r3, [pc, #240]	; (80074ec <checkAktifCalisma+0x8c8>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80073fe:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <checkAktifCalisma+0x8d8>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 8088 	bne.w	8007518 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8007408:	4b3d      	ldr	r3, [pc, #244]	; (8007500 <checkAktifCalisma+0x8dc>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d003      	beq.n	8007418 <checkAktifCalisma+0x7f4>
 8007410:	4b3b      	ldr	r3, [pc, #236]	; (8007500 <checkAktifCalisma+0x8dc>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d17f      	bne.n	8007518 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8007418:	4b32      	ldr	r3, [pc, #200]	; (80074e4 <checkAktifCalisma+0x8c0>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d07b      	beq.n	8007518 <checkAktifCalisma+0x8f4>
 8007420:	4b31      	ldr	r3, [pc, #196]	; (80074e8 <checkAktifCalisma+0x8c4>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d077      	beq.n	8007518 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8007428:	2140      	movs	r1, #64	; 0x40
 800742a:	482b      	ldr	r0, [pc, #172]	; (80074d8 <checkAktifCalisma+0x8b4>)
 800742c:	f002 ff5e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d170      	bne.n	8007518 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8007436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800743a:	4827      	ldr	r0, [pc, #156]	; (80074d8 <checkAktifCalisma+0x8b4>)
 800743c:	f002 ff56 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <checkAktifCalisma+0x82a>
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <checkAktifCalisma+0x8e0>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d164      	bne.n	8007518 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800744e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007452:	4823      	ldr	r0, [pc, #140]	; (80074e0 <checkAktifCalisma+0x8bc>)
 8007454:	f002 ff4a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	d10f      	bne.n	800747e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800745e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007462:	481f      	ldr	r0, [pc, #124]	; (80074e0 <checkAktifCalisma+0x8bc>)
 8007464:	f002 ff42 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007468:	4603      	mov	r3, r0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d107      	bne.n	800747e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800746e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007472:	481b      	ldr	r0, [pc, #108]	; (80074e0 <checkAktifCalisma+0x8bc>)
 8007474:	f002 ff3a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007478:	4603      	mov	r3, r0
 800747a:	2b01      	cmp	r3, #1
 800747c:	d003      	beq.n	8007486 <checkAktifCalisma+0x862>
 800747e:	4b22      	ldr	r3, [pc, #136]	; (8007508 <checkAktifCalisma+0x8e4>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d048      	beq.n	8007518 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8007486:	4b21      	ldr	r3, [pc, #132]	; (800750c <checkAktifCalisma+0x8e8>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f083 0301 	eor.w	r3, r3, #1
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d041      	beq.n	8007518 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8007494:	4b1e      	ldr	r3, [pc, #120]	; (8007510 <checkAktifCalisma+0x8ec>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f083 0301 	eor.w	r3, r3, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d03a      	beq.n	8007518 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80074a2:	4b1c      	ldr	r3, [pc, #112]	; (8007514 <checkAktifCalisma+0x8f0>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f083 0301 	eor.w	r3, r3, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d033      	beq.n	8007518 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <checkAktifCalisma+0x8b8>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f083 0301 	eor.w	r3, r3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d02c      	beq.n	8007518 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <checkAktifCalisma+0x8b0>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f083 0301 	eor.w	r3, r3, #1
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d025      	beq.n	8007518 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <checkAktifCalisma+0x8e4>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e024      	b.n	800751e <checkAktifCalisma+0x8fa>
 80074d4:	20000cd3 	.word	0x20000cd3
 80074d8:	40011000 	.word	0x40011000
 80074dc:	20000cd7 	.word	0x20000cd7
 80074e0:	40010c00 	.word	0x40010c00
 80074e4:	20000cef 	.word	0x20000cef
 80074e8:	20000cf0 	.word	0x20000cf0
 80074ec:	20000ccf 	.word	0x20000ccf
 80074f0:	20000bd4 	.word	0x20000bd4
 80074f4:	20000be0 	.word	0x20000be0
 80074f8:	20000cb3 	.word	0x20000cb3
 80074fc:	20000cba 	.word	0x20000cba
 8007500:	20000cac 	.word	0x20000cac
 8007504:	20000cae 	.word	0x20000cae
 8007508:	20000cd4 	.word	0x20000cd4
 800750c:	20000cd2 	.word	0x20000cd2
 8007510:	20000cd6 	.word	0x20000cd6
 8007514:	20000cd5 	.word	0x20000cd5
		} else {
			devmotorasagicalisiyor=0;
 8007518:	4b96      	ldr	r3, [pc, #600]	; (8007774 <checkAktifCalisma+0xb50>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800751e:	4b95      	ldr	r3, [pc, #596]	; (8007774 <checkAktifCalisma+0xb50>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007526:	2201      	movs	r2, #1
 8007528:	2110      	movs	r1, #16
 800752a:	4893      	ldr	r0, [pc, #588]	; (8007778 <checkAktifCalisma+0xb54>)
 800752c:	f002 fef5 	bl	800a31a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8007530:	4b92      	ldr	r3, [pc, #584]	; (800777c <checkAktifCalisma+0xb58>)
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8007536:	4b91      	ldr	r3, [pc, #580]	; (800777c <checkAktifCalisma+0xb58>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d024      	beq.n	8007588 <checkAktifCalisma+0x964>
 800753e:	2140      	movs	r1, #64	; 0x40
 8007540:	488d      	ldr	r0, [pc, #564]	; (8007778 <checkAktifCalisma+0xb54>)
 8007542:	f002 fed3 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007546:	4603      	mov	r3, r0
 8007548:	2b01      	cmp	r3, #1
 800754a:	d007      	beq.n	800755c <checkAktifCalisma+0x938>
 800754c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007550:	4889      	ldr	r0, [pc, #548]	; (8007778 <checkAktifCalisma+0xb54>)
 8007552:	f002 fecb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007556:	4603      	mov	r3, r0
 8007558:	2b01      	cmp	r3, #1
 800755a:	d115      	bne.n	8007588 <checkAktifCalisma+0x964>
 800755c:	4b88      	ldr	r3, [pc, #544]	; (8007780 <checkAktifCalisma+0xb5c>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <checkAktifCalisma+0x964>
 8007564:	4b87      	ldr	r3, [pc, #540]	; (8007784 <checkAktifCalisma+0xb60>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <checkAktifCalisma+0x964>
 800756c:	4b86      	ldr	r3, [pc, #536]	; (8007788 <checkAktifCalisma+0xb64>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f083 0301 	eor.w	r3, r3, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d006      	beq.n	8007588 <checkAktifCalisma+0x964>
			timer2=millis;
 800757a:	4b84      	ldr	r3, [pc, #528]	; (800778c <checkAktifCalisma+0xb68>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a84      	ldr	r2, [pc, #528]	; (8007790 <checkAktifCalisma+0xb6c>)
 8007580:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8007582:	4b81      	ldr	r3, [pc, #516]	; (8007788 <checkAktifCalisma+0xb64>)
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007588:	4b80      	ldr	r3, [pc, #512]	; (800778c <checkAktifCalisma+0xb68>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4b80      	ldr	r3, [pc, #512]	; (8007790 <checkAktifCalisma+0xb6c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a80      	ldr	r2, [pc, #512]	; (8007794 <checkAktifCalisma+0xb70>)
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	4293      	cmp	r3, r2
 8007598:	d303      	bcc.n	80075a2 <checkAktifCalisma+0x97e>
 800759a:	4b7b      	ldr	r3, [pc, #492]	; (8007788 <checkAktifCalisma+0xb64>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10d      	bne.n	80075be <checkAktifCalisma+0x99a>
 80075a2:	4b77      	ldr	r3, [pc, #476]	; (8007780 <checkAktifCalisma+0xb5c>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	f083 0301 	eor.w	r3, r3, #1
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <checkAktifCalisma+0x99a>
 80075b0:	4b74      	ldr	r3, [pc, #464]	; (8007784 <checkAktifCalisma+0xb60>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f083 0301 	eor.w	r3, r3, #1
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80075be:	2200      	movs	r2, #0
 80075c0:	2110      	movs	r1, #16
 80075c2:	486d      	ldr	r0, [pc, #436]	; (8007778 <checkAktifCalisma+0xb54>)
 80075c4:	f002 fea9 	bl	800a31a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80075c8:	4b6c      	ldr	r3, [pc, #432]	; (800777c <checkAktifCalisma+0xb58>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80075ce:	4b6e      	ldr	r3, [pc, #440]	; (8007788 <checkAktifCalisma+0xb64>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80075d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075d8:	486f      	ldr	r0, [pc, #444]	; (8007798 <checkAktifCalisma+0xb74>)
 80075da:	f002 fe87 	bl	800a2ec <HAL_GPIO_ReadPin>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d120      	bne.n	8007626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80075e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075e8:	486b      	ldr	r0, [pc, #428]	; (8007798 <checkAktifCalisma+0xb74>)
 80075ea:	f002 fe7f 	bl	800a2ec <HAL_GPIO_ReadPin>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d118      	bne.n	8007626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80075f4:	2104      	movs	r1, #4
 80075f6:	4868      	ldr	r0, [pc, #416]	; (8007798 <checkAktifCalisma+0xb74>)
 80075f8:	f002 fe78 	bl	800a2ec <HAL_GPIO_ReadPin>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d111      	bne.n	8007626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8007602:	2102      	movs	r1, #2
 8007604:	4864      	ldr	r0, [pc, #400]	; (8007798 <checkAktifCalisma+0xb74>)
 8007606:	f002 fe71 	bl	800a2ec <HAL_GPIO_ReadPin>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8007610:	2101      	movs	r1, #1
 8007612:	4861      	ldr	r0, [pc, #388]	; (8007798 <checkAktifCalisma+0xb74>)
 8007614:	f002 fe6a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <checkAktifCalisma+0xa02>
			makineStop=1;
 800761e:	4b5f      	ldr	r3, [pc, #380]	; (800779c <checkAktifCalisma+0xb78>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e002      	b.n	800762c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8007626:	4b5d      	ldr	r3, [pc, #372]	; (800779c <checkAktifCalisma+0xb78>)
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800762c:	4b5c      	ldr	r3, [pc, #368]	; (80077a0 <checkAktifCalisma+0xb7c>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d144      	bne.n	80076be <checkAktifCalisma+0xa9a>
 8007634:	4b5b      	ldr	r3, [pc, #364]	; (80077a4 <checkAktifCalisma+0xb80>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d003      	beq.n	8007644 <checkAktifCalisma+0xa20>
 800763c:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <checkAktifCalisma+0xb80>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d13c      	bne.n	80076be <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007644:	2180      	movs	r1, #128	; 0x80
 8007646:	484c      	ldr	r0, [pc, #304]	; (8007778 <checkAktifCalisma+0xb54>)
 8007648:	f002 fe50 	bl	800a2ec <HAL_GPIO_ReadPin>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <checkAktifCalisma+0xa36>
 8007652:	4b55      	ldr	r3, [pc, #340]	; (80077a8 <checkAktifCalisma+0xb84>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <checkAktifCalisma+0xa4e>
 800765a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800765e:	484e      	ldr	r0, [pc, #312]	; (8007798 <checkAktifCalisma+0xb74>)
 8007660:	f002 fe44 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d129      	bne.n	80076be <checkAktifCalisma+0xa9a>
 800766a:	4b4f      	ldr	r3, [pc, #316]	; (80077a8 <checkAktifCalisma+0xb84>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d125      	bne.n	80076be <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007672:	2104      	movs	r1, #4
 8007674:	4840      	ldr	r0, [pc, #256]	; (8007778 <checkAktifCalisma+0xb54>)
 8007676:	f002 fe39 	bl	800a2ec <HAL_GPIO_ReadPin>
 800767a:	4603      	mov	r3, r0
 800767c:	2b01      	cmp	r3, #1
 800767e:	d003      	beq.n	8007688 <checkAktifCalisma+0xa64>
 8007680:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <checkAktifCalisma+0xb88>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007688:	2102      	movs	r1, #2
 800768a:	483b      	ldr	r0, [pc, #236]	; (8007778 <checkAktifCalisma+0xb54>)
 800768c:	f002 fe2e 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d113      	bne.n	80076be <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8007696:	4b46      	ldr	r3, [pc, #280]	; (80077b0 <checkAktifCalisma+0xb8c>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	f083 0301 	eor.w	r3, r3, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00c      	beq.n	80076be <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80076a4:	4b3d      	ldr	r3, [pc, #244]	; (800779c <checkAktifCalisma+0xb78>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80076ac:	4b41      	ldr	r3, [pc, #260]	; (80077b4 <checkAktifCalisma+0xb90>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <checkAktifCalisma+0xb68>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a40      	ldr	r2, [pc, #256]	; (80077b8 <checkAktifCalisma+0xb94>)
 80076b8:	6013      	str	r3, [r2, #0]
			bekle();
 80076ba:	f7ff f87d 	bl	80067b8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <checkAktifCalisma+0xb68>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b3d      	ldr	r3, [pc, #244]	; (80077b8 <checkAktifCalisma+0xb94>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	4a3c      	ldr	r2, [pc, #240]	; (80077bc <checkAktifCalisma+0xb98>)
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d211      	bcs.n	80076f4 <checkAktifCalisma+0xad0>
 80076d0:	2104      	movs	r1, #4
 80076d2:	4829      	ldr	r0, [pc, #164]	; (8007778 <checkAktifCalisma+0xb54>)
 80076d4:	f002 fe0a 	bl	800a2ec <HAL_GPIO_ReadPin>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <checkAktifCalisma+0xad0>
 80076de:	4b33      	ldr	r3, [pc, #204]	; (80077ac <checkAktifCalisma+0xb88>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d006      	beq.n	80076f4 <checkAktifCalisma+0xad0>
 80076e6:	4b2d      	ldr	r3, [pc, #180]	; (800779c <checkAktifCalisma+0xb78>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f083 0301 	eor.w	r3, r3, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80076f4:	4b2f      	ldr	r3, [pc, #188]	; (80077b4 <checkAktifCalisma+0xb90>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80076fa:	4b29      	ldr	r3, [pc, #164]	; (80077a0 <checkAktifCalisma+0xb7c>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d160      	bne.n	80077c4 <checkAktifCalisma+0xba0>
 8007702:	4b28      	ldr	r3, [pc, #160]	; (80077a4 <checkAktifCalisma+0xb80>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d003      	beq.n	8007712 <checkAktifCalisma+0xaee>
 800770a:	4b26      	ldr	r3, [pc, #152]	; (80077a4 <checkAktifCalisma+0xb80>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d158      	bne.n	80077c4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007712:	2104      	movs	r1, #4
 8007714:	4818      	ldr	r0, [pc, #96]	; (8007778 <checkAktifCalisma+0xb54>)
 8007716:	f002 fde9 	bl	800a2ec <HAL_GPIO_ReadPin>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d003      	beq.n	8007728 <checkAktifCalisma+0xb04>
 8007720:	4b22      	ldr	r3, [pc, #136]	; (80077ac <checkAktifCalisma+0xb88>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d14d      	bne.n	80077c4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007728:	2102      	movs	r1, #2
 800772a:	4813      	ldr	r0, [pc, #76]	; (8007778 <checkAktifCalisma+0xb54>)
 800772c:	f002 fdde 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d146      	bne.n	80077c4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007736:	2180      	movs	r1, #128	; 0x80
 8007738:	480f      	ldr	r0, [pc, #60]	; (8007778 <checkAktifCalisma+0xb54>)
 800773a:	f002 fdd7 	bl	800a2ec <HAL_GPIO_ReadPin>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <checkAktifCalisma+0xb28>
 8007744:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <checkAktifCalisma+0xb84>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <checkAktifCalisma+0xb40>
 800774c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007750:	4811      	ldr	r0, [pc, #68]	; (8007798 <checkAktifCalisma+0xb74>)
 8007752:	f002 fdcb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d133      	bne.n	80077c4 <checkAktifCalisma+0xba0>
 800775c:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <checkAktifCalisma+0xb84>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d12f      	bne.n	80077c4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007764:	4b0d      	ldr	r3, [pc, #52]	; (800779c <checkAktifCalisma+0xb78>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d02b      	beq.n	80077c4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800776c:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <checkAktifCalisma+0xb9c>)
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e02a      	b.n	80077ca <checkAktifCalisma+0xba6>
 8007774:	20000cd4 	.word	0x20000cd4
 8007778:	40011000 	.word	0x40011000
 800777c:	20000cd8 	.word	0x20000cd8
 8007780:	20000cef 	.word	0x20000cef
 8007784:	20000cf0 	.word	0x20000cf0
 8007788:	20000cd0 	.word	0x20000cd0
 800778c:	20000bd4 	.word	0x20000bd4
 8007790:	20000be0 	.word	0x20000be0
 8007794:	20000cb3 	.word	0x20000cb3
 8007798:	40010c00 	.word	0x40010c00
 800779c:	20000cdf 	.word	0x20000cdf
 80077a0:	20000ca6 	.word	0x20000ca6
 80077a4:	20000ca5 	.word	0x20000ca5
 80077a8:	20000ca9 	.word	0x20000ca9
 80077ac:	20000ca3 	.word	0x20000ca3
 80077b0:	20000ccc 	.word	0x20000ccc
 80077b4:	20000ce0 	.word	0x20000ce0
 80077b8:	20000bd8 	.word	0x20000bd8
 80077bc:	20000cb6 	.word	0x20000cb6
 80077c0:	20000ce1 	.word	0x20000ce1
		} else {
			kapi1butonkontrol=0;
 80077c4:	4b8b      	ldr	r3, [pc, #556]	; (80079f4 <checkAktifCalisma+0xdd0>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80077ca:	4b8b      	ldr	r3, [pc, #556]	; (80079f8 <checkAktifCalisma+0xdd4>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d121      	bne.n	8007816 <checkAktifCalisma+0xbf2>
 80077d2:	4b8a      	ldr	r3, [pc, #552]	; (80079fc <checkAktifCalisma+0xdd8>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d003      	beq.n	80077e2 <checkAktifCalisma+0xbbe>
 80077da:	4b88      	ldr	r3, [pc, #544]	; (80079fc <checkAktifCalisma+0xdd8>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d119      	bne.n	8007816 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80077e2:	2104      	movs	r1, #4
 80077e4:	4886      	ldr	r0, [pc, #536]	; (8007a00 <checkAktifCalisma+0xddc>)
 80077e6:	f002 fd81 	bl	800a2ec <HAL_GPIO_ReadPin>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d003      	beq.n	80077f8 <checkAktifCalisma+0xbd4>
 80077f0:	4b84      	ldr	r3, [pc, #528]	; (8007a04 <checkAktifCalisma+0xde0>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10e      	bne.n	8007816 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80077f8:	2102      	movs	r1, #2
 80077fa:	4881      	ldr	r0, [pc, #516]	; (8007a00 <checkAktifCalisma+0xddc>)
 80077fc:	f002 fd76 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d107      	bne.n	8007816 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007806:	4b80      	ldr	r3, [pc, #512]	; (8007a08 <checkAktifCalisma+0xde4>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800780e:	4b7f      	ldr	r3, [pc, #508]	; (8007a0c <checkAktifCalisma+0xde8>)
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e002      	b.n	800781c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8007816:	4b7d      	ldr	r3, [pc, #500]	; (8007a0c <checkAktifCalisma+0xde8>)
 8007818:	2200      	movs	r2, #0
 800781a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800781c:	4b75      	ldr	r3, [pc, #468]	; (80079f4 <checkAktifCalisma+0xdd0>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d107      	bne.n	8007834 <checkAktifCalisma+0xc10>
 8007824:	4b79      	ldr	r3, [pc, #484]	; (8007a0c <checkAktifCalisma+0xde8>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <checkAktifCalisma+0xc10>
 800782c:	4b78      	ldr	r3, [pc, #480]	; (8007a10 <checkAktifCalisma+0xdec>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007834:	2201      	movs	r2, #1
 8007836:	2180      	movs	r1, #128	; 0x80
 8007838:	4876      	ldr	r0, [pc, #472]	; (8007a14 <checkAktifCalisma+0xdf0>)
 800783a:	f002 fd6e 	bl	800a31a <HAL_GPIO_WritePin>
 800783e:	e004      	b.n	800784a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007840:	2200      	movs	r2, #0
 8007842:	2180      	movs	r1, #128	; 0x80
 8007844:	4873      	ldr	r0, [pc, #460]	; (8007a14 <checkAktifCalisma+0xdf0>)
 8007846:	f002 fd68 	bl	800a31a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800784a:	4b73      	ldr	r3, [pc, #460]	; (8007a18 <checkAktifCalisma+0xdf4>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d141      	bne.n	80078d6 <checkAktifCalisma+0xcb2>
 8007852:	4b6a      	ldr	r3, [pc, #424]	; (80079fc <checkAktifCalisma+0xdd8>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d003      	beq.n	8007862 <checkAktifCalisma+0xc3e>
 800785a:	4b68      	ldr	r3, [pc, #416]	; (80079fc <checkAktifCalisma+0xdd8>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d139      	bne.n	80078d6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007866:	4866      	ldr	r0, [pc, #408]	; (8007a00 <checkAktifCalisma+0xddc>)
 8007868:	f002 fd40 	bl	800a2ec <HAL_GPIO_ReadPin>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d103      	bne.n	800787a <checkAktifCalisma+0xc56>
 8007872:	4b6a      	ldr	r3, [pc, #424]	; (8007a1c <checkAktifCalisma+0xdf8>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <checkAktifCalisma+0xc6e>
 800787a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800787e:	4868      	ldr	r0, [pc, #416]	; (8007a20 <checkAktifCalisma+0xdfc>)
 8007880:	f002 fd34 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d125      	bne.n	80078d6 <checkAktifCalisma+0xcb2>
 800788a:	4b64      	ldr	r3, [pc, #400]	; (8007a1c <checkAktifCalisma+0xdf8>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d121      	bne.n	80078d6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007892:	2102      	movs	r1, #2
 8007894:	485a      	ldr	r0, [pc, #360]	; (8007a00 <checkAktifCalisma+0xddc>)
 8007896:	f002 fd29 	bl	800a2ec <HAL_GPIO_ReadPin>
 800789a:	4603      	mov	r3, r0
 800789c:	2b01      	cmp	r3, #1
 800789e:	d11a      	bne.n	80078d6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80078a0:	2104      	movs	r1, #4
 80078a2:	4857      	ldr	r0, [pc, #348]	; (8007a00 <checkAktifCalisma+0xddc>)
 80078a4:	f002 fd22 	bl	800a2ec <HAL_GPIO_ReadPin>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d113      	bne.n	80078d6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80078ae:	4b56      	ldr	r3, [pc, #344]	; (8007a08 <checkAktifCalisma+0xde4>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00f      	beq.n	80078d6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80078b6:	4b5b      	ldr	r3, [pc, #364]	; (8007a24 <checkAktifCalisma+0xe00>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	f083 0301 	eor.w	r3, r3, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80078c4:	4b58      	ldr	r3, [pc, #352]	; (8007a28 <checkAktifCalisma+0xe04>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80078ca:	4b58      	ldr	r3, [pc, #352]	; (8007a2c <checkAktifCalisma+0xe08>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a58      	ldr	r2, [pc, #352]	; (8007a30 <checkAktifCalisma+0xe0c>)
 80078d0:	6013      	str	r3, [r2, #0]
			bekle();
 80078d2:	f7fe ff71 	bl	80067b8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80078d6:	4b55      	ldr	r3, [pc, #340]	; (8007a2c <checkAktifCalisma+0xe08>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b55      	ldr	r3, [pc, #340]	; (8007a30 <checkAktifCalisma+0xe0c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	4a54      	ldr	r2, [pc, #336]	; (8007a34 <checkAktifCalisma+0xe10>)
 80078e2:	7812      	ldrb	r2, [r2, #0]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d20d      	bcs.n	8007904 <checkAktifCalisma+0xce0>
 80078e8:	2102      	movs	r1, #2
 80078ea:	4845      	ldr	r0, [pc, #276]	; (8007a00 <checkAktifCalisma+0xddc>)
 80078ec:	f002 fcfe 	bl	800a2ec <HAL_GPIO_ReadPin>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <checkAktifCalisma+0xce0>
 80078f6:	4b44      	ldr	r3, [pc, #272]	; (8007a08 <checkAktifCalisma+0xde4>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f083 0301 	eor.w	r3, r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007904:	4b48      	ldr	r3, [pc, #288]	; (8007a28 <checkAktifCalisma+0xe04>)
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800790a:	4b43      	ldr	r3, [pc, #268]	; (8007a18 <checkAktifCalisma+0xdf4>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d135      	bne.n	800797e <checkAktifCalisma+0xd5a>
 8007912:	4b3a      	ldr	r3, [pc, #232]	; (80079fc <checkAktifCalisma+0xdd8>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d003      	beq.n	8007922 <checkAktifCalisma+0xcfe>
 800791a:	4b38      	ldr	r3, [pc, #224]	; (80079fc <checkAktifCalisma+0xdd8>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d12d      	bne.n	800797e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007926:	4836      	ldr	r0, [pc, #216]	; (8007a00 <checkAktifCalisma+0xddc>)
 8007928:	f002 fce0 	bl	800a2ec <HAL_GPIO_ReadPin>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <checkAktifCalisma+0xd16>
 8007932:	4b3a      	ldr	r3, [pc, #232]	; (8007a1c <checkAktifCalisma+0xdf8>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <checkAktifCalisma+0xd2e>
 800793a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800793e:	4838      	ldr	r0, [pc, #224]	; (8007a20 <checkAktifCalisma+0xdfc>)
 8007940:	f002 fcd4 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d119      	bne.n	800797e <checkAktifCalisma+0xd5a>
 800794a:	4b34      	ldr	r3, [pc, #208]	; (8007a1c <checkAktifCalisma+0xdf8>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d115      	bne.n	800797e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007952:	2102      	movs	r1, #2
 8007954:	482a      	ldr	r0, [pc, #168]	; (8007a00 <checkAktifCalisma+0xddc>)
 8007956:	f002 fcc9 	bl	800a2ec <HAL_GPIO_ReadPin>
 800795a:	4603      	mov	r3, r0
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10e      	bne.n	800797e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007960:	2104      	movs	r1, #4
 8007962:	4827      	ldr	r0, [pc, #156]	; (8007a00 <checkAktifCalisma+0xddc>)
 8007964:	f002 fcc2 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800796e:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <checkAktifCalisma+0xde4>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007976:	4b30      	ldr	r3, [pc, #192]	; (8007a38 <checkAktifCalisma+0xe14>)
 8007978:	2201      	movs	r2, #1
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e002      	b.n	8007984 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800797e:	4b2e      	ldr	r3, [pc, #184]	; (8007a38 <checkAktifCalisma+0xe14>)
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <checkAktifCalisma+0xdf4>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d11d      	bne.n	80079c8 <checkAktifCalisma+0xda4>
 800798c:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <checkAktifCalisma+0xdd8>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d003      	beq.n	800799c <checkAktifCalisma+0xd78>
 8007994:	4b19      	ldr	r3, [pc, #100]	; (80079fc <checkAktifCalisma+0xdd8>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d115      	bne.n	80079c8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800799c:	2102      	movs	r1, #2
 800799e:	4818      	ldr	r0, [pc, #96]	; (8007a00 <checkAktifCalisma+0xddc>)
 80079a0:	f002 fca4 	bl	800a2ec <HAL_GPIO_ReadPin>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d10e      	bne.n	80079c8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80079aa:	2104      	movs	r1, #4
 80079ac:	4814      	ldr	r0, [pc, #80]	; (8007a00 <checkAktifCalisma+0xddc>)
 80079ae:	f002 fc9d 	bl	800a2ec <HAL_GPIO_ReadPin>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d107      	bne.n	80079c8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <checkAktifCalisma+0xde4>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80079c0:	4b1e      	ldr	r3, [pc, #120]	; (8007a3c <checkAktifCalisma+0xe18>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e002      	b.n	80079ce <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80079c8:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <checkAktifCalisma+0xe18>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80079ce:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <checkAktifCalisma+0xe14>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d107      	bne.n	80079e6 <checkAktifCalisma+0xdc2>
 80079d6:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <checkAktifCalisma+0xe18>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <checkAktifCalisma+0xdc2>
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <checkAktifCalisma+0xe04>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02c      	beq.n	8007a40 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80079e6:	2201      	movs	r2, #1
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	480a      	ldr	r0, [pc, #40]	; (8007a14 <checkAktifCalisma+0xdf0>)
 80079ec:	f002 fc95 	bl	800a31a <HAL_GPIO_WritePin>
 80079f0:	e02b      	b.n	8007a4a <checkAktifCalisma+0xe26>
 80079f2:	bf00      	nop
 80079f4:	20000ce1 	.word	0x20000ce1
 80079f8:	20000ca6 	.word	0x20000ca6
 80079fc:	20000ca5 	.word	0x20000ca5
 8007a00:	40011000 	.word	0x40011000
 8007a04:	20000ca3 	.word	0x20000ca3
 8007a08:	20000cdf 	.word	0x20000cdf
 8007a0c:	20000ce2 	.word	0x20000ce2
 8007a10:	20000ce0 	.word	0x20000ce0
 8007a14:	40010800 	.word	0x40010800
 8007a18:	20000ca7 	.word	0x20000ca7
 8007a1c:	20000ca9 	.word	0x20000ca9
 8007a20:	40010c00 	.word	0x40010c00
 8007a24:	20000ccc 	.word	0x20000ccc
 8007a28:	20000ce3 	.word	0x20000ce3
 8007a2c:	20000bd4 	.word	0x20000bd4
 8007a30:	20000bd8 	.word	0x20000bd8
 8007a34:	20000cb7 	.word	0x20000cb7
 8007a38:	20000ce4 	.word	0x20000ce4
 8007a3c:	20000ce5 	.word	0x20000ce5
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007a40:	2200      	movs	r2, #0
 8007a42:	2140      	movs	r1, #64	; 0x40
 8007a44:	488d      	ldr	r0, [pc, #564]	; (8007c7c <checkAktifCalisma+0x1058>)
 8007a46:	f002 fc68 	bl	800a31a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007a4a:	4b8d      	ldr	r3, [pc, #564]	; (8007c80 <checkAktifCalisma+0x105c>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <checkAktifCalisma+0xe36>
 8007a52:	4b8b      	ldr	r3, [pc, #556]	; (8007c80 <checkAktifCalisma+0x105c>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d115      	bne.n	8007a86 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	4889      	ldr	r0, [pc, #548]	; (8007c84 <checkAktifCalisma+0x1060>)
 8007a5e:	f002 fc45 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d003      	beq.n	8007a70 <checkAktifCalisma+0xe4c>
 8007a68:	4b87      	ldr	r3, [pc, #540]	; (8007c88 <checkAktifCalisma+0x1064>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007a70:	2102      	movs	r1, #2
 8007a72:	4884      	ldr	r0, [pc, #528]	; (8007c84 <checkAktifCalisma+0x1060>)
 8007a74:	f002 fc3a 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d103      	bne.n	8007a86 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007a7e:	4b83      	ldr	r3, [pc, #524]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e002      	b.n	8007a8c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007a86:	4b81      	ldr	r3, [pc, #516]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007a8c:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <checkAktifCalisma+0x105c>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d003      	beq.n	8007a9c <checkAktifCalisma+0xe78>
 8007a94:	4b7a      	ldr	r3, [pc, #488]	; (8007c80 <checkAktifCalisma+0x105c>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d111      	bne.n	8007ac0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	4879      	ldr	r0, [pc, #484]	; (8007c84 <checkAktifCalisma+0x1060>)
 8007aa0:	f002 fc24 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d10a      	bne.n	8007ac0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007aaa:	2104      	movs	r1, #4
 8007aac:	4875      	ldr	r0, [pc, #468]	; (8007c84 <checkAktifCalisma+0x1060>)
 8007aae:	f002 fc1d 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007ab8:	4b75      	ldr	r3, [pc, #468]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007aba:	2201      	movs	r2, #1
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e002      	b.n	8007ac6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007ac0:	4b73      	ldr	r3, [pc, #460]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007ac6:	4b71      	ldr	r3, [pc, #452]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00f      	beq.n	8007aee <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8007ace:	4b71      	ldr	r3, [pc, #452]	; (8007c94 <checkAktifCalisma+0x1070>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10b      	bne.n	8007aee <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ada:	486f      	ldr	r0, [pc, #444]	; (8007c98 <checkAktifCalisma+0x1074>)
 8007adc:	f002 fc06 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007ae6:	4b6d      	ldr	r3, [pc, #436]	; (8007c9c <checkAktifCalisma+0x1078>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e002      	b.n	8007af4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8007aee:	4b6b      	ldr	r3, [pc, #428]	; (8007c9c <checkAktifCalisma+0x1078>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007af4:	4b66      	ldr	r3, [pc, #408]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00f      	beq.n	8007b1c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007afc:	4b65      	ldr	r3, [pc, #404]	; (8007c94 <checkAktifCalisma+0x1070>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10b      	bne.n	8007b1c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b08:	4863      	ldr	r0, [pc, #396]	; (8007c98 <checkAktifCalisma+0x1074>)
 8007b0a:	f002 fbef 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d103      	bne.n	8007b1c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007b14:	4b62      	ldr	r3, [pc, #392]	; (8007ca0 <checkAktifCalisma+0x107c>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007b1c:	4b60      	ldr	r3, [pc, #384]	; (8007ca0 <checkAktifCalisma+0x107c>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007b22:	4b60      	ldr	r3, [pc, #384]	; (8007ca4 <checkAktifCalisma+0x1080>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d137      	bne.n	8007b9a <checkAktifCalisma+0xf76>
 8007b2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ca8 <checkAktifCalisma+0x1084>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d003      	beq.n	8007b3a <checkAktifCalisma+0xf16>
 8007b32:	4b5d      	ldr	r3, [pc, #372]	; (8007ca8 <checkAktifCalisma+0x1084>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d12f      	bne.n	8007b9a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007b3a:	4b54      	ldr	r3, [pc, #336]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <checkAktifCalisma+0xf26>
 8007b42:	4b53      	ldr	r3, [pc, #332]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d027      	beq.n	8007b9a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b4e:	484d      	ldr	r0, [pc, #308]	; (8007c84 <checkAktifCalisma+0x1060>)
 8007b50:	f002 fbcc 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d103      	bne.n	8007b62 <checkAktifCalisma+0xf3e>
 8007b5a:	4b4e      	ldr	r3, [pc, #312]	; (8007c94 <checkAktifCalisma+0x1070>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007b62:	4b4e      	ldr	r3, [pc, #312]	; (8007c9c <checkAktifCalisma+0x1078>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <checkAktifCalisma+0xf4e>
 8007b6a:	4b4d      	ldr	r3, [pc, #308]	; (8007ca0 <checkAktifCalisma+0x107c>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d013      	beq.n	8007b9a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007b72:	4b4e      	ldr	r3, [pc, #312]	; (8007cac <checkAktifCalisma+0x1088>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007b7a:	4b4d      	ldr	r3, [pc, #308]	; (8007cb0 <checkAktifCalisma+0x108c>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f083 0301 	eor.w	r3, r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007b88:	4b4a      	ldr	r3, [pc, #296]	; (8007cb4 <checkAktifCalisma+0x1090>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007b8e:	4b4a      	ldr	r3, [pc, #296]	; (8007cb8 <checkAktifCalisma+0x1094>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a4a      	ldr	r2, [pc, #296]	; (8007cbc <checkAktifCalisma+0x1098>)
 8007b94:	6013      	str	r3, [r2, #0]
			bekle();
 8007b96:	f7fe fe0f 	bl	80067b8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007b9a:	4b47      	ldr	r3, [pc, #284]	; (8007cb8 <checkAktifCalisma+0x1094>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b47      	ldr	r3, [pc, #284]	; (8007cbc <checkAktifCalisma+0x1098>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	4a46      	ldr	r2, [pc, #280]	; (8007cc0 <checkAktifCalisma+0x109c>)
 8007ba6:	7812      	ldrb	r2, [r2, #0]
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d214      	bcs.n	8007bd6 <checkAktifCalisma+0xfb2>
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f083 0301 	eor.w	r3, r3, #1
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d006      	beq.n	8007bc8 <checkAktifCalisma+0xfa4>
 8007bba:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	f083 0301 	eor.w	r3, r3, #1
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <checkAktifCalisma+0xfb2>
 8007bc8:	4b38      	ldr	r3, [pc, #224]	; (8007cac <checkAktifCalisma+0x1088>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f083 0301 	eor.w	r3, r3, #1
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007bd6:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <checkAktifCalisma+0x1090>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007bdc:	4b31      	ldr	r3, [pc, #196]	; (8007ca4 <checkAktifCalisma+0x1080>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d12b      	bne.n	8007c3c <checkAktifCalisma+0x1018>
 8007be4:	4b30      	ldr	r3, [pc, #192]	; (8007ca8 <checkAktifCalisma+0x1084>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d003      	beq.n	8007bf4 <checkAktifCalisma+0xfd0>
 8007bec:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <checkAktifCalisma+0x1084>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d123      	bne.n	8007c3c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <checkAktifCalisma+0xfe0>
 8007bfc:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01b      	beq.n	8007c3c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c08:	481e      	ldr	r0, [pc, #120]	; (8007c84 <checkAktifCalisma+0x1060>)
 8007c0a:	f002 fb6f 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d103      	bne.n	8007c1c <checkAktifCalisma+0xff8>
 8007c14:	4b1f      	ldr	r3, [pc, #124]	; (8007c94 <checkAktifCalisma+0x1070>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007c1c:	4b1f      	ldr	r3, [pc, #124]	; (8007c9c <checkAktifCalisma+0x1078>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <checkAktifCalisma+0x1008>
 8007c24:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <checkAktifCalisma+0x107c>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007c2c:	4b1f      	ldr	r3, [pc, #124]	; (8007cac <checkAktifCalisma+0x1088>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007c34:	4b23      	ldr	r3, [pc, #140]	; (8007cc4 <checkAktifCalisma+0x10a0>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007c3c:	4b21      	ldr	r3, [pc, #132]	; (8007cc4 <checkAktifCalisma+0x10a0>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <checkAktifCalisma+0x1080>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d140      	bne.n	8007ccc <checkAktifCalisma+0x10a8>
 8007c4a:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <checkAktifCalisma+0x1084>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d003      	beq.n	8007c5a <checkAktifCalisma+0x1036>
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <checkAktifCalisma+0x1084>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d138      	bne.n	8007ccc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <checkAktifCalisma+0x1068>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <checkAktifCalisma+0x1046>
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <checkAktifCalisma+0x106c>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d030      	beq.n	8007ccc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007c6a:	4b10      	ldr	r3, [pc, #64]	; (8007cac <checkAktifCalisma+0x1088>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d02c      	beq.n	8007ccc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <checkAktifCalisma+0x10a4>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e02b      	b.n	8007cd2 <checkAktifCalisma+0x10ae>
 8007c7a:	bf00      	nop
 8007c7c:	40010800 	.word	0x40010800
 8007c80:	20000caa 	.word	0x20000caa
 8007c84:	40011000 	.word	0x40011000
 8007c88:	20000ca3 	.word	0x20000ca3
 8007c8c:	20000ce9 	.word	0x20000ce9
 8007c90:	20000cea 	.word	0x20000cea
 8007c94:	20000ca9 	.word	0x20000ca9
 8007c98:	40010c00 	.word	0x40010c00
 8007c9c:	20000cf9 	.word	0x20000cf9
 8007ca0:	20000cfa 	.word	0x20000cfa
 8007ca4:	20000ca8 	.word	0x20000ca8
 8007ca8:	20000ca5 	.word	0x20000ca5
 8007cac:	20000cdf 	.word	0x20000cdf
 8007cb0:	20000ccc 	.word	0x20000ccc
 8007cb4:	20000ce6 	.word	0x20000ce6
 8007cb8:	20000bd4 	.word	0x20000bd4
 8007cbc:	20000bd8 	.word	0x20000bd8
 8007cc0:	20000cb8 	.word	0x20000cb8
 8007cc4:	20000ce7 	.word	0x20000ce7
 8007cc8:	20000ce8 	.word	0x20000ce8
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007ccc:	4b89      	ldr	r3, [pc, #548]	; (8007ef4 <checkAktifCalisma+0x12d0>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007cd2:	4b89      	ldr	r3, [pc, #548]	; (8007ef8 <checkAktifCalisma+0x12d4>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d107      	bne.n	8007cea <checkAktifCalisma+0x10c6>
 8007cda:	4b88      	ldr	r3, [pc, #544]	; (8007efc <checkAktifCalisma+0x12d8>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <checkAktifCalisma+0x10c6>
 8007ce2:	4b84      	ldr	r3, [pc, #528]	; (8007ef4 <checkAktifCalisma+0x12d0>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007cea:	2201      	movs	r2, #1
 8007cec:	2120      	movs	r1, #32
 8007cee:	4884      	ldr	r0, [pc, #528]	; (8007f00 <checkAktifCalisma+0x12dc>)
 8007cf0:	f002 fb13 	bl	800a31a <HAL_GPIO_WritePin>
 8007cf4:	e004      	b.n	8007d00 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2120      	movs	r1, #32
 8007cfa:	4881      	ldr	r0, [pc, #516]	; (8007f00 <checkAktifCalisma+0x12dc>)
 8007cfc:	f002 fb0d 	bl	800a31a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007d00:	4b80      	ldr	r3, [pc, #512]	; (8007f04 <checkAktifCalisma+0x12e0>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <checkAktifCalisma+0x1102>
 8007d08:	2102      	movs	r1, #2
 8007d0a:	487f      	ldr	r0, [pc, #508]	; (8007f08 <checkAktifCalisma+0x12e4>)
 8007d0c:	f002 faee 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d107      	bne.n	8007d26 <checkAktifCalisma+0x1102>
 8007d16:	4b7d      	ldr	r3, [pc, #500]	; (8007f0c <checkAktifCalisma+0x12e8>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d103      	bne.n	8007d26 <checkAktifCalisma+0x1102>
 8007d1e:	4b7c      	ldr	r3, [pc, #496]	; (8007f10 <checkAktifCalisma+0x12ec>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d112      	bne.n	8007d4c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007d26:	4b7b      	ldr	r3, [pc, #492]	; (8007f14 <checkAktifCalisma+0x12f0>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d066      	beq.n	8007dfc <checkAktifCalisma+0x11d8>
 8007d2e:	2104      	movs	r1, #4
 8007d30:	4875      	ldr	r0, [pc, #468]	; (8007f08 <checkAktifCalisma+0x12e4>)
 8007d32:	f002 fadb 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d15f      	bne.n	8007dfc <checkAktifCalisma+0x11d8>
 8007d3c:	4b73      	ldr	r3, [pc, #460]	; (8007f0c <checkAktifCalisma+0x12e8>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d05b      	beq.n	8007dfc <checkAktifCalisma+0x11d8>
 8007d44:	4b72      	ldr	r3, [pc, #456]	; (8007f10 <checkAktifCalisma+0x12ec>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d057      	beq.n	8007dfc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007d4c:	4b72      	ldr	r3, [pc, #456]	; (8007f18 <checkAktifCalisma+0x12f4>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	4b70      	ldr	r3, [pc, #448]	; (8007f18 <checkAktifCalisma+0x12f4>)
 8007d56:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007d58:	4b6f      	ldr	r3, [pc, #444]	; (8007f18 <checkAktifCalisma+0x12f4>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d908      	bls.n	8007d72 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007d60:	4b6d      	ldr	r3, [pc, #436]	; (8007f18 <checkAktifCalisma+0x12f4>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007d66:	4b6d      	ldr	r3, [pc, #436]	; (8007f1c <checkAktifCalisma+0x12f8>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	4b6b      	ldr	r3, [pc, #428]	; (8007f1c <checkAktifCalisma+0x12f8>)
 8007d70:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007d72:	4b6a      	ldr	r3, [pc, #424]	; (8007f1c <checkAktifCalisma+0x12f8>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d908      	bls.n	8007d8c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007d7a:	4b68      	ldr	r3, [pc, #416]	; (8007f1c <checkAktifCalisma+0x12f8>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007d80:	4b67      	ldr	r3, [pc, #412]	; (8007f20 <checkAktifCalisma+0x12fc>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	4b65      	ldr	r3, [pc, #404]	; (8007f20 <checkAktifCalisma+0x12fc>)
 8007d8a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007d8c:	4b64      	ldr	r3, [pc, #400]	; (8007f20 <checkAktifCalisma+0x12fc>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b09      	cmp	r3, #9
 8007d92:	d908      	bls.n	8007da6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007d94:	4b62      	ldr	r3, [pc, #392]	; (8007f20 <checkAktifCalisma+0x12fc>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007d9a:	4b62      	ldr	r3, [pc, #392]	; (8007f24 <checkAktifCalisma+0x1300>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	4b60      	ldr	r3, [pc, #384]	; (8007f24 <checkAktifCalisma+0x1300>)
 8007da4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007da6:	4b5f      	ldr	r3, [pc, #380]	; (8007f24 <checkAktifCalisma+0x1300>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b09      	cmp	r3, #9
 8007dac:	d908      	bls.n	8007dc0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007dae:	4b5d      	ldr	r3, [pc, #372]	; (8007f24 <checkAktifCalisma+0x1300>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007db4:	4b5c      	ldr	r3, [pc, #368]	; (8007f28 <checkAktifCalisma+0x1304>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	4b5a      	ldr	r3, [pc, #360]	; (8007f28 <checkAktifCalisma+0x1304>)
 8007dbe:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007dc0:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <checkAktifCalisma+0x1304>)
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	4b59      	ldr	r3, [pc, #356]	; (8007f2c <checkAktifCalisma+0x1308>)
 8007dc6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007dca:	4b56      	ldr	r3, [pc, #344]	; (8007f24 <checkAktifCalisma+0x1300>)
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	4b57      	ldr	r3, [pc, #348]	; (8007f2c <checkAktifCalisma+0x1308>)
 8007dd0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007dd2:	4b53      	ldr	r3, [pc, #332]	; (8007f20 <checkAktifCalisma+0x12fc>)
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	4b55      	ldr	r3, [pc, #340]	; (8007f2c <checkAktifCalisma+0x1308>)
 8007dd8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007dda:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <checkAktifCalisma+0x12f8>)
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	4b53      	ldr	r3, [pc, #332]	; (8007f2c <checkAktifCalisma+0x1308>)
 8007de0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007de2:	4b4d      	ldr	r3, [pc, #308]	; (8007f18 <checkAktifCalisma+0x12f4>)
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	4b51      	ldr	r3, [pc, #324]	; (8007f2c <checkAktifCalisma+0x1308>)
 8007de8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <checkAktifCalisma+0x130c>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007df0:	4b44      	ldr	r3, [pc, #272]	; (8007f04 <checkAktifCalisma+0x12e0>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007df6:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <checkAktifCalisma+0x12f0>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e00:	484c      	ldr	r0, [pc, #304]	; (8007f34 <checkAktifCalisma+0x1310>)
 8007e02:	f002 fa73 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d016      	beq.n	8007e3a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e10:	4848      	ldr	r0, [pc, #288]	; (8007f34 <checkAktifCalisma+0x1310>)
 8007e12:	f002 fa6b 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e20:	4844      	ldr	r0, [pc, #272]	; (8007f34 <checkAktifCalisma+0x1310>)
 8007e22:	f002 fa63 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007e2c:	2140      	movs	r1, #64	; 0x40
 8007e2e:	4836      	ldr	r0, [pc, #216]	; (8007f08 <checkAktifCalisma+0x12e4>)
 8007e30:	f002 fa5c 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <checkAktifCalisma+0x121e>
			startBasili=1;
 8007e3a:	4b3f      	ldr	r3, [pc, #252]	; (8007f38 <checkAktifCalisma+0x1314>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e002      	b.n	8007e48 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007e42:	4b3d      	ldr	r3, [pc, #244]	; (8007f38 <checkAktifCalisma+0x1314>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007e48:	4b3b      	ldr	r3, [pc, #236]	; (8007f38 <checkAktifCalisma+0x1314>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d014      	beq.n	8007e7a <checkAktifCalisma+0x1256>
 8007e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e54:	4837      	ldr	r0, [pc, #220]	; (8007f34 <checkAktifCalisma+0x1310>)
 8007e56:	f002 fa49 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d10c      	bne.n	8007e7a <checkAktifCalisma+0x1256>
			hataVar=1;
 8007e60:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <checkAktifCalisma+0x1318>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007e66:	2001      	movs	r0, #1
 8007e68:	f7fe f874 	bl	8005f54 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	f7fe fc27 	bl	80066c0 <hata2EEPROM>
			acilstophatasi=1;
 8007e72:	4b33      	ldr	r3, [pc, #204]	; (8007f40 <checkAktifCalisma+0x131c>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	e018      	b.n	8007eac <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007e7a:	4b31      	ldr	r3, [pc, #196]	; (8007f40 <checkAktifCalisma+0x131c>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d014      	beq.n	8007eac <checkAktifCalisma+0x1288>
 8007e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e86:	482b      	ldr	r0, [pc, #172]	; (8007f34 <checkAktifCalisma+0x1310>)
 8007e88:	f002 fa30 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10c      	bne.n	8007eac <checkAktifCalisma+0x1288>
 8007e92:	4b29      	ldr	r3, [pc, #164]	; (8007f38 <checkAktifCalisma+0x1314>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f083 0301 	eor.w	r3, r3, #1
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <checkAktifCalisma+0x131c>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f7fe f800 	bl	8005eac <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007eac:	4b25      	ldr	r3, [pc, #148]	; (8007f44 <checkAktifCalisma+0x1320>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f083 0301 	eor.w	r3, r3, #1
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d04c      	beq.n	8007f54 <checkAktifCalisma+0x1330>
 8007eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ebe:	481d      	ldr	r0, [pc, #116]	; (8007f34 <checkAktifCalisma+0x1310>)
 8007ec0:	f002 fa14 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <checkAktifCalisma+0x12ae>
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <checkAktifCalisma+0x1324>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d040      	beq.n	8007f54 <checkAktifCalisma+0x1330>
 8007ed2:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <checkAktifCalisma+0x1328>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d13c      	bne.n	8007f54 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007eda:	4b18      	ldr	r3, [pc, #96]	; (8007f3c <checkAktifCalisma+0x1318>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007ee0:	2002      	movs	r0, #2
 8007ee2:	f7fe f837 	bl	8005f54 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007ee6:	2002      	movs	r0, #2
 8007ee8:	f7fe fbea 	bl	80066c0 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007eec:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <checkAktifCalisma+0x132c>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e047      	b.n	8007f84 <checkAktifCalisma+0x1360>
 8007ef4:	20000ce8 	.word	0x20000ce8
 8007ef8:	20000ce7 	.word	0x20000ce7
 8007efc:	20000ce6 	.word	0x20000ce6
 8007f00:	40010800 	.word	0x40010800
 8007f04:	20000cdc 	.word	0x20000cdc
 8007f08:	40011000 	.word	0x40011000
 8007f0c:	20000ca3 	.word	0x20000ca3
 8007f10:	20000cdf 	.word	0x20000cdf
 8007f14:	20000cdd 	.word	0x20000cdd
 8007f18:	20000c9a 	.word	0x20000c9a
 8007f1c:	20000c9b 	.word	0x20000c9b
 8007f20:	200009c2 	.word	0x200009c2
 8007f24:	200009c3 	.word	0x200009c3
 8007f28:	20000c9c 	.word	0x20000c9c
 8007f2c:	20000b38 	.word	0x20000b38
 8007f30:	20000cc9 	.word	0x20000cc9
 8007f34:	40010c00 	.word	0x40010c00
 8007f38:	20000ceb 	.word	0x20000ceb
 8007f3c:	20000cf2 	.word	0x20000cf2
 8007f40:	20000ced 	.word	0x20000ced
 8007f44:	20000cf4 	.word	0x20000cf4
 8007f48:	20000cfe 	.word	0x20000cfe
 8007f4c:	20000ca1 	.word	0x20000ca1
 8007f50:	20000cee 	.word	0x20000cee
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007f54:	4b97      	ldr	r3, [pc, #604]	; (80081b4 <checkAktifCalisma+0x1590>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d013      	beq.n	8007f84 <checkAktifCalisma+0x1360>
 8007f5c:	4b96      	ldr	r3, [pc, #600]	; (80081b8 <checkAktifCalisma+0x1594>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <checkAktifCalisma+0x1360>
 8007f64:	4b95      	ldr	r3, [pc, #596]	; (80081bc <checkAktifCalisma+0x1598>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f083 0301 	eor.w	r3, r3, #1
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d008      	beq.n	8007f84 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007f72:	4b90      	ldr	r3, [pc, #576]	; (80081b4 <checkAktifCalisma+0x1590>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007f78:	4b91      	ldr	r3, [pc, #580]	; (80081c0 <checkAktifCalisma+0x159c>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007f7e:	2002      	movs	r0, #2
 8007f80:	f7fd ff94 	bl	8005eac <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007f84:	4b8f      	ldr	r3, [pc, #572]	; (80081c4 <checkAktifCalisma+0x15a0>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <checkAktifCalisma+0x13a2>
 8007f8c:	4b8e      	ldr	r3, [pc, #568]	; (80081c8 <checkAktifCalisma+0x15a4>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d118      	bne.n	8007fc6 <checkAktifCalisma+0x13a2>
 8007f94:	4b8d      	ldr	r3, [pc, #564]	; (80081cc <checkAktifCalisma+0x15a8>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d014      	beq.n	8007fc6 <checkAktifCalisma+0x13a2>
 8007f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fa0:	488b      	ldr	r0, [pc, #556]	; (80081d0 <checkAktifCalisma+0x15ac>)
 8007fa2:	f002 f9a3 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d10c      	bne.n	8007fc6 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007fac:	4b89      	ldr	r3, [pc, #548]	; (80081d4 <checkAktifCalisma+0x15b0>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007fb2:	2003      	movs	r0, #3
 8007fb4:	f7fd ffce 	bl	8005f54 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007fb8:	2003      	movs	r0, #3
 8007fba:	f7fe fb81 	bl	80066c0 <hata2EEPROM>
			basinchatasi=1;
 8007fbe:	4b86      	ldr	r3, [pc, #536]	; (80081d8 <checkAktifCalisma+0x15b4>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	e015      	b.n	8007ff2 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007fc6:	4b84      	ldr	r3, [pc, #528]	; (80081d8 <checkAktifCalisma+0x15b4>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d011      	beq.n	8007ff2 <checkAktifCalisma+0x13ce>
 8007fce:	4b7d      	ldr	r3, [pc, #500]	; (80081c4 <checkAktifCalisma+0x15a0>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10d      	bne.n	8007ff2 <checkAktifCalisma+0x13ce>
 8007fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007fda:	4880      	ldr	r0, [pc, #512]	; (80081dc <checkAktifCalisma+0x15b8>)
 8007fdc:	f002 f986 	bl	800a2ec <HAL_GPIO_ReadPin>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d105      	bne.n	8007ff2 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007fe6:	4b7c      	ldr	r3, [pc, #496]	; (80081d8 <checkAktifCalisma+0x15b4>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007fec:	2003      	movs	r0, #3
 8007fee:	f7fd ff5d 	bl	8005eac <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007ff2:	4b7b      	ldr	r3, [pc, #492]	; (80081e0 <checkAktifCalisma+0x15bc>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d103      	bne.n	8008002 <checkAktifCalisma+0x13de>
 8007ffa:	4b7a      	ldr	r3, [pc, #488]	; (80081e4 <checkAktifCalisma+0x15c0>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01c      	beq.n	800803c <checkAktifCalisma+0x1418>
 8008002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008006:	4878      	ldr	r0, [pc, #480]	; (80081e8 <checkAktifCalisma+0x15c4>)
 8008008:	f002 f970 	bl	800a2ec <HAL_GPIO_ReadPin>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d114      	bne.n	800803c <checkAktifCalisma+0x1418>
 8008012:	4b76      	ldr	r3, [pc, #472]	; (80081ec <checkAktifCalisma+0x15c8>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d003      	beq.n	8008022 <checkAktifCalisma+0x13fe>
 800801a:	4b74      	ldr	r3, [pc, #464]	; (80081ec <checkAktifCalisma+0x15c8>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d10c      	bne.n	800803c <checkAktifCalisma+0x1418>
			hataVar=1;
 8008022:	4b6c      	ldr	r3, [pc, #432]	; (80081d4 <checkAktifCalisma+0x15b0>)
 8008024:	2201      	movs	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8008028:	2004      	movs	r0, #4
 800802a:	f7fd ff93 	bl	8005f54 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800802e:	2004      	movs	r0, #4
 8008030:	f7fe fb46 	bl	80066c0 <hata2EEPROM>
			katkapisivicihatasi=1;
 8008034:	4b6e      	ldr	r3, [pc, #440]	; (80081f0 <checkAktifCalisma+0x15cc>)
 8008036:	2201      	movs	r2, #1
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e01f      	b.n	800807c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800803c:	4b6c      	ldr	r3, [pc, #432]	; (80081f0 <checkAktifCalisma+0x15cc>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01b      	beq.n	800807c <checkAktifCalisma+0x1458>
 8008044:	4b6b      	ldr	r3, [pc, #428]	; (80081f4 <checkAktifCalisma+0x15d0>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d017      	beq.n	800807c <checkAktifCalisma+0x1458>
 800804c:	4b64      	ldr	r3, [pc, #400]	; (80081e0 <checkAktifCalisma+0x15bc>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f083 0301 	eor.w	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d010      	beq.n	800807c <checkAktifCalisma+0x1458>
 800805a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800805e:	4862      	ldr	r0, [pc, #392]	; (80081e8 <checkAktifCalisma+0x15c4>)
 8008060:	f002 f944 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800806a:	4b61      	ldr	r3, [pc, #388]	; (80081f0 <checkAktifCalisma+0x15cc>)
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8008070:	4b5c      	ldr	r3, [pc, #368]	; (80081e4 <checkAktifCalisma+0x15c0>)
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8008076:	2004      	movs	r0, #4
 8008078:	f7fd ff18 	bl	8005eac <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800807c:	4b58      	ldr	r3, [pc, #352]	; (80081e0 <checkAktifCalisma+0x15bc>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d103      	bne.n	800808c <checkAktifCalisma+0x1468>
 8008084:	4b5c      	ldr	r3, [pc, #368]	; (80081f8 <checkAktifCalisma+0x15d4>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01c      	beq.n	80080c6 <checkAktifCalisma+0x14a2>
 800808c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008090:	4855      	ldr	r0, [pc, #340]	; (80081e8 <checkAktifCalisma+0x15c4>)
 8008092:	f002 f92b 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008096:	4603      	mov	r3, r0
 8008098:	2b01      	cmp	r3, #1
 800809a:	d114      	bne.n	80080c6 <checkAktifCalisma+0x14a2>
 800809c:	4b53      	ldr	r3, [pc, #332]	; (80081ec <checkAktifCalisma+0x15c8>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d003      	beq.n	80080ac <checkAktifCalisma+0x1488>
 80080a4:	4b51      	ldr	r3, [pc, #324]	; (80081ec <checkAktifCalisma+0x15c8>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d10c      	bne.n	80080c6 <checkAktifCalisma+0x14a2>
			hataVar=1;
 80080ac:	4b49      	ldr	r3, [pc, #292]	; (80081d4 <checkAktifCalisma+0x15b0>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80080b2:	2005      	movs	r0, #5
 80080b4:	f7fd ff4e 	bl	8005f54 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80080b8:	2005      	movs	r0, #5
 80080ba:	f7fe fb01 	bl	80066c0 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80080be:	4b4f      	ldr	r3, [pc, #316]	; (80081fc <checkAktifCalisma+0x15d8>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e023      	b.n	800810e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80080c6:	4b4d      	ldr	r3, [pc, #308]	; (80081fc <checkAktifCalisma+0x15d8>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01f      	beq.n	800810e <checkAktifCalisma+0x14ea>
 80080ce:	4b49      	ldr	r3, [pc, #292]	; (80081f4 <checkAktifCalisma+0x15d0>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01b      	beq.n	800810e <checkAktifCalisma+0x14ea>
 80080d6:	4b42      	ldr	r3, [pc, #264]	; (80081e0 <checkAktifCalisma+0x15bc>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f083 0301 	eor.w	r3, r3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d014      	beq.n	800810e <checkAktifCalisma+0x14ea>
 80080e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080e8:	483f      	ldr	r0, [pc, #252]	; (80081e8 <checkAktifCalisma+0x15c4>)
 80080ea:	f002 f8ff 	bl	800a2ec <HAL_GPIO_ReadPin>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10c      	bne.n	800810e <checkAktifCalisma+0x14ea>
 80080f4:	4b3f      	ldr	r3, [pc, #252]	; (80081f4 <checkAktifCalisma+0x15d0>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80080fc:	4b3f      	ldr	r3, [pc, #252]	; (80081fc <checkAktifCalisma+0x15d8>)
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8008102:	4b3d      	ldr	r3, [pc, #244]	; (80081f8 <checkAktifCalisma+0x15d4>)
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8008108:	2005      	movs	r0, #5
 800810a:	f7fd fecf 	bl	8005eac <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800810e:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <checkAktifCalisma+0x15a8>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d107      	bne.n	8008126 <checkAktifCalisma+0x1502>
 8008116:	4b29      	ldr	r3, [pc, #164]	; (80081bc <checkAktifCalisma+0x1598>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d103      	bne.n	8008126 <checkAktifCalisma+0x1502>
 800811e:	4b38      	ldr	r3, [pc, #224]	; (8008200 <checkAktifCalisma+0x15dc>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d014      	beq.n	8008150 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8008126:	4b37      	ldr	r3, [pc, #220]	; (8008204 <checkAktifCalisma+0x15e0>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b37      	ldr	r3, [pc, #220]	; (8008208 <checkAktifCalisma+0x15e4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	4a36      	ldr	r2, [pc, #216]	; (800820c <checkAktifCalisma+0x15e8>)
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	4293      	cmp	r3, r2
 8008136:	d30b      	bcc.n	8008150 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8008138:	4b26      	ldr	r3, [pc, #152]	; (80081d4 <checkAktifCalisma+0x15b0>)
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800813e:	2006      	movs	r0, #6
 8008140:	f7fd ff08 	bl	8005f54 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8008144:	2006      	movs	r0, #6
 8008146:	f7fe fabb 	bl	80066c0 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <checkAktifCalisma+0x15ec>)
 800814c:	2201      	movs	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8008150:	4b2f      	ldr	r3, [pc, #188]	; (8008210 <checkAktifCalisma+0x15ec>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d013      	beq.n	8008180 <checkAktifCalisma+0x155c>
 8008158:	2108      	movs	r1, #8
 800815a:	4823      	ldr	r0, [pc, #140]	; (80081e8 <checkAktifCalisma+0x15c4>)
 800815c:	f002 f8c6 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <checkAktifCalisma+0x155c>
 8008166:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <checkAktifCalisma+0x15bc>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f083 0301 	eor.w	r3, r3, #1
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8008174:	4b26      	ldr	r3, [pc, #152]	; (8008210 <checkAktifCalisma+0x15ec>)
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800817a:	2006      	movs	r0, #6
 800817c:	f7fd fe96 	bl	8005eac <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8008180:	4b24      	ldr	r3, [pc, #144]	; (8008214 <checkAktifCalisma+0x15f0>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <checkAktifCalisma+0x157c>
 8008188:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <checkAktifCalisma+0x1598>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <checkAktifCalisma+0x157c>
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <checkAktifCalisma+0x15f4>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d103      	bne.n	80081a0 <checkAktifCalisma+0x157c>
 8008198:	4b19      	ldr	r3, [pc, #100]	; (8008200 <checkAktifCalisma+0x15dc>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d03f      	beq.n	8008220 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 80081a0:	4b1e      	ldr	r3, [pc, #120]	; (800821c <checkAktifCalisma+0x15f8>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <checkAktifCalisma+0x15c0>)
 80081a8:	2201      	movs	r2, #1
 80081aa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80081ac:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <checkAktifCalisma+0x15d4>)
 80081ae:	2201      	movs	r2, #1
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e03c      	b.n	800822e <checkAktifCalisma+0x160a>
 80081b4:	20000cee 	.word	0x20000cee
 80081b8:	20000cf4 	.word	0x20000cf4
 80081bc:	20000cd5 	.word	0x20000cd5
 80081c0:	20000cfe 	.word	0x20000cfe
 80081c4:	20000ca0 	.word	0x20000ca0
 80081c8:	20000ca4 	.word	0x20000ca4
 80081cc:	20000cf1 	.word	0x20000cf1
 80081d0:	40011000 	.word	0x40011000
 80081d4:	20000cf2 	.word	0x20000cf2
 80081d8:	20000cfb 	.word	0x20000cfb
 80081dc:	40010c00 	.word	0x40010c00
 80081e0:	20000ceb 	.word	0x20000ceb
 80081e4:	20000cff 	.word	0x20000cff
 80081e8:	40010800 	.word	0x40010800
 80081ec:	20000ca5 	.word	0x20000ca5
 80081f0:	20000cfc 	.word	0x20000cfc
 80081f4:	20000cdf 	.word	0x20000cdf
 80081f8:	20000d00 	.word	0x20000d00
 80081fc:	20000cfd 	.word	0x20000cfd
 8008200:	20000cd4 	.word	0x20000cd4
 8008204:	20000bd4 	.word	0x20000bd4
 8008208:	20000be8 	.word	0x20000be8
 800820c:	20000cb5 	.word	0x20000cb5
 8008210:	20000cec 	.word	0x20000cec
 8008214:	20000cd2 	.word	0x20000cd2
 8008218:	20000cd3 	.word	0x20000cd3
 800821c:	20000cf3 	.word	0x20000cf3
		} else {
			makineCalisiyor=1;
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <checkAktifCalisma+0x1678>)
 8008222:	2201      	movs	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <checkAktifCalisma+0x167c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <checkAktifCalisma+0x1680>)
 800822c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800822e:	4b1e      	ldr	r3, [pc, #120]	; (80082a8 <checkAktifCalisma+0x1684>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d02f      	beq.n	8008296 <checkAktifCalisma+0x1672>
 8008236:	4b1d      	ldr	r3, [pc, #116]	; (80082ac <checkAktifCalisma+0x1688>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f083 0301 	eor.w	r3, r3, #1
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d028      	beq.n	8008296 <checkAktifCalisma+0x1672>
 8008244:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <checkAktifCalisma+0x168c>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f083 0301 	eor.w	r3, r3, #1
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d021      	beq.n	8008296 <checkAktifCalisma+0x1672>
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <checkAktifCalisma+0x1690>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	f083 0301 	eor.w	r3, r3, #1
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01a      	beq.n	8008296 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8008260:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <checkAktifCalisma+0x1694>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f083 0301 	eor.w	r3, r3, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d013      	beq.n	8008296 <checkAktifCalisma+0x1672>
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <checkAktifCalisma+0x1698>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f083 0301 	eor.w	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <checkAktifCalisma+0x1672>
 800827c:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <checkAktifCalisma+0x169c>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f083 0301 	eor.w	r3, r3, #1
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <checkAktifCalisma+0x1672>
			hataVar=0;
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <checkAktifCalisma+0x1684>)
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8008290:	2007      	movs	r0, #7
 8008292:	f7fd fe0b 	bl	8005eac <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000cf3 	.word	0x20000cf3
 80082a0:	20000bd4 	.word	0x20000bd4
 80082a4:	20000be8 	.word	0x20000be8
 80082a8:	20000cf2 	.word	0x20000cf2
 80082ac:	20000ced 	.word	0x20000ced
 80082b0:	20000cee 	.word	0x20000cee
 80082b4:	20000cfb 	.word	0x20000cfb
 80082b8:	20000cfc 	.word	0x20000cfc
 80082bc:	20000cfd 	.word	0x20000cfd
 80082c0:	20000cec 	.word	0x20000cec

080082c4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80082c8:	4b8b      	ldr	r3, [pc, #556]	; (80084f8 <checkDemoModCalisma+0x234>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	f040 8229 	bne.w	8008724 <checkDemoModCalisma+0x460>
 80082d2:	4b8a      	ldr	r3, [pc, #552]	; (80084fc <checkDemoModCalisma+0x238>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8224 	beq.w	8008724 <checkDemoModCalisma+0x460>
 80082dc:	4b88      	ldr	r3, [pc, #544]	; (8008500 <checkDemoModCalisma+0x23c>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f040 821f 	bne.w	8008724 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80082e6:	2102      	movs	r1, #2
 80082e8:	4886      	ldr	r0, [pc, #536]	; (8008504 <checkDemoModCalisma+0x240>)
 80082ea:	f001 ffff 	bl	800a2ec <HAL_GPIO_ReadPin>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11d      	bne.n	8008330 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80082f4:	4b84      	ldr	r3, [pc, #528]	; (8008508 <checkDemoModCalisma+0x244>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f083 0301 	eor.w	r3, r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d016      	beq.n	8008330 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8008302:	4b82      	ldr	r3, [pc, #520]	; (800850c <checkDemoModCalisma+0x248>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	f083 0301 	eor.w	r3, r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00f      	beq.n	8008330 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8008310:	4b7f      	ldr	r3, [pc, #508]	; (8008510 <checkDemoModCalisma+0x24c>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f083 0301 	eor.w	r3, r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800831e:	2201      	movs	r2, #1
 8008320:	2104      	movs	r1, #4
 8008322:	487c      	ldr	r0, [pc, #496]	; (8008514 <checkDemoModCalisma+0x250>)
 8008324:	f001 fff9 	bl	800a31a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8008328:	4b7b      	ldr	r3, [pc, #492]	; (8008518 <checkDemoModCalisma+0x254>)
 800832a:	2201      	movs	r2, #1
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e00e      	b.n	800834e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8008330:	2102      	movs	r1, #2
 8008332:	4874      	ldr	r0, [pc, #464]	; (8008504 <checkDemoModCalisma+0x240>)
 8008334:	f001 ffda 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008338:	4603      	mov	r3, r0
 800833a:	2b01      	cmp	r3, #1
 800833c:	d107      	bne.n	800834e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800833e:	2200      	movs	r2, #0
 8008340:	2104      	movs	r1, #4
 8008342:	4874      	ldr	r0, [pc, #464]	; (8008514 <checkDemoModCalisma+0x250>)
 8008344:	f001 ffe9 	bl	800a31a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8008348:	4b73      	ldr	r3, [pc, #460]	; (8008518 <checkDemoModCalisma+0x254>)
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800834e:	4b72      	ldr	r3, [pc, #456]	; (8008518 <checkDemoModCalisma+0x254>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10b      	bne.n	800836e <checkDemoModCalisma+0xaa>
 8008356:	4b6d      	ldr	r3, [pc, #436]	; (800850c <checkDemoModCalisma+0x248>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <checkDemoModCalisma+0xaa>
 800835e:	4b6c      	ldr	r3, [pc, #432]	; (8008510 <checkDemoModCalisma+0x24c>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <checkDemoModCalisma+0xaa>
 8008366:	4b68      	ldr	r3, [pc, #416]	; (8008508 <checkDemoModCalisma+0x244>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00c      	beq.n	8008388 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800836e:	2201      	movs	r2, #1
 8008370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008374:	4867      	ldr	r0, [pc, #412]	; (8008514 <checkDemoModCalisma+0x250>)
 8008376:	f001 ffd0 	bl	800a31a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800837a:	2201      	movs	r2, #1
 800837c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008380:	4864      	ldr	r0, [pc, #400]	; (8008514 <checkDemoModCalisma+0x250>)
 8008382:	f001 ffca 	bl	800a31a <HAL_GPIO_WritePin>
 8008386:	e00b      	b.n	80083a0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008388:	2200      	movs	r2, #0
 800838a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800838e:	4861      	ldr	r0, [pc, #388]	; (8008514 <checkDemoModCalisma+0x250>)
 8008390:	f001 ffc3 	bl	800a31a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008394:	2200      	movs	r2, #0
 8008396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800839a:	485e      	ldr	r0, [pc, #376]	; (8008514 <checkDemoModCalisma+0x250>)
 800839c:	f001 ffbd 	bl	800a31a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80083a0:	2102      	movs	r1, #2
 80083a2:	4858      	ldr	r0, [pc, #352]	; (8008504 <checkDemoModCalisma+0x240>)
 80083a4:	f001 ffa2 	bl	800a2ec <HAL_GPIO_ReadPin>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d10d      	bne.n	80083ca <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80083ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083b2:	4854      	ldr	r0, [pc, #336]	; (8008504 <checkDemoModCalisma+0x240>)
 80083b4:	f001 ff9a 	bl	800a2ec <HAL_GPIO_ReadPin>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80083be:	4b56      	ldr	r3, [pc, #344]	; (8008518 <checkDemoModCalisma+0x254>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f083 0301 	eor.w	r3, r3, #1
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80083ca:	2102      	movs	r1, #2
 80083cc:	484d      	ldr	r0, [pc, #308]	; (8008504 <checkDemoModCalisma+0x240>)
 80083ce:	f001 ff8d 	bl	800a2ec <HAL_GPIO_ReadPin>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d125      	bne.n	8008424 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80083d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083dc:	4849      	ldr	r0, [pc, #292]	; (8008504 <checkDemoModCalisma+0x240>)
 80083de:	f001 ff85 	bl	800a2ec <HAL_GPIO_ReadPin>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11d      	bne.n	8008424 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80083e8:	4b4b      	ldr	r3, [pc, #300]	; (8008518 <checkDemoModCalisma+0x254>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	f083 0301 	eor.w	r3, r3, #1
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80083f6:	4b44      	ldr	r3, [pc, #272]	; (8008508 <checkDemoModCalisma+0x244>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	f083 0301 	eor.w	r3, r3, #1
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00f      	beq.n	8008424 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8008404:	4b42      	ldr	r3, [pc, #264]	; (8008510 <checkDemoModCalisma+0x24c>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	f083 0301 	eor.w	r3, r3, #1
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d008      	beq.n	8008424 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8008412:	2201      	movs	r2, #1
 8008414:	2120      	movs	r1, #32
 8008416:	483b      	ldr	r0, [pc, #236]	; (8008504 <checkDemoModCalisma+0x240>)
 8008418:	f001 ff7f 	bl	800a31a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800841c:	4b3b      	ldr	r3, [pc, #236]	; (800850c <checkDemoModCalisma+0x248>)
 800841e:	2201      	movs	r2, #1
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	e007      	b.n	8008434 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008424:	2200      	movs	r2, #0
 8008426:	2120      	movs	r1, #32
 8008428:	4836      	ldr	r0, [pc, #216]	; (8008504 <checkDemoModCalisma+0x240>)
 800842a:	f001 ff76 	bl	800a31a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800842e:	4b37      	ldr	r3, [pc, #220]	; (800850c <checkDemoModCalisma+0x248>)
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8008434:	2102      	movs	r1, #2
 8008436:	4833      	ldr	r0, [pc, #204]	; (8008504 <checkDemoModCalisma+0x240>)
 8008438:	f001 ff58 	bl	800a2ec <HAL_GPIO_ReadPin>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d125      	bne.n	800848e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8008442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008446:	482f      	ldr	r0, [pc, #188]	; (8008504 <checkDemoModCalisma+0x240>)
 8008448:	f001 ff50 	bl	800a2ec <HAL_GPIO_ReadPin>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d11d      	bne.n	800848e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8008452:	4b31      	ldr	r3, [pc, #196]	; (8008518 <checkDemoModCalisma+0x254>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	f083 0301 	eor.w	r3, r3, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d016      	beq.n	800848e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8008460:	4b2a      	ldr	r3, [pc, #168]	; (800850c <checkDemoModCalisma+0x248>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f083 0301 	eor.w	r3, r3, #1
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00f      	beq.n	800848e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800846e:	4b26      	ldr	r3, [pc, #152]	; (8008508 <checkDemoModCalisma+0x244>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f083 0301 	eor.w	r3, r3, #1
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800847c:	2201      	movs	r2, #1
 800847e:	2110      	movs	r1, #16
 8008480:	4820      	ldr	r0, [pc, #128]	; (8008504 <checkDemoModCalisma+0x240>)
 8008482:	f001 ff4a 	bl	800a31a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8008486:	4b22      	ldr	r3, [pc, #136]	; (8008510 <checkDemoModCalisma+0x24c>)
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
 800848c:	e007      	b.n	800849e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800848e:	2200      	movs	r2, #0
 8008490:	2110      	movs	r1, #16
 8008492:	481c      	ldr	r0, [pc, #112]	; (8008504 <checkDemoModCalisma+0x240>)
 8008494:	f001 ff41 	bl	800a31a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8008498:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <checkDemoModCalisma+0x24c>)
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800849e:	2104      	movs	r1, #4
 80084a0:	4818      	ldr	r0, [pc, #96]	; (8008504 <checkDemoModCalisma+0x240>)
 80084a2:	f001 ff23 	bl	800a2ec <HAL_GPIO_ReadPin>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d139      	bne.n	8008520 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80084ac:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <checkDemoModCalisma+0x254>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f083 0301 	eor.w	r3, r3, #1
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d032      	beq.n	8008520 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80084ba:	4b15      	ldr	r3, [pc, #84]	; (8008510 <checkDemoModCalisma+0x24c>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f083 0301 	eor.w	r3, r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d02b      	beq.n	8008520 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80084c8:	4b10      	ldr	r3, [pc, #64]	; (800850c <checkDemoModCalisma+0x248>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f083 0301 	eor.w	r3, r3, #1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d024      	beq.n	8008520 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80084d6:	2201      	movs	r2, #1
 80084d8:	2102      	movs	r1, #2
 80084da:	480e      	ldr	r0, [pc, #56]	; (8008514 <checkDemoModCalisma+0x250>)
 80084dc:	f001 ff1d 	bl	800a31a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80084e0:	2201      	movs	r2, #1
 80084e2:	2101      	movs	r1, #1
 80084e4:	480b      	ldr	r0, [pc, #44]	; (8008514 <checkDemoModCalisma+0x250>)
 80084e6:	f001 ff18 	bl	800a31a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80084ea:	4b07      	ldr	r3, [pc, #28]	; (8008508 <checkDemoModCalisma+0x244>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <checkDemoModCalisma+0x258>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e027      	b.n	8008548 <checkDemoModCalisma+0x284>
 80084f8:	20000cbb 	.word	0x20000cbb
 80084fc:	20000cef 	.word	0x20000cef
 8008500:	20000cba 	.word	0x20000cba
 8008504:	40011000 	.word	0x40011000
 8008508:	20000cf6 	.word	0x20000cf6
 800850c:	20000cf7 	.word	0x20000cf7
 8008510:	20000cf8 	.word	0x20000cf8
 8008514:	40010c00 	.word	0x40010c00
 8008518:	20000cf5 	.word	0x20000cf5
 800851c:	20000cdb 	.word	0x20000cdb
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8008520:	2104      	movs	r1, #4
 8008522:	48a0      	ldr	r0, [pc, #640]	; (80087a4 <checkDemoModCalisma+0x4e0>)
 8008524:	f001 fee2 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008528:	4603      	mov	r3, r0
 800852a:	2b01      	cmp	r3, #1
 800852c:	d10c      	bne.n	8008548 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800852e:	2200      	movs	r2, #0
 8008530:	2102      	movs	r1, #2
 8008532:	489d      	ldr	r0, [pc, #628]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 8008534:	f001 fef1 	bl	800a31a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008538:	2200      	movs	r2, #0
 800853a:	2101      	movs	r1, #1
 800853c:	489a      	ldr	r0, [pc, #616]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 800853e:	f001 feec 	bl	800a31a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8008542:	4b9a      	ldr	r3, [pc, #616]	; (80087ac <checkDemoModCalisma+0x4e8>)
 8008544:	2200      	movs	r2, #0
 8008546:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8008548:	2104      	movs	r1, #4
 800854a:	4896      	ldr	r0, [pc, #600]	; (80087a4 <checkDemoModCalisma+0x4e0>)
 800854c:	f001 fece 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10d      	bne.n	8008572 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8008556:	2201      	movs	r2, #1
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	4895      	ldr	r0, [pc, #596]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 800855c:	f001 fedd 	bl	800a31a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8008560:	2201      	movs	r2, #1
 8008562:	2120      	movs	r1, #32
 8008564:	4892      	ldr	r0, [pc, #584]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 8008566:	f001 fed8 	bl	800a31a <HAL_GPIO_WritePin>
			timer3 = millis;
 800856a:	4b92      	ldr	r3, [pc, #584]	; (80087b4 <checkDemoModCalisma+0x4f0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a92      	ldr	r2, [pc, #584]	; (80087b8 <checkDemoModCalisma+0x4f4>)
 8008570:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008572:	4b90      	ldr	r3, [pc, #576]	; (80087b4 <checkDemoModCalisma+0x4f0>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	4b90      	ldr	r3, [pc, #576]	; (80087b8 <checkDemoModCalisma+0x4f4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b04      	cmp	r3, #4
 800857e:	d909      	bls.n	8008594 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008580:	2200      	movs	r2, #0
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	488a      	ldr	r0, [pc, #552]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 8008586:	f001 fec8 	bl	800a31a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800858a:	2200      	movs	r2, #0
 800858c:	2120      	movs	r1, #32
 800858e:	4888      	ldr	r0, [pc, #544]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 8008590:	f001 fec3 	bl	800a31a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8008594:	2102      	movs	r1, #2
 8008596:	4883      	ldr	r0, [pc, #524]	; (80087a4 <checkDemoModCalisma+0x4e0>)
 8008598:	f001 fea8 	bl	800a2ec <HAL_GPIO_ReadPin>
 800859c:	4603      	mov	r3, r0
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d108      	bne.n	80085b4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80085a2:	2201      	movs	r2, #1
 80085a4:	2140      	movs	r1, #64	; 0x40
 80085a6:	4882      	ldr	r0, [pc, #520]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 80085a8:	f001 feb7 	bl	800a31a <HAL_GPIO_WritePin>
			timer3 = millis;
 80085ac:	4b81      	ldr	r3, [pc, #516]	; (80087b4 <checkDemoModCalisma+0x4f0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a81      	ldr	r2, [pc, #516]	; (80087b8 <checkDemoModCalisma+0x4f4>)
 80085b2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80085b4:	4b7f      	ldr	r3, [pc, #508]	; (80087b4 <checkDemoModCalisma+0x4f0>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4b7f      	ldr	r3, [pc, #508]	; (80087b8 <checkDemoModCalisma+0x4f4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d904      	bls.n	80085cc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80085c2:	2200      	movs	r2, #0
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	487a      	ldr	r0, [pc, #488]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 80085c8:	f001 fea7 	bl	800a31a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80085cc:	4b7b      	ldr	r3, [pc, #492]	; (80087bc <checkDemoModCalisma+0x4f8>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d058      	beq.n	8008686 <checkDemoModCalisma+0x3c2>
 80085d4:	4b7a      	ldr	r3, [pc, #488]	; (80087c0 <checkDemoModCalisma+0x4fc>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d054      	beq.n	8008686 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80085dc:	4b79      	ldr	r3, [pc, #484]	; (80087c4 <checkDemoModCalisma+0x500>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	4b77      	ldr	r3, [pc, #476]	; (80087c4 <checkDemoModCalisma+0x500>)
 80085e6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80085e8:	4b76      	ldr	r3, [pc, #472]	; (80087c4 <checkDemoModCalisma+0x500>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	d908      	bls.n	8008602 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80085f0:	4b74      	ldr	r3, [pc, #464]	; (80087c4 <checkDemoModCalisma+0x500>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80085f6:	4b74      	ldr	r3, [pc, #464]	; (80087c8 <checkDemoModCalisma+0x504>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	4b72      	ldr	r3, [pc, #456]	; (80087c8 <checkDemoModCalisma+0x504>)
 8008600:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8008602:	4b71      	ldr	r3, [pc, #452]	; (80087c8 <checkDemoModCalisma+0x504>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b09      	cmp	r3, #9
 8008608:	d908      	bls.n	800861c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800860a:	4b6f      	ldr	r3, [pc, #444]	; (80087c8 <checkDemoModCalisma+0x504>)
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8008610:	4b6e      	ldr	r3, [pc, #440]	; (80087cc <checkDemoModCalisma+0x508>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	b2da      	uxtb	r2, r3
 8008618:	4b6c      	ldr	r3, [pc, #432]	; (80087cc <checkDemoModCalisma+0x508>)
 800861a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800861c:	4b6b      	ldr	r3, [pc, #428]	; (80087cc <checkDemoModCalisma+0x508>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b09      	cmp	r3, #9
 8008622:	d908      	bls.n	8008636 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8008624:	4b69      	ldr	r3, [pc, #420]	; (80087cc <checkDemoModCalisma+0x508>)
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800862a:	4b69      	ldr	r3, [pc, #420]	; (80087d0 <checkDemoModCalisma+0x50c>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	3301      	adds	r3, #1
 8008630:	b2da      	uxtb	r2, r3
 8008632:	4b67      	ldr	r3, [pc, #412]	; (80087d0 <checkDemoModCalisma+0x50c>)
 8008634:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8008636:	4b66      	ldr	r3, [pc, #408]	; (80087d0 <checkDemoModCalisma+0x50c>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b09      	cmp	r3, #9
 800863c:	d908      	bls.n	8008650 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800863e:	4b64      	ldr	r3, [pc, #400]	; (80087d0 <checkDemoModCalisma+0x50c>)
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8008644:	4b63      	ldr	r3, [pc, #396]	; (80087d4 <checkDemoModCalisma+0x510>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	4b61      	ldr	r3, [pc, #388]	; (80087d4 <checkDemoModCalisma+0x510>)
 800864e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8008650:	4b60      	ldr	r3, [pc, #384]	; (80087d4 <checkDemoModCalisma+0x510>)
 8008652:	781a      	ldrb	r2, [r3, #0]
 8008654:	4b60      	ldr	r3, [pc, #384]	; (80087d8 <checkDemoModCalisma+0x514>)
 8008656:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800865a:	4b5d      	ldr	r3, [pc, #372]	; (80087d0 <checkDemoModCalisma+0x50c>)
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	4b5e      	ldr	r3, [pc, #376]	; (80087d8 <checkDemoModCalisma+0x514>)
 8008660:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8008662:	4b5a      	ldr	r3, [pc, #360]	; (80087cc <checkDemoModCalisma+0x508>)
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	4b5c      	ldr	r3, [pc, #368]	; (80087d8 <checkDemoModCalisma+0x514>)
 8008668:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800866a:	4b57      	ldr	r3, [pc, #348]	; (80087c8 <checkDemoModCalisma+0x504>)
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	4b5a      	ldr	r3, [pc, #360]	; (80087d8 <checkDemoModCalisma+0x514>)
 8008670:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8008672:	4b54      	ldr	r3, [pc, #336]	; (80087c4 <checkDemoModCalisma+0x500>)
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	4b58      	ldr	r3, [pc, #352]	; (80087d8 <checkDemoModCalisma+0x514>)
 8008678:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800867a:	4b58      	ldr	r3, [pc, #352]	; (80087dc <checkDemoModCalisma+0x518>)
 800867c:	2201      	movs	r2, #1
 800867e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008680:	4b4f      	ldr	r3, [pc, #316]	; (80087c0 <checkDemoModCalisma+0x4fc>)
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008686:	4b56      	ldr	r3, [pc, #344]	; (80087e0 <checkDemoModCalisma+0x51c>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 8087 	bne.w	800879e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8008690:	4a54      	ldr	r2, [pc, #336]	; (80087e4 <checkDemoModCalisma+0x520>)
 8008692:	2101      	movs	r1, #1
 8008694:	2002      	movs	r0, #2
 8008696:	f7f8 f98d 	bl	80009b4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800869a:	4a53      	ldr	r2, [pc, #332]	; (80087e8 <checkDemoModCalisma+0x524>)
 800869c:	2101      	movs	r1, #1
 800869e:	2001      	movs	r0, #1
 80086a0:	f7f8 f988 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80086a4:	4b4b      	ldr	r3, [pc, #300]	; (80087d4 <checkDemoModCalisma+0x510>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	220a      	movs	r2, #10
 80086aa:	4950      	ldr	r1, [pc, #320]	; (80087ec <checkDemoModCalisma+0x528>)
 80086ac:	4618      	mov	r0, r3
 80086ae:	f004 fea5 	bl	800d3fc <itoa>
			lcd_print(2,12,snum);
 80086b2:	4a4e      	ldr	r2, [pc, #312]	; (80087ec <checkDemoModCalisma+0x528>)
 80086b4:	210c      	movs	r1, #12
 80086b6:	2002      	movs	r0, #2
 80086b8:	f7f8 f97c 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80086bc:	4b44      	ldr	r3, [pc, #272]	; (80087d0 <checkDemoModCalisma+0x50c>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	220a      	movs	r2, #10
 80086c2:	494a      	ldr	r1, [pc, #296]	; (80087ec <checkDemoModCalisma+0x528>)
 80086c4:	4618      	mov	r0, r3
 80086c6:	f004 fe99 	bl	800d3fc <itoa>
			lcd_print(2,13,snum);
 80086ca:	4a48      	ldr	r2, [pc, #288]	; (80087ec <checkDemoModCalisma+0x528>)
 80086cc:	210d      	movs	r1, #13
 80086ce:	2002      	movs	r0, #2
 80086d0:	f7f8 f970 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80086d4:	4b3d      	ldr	r3, [pc, #244]	; (80087cc <checkDemoModCalisma+0x508>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	220a      	movs	r2, #10
 80086da:	4944      	ldr	r1, [pc, #272]	; (80087ec <checkDemoModCalisma+0x528>)
 80086dc:	4618      	mov	r0, r3
 80086de:	f004 fe8d 	bl	800d3fc <itoa>
			lcd_print(2,14,snum);
 80086e2:	4a42      	ldr	r2, [pc, #264]	; (80087ec <checkDemoModCalisma+0x528>)
 80086e4:	210e      	movs	r1, #14
 80086e6:	2002      	movs	r0, #2
 80086e8:	f7f8 f964 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80086ec:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <checkDemoModCalisma+0x504>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	220a      	movs	r2, #10
 80086f2:	493e      	ldr	r1, [pc, #248]	; (80087ec <checkDemoModCalisma+0x528>)
 80086f4:	4618      	mov	r0, r3
 80086f6:	f004 fe81 	bl	800d3fc <itoa>
			lcd_print(2,15,snum);
 80086fa:	4a3c      	ldr	r2, [pc, #240]	; (80087ec <checkDemoModCalisma+0x528>)
 80086fc:	210f      	movs	r1, #15
 80086fe:	2002      	movs	r0, #2
 8008700:	f7f8 f958 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8008704:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <checkDemoModCalisma+0x500>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	220a      	movs	r2, #10
 800870a:	4938      	ldr	r1, [pc, #224]	; (80087ec <checkDemoModCalisma+0x528>)
 800870c:	4618      	mov	r0, r3
 800870e:	f004 fe75 	bl	800d3fc <itoa>
			lcd_print(2,16,snum);
 8008712:	4a36      	ldr	r2, [pc, #216]	; (80087ec <checkDemoModCalisma+0x528>)
 8008714:	2110      	movs	r1, #16
 8008716:	2002      	movs	r0, #2
 8008718:	f7f8 f94c 	bl	80009b4 <lcd_print>
			mesajYazildi=1;
 800871c:	4b34      	ldr	r3, [pc, #208]	; (80087f0 <checkDemoModCalisma+0x52c>)
 800871e:	2201      	movs	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8008722:	e03c      	b.n	800879e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8008724:	4b33      	ldr	r3, [pc, #204]	; (80087f4 <checkDemoModCalisma+0x530>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d003      	beq.n	8008734 <checkDemoModCalisma+0x470>
 800872c:	4b2c      	ldr	r3, [pc, #176]	; (80087e0 <checkDemoModCalisma+0x51c>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d134      	bne.n	800879e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008734:	2200      	movs	r2, #0
 8008736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800873a:	481b      	ldr	r0, [pc, #108]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 800873c:	f001 fded 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008740:	2200      	movs	r2, #0
 8008742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008746:	4818      	ldr	r0, [pc, #96]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 8008748:	f001 fde7 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800874c:	2200      	movs	r2, #0
 800874e:	2104      	movs	r1, #4
 8008750:	4815      	ldr	r0, [pc, #84]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 8008752:	f001 fde2 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008756:	2200      	movs	r2, #0
 8008758:	2102      	movs	r1, #2
 800875a:	4813      	ldr	r0, [pc, #76]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 800875c:	f001 fddd 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008760:	2200      	movs	r2, #0
 8008762:	2101      	movs	r1, #1
 8008764:	4810      	ldr	r0, [pc, #64]	; (80087a8 <checkDemoModCalisma+0x4e4>)
 8008766:	f001 fdd8 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800876a:	2200      	movs	r2, #0
 800876c:	2120      	movs	r1, #32
 800876e:	480d      	ldr	r0, [pc, #52]	; (80087a4 <checkDemoModCalisma+0x4e0>)
 8008770:	f001 fdd3 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008774:	2200      	movs	r2, #0
 8008776:	2110      	movs	r1, #16
 8008778:	480a      	ldr	r0, [pc, #40]	; (80087a4 <checkDemoModCalisma+0x4e0>)
 800877a:	f001 fdce 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800877e:	2200      	movs	r2, #0
 8008780:	2180      	movs	r1, #128	; 0x80
 8008782:	480b      	ldr	r0, [pc, #44]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 8008784:	f001 fdc9 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008788:	2200      	movs	r2, #0
 800878a:	2140      	movs	r1, #64	; 0x40
 800878c:	4808      	ldr	r0, [pc, #32]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 800878e:	f001 fdc4 	bl	800a31a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008792:	2200      	movs	r2, #0
 8008794:	2120      	movs	r1, #32
 8008796:	4806      	ldr	r0, [pc, #24]	; (80087b0 <checkDemoModCalisma+0x4ec>)
 8008798:	f001 fdbf 	bl	800a31a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800879c:	e7ff      	b.n	800879e <checkDemoModCalisma+0x4da>
 800879e:	bf00      	nop
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40011000 	.word	0x40011000
 80087a8:	40010c00 	.word	0x40010c00
 80087ac:	20000cf6 	.word	0x20000cf6
 80087b0:	40010800 	.word	0x40010800
 80087b4:	20000bd4 	.word	0x20000bd4
 80087b8:	20000be4 	.word	0x20000be4
 80087bc:	20000cf5 	.word	0x20000cf5
 80087c0:	20000cdb 	.word	0x20000cdb
 80087c4:	20000c9a 	.word	0x20000c9a
 80087c8:	20000c9b 	.word	0x20000c9b
 80087cc:	200009c2 	.word	0x200009c2
 80087d0:	200009c3 	.word	0x200009c3
 80087d4:	20000c9c 	.word	0x20000c9c
 80087d8:	20000b38 	.word	0x20000b38
 80087dc:	20000cc9 	.word	0x20000cc9
 80087e0:	20000cba 	.word	0x20000cba
 80087e4:	0800ec7c 	.word	0x0800ec7c
 80087e8:	0800ec88 	.word	0x0800ec88
 80087ec:	20000bcc 	.word	0x20000bcc
 80087f0:	20000cd1 	.word	0x20000cd1
 80087f4:	20000cbb 	.word	0x20000cbb

080087f8 <mergeData>:

char* mergeData() {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b09e      	sub	sp, #120	; 0x78
 80087fc:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80087fe:	2300      	movs	r3, #0
 8008800:	643b      	str	r3, [r7, #64]	; 0x40
 8008802:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008806:	2229      	movs	r2, #41	; 0x29
 8008808:	2100      	movs	r1, #0
 800880a:	4618      	mov	r0, r3
 800880c:	f004 ff0e 	bl	800d62c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008810:	4b6a      	ldr	r3, [pc, #424]	; (80089bc <mergeData+0x1c4>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	713b      	strb	r3, [r7, #4]
 8008816:	4b6a      	ldr	r3, [pc, #424]	; (80089c0 <mergeData+0x1c8>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	717b      	strb	r3, [r7, #5]
 800881c:	4b69      	ldr	r3, [pc, #420]	; (80089c4 <mergeData+0x1cc>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	71bb      	strb	r3, [r7, #6]
 8008822:	4b69      	ldr	r3, [pc, #420]	; (80089c8 <mergeData+0x1d0>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
 8008828:	4b68      	ldr	r3, [pc, #416]	; (80089cc <mergeData+0x1d4>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	723b      	strb	r3, [r7, #8]
 800882e:	4b68      	ldr	r3, [pc, #416]	; (80089d0 <mergeData+0x1d8>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	727b      	strb	r3, [r7, #9]
 8008834:	4b67      	ldr	r3, [pc, #412]	; (80089d4 <mergeData+0x1dc>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	72bb      	strb	r3, [r7, #10]
 800883a:	4b67      	ldr	r3, [pc, #412]	; (80089d8 <mergeData+0x1e0>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	72fb      	strb	r3, [r7, #11]
 8008840:	4b66      	ldr	r3, [pc, #408]	; (80089dc <mergeData+0x1e4>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	733b      	strb	r3, [r7, #12]
 8008846:	4b66      	ldr	r3, [pc, #408]	; (80089e0 <mergeData+0x1e8>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	737b      	strb	r3, [r7, #13]
 800884c:	4b65      	ldr	r3, [pc, #404]	; (80089e4 <mergeData+0x1ec>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	73bb      	strb	r3, [r7, #14]
 8008852:	4b65      	ldr	r3, [pc, #404]	; (80089e8 <mergeData+0x1f0>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	73fb      	strb	r3, [r7, #15]
 8008858:	4b64      	ldr	r3, [pc, #400]	; (80089ec <mergeData+0x1f4>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	743b      	strb	r3, [r7, #16]
 800885e:	4b64      	ldr	r3, [pc, #400]	; (80089f0 <mergeData+0x1f8>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	747b      	strb	r3, [r7, #17]
 8008864:	4b63      	ldr	r3, [pc, #396]	; (80089f4 <mergeData+0x1fc>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	74bb      	strb	r3, [r7, #18]
 800886a:	4b63      	ldr	r3, [pc, #396]	; (80089f8 <mergeData+0x200>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	74fb      	strb	r3, [r7, #19]
 8008870:	4b62      	ldr	r3, [pc, #392]	; (80089fc <mergeData+0x204>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	753b      	strb	r3, [r7, #20]
 8008876:	4b62      	ldr	r3, [pc, #392]	; (8008a00 <mergeData+0x208>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	757b      	strb	r3, [r7, #21]
 800887c:	4b61      	ldr	r3, [pc, #388]	; (8008a04 <mergeData+0x20c>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	75bb      	strb	r3, [r7, #22]
 8008882:	4b61      	ldr	r3, [pc, #388]	; (8008a08 <mergeData+0x210>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	75fb      	strb	r3, [r7, #23]
 8008888:	4b60      	ldr	r3, [pc, #384]	; (8008a0c <mergeData+0x214>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	763b      	strb	r3, [r7, #24]
 800888e:	4b60      	ldr	r3, [pc, #384]	; (8008a10 <mergeData+0x218>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	767b      	strb	r3, [r7, #25]
 8008894:	4b5f      	ldr	r3, [pc, #380]	; (8008a14 <mergeData+0x21c>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	76bb      	strb	r3, [r7, #26]
 800889a:	4b5f      	ldr	r3, [pc, #380]	; (8008a18 <mergeData+0x220>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	76fb      	strb	r3, [r7, #27]
 80088a0:	4b5e      	ldr	r3, [pc, #376]	; (8008a1c <mergeData+0x224>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	773b      	strb	r3, [r7, #28]
 80088a6:	4b5e      	ldr	r3, [pc, #376]	; (8008a20 <mergeData+0x228>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	777b      	strb	r3, [r7, #29]
 80088ac:	4b5d      	ldr	r3, [pc, #372]	; (8008a24 <mergeData+0x22c>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	77bb      	strb	r3, [r7, #30]
 80088b2:	4b5d      	ldr	r3, [pc, #372]	; (8008a28 <mergeData+0x230>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	77fb      	strb	r3, [r7, #31]
 80088b8:	4b5c      	ldr	r3, [pc, #368]	; (8008a2c <mergeData+0x234>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	f887 3020 	strb.w	r3, [r7, #32]
 80088c0:	4b5b      	ldr	r3, [pc, #364]	; (8008a30 <mergeData+0x238>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80088c8:	4b5a      	ldr	r3, [pc, #360]	; (8008a34 <mergeData+0x23c>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80088d0:	4b59      	ldr	r3, [pc, #356]	; (8008a38 <mergeData+0x240>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d8:	4b58      	ldr	r3, [pc, #352]	; (8008a3c <mergeData+0x244>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80088e0:	4b57      	ldr	r3, [pc, #348]	; (8008a40 <mergeData+0x248>)
 80088e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80088e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80088ea:	4b55      	ldr	r3, [pc, #340]	; (8008a40 <mergeData+0x248>)
 80088ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80088f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80088f4:	4b52      	ldr	r3, [pc, #328]	; (8008a40 <mergeData+0x248>)
 80088f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80088fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80088fe:	4b50      	ldr	r3, [pc, #320]	; (8008a40 <mergeData+0x248>)
 8008900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008904:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8008908:	4b4d      	ldr	r3, [pc, #308]	; (8008a40 <mergeData+0x248>)
 800890a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800890e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8008912:	4b4b      	ldr	r3, [pc, #300]	; (8008a40 <mergeData+0x248>)
 8008914:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8008918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800891c:	4b48      	ldr	r3, [pc, #288]	; (8008a40 <mergeData+0x248>)
 800891e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8008926:	4b46      	ldr	r3, [pc, #280]	; (8008a40 <mergeData+0x248>)
 8008928:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800892c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008930:	4b43      	ldr	r3, [pc, #268]	; (8008a40 <mergeData+0x248>)
 8008932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8008936:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800893a:	4b41      	ldr	r3, [pc, #260]	; (8008a40 <mergeData+0x248>)
 800893c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008944:	4b3e      	ldr	r3, [pc, #248]	; (8008a40 <mergeData+0x248>)
 8008946:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800894a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800894e:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <mergeData+0x24c>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008956:	2300      	movs	r3, #0
 8008958:	677b      	str	r3, [r7, #116]	; 0x74
 800895a:	e015      	b.n	8008988 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800895c:	1d3a      	adds	r2, r7, #4
 800895e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008960:	4413      	add	r3, r2
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800896a:	4937      	ldr	r1, [pc, #220]	; (8008a48 <mergeData+0x250>)
 800896c:	4618      	mov	r0, r3
 800896e:	f004 fe3d 	bl	800d5ec <siprintf>
	    strcat(combinedString, temp);
 8008972:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f004 fe5d 	bl	800d63c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008984:	3301      	adds	r3, #1
 8008986:	677b      	str	r3, [r7, #116]	; 0x74
 8008988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800898a:	2b2c      	cmp	r3, #44	; 0x2c
 800898c:	d9e6      	bls.n	800895c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800898e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008992:	4618      	mov	r0, r3
 8008994:	f7f7 fc46 	bl	8000224 <strlen>
 8008998:	4603      	mov	r3, r0
 800899a:	3301      	adds	r3, #1
 800899c:	4618      	mov	r0, r3
 800899e:	f004 fd2f 	bl	800d400 <malloc>
 80089a2:	4603      	mov	r3, r0
 80089a4:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80089a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089aa:	4619      	mov	r1, r3
 80089ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80089ae:	f004 fec7 	bl	800d740 <strcpy>
	return result;
 80089b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3778      	adds	r7, #120	; 0x78
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000cac 	.word	0x20000cac
 80089c0:	20000c9e 	.word	0x20000c9e
 80089c4:	20000ca1 	.word	0x20000ca1
 80089c8:	20000ca2 	.word	0x20000ca2
 80089cc:	20000ca3 	.word	0x20000ca3
 80089d0:	20000caa 	.word	0x20000caa
 80089d4:	20000ca4 	.word	0x20000ca4
 80089d8:	20000ca5 	.word	0x20000ca5
 80089dc:	20000ca9 	.word	0x20000ca9
 80089e0:	20000ca6 	.word	0x20000ca6
 80089e4:	20000cb6 	.word	0x20000cb6
 80089e8:	20000ca7 	.word	0x20000ca7
 80089ec:	20000cb7 	.word	0x20000cb7
 80089f0:	20000ca8 	.word	0x20000ca8
 80089f4:	20000cb8 	.word	0x20000cb8
 80089f8:	20000cab 	.word	0x20000cab
 80089fc:	20000cad 	.word	0x20000cad
 8008a00:	20000cae 	.word	0x20000cae
 8008a04:	20000caf 	.word	0x20000caf
 8008a08:	20000cb0 	.word	0x20000cb0
 8008a0c:	20000cb1 	.word	0x20000cb1
 8008a10:	20000cb2 	.word	0x20000cb2
 8008a14:	20000cb3 	.word	0x20000cb3
 8008a18:	20000cb4 	.word	0x20000cb4
 8008a1c:	20000cb5 	.word	0x20000cb5
 8008a20:	20000cb9 	.word	0x20000cb9
 8008a24:	20000cbb 	.word	0x20000cbb
 8008a28:	20000c9a 	.word	0x20000c9a
 8008a2c:	20000c9b 	.word	0x20000c9b
 8008a30:	200009c2 	.word	0x200009c2
 8008a34:	200009c3 	.word	0x200009c3
 8008a38:	20000c9c 	.word	0x20000c9c
 8008a3c:	20000cbe 	.word	0x20000cbe
 8008a40:	20000b38 	.word	0x20000b38
 8008a44:	20000940 	.word	0x20000940
 8008a48:	0800ec9c 	.word	0x0800ec9c

08008a4c <mainLoop>:

void mainLoop() {
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008a52:	f7fd fffb 	bl	8006a4c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008a56:	2101      	movs	r1, #1
 8008a58:	48ac      	ldr	r0, [pc, #688]	; (8008d0c <mainLoop+0x2c0>)
 8008a5a:	f001 fc47 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d136      	bne.n	8008ad2 <mainLoop+0x86>
 8008a64:	2108      	movs	r1, #8
 8008a66:	48aa      	ldr	r0, [pc, #680]	; (8008d10 <mainLoop+0x2c4>)
 8008a68:	f001 fc40 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d12f      	bne.n	8008ad2 <mainLoop+0x86>
 8008a72:	2102      	movs	r1, #2
 8008a74:	48a5      	ldr	r0, [pc, #660]	; (8008d0c <mainLoop+0x2c0>)
 8008a76:	f001 fc39 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d128      	bne.n	8008ad2 <mainLoop+0x86>
 8008a80:	2104      	movs	r1, #4
 8008a82:	48a2      	ldr	r0, [pc, #648]	; (8008d0c <mainLoop+0x2c0>)
 8008a84:	f001 fc32 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d121      	bne.n	8008ad2 <mainLoop+0x86>
 8008a8e:	2108      	movs	r1, #8
 8008a90:	489e      	ldr	r0, [pc, #632]	; (8008d0c <mainLoop+0x2c0>)
 8008a92:	f001 fc2b 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11a      	bne.n	8008ad2 <mainLoop+0x86>
 8008a9c:	2180      	movs	r1, #128	; 0x80
 8008a9e:	489c      	ldr	r0, [pc, #624]	; (8008d10 <mainLoop+0x2c4>)
 8008aa0:	f001 fc24 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d113      	bne.n	8008ad2 <mainLoop+0x86>
 8008aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008aae:	4898      	ldr	r0, [pc, #608]	; (8008d10 <mainLoop+0x2c4>)
 8008ab0:	f001 fc1c 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d10b      	bne.n	8008ad2 <mainLoop+0x86>
 8008aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008abe:	4894      	ldr	r0, [pc, #592]	; (8008d10 <mainLoop+0x2c4>)
 8008ac0:	f001 fc14 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d103      	bne.n	8008ad2 <mainLoop+0x86>
			butonKontrol=0;
 8008aca:	4b92      	ldr	r3, [pc, #584]	; (8008d14 <mainLoop+0x2c8>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	e003      	b.n	8008ada <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008ad2:	4b91      	ldr	r3, [pc, #580]	; (8008d18 <mainLoop+0x2cc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a91      	ldr	r2, [pc, #580]	; (8008d1c <mainLoop+0x2d0>)
 8008ad8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008ada:	4b91      	ldr	r3, [pc, #580]	; (8008d20 <mainLoop+0x2d4>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d039      	beq.n	8008b56 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ae2:	bf00      	nop
 8008ae4:	488f      	ldr	r0, [pc, #572]	; (8008d24 <mainLoop+0x2d8>)
 8008ae6:	f002 fa2a 	bl	800af3e <HAL_I2C_GetError>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d0f9      	beq.n	8008ae4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008af0:	bf00      	nop
 8008af2:	488c      	ldr	r0, [pc, #560]	; (8008d24 <mainLoop+0x2d8>)
 8008af4:	f002 fa16 	bl	800af24 <HAL_I2C_GetState>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d1f9      	bne.n	8008af2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8008afe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b02:	9302      	str	r3, [sp, #8]
 8008b04:	233f      	movs	r3, #63	; 0x3f
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	4b87      	ldr	r3, [pc, #540]	; (8008d28 <mainLoop+0x2dc>)
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	233f      	movs	r3, #63	; 0x3f
 8008b0e:	2200      	movs	r2, #0
 8008b10:	21a0      	movs	r1, #160	; 0xa0
 8008b12:	4884      	ldr	r0, [pc, #528]	; (8008d24 <mainLoop+0x2d8>)
 8008b14:	f001 fea4 	bl	800a860 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008b18:	2005      	movs	r0, #5
 8008b1a:	f000 fe17 	bl	800974c <HAL_Delay>

		  hafizaYaz=0;
 8008b1e:	4b80      	ldr	r3, [pc, #512]	; (8008d20 <mainLoop+0x2d4>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008b24:	4b81      	ldr	r3, [pc, #516]	; (8008d2c <mainLoop+0x2e0>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008b2c:	4a80      	ldr	r2, [pc, #512]	; (8008d30 <mainLoop+0x2e4>)
 8008b2e:	2101      	movs	r1, #1
 8008b30:	2002      	movs	r0, #2
 8008b32:	f7f7 ff3f 	bl	80009b4 <lcd_print>
 8008b36:	e008      	b.n	8008b4a <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008b38:	4b7c      	ldr	r3, [pc, #496]	; (8008d2c <mainLoop+0x2e0>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d104      	bne.n	8008b4a <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008b40:	4a7c      	ldr	r2, [pc, #496]	; (8008d34 <mainLoop+0x2e8>)
 8008b42:	2101      	movs	r1, #1
 8008b44:	2002      	movs	r0, #2
 8008b46:	f7f7 ff35 	bl	80009b4 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b4e:	f000 fdfd 	bl	800974c <HAL_Delay>
		  lcd_clear();
 8008b52:	f7f7 ff5b 	bl	8000a0c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008b56:	4b78      	ldr	r3, [pc, #480]	; (8008d38 <mainLoop+0x2ec>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f083 0301 	eor.w	r3, r3, #1
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d06e      	beq.n	8008c42 <mainLoop+0x1f6>
 8008b64:	486f      	ldr	r0, [pc, #444]	; (8008d24 <mainLoop+0x2d8>)
 8008b66:	f002 f9dd 	bl	800af24 <HAL_I2C_GetState>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d168      	bne.n	8008c42 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008b70:	4b72      	ldr	r3, [pc, #456]	; (8008d3c <mainLoop+0x2f0>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f083 0301 	eor.w	r3, r3, #1
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d044      	beq.n	8008c08 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008b7e:	4a70      	ldr	r2, [pc, #448]	; (8008d40 <mainLoop+0x2f4>)
 8008b80:	2101      	movs	r1, #1
 8008b82:	2001      	movs	r0, #1
 8008b84:	f7f7 ff16 	bl	80009b4 <lcd_print>
			  if(dilSecim==0) {
 8008b88:	4b68      	ldr	r3, [pc, #416]	; (8008d2c <mainLoop+0x2e0>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d105      	bne.n	8008b9c <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008b90:	4a6c      	ldr	r2, [pc, #432]	; (8008d44 <mainLoop+0x2f8>)
 8008b92:	2101      	movs	r1, #1
 8008b94:	2002      	movs	r0, #2
 8008b96:	f7f7 ff0d 	bl	80009b4 <lcd_print>
 8008b9a:	e008      	b.n	8008bae <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8008b9c:	4b63      	ldr	r3, [pc, #396]	; (8008d2c <mainLoop+0x2e0>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d104      	bne.n	8008bae <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8008ba4:	4a68      	ldr	r2, [pc, #416]	; (8008d48 <mainLoop+0x2fc>)
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	2002      	movs	r0, #2
 8008baa:	f7f7 ff03 	bl	80009b4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bb2:	f000 fdcb 	bl	800974c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008bb6:	bf00      	nop
 8008bb8:	485a      	ldr	r0, [pc, #360]	; (8008d24 <mainLoop+0x2d8>)
 8008bba:	f002 f9c0 	bl	800af3e <HAL_I2C_GetError>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d0f9      	beq.n	8008bb8 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008bc4:	e003      	b.n	8008bce <mainLoop+0x182>
				  HAL_Delay(1000);
 8008bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bca:	f000 fdbf 	bl	800974c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008bce:	4855      	ldr	r0, [pc, #340]	; (8008d24 <mainLoop+0x2d8>)
 8008bd0:	f002 f9a8 	bl	800af24 <HAL_I2C_GetState>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d1f5      	bne.n	8008bc6 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8008bda:	4b54      	ldr	r3, [pc, #336]	; (8008d2c <mainLoop+0x2e0>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d105      	bne.n	8008bee <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8008be2:	4a5a      	ldr	r2, [pc, #360]	; (8008d4c <mainLoop+0x300>)
 8008be4:	2101      	movs	r1, #1
 8008be6:	2002      	movs	r0, #2
 8008be8:	f7f7 fee4 	bl	80009b4 <lcd_print>
 8008bec:	e008      	b.n	8008c00 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8008bee:	4b4f      	ldr	r3, [pc, #316]	; (8008d2c <mainLoop+0x2e0>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d104      	bne.n	8008c00 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8008bf6:	4a56      	ldr	r2, [pc, #344]	; (8008d50 <mainLoop+0x304>)
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	2002      	movs	r0, #2
 8008bfc:	f7f7 feda 	bl	80009b4 <lcd_print>
			  }

			  ilkOkuma=1;
 8008c00:	4b4e      	ldr	r3, [pc, #312]	; (8008d3c <mainLoop+0x2f0>)
 8008c02:	2201      	movs	r2, #1
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e014      	b.n	8008c32 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8008c08:	4b48      	ldr	r3, [pc, #288]	; (8008d2c <mainLoop+0x2e0>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d105      	bne.n	8008c1c <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008c10:	4a50      	ldr	r2, [pc, #320]	; (8008d54 <mainLoop+0x308>)
 8008c12:	2101      	movs	r1, #1
 8008c14:	2002      	movs	r0, #2
 8008c16:	f7f7 fecd 	bl	80009b4 <lcd_print>
 8008c1a:	e008      	b.n	8008c2e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008c1c:	4b43      	ldr	r3, [pc, #268]	; (8008d2c <mainLoop+0x2e0>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d104      	bne.n	8008c2e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008c24:	4a4c      	ldr	r2, [pc, #304]	; (8008d58 <mainLoop+0x30c>)
 8008c26:	2101      	movs	r1, #1
 8008c28:	2002      	movs	r0, #2
 8008c2a:	f7f7 fec3 	bl	80009b4 <lcd_print>
			  }
			  lcd_clear();
 8008c2e:	f7f7 feed 	bl	8000a0c <lcd_clear>
		  }

		  lcd_clear();
 8008c32:	f7f7 feeb 	bl	8000a0c <lcd_clear>

		  eepromKontrol(1);
 8008c36:	2001      	movs	r0, #1
 8008c38:	f7fd faa2 	bl	8006180 <eepromKontrol>
		  hafizaOku=1;
 8008c3c:	4b3e      	ldr	r3, [pc, #248]	; (8008d38 <mainLoop+0x2ec>)
 8008c3e:	2201      	movs	r2, #1
 8008c40:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008c42:	4b46      	ldr	r3, [pc, #280]	; (8008d5c <mainLoop+0x310>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d11c      	bne.n	8008c84 <mainLoop+0x238>
 8008c4a:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <mainLoop+0x314>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f083 0301 	eor.w	r3, r3, #1
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d015      	beq.n	8008c84 <mainLoop+0x238>
 8008c58:	4b42      	ldr	r3, [pc, #264]	; (8008d64 <mainLoop+0x318>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d111      	bne.n	8008c84 <mainLoop+0x238>
			lcd_clear();
 8008c60:	f7f7 fed4 	bl	8000a0c <lcd_clear>
			HAL_Delay(10);
 8008c64:	200a      	movs	r0, #10
 8008c66:	f000 fd71 	bl	800974c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008c6a:	4a3f      	ldr	r2, [pc, #252]	; (8008d68 <mainLoop+0x31c>)
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	2001      	movs	r0, #1
 8008c70:	f7f7 fea0 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008c74:	4a3d      	ldr	r2, [pc, #244]	; (8008d6c <mainLoop+0x320>)
 8008c76:	2101      	movs	r1, #1
 8008c78:	2002      	movs	r0, #2
 8008c7a:	f7f7 fe9b 	bl	80009b4 <lcd_print>
			mesajYazildi=1;
 8008c7e:	4b38      	ldr	r3, [pc, #224]	; (8008d60 <mainLoop+0x314>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008c84:	4b35      	ldr	r3, [pc, #212]	; (8008d5c <mainLoop+0x310>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d112      	bne.n	8008cb2 <mainLoop+0x266>
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	481f      	ldr	r0, [pc, #124]	; (8008d0c <mainLoop+0x2c0>)
 8008c90:	f001 fb2c 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d10b      	bne.n	8008cb2 <mainLoop+0x266>
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	481b      	ldr	r0, [pc, #108]	; (8008d0c <mainLoop+0x2c0>)
 8008c9e:	f001 fb25 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d104      	bne.n	8008cb2 <mainLoop+0x266>
			menuGiris=1;
 8008ca8:	4b2c      	ldr	r3, [pc, #176]	; (8008d5c <mainLoop+0x310>)
 8008caa:	2201      	movs	r2, #1
 8008cac:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008cae:	f7f7 fead 	bl	8000a0c <lcd_clear>
		}

		if(menuGiris==1) {
 8008cb2:	4b2a      	ldr	r3, [pc, #168]	; (8008d5c <mainLoop+0x310>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d102      	bne.n	8008cc0 <mainLoop+0x274>
			menu(&hi2c1);
 8008cba:	481a      	ldr	r0, [pc, #104]	; (8008d24 <mainLoop+0x2d8>)
 8008cbc:	f7f8 ffde 	bl	8001c7c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cc4:	4812      	ldr	r0, [pc, #72]	; (8008d10 <mainLoop+0x2c4>)
 8008cc6:	f001 fb40 	bl	800a34a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cce:	4828      	ldr	r0, [pc, #160]	; (8008d70 <mainLoop+0x324>)
 8008cd0:	f001 fb0c 	bl	800a2ec <HAL_GPIO_ReadPin>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10a      	bne.n	8008cf0 <mainLoop+0x2a4>
 8008cda:	4b26      	ldr	r3, [pc, #152]	; (8008d74 <mainLoop+0x328>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	f083 0301 	eor.w	r3, r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <mainLoop+0x2a4>
			stopVar=1;
 8008ce8:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <mainLoop+0x32c>)
 8008cea:	2201      	movs	r2, #1
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	e002      	b.n	8008cf6 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8008cf0:	4b21      	ldr	r3, [pc, #132]	; (8008d78 <mainLoop+0x32c>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008cf6:	f7fd fec9 	bl	8006a8c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008cfa:	f7fd fefb 	bl	8006af4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008cfe:	f7fd ff3f 	bl	8006b80 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008d02:	f7fd ff8f 	bl	8006c24 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008d06:	f7ff fadd 	bl	80082c4 <checkDemoModCalisma>
		checkLCDBacklight();
 8008d0a:	e6a2      	b.n	8008a52 <mainLoop+0x6>
 8008d0c:	40010800 	.word	0x40010800
 8008d10:	40011000 	.word	0x40011000
 8008d14:	20000ccc 	.word	0x20000ccc
 8008d18:	20000bd4 	.word	0x20000bd4
 8008d1c:	20000bf0 	.word	0x20000bf0
 8008d20:	20000cc9 	.word	0x20000cc9
 8008d24:	20000e5c 	.word	0x20000e5c
 8008d28:	20000b38 	.word	0x20000b38
 8008d2c:	20000cbe 	.word	0x20000cbe
 8008d30:	0800eca0 	.word	0x0800eca0
 8008d34:	0800ecb4 	.word	0x0800ecb4
 8008d38:	20000cca 	.word	0x20000cca
 8008d3c:	20000ccb 	.word	0x20000ccb
 8008d40:	0800ecc8 	.word	0x0800ecc8
 8008d44:	0800ecdc 	.word	0x0800ecdc
 8008d48:	0800ecf0 	.word	0x0800ecf0
 8008d4c:	0800ed04 	.word	0x0800ed04
 8008d50:	0800ed18 	.word	0x0800ed18
 8008d54:	0800ed2c 	.word	0x0800ed2c
 8008d58:	0800ed40 	.word	0x0800ed40
 8008d5c:	20000cba 	.word	0x20000cba
 8008d60:	20000cd1 	.word	0x20000cd1
 8008d64:	20000cbb 	.word	0x20000cbb
 8008d68:	0800ec04 	.word	0x0800ec04
 8008d6c:	0800ec18 	.word	0x0800ec18
 8008d70:	40010c00 	.word	0x40010c00
 8008d74:	20000cf2 	.word	0x20000cf2
 8008d78:	20000cef 	.word	0x20000cef

08008d7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	4a03      	ldr	r2, [pc, #12]	; (8008d98 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008d8c:	6013      	str	r3, [r2, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr
 8008d98:	20000bd4 	.word	0x20000bd4

08008d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008da0:	f000 fc72 	bl	8009688 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008da8:	f000 fcd0 	bl	800974c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008dac:	f000 f8a2 	bl	8008ef4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008db0:	f000 f9c4 	bl	800913c <MX_GPIO_Init>
  MX_CAN_Init();
 8008db4:	f000 f8e4 	bl	8008f80 <MX_CAN_Init>
  MX_I2C1_Init();
 8008db8:	f000 f916 	bl	8008fe8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008dbc:	f000 f942 	bl	8009044 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008dc0:	f000 f992 	bl	80090e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	2140      	movs	r1, #64	; 0x40
 8008dc8:	4840      	ldr	r0, [pc, #256]	; (8008ecc <main+0x130>)
 8008dca:	f001 faa6 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008dce:	2201      	movs	r2, #1
 8008dd0:	2180      	movs	r1, #128	; 0x80
 8008dd2:	483e      	ldr	r0, [pc, #248]	; (8008ecc <main+0x130>)
 8008dd4:	f001 faa1 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008dd8:	200a      	movs	r0, #10
 8008dda:	f000 fcb7 	bl	800974c <HAL_Delay>
  lcd_init();
 8008dde:	f7f7 fdb7 	bl	8000950 <lcd_init>
  HAL_Delay(10);
 8008de2:	200a      	movs	r0, #10
 8008de4:	f000 fcb2 	bl	800974c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008de8:	4839      	ldr	r0, [pc, #228]	; (8008ed0 <main+0x134>)
 8008dea:	f003 f949 	bl	800c080 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008dee:	bf00      	nop
 8008df0:	4838      	ldr	r0, [pc, #224]	; (8008ed4 <main+0x138>)
 8008df2:	f002 f8a4 	bl	800af3e <HAL_I2C_GetError>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d0f9      	beq.n	8008df0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008dfc:	bf00      	nop
 8008dfe:	4835      	ldr	r0, [pc, #212]	; (8008ed4 <main+0x138>)
 8008e00:	f002 f890 	bl	800af24 <HAL_I2C_GetState>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d1f9      	bne.n	8008dfe <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e10:	482e      	ldr	r0, [pc, #184]	; (8008ecc <main+0x130>)
 8008e12:	f001 fa82 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008e16:	2200      	movs	r2, #0
 8008e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e1c:	482b      	ldr	r0, [pc, #172]	; (8008ecc <main+0x130>)
 8008e1e:	f001 fa7c 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2104      	movs	r1, #4
 8008e26:	4829      	ldr	r0, [pc, #164]	; (8008ecc <main+0x130>)
 8008e28:	f001 fa77 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2102      	movs	r1, #2
 8008e30:	4826      	ldr	r0, [pc, #152]	; (8008ecc <main+0x130>)
 8008e32:	f001 fa72 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008e36:	2200      	movs	r2, #0
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4824      	ldr	r0, [pc, #144]	; (8008ecc <main+0x130>)
 8008e3c:	f001 fa6d 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008e40:	2200      	movs	r2, #0
 8008e42:	2120      	movs	r1, #32
 8008e44:	4824      	ldr	r0, [pc, #144]	; (8008ed8 <main+0x13c>)
 8008e46:	f001 fa68 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2110      	movs	r1, #16
 8008e4e:	4822      	ldr	r0, [pc, #136]	; (8008ed8 <main+0x13c>)
 8008e50:	f001 fa63 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008e54:	2200      	movs	r2, #0
 8008e56:	2180      	movs	r1, #128	; 0x80
 8008e58:	4820      	ldr	r0, [pc, #128]	; (8008edc <main+0x140>)
 8008e5a:	f001 fa5e 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2140      	movs	r1, #64	; 0x40
 8008e62:	481e      	ldr	r0, [pc, #120]	; (8008edc <main+0x140>)
 8008e64:	f001 fa59 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2120      	movs	r1, #32
 8008e6c:	481b      	ldr	r0, [pc, #108]	; (8008edc <main+0x140>)
 8008e6e:	f001 fa54 	bl	800a31a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008e72:	2200      	movs	r2, #0
 8008e74:	2110      	movs	r1, #16
 8008e76:	4819      	ldr	r0, [pc, #100]	; (8008edc <main+0x140>)
 8008e78:	f001 fa4f 	bl	800a31a <HAL_GPIO_WritePin>

  i2cTest();
 8008e7c:	f7fd fd38 	bl	80068f0 <i2cTest>
  HAL_Delay(100);
 8008e80:	2064      	movs	r0, #100	; 0x64
 8008e82:	f000 fc63 	bl	800974c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008e86:	4a16      	ldr	r2, [pc, #88]	; (8008ee0 <main+0x144>)
 8008e88:	2101      	movs	r1, #1
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	f7f7 fd92 	bl	80009b4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008e90:	4a14      	ldr	r2, [pc, #80]	; (8008ee4 <main+0x148>)
 8008e92:	2101      	movs	r1, #1
 8008e94:	2002      	movs	r0, #2
 8008e96:	f7f7 fd8d 	bl	80009b4 <lcd_print>
  HAL_Delay(1000);
 8008e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e9e:	f000 fc55 	bl	800974c <HAL_Delay>
  lcd_clear();
 8008ea2:	f7f7 fdb3 	bl	8000a0c <lcd_clear>

  eepromKontrol(0);
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f7fd f96a 	bl	8006180 <eepromKontrol>
  iotModeStartup(&hi2c1, &huart1);
 8008eac:	490e      	ldr	r1, [pc, #56]	; (8008ee8 <main+0x14c>)
 8008eae:	4809      	ldr	r0, [pc, #36]	; (8008ed4 <main+0x138>)
 8008eb0:	f7f8 f84e 	bl	8000f50 <iotModeStartup>

  lcd_clear();
 8008eb4:	f7f7 fdaa 	bl	8000a0c <lcd_clear>
  HAL_Delay(200);
 8008eb8:	20c8      	movs	r0, #200	; 0xc8
 8008eba:	f000 fc47 	bl	800974c <HAL_Delay>

  backLightTimer = millis;
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <main+0x150>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a0b      	ldr	r2, [pc, #44]	; (8008ef0 <main+0x154>)
 8008ec4:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008ec6:	f7ff fdc1 	bl	8008a4c <mainLoop>
 8008eca:	e7fc      	b.n	8008ec6 <main+0x12a>
 8008ecc:	40010c00 	.word	0x40010c00
 8008ed0:	20000eb0 	.word	0x20000eb0
 8008ed4:	20000e5c 	.word	0x20000e5c
 8008ed8:	40011000 	.word	0x40011000
 8008edc:	40010800 	.word	0x40010800
 8008ee0:	0800ed54 	.word	0x0800ed54
 8008ee4:	0800ed68 	.word	0x0800ed68
 8008ee8:	20000ef8 	.word	0x20000ef8
 8008eec:	20000bd4 	.word	0x20000bd4
 8008ef0:	20000bf0 	.word	0x20000bf0

08008ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b090      	sub	sp, #64	; 0x40
 8008ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008efa:	f107 0318 	add.w	r3, r7, #24
 8008efe:	2228      	movs	r2, #40	; 0x28
 8008f00:	2100      	movs	r1, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f004 fb92 	bl	800d62c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	605a      	str	r2, [r3, #4]
 8008f10:	609a      	str	r2, [r3, #8]
 8008f12:	60da      	str	r2, [r3, #12]
 8008f14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008f16:	2301      	movs	r3, #1
 8008f18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008f20:	2300      	movs	r3, #0
 8008f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f24:	2301      	movs	r3, #1
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008f32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f38:	f107 0318 	add.w	r3, r7, #24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f002 fc3f 	bl	800b7c0 <HAL_RCC_OscConfig>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008f48:	f000 f9a2 	bl	8009290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f4c:	230f      	movs	r3, #15
 8008f4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f50:	2302      	movs	r3, #2
 8008f52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008f62:	1d3b      	adds	r3, r7, #4
 8008f64:	2102      	movs	r1, #2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f002 feac 	bl	800bcc4 <HAL_RCC_ClockConfig>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008f72:	f000 f98d 	bl	8009290 <Error_Handler>
  }
}
 8008f76:	bf00      	nop
 8008f78:	3740      	adds	r7, #64	; 0x40
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008f84:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008f86:	4a17      	ldr	r2, [pc, #92]	; (8008fe4 <MX_CAN_Init+0x64>)
 8008f88:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008f8a:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008f8c:	2210      	movs	r2, #16
 8008f8e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008f90:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008f9c:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008fae:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008fcc:	4804      	ldr	r0, [pc, #16]	; (8008fe0 <MX_CAN_Init+0x60>)
 8008fce:	f000 fbe1 	bl	8009794 <HAL_CAN_Init>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008fd8:	f000 f95a 	bl	8009290 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008fdc:	bf00      	nop
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000e34 	.word	0x20000e34
 8008fe4:	40006400 	.word	0x40006400

08008fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <MX_I2C1_Init+0x50>)
 8008fee:	4a13      	ldr	r2, [pc, #76]	; (800903c <MX_I2C1_Init+0x54>)
 8008ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <MX_I2C1_Init+0x50>)
 8008ff4:	4a12      	ldr	r2, [pc, #72]	; (8009040 <MX_I2C1_Init+0x58>)
 8008ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <MX_I2C1_Init+0x50>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008ffe:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <MX_I2C1_Init+0x50>)
 8009000:	2200      	movs	r2, #0
 8009002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <MX_I2C1_Init+0x50>)
 8009006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800900a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <MX_I2C1_Init+0x50>)
 800900e:	2200      	movs	r2, #0
 8009010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <MX_I2C1_Init+0x50>)
 8009014:	2200      	movs	r2, #0
 8009016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <MX_I2C1_Init+0x50>)
 800901a:	2200      	movs	r2, #0
 800901c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <MX_I2C1_Init+0x50>)
 8009020:	2200      	movs	r2, #0
 8009022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009024:	4804      	ldr	r0, [pc, #16]	; (8009038 <MX_I2C1_Init+0x50>)
 8009026:	f001 f9a9 	bl	800a37c <HAL_I2C_Init>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009030:	f000 f92e 	bl	8009290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009034:	bf00      	nop
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000e5c 	.word	0x20000e5c
 800903c:	40005400 	.word	0x40005400
 8009040:	00061a80 	.word	0x00061a80

08009044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800904a:	f107 0308 	add.w	r3, r7, #8
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	605a      	str	r2, [r3, #4]
 8009054:	609a      	str	r2, [r3, #8]
 8009056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009058:	463b      	mov	r3, r7
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009060:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <MX_TIM1_Init+0x9c>)
 8009062:	4a20      	ldr	r2, [pc, #128]	; (80090e4 <MX_TIM1_Init+0xa0>)
 8009064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009066:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <MX_TIM1_Init+0x9c>)
 8009068:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800906c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800906e:	4b1c      	ldr	r3, [pc, #112]	; (80090e0 <MX_TIM1_Init+0x9c>)
 8009070:	2200      	movs	r2, #0
 8009072:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009074:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <MX_TIM1_Init+0x9c>)
 8009076:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800907a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800907c:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <MX_TIM1_Init+0x9c>)
 800907e:	2200      	movs	r2, #0
 8009080:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009082:	4b17      	ldr	r3, [pc, #92]	; (80090e0 <MX_TIM1_Init+0x9c>)
 8009084:	2200      	movs	r2, #0
 8009086:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009088:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <MX_TIM1_Init+0x9c>)
 800908a:	2200      	movs	r2, #0
 800908c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800908e:	4814      	ldr	r0, [pc, #80]	; (80090e0 <MX_TIM1_Init+0x9c>)
 8009090:	f002 ffa6 	bl	800bfe0 <HAL_TIM_Base_Init>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800909a:	f000 f8f9 	bl	8009290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800909e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80090a4:	f107 0308 	add.w	r3, r7, #8
 80090a8:	4619      	mov	r1, r3
 80090aa:	480d      	ldr	r0, [pc, #52]	; (80090e0 <MX_TIM1_Init+0x9c>)
 80090ac:	f003 f950 	bl	800c350 <HAL_TIM_ConfigClockSource>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80090b6:	f000 f8eb 	bl	8009290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090ba:	2300      	movs	r3, #0
 80090bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090be:	2300      	movs	r3, #0
 80090c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80090c2:	463b      	mov	r3, r7
 80090c4:	4619      	mov	r1, r3
 80090c6:	4806      	ldr	r0, [pc, #24]	; (80090e0 <MX_TIM1_Init+0x9c>)
 80090c8:	f003 fb3e 	bl	800c748 <HAL_TIMEx_MasterConfigSynchronization>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80090d2:	f000 f8dd 	bl	8009290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80090d6:	bf00      	nop
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000eb0 	.word	0x20000eb0
 80090e4:	40012c00 	.word	0x40012c00

080090e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 80090ee:	4a12      	ldr	r2, [pc, #72]	; (8009138 <MX_USART1_UART_Init+0x50>)
 80090f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80090f2:	4b10      	ldr	r3, [pc, #64]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 80090f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80090fa:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 8009102:	2200      	movs	r2, #0
 8009104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 8009108:	2200      	movs	r2, #0
 800910a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800910c:	4b09      	ldr	r3, [pc, #36]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 800910e:	220c      	movs	r2, #12
 8009110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 8009114:	2200      	movs	r2, #0
 8009116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 800911a:	2200      	movs	r2, #0
 800911c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800911e:	4805      	ldr	r0, [pc, #20]	; (8009134 <MX_USART1_UART_Init+0x4c>)
 8009120:	f003 fb90 	bl	800c844 <HAL_UART_Init>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800912a:	f000 f8b1 	bl	8009290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000ef8 	.word	0x20000ef8
 8009138:	40013800 	.word	0x40013800

0800913c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009142:	f107 0310 	add.w	r3, r7, #16
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	609a      	str	r2, [r3, #8]
 800914e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009150:	4b4b      	ldr	r3, [pc, #300]	; (8009280 <MX_GPIO_Init+0x144>)
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4a4a      	ldr	r2, [pc, #296]	; (8009280 <MX_GPIO_Init+0x144>)
 8009156:	f043 0310 	orr.w	r3, r3, #16
 800915a:	6193      	str	r3, [r2, #24]
 800915c:	4b48      	ldr	r3, [pc, #288]	; (8009280 <MX_GPIO_Init+0x144>)
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009168:	4b45      	ldr	r3, [pc, #276]	; (8009280 <MX_GPIO_Init+0x144>)
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	4a44      	ldr	r2, [pc, #272]	; (8009280 <MX_GPIO_Init+0x144>)
 800916e:	f043 0320 	orr.w	r3, r3, #32
 8009172:	6193      	str	r3, [r2, #24]
 8009174:	4b42      	ldr	r3, [pc, #264]	; (8009280 <MX_GPIO_Init+0x144>)
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	60bb      	str	r3, [r7, #8]
 800917e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009180:	4b3f      	ldr	r3, [pc, #252]	; (8009280 <MX_GPIO_Init+0x144>)
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	4a3e      	ldr	r2, [pc, #248]	; (8009280 <MX_GPIO_Init+0x144>)
 8009186:	f043 0304 	orr.w	r3, r3, #4
 800918a:	6193      	str	r3, [r2, #24]
 800918c:	4b3c      	ldr	r3, [pc, #240]	; (8009280 <MX_GPIO_Init+0x144>)
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	607b      	str	r3, [r7, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009198:	4b39      	ldr	r3, [pc, #228]	; (8009280 <MX_GPIO_Init+0x144>)
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	4a38      	ldr	r2, [pc, #224]	; (8009280 <MX_GPIO_Init+0x144>)
 800919e:	f043 0308 	orr.w	r3, r3, #8
 80091a2:	6193      	str	r3, [r2, #24]
 80091a4:	4b36      	ldr	r3, [pc, #216]	; (8009280 <MX_GPIO_Init+0x144>)
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80091b0:	2200      	movs	r2, #0
 80091b2:	21f0      	movs	r1, #240	; 0xf0
 80091b4:	4833      	ldr	r0, [pc, #204]	; (8009284 <MX_GPIO_Init+0x148>)
 80091b6:	f001 f8b0 	bl	800a31a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80091ba:	2200      	movs	r2, #0
 80091bc:	f241 0130 	movw	r1, #4144	; 0x1030
 80091c0:	4831      	ldr	r0, [pc, #196]	; (8009288 <MX_GPIO_Init+0x14c>)
 80091c2:	f001 f8aa 	bl	800a31a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80091c6:	2200      	movs	r2, #0
 80091c8:	f640 4107 	movw	r1, #3079	; 0xc07
 80091cc:	482f      	ldr	r0, [pc, #188]	; (800928c <MX_GPIO_Init+0x150>)
 80091ce:	f001 f8a4 	bl	800a31a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80091d2:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80091d6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d8:	2300      	movs	r3, #0
 80091da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	4619      	mov	r1, r3
 80091e6:	4828      	ldr	r0, [pc, #160]	; (8009288 <MX_GPIO_Init+0x14c>)
 80091e8:	f000 fe20 	bl	8009e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80091ec:	f248 130f 	movw	r3, #33039	; 0x810f
 80091f0:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091fa:	f107 0310 	add.w	r3, r7, #16
 80091fe:	4619      	mov	r1, r3
 8009200:	4820      	ldr	r0, [pc, #128]	; (8009284 <MX_GPIO_Init+0x148>)
 8009202:	f000 fe13 	bl	8009e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009206:	23f0      	movs	r3, #240	; 0xf0
 8009208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800920a:	2301      	movs	r3, #1
 800920c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800920e:	2300      	movs	r3, #0
 8009210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009212:	2302      	movs	r3, #2
 8009214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009216:	f107 0310 	add.w	r3, r7, #16
 800921a:	4619      	mov	r1, r3
 800921c:	4819      	ldr	r0, [pc, #100]	; (8009284 <MX_GPIO_Init+0x148>)
 800921e:	f000 fe05 	bl	8009e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009222:	f241 0330 	movw	r3, #4144	; 0x1030
 8009226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009228:	2301      	movs	r3, #1
 800922a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800922c:	2300      	movs	r3, #0
 800922e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009230:	2302      	movs	r3, #2
 8009232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	4619      	mov	r1, r3
 800923a:	4813      	ldr	r0, [pc, #76]	; (8009288 <MX_GPIO_Init+0x14c>)
 800923c:	f000 fdf6 	bl	8009e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009240:	f640 4307 	movw	r3, #3079	; 0xc07
 8009244:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009246:	2301      	movs	r3, #1
 8009248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924a:	2300      	movs	r3, #0
 800924c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800924e:	2302      	movs	r3, #2
 8009250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009252:	f107 0310 	add.w	r3, r7, #16
 8009256:	4619      	mov	r1, r3
 8009258:	480c      	ldr	r0, [pc, #48]	; (800928c <MX_GPIO_Init+0x150>)
 800925a:	f000 fde7 	bl	8009e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800925e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800926c:	f107 0310 	add.w	r3, r7, #16
 8009270:	4619      	mov	r1, r3
 8009272:	4806      	ldr	r0, [pc, #24]	; (800928c <MX_GPIO_Init+0x150>)
 8009274:	f000 fdda 	bl	8009e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009278:	bf00      	nop
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40021000 	.word	0x40021000
 8009284:	40010800 	.word	0x40010800
 8009288:	40011000 	.word	0x40011000
 800928c:	40010c00 	.word	0x40010c00

08009290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009294:	bf00      	nop
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr

0800929c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <HAL_MspInit+0x5c>)
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	4a14      	ldr	r2, [pc, #80]	; (80092f8 <HAL_MspInit+0x5c>)
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6193      	str	r3, [r2, #24]
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <HAL_MspInit+0x5c>)
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	60bb      	str	r3, [r7, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092ba:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <HAL_MspInit+0x5c>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4a0e      	ldr	r2, [pc, #56]	; (80092f8 <HAL_MspInit+0x5c>)
 80092c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c4:	61d3      	str	r3, [r2, #28]
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <HAL_MspInit+0x5c>)
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ce:	607b      	str	r3, [r7, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <HAL_MspInit+0x60>)
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	4a04      	ldr	r2, [pc, #16]	; (80092fc <HAL_MspInit+0x60>)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bc80      	pop	{r7}
 80092f6:	4770      	bx	lr
 80092f8:	40021000 	.word	0x40021000
 80092fc:	40010000 	.word	0x40010000

08009300 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	609a      	str	r2, [r3, #8]
 8009314:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <HAL_CAN_MspInit+0x8c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d131      	bne.n	8009384 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009320:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <HAL_CAN_MspInit+0x90>)
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	4a1a      	ldr	r2, [pc, #104]	; (8009390 <HAL_CAN_MspInit+0x90>)
 8009326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800932a:	61d3      	str	r3, [r2, #28]
 800932c:	4b18      	ldr	r3, [pc, #96]	; (8009390 <HAL_CAN_MspInit+0x90>)
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009338:	4b15      	ldr	r3, [pc, #84]	; (8009390 <HAL_CAN_MspInit+0x90>)
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	4a14      	ldr	r2, [pc, #80]	; (8009390 <HAL_CAN_MspInit+0x90>)
 800933e:	f043 0304 	orr.w	r3, r3, #4
 8009342:	6193      	str	r3, [r2, #24]
 8009344:	4b12      	ldr	r3, [pc, #72]	; (8009390 <HAL_CAN_MspInit+0x90>)
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	60bb      	str	r3, [r7, #8]
 800934e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935a:	2300      	movs	r3, #0
 800935c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800935e:	f107 0310 	add.w	r3, r7, #16
 8009362:	4619      	mov	r1, r3
 8009364:	480b      	ldr	r0, [pc, #44]	; (8009394 <HAL_CAN_MspInit+0x94>)
 8009366:	f000 fd61 	bl	8009e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800936a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800936e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009370:	2302      	movs	r3, #2
 8009372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009374:	2303      	movs	r3, #3
 8009376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009378:	f107 0310 	add.w	r3, r7, #16
 800937c:	4619      	mov	r1, r3
 800937e:	4805      	ldr	r0, [pc, #20]	; (8009394 <HAL_CAN_MspInit+0x94>)
 8009380:	f000 fd54 	bl	8009e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8009384:	bf00      	nop
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40006400 	.word	0x40006400
 8009390:	40021000 	.word	0x40021000
 8009394:	40010800 	.word	0x40010800

08009398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a0:	f107 0310 	add.w	r3, r7, #16
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	605a      	str	r2, [r3, #4]
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a15      	ldr	r2, [pc, #84]	; (8009408 <HAL_I2C_MspInit+0x70>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d123      	bne.n	8009400 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093b8:	4b14      	ldr	r3, [pc, #80]	; (800940c <HAL_I2C_MspInit+0x74>)
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	4a13      	ldr	r2, [pc, #76]	; (800940c <HAL_I2C_MspInit+0x74>)
 80093be:	f043 0308 	orr.w	r3, r3, #8
 80093c2:	6193      	str	r3, [r2, #24]
 80093c4:	4b11      	ldr	r3, [pc, #68]	; (800940c <HAL_I2C_MspInit+0x74>)
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80093d0:	23c0      	movs	r3, #192	; 0xc0
 80093d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80093d4:	2312      	movs	r3, #18
 80093d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093d8:	2303      	movs	r3, #3
 80093da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	4619      	mov	r1, r3
 80093e2:	480b      	ldr	r0, [pc, #44]	; (8009410 <HAL_I2C_MspInit+0x78>)
 80093e4:	f000 fd22 	bl	8009e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80093e8:	4b08      	ldr	r3, [pc, #32]	; (800940c <HAL_I2C_MspInit+0x74>)
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	4a07      	ldr	r2, [pc, #28]	; (800940c <HAL_I2C_MspInit+0x74>)
 80093ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093f2:	61d3      	str	r3, [r2, #28]
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <HAL_I2C_MspInit+0x74>)
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093fc:	60bb      	str	r3, [r7, #8]
 80093fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009400:	bf00      	nop
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40005400 	.word	0x40005400
 800940c:	40021000 	.word	0x40021000
 8009410:	40010c00 	.word	0x40010c00

08009414 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0a      	ldr	r2, [pc, #40]	; (800944c <HAL_I2C_MspDeInit+0x38>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d10d      	bne.n	8009442 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009426:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_I2C_MspDeInit+0x3c>)
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	4a09      	ldr	r2, [pc, #36]	; (8009450 <HAL_I2C_MspDeInit+0x3c>)
 800942c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009430:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009432:	2140      	movs	r1, #64	; 0x40
 8009434:	4807      	ldr	r0, [pc, #28]	; (8009454 <HAL_I2C_MspDeInit+0x40>)
 8009436:	f000 fe8d 	bl	800a154 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800943a:	2180      	movs	r1, #128	; 0x80
 800943c:	4805      	ldr	r0, [pc, #20]	; (8009454 <HAL_I2C_MspDeInit+0x40>)
 800943e:	f000 fe89 	bl	800a154 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40005400 	.word	0x40005400
 8009450:	40021000 	.word	0x40021000
 8009454:	40010c00 	.word	0x40010c00

08009458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0d      	ldr	r2, [pc, #52]	; (800949c <HAL_TIM_Base_MspInit+0x44>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d113      	bne.n	8009492 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800946a:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <HAL_TIM_Base_MspInit+0x48>)
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	4a0c      	ldr	r2, [pc, #48]	; (80094a0 <HAL_TIM_Base_MspInit+0x48>)
 8009470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009474:	6193      	str	r3, [r2, #24]
 8009476:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <HAL_TIM_Base_MspInit+0x48>)
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	2019      	movs	r0, #25
 8009488:	f000 fb57 	bl	8009b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800948c:	2019      	movs	r0, #25
 800948e:	f000 fb70 	bl	8009b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8009492:	bf00      	nop
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40021000 	.word	0x40021000

080094a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094ac:	f107 0310 	add.w	r3, r7, #16
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	605a      	str	r2, [r3, #4]
 80094b6:	609a      	str	r2, [r3, #8]
 80094b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_UART_MspInit+0x9c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d139      	bne.n	8009538 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80094c4:	4b1f      	ldr	r3, [pc, #124]	; (8009544 <HAL_UART_MspInit+0xa0>)
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <HAL_UART_MspInit+0xa0>)
 80094ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094ce:	6193      	str	r3, [r2, #24]
 80094d0:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <HAL_UART_MspInit+0xa0>)
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094dc:	4b19      	ldr	r3, [pc, #100]	; (8009544 <HAL_UART_MspInit+0xa0>)
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	4a18      	ldr	r2, [pc, #96]	; (8009544 <HAL_UART_MspInit+0xa0>)
 80094e2:	f043 0304 	orr.w	r3, r3, #4
 80094e6:	6193      	str	r3, [r2, #24]
 80094e8:	4b16      	ldr	r3, [pc, #88]	; (8009544 <HAL_UART_MspInit+0xa0>)
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80094f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fa:	2302      	movs	r3, #2
 80094fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80094fe:	2303      	movs	r3, #3
 8009500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009502:	f107 0310 	add.w	r3, r7, #16
 8009506:	4619      	mov	r1, r3
 8009508:	480f      	ldr	r0, [pc, #60]	; (8009548 <HAL_UART_MspInit+0xa4>)
 800950a:	f000 fc8f 	bl	8009e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800950e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009518:	2300      	movs	r3, #0
 800951a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800951c:	f107 0310 	add.w	r3, r7, #16
 8009520:	4619      	mov	r1, r3
 8009522:	4809      	ldr	r0, [pc, #36]	; (8009548 <HAL_UART_MspInit+0xa4>)
 8009524:	f000 fc82 	bl	8009e2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	2025      	movs	r0, #37	; 0x25
 800952e:	f000 fb04 	bl	8009b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009532:	2025      	movs	r0, #37	; 0x25
 8009534:	f000 fb1d 	bl	8009b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009538:	bf00      	nop
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40013800 	.word	0x40013800
 8009544:	40021000 	.word	0x40021000
 8009548:	40010800 	.word	0x40010800

0800954c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009550:	e7fe      	b.n	8009550 <NMI_Handler+0x4>

08009552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009552:	b480      	push	{r7}
 8009554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009556:	e7fe      	b.n	8009556 <HardFault_Handler+0x4>

08009558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800955c:	e7fe      	b.n	800955c <MemManage_Handler+0x4>

0800955e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800955e:	b480      	push	{r7}
 8009560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009562:	e7fe      	b.n	8009562 <BusFault_Handler+0x4>

08009564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009568:	e7fe      	b.n	8009568 <UsageFault_Handler+0x4>

0800956a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800956a:	b480      	push	{r7}
 800956c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr

08009576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009576:	b480      	push	{r7}
 8009578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800957a:	bf00      	nop
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr

08009582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009582:	b480      	push	{r7}
 8009584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009586:	bf00      	nop
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr

0800958e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009592:	f000 f8bf 	bl	8009714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095a0:	4802      	ldr	r0, [pc, #8]	; (80095ac <TIM1_UP_IRQHandler+0x10>)
 80095a2:	f002 fdcd 	bl	800c140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80095a6:	bf00      	nop
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20000eb0 	.word	0x20000eb0

080095b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80095b4:	4802      	ldr	r0, [pc, #8]	; (80095c0 <USART1_IRQHandler+0x10>)
 80095b6:	f003 f9ef 	bl	800c998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80095ba:	bf00      	nop
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000ef8 	.word	0x20000ef8

080095c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80095cc:	4a14      	ldr	r2, [pc, #80]	; (8009620 <_sbrk+0x5c>)
 80095ce:	4b15      	ldr	r3, [pc, #84]	; (8009624 <_sbrk+0x60>)
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80095d8:	4b13      	ldr	r3, [pc, #76]	; (8009628 <_sbrk+0x64>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d102      	bne.n	80095e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80095e0:	4b11      	ldr	r3, [pc, #68]	; (8009628 <_sbrk+0x64>)
 80095e2:	4a12      	ldr	r2, [pc, #72]	; (800962c <_sbrk+0x68>)
 80095e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80095e6:	4b10      	ldr	r3, [pc, #64]	; (8009628 <_sbrk+0x64>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d207      	bcs.n	8009604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095f4:	f004 f878 	bl	800d6e8 <__errno>
 80095f8:	4603      	mov	r3, r0
 80095fa:	220c      	movs	r2, #12
 80095fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80095fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009602:	e009      	b.n	8009618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009604:	4b08      	ldr	r3, [pc, #32]	; (8009628 <_sbrk+0x64>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800960a:	4b07      	ldr	r3, [pc, #28]	; (8009628 <_sbrk+0x64>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	4a05      	ldr	r2, [pc, #20]	; (8009628 <_sbrk+0x64>)
 8009614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009616:	68fb      	ldr	r3, [r7, #12]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	2000c000 	.word	0x2000c000
 8009624:	00000400 	.word	0x00000400
 8009628:	20000f40 	.word	0x20000f40
 800962c:	20001090 	.word	0x20001090

08009630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009634:	bf00      	nop
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800963c:	480c      	ldr	r0, [pc, #48]	; (8009670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800963e:	490d      	ldr	r1, [pc, #52]	; (8009674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009640:	4a0d      	ldr	r2, [pc, #52]	; (8009678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009644:	e002      	b.n	800964c <LoopCopyDataInit>

08009646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800964a:	3304      	adds	r3, #4

0800964c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800964c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800964e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009650:	d3f9      	bcc.n	8009646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009652:	4a0a      	ldr	r2, [pc, #40]	; (800967c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009654:	4c0a      	ldr	r4, [pc, #40]	; (8009680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009658:	e001      	b.n	800965e <LoopFillZerobss>

0800965a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800965a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800965c:	3204      	adds	r2, #4

0800965e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800965e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009660:	d3fb      	bcc.n	800965a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009662:	f7ff ffe5 	bl	8009630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009666:	f004 f845 	bl	800d6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800966a:	f7ff fb97 	bl	8008d9c <main>
  bx lr
 800966e:	4770      	bx	lr
  ldr r0, =_sdata
 8009670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009674:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8009678:	0800ee08 	.word	0x0800ee08
  ldr r2, =_sbss
 800967c:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8009680:	20001090 	.word	0x20001090

08009684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009684:	e7fe      	b.n	8009684 <ADC1_2_IRQHandler>
	...

08009688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800968c:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <HAL_Init+0x28>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a07      	ldr	r2, [pc, #28]	; (80096b0 <HAL_Init+0x28>)
 8009692:	f043 0310 	orr.w	r3, r3, #16
 8009696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009698:	2003      	movs	r0, #3
 800969a:	f000 fa43 	bl	8009b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800969e:	200f      	movs	r0, #15
 80096a0:	f000 f808 	bl	80096b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096a4:	f7ff fdfa 	bl	800929c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40022000 	.word	0x40022000

080096b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096bc:	4b12      	ldr	r3, [pc, #72]	; (8009708 <HAL_InitTick+0x54>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b12      	ldr	r3, [pc, #72]	; (800970c <HAL_InitTick+0x58>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	4619      	mov	r1, r3
 80096c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80096ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fa5b 	bl	8009b8e <HAL_SYSTICK_Config>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e00e      	b.n	8009700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b0f      	cmp	r3, #15
 80096e6:	d80a      	bhi.n	80096fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096e8:	2200      	movs	r2, #0
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	f000 fa23 	bl	8009b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80096f4:	4a06      	ldr	r2, [pc, #24]	; (8009710 <HAL_InitTick+0x5c>)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	e000      	b.n	8009700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	200009c4 	.word	0x200009c4
 800970c:	200009cc 	.word	0x200009cc
 8009710:	200009c8 	.word	0x200009c8

08009714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <HAL_IncTick+0x1c>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <HAL_IncTick+0x20>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4413      	add	r3, r2
 8009724:	4a03      	ldr	r2, [pc, #12]	; (8009734 <HAL_IncTick+0x20>)
 8009726:	6013      	str	r3, [r2, #0]
}
 8009728:	bf00      	nop
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr
 8009730:	200009cc 	.word	0x200009cc
 8009734:	20000f44 	.word	0x20000f44

08009738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  return uwTick;
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <HAL_GetTick+0x10>)
 800973e:	681b      	ldr	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr
 8009748:	20000f44 	.word	0x20000f44

0800974c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009754:	f7ff fff0 	bl	8009738 <HAL_GetTick>
 8009758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d005      	beq.n	8009772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <HAL_Delay+0x44>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009772:	bf00      	nop
 8009774:	f7ff ffe0 	bl	8009738 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d8f7      	bhi.n	8009774 <HAL_Delay+0x28>
  {
  }
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	200009cc 	.word	0x200009cc

08009794 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e0ed      	b.n	8009982 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff fda4 	bl	8009300 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0201 	orr.w	r2, r2, #1
 80097c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097c8:	f7ff ffb6 	bl	8009738 <HAL_GetTick>
 80097cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097ce:	e012      	b.n	80097f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80097d0:	f7ff ffb2 	bl	8009738 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b0a      	cmp	r3, #10
 80097dc:	d90b      	bls.n	80097f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2205      	movs	r2, #5
 80097ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e0c5      	b.n	8009982 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0e5      	beq.n	80097d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0202 	bic.w	r2, r2, #2
 8009812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009814:	f7ff ff90 	bl	8009738 <HAL_GetTick>
 8009818:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800981a:	e012      	b.n	8009842 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800981c:	f7ff ff8c 	bl	8009738 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b0a      	cmp	r3, #10
 8009828:	d90b      	bls.n	8009842 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2205      	movs	r2, #5
 800983a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e09f      	b.n	8009982 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e5      	bne.n	800981c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	7e1b      	ldrb	r3, [r3, #24]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d108      	bne.n	800986a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	e007      	b.n	800987a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7e5b      	ldrb	r3, [r3, #25]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d108      	bne.n	8009894 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e007      	b.n	80098a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7e9b      	ldrb	r3, [r3, #26]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d108      	bne.n	80098be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0220 	orr.w	r2, r2, #32
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	e007      	b.n	80098ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0220 	bic.w	r2, r2, #32
 80098cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7edb      	ldrb	r3, [r3, #27]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d108      	bne.n	80098e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 0210 	bic.w	r2, r2, #16
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e007      	b.n	80098f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0210 	orr.w	r2, r2, #16
 80098f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7f1b      	ldrb	r3, [r3, #28]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d108      	bne.n	8009912 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0208 	orr.w	r2, r2, #8
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	e007      	b.n	8009922 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0208 	bic.w	r2, r2, #8
 8009920:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7f5b      	ldrb	r3, [r3, #29]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d108      	bne.n	800993c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f042 0204 	orr.w	r2, r2, #4
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e007      	b.n	800994c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0204 	bic.w	r2, r2, #4
 800994a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	431a      	orrs	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	ea42 0103 	orr.w	r1, r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	1e5a      	subs	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <__NVIC_SetPriorityGrouping>:
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800999c:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <__NVIC_SetPriorityGrouping+0x44>)
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099a8:	4013      	ands	r3, r2
 80099aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099be:	4a04      	ldr	r2, [pc, #16]	; (80099d0 <__NVIC_SetPriorityGrouping+0x44>)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	60d3      	str	r3, [r2, #12]
}
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	e000ed00 	.word	0xe000ed00

080099d4 <__NVIC_GetPriorityGrouping>:
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099d8:	4b04      	ldr	r3, [pc, #16]	; (80099ec <__NVIC_GetPriorityGrouping+0x18>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	0a1b      	lsrs	r3, r3, #8
 80099de:	f003 0307 	and.w	r3, r3, #7
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	e000ed00 	.word	0xe000ed00

080099f0 <__NVIC_EnableIRQ>:
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	db0b      	blt.n	8009a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	f003 021f 	and.w	r2, r3, #31
 8009a08:	4906      	ldr	r1, [pc, #24]	; (8009a24 <__NVIC_EnableIRQ+0x34>)
 8009a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a0e:	095b      	lsrs	r3, r3, #5
 8009a10:	2001      	movs	r0, #1
 8009a12:	fa00 f202 	lsl.w	r2, r0, r2
 8009a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bc80      	pop	{r7}
 8009a22:	4770      	bx	lr
 8009a24:	e000e100 	.word	0xe000e100

08009a28 <__NVIC_SetPriority>:
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	6039      	str	r1, [r7, #0]
 8009a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	db0a      	blt.n	8009a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	490c      	ldr	r1, [pc, #48]	; (8009a74 <__NVIC_SetPriority+0x4c>)
 8009a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a46:	0112      	lsls	r2, r2, #4
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a50:	e00a      	b.n	8009a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4908      	ldr	r1, [pc, #32]	; (8009a78 <__NVIC_SetPriority+0x50>)
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	3b04      	subs	r3, #4
 8009a60:	0112      	lsls	r2, r2, #4
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	440b      	add	r3, r1
 8009a66:	761a      	strb	r2, [r3, #24]
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bc80      	pop	{r7}
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	e000e100 	.word	0xe000e100
 8009a78:	e000ed00 	.word	0xe000ed00

08009a7c <NVIC_EncodePriority>:
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f1c3 0307 	rsb	r3, r3, #7
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	bf28      	it	cs
 8009a9a:	2304      	movcs	r3, #4
 8009a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	2b06      	cmp	r3, #6
 8009aa4:	d902      	bls.n	8009aac <NVIC_EncodePriority+0x30>
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	3b03      	subs	r3, #3
 8009aaa:	e000      	b.n	8009aae <NVIC_EncodePriority+0x32>
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	43da      	mvns	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	401a      	ands	r2, r3
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	fa01 f303 	lsl.w	r3, r1, r3
 8009ace:	43d9      	mvns	r1, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ad4:	4313      	orrs	r3, r2
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3724      	adds	r7, #36	; 0x24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr

08009ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009af0:	d301      	bcc.n	8009af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009af2:	2301      	movs	r3, #1
 8009af4:	e00f      	b.n	8009b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009af6:	4a0a      	ldr	r2, [pc, #40]	; (8009b20 <SysTick_Config+0x40>)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009afe:	210f      	movs	r1, #15
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	f7ff ff90 	bl	8009a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <SysTick_Config+0x40>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b0e:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <SysTick_Config+0x40>)
 8009b10:	2207      	movs	r2, #7
 8009b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	e000e010 	.word	0xe000e010

08009b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff ff2d 	bl	800998c <__NVIC_SetPriorityGrouping>
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b086      	sub	sp, #24
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	4603      	mov	r3, r0
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
 8009b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b4c:	f7ff ff42 	bl	80099d4 <__NVIC_GetPriorityGrouping>
 8009b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f7ff ff90 	bl	8009a7c <NVIC_EncodePriority>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff ff5f 	bl	8009a28 <__NVIC_SetPriority>
}
 8009b6a:	bf00      	nop
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	4603      	mov	r3, r0
 8009b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff ff35 	bl	80099f0 <__NVIC_EnableIRQ>
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff ffa2 	bl	8009ae0 <SysTick_Config>
 8009b9c:	4603      	mov	r3, r0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d008      	beq.n	8009bd0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e020      	b.n	8009c12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 020e 	bic.w	r2, r2, #14
 8009bde:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0201 	bic.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8009bfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr

08009c1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d005      	beq.n	8009c40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2204      	movs	r2, #4
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	73fb      	strb	r3, [r7, #15]
 8009c3e:	e0d6      	b.n	8009dee <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 020e 	bic.w	r2, r2, #14
 8009c4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	4b64      	ldr	r3, [pc, #400]	; (8009df8 <HAL_DMA_Abort_IT+0x1dc>)
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d958      	bls.n	8009d1e <HAL_DMA_Abort_IT+0x102>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a62      	ldr	r2, [pc, #392]	; (8009dfc <HAL_DMA_Abort_IT+0x1e0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d04f      	beq.n	8009d16 <HAL_DMA_Abort_IT+0xfa>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a61      	ldr	r2, [pc, #388]	; (8009e00 <HAL_DMA_Abort_IT+0x1e4>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d048      	beq.n	8009d12 <HAL_DMA_Abort_IT+0xf6>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a5f      	ldr	r2, [pc, #380]	; (8009e04 <HAL_DMA_Abort_IT+0x1e8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d040      	beq.n	8009d0c <HAL_DMA_Abort_IT+0xf0>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a5e      	ldr	r2, [pc, #376]	; (8009e08 <HAL_DMA_Abort_IT+0x1ec>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d038      	beq.n	8009d06 <HAL_DMA_Abort_IT+0xea>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a5c      	ldr	r2, [pc, #368]	; (8009e0c <HAL_DMA_Abort_IT+0x1f0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d030      	beq.n	8009d00 <HAL_DMA_Abort_IT+0xe4>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a5b      	ldr	r2, [pc, #364]	; (8009e10 <HAL_DMA_Abort_IT+0x1f4>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d028      	beq.n	8009cfa <HAL_DMA_Abort_IT+0xde>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a52      	ldr	r2, [pc, #328]	; (8009df8 <HAL_DMA_Abort_IT+0x1dc>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d020      	beq.n	8009cf4 <HAL_DMA_Abort_IT+0xd8>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a57      	ldr	r2, [pc, #348]	; (8009e14 <HAL_DMA_Abort_IT+0x1f8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d019      	beq.n	8009cf0 <HAL_DMA_Abort_IT+0xd4>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a55      	ldr	r2, [pc, #340]	; (8009e18 <HAL_DMA_Abort_IT+0x1fc>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d012      	beq.n	8009cec <HAL_DMA_Abort_IT+0xd0>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a54      	ldr	r2, [pc, #336]	; (8009e1c <HAL_DMA_Abort_IT+0x200>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00a      	beq.n	8009ce6 <HAL_DMA_Abort_IT+0xca>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a52      	ldr	r2, [pc, #328]	; (8009e20 <HAL_DMA_Abort_IT+0x204>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d102      	bne.n	8009ce0 <HAL_DMA_Abort_IT+0xc4>
 8009cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cde:	e01b      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ce4:	e018      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cea:	e015      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009cec:	2310      	movs	r3, #16
 8009cee:	e013      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e011      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf8:	e00e      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009cfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009cfe:	e00b      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d04:	e008      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d0a:	e005      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d10:	e002      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009d12:	2310      	movs	r3, #16
 8009d14:	e000      	b.n	8009d18 <HAL_DMA_Abort_IT+0xfc>
 8009d16:	2301      	movs	r3, #1
 8009d18:	4a42      	ldr	r2, [pc, #264]	; (8009e24 <HAL_DMA_Abort_IT+0x208>)
 8009d1a:	6053      	str	r3, [r2, #4]
 8009d1c:	e057      	b.n	8009dce <HAL_DMA_Abort_IT+0x1b2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a36      	ldr	r2, [pc, #216]	; (8009dfc <HAL_DMA_Abort_IT+0x1e0>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d04f      	beq.n	8009dc8 <HAL_DMA_Abort_IT+0x1ac>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a34      	ldr	r2, [pc, #208]	; (8009e00 <HAL_DMA_Abort_IT+0x1e4>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d048      	beq.n	8009dc4 <HAL_DMA_Abort_IT+0x1a8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a33      	ldr	r2, [pc, #204]	; (8009e04 <HAL_DMA_Abort_IT+0x1e8>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d040      	beq.n	8009dbe <HAL_DMA_Abort_IT+0x1a2>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a31      	ldr	r2, [pc, #196]	; (8009e08 <HAL_DMA_Abort_IT+0x1ec>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d038      	beq.n	8009db8 <HAL_DMA_Abort_IT+0x19c>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a30      	ldr	r2, [pc, #192]	; (8009e0c <HAL_DMA_Abort_IT+0x1f0>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d030      	beq.n	8009db2 <HAL_DMA_Abort_IT+0x196>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2e      	ldr	r2, [pc, #184]	; (8009e10 <HAL_DMA_Abort_IT+0x1f4>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d028      	beq.n	8009dac <HAL_DMA_Abort_IT+0x190>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a26      	ldr	r2, [pc, #152]	; (8009df8 <HAL_DMA_Abort_IT+0x1dc>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d020      	beq.n	8009da6 <HAL_DMA_Abort_IT+0x18a>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2a      	ldr	r2, [pc, #168]	; (8009e14 <HAL_DMA_Abort_IT+0x1f8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d019      	beq.n	8009da2 <HAL_DMA_Abort_IT+0x186>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a29      	ldr	r2, [pc, #164]	; (8009e18 <HAL_DMA_Abort_IT+0x1fc>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d012      	beq.n	8009d9e <HAL_DMA_Abort_IT+0x182>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a27      	ldr	r2, [pc, #156]	; (8009e1c <HAL_DMA_Abort_IT+0x200>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d00a      	beq.n	8009d98 <HAL_DMA_Abort_IT+0x17c>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a26      	ldr	r2, [pc, #152]	; (8009e20 <HAL_DMA_Abort_IT+0x204>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d102      	bne.n	8009d92 <HAL_DMA_Abort_IT+0x176>
 8009d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d90:	e01b      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d96:	e018      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d9c:	e015      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009d9e:	2310      	movs	r3, #16
 8009da0:	e013      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e011      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009daa:	e00e      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009db0:	e00b      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009db6:	e008      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dbc:	e005      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc2:	e002      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	e000      	b.n	8009dca <HAL_DMA_Abort_IT+0x1ae>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4a17      	ldr	r2, [pc, #92]	; (8009e28 <HAL_DMA_Abort_IT+0x20c>)
 8009dcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
    } 
  }
  return status;
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	40020080 	.word	0x40020080
 8009dfc:	40020008 	.word	0x40020008
 8009e00:	4002001c 	.word	0x4002001c
 8009e04:	40020030 	.word	0x40020030
 8009e08:	40020044 	.word	0x40020044
 8009e0c:	40020058 	.word	0x40020058
 8009e10:	4002006c 	.word	0x4002006c
 8009e14:	40020408 	.word	0x40020408
 8009e18:	4002041c 	.word	0x4002041c
 8009e1c:	40020430 	.word	0x40020430
 8009e20:	40020444 	.word	0x40020444
 8009e24:	40020400 	.word	0x40020400
 8009e28:	40020000 	.word	0x40020000

08009e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b08b      	sub	sp, #44	; 0x2c
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e36:	2300      	movs	r3, #0
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e3e:	e179      	b.n	800a134 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009e40:	2201      	movs	r2, #1
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	fa02 f303 	lsl.w	r3, r2, r3
 8009e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	4013      	ands	r3, r2
 8009e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	f040 8168 	bne.w	800a12e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	4a96      	ldr	r2, [pc, #600]	; (800a0bc <HAL_GPIO_Init+0x290>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d05e      	beq.n	8009f26 <HAL_GPIO_Init+0xfa>
 8009e68:	4a94      	ldr	r2, [pc, #592]	; (800a0bc <HAL_GPIO_Init+0x290>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d875      	bhi.n	8009f5a <HAL_GPIO_Init+0x12e>
 8009e6e:	4a94      	ldr	r2, [pc, #592]	; (800a0c0 <HAL_GPIO_Init+0x294>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d058      	beq.n	8009f26 <HAL_GPIO_Init+0xfa>
 8009e74:	4a92      	ldr	r2, [pc, #584]	; (800a0c0 <HAL_GPIO_Init+0x294>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d86f      	bhi.n	8009f5a <HAL_GPIO_Init+0x12e>
 8009e7a:	4a92      	ldr	r2, [pc, #584]	; (800a0c4 <HAL_GPIO_Init+0x298>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d052      	beq.n	8009f26 <HAL_GPIO_Init+0xfa>
 8009e80:	4a90      	ldr	r2, [pc, #576]	; (800a0c4 <HAL_GPIO_Init+0x298>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d869      	bhi.n	8009f5a <HAL_GPIO_Init+0x12e>
 8009e86:	4a90      	ldr	r2, [pc, #576]	; (800a0c8 <HAL_GPIO_Init+0x29c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d04c      	beq.n	8009f26 <HAL_GPIO_Init+0xfa>
 8009e8c:	4a8e      	ldr	r2, [pc, #568]	; (800a0c8 <HAL_GPIO_Init+0x29c>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d863      	bhi.n	8009f5a <HAL_GPIO_Init+0x12e>
 8009e92:	4a8e      	ldr	r2, [pc, #568]	; (800a0cc <HAL_GPIO_Init+0x2a0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d046      	beq.n	8009f26 <HAL_GPIO_Init+0xfa>
 8009e98:	4a8c      	ldr	r2, [pc, #560]	; (800a0cc <HAL_GPIO_Init+0x2a0>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d85d      	bhi.n	8009f5a <HAL_GPIO_Init+0x12e>
 8009e9e:	2b12      	cmp	r3, #18
 8009ea0:	d82a      	bhi.n	8009ef8 <HAL_GPIO_Init+0xcc>
 8009ea2:	2b12      	cmp	r3, #18
 8009ea4:	d859      	bhi.n	8009f5a <HAL_GPIO_Init+0x12e>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <HAL_GPIO_Init+0x80>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009f27 	.word	0x08009f27
 8009eb0:	08009f01 	.word	0x08009f01
 8009eb4:	08009f13 	.word	0x08009f13
 8009eb8:	08009f55 	.word	0x08009f55
 8009ebc:	08009f5b 	.word	0x08009f5b
 8009ec0:	08009f5b 	.word	0x08009f5b
 8009ec4:	08009f5b 	.word	0x08009f5b
 8009ec8:	08009f5b 	.word	0x08009f5b
 8009ecc:	08009f5b 	.word	0x08009f5b
 8009ed0:	08009f5b 	.word	0x08009f5b
 8009ed4:	08009f5b 	.word	0x08009f5b
 8009ed8:	08009f5b 	.word	0x08009f5b
 8009edc:	08009f5b 	.word	0x08009f5b
 8009ee0:	08009f5b 	.word	0x08009f5b
 8009ee4:	08009f5b 	.word	0x08009f5b
 8009ee8:	08009f5b 	.word	0x08009f5b
 8009eec:	08009f5b 	.word	0x08009f5b
 8009ef0:	08009f09 	.word	0x08009f09
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	4a75      	ldr	r2, [pc, #468]	; (800a0d0 <HAL_GPIO_Init+0x2a4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009efe:	e02c      	b.n	8009f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	623b      	str	r3, [r7, #32]
          break;
 8009f06:	e029      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	623b      	str	r3, [r7, #32]
          break;
 8009f10:	e024      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	3308      	adds	r3, #8
 8009f18:	623b      	str	r3, [r7, #32]
          break;
 8009f1a:	e01f      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	330c      	adds	r3, #12
 8009f22:	623b      	str	r3, [r7, #32]
          break;
 8009f24:	e01a      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d102      	bne.n	8009f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009f2e:	2304      	movs	r3, #4
 8009f30:	623b      	str	r3, [r7, #32]
          break;
 8009f32:	e013      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d105      	bne.n	8009f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	611a      	str	r2, [r3, #16]
          break;
 8009f46:	e009      	b.n	8009f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009f48:	2308      	movs	r3, #8
 8009f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	615a      	str	r2, [r3, #20]
          break;
 8009f52:	e003      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009f54:	2300      	movs	r3, #0
 8009f56:	623b      	str	r3, [r7, #32]
          break;
 8009f58:	e000      	b.n	8009f5c <HAL_GPIO_Init+0x130>
          break;
 8009f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	2bff      	cmp	r3, #255	; 0xff
 8009f60:	d801      	bhi.n	8009f66 <HAL_GPIO_Init+0x13a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	e001      	b.n	8009f6a <HAL_GPIO_Init+0x13e>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2bff      	cmp	r3, #255	; 0xff
 8009f70:	d802      	bhi.n	8009f78 <HAL_GPIO_Init+0x14c>
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	e002      	b.n	8009f7e <HAL_GPIO_Init+0x152>
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	3b08      	subs	r3, #8
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	210f      	movs	r1, #15
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	401a      	ands	r2, r3
 8009f90:	6a39      	ldr	r1, [r7, #32]
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	fa01 f303 	lsl.w	r3, r1, r3
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 80c1 	beq.w	800a12e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009fac:	4b49      	ldr	r3, [pc, #292]	; (800a0d4 <HAL_GPIO_Init+0x2a8>)
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	4a48      	ldr	r2, [pc, #288]	; (800a0d4 <HAL_GPIO_Init+0x2a8>)
 8009fb2:	f043 0301 	orr.w	r3, r3, #1
 8009fb6:	6193      	str	r3, [r2, #24]
 8009fb8:	4b46      	ldr	r3, [pc, #280]	; (800a0d4 <HAL_GPIO_Init+0x2a8>)
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	60bb      	str	r3, [r7, #8]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009fc4:	4a44      	ldr	r2, [pc, #272]	; (800a0d8 <HAL_GPIO_Init+0x2ac>)
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	089b      	lsrs	r3, r3, #2
 8009fca:	3302      	adds	r3, #2
 8009fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	220f      	movs	r2, #15
 8009fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe0:	43db      	mvns	r3, r3
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a3c      	ldr	r2, [pc, #240]	; (800a0dc <HAL_GPIO_Init+0x2b0>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d01f      	beq.n	800a030 <HAL_GPIO_Init+0x204>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a3b      	ldr	r2, [pc, #236]	; (800a0e0 <HAL_GPIO_Init+0x2b4>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d019      	beq.n	800a02c <HAL_GPIO_Init+0x200>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a3a      	ldr	r2, [pc, #232]	; (800a0e4 <HAL_GPIO_Init+0x2b8>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d013      	beq.n	800a028 <HAL_GPIO_Init+0x1fc>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a39      	ldr	r2, [pc, #228]	; (800a0e8 <HAL_GPIO_Init+0x2bc>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00d      	beq.n	800a024 <HAL_GPIO_Init+0x1f8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a38      	ldr	r2, [pc, #224]	; (800a0ec <HAL_GPIO_Init+0x2c0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <HAL_GPIO_Init+0x1f4>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a37      	ldr	r2, [pc, #220]	; (800a0f0 <HAL_GPIO_Init+0x2c4>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d101      	bne.n	800a01c <HAL_GPIO_Init+0x1f0>
 800a018:	2305      	movs	r3, #5
 800a01a:	e00a      	b.n	800a032 <HAL_GPIO_Init+0x206>
 800a01c:	2306      	movs	r3, #6
 800a01e:	e008      	b.n	800a032 <HAL_GPIO_Init+0x206>
 800a020:	2304      	movs	r3, #4
 800a022:	e006      	b.n	800a032 <HAL_GPIO_Init+0x206>
 800a024:	2303      	movs	r3, #3
 800a026:	e004      	b.n	800a032 <HAL_GPIO_Init+0x206>
 800a028:	2302      	movs	r3, #2
 800a02a:	e002      	b.n	800a032 <HAL_GPIO_Init+0x206>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e000      	b.n	800a032 <HAL_GPIO_Init+0x206>
 800a030:	2300      	movs	r3, #0
 800a032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a034:	f002 0203 	and.w	r2, r2, #3
 800a038:	0092      	lsls	r2, r2, #2
 800a03a:	4093      	lsls	r3, r2
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a042:	4925      	ldr	r1, [pc, #148]	; (800a0d8 <HAL_GPIO_Init+0x2ac>)
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	089b      	lsrs	r3, r3, #2
 800a048:	3302      	adds	r3, #2
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a05c:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	4924      	ldr	r1, [pc, #144]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	4313      	orrs	r3, r2
 800a066:	608b      	str	r3, [r1, #8]
 800a068:	e006      	b.n	800a078 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a06a:	4b22      	ldr	r3, [pc, #136]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	43db      	mvns	r3, r3
 800a072:	4920      	ldr	r1, [pc, #128]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a074:	4013      	ands	r3, r2
 800a076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a084:	4b1b      	ldr	r3, [pc, #108]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a086:	68da      	ldr	r2, [r3, #12]
 800a088:	491a      	ldr	r1, [pc, #104]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60cb      	str	r3, [r1, #12]
 800a090:	e006      	b.n	800a0a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a092:	4b18      	ldr	r3, [pc, #96]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	43db      	mvns	r3, r3
 800a09a:	4916      	ldr	r1, [pc, #88]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d025      	beq.n	800a0f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a0ac:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	4910      	ldr	r1, [pc, #64]	; (800a0f4 <HAL_GPIO_Init+0x2c8>)
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	604b      	str	r3, [r1, #4]
 800a0b8:	e025      	b.n	800a106 <HAL_GPIO_Init+0x2da>
 800a0ba:	bf00      	nop
 800a0bc:	10320000 	.word	0x10320000
 800a0c0:	10310000 	.word	0x10310000
 800a0c4:	10220000 	.word	0x10220000
 800a0c8:	10210000 	.word	0x10210000
 800a0cc:	10120000 	.word	0x10120000
 800a0d0:	10110000 	.word	0x10110000
 800a0d4:	40021000 	.word	0x40021000
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40010800 	.word	0x40010800
 800a0e0:	40010c00 	.word	0x40010c00
 800a0e4:	40011000 	.word	0x40011000
 800a0e8:	40011400 	.word	0x40011400
 800a0ec:	40011800 	.word	0x40011800
 800a0f0:	40011c00 	.word	0x40011c00
 800a0f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a0f8:	4b15      	ldr	r3, [pc, #84]	; (800a150 <HAL_GPIO_Init+0x324>)
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	43db      	mvns	r3, r3
 800a100:	4913      	ldr	r1, [pc, #76]	; (800a150 <HAL_GPIO_Init+0x324>)
 800a102:	4013      	ands	r3, r2
 800a104:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d006      	beq.n	800a120 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a112:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <HAL_GPIO_Init+0x324>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	490e      	ldr	r1, [pc, #56]	; (800a150 <HAL_GPIO_Init+0x324>)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	600b      	str	r3, [r1, #0]
 800a11e:	e006      	b.n	800a12e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <HAL_GPIO_Init+0x324>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	43db      	mvns	r3, r3
 800a128:	4909      	ldr	r1, [pc, #36]	; (800a150 <HAL_GPIO_Init+0x324>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	3301      	adds	r3, #1
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f47f ae7e 	bne.w	8009e40 <HAL_GPIO_Init+0x14>
  }
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	372c      	adds	r7, #44	; 0x2c
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr
 800a150:	40010400 	.word	0x40010400

0800a154 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a154:	b480      	push	{r7}
 800a156:	b089      	sub	sp, #36	; 0x24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a15e:	2300      	movs	r3, #0
 800a160:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a162:	e0a6      	b.n	800a2b2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a164:	2201      	movs	r2, #1
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	4013      	ands	r3, r2
 800a170:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 8099 	beq.w	800a2ac <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a17a:	4a54      	ldr	r2, [pc, #336]	; (800a2cc <HAL_GPIO_DeInit+0x178>)
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	089b      	lsrs	r3, r3, #2
 800a180:	3302      	adds	r3, #2
 800a182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a186:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	220f      	movs	r2, #15
 800a192:	fa02 f303 	lsl.w	r3, r2, r3
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	4013      	ands	r3, r2
 800a19a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a4c      	ldr	r2, [pc, #304]	; (800a2d0 <HAL_GPIO_DeInit+0x17c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d01f      	beq.n	800a1e4 <HAL_GPIO_DeInit+0x90>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a4b      	ldr	r2, [pc, #300]	; (800a2d4 <HAL_GPIO_DeInit+0x180>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d019      	beq.n	800a1e0 <HAL_GPIO_DeInit+0x8c>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a4a      	ldr	r2, [pc, #296]	; (800a2d8 <HAL_GPIO_DeInit+0x184>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d013      	beq.n	800a1dc <HAL_GPIO_DeInit+0x88>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a49      	ldr	r2, [pc, #292]	; (800a2dc <HAL_GPIO_DeInit+0x188>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00d      	beq.n	800a1d8 <HAL_GPIO_DeInit+0x84>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a48      	ldr	r2, [pc, #288]	; (800a2e0 <HAL_GPIO_DeInit+0x18c>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d007      	beq.n	800a1d4 <HAL_GPIO_DeInit+0x80>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a47      	ldr	r2, [pc, #284]	; (800a2e4 <HAL_GPIO_DeInit+0x190>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d101      	bne.n	800a1d0 <HAL_GPIO_DeInit+0x7c>
 800a1cc:	2305      	movs	r3, #5
 800a1ce:	e00a      	b.n	800a1e6 <HAL_GPIO_DeInit+0x92>
 800a1d0:	2306      	movs	r3, #6
 800a1d2:	e008      	b.n	800a1e6 <HAL_GPIO_DeInit+0x92>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	e006      	b.n	800a1e6 <HAL_GPIO_DeInit+0x92>
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e004      	b.n	800a1e6 <HAL_GPIO_DeInit+0x92>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e002      	b.n	800a1e6 <HAL_GPIO_DeInit+0x92>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <HAL_GPIO_DeInit+0x92>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	f002 0203 	and.w	r2, r2, #3
 800a1ec:	0092      	lsls	r2, r2, #2
 800a1ee:	4093      	lsls	r3, r2
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d132      	bne.n	800a25c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a1f6:	4b3c      	ldr	r3, [pc, #240]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	493a      	ldr	r1, [pc, #232]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a200:	4013      	ands	r3, r2
 800a202:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a204:	4b38      	ldr	r3, [pc, #224]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	43db      	mvns	r3, r3
 800a20c:	4936      	ldr	r1, [pc, #216]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a20e:	4013      	ands	r3, r2
 800a210:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a212:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a214:	68da      	ldr	r2, [r3, #12]
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	43db      	mvns	r3, r3
 800a21a:	4933      	ldr	r1, [pc, #204]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a220:	4b31      	ldr	r3, [pc, #196]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	43db      	mvns	r3, r3
 800a228:	492f      	ldr	r1, [pc, #188]	; (800a2e8 <HAL_GPIO_DeInit+0x194>)
 800a22a:	4013      	ands	r3, r2
 800a22c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	f003 0303 	and.w	r3, r3, #3
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	220f      	movs	r2, #15
 800a238:	fa02 f303 	lsl.w	r3, r2, r3
 800a23c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a23e:	4a23      	ldr	r2, [pc, #140]	; (800a2cc <HAL_GPIO_DeInit+0x178>)
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	089b      	lsrs	r3, r3, #2
 800a244:	3302      	adds	r3, #2
 800a246:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	43da      	mvns	r2, r3
 800a24e:	481f      	ldr	r0, [pc, #124]	; (800a2cc <HAL_GPIO_DeInit+0x178>)
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	089b      	lsrs	r3, r3, #2
 800a254:	400a      	ands	r2, r1
 800a256:	3302      	adds	r3, #2
 800a258:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	2bff      	cmp	r3, #255	; 0xff
 800a260:	d801      	bhi.n	800a266 <HAL_GPIO_DeInit+0x112>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	e001      	b.n	800a26a <HAL_GPIO_DeInit+0x116>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3304      	adds	r3, #4
 800a26a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2bff      	cmp	r3, #255	; 0xff
 800a270:	d802      	bhi.n	800a278 <HAL_GPIO_DeInit+0x124>
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	e002      	b.n	800a27e <HAL_GPIO_DeInit+0x12a>
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	3b08      	subs	r3, #8
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	210f      	movs	r1, #15
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	fa01 f303 	lsl.w	r3, r1, r3
 800a28c:	43db      	mvns	r3, r3
 800a28e:	401a      	ands	r2, r3
 800a290:	2104      	movs	r1, #4
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	fa01 f303 	lsl.w	r3, r1, r3
 800a298:	431a      	orrs	r2, r3
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f47f af52 	bne.w	800a164 <HAL_GPIO_DeInit+0x10>
  }
}
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
 800a2c4:	3724      	adds	r7, #36	; 0x24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bc80      	pop	{r7}
 800a2ca:	4770      	bx	lr
 800a2cc:	40010000 	.word	0x40010000
 800a2d0:	40010800 	.word	0x40010800
 800a2d4:	40010c00 	.word	0x40010c00
 800a2d8:	40011000 	.word	0x40011000
 800a2dc:	40011400 	.word	0x40011400
 800a2e0:	40011800 	.word	0x40011800
 800a2e4:	40011c00 	.word	0x40011c00
 800a2e8:	40010400 	.word	0x40010400

0800a2ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689a      	ldr	r2, [r3, #8]
 800a2fc:	887b      	ldrh	r3, [r7, #2]
 800a2fe:	4013      	ands	r3, r2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a304:	2301      	movs	r3, #1
 800a306:	73fb      	strb	r3, [r7, #15]
 800a308:	e001      	b.n	800a30e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	bc80      	pop	{r7}
 800a318:	4770      	bx	lr

0800a31a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	807b      	strh	r3, [r7, #2]
 800a326:	4613      	mov	r3, r2
 800a328:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a32a:	787b      	ldrb	r3, [r7, #1]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a330:	887a      	ldrh	r2, [r7, #2]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a336:	e003      	b.n	800a340 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a338:	887b      	ldrh	r3, [r7, #2]
 800a33a:	041a      	lsls	r2, r3, #16
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	611a      	str	r2, [r3, #16]
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr

0800a34a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b085      	sub	sp, #20
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a35c:	887a      	ldrh	r2, [r7, #2]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4013      	ands	r3, r2
 800a362:	041a      	lsls	r2, r3, #16
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	43d9      	mvns	r1, r3
 800a368:	887b      	ldrh	r3, [r7, #2]
 800a36a:	400b      	ands	r3, r1
 800a36c:	431a      	orrs	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	611a      	str	r2, [r3, #16]
}
 800a372:	bf00      	nop
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	bc80      	pop	{r7}
 800a37a:	4770      	bx	lr

0800a37c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e12b      	b.n	800a5e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d106      	bne.n	800a3a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7fe fff8 	bl	8009398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2224      	movs	r2, #36	; 0x24
 800a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0201 	bic.w	r2, r2, #1
 800a3be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a3e0:	f001 fdb8 	bl	800bf54 <HAL_RCC_GetPCLK1Freq>
 800a3e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	4a81      	ldr	r2, [pc, #516]	; (800a5f0 <HAL_I2C_Init+0x274>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d807      	bhi.n	800a400 <HAL_I2C_Init+0x84>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4a80      	ldr	r2, [pc, #512]	; (800a5f4 <HAL_I2C_Init+0x278>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	bf94      	ite	ls
 800a3f8:	2301      	movls	r3, #1
 800a3fa:	2300      	movhi	r3, #0
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	e006      	b.n	800a40e <HAL_I2C_Init+0x92>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4a7d      	ldr	r2, [pc, #500]	; (800a5f8 <HAL_I2C_Init+0x27c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	bf94      	ite	ls
 800a408:	2301      	movls	r3, #1
 800a40a:	2300      	movhi	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e0e7      	b.n	800a5e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4a78      	ldr	r2, [pc, #480]	; (800a5fc <HAL_I2C_Init+0x280>)
 800a41a:	fba2 2303 	umull	r2, r3, r2, r3
 800a41e:	0c9b      	lsrs	r3, r3, #18
 800a420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	4a6a      	ldr	r2, [pc, #424]	; (800a5f0 <HAL_I2C_Init+0x274>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d802      	bhi.n	800a450 <HAL_I2C_Init+0xd4>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3301      	adds	r3, #1
 800a44e:	e009      	b.n	800a464 <HAL_I2C_Init+0xe8>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a456:	fb02 f303 	mul.w	r3, r2, r3
 800a45a:	4a69      	ldr	r2, [pc, #420]	; (800a600 <HAL_I2C_Init+0x284>)
 800a45c:	fba2 2303 	umull	r2, r3, r2, r3
 800a460:	099b      	lsrs	r3, r3, #6
 800a462:	3301      	adds	r3, #1
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	430b      	orrs	r3, r1
 800a46a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	495c      	ldr	r1, [pc, #368]	; (800a5f0 <HAL_I2C_Init+0x274>)
 800a480:	428b      	cmp	r3, r1
 800a482:	d819      	bhi.n	800a4b8 <HAL_I2C_Init+0x13c>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1e59      	subs	r1, r3, #1
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a492:	1c59      	adds	r1, r3, #1
 800a494:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a498:	400b      	ands	r3, r1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <HAL_I2C_Init+0x138>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	1e59      	subs	r1, r3, #1
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4b2:	e051      	b.n	800a558 <HAL_I2C_Init+0x1dc>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	e04f      	b.n	800a558 <HAL_I2C_Init+0x1dc>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d111      	bne.n	800a4e4 <HAL_I2C_Init+0x168>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	1e58      	subs	r0, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6859      	ldr	r1, [r3, #4]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	440b      	add	r3, r1
 800a4ce:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bf0c      	ite	eq
 800a4dc:	2301      	moveq	r3, #1
 800a4de:	2300      	movne	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	e012      	b.n	800a50a <HAL_I2C_Init+0x18e>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	1e58      	subs	r0, r3, #1
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6859      	ldr	r1, [r3, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	440b      	add	r3, r1
 800a4f2:	0099      	lsls	r1, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a500:	2b00      	cmp	r3, #0
 800a502:	bf0c      	ite	eq
 800a504:	2301      	moveq	r3, #1
 800a506:	2300      	movne	r3, #0
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <HAL_I2C_Init+0x196>
 800a50e:	2301      	movs	r3, #1
 800a510:	e022      	b.n	800a558 <HAL_I2C_Init+0x1dc>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10e      	bne.n	800a538 <HAL_I2C_Init+0x1bc>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	1e58      	subs	r0, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6859      	ldr	r1, [r3, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	440b      	add	r3, r1
 800a528:	fbb0 f3f3 	udiv	r3, r0, r3
 800a52c:	3301      	adds	r3, #1
 800a52e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a536:	e00f      	b.n	800a558 <HAL_I2C_Init+0x1dc>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	1e58      	subs	r0, r3, #1
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6859      	ldr	r1, [r3, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	440b      	add	r3, r1
 800a546:	0099      	lsls	r1, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a54e:	3301      	adds	r3, #1
 800a550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	6809      	ldr	r1, [r1, #0]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	69da      	ldr	r2, [r3, #28]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	431a      	orrs	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6911      	ldr	r1, [r2, #16]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68d2      	ldr	r2, [r2, #12]
 800a592:	4311      	orrs	r1, r2
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	430b      	orrs	r3, r1
 800a59a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695a      	ldr	r2, [r3, #20]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0201 	orr.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	000186a0 	.word	0x000186a0
 800a5f4:	001e847f 	.word	0x001e847f
 800a5f8:	003d08ff 	.word	0x003d08ff
 800a5fc:	431bde83 	.word	0x431bde83
 800a600:	10624dd3 	.word	0x10624dd3

0800a604 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e021      	b.n	800a65a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2224      	movs	r2, #36	; 0x24
 800a61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7fe fef0 	bl	8009414 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af02      	add	r7, sp, #8
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	461a      	mov	r2, r3
 800a670:	460b      	mov	r3, r1
 800a672:	817b      	strh	r3, [r7, #10]
 800a674:	4613      	mov	r3, r2
 800a676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a678:	f7ff f85e 	bl	8009738 <HAL_GetTick>
 800a67c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b20      	cmp	r3, #32
 800a688:	f040 80e0 	bne.w	800a84c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	2319      	movs	r3, #25
 800a692:	2201      	movs	r2, #1
 800a694:	4970      	ldr	r1, [pc, #448]	; (800a858 <HAL_I2C_Master_Transmit+0x1f4>)
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 fe5c 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e0d3      	b.n	800a84e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d101      	bne.n	800a6b4 <HAL_I2C_Master_Transmit+0x50>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	e0cc      	b.n	800a84e <HAL_I2C_Master_Transmit+0x1ea>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d007      	beq.n	800a6da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f042 0201 	orr.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2221      	movs	r2, #33	; 0x21
 800a6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2210      	movs	r2, #16
 800a6f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	893a      	ldrh	r2, [r7, #8]
 800a70a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4a50      	ldr	r2, [pc, #320]	; (800a85c <HAL_I2C_Master_Transmit+0x1f8>)
 800a71a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a71c:	8979      	ldrh	r1, [r7, #10]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	6a3a      	ldr	r2, [r7, #32]
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fc16 	bl	800af54 <I2C_MasterRequestWrite>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e08d      	b.n	800a84e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a732:	2300      	movs	r3, #0
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a748:	e066      	b.n	800a818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	6a39      	ldr	r1, [r7, #32]
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 ff1a 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00d      	beq.n	800a776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d107      	bne.n	800a772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e06b      	b.n	800a84e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a790:	b29b      	uxth	r3, r3
 800a792:	3b01      	subs	r3, #1
 800a794:	b29a      	uxth	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d11b      	bne.n	800a7ec <HAL_I2C_Master_Transmit+0x188>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d017      	beq.n	800a7ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	781a      	ldrb	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	6a39      	ldr	r1, [r7, #32]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 ff11 	bl	800b618 <I2C_WaitOnBTFFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00d      	beq.n	800a818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a800:	2b04      	cmp	r3, #4
 800a802:	d107      	bne.n	800a814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e01a      	b.n	800a84e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d194      	bne.n	800a74a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a82e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	e000      	b.n	800a84e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a84c:	2302      	movs	r3, #2
  }
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	00100002 	.word	0x00100002
 800a85c:	ffff0000 	.word	0xffff0000

0800a860 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af02      	add	r7, sp, #8
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	4608      	mov	r0, r1
 800a86a:	4611      	mov	r1, r2
 800a86c:	461a      	mov	r2, r3
 800a86e:	4603      	mov	r3, r0
 800a870:	817b      	strh	r3, [r7, #10]
 800a872:	460b      	mov	r3, r1
 800a874:	813b      	strh	r3, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a87a:	f7fe ff5d 	bl	8009738 <HAL_GetTick>
 800a87e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b20      	cmp	r3, #32
 800a88a:	f040 80d9 	bne.w	800aa40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	2319      	movs	r3, #25
 800a894:	2201      	movs	r2, #1
 800a896:	496d      	ldr	r1, [pc, #436]	; (800aa4c <HAL_I2C_Mem_Write+0x1ec>)
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 fd5b 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e0cc      	b.n	800aa42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d101      	bne.n	800a8b6 <HAL_I2C_Mem_Write+0x56>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e0c5      	b.n	800aa42 <HAL_I2C_Mem_Write+0x1e2>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d007      	beq.n	800a8dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0201 	orr.w	r2, r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2221      	movs	r2, #33	; 0x21
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2240      	movs	r2, #64	; 0x40
 800a8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6a3a      	ldr	r2, [r7, #32]
 800a906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a90c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a912:	b29a      	uxth	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4a4d      	ldr	r2, [pc, #308]	; (800aa50 <HAL_I2C_Mem_Write+0x1f0>)
 800a91c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a91e:	88f8      	ldrh	r0, [r7, #6]
 800a920:	893a      	ldrh	r2, [r7, #8]
 800a922:	8979      	ldrh	r1, [r7, #10]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	4603      	mov	r3, r0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 fb92 	bl	800b058 <I2C_RequestMemoryWrite>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d052      	beq.n	800a9e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e081      	b.n	800aa42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 fe20 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00d      	beq.n	800a96a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a952:	2b04      	cmp	r3, #4
 800a954:	d107      	bne.n	800a966 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e06b      	b.n	800aa42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	781a      	ldrb	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a984:	3b01      	subs	r3, #1
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d11b      	bne.n	800a9e0 <HAL_I2C_Mem_Write+0x180>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d017      	beq.n	800a9e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	781a      	ldrb	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1aa      	bne.n	800a93e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fe13 	bl	800b618 <I2C_WaitOnBTFFlagUntilTimeout>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00d      	beq.n	800aa14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d107      	bne.n	800aa10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e016      	b.n	800aa42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2220      	movs	r2, #32
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e000      	b.n	800aa42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa40:	2302      	movs	r3, #2
  }
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	00100002 	.word	0x00100002
 800aa50:	ffff0000 	.word	0xffff0000

0800aa54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08c      	sub	sp, #48	; 0x30
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	4611      	mov	r1, r2
 800aa60:	461a      	mov	r2, r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	817b      	strh	r3, [r7, #10]
 800aa66:	460b      	mov	r3, r1
 800aa68:	813b      	strh	r3, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aa72:	f7fe fe61 	bl	8009738 <HAL_GetTick>
 800aa76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	f040 8244 	bne.w	800af0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	2319      	movs	r3, #25
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	4982      	ldr	r1, [pc, #520]	; (800ac98 <HAL_I2C_Mem_Read+0x244>)
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 fc5f 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e237      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d101      	bne.n	800aaae <HAL_I2C_Mem_Read+0x5a>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	e230      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d007      	beq.n	800aad4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f042 0201 	orr.w	r2, r2, #1
 800aad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2222      	movs	r2, #34	; 0x22
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2240      	movs	r2, #64	; 0x40
 800aaf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aafe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ab04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4a62      	ldr	r2, [pc, #392]	; (800ac9c <HAL_I2C_Mem_Read+0x248>)
 800ab14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab16:	88f8      	ldrh	r0, [r7, #6]
 800ab18:	893a      	ldrh	r2, [r7, #8]
 800ab1a:	8979      	ldrh	r1, [r7, #10]
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4603      	mov	r3, r0
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 fb2c 	bl	800b184 <I2C_RequestMemoryRead>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e1ec      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d113      	bne.n	800ab66 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab3e:	2300      	movs	r3, #0
 800ab40:	61fb      	str	r3, [r7, #28]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	61fb      	str	r3, [r7, #28]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	61fb      	str	r3, [r7, #28]
 800ab52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	e1c0      	b.n	800aee8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d11e      	bne.n	800abac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab7e:	b672      	cpsid	i
}
 800ab80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab82:	2300      	movs	r3, #0
 800ab84:	61bb      	str	r3, [r7, #24]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	61bb      	str	r3, [r7, #24]
 800ab96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aba8:	b662      	cpsie	i
}
 800abaa:	e035      	b.n	800ac18 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d11e      	bne.n	800abf2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800abc4:	b672      	cpsid	i
}
 800abc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abc8:	2300      	movs	r3, #0
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	617b      	str	r3, [r7, #20]
 800abdc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800abee:	b662      	cpsie	i
}
 800abf0:	e012      	b.n	800ac18 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac02:	2300      	movs	r3, #0
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	613b      	str	r3, [r7, #16]
 800ac16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800ac18:	e166      	b.n	800aee8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	f200 811f 	bhi.w	800ae62 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d123      	bne.n	800ac74 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 fd39 	bl	800b6a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e167      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	691a      	ldr	r2, [r3, #16]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac72:	e139      	b.n	800aee8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d152      	bne.n	800ad22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	2200      	movs	r2, #0
 800ac84:	4906      	ldr	r1, [pc, #24]	; (800aca0 <HAL_I2C_Mem_Read+0x24c>)
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 fb64 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d008      	beq.n	800aca4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e13c      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
 800ac96:	bf00      	nop
 800ac98:	00100002 	.word	0x00100002
 800ac9c:	ffff0000 	.word	0xffff0000
 800aca0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800aca4:	b672      	cpsid	i
}
 800aca6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691a      	ldr	r2, [r3, #16]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	b2d2      	uxtb	r2, r2
 800acc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	3b01      	subs	r3, #1
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800acea:	b662      	cpsie	i
}
 800acec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	691a      	ldr	r2, [r3, #16]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad20:	e0e2      	b.n	800aee8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	2200      	movs	r2, #0
 800ad2a:	497b      	ldr	r1, [pc, #492]	; (800af18 <HAL_I2C_Mem_Read+0x4c4>)
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 fb11 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e0e9      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad4c:	b672      	cpsid	i
}
 800ad4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	691a      	ldr	r2, [r3, #16]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ad82:	4b66      	ldr	r3, [pc, #408]	; (800af1c <HAL_I2C_Mem_Read+0x4c8>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	08db      	lsrs	r3, r3, #3
 800ad88:	4a65      	ldr	r2, [pc, #404]	; (800af20 <HAL_I2C_Mem_Read+0x4cc>)
 800ad8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8e:	0a1a      	lsrs	r2, r3, #8
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	00da      	lsls	r2, r3, #3
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d118      	bne.n	800adda <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	f043 0220 	orr.w	r2, r3, #32
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800adca:	b662      	cpsie	i
}
 800adcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e09a      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	695b      	ldr	r3, [r3, #20]
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d1d9      	bne.n	800ad9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	691a      	ldr	r2, [r3, #16]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae02:	b2d2      	uxtb	r2, r2
 800ae04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae14:	3b01      	subs	r3, #1
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ae2a:	b662      	cpsie	i
}
 800ae2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	b2d2      	uxtb	r2, r2
 800ae3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae60:	e042      	b.n	800aee8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fc1e 	bl	800b6a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e04c      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691a      	ldr	r2, [r3, #16]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae92:	3b01      	subs	r3, #1
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	3b01      	subs	r3, #1
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d118      	bne.n	800aee8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	691a      	ldr	r2, [r3, #16]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aed2:	3b01      	subs	r3, #1
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aede:	b29b      	uxth	r3, r3
 800aee0:	3b01      	subs	r3, #1
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f47f ae94 	bne.w	800ac1a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e000      	b.n	800af10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800af0e:	2302      	movs	r3, #2
  }
}
 800af10:	4618      	mov	r0, r3
 800af12:	3728      	adds	r7, #40	; 0x28
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	00010004 	.word	0x00010004
 800af1c:	200009c4 	.word	0x200009c4
 800af20:	14f8b589 	.word	0x14f8b589

0800af24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af32:	b2db      	uxtb	r3, r3
}
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	bc80      	pop	{r7}
 800af3c:	4770      	bx	lr

0800af3e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800af3e:	b480      	push	{r7}
 800af40:	b083      	sub	sp, #12
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	bc80      	pop	{r7}
 800af52:	4770      	bx	lr

0800af54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af02      	add	r7, sp, #8
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	460b      	mov	r3, r1
 800af62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d006      	beq.n	800af7e <I2C_MasterRequestWrite+0x2a>
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d003      	beq.n	800af7e <I2C_MasterRequestWrite+0x2a>
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af7c:	d108      	bne.n	800af90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	e00b      	b.n	800afa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	2b12      	cmp	r3, #18
 800af96:	d107      	bne.n	800afa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 f9cd 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00d      	beq.n	800afdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afce:	d103      	bne.n	800afd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e035      	b.n	800b048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afe4:	d108      	bne.n	800aff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800afe6:	897b      	ldrh	r3, [r7, #10]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	461a      	mov	r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aff4:	611a      	str	r2, [r3, #16]
 800aff6:	e01b      	b.n	800b030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aff8:	897b      	ldrh	r3, [r7, #10]
 800affa:	11db      	asrs	r3, r3, #7
 800affc:	b2db      	uxtb	r3, r3
 800affe:	f003 0306 	and.w	r3, r3, #6
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f063 030f 	orn	r3, r3, #15
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	490e      	ldr	r1, [pc, #56]	; (800b050 <I2C_MasterRequestWrite+0xfc>)
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 fa16 	bl	800b448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e010      	b.n	800b048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b026:	897b      	ldrh	r3, [r7, #10]
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	4907      	ldr	r1, [pc, #28]	; (800b054 <I2C_MasterRequestWrite+0x100>)
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f000 fa06 	bl	800b448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	00010008 	.word	0x00010008
 800b054:	00010002 	.word	0x00010002

0800b058 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	4608      	mov	r0, r1
 800b062:	4611      	mov	r1, r2
 800b064:	461a      	mov	r2, r3
 800b066:	4603      	mov	r3, r0
 800b068:	817b      	strh	r3, [r7, #10]
 800b06a:	460b      	mov	r3, r1
 800b06c:	813b      	strh	r3, [r7, #8]
 800b06e:	4613      	mov	r3, r2
 800b070:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b080:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	2200      	movs	r2, #0
 800b08a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f960 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00d      	beq.n	800b0b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a8:	d103      	bne.n	800b0b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	e05f      	b.n	800b176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0b6:	897b      	ldrh	r3, [r7, #10]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c8:	6a3a      	ldr	r2, [r7, #32]
 800b0ca:	492d      	ldr	r1, [pc, #180]	; (800b180 <I2C_RequestMemoryWrite+0x128>)
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 f9bb 	bl	800b448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e04c      	b.n	800b176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0dc:	2300      	movs	r3, #0
 800b0de:	617b      	str	r3, [r7, #20]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	617b      	str	r3, [r7, #20]
 800b0f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f4:	6a39      	ldr	r1, [r7, #32]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fa46 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00d      	beq.n	800b11e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	2b04      	cmp	r3, #4
 800b108:	d107      	bne.n	800b11a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b118:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e02b      	b.n	800b176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b11e:	88fb      	ldrh	r3, [r7, #6]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d105      	bne.n	800b130 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b124:	893b      	ldrh	r3, [r7, #8]
 800b126:	b2da      	uxtb	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	611a      	str	r2, [r3, #16]
 800b12e:	e021      	b.n	800b174 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b130:	893b      	ldrh	r3, [r7, #8]
 800b132:	0a1b      	lsrs	r3, r3, #8
 800b134:	b29b      	uxth	r3, r3
 800b136:	b2da      	uxtb	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b140:	6a39      	ldr	r1, [r7, #32]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fa20 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00d      	beq.n	800b16a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	2b04      	cmp	r3, #4
 800b154:	d107      	bne.n	800b166 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b164:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e005      	b.n	800b176 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b16a:	893b      	ldrh	r3, [r7, #8]
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	00010002 	.word	0x00010002

0800b184 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af02      	add	r7, sp, #8
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	461a      	mov	r2, r3
 800b192:	4603      	mov	r3, r0
 800b194:	817b      	strh	r3, [r7, #10]
 800b196:	460b      	mov	r3, r1
 800b198:	813b      	strh	r3, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 f8c2 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00d      	beq.n	800b1f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e4:	d103      	bne.n	800b1ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e0aa      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b1f2:	897b      	ldrh	r3, [r7, #10]
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b200:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	6a3a      	ldr	r2, [r7, #32]
 800b206:	4952      	ldr	r1, [pc, #328]	; (800b350 <I2C_RequestMemoryRead+0x1cc>)
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f91d 	bl	800b448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e097      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b218:	2300      	movs	r3, #0
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	617b      	str	r3, [r7, #20]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	617b      	str	r3, [r7, #20]
 800b22c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b230:	6a39      	ldr	r1, [r7, #32]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f9a8 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00d      	beq.n	800b25a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	2b04      	cmp	r3, #4
 800b244:	d107      	bne.n	800b256 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b254:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e076      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d105      	bne.n	800b26c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b260:	893b      	ldrh	r3, [r7, #8]
 800b262:	b2da      	uxtb	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	611a      	str	r2, [r3, #16]
 800b26a:	e021      	b.n	800b2b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b26c:	893b      	ldrh	r3, [r7, #8]
 800b26e:	0a1b      	lsrs	r3, r3, #8
 800b270:	b29b      	uxth	r3, r3
 800b272:	b2da      	uxtb	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b27c:	6a39      	ldr	r1, [r7, #32]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f000 f982 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00d      	beq.n	800b2a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	2b04      	cmp	r3, #4
 800b290:	d107      	bne.n	800b2a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e050      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b2a6:	893b      	ldrh	r3, [r7, #8]
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b2:	6a39      	ldr	r1, [r7, #32]
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 f967 	bl	800b588 <I2C_WaitOnTXEFlagUntilTimeout>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00d      	beq.n	800b2dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d107      	bne.n	800b2d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e035      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 f82b 	bl	800b354 <I2C_WaitOnFlagUntilTimeout>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00d      	beq.n	800b320 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b312:	d103      	bne.n	800b31c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b31a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e013      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b320:	897b      	ldrh	r3, [r7, #10]
 800b322:	b2db      	uxtb	r3, r3
 800b324:	f043 0301 	orr.w	r3, r3, #1
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	6a3a      	ldr	r2, [r7, #32]
 800b334:	4906      	ldr	r1, [pc, #24]	; (800b350 <I2C_RequestMemoryRead+0x1cc>)
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 f886 	bl	800b448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	00010002 	.word	0x00010002

0800b354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	4613      	mov	r3, r2
 800b362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b364:	e048      	b.n	800b3f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d044      	beq.n	800b3f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b36e:	f7fe f9e3 	bl	8009738 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d302      	bcc.n	800b384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d139      	bne.n	800b3f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	0c1b      	lsrs	r3, r3, #16
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d10d      	bne.n	800b3aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	43da      	mvns	r2, r3
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	4013      	ands	r3, r2
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bf0c      	ite	eq
 800b3a0:	2301      	moveq	r3, #1
 800b3a2:	2300      	movne	r3, #0
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	e00c      	b.n	800b3c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	43da      	mvns	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bf0c      	ite	eq
 800b3bc:	2301      	moveq	r3, #1
 800b3be:	2300      	movne	r3, #0
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d116      	bne.n	800b3f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	f043 0220 	orr.w	r2, r3, #32
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e023      	b.n	800b440 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	0c1b      	lsrs	r3, r3, #16
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d10d      	bne.n	800b41e <I2C_WaitOnFlagUntilTimeout+0xca>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	43da      	mvns	r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	4013      	ands	r3, r2
 800b40e:	b29b      	uxth	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	bf0c      	ite	eq
 800b414:	2301      	moveq	r3, #1
 800b416:	2300      	movne	r3, #0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	461a      	mov	r2, r3
 800b41c:	e00c      	b.n	800b438 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	43da      	mvns	r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	4013      	ands	r3, r2
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bf0c      	ite	eq
 800b430:	2301      	moveq	r3, #1
 800b432:	2300      	movne	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	461a      	mov	r2, r3
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d093      	beq.n	800b366 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b456:	e071      	b.n	800b53c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b466:	d123      	bne.n	800b4b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b476:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49c:	f043 0204 	orr.w	r2, r3, #4
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e067      	b.n	800b580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b6:	d041      	beq.n	800b53c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4b8:	f7fe f93e 	bl	8009738 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d302      	bcc.n	800b4ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d136      	bne.n	800b53c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	0c1b      	lsrs	r3, r3, #16
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d10c      	bne.n	800b4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	43da      	mvns	r2, r3
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	bf14      	ite	ne
 800b4ea:	2301      	movne	r3, #1
 800b4ec:	2300      	moveq	r3, #0
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	e00b      	b.n	800b50a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	43da      	mvns	r2, r3
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	2b00      	cmp	r3, #0
 800b502:	bf14      	ite	ne
 800b504:	2301      	movne	r3, #1
 800b506:	2300      	moveq	r3, #0
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d016      	beq.n	800b53c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b528:	f043 0220 	orr.w	r2, r3, #32
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e021      	b.n	800b580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	0c1b      	lsrs	r3, r3, #16
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b01      	cmp	r3, #1
 800b544:	d10c      	bne.n	800b560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	695b      	ldr	r3, [r3, #20]
 800b54c:	43da      	mvns	r2, r3
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	4013      	ands	r3, r2
 800b552:	b29b      	uxth	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	bf14      	ite	ne
 800b558:	2301      	movne	r3, #1
 800b55a:	2300      	moveq	r3, #0
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	e00b      	b.n	800b578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	43da      	mvns	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	4013      	ands	r3, r2
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bf14      	ite	ne
 800b572:	2301      	movne	r3, #1
 800b574:	2300      	moveq	r3, #0
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f47f af6d 	bne.w	800b458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b594:	e034      	b.n	800b600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 f8e3 	bl	800b762 <I2C_IsAcknowledgeFailed>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e034      	b.n	800b610 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ac:	d028      	beq.n	800b600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ae:	f7fe f8c3 	bl	8009738 <HAL_GetTick>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d302      	bcc.n	800b5c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11d      	bne.n	800b600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ce:	2b80      	cmp	r3, #128	; 0x80
 800b5d0:	d016      	beq.n	800b600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ec:	f043 0220 	orr.w	r2, r3, #32
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e007      	b.n	800b610 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b60a:	2b80      	cmp	r3, #128	; 0x80
 800b60c:	d1c3      	bne.n	800b596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b624:	e034      	b.n	800b690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f89b 	bl	800b762 <I2C_IsAcknowledgeFailed>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e034      	b.n	800b6a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63c:	d028      	beq.n	800b690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b63e:	f7fe f87b 	bl	8009738 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d302      	bcc.n	800b654 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11d      	bne.n	800b690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	f003 0304 	and.w	r3, r3, #4
 800b65e:	2b04      	cmp	r3, #4
 800b660:	d016      	beq.n	800b690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67c:	f043 0220 	orr.w	r2, r3, #32
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e007      	b.n	800b6a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0304 	and.w	r3, r3, #4
 800b69a:	2b04      	cmp	r3, #4
 800b69c:	d1c3      	bne.n	800b626 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b6b4:	e049      	b.n	800b74a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	f003 0310 	and.w	r3, r3, #16
 800b6c0:	2b10      	cmp	r3, #16
 800b6c2:	d119      	bne.n	800b6f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f06f 0210 	mvn.w	r2, #16
 800b6cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e030      	b.n	800b75a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6f8:	f7fe f81e 	bl	8009738 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	429a      	cmp	r2, r3
 800b706:	d302      	bcc.n	800b70e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d11d      	bne.n	800b74a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b718:	2b40      	cmp	r3, #64	; 0x40
 800b71a:	d016      	beq.n	800b74a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2220      	movs	r2, #32
 800b726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b736:	f043 0220 	orr.w	r2, r3, #32
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e007      	b.n	800b75a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b754:	2b40      	cmp	r3, #64	; 0x40
 800b756:	d1ae      	bne.n	800b6b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b778:	d11b      	bne.n	800b7b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b782:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2220      	movs	r2, #32
 800b78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	f043 0204 	orr.w	r2, r3, #4
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e272      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 8087 	beq.w	800b8ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b7e0:	4b92      	ldr	r3, [pc, #584]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f003 030c 	and.w	r3, r3, #12
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d00c      	beq.n	800b806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b7ec:	4b8f      	ldr	r3, [pc, #572]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f003 030c 	and.w	r3, r3, #12
 800b7f4:	2b08      	cmp	r3, #8
 800b7f6:	d112      	bne.n	800b81e <HAL_RCC_OscConfig+0x5e>
 800b7f8:	4b8c      	ldr	r3, [pc, #560]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b804:	d10b      	bne.n	800b81e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b806:	4b89      	ldr	r3, [pc, #548]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d06c      	beq.n	800b8ec <HAL_RCC_OscConfig+0x12c>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d168      	bne.n	800b8ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e24c      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b826:	d106      	bne.n	800b836 <HAL_RCC_OscConfig+0x76>
 800b828:	4b80      	ldr	r3, [pc, #512]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a7f      	ldr	r2, [pc, #508]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b82e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	e02e      	b.n	800b894 <HAL_RCC_OscConfig+0xd4>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10c      	bne.n	800b858 <HAL_RCC_OscConfig+0x98>
 800b83e:	4b7b      	ldr	r3, [pc, #492]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a7a      	ldr	r2, [pc, #488]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	4b78      	ldr	r3, [pc, #480]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a77      	ldr	r2, [pc, #476]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	e01d      	b.n	800b894 <HAL_RCC_OscConfig+0xd4>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b860:	d10c      	bne.n	800b87c <HAL_RCC_OscConfig+0xbc>
 800b862:	4b72      	ldr	r3, [pc, #456]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a71      	ldr	r2, [pc, #452]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b86c:	6013      	str	r3, [r2, #0]
 800b86e:	4b6f      	ldr	r3, [pc, #444]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a6e      	ldr	r2, [pc, #440]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	e00b      	b.n	800b894 <HAL_RCC_OscConfig+0xd4>
 800b87c:	4b6b      	ldr	r3, [pc, #428]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a6a      	ldr	r2, [pc, #424]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	4b68      	ldr	r3, [pc, #416]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a67      	ldr	r2, [pc, #412]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b88e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d013      	beq.n	800b8c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b89c:	f7fd ff4c 	bl	8009738 <HAL_GetTick>
 800b8a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8a2:	e008      	b.n	800b8b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8a4:	f7fd ff48 	bl	8009738 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b64      	cmp	r3, #100	; 0x64
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e200      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8b6:	4b5d      	ldr	r3, [pc, #372]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0f0      	beq.n	800b8a4 <HAL_RCC_OscConfig+0xe4>
 800b8c2:	e014      	b.n	800b8ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8c4:	f7fd ff38 	bl	8009738 <HAL_GetTick>
 800b8c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ca:	e008      	b.n	800b8de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8cc:	f7fd ff34 	bl	8009738 <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	2b64      	cmp	r3, #100	; 0x64
 800b8d8:	d901      	bls.n	800b8de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e1ec      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8de:	4b53      	ldr	r3, [pc, #332]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1f0      	bne.n	800b8cc <HAL_RCC_OscConfig+0x10c>
 800b8ea:	e000      	b.n	800b8ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d063      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8fa:	4b4c      	ldr	r3, [pc, #304]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f003 030c 	and.w	r3, r3, #12
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b906:	4b49      	ldr	r3, [pc, #292]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f003 030c 	and.w	r3, r3, #12
 800b90e:	2b08      	cmp	r3, #8
 800b910:	d11c      	bne.n	800b94c <HAL_RCC_OscConfig+0x18c>
 800b912:	4b46      	ldr	r3, [pc, #280]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d116      	bne.n	800b94c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b91e:	4b43      	ldr	r3, [pc, #268]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b00      	cmp	r3, #0
 800b928:	d005      	beq.n	800b936 <HAL_RCC_OscConfig+0x176>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d001      	beq.n	800b936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e1c0      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b936:	4b3d      	ldr	r3, [pc, #244]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	4939      	ldr	r1, [pc, #228]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b946:	4313      	orrs	r3, r2
 800b948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b94a:	e03a      	b.n	800b9c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d020      	beq.n	800b996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b954:	4b36      	ldr	r3, [pc, #216]	; (800ba30 <HAL_RCC_OscConfig+0x270>)
 800b956:	2201      	movs	r2, #1
 800b958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b95a:	f7fd feed 	bl	8009738 <HAL_GetTick>
 800b95e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b960:	e008      	b.n	800b974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b962:	f7fd fee9 	bl	8009738 <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d901      	bls.n	800b974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e1a1      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b974:	4b2d      	ldr	r3, [pc, #180]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0f0      	beq.n	800b962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b980:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4927      	ldr	r1, [pc, #156]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b990:	4313      	orrs	r3, r2
 800b992:	600b      	str	r3, [r1, #0]
 800b994:	e015      	b.n	800b9c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b996:	4b26      	ldr	r3, [pc, #152]	; (800ba30 <HAL_RCC_OscConfig+0x270>)
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b99c:	f7fd fecc 	bl	8009738 <HAL_GetTick>
 800b9a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9a4:	f7fd fec8 	bl	8009738 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d901      	bls.n	800b9b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e180      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f0      	bne.n	800b9a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0308 	and.w	r3, r3, #8
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d03a      	beq.n	800ba44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d019      	beq.n	800ba0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9d6:	4b17      	ldr	r3, [pc, #92]	; (800ba34 <HAL_RCC_OscConfig+0x274>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9dc:	f7fd feac 	bl	8009738 <HAL_GetTick>
 800b9e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9e2:	e008      	b.n	800b9f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9e4:	f7fd fea8 	bl	8009738 <HAL_GetTick>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d901      	bls.n	800b9f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e160      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ba2c <HAL_RCC_OscConfig+0x26c>)
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0f0      	beq.n	800b9e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ba02:	2001      	movs	r0, #1
 800ba04:	f000 face 	bl	800bfa4 <RCC_Delay>
 800ba08:	e01c      	b.n	800ba44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba0a:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <HAL_RCC_OscConfig+0x274>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba10:	f7fd fe92 	bl	8009738 <HAL_GetTick>
 800ba14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba16:	e00f      	b.n	800ba38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba18:	f7fd fe8e 	bl	8009738 <HAL_GetTick>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d908      	bls.n	800ba38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e146      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
 800ba2a:	bf00      	nop
 800ba2c:	40021000 	.word	0x40021000
 800ba30:	42420000 	.word	0x42420000
 800ba34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba38:	4b92      	ldr	r3, [pc, #584]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e9      	bne.n	800ba18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 80a6 	beq.w	800bb9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba52:	2300      	movs	r3, #0
 800ba54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba56:	4b8b      	ldr	r3, [pc, #556]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800ba58:	69db      	ldr	r3, [r3, #28]
 800ba5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10d      	bne.n	800ba7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba62:	4b88      	ldr	r3, [pc, #544]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	4a87      	ldr	r2, [pc, #540]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800ba68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba6c:	61d3      	str	r3, [r2, #28]
 800ba6e:	4b85      	ldr	r3, [pc, #532]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba76:	60bb      	str	r3, [r7, #8]
 800ba78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba7e:	4b82      	ldr	r3, [pc, #520]	; (800bc88 <HAL_RCC_OscConfig+0x4c8>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d118      	bne.n	800babc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba8a:	4b7f      	ldr	r3, [pc, #508]	; (800bc88 <HAL_RCC_OscConfig+0x4c8>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a7e      	ldr	r2, [pc, #504]	; (800bc88 <HAL_RCC_OscConfig+0x4c8>)
 800ba90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba96:	f7fd fe4f 	bl	8009738 <HAL_GetTick>
 800ba9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba9c:	e008      	b.n	800bab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba9e:	f7fd fe4b 	bl	8009738 <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	2b64      	cmp	r3, #100	; 0x64
 800baaa:	d901      	bls.n	800bab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e103      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bab0:	4b75      	ldr	r3, [pc, #468]	; (800bc88 <HAL_RCC_OscConfig+0x4c8>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0f0      	beq.n	800ba9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d106      	bne.n	800bad2 <HAL_RCC_OscConfig+0x312>
 800bac4:	4b6f      	ldr	r3, [pc, #444]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	4a6e      	ldr	r2, [pc, #440]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800baca:	f043 0301 	orr.w	r3, r3, #1
 800bace:	6213      	str	r3, [r2, #32]
 800bad0:	e02d      	b.n	800bb2e <HAL_RCC_OscConfig+0x36e>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10c      	bne.n	800baf4 <HAL_RCC_OscConfig+0x334>
 800bada:	4b6a      	ldr	r3, [pc, #424]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	4a69      	ldr	r2, [pc, #420]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bae0:	f023 0301 	bic.w	r3, r3, #1
 800bae4:	6213      	str	r3, [r2, #32]
 800bae6:	4b67      	ldr	r3, [pc, #412]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	4a66      	ldr	r2, [pc, #408]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800baec:	f023 0304 	bic.w	r3, r3, #4
 800baf0:	6213      	str	r3, [r2, #32]
 800baf2:	e01c      	b.n	800bb2e <HAL_RCC_OscConfig+0x36e>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	2b05      	cmp	r3, #5
 800bafa:	d10c      	bne.n	800bb16 <HAL_RCC_OscConfig+0x356>
 800bafc:	4b61      	ldr	r3, [pc, #388]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	4a60      	ldr	r2, [pc, #384]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb02:	f043 0304 	orr.w	r3, r3, #4
 800bb06:	6213      	str	r3, [r2, #32]
 800bb08:	4b5e      	ldr	r3, [pc, #376]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	4a5d      	ldr	r2, [pc, #372]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb0e:	f043 0301 	orr.w	r3, r3, #1
 800bb12:	6213      	str	r3, [r2, #32]
 800bb14:	e00b      	b.n	800bb2e <HAL_RCC_OscConfig+0x36e>
 800bb16:	4b5b      	ldr	r3, [pc, #364]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	4a5a      	ldr	r2, [pc, #360]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb1c:	f023 0301 	bic.w	r3, r3, #1
 800bb20:	6213      	str	r3, [r2, #32]
 800bb22:	4b58      	ldr	r3, [pc, #352]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	4a57      	ldr	r2, [pc, #348]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb28:	f023 0304 	bic.w	r3, r3, #4
 800bb2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d015      	beq.n	800bb62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb36:	f7fd fdff 	bl	8009738 <HAL_GetTick>
 800bb3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb3c:	e00a      	b.n	800bb54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb3e:	f7fd fdfb 	bl	8009738 <HAL_GetTick>
 800bb42:	4602      	mov	r2, r0
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d901      	bls.n	800bb54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e0b1      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb54:	4b4b      	ldr	r3, [pc, #300]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb56:	6a1b      	ldr	r3, [r3, #32]
 800bb58:	f003 0302 	and.w	r3, r3, #2
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0ee      	beq.n	800bb3e <HAL_RCC_OscConfig+0x37e>
 800bb60:	e014      	b.n	800bb8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb62:	f7fd fde9 	bl	8009738 <HAL_GetTick>
 800bb66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb68:	e00a      	b.n	800bb80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb6a:	f7fd fde5 	bl	8009738 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d901      	bls.n	800bb80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e09b      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb80:	4b40      	ldr	r3, [pc, #256]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb82:	6a1b      	ldr	r3, [r3, #32]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1ee      	bne.n	800bb6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d105      	bne.n	800bb9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb92:	4b3c      	ldr	r3, [pc, #240]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	4a3b      	ldr	r2, [pc, #236]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bb98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 8087 	beq.w	800bcb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bba8:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	f003 030c 	and.w	r3, r3, #12
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d061      	beq.n	800bc78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	69db      	ldr	r3, [r3, #28]
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d146      	bne.n	800bc4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbbc:	4b33      	ldr	r3, [pc, #204]	; (800bc8c <HAL_RCC_OscConfig+0x4cc>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbc2:	f7fd fdb9 	bl	8009738 <HAL_GetTick>
 800bbc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bbc8:	e008      	b.n	800bbdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbca:	f7fd fdb5 	bl	8009738 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d901      	bls.n	800bbdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e06d      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1f0      	bne.n	800bbca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf0:	d108      	bne.n	800bc04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bbf2:	4b24      	ldr	r3, [pc, #144]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	4921      	ldr	r1, [pc, #132]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bc00:	4313      	orrs	r3, r2
 800bc02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc04:	4b1f      	ldr	r3, [pc, #124]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a19      	ldr	r1, [r3, #32]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc14:	430b      	orrs	r3, r1
 800bc16:	491b      	ldr	r1, [pc, #108]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc1c:	4b1b      	ldr	r3, [pc, #108]	; (800bc8c <HAL_RCC_OscConfig+0x4cc>)
 800bc1e:	2201      	movs	r2, #1
 800bc20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc22:	f7fd fd89 	bl	8009738 <HAL_GetTick>
 800bc26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bc28:	e008      	b.n	800bc3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc2a:	f7fd fd85 	bl	8009738 <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d901      	bls.n	800bc3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e03d      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bc3c:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d0f0      	beq.n	800bc2a <HAL_RCC_OscConfig+0x46a>
 800bc48:	e035      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc4a:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <HAL_RCC_OscConfig+0x4cc>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc50:	f7fd fd72 	bl	8009738 <HAL_GetTick>
 800bc54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc56:	e008      	b.n	800bc6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc58:	f7fd fd6e 	bl	8009738 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d901      	bls.n	800bc6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e026      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc6a:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <HAL_RCC_OscConfig+0x4c4>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1f0      	bne.n	800bc58 <HAL_RCC_OscConfig+0x498>
 800bc76:	e01e      	b.n	800bcb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d107      	bne.n	800bc90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e019      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
 800bc84:	40021000 	.word	0x40021000
 800bc88:	40007000 	.word	0x40007000
 800bc8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bc90:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <HAL_RCC_OscConfig+0x500>)
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d106      	bne.n	800bcb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d001      	beq.n	800bcb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	40021000 	.word	0x40021000

0800bcc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e0d0      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bcd8:	4b6a      	ldr	r3, [pc, #424]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0307 	and.w	r3, r3, #7
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d910      	bls.n	800bd08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bce6:	4b67      	ldr	r3, [pc, #412]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f023 0207 	bic.w	r2, r3, #7
 800bcee:	4965      	ldr	r1, [pc, #404]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcf6:	4b63      	ldr	r3, [pc, #396]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0307 	and.w	r3, r3, #7
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d001      	beq.n	800bd08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e0b8      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0302 	and.w	r3, r3, #2
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d020      	beq.n	800bd56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd20:	4b59      	ldr	r3, [pc, #356]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4a58      	ldr	r2, [pc, #352]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bd2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0308 	and.w	r3, r3, #8
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d005      	beq.n	800bd44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd38:	4b53      	ldr	r3, [pc, #332]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	4a52      	ldr	r2, [pc, #328]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800bd42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd44:	4b50      	ldr	r3, [pc, #320]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	494d      	ldr	r1, [pc, #308]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 0301 	and.w	r3, r3, #1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d040      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d107      	bne.n	800bd7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd6a:	4b47      	ldr	r3, [pc, #284]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d115      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e07f      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d107      	bne.n	800bd92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd82:	4b41      	ldr	r3, [pc, #260]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e073      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd92:	4b3d      	ldr	r3, [pc, #244]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e06b      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bda2:	4b39      	ldr	r3, [pc, #228]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f023 0203 	bic.w	r2, r3, #3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	4936      	ldr	r1, [pc, #216]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bdb4:	f7fd fcc0 	bl	8009738 <HAL_GetTick>
 800bdb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdba:	e00a      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdbc:	f7fd fcbc 	bl	8009738 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e053      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdd2:	4b2d      	ldr	r3, [pc, #180]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f003 020c 	and.w	r2, r3, #12
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d1eb      	bne.n	800bdbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bde4:	4b27      	ldr	r3, [pc, #156]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 0307 	and.w	r3, r3, #7
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d210      	bcs.n	800be14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf2:	4b24      	ldr	r3, [pc, #144]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f023 0207 	bic.w	r2, r3, #7
 800bdfa:	4922      	ldr	r1, [pc, #136]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be02:	4b20      	ldr	r3, [pc, #128]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0307 	and.w	r3, r3, #7
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d001      	beq.n	800be14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e032      	b.n	800be7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d008      	beq.n	800be32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be20:	4b19      	ldr	r3, [pc, #100]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	4916      	ldr	r1, [pc, #88]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0308 	and.w	r3, r3, #8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d009      	beq.n	800be52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	490e      	ldr	r1, [pc, #56]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800be52:	f000 f821 	bl	800be98 <HAL_RCC_GetSysClockFreq>
 800be56:	4602      	mov	r2, r0
 800be58:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	091b      	lsrs	r3, r3, #4
 800be5e:	f003 030f 	and.w	r3, r3, #15
 800be62:	490a      	ldr	r1, [pc, #40]	; (800be8c <HAL_RCC_ClockConfig+0x1c8>)
 800be64:	5ccb      	ldrb	r3, [r1, r3]
 800be66:	fa22 f303 	lsr.w	r3, r2, r3
 800be6a:	4a09      	ldr	r2, [pc, #36]	; (800be90 <HAL_RCC_ClockConfig+0x1cc>)
 800be6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800be6e:	4b09      	ldr	r3, [pc, #36]	; (800be94 <HAL_RCC_ClockConfig+0x1d0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4618      	mov	r0, r3
 800be74:	f7fd fc1e 	bl	80096b4 <HAL_InitTick>

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	40022000 	.word	0x40022000
 800be88:	40021000 	.word	0x40021000
 800be8c:	0800ed7c 	.word	0x0800ed7c
 800be90:	200009c4 	.word	0x200009c4
 800be94:	200009c8 	.word	0x200009c8

0800be98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
 800bea2:	2300      	movs	r3, #0
 800bea4:	60bb      	str	r3, [r7, #8]
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	2300      	movs	r3, #0
 800beac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800beb2:	4b1e      	ldr	r3, [pc, #120]	; (800bf2c <HAL_RCC_GetSysClockFreq+0x94>)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f003 030c 	and.w	r3, r3, #12
 800bebe:	2b04      	cmp	r3, #4
 800bec0:	d002      	beq.n	800bec8 <HAL_RCC_GetSysClockFreq+0x30>
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	d003      	beq.n	800bece <HAL_RCC_GetSysClockFreq+0x36>
 800bec6:	e027      	b.n	800bf18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bec8:	4b19      	ldr	r3, [pc, #100]	; (800bf30 <HAL_RCC_GetSysClockFreq+0x98>)
 800beca:	613b      	str	r3, [r7, #16]
      break;
 800becc:	e027      	b.n	800bf1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	0c9b      	lsrs	r3, r3, #18
 800bed2:	f003 030f 	and.w	r3, r3, #15
 800bed6:	4a17      	ldr	r2, [pc, #92]	; (800bf34 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bed8:	5cd3      	ldrb	r3, [r2, r3]
 800beda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d010      	beq.n	800bf08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bee6:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <HAL_RCC_GetSysClockFreq+0x94>)
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	0c5b      	lsrs	r3, r3, #17
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	4a11      	ldr	r2, [pc, #68]	; (800bf38 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bef2:	5cd3      	ldrb	r3, [r2, r3]
 800bef4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a0d      	ldr	r2, [pc, #52]	; (800bf30 <HAL_RCC_GetSysClockFreq+0x98>)
 800befa:	fb03 f202 	mul.w	r2, r3, r2
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	e004      	b.n	800bf12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a0c      	ldr	r2, [pc, #48]	; (800bf3c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bf0c:	fb02 f303 	mul.w	r3, r2, r3
 800bf10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	613b      	str	r3, [r7, #16]
      break;
 800bf16:	e002      	b.n	800bf1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf1a:	613b      	str	r3, [r7, #16]
      break;
 800bf1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf1e:	693b      	ldr	r3, [r7, #16]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	371c      	adds	r7, #28
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bc80      	pop	{r7}
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	40021000 	.word	0x40021000
 800bf30:	007a1200 	.word	0x007a1200
 800bf34:	0800ed94 	.word	0x0800ed94
 800bf38:	0800eda4 	.word	0x0800eda4
 800bf3c:	003d0900 	.word	0x003d0900

0800bf40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf44:	4b02      	ldr	r3, [pc, #8]	; (800bf50 <HAL_RCC_GetHCLKFreq+0x10>)
 800bf46:	681b      	ldr	r3, [r3, #0]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr
 800bf50:	200009c4 	.word	0x200009c4

0800bf54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bf58:	f7ff fff2 	bl	800bf40 <HAL_RCC_GetHCLKFreq>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	0a1b      	lsrs	r3, r3, #8
 800bf64:	f003 0307 	and.w	r3, r3, #7
 800bf68:	4903      	ldr	r1, [pc, #12]	; (800bf78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf6a:	5ccb      	ldrb	r3, [r1, r3]
 800bf6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	40021000 	.word	0x40021000
 800bf78:	0800ed8c 	.word	0x0800ed8c

0800bf7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bf80:	f7ff ffde 	bl	800bf40 <HAL_RCC_GetHCLKFreq>
 800bf84:	4602      	mov	r2, r0
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <HAL_RCC_GetPCLK2Freq+0x20>)
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	0adb      	lsrs	r3, r3, #11
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	4903      	ldr	r1, [pc, #12]	; (800bfa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bf92:	5ccb      	ldrb	r3, [r1, r3]
 800bf94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	40021000 	.word	0x40021000
 800bfa0:	0800ed8c 	.word	0x0800ed8c

0800bfa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <RCC_Delay+0x34>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a0a      	ldr	r2, [pc, #40]	; (800bfdc <RCC_Delay+0x38>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	0a5b      	lsrs	r3, r3, #9
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	fb02 f303 	mul.w	r3, r2, r3
 800bfbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bfc0:	bf00      	nop
  }
  while (Delay --);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	1e5a      	subs	r2, r3, #1
 800bfc6:	60fa      	str	r2, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1f9      	bne.n	800bfc0 <RCC_Delay+0x1c>
}
 800bfcc:	bf00      	nop
 800bfce:	bf00      	nop
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bc80      	pop	{r7}
 800bfd6:	4770      	bx	lr
 800bfd8:	200009c4 	.word	0x200009c4
 800bfdc:	10624dd3 	.word	0x10624dd3

0800bfe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e041      	b.n	800c076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fd fa26 	bl	8009458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3304      	adds	r3, #4
 800c01c:	4619      	mov	r1, r3
 800c01e:	4610      	mov	r0, r2
 800c020:	f000 fa82 	bl	800c528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b01      	cmp	r3, #1
 800c092:	d001      	beq.n	800c098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e044      	b.n	800c122 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68da      	ldr	r2, [r3, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f042 0201 	orr.w	r2, r2, #1
 800c0ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a1d      	ldr	r2, [pc, #116]	; (800c12c <HAL_TIM_Base_Start_IT+0xac>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d018      	beq.n	800c0ec <HAL_TIM_Base_Start_IT+0x6c>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a1c      	ldr	r2, [pc, #112]	; (800c130 <HAL_TIM_Base_Start_IT+0xb0>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d013      	beq.n	800c0ec <HAL_TIM_Base_Start_IT+0x6c>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0cc:	d00e      	beq.n	800c0ec <HAL_TIM_Base_Start_IT+0x6c>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a18      	ldr	r2, [pc, #96]	; (800c134 <HAL_TIM_Base_Start_IT+0xb4>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d009      	beq.n	800c0ec <HAL_TIM_Base_Start_IT+0x6c>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a16      	ldr	r2, [pc, #88]	; (800c138 <HAL_TIM_Base_Start_IT+0xb8>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <HAL_TIM_Base_Start_IT+0x6c>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a15      	ldr	r2, [pc, #84]	; (800c13c <HAL_TIM_Base_Start_IT+0xbc>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d111      	bne.n	800c110 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b06      	cmp	r3, #6
 800c0fc:	d010      	beq.n	800c120 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f042 0201 	orr.w	r2, r2, #1
 800c10c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c10e:	e007      	b.n	800c120 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0201 	orr.w	r2, r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	bc80      	pop	{r7}
 800c12a:	4770      	bx	lr
 800c12c:	40012c00 	.word	0x40012c00
 800c130:	40013400 	.word	0x40013400
 800c134:	40000400 	.word	0x40000400
 800c138:	40000800 	.word	0x40000800
 800c13c:	40000c00 	.word	0x40000c00

0800c140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	f003 0302 	and.w	r3, r3, #2
 800c152:	2b02      	cmp	r3, #2
 800c154:	d122      	bne.n	800c19c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	f003 0302 	and.w	r3, r3, #2
 800c160:	2b02      	cmp	r3, #2
 800c162:	d11b      	bne.n	800c19c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f06f 0202 	mvn.w	r2, #2
 800c16c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f9b4 	bl	800c4f0 <HAL_TIM_IC_CaptureCallback>
 800c188:	e005      	b.n	800c196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f9a7 	bl	800c4de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f9b6 	bl	800c502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	691b      	ldr	r3, [r3, #16]
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b04      	cmp	r3, #4
 800c1a8:	d122      	bne.n	800c1f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d11b      	bne.n	800c1f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f06f 0204 	mvn.w	r2, #4
 800c1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f98a 	bl	800c4f0 <HAL_TIM_IC_CaptureCallback>
 800c1dc:	e005      	b.n	800c1ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f97d 	bl	800c4de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f98c 	bl	800c502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	f003 0308 	and.w	r3, r3, #8
 800c1fa:	2b08      	cmp	r3, #8
 800c1fc:	d122      	bne.n	800c244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	f003 0308 	and.w	r3, r3, #8
 800c208:	2b08      	cmp	r3, #8
 800c20a:	d11b      	bne.n	800c244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f06f 0208 	mvn.w	r2, #8
 800c214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2204      	movs	r2, #4
 800c21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f960 	bl	800c4f0 <HAL_TIM_IC_CaptureCallback>
 800c230:	e005      	b.n	800c23e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f953 	bl	800c4de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f962 	bl	800c502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	f003 0310 	and.w	r3, r3, #16
 800c24e:	2b10      	cmp	r3, #16
 800c250:	d122      	bne.n	800c298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f003 0310 	and.w	r3, r3, #16
 800c25c:	2b10      	cmp	r3, #16
 800c25e:	d11b      	bne.n	800c298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f06f 0210 	mvn.w	r2, #16
 800c268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2208      	movs	r2, #8
 800c26e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	69db      	ldr	r3, [r3, #28]
 800c276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f936 	bl	800c4f0 <HAL_TIM_IC_CaptureCallback>
 800c284:	e005      	b.n	800c292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f929 	bl	800c4de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f938 	bl	800c502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d10e      	bne.n	800c2c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d107      	bne.n	800c2c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f06f 0201 	mvn.w	r2, #1
 800c2bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7fc fd5c 	bl	8008d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ce:	2b80      	cmp	r3, #128	; 0x80
 800c2d0:	d10e      	bne.n	800c2f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2dc:	2b80      	cmp	r3, #128	; 0x80
 800c2de:	d107      	bne.n	800c2f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 faa1 	bl	800c832 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fa:	2b40      	cmp	r3, #64	; 0x40
 800c2fc:	d10e      	bne.n	800c31c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c308:	2b40      	cmp	r3, #64	; 0x40
 800c30a:	d107      	bne.n	800c31c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f8fc 	bl	800c514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	f003 0320 	and.w	r3, r3, #32
 800c326:	2b20      	cmp	r3, #32
 800c328:	d10e      	bne.n	800c348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	f003 0320 	and.w	r3, r3, #32
 800c334:	2b20      	cmp	r3, #32
 800c336:	d107      	bne.n	800c348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f06f 0220 	mvn.w	r2, #32
 800c340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa6c 	bl	800c820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c364:	2b01      	cmp	r3, #1
 800c366:	d101      	bne.n	800c36c <HAL_TIM_ConfigClockSource+0x1c>
 800c368:	2302      	movs	r3, #2
 800c36a:	e0b4      	b.n	800c4d6 <HAL_TIM_ConfigClockSource+0x186>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c38a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3a4:	d03e      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0xd4>
 800c3a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3aa:	f200 8087 	bhi.w	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b2:	f000 8086 	beq.w	800c4c2 <HAL_TIM_ConfigClockSource+0x172>
 800c3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ba:	d87f      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3bc:	2b70      	cmp	r3, #112	; 0x70
 800c3be:	d01a      	beq.n	800c3f6 <HAL_TIM_ConfigClockSource+0xa6>
 800c3c0:	2b70      	cmp	r3, #112	; 0x70
 800c3c2:	d87b      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3c4:	2b60      	cmp	r3, #96	; 0x60
 800c3c6:	d050      	beq.n	800c46a <HAL_TIM_ConfigClockSource+0x11a>
 800c3c8:	2b60      	cmp	r3, #96	; 0x60
 800c3ca:	d877      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3cc:	2b50      	cmp	r3, #80	; 0x50
 800c3ce:	d03c      	beq.n	800c44a <HAL_TIM_ConfigClockSource+0xfa>
 800c3d0:	2b50      	cmp	r3, #80	; 0x50
 800c3d2:	d873      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3d4:	2b40      	cmp	r3, #64	; 0x40
 800c3d6:	d058      	beq.n	800c48a <HAL_TIM_ConfigClockSource+0x13a>
 800c3d8:	2b40      	cmp	r3, #64	; 0x40
 800c3da:	d86f      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3dc:	2b30      	cmp	r3, #48	; 0x30
 800c3de:	d064      	beq.n	800c4aa <HAL_TIM_ConfigClockSource+0x15a>
 800c3e0:	2b30      	cmp	r3, #48	; 0x30
 800c3e2:	d86b      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3e4:	2b20      	cmp	r3, #32
 800c3e6:	d060      	beq.n	800c4aa <HAL_TIM_ConfigClockSource+0x15a>
 800c3e8:	2b20      	cmp	r3, #32
 800c3ea:	d867      	bhi.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d05c      	beq.n	800c4aa <HAL_TIM_ConfigClockSource+0x15a>
 800c3f0:	2b10      	cmp	r3, #16
 800c3f2:	d05a      	beq.n	800c4aa <HAL_TIM_ConfigClockSource+0x15a>
 800c3f4:	e062      	b.n	800c4bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c406:	f000 f980 	bl	800c70a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	609a      	str	r2, [r3, #8]
      break;
 800c422:	e04f      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c434:	f000 f969 	bl	800c70a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689a      	ldr	r2, [r3, #8]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c446:	609a      	str	r2, [r3, #8]
      break;
 800c448:	e03c      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c456:	461a      	mov	r2, r3
 800c458:	f000 f8e0 	bl	800c61c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2150      	movs	r1, #80	; 0x50
 800c462:	4618      	mov	r0, r3
 800c464:	f000 f937 	bl	800c6d6 <TIM_ITRx_SetConfig>
      break;
 800c468:	e02c      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c476:	461a      	mov	r2, r3
 800c478:	f000 f8fe 	bl	800c678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2160      	movs	r1, #96	; 0x60
 800c482:	4618      	mov	r0, r3
 800c484:	f000 f927 	bl	800c6d6 <TIM_ITRx_SetConfig>
      break;
 800c488:	e01c      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c496:	461a      	mov	r2, r3
 800c498:	f000 f8c0 	bl	800c61c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2140      	movs	r1, #64	; 0x40
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 f917 	bl	800c6d6 <TIM_ITRx_SetConfig>
      break;
 800c4a8:	e00c      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	f000 f90e 	bl	800c6d6 <TIM_ITRx_SetConfig>
      break;
 800c4ba:	e003      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c0:	e000      	b.n	800c4c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c4c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4e6:	bf00      	nop
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bc80      	pop	{r7}
 800c4ee:	4770      	bx	lr

0800c4f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bc80      	pop	{r7}
 800c500:	4770      	bx	lr

0800c502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr

0800c514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	bc80      	pop	{r7}
 800c524:	4770      	bx	lr
	...

0800c528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a33      	ldr	r2, [pc, #204]	; (800c608 <TIM_Base_SetConfig+0xe0>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d013      	beq.n	800c568 <TIM_Base_SetConfig+0x40>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a32      	ldr	r2, [pc, #200]	; (800c60c <TIM_Base_SetConfig+0xe4>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d00f      	beq.n	800c568 <TIM_Base_SetConfig+0x40>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c54e:	d00b      	beq.n	800c568 <TIM_Base_SetConfig+0x40>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a2f      	ldr	r2, [pc, #188]	; (800c610 <TIM_Base_SetConfig+0xe8>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d007      	beq.n	800c568 <TIM_Base_SetConfig+0x40>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a2e      	ldr	r2, [pc, #184]	; (800c614 <TIM_Base_SetConfig+0xec>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d003      	beq.n	800c568 <TIM_Base_SetConfig+0x40>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a2d      	ldr	r2, [pc, #180]	; (800c618 <TIM_Base_SetConfig+0xf0>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d108      	bne.n	800c57a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c56e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a22      	ldr	r2, [pc, #136]	; (800c608 <TIM_Base_SetConfig+0xe0>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d013      	beq.n	800c5aa <TIM_Base_SetConfig+0x82>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a21      	ldr	r2, [pc, #132]	; (800c60c <TIM_Base_SetConfig+0xe4>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d00f      	beq.n	800c5aa <TIM_Base_SetConfig+0x82>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c590:	d00b      	beq.n	800c5aa <TIM_Base_SetConfig+0x82>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a1e      	ldr	r2, [pc, #120]	; (800c610 <TIM_Base_SetConfig+0xe8>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d007      	beq.n	800c5aa <TIM_Base_SetConfig+0x82>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a1d      	ldr	r2, [pc, #116]	; (800c614 <TIM_Base_SetConfig+0xec>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d003      	beq.n	800c5aa <TIM_Base_SetConfig+0x82>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a1c      	ldr	r2, [pc, #112]	; (800c618 <TIM_Base_SetConfig+0xf0>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d108      	bne.n	800c5bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a09      	ldr	r2, [pc, #36]	; (800c608 <TIM_Base_SetConfig+0xe0>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d003      	beq.n	800c5f0 <TIM_Base_SetConfig+0xc8>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a08      	ldr	r2, [pc, #32]	; (800c60c <TIM_Base_SetConfig+0xe4>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d103      	bne.n	800c5f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	691a      	ldr	r2, [r3, #16]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	615a      	str	r2, [r3, #20]
}
 800c5fe:	bf00      	nop
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	bc80      	pop	{r7}
 800c606:	4770      	bx	lr
 800c608:	40012c00 	.word	0x40012c00
 800c60c:	40013400 	.word	0x40013400
 800c610:	40000400 	.word	0x40000400
 800c614:	40000800 	.word	0x40000800
 800c618:	40000c00 	.word	0x40000c00

0800c61c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b087      	sub	sp, #28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6a1b      	ldr	r3, [r3, #32]
 800c62c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	f023 0201 	bic.w	r2, r3, #1
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	4313      	orrs	r3, r2
 800c650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f023 030a 	bic.w	r3, r3, #10
 800c658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	4313      	orrs	r3, r2
 800c660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	621a      	str	r2, [r3, #32]
}
 800c66e:	bf00      	nop
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	bc80      	pop	{r7}
 800c676:	4770      	bx	lr

0800c678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6a1b      	ldr	r3, [r3, #32]
 800c688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6a1b      	ldr	r3, [r3, #32]
 800c68e:	f023 0210 	bic.w	r2, r3, #16
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	031b      	lsls	r3, r3, #12
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	011b      	lsls	r3, r3, #4
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	693a      	ldr	r2, [r7, #16]
 800c6c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	621a      	str	r2, [r3, #32]
}
 800c6cc:	bf00      	nop
 800c6ce:	371c      	adds	r7, #28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bc80      	pop	{r7}
 800c6d4:	4770      	bx	lr

0800c6d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	f043 0307 	orr.w	r3, r3, #7
 800c6f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	609a      	str	r2, [r3, #8]
}
 800c700:	bf00      	nop
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	bc80      	pop	{r7}
 800c708:	4770      	bx	lr

0800c70a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b087      	sub	sp, #28
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	021a      	lsls	r2, r3, #8
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	431a      	orrs	r2, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4313      	orrs	r3, r2
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	4313      	orrs	r3, r2
 800c736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	609a      	str	r2, [r3, #8]
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr

0800c748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d101      	bne.n	800c760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c75c:	2302      	movs	r3, #2
 800c75e:	e050      	b.n	800c802 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2202      	movs	r2, #2
 800c76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	4313      	orrs	r3, r2
 800c790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a1b      	ldr	r2, [pc, #108]	; (800c80c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d018      	beq.n	800c7d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a19      	ldr	r2, [pc, #100]	; (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d013      	beq.n	800c7d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7b6:	d00e      	beq.n	800c7d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a15      	ldr	r2, [pc, #84]	; (800c814 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d009      	beq.n	800c7d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a14      	ldr	r2, [pc, #80]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d004      	beq.n	800c7d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a12      	ldr	r2, [pc, #72]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d10c      	bne.n	800c7f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	bc80      	pop	{r7}
 800c80a:	4770      	bx	lr
 800c80c:	40012c00 	.word	0x40012c00
 800c810:	40013400 	.word	0x40013400
 800c814:	40000400 	.word	0x40000400
 800c818:	40000800 	.word	0x40000800
 800c81c:	40000c00 	.word	0x40000c00

0800c820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bc80      	pop	{r7}
 800c830:	4770      	bx	lr

0800c832 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c83a:	bf00      	nop
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr

0800c844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	e042      	b.n	800c8dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7fc fe1a 	bl	80094a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2224      	movs	r2, #36	; 0x24
 800c874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fd11 	bl	800d2b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	691a      	ldr	r2, [r3, #16]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c89c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	695a      	ldr	r2, [r3, #20]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2220      	movs	r2, #32
 800c8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b20      	cmp	r3, #32
 800c8fc:	d121      	bne.n	800c942 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <HAL_UART_Transmit_IT+0x26>
 800c904:	88fb      	ldrh	r3, [r7, #6]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e01a      	b.n	800c944 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	88fa      	ldrh	r2, [r7, #6]
 800c918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	88fa      	ldrh	r2, [r7, #6]
 800c91e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2221      	movs	r2, #33	; 0x21
 800c92a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68da      	ldr	r2, [r3, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c93c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	e000      	b.n	800c944 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c942:	2302      	movs	r3, #2
  }
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	bc80      	pop	{r7}
 800c94c:	4770      	bx	lr

0800c94e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	4613      	mov	r3, r2
 800c95a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b20      	cmp	r3, #32
 800c966:	d112      	bne.n	800c98e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <HAL_UART_Receive_IT+0x26>
 800c96e:	88fb      	ldrh	r3, [r7, #6]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e00b      	b.n	800c990 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c97e:	88fb      	ldrh	r3, [r7, #6]
 800c980:	461a      	mov	r2, r3
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 fabf 	bl	800cf08 <UART_Start_Receive_IT>
 800c98a:	4603      	mov	r3, r0
 800c98c:	e000      	b.n	800c990 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c98e:	2302      	movs	r3, #2
  }
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b0ba      	sub	sp, #232	; 0xe8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ce:	f003 030f 	and.w	r3, r3, #15
 800c9d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c9d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10f      	bne.n	800c9fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e2:	f003 0320 	and.w	r3, r3, #32
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d009      	beq.n	800c9fe <HAL_UART_IRQHandler+0x66>
 800c9ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9ee:	f003 0320 	and.w	r3, r3, #32
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d003      	beq.n	800c9fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fb9c 	bl	800d134 <UART_Receive_IT>
      return;
 800c9fc:	e25b      	b.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c9fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 80de 	beq.w	800cbc4 <HAL_UART_IRQHandler+0x22c>
 800ca08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d106      	bne.n	800ca22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ca14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 80d1 	beq.w	800cbc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ca22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca26:	f003 0301 	and.w	r3, r3, #1
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <HAL_UART_IRQHandler+0xae>
 800ca2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d005      	beq.n	800ca46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3e:	f043 0201 	orr.w	r2, r3, #1
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca4a:	f003 0304 	and.w	r3, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00b      	beq.n	800ca6a <HAL_UART_IRQHandler+0xd2>
 800ca52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca62:	f043 0202 	orr.w	r2, r3, #2
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca6e:	f003 0302 	and.w	r3, r3, #2
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00b      	beq.n	800ca8e <HAL_UART_IRQHandler+0xf6>
 800ca76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d005      	beq.n	800ca8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca86:	f043 0204 	orr.w	r2, r3, #4
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ca8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca92:	f003 0308 	and.w	r3, r3, #8
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d011      	beq.n	800cabe <HAL_UART_IRQHandler+0x126>
 800ca9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca9e:	f003 0320 	and.w	r3, r3, #32
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d105      	bne.n	800cab2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800caa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d005      	beq.n	800cabe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab6:	f043 0208 	orr.w	r2, r3, #8
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 81f2 	beq.w	800ceac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cacc:	f003 0320 	and.w	r3, r3, #32
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d008      	beq.n	800cae6 <HAL_UART_IRQHandler+0x14e>
 800cad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cad8:	f003 0320 	and.w	r3, r3, #32
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fb27 	bl	800d134 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	bf14      	ite	ne
 800caf4:	2301      	movne	r3, #1
 800caf6:	2300      	moveq	r3, #0
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb02:	f003 0308 	and.w	r3, r3, #8
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d103      	bne.n	800cb12 <HAL_UART_IRQHandler+0x17a>
 800cb0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d04f      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fa31 	bl	800cf7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d041      	beq.n	800cbaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb34:	e853 3f00 	ldrex	r3, [r3]
 800cb38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cb3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cb40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3314      	adds	r3, #20
 800cb4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cb56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cb5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cb6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1d9      	bne.n	800cb26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d013      	beq.n	800cba2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7e:	4a7e      	ldr	r2, [pc, #504]	; (800cd78 <HAL_UART_IRQHandler+0x3e0>)
 800cb80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fd f848 	bl	8009c1c <HAL_DMA_Abort_IT>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d016      	beq.n	800cbc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba0:	e00e      	b.n	800cbc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f99c 	bl	800cee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba8:	e00a      	b.n	800cbc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f998 	bl	800cee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbb0:	e006      	b.n	800cbc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f994 	bl	800cee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800cbbe:	e175      	b.n	800ceac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbc0:	bf00      	nop
    return;
 800cbc2:	e173      	b.n	800ceac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	f040 814f 	bne.w	800ce6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd2:	f003 0310 	and.w	r3, r3, #16
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f000 8148 	beq.w	800ce6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbe0:	f003 0310 	and.w	r3, r3, #16
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f000 8141 	beq.w	800ce6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cbea:	2300      	movs	r3, #0
 800cbec:	60bb      	str	r3, [r7, #8]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	60bb      	str	r3, [r7, #8]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	60bb      	str	r3, [r7, #8]
 800cbfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	695b      	ldr	r3, [r3, #20]
 800cc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80b6 	beq.w	800cd7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 8145 	beq.w	800ceb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	f080 813e 	bcs.w	800ceb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	2b20      	cmp	r3, #32
 800cc44:	f000 8088 	beq.w	800cd58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc56:	e853 3f00 	ldrex	r3, [r3]
 800cc5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	330c      	adds	r3, #12
 800cc70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cc74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc84:	e841 2300 	strex	r3, r2, [r1]
 800cc88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1d9      	bne.n	800cc48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3314      	adds	r3, #20
 800cc9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3314      	adds	r3, #20
 800ccb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ccb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ccbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ccc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ccc4:	e841 2300 	strex	r3, r2, [r1]
 800ccc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ccca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1e1      	bne.n	800cc94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	3314      	adds	r3, #20
 800ccd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccda:	e853 3f00 	ldrex	r3, [r3]
 800ccde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3314      	adds	r3, #20
 800ccf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ccf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ccf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e3      	bne.n	800ccd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	330c      	adds	r3, #12
 800cd1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd20:	e853 3f00 	ldrex	r3, [r3]
 800cd24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd28:	f023 0310 	bic.w	r3, r3, #16
 800cd2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	330c      	adds	r3, #12
 800cd36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cd3a:	65ba      	str	r2, [r7, #88]	; 0x58
 800cd3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd42:	e841 2300 	strex	r3, r2, [r1]
 800cd46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1e3      	bne.n	800cd16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fc ff27 	bl	8009ba6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f8bf 	bl	800cef2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cd74:	e09c      	b.n	800ceb0 <HAL_UART_IRQHandler+0x518>
 800cd76:	bf00      	nop
 800cd78:	0800d03f 	.word	0x0800d03f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 808e 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cd98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f000 8089 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	330c      	adds	r3, #12
 800cda8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	330c      	adds	r3, #12
 800cdc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cdc6:	647a      	str	r2, [r7, #68]	; 0x44
 800cdc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cdcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdce:	e841 2300 	strex	r3, r2, [r1]
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1e3      	bne.n	800cda2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3314      	adds	r3, #20
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	e853 3f00 	ldrex	r3, [r3]
 800cde8:	623b      	str	r3, [r7, #32]
   return(result);
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	f023 0301 	bic.w	r3, r3, #1
 800cdf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	3314      	adds	r3, #20
 800cdfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cdfe:	633a      	str	r2, [r7, #48]	; 0x30
 800ce00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce06:	e841 2300 	strex	r3, r2, [r1]
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1e3      	bne.n	800cdda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2220      	movs	r2, #32
 800ce16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	330c      	adds	r3, #12
 800ce26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	e853 3f00 	ldrex	r3, [r3]
 800ce2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f023 0310 	bic.w	r3, r3, #16
 800ce36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	330c      	adds	r3, #12
 800ce40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ce44:	61fa      	str	r2, [r7, #28]
 800ce46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce48:	69b9      	ldr	r1, [r7, #24]
 800ce4a:	69fa      	ldr	r2, [r7, #28]
 800ce4c:	e841 2300 	strex	r3, r2, [r1]
 800ce50:	617b      	str	r3, [r7, #20]
   return(result);
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e3      	bne.n	800ce20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f844 	bl	800cef2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ce6a:	e023      	b.n	800ceb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ce6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d009      	beq.n	800ce8c <HAL_UART_IRQHandler+0x4f4>
 800ce78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f8ee 	bl	800d066 <UART_Transmit_IT>
    return;
 800ce8a:	e014      	b.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ce8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00e      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
 800ce98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d008      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f92d 	bl	800d104 <UART_EndTransmit_IT>
    return;
 800ceaa:	e004      	b.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
    return;
 800ceac:	bf00      	nop
 800ceae:	e002      	b.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
      return;
 800ceb0:	bf00      	nop
 800ceb2:	e000      	b.n	800ceb6 <HAL_UART_IRQHandler+0x51e>
      return;
 800ceb4:	bf00      	nop
  }
}
 800ceb6:	37e8      	adds	r7, #232	; 0xe8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bc80      	pop	{r7}
 800cecc:	4770      	bx	lr

0800cece <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bc80      	pop	{r7}
 800cede:	4770      	bx	lr

0800cee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bc80      	pop	{r7}
 800cef0:	4770      	bx	lr

0800cef2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b083      	sub	sp, #12
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	460b      	mov	r3, r1
 800cefc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cefe:	bf00      	nop
 800cf00:	370c      	adds	r7, #12
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bc80      	pop	{r7}
 800cf06:	4770      	bx	lr

0800cf08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4613      	mov	r3, r2
 800cf14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	88fa      	ldrh	r2, [r7, #6]
 800cf20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	88fa      	ldrh	r2, [r7, #6]
 800cf26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2222      	movs	r2, #34	; 0x22
 800cf32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d007      	beq.n	800cf4e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68da      	ldr	r2, [r3, #12]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	695a      	ldr	r2, [r3, #20]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f042 0201 	orr.w	r2, r2, #1
 800cf5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f042 0220 	orr.w	r2, r2, #32
 800cf6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc80      	pop	{r7}
 800cf78:	4770      	bx	lr

0800cf7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b095      	sub	sp, #84	; 0x54
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	330c      	adds	r3, #12
 800cf88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	330c      	adds	r3, #12
 800cfa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfa2:	643a      	str	r2, [r7, #64]	; 0x40
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e5      	bne.n	800cf82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3314      	adds	r3, #20
 800cfbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	e853 3f00 	ldrex	r3, [r3]
 800cfc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	f023 0301 	bic.w	r3, r3, #1
 800cfcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3314      	adds	r3, #20
 800cfd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfde:	e841 2300 	strex	r3, r2, [r1]
 800cfe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1e5      	bne.n	800cfb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d119      	bne.n	800d026 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	330c      	adds	r3, #12
 800cff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	e853 3f00 	ldrex	r3, [r3]
 800d000:	60bb      	str	r3, [r7, #8]
   return(result);
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	f023 0310 	bic.w	r3, r3, #16
 800d008:	647b      	str	r3, [r7, #68]	; 0x44
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	330c      	adds	r3, #12
 800d010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d012:	61ba      	str	r2, [r7, #24]
 800d014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d016:	6979      	ldr	r1, [r7, #20]
 800d018:	69ba      	ldr	r2, [r7, #24]
 800d01a:	e841 2300 	strex	r3, r2, [r1]
 800d01e:	613b      	str	r3, [r7, #16]
   return(result);
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d1e5      	bne.n	800cff2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2220      	movs	r2, #32
 800d02a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d034:	bf00      	nop
 800d036:	3754      	adds	r7, #84	; 0x54
 800d038:	46bd      	mov	sp, r7
 800d03a:	bc80      	pop	{r7}
 800d03c:	4770      	bx	lr

0800d03e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f7ff ff41 	bl	800cee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d05e:	bf00      	nop
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b21      	cmp	r3, #33	; 0x21
 800d078:	d13e      	bne.n	800d0f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d082:	d114      	bne.n	800d0ae <UART_Transmit_IT+0x48>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d110      	bne.n	800d0ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a1b      	ldr	r3, [r3, #32]
 800d090:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	461a      	mov	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	1c9a      	adds	r2, r3, #2
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	621a      	str	r2, [r3, #32]
 800d0ac:	e008      	b.n	800d0c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	1c59      	adds	r1, r3, #1
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	6211      	str	r1, [r2, #32]
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10f      	bne.n	800d0f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68da      	ldr	r2, [r3, #12]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68da      	ldr	r2, [r3, #12]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e000      	b.n	800d0fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0f8:	2302      	movs	r3, #2
  }
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bc80      	pop	{r7}
 800d102:	4770      	bx	lr

0800d104 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d11a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2220      	movs	r2, #32
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff fec9 	bl	800cebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08c      	sub	sp, #48	; 0x30
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b22      	cmp	r3, #34	; 0x22
 800d146:	f040 80ae 	bne.w	800d2a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d152:	d117      	bne.n	800d184 <UART_Receive_IT+0x50>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d113      	bne.n	800d184 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d15c:	2300      	movs	r3, #0
 800d15e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d164:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d172:	b29a      	uxth	r2, r3
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17c:	1c9a      	adds	r2, r3, #2
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	629a      	str	r2, [r3, #40]	; 0x28
 800d182:	e026      	b.n	800d1d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d188:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d196:	d007      	beq.n	800d1a8 <UART_Receive_IT+0x74>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <UART_Receive_IT+0x82>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d106      	bne.n	800d1b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	701a      	strb	r2, [r3, #0]
 800d1b4:	e008      	b.n	800d1c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d15d      	bne.n	800d2a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68da      	ldr	r2, [r3, #12]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0220 	bic.w	r2, r2, #32
 800d1f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	695a      	ldr	r2, [r3, #20]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f022 0201 	bic.w	r2, r2, #1
 800d214:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d135      	bne.n	800d298 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	330c      	adds	r3, #12
 800d238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	e853 3f00 	ldrex	r3, [r3]
 800d240:	613b      	str	r3, [r7, #16]
   return(result);
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f023 0310 	bic.w	r3, r3, #16
 800d248:	627b      	str	r3, [r7, #36]	; 0x24
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	330c      	adds	r3, #12
 800d250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d252:	623a      	str	r2, [r7, #32]
 800d254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d256:	69f9      	ldr	r1, [r7, #28]
 800d258:	6a3a      	ldr	r2, [r7, #32]
 800d25a:	e841 2300 	strex	r3, r2, [r1]
 800d25e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1e5      	bne.n	800d232 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b10      	cmp	r3, #16
 800d272:	d10a      	bne.n	800d28a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	60fb      	str	r3, [r7, #12]
 800d288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d28e:	4619      	mov	r1, r3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7ff fe2e 	bl	800cef2 <HAL_UARTEx_RxEventCallback>
 800d296:	e002      	b.n	800d29e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff fe18 	bl	800cece <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e002      	b.n	800d2a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e000      	b.n	800d2a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d2a6:	2302      	movs	r3, #2
  }
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3730      	adds	r7, #48	; 0x30
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	431a      	orrs	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	695b      	ldr	r3, [r3, #20]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d2ea:	f023 030c 	bic.w	r3, r3, #12
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	6812      	ldr	r2, [r2, #0]
 800d2f2:	68b9      	ldr	r1, [r7, #8]
 800d2f4:	430b      	orrs	r3, r1
 800d2f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	699a      	ldr	r2, [r3, #24]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a2c      	ldr	r2, [pc, #176]	; (800d3c4 <UART_SetConfig+0x114>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d103      	bne.n	800d320 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d318:	f7fe fe30 	bl	800bf7c <HAL_RCC_GetPCLK2Freq>
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	e002      	b.n	800d326 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d320:	f7fe fe18 	bl	800bf54 <HAL_RCC_GetPCLK1Freq>
 800d324:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009a      	lsls	r2, r3, #2
 800d330:	441a      	add	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33c:	4a22      	ldr	r2, [pc, #136]	; (800d3c8 <UART_SetConfig+0x118>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	095b      	lsrs	r3, r3, #5
 800d344:	0119      	lsls	r1, r3, #4
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	4613      	mov	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	4413      	add	r3, r2
 800d34e:	009a      	lsls	r2, r3, #2
 800d350:	441a      	add	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	fbb2 f2f3 	udiv	r2, r2, r3
 800d35c:	4b1a      	ldr	r3, [pc, #104]	; (800d3c8 <UART_SetConfig+0x118>)
 800d35e:	fba3 0302 	umull	r0, r3, r3, r2
 800d362:	095b      	lsrs	r3, r3, #5
 800d364:	2064      	movs	r0, #100	; 0x64
 800d366:	fb00 f303 	mul.w	r3, r0, r3
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	011b      	lsls	r3, r3, #4
 800d36e:	3332      	adds	r3, #50	; 0x32
 800d370:	4a15      	ldr	r2, [pc, #84]	; (800d3c8 <UART_SetConfig+0x118>)
 800d372:	fba2 2303 	umull	r2, r3, r2, r3
 800d376:	095b      	lsrs	r3, r3, #5
 800d378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d37c:	4419      	add	r1, r3
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009a      	lsls	r2, r3, #2
 800d388:	441a      	add	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	fbb2 f2f3 	udiv	r2, r2, r3
 800d394:	4b0c      	ldr	r3, [pc, #48]	; (800d3c8 <UART_SetConfig+0x118>)
 800d396:	fba3 0302 	umull	r0, r3, r3, r2
 800d39a:	095b      	lsrs	r3, r3, #5
 800d39c:	2064      	movs	r0, #100	; 0x64
 800d39e:	fb00 f303 	mul.w	r3, r0, r3
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	011b      	lsls	r3, r3, #4
 800d3a6:	3332      	adds	r3, #50	; 0x32
 800d3a8:	4a07      	ldr	r2, [pc, #28]	; (800d3c8 <UART_SetConfig+0x118>)
 800d3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ae:	095b      	lsrs	r3, r3, #5
 800d3b0:	f003 020f 	and.w	r2, r3, #15
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	440a      	add	r2, r1
 800d3ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d3bc:	bf00      	nop
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	40013800 	.word	0x40013800
 800d3c8:	51eb851f 	.word	0x51eb851f

0800d3cc <__itoa>:
 800d3cc:	1e93      	subs	r3, r2, #2
 800d3ce:	2b22      	cmp	r3, #34	; 0x22
 800d3d0:	b510      	push	{r4, lr}
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	d904      	bls.n	800d3e0 <__itoa+0x14>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	461c      	mov	r4, r3
 800d3da:	700b      	strb	r3, [r1, #0]
 800d3dc:	4620      	mov	r0, r4
 800d3de:	bd10      	pop	{r4, pc}
 800d3e0:	2a0a      	cmp	r2, #10
 800d3e2:	d109      	bne.n	800d3f8 <__itoa+0x2c>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	da07      	bge.n	800d3f8 <__itoa+0x2c>
 800d3e8:	232d      	movs	r3, #45	; 0x2d
 800d3ea:	700b      	strb	r3, [r1, #0]
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	4240      	negs	r0, r0
 800d3f0:	4421      	add	r1, r4
 800d3f2:	f000 f8b9 	bl	800d568 <__utoa>
 800d3f6:	e7f1      	b.n	800d3dc <__itoa+0x10>
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	e7f9      	b.n	800d3f0 <__itoa+0x24>

0800d3fc <itoa>:
 800d3fc:	f7ff bfe6 	b.w	800d3cc <__itoa>

0800d400 <malloc>:
 800d400:	4b02      	ldr	r3, [pc, #8]	; (800d40c <malloc+0xc>)
 800d402:	4601      	mov	r1, r0
 800d404:	6818      	ldr	r0, [r3, #0]
 800d406:	f000 b823 	b.w	800d450 <_malloc_r>
 800d40a:	bf00      	nop
 800d40c:	20000a1c 	.word	0x20000a1c

0800d410 <sbrk_aligned>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	4e0e      	ldr	r6, [pc, #56]	; (800d44c <sbrk_aligned+0x3c>)
 800d414:	460c      	mov	r4, r1
 800d416:	6831      	ldr	r1, [r6, #0]
 800d418:	4605      	mov	r5, r0
 800d41a:	b911      	cbnz	r1, 800d422 <sbrk_aligned+0x12>
 800d41c:	f000 f954 	bl	800d6c8 <_sbrk_r>
 800d420:	6030      	str	r0, [r6, #0]
 800d422:	4621      	mov	r1, r4
 800d424:	4628      	mov	r0, r5
 800d426:	f000 f94f 	bl	800d6c8 <_sbrk_r>
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	d00a      	beq.n	800d444 <sbrk_aligned+0x34>
 800d42e:	1cc4      	adds	r4, r0, #3
 800d430:	f024 0403 	bic.w	r4, r4, #3
 800d434:	42a0      	cmp	r0, r4
 800d436:	d007      	beq.n	800d448 <sbrk_aligned+0x38>
 800d438:	1a21      	subs	r1, r4, r0
 800d43a:	4628      	mov	r0, r5
 800d43c:	f000 f944 	bl	800d6c8 <_sbrk_r>
 800d440:	3001      	adds	r0, #1
 800d442:	d101      	bne.n	800d448 <sbrk_aligned+0x38>
 800d444:	f04f 34ff 	mov.w	r4, #4294967295
 800d448:	4620      	mov	r0, r4
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	20000f4c 	.word	0x20000f4c

0800d450 <_malloc_r>:
 800d450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d454:	1ccd      	adds	r5, r1, #3
 800d456:	f025 0503 	bic.w	r5, r5, #3
 800d45a:	3508      	adds	r5, #8
 800d45c:	2d0c      	cmp	r5, #12
 800d45e:	bf38      	it	cc
 800d460:	250c      	movcc	r5, #12
 800d462:	2d00      	cmp	r5, #0
 800d464:	4607      	mov	r7, r0
 800d466:	db01      	blt.n	800d46c <_malloc_r+0x1c>
 800d468:	42a9      	cmp	r1, r5
 800d46a:	d905      	bls.n	800d478 <_malloc_r+0x28>
 800d46c:	230c      	movs	r3, #12
 800d46e:	2600      	movs	r6, #0
 800d470:	603b      	str	r3, [r7, #0]
 800d472:	4630      	mov	r0, r6
 800d474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d478:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d54c <_malloc_r+0xfc>
 800d47c:	f000 f868 	bl	800d550 <__malloc_lock>
 800d480:	f8d8 3000 	ldr.w	r3, [r8]
 800d484:	461c      	mov	r4, r3
 800d486:	bb5c      	cbnz	r4, 800d4e0 <_malloc_r+0x90>
 800d488:	4629      	mov	r1, r5
 800d48a:	4638      	mov	r0, r7
 800d48c:	f7ff ffc0 	bl	800d410 <sbrk_aligned>
 800d490:	1c43      	adds	r3, r0, #1
 800d492:	4604      	mov	r4, r0
 800d494:	d155      	bne.n	800d542 <_malloc_r+0xf2>
 800d496:	f8d8 4000 	ldr.w	r4, [r8]
 800d49a:	4626      	mov	r6, r4
 800d49c:	2e00      	cmp	r6, #0
 800d49e:	d145      	bne.n	800d52c <_malloc_r+0xdc>
 800d4a0:	2c00      	cmp	r4, #0
 800d4a2:	d048      	beq.n	800d536 <_malloc_r+0xe6>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4638      	mov	r0, r7
 800d4aa:	eb04 0903 	add.w	r9, r4, r3
 800d4ae:	f000 f90b 	bl	800d6c8 <_sbrk_r>
 800d4b2:	4581      	cmp	r9, r0
 800d4b4:	d13f      	bne.n	800d536 <_malloc_r+0xe6>
 800d4b6:	6821      	ldr	r1, [r4, #0]
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	1a6d      	subs	r5, r5, r1
 800d4bc:	4629      	mov	r1, r5
 800d4be:	f7ff ffa7 	bl	800d410 <sbrk_aligned>
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	d037      	beq.n	800d536 <_malloc_r+0xe6>
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	442b      	add	r3, r5
 800d4ca:	6023      	str	r3, [r4, #0]
 800d4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d038      	beq.n	800d546 <_malloc_r+0xf6>
 800d4d4:	685a      	ldr	r2, [r3, #4]
 800d4d6:	42a2      	cmp	r2, r4
 800d4d8:	d12b      	bne.n	800d532 <_malloc_r+0xe2>
 800d4da:	2200      	movs	r2, #0
 800d4dc:	605a      	str	r2, [r3, #4]
 800d4de:	e00f      	b.n	800d500 <_malloc_r+0xb0>
 800d4e0:	6822      	ldr	r2, [r4, #0]
 800d4e2:	1b52      	subs	r2, r2, r5
 800d4e4:	d41f      	bmi.n	800d526 <_malloc_r+0xd6>
 800d4e6:	2a0b      	cmp	r2, #11
 800d4e8:	d917      	bls.n	800d51a <_malloc_r+0xca>
 800d4ea:	1961      	adds	r1, r4, r5
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	6025      	str	r5, [r4, #0]
 800d4f0:	bf18      	it	ne
 800d4f2:	6059      	strne	r1, [r3, #4]
 800d4f4:	6863      	ldr	r3, [r4, #4]
 800d4f6:	bf08      	it	eq
 800d4f8:	f8c8 1000 	streq.w	r1, [r8]
 800d4fc:	5162      	str	r2, [r4, r5]
 800d4fe:	604b      	str	r3, [r1, #4]
 800d500:	4638      	mov	r0, r7
 800d502:	f104 060b 	add.w	r6, r4, #11
 800d506:	f000 f829 	bl	800d55c <__malloc_unlock>
 800d50a:	f026 0607 	bic.w	r6, r6, #7
 800d50e:	1d23      	adds	r3, r4, #4
 800d510:	1af2      	subs	r2, r6, r3
 800d512:	d0ae      	beq.n	800d472 <_malloc_r+0x22>
 800d514:	1b9b      	subs	r3, r3, r6
 800d516:	50a3      	str	r3, [r4, r2]
 800d518:	e7ab      	b.n	800d472 <_malloc_r+0x22>
 800d51a:	42a3      	cmp	r3, r4
 800d51c:	6862      	ldr	r2, [r4, #4]
 800d51e:	d1dd      	bne.n	800d4dc <_malloc_r+0x8c>
 800d520:	f8c8 2000 	str.w	r2, [r8]
 800d524:	e7ec      	b.n	800d500 <_malloc_r+0xb0>
 800d526:	4623      	mov	r3, r4
 800d528:	6864      	ldr	r4, [r4, #4]
 800d52a:	e7ac      	b.n	800d486 <_malloc_r+0x36>
 800d52c:	4634      	mov	r4, r6
 800d52e:	6876      	ldr	r6, [r6, #4]
 800d530:	e7b4      	b.n	800d49c <_malloc_r+0x4c>
 800d532:	4613      	mov	r3, r2
 800d534:	e7cc      	b.n	800d4d0 <_malloc_r+0x80>
 800d536:	230c      	movs	r3, #12
 800d538:	4638      	mov	r0, r7
 800d53a:	603b      	str	r3, [r7, #0]
 800d53c:	f000 f80e 	bl	800d55c <__malloc_unlock>
 800d540:	e797      	b.n	800d472 <_malloc_r+0x22>
 800d542:	6025      	str	r5, [r4, #0]
 800d544:	e7dc      	b.n	800d500 <_malloc_r+0xb0>
 800d546:	605b      	str	r3, [r3, #4]
 800d548:	deff      	udf	#255	; 0xff
 800d54a:	bf00      	nop
 800d54c:	20000f48 	.word	0x20000f48

0800d550 <__malloc_lock>:
 800d550:	4801      	ldr	r0, [pc, #4]	; (800d558 <__malloc_lock+0x8>)
 800d552:	f000 b8f3 	b.w	800d73c <__retarget_lock_acquire_recursive>
 800d556:	bf00      	nop
 800d558:	2000108c 	.word	0x2000108c

0800d55c <__malloc_unlock>:
 800d55c:	4801      	ldr	r0, [pc, #4]	; (800d564 <__malloc_unlock+0x8>)
 800d55e:	f000 b8ee 	b.w	800d73e <__retarget_lock_release_recursive>
 800d562:	bf00      	nop
 800d564:	2000108c 	.word	0x2000108c

0800d568 <__utoa>:
 800d568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56a:	b08b      	sub	sp, #44	; 0x2c
 800d56c:	4605      	mov	r5, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	466e      	mov	r6, sp
 800d572:	4c1d      	ldr	r4, [pc, #116]	; (800d5e8 <__utoa+0x80>)
 800d574:	f104 0c20 	add.w	ip, r4, #32
 800d578:	4637      	mov	r7, r6
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	6861      	ldr	r1, [r4, #4]
 800d57e:	3408      	adds	r4, #8
 800d580:	c703      	stmia	r7!, {r0, r1}
 800d582:	4564      	cmp	r4, ip
 800d584:	463e      	mov	r6, r7
 800d586:	d1f7      	bne.n	800d578 <__utoa+0x10>
 800d588:	7921      	ldrb	r1, [r4, #4]
 800d58a:	6820      	ldr	r0, [r4, #0]
 800d58c:	7139      	strb	r1, [r7, #4]
 800d58e:	1e91      	subs	r1, r2, #2
 800d590:	2922      	cmp	r1, #34	; 0x22
 800d592:	6038      	str	r0, [r7, #0]
 800d594:	f04f 0100 	mov.w	r1, #0
 800d598:	d904      	bls.n	800d5a4 <__utoa+0x3c>
 800d59a:	7019      	strb	r1, [r3, #0]
 800d59c:	460b      	mov	r3, r1
 800d59e:	4618      	mov	r0, r3
 800d5a0:	b00b      	add	sp, #44	; 0x2c
 800d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a4:	1e58      	subs	r0, r3, #1
 800d5a6:	4684      	mov	ip, r0
 800d5a8:	fbb5 f7f2 	udiv	r7, r5, r2
 800d5ac:	fb02 5617 	mls	r6, r2, r7, r5
 800d5b0:	3628      	adds	r6, #40	; 0x28
 800d5b2:	446e      	add	r6, sp
 800d5b4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d5be:	462e      	mov	r6, r5
 800d5c0:	42b2      	cmp	r2, r6
 800d5c2:	463d      	mov	r5, r7
 800d5c4:	f101 0101 	add.w	r1, r1, #1
 800d5c8:	d9ee      	bls.n	800d5a8 <__utoa+0x40>
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	545a      	strb	r2, [r3, r1]
 800d5ce:	1919      	adds	r1, r3, r4
 800d5d0:	1aa5      	subs	r5, r4, r2
 800d5d2:	42aa      	cmp	r2, r5
 800d5d4:	dae3      	bge.n	800d59e <__utoa+0x36>
 800d5d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d5da:	780e      	ldrb	r6, [r1, #0]
 800d5dc:	3201      	adds	r2, #1
 800d5de:	7006      	strb	r6, [r0, #0]
 800d5e0:	f801 5901 	strb.w	r5, [r1], #-1
 800d5e4:	e7f4      	b.n	800d5d0 <__utoa+0x68>
 800d5e6:	bf00      	nop
 800d5e8:	0800eda6 	.word	0x0800eda6

0800d5ec <siprintf>:
 800d5ec:	b40e      	push	{r1, r2, r3}
 800d5ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5f2:	b500      	push	{lr}
 800d5f4:	b09c      	sub	sp, #112	; 0x70
 800d5f6:	ab1d      	add	r3, sp, #116	; 0x74
 800d5f8:	9002      	str	r0, [sp, #8]
 800d5fa:	9006      	str	r0, [sp, #24]
 800d5fc:	9107      	str	r1, [sp, #28]
 800d5fe:	9104      	str	r1, [sp, #16]
 800d600:	4808      	ldr	r0, [pc, #32]	; (800d624 <siprintf+0x38>)
 800d602:	4909      	ldr	r1, [pc, #36]	; (800d628 <siprintf+0x3c>)
 800d604:	f853 2b04 	ldr.w	r2, [r3], #4
 800d608:	9105      	str	r1, [sp, #20]
 800d60a:	6800      	ldr	r0, [r0, #0]
 800d60c:	a902      	add	r1, sp, #8
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	f000 f940 	bl	800d894 <_svfiprintf_r>
 800d614:	2200      	movs	r2, #0
 800d616:	9b02      	ldr	r3, [sp, #8]
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	b01c      	add	sp, #112	; 0x70
 800d61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d620:	b003      	add	sp, #12
 800d622:	4770      	bx	lr
 800d624:	20000a1c 	.word	0x20000a1c
 800d628:	ffff0208 	.word	0xffff0208

0800d62c <memset>:
 800d62c:	4603      	mov	r3, r0
 800d62e:	4402      	add	r2, r0
 800d630:	4293      	cmp	r3, r2
 800d632:	d100      	bne.n	800d636 <memset+0xa>
 800d634:	4770      	bx	lr
 800d636:	f803 1b01 	strb.w	r1, [r3], #1
 800d63a:	e7f9      	b.n	800d630 <memset+0x4>

0800d63c <strcat>:
 800d63c:	4602      	mov	r2, r0
 800d63e:	b510      	push	{r4, lr}
 800d640:	7814      	ldrb	r4, [r2, #0]
 800d642:	4613      	mov	r3, r2
 800d644:	3201      	adds	r2, #1
 800d646:	2c00      	cmp	r4, #0
 800d648:	d1fa      	bne.n	800d640 <strcat+0x4>
 800d64a:	3b01      	subs	r3, #1
 800d64c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d650:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d654:	2a00      	cmp	r2, #0
 800d656:	d1f9      	bne.n	800d64c <strcat+0x10>
 800d658:	bd10      	pop	{r4, pc}

0800d65a <strchr>:
 800d65a:	4603      	mov	r3, r0
 800d65c:	b2c9      	uxtb	r1, r1
 800d65e:	4618      	mov	r0, r3
 800d660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d664:	b112      	cbz	r2, 800d66c <strchr+0x12>
 800d666:	428a      	cmp	r2, r1
 800d668:	d1f9      	bne.n	800d65e <strchr+0x4>
 800d66a:	4770      	bx	lr
 800d66c:	2900      	cmp	r1, #0
 800d66e:	bf18      	it	ne
 800d670:	2000      	movne	r0, #0
 800d672:	4770      	bx	lr

0800d674 <strncpy>:
 800d674:	4603      	mov	r3, r0
 800d676:	b510      	push	{r4, lr}
 800d678:	3901      	subs	r1, #1
 800d67a:	b132      	cbz	r2, 800d68a <strncpy+0x16>
 800d67c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d680:	3a01      	subs	r2, #1
 800d682:	f803 4b01 	strb.w	r4, [r3], #1
 800d686:	2c00      	cmp	r4, #0
 800d688:	d1f7      	bne.n	800d67a <strncpy+0x6>
 800d68a:	2100      	movs	r1, #0
 800d68c:	441a      	add	r2, r3
 800d68e:	4293      	cmp	r3, r2
 800d690:	d100      	bne.n	800d694 <strncpy+0x20>
 800d692:	bd10      	pop	{r4, pc}
 800d694:	f803 1b01 	strb.w	r1, [r3], #1
 800d698:	e7f9      	b.n	800d68e <strncpy+0x1a>

0800d69a <strstr>:
 800d69a:	780a      	ldrb	r2, [r1, #0]
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	b96a      	cbnz	r2, 800d6bc <strstr+0x22>
 800d6a0:	bd70      	pop	{r4, r5, r6, pc}
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d109      	bne.n	800d6ba <strstr+0x20>
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0f6      	beq.n	800d6a0 <strstr+0x6>
 800d6b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d6b6:	429e      	cmp	r6, r3
 800d6b8:	d0f7      	beq.n	800d6aa <strstr+0x10>
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	7803      	ldrb	r3, [r0, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1ef      	bne.n	800d6a2 <strstr+0x8>
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	e7ec      	b.n	800d6a0 <strstr+0x6>
	...

0800d6c8 <_sbrk_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4d05      	ldr	r5, [pc, #20]	; (800d6e4 <_sbrk_r+0x1c>)
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	602b      	str	r3, [r5, #0]
 800d6d4:	f7fb ff76 	bl	80095c4 <_sbrk>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d102      	bne.n	800d6e2 <_sbrk_r+0x1a>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b103      	cbz	r3, 800d6e2 <_sbrk_r+0x1a>
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	20001088 	.word	0x20001088

0800d6e8 <__errno>:
 800d6e8:	4b01      	ldr	r3, [pc, #4]	; (800d6f0 <__errno+0x8>)
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	20000a1c 	.word	0x20000a1c

0800d6f4 <__libc_init_array>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	2600      	movs	r6, #0
 800d6f8:	4d0c      	ldr	r5, [pc, #48]	; (800d72c <__libc_init_array+0x38>)
 800d6fa:	4c0d      	ldr	r4, [pc, #52]	; (800d730 <__libc_init_array+0x3c>)
 800d6fc:	1b64      	subs	r4, r4, r5
 800d6fe:	10a4      	asrs	r4, r4, #2
 800d700:	42a6      	cmp	r6, r4
 800d702:	d109      	bne.n	800d718 <__libc_init_array+0x24>
 800d704:	f000 fbc6 	bl	800de94 <_init>
 800d708:	2600      	movs	r6, #0
 800d70a:	4d0a      	ldr	r5, [pc, #40]	; (800d734 <__libc_init_array+0x40>)
 800d70c:	4c0a      	ldr	r4, [pc, #40]	; (800d738 <__libc_init_array+0x44>)
 800d70e:	1b64      	subs	r4, r4, r5
 800d710:	10a4      	asrs	r4, r4, #2
 800d712:	42a6      	cmp	r6, r4
 800d714:	d105      	bne.n	800d722 <__libc_init_array+0x2e>
 800d716:	bd70      	pop	{r4, r5, r6, pc}
 800d718:	f855 3b04 	ldr.w	r3, [r5], #4
 800d71c:	4798      	blx	r3
 800d71e:	3601      	adds	r6, #1
 800d720:	e7ee      	b.n	800d700 <__libc_init_array+0xc>
 800d722:	f855 3b04 	ldr.w	r3, [r5], #4
 800d726:	4798      	blx	r3
 800d728:	3601      	adds	r6, #1
 800d72a:	e7f2      	b.n	800d712 <__libc_init_array+0x1e>
 800d72c:	0800ee00 	.word	0x0800ee00
 800d730:	0800ee00 	.word	0x0800ee00
 800d734:	0800ee00 	.word	0x0800ee00
 800d738:	0800ee04 	.word	0x0800ee04

0800d73c <__retarget_lock_acquire_recursive>:
 800d73c:	4770      	bx	lr

0800d73e <__retarget_lock_release_recursive>:
 800d73e:	4770      	bx	lr

0800d740 <strcpy>:
 800d740:	4603      	mov	r3, r0
 800d742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d746:	f803 2b01 	strb.w	r2, [r3], #1
 800d74a:	2a00      	cmp	r2, #0
 800d74c:	d1f9      	bne.n	800d742 <strcpy+0x2>
 800d74e:	4770      	bx	lr

0800d750 <_free_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4605      	mov	r5, r0
 800d754:	2900      	cmp	r1, #0
 800d756:	d040      	beq.n	800d7da <_free_r+0x8a>
 800d758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d75c:	1f0c      	subs	r4, r1, #4
 800d75e:	2b00      	cmp	r3, #0
 800d760:	bfb8      	it	lt
 800d762:	18e4      	addlt	r4, r4, r3
 800d764:	f7ff fef4 	bl	800d550 <__malloc_lock>
 800d768:	4a1c      	ldr	r2, [pc, #112]	; (800d7dc <_free_r+0x8c>)
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	b933      	cbnz	r3, 800d77c <_free_r+0x2c>
 800d76e:	6063      	str	r3, [r4, #4]
 800d770:	6014      	str	r4, [r2, #0]
 800d772:	4628      	mov	r0, r5
 800d774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d778:	f7ff bef0 	b.w	800d55c <__malloc_unlock>
 800d77c:	42a3      	cmp	r3, r4
 800d77e:	d908      	bls.n	800d792 <_free_r+0x42>
 800d780:	6820      	ldr	r0, [r4, #0]
 800d782:	1821      	adds	r1, r4, r0
 800d784:	428b      	cmp	r3, r1
 800d786:	bf01      	itttt	eq
 800d788:	6819      	ldreq	r1, [r3, #0]
 800d78a:	685b      	ldreq	r3, [r3, #4]
 800d78c:	1809      	addeq	r1, r1, r0
 800d78e:	6021      	streq	r1, [r4, #0]
 800d790:	e7ed      	b.n	800d76e <_free_r+0x1e>
 800d792:	461a      	mov	r2, r3
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	b10b      	cbz	r3, 800d79c <_free_r+0x4c>
 800d798:	42a3      	cmp	r3, r4
 800d79a:	d9fa      	bls.n	800d792 <_free_r+0x42>
 800d79c:	6811      	ldr	r1, [r2, #0]
 800d79e:	1850      	adds	r0, r2, r1
 800d7a0:	42a0      	cmp	r0, r4
 800d7a2:	d10b      	bne.n	800d7bc <_free_r+0x6c>
 800d7a4:	6820      	ldr	r0, [r4, #0]
 800d7a6:	4401      	add	r1, r0
 800d7a8:	1850      	adds	r0, r2, r1
 800d7aa:	4283      	cmp	r3, r0
 800d7ac:	6011      	str	r1, [r2, #0]
 800d7ae:	d1e0      	bne.n	800d772 <_free_r+0x22>
 800d7b0:	6818      	ldr	r0, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	4408      	add	r0, r1
 800d7b6:	6010      	str	r0, [r2, #0]
 800d7b8:	6053      	str	r3, [r2, #4]
 800d7ba:	e7da      	b.n	800d772 <_free_r+0x22>
 800d7bc:	d902      	bls.n	800d7c4 <_free_r+0x74>
 800d7be:	230c      	movs	r3, #12
 800d7c0:	602b      	str	r3, [r5, #0]
 800d7c2:	e7d6      	b.n	800d772 <_free_r+0x22>
 800d7c4:	6820      	ldr	r0, [r4, #0]
 800d7c6:	1821      	adds	r1, r4, r0
 800d7c8:	428b      	cmp	r3, r1
 800d7ca:	bf01      	itttt	eq
 800d7cc:	6819      	ldreq	r1, [r3, #0]
 800d7ce:	685b      	ldreq	r3, [r3, #4]
 800d7d0:	1809      	addeq	r1, r1, r0
 800d7d2:	6021      	streq	r1, [r4, #0]
 800d7d4:	6063      	str	r3, [r4, #4]
 800d7d6:	6054      	str	r4, [r2, #4]
 800d7d8:	e7cb      	b.n	800d772 <_free_r+0x22>
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	20000f48 	.word	0x20000f48

0800d7e0 <__ssputs_r>:
 800d7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e4:	461f      	mov	r7, r3
 800d7e6:	688e      	ldr	r6, [r1, #8]
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	42be      	cmp	r6, r7
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	4690      	mov	r8, r2
 800d7f0:	680b      	ldr	r3, [r1, #0]
 800d7f2:	d82c      	bhi.n	800d84e <__ssputs_r+0x6e>
 800d7f4:	898a      	ldrh	r2, [r1, #12]
 800d7f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7fa:	d026      	beq.n	800d84a <__ssputs_r+0x6a>
 800d7fc:	6965      	ldr	r5, [r4, #20]
 800d7fe:	6909      	ldr	r1, [r1, #16]
 800d800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d804:	eba3 0901 	sub.w	r9, r3, r1
 800d808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d80c:	1c7b      	adds	r3, r7, #1
 800d80e:	444b      	add	r3, r9
 800d810:	106d      	asrs	r5, r5, #1
 800d812:	429d      	cmp	r5, r3
 800d814:	bf38      	it	cc
 800d816:	461d      	movcc	r5, r3
 800d818:	0553      	lsls	r3, r2, #21
 800d81a:	d527      	bpl.n	800d86c <__ssputs_r+0x8c>
 800d81c:	4629      	mov	r1, r5
 800d81e:	f7ff fe17 	bl	800d450 <_malloc_r>
 800d822:	4606      	mov	r6, r0
 800d824:	b360      	cbz	r0, 800d880 <__ssputs_r+0xa0>
 800d826:	464a      	mov	r2, r9
 800d828:	6921      	ldr	r1, [r4, #16]
 800d82a:	f000 faed 	bl	800de08 <memcpy>
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d838:	81a3      	strh	r3, [r4, #12]
 800d83a:	6126      	str	r6, [r4, #16]
 800d83c:	444e      	add	r6, r9
 800d83e:	6026      	str	r6, [r4, #0]
 800d840:	463e      	mov	r6, r7
 800d842:	6165      	str	r5, [r4, #20]
 800d844:	eba5 0509 	sub.w	r5, r5, r9
 800d848:	60a5      	str	r5, [r4, #8]
 800d84a:	42be      	cmp	r6, r7
 800d84c:	d900      	bls.n	800d850 <__ssputs_r+0x70>
 800d84e:	463e      	mov	r6, r7
 800d850:	4632      	mov	r2, r6
 800d852:	4641      	mov	r1, r8
 800d854:	6820      	ldr	r0, [r4, #0]
 800d856:	f000 faaf 	bl	800ddb8 <memmove>
 800d85a:	2000      	movs	r0, #0
 800d85c:	68a3      	ldr	r3, [r4, #8]
 800d85e:	1b9b      	subs	r3, r3, r6
 800d860:	60a3      	str	r3, [r4, #8]
 800d862:	6823      	ldr	r3, [r4, #0]
 800d864:	4433      	add	r3, r6
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86c:	462a      	mov	r2, r5
 800d86e:	f000 fad9 	bl	800de24 <_realloc_r>
 800d872:	4606      	mov	r6, r0
 800d874:	2800      	cmp	r0, #0
 800d876:	d1e0      	bne.n	800d83a <__ssputs_r+0x5a>
 800d878:	4650      	mov	r0, sl
 800d87a:	6921      	ldr	r1, [r4, #16]
 800d87c:	f7ff ff68 	bl	800d750 <_free_r>
 800d880:	230c      	movs	r3, #12
 800d882:	f8ca 3000 	str.w	r3, [sl]
 800d886:	89a3      	ldrh	r3, [r4, #12]
 800d888:	f04f 30ff 	mov.w	r0, #4294967295
 800d88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d890:	81a3      	strh	r3, [r4, #12]
 800d892:	e7e9      	b.n	800d868 <__ssputs_r+0x88>

0800d894 <_svfiprintf_r>:
 800d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	4698      	mov	r8, r3
 800d89a:	898b      	ldrh	r3, [r1, #12]
 800d89c:	4607      	mov	r7, r0
 800d89e:	061b      	lsls	r3, r3, #24
 800d8a0:	460d      	mov	r5, r1
 800d8a2:	4614      	mov	r4, r2
 800d8a4:	b09d      	sub	sp, #116	; 0x74
 800d8a6:	d50e      	bpl.n	800d8c6 <_svfiprintf_r+0x32>
 800d8a8:	690b      	ldr	r3, [r1, #16]
 800d8aa:	b963      	cbnz	r3, 800d8c6 <_svfiprintf_r+0x32>
 800d8ac:	2140      	movs	r1, #64	; 0x40
 800d8ae:	f7ff fdcf 	bl	800d450 <_malloc_r>
 800d8b2:	6028      	str	r0, [r5, #0]
 800d8b4:	6128      	str	r0, [r5, #16]
 800d8b6:	b920      	cbnz	r0, 800d8c2 <_svfiprintf_r+0x2e>
 800d8b8:	230c      	movs	r3, #12
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	e0d0      	b.n	800da64 <_svfiprintf_r+0x1d0>
 800d8c2:	2340      	movs	r3, #64	; 0x40
 800d8c4:	616b      	str	r3, [r5, #20]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	2320      	movs	r3, #32
 800d8cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8d0:	2330      	movs	r3, #48	; 0x30
 800d8d2:	f04f 0901 	mov.w	r9, #1
 800d8d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800da7c <_svfiprintf_r+0x1e8>
 800d8de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8e2:	4623      	mov	r3, r4
 800d8e4:	469a      	mov	sl, r3
 800d8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ea:	b10a      	cbz	r2, 800d8f0 <_svfiprintf_r+0x5c>
 800d8ec:	2a25      	cmp	r2, #37	; 0x25
 800d8ee:	d1f9      	bne.n	800d8e4 <_svfiprintf_r+0x50>
 800d8f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d8f4:	d00b      	beq.n	800d90e <_svfiprintf_r+0x7a>
 800d8f6:	465b      	mov	r3, fp
 800d8f8:	4622      	mov	r2, r4
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f7ff ff6f 	bl	800d7e0 <__ssputs_r>
 800d902:	3001      	adds	r0, #1
 800d904:	f000 80a9 	beq.w	800da5a <_svfiprintf_r+0x1c6>
 800d908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d90a:	445a      	add	r2, fp
 800d90c:	9209      	str	r2, [sp, #36]	; 0x24
 800d90e:	f89a 3000 	ldrb.w	r3, [sl]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 80a1 	beq.w	800da5a <_svfiprintf_r+0x1c6>
 800d918:	2300      	movs	r3, #0
 800d91a:	f04f 32ff 	mov.w	r2, #4294967295
 800d91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d922:	f10a 0a01 	add.w	sl, sl, #1
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	9307      	str	r3, [sp, #28]
 800d92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d92e:	931a      	str	r3, [sp, #104]	; 0x68
 800d930:	4654      	mov	r4, sl
 800d932:	2205      	movs	r2, #5
 800d934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d938:	4850      	ldr	r0, [pc, #320]	; (800da7c <_svfiprintf_r+0x1e8>)
 800d93a:	f000 fa57 	bl	800ddec <memchr>
 800d93e:	9a04      	ldr	r2, [sp, #16]
 800d940:	b9d8      	cbnz	r0, 800d97a <_svfiprintf_r+0xe6>
 800d942:	06d0      	lsls	r0, r2, #27
 800d944:	bf44      	itt	mi
 800d946:	2320      	movmi	r3, #32
 800d948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d94c:	0711      	lsls	r1, r2, #28
 800d94e:	bf44      	itt	mi
 800d950:	232b      	movmi	r3, #43	; 0x2b
 800d952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d956:	f89a 3000 	ldrb.w	r3, [sl]
 800d95a:	2b2a      	cmp	r3, #42	; 0x2a
 800d95c:	d015      	beq.n	800d98a <_svfiprintf_r+0xf6>
 800d95e:	4654      	mov	r4, sl
 800d960:	2000      	movs	r0, #0
 800d962:	f04f 0c0a 	mov.w	ip, #10
 800d966:	9a07      	ldr	r2, [sp, #28]
 800d968:	4621      	mov	r1, r4
 800d96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d96e:	3b30      	subs	r3, #48	; 0x30
 800d970:	2b09      	cmp	r3, #9
 800d972:	d94d      	bls.n	800da10 <_svfiprintf_r+0x17c>
 800d974:	b1b0      	cbz	r0, 800d9a4 <_svfiprintf_r+0x110>
 800d976:	9207      	str	r2, [sp, #28]
 800d978:	e014      	b.n	800d9a4 <_svfiprintf_r+0x110>
 800d97a:	eba0 0308 	sub.w	r3, r0, r8
 800d97e:	fa09 f303 	lsl.w	r3, r9, r3
 800d982:	4313      	orrs	r3, r2
 800d984:	46a2      	mov	sl, r4
 800d986:	9304      	str	r3, [sp, #16]
 800d988:	e7d2      	b.n	800d930 <_svfiprintf_r+0x9c>
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	1d19      	adds	r1, r3, #4
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	9103      	str	r1, [sp, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	bfbb      	ittet	lt
 800d996:	425b      	neglt	r3, r3
 800d998:	f042 0202 	orrlt.w	r2, r2, #2
 800d99c:	9307      	strge	r3, [sp, #28]
 800d99e:	9307      	strlt	r3, [sp, #28]
 800d9a0:	bfb8      	it	lt
 800d9a2:	9204      	strlt	r2, [sp, #16]
 800d9a4:	7823      	ldrb	r3, [r4, #0]
 800d9a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d9a8:	d10c      	bne.n	800d9c4 <_svfiprintf_r+0x130>
 800d9aa:	7863      	ldrb	r3, [r4, #1]
 800d9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ae:	d134      	bne.n	800da1a <_svfiprintf_r+0x186>
 800d9b0:	9b03      	ldr	r3, [sp, #12]
 800d9b2:	3402      	adds	r4, #2
 800d9b4:	1d1a      	adds	r2, r3, #4
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	9203      	str	r2, [sp, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	bfb8      	it	lt
 800d9be:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9c2:	9305      	str	r3, [sp, #20]
 800d9c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800da80 <_svfiprintf_r+0x1ec>
 800d9c8:	2203      	movs	r2, #3
 800d9ca:	4650      	mov	r0, sl
 800d9cc:	7821      	ldrb	r1, [r4, #0]
 800d9ce:	f000 fa0d 	bl	800ddec <memchr>
 800d9d2:	b138      	cbz	r0, 800d9e4 <_svfiprintf_r+0x150>
 800d9d4:	2240      	movs	r2, #64	; 0x40
 800d9d6:	9b04      	ldr	r3, [sp, #16]
 800d9d8:	eba0 000a 	sub.w	r0, r0, sl
 800d9dc:	4082      	lsls	r2, r0
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	3401      	adds	r4, #1
 800d9e2:	9304      	str	r3, [sp, #16]
 800d9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e8:	2206      	movs	r2, #6
 800d9ea:	4826      	ldr	r0, [pc, #152]	; (800da84 <_svfiprintf_r+0x1f0>)
 800d9ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9f0:	f000 f9fc 	bl	800ddec <memchr>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d038      	beq.n	800da6a <_svfiprintf_r+0x1d6>
 800d9f8:	4b23      	ldr	r3, [pc, #140]	; (800da88 <_svfiprintf_r+0x1f4>)
 800d9fa:	bb1b      	cbnz	r3, 800da44 <_svfiprintf_r+0x1b0>
 800d9fc:	9b03      	ldr	r3, [sp, #12]
 800d9fe:	3307      	adds	r3, #7
 800da00:	f023 0307 	bic.w	r3, r3, #7
 800da04:	3308      	adds	r3, #8
 800da06:	9303      	str	r3, [sp, #12]
 800da08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0a:	4433      	add	r3, r6
 800da0c:	9309      	str	r3, [sp, #36]	; 0x24
 800da0e:	e768      	b.n	800d8e2 <_svfiprintf_r+0x4e>
 800da10:	460c      	mov	r4, r1
 800da12:	2001      	movs	r0, #1
 800da14:	fb0c 3202 	mla	r2, ip, r2, r3
 800da18:	e7a6      	b.n	800d968 <_svfiprintf_r+0xd4>
 800da1a:	2300      	movs	r3, #0
 800da1c:	f04f 0c0a 	mov.w	ip, #10
 800da20:	4619      	mov	r1, r3
 800da22:	3401      	adds	r4, #1
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	4620      	mov	r0, r4
 800da28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da2c:	3a30      	subs	r2, #48	; 0x30
 800da2e:	2a09      	cmp	r2, #9
 800da30:	d903      	bls.n	800da3a <_svfiprintf_r+0x1a6>
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0c6      	beq.n	800d9c4 <_svfiprintf_r+0x130>
 800da36:	9105      	str	r1, [sp, #20]
 800da38:	e7c4      	b.n	800d9c4 <_svfiprintf_r+0x130>
 800da3a:	4604      	mov	r4, r0
 800da3c:	2301      	movs	r3, #1
 800da3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800da42:	e7f0      	b.n	800da26 <_svfiprintf_r+0x192>
 800da44:	ab03      	add	r3, sp, #12
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	462a      	mov	r2, r5
 800da4a:	4638      	mov	r0, r7
 800da4c:	4b0f      	ldr	r3, [pc, #60]	; (800da8c <_svfiprintf_r+0x1f8>)
 800da4e:	a904      	add	r1, sp, #16
 800da50:	f3af 8000 	nop.w
 800da54:	1c42      	adds	r2, r0, #1
 800da56:	4606      	mov	r6, r0
 800da58:	d1d6      	bne.n	800da08 <_svfiprintf_r+0x174>
 800da5a:	89ab      	ldrh	r3, [r5, #12]
 800da5c:	065b      	lsls	r3, r3, #25
 800da5e:	f53f af2d 	bmi.w	800d8bc <_svfiprintf_r+0x28>
 800da62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da64:	b01d      	add	sp, #116	; 0x74
 800da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6a:	ab03      	add	r3, sp, #12
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	462a      	mov	r2, r5
 800da70:	4638      	mov	r0, r7
 800da72:	4b06      	ldr	r3, [pc, #24]	; (800da8c <_svfiprintf_r+0x1f8>)
 800da74:	a904      	add	r1, sp, #16
 800da76:	f000 f87d 	bl	800db74 <_printf_i>
 800da7a:	e7eb      	b.n	800da54 <_svfiprintf_r+0x1c0>
 800da7c:	0800edcb 	.word	0x0800edcb
 800da80:	0800edd1 	.word	0x0800edd1
 800da84:	0800edd5 	.word	0x0800edd5
 800da88:	00000000 	.word	0x00000000
 800da8c:	0800d7e1 	.word	0x0800d7e1

0800da90 <_printf_common>:
 800da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da94:	4616      	mov	r6, r2
 800da96:	4699      	mov	r9, r3
 800da98:	688a      	ldr	r2, [r1, #8]
 800da9a:	690b      	ldr	r3, [r1, #16]
 800da9c:	4607      	mov	r7, r0
 800da9e:	4293      	cmp	r3, r2
 800daa0:	bfb8      	it	lt
 800daa2:	4613      	movlt	r3, r2
 800daa4:	6033      	str	r3, [r6, #0]
 800daa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800daaa:	460c      	mov	r4, r1
 800daac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dab0:	b10a      	cbz	r2, 800dab6 <_printf_common+0x26>
 800dab2:	3301      	adds	r3, #1
 800dab4:	6033      	str	r3, [r6, #0]
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	0699      	lsls	r1, r3, #26
 800daba:	bf42      	ittt	mi
 800dabc:	6833      	ldrmi	r3, [r6, #0]
 800dabe:	3302      	addmi	r3, #2
 800dac0:	6033      	strmi	r3, [r6, #0]
 800dac2:	6825      	ldr	r5, [r4, #0]
 800dac4:	f015 0506 	ands.w	r5, r5, #6
 800dac8:	d106      	bne.n	800dad8 <_printf_common+0x48>
 800daca:	f104 0a19 	add.w	sl, r4, #25
 800dace:	68e3      	ldr	r3, [r4, #12]
 800dad0:	6832      	ldr	r2, [r6, #0]
 800dad2:	1a9b      	subs	r3, r3, r2
 800dad4:	42ab      	cmp	r3, r5
 800dad6:	dc2b      	bgt.n	800db30 <_printf_common+0xa0>
 800dad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dadc:	1e13      	subs	r3, r2, #0
 800dade:	6822      	ldr	r2, [r4, #0]
 800dae0:	bf18      	it	ne
 800dae2:	2301      	movne	r3, #1
 800dae4:	0692      	lsls	r2, r2, #26
 800dae6:	d430      	bmi.n	800db4a <_printf_common+0xba>
 800dae8:	4649      	mov	r1, r9
 800daea:	4638      	mov	r0, r7
 800daec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daf0:	47c0      	blx	r8
 800daf2:	3001      	adds	r0, #1
 800daf4:	d023      	beq.n	800db3e <_printf_common+0xae>
 800daf6:	6823      	ldr	r3, [r4, #0]
 800daf8:	6922      	ldr	r2, [r4, #16]
 800dafa:	f003 0306 	and.w	r3, r3, #6
 800dafe:	2b04      	cmp	r3, #4
 800db00:	bf14      	ite	ne
 800db02:	2500      	movne	r5, #0
 800db04:	6833      	ldreq	r3, [r6, #0]
 800db06:	f04f 0600 	mov.w	r6, #0
 800db0a:	bf08      	it	eq
 800db0c:	68e5      	ldreq	r5, [r4, #12]
 800db0e:	f104 041a 	add.w	r4, r4, #26
 800db12:	bf08      	it	eq
 800db14:	1aed      	subeq	r5, r5, r3
 800db16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db1a:	bf08      	it	eq
 800db1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db20:	4293      	cmp	r3, r2
 800db22:	bfc4      	itt	gt
 800db24:	1a9b      	subgt	r3, r3, r2
 800db26:	18ed      	addgt	r5, r5, r3
 800db28:	42b5      	cmp	r5, r6
 800db2a:	d11a      	bne.n	800db62 <_printf_common+0xd2>
 800db2c:	2000      	movs	r0, #0
 800db2e:	e008      	b.n	800db42 <_printf_common+0xb2>
 800db30:	2301      	movs	r3, #1
 800db32:	4652      	mov	r2, sl
 800db34:	4649      	mov	r1, r9
 800db36:	4638      	mov	r0, r7
 800db38:	47c0      	blx	r8
 800db3a:	3001      	adds	r0, #1
 800db3c:	d103      	bne.n	800db46 <_printf_common+0xb6>
 800db3e:	f04f 30ff 	mov.w	r0, #4294967295
 800db42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db46:	3501      	adds	r5, #1
 800db48:	e7c1      	b.n	800dace <_printf_common+0x3e>
 800db4a:	2030      	movs	r0, #48	; 0x30
 800db4c:	18e1      	adds	r1, r4, r3
 800db4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db58:	4422      	add	r2, r4
 800db5a:	3302      	adds	r3, #2
 800db5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db60:	e7c2      	b.n	800dae8 <_printf_common+0x58>
 800db62:	2301      	movs	r3, #1
 800db64:	4622      	mov	r2, r4
 800db66:	4649      	mov	r1, r9
 800db68:	4638      	mov	r0, r7
 800db6a:	47c0      	blx	r8
 800db6c:	3001      	adds	r0, #1
 800db6e:	d0e6      	beq.n	800db3e <_printf_common+0xae>
 800db70:	3601      	adds	r6, #1
 800db72:	e7d9      	b.n	800db28 <_printf_common+0x98>

0800db74 <_printf_i>:
 800db74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db78:	7e0f      	ldrb	r7, [r1, #24]
 800db7a:	4691      	mov	r9, r2
 800db7c:	2f78      	cmp	r7, #120	; 0x78
 800db7e:	4680      	mov	r8, r0
 800db80:	460c      	mov	r4, r1
 800db82:	469a      	mov	sl, r3
 800db84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db8a:	d807      	bhi.n	800db9c <_printf_i+0x28>
 800db8c:	2f62      	cmp	r7, #98	; 0x62
 800db8e:	d80a      	bhi.n	800dba6 <_printf_i+0x32>
 800db90:	2f00      	cmp	r7, #0
 800db92:	f000 80d5 	beq.w	800dd40 <_printf_i+0x1cc>
 800db96:	2f58      	cmp	r7, #88	; 0x58
 800db98:	f000 80c1 	beq.w	800dd1e <_printf_i+0x1aa>
 800db9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dba4:	e03a      	b.n	800dc1c <_printf_i+0xa8>
 800dba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dbaa:	2b15      	cmp	r3, #21
 800dbac:	d8f6      	bhi.n	800db9c <_printf_i+0x28>
 800dbae:	a101      	add	r1, pc, #4	; (adr r1, 800dbb4 <_printf_i+0x40>)
 800dbb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbb4:	0800dc0d 	.word	0x0800dc0d
 800dbb8:	0800dc21 	.word	0x0800dc21
 800dbbc:	0800db9d 	.word	0x0800db9d
 800dbc0:	0800db9d 	.word	0x0800db9d
 800dbc4:	0800db9d 	.word	0x0800db9d
 800dbc8:	0800db9d 	.word	0x0800db9d
 800dbcc:	0800dc21 	.word	0x0800dc21
 800dbd0:	0800db9d 	.word	0x0800db9d
 800dbd4:	0800db9d 	.word	0x0800db9d
 800dbd8:	0800db9d 	.word	0x0800db9d
 800dbdc:	0800db9d 	.word	0x0800db9d
 800dbe0:	0800dd27 	.word	0x0800dd27
 800dbe4:	0800dc4d 	.word	0x0800dc4d
 800dbe8:	0800dce1 	.word	0x0800dce1
 800dbec:	0800db9d 	.word	0x0800db9d
 800dbf0:	0800db9d 	.word	0x0800db9d
 800dbf4:	0800dd49 	.word	0x0800dd49
 800dbf8:	0800db9d 	.word	0x0800db9d
 800dbfc:	0800dc4d 	.word	0x0800dc4d
 800dc00:	0800db9d 	.word	0x0800db9d
 800dc04:	0800db9d 	.word	0x0800db9d
 800dc08:	0800dce9 	.word	0x0800dce9
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	1d1a      	adds	r2, r3, #4
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	602a      	str	r2, [r5, #0]
 800dc14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	e0a0      	b.n	800dd62 <_printf_i+0x1ee>
 800dc20:	6820      	ldr	r0, [r4, #0]
 800dc22:	682b      	ldr	r3, [r5, #0]
 800dc24:	0607      	lsls	r7, r0, #24
 800dc26:	f103 0104 	add.w	r1, r3, #4
 800dc2a:	6029      	str	r1, [r5, #0]
 800dc2c:	d501      	bpl.n	800dc32 <_printf_i+0xbe>
 800dc2e:	681e      	ldr	r6, [r3, #0]
 800dc30:	e003      	b.n	800dc3a <_printf_i+0xc6>
 800dc32:	0646      	lsls	r6, r0, #25
 800dc34:	d5fb      	bpl.n	800dc2e <_printf_i+0xba>
 800dc36:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dc3a:	2e00      	cmp	r6, #0
 800dc3c:	da03      	bge.n	800dc46 <_printf_i+0xd2>
 800dc3e:	232d      	movs	r3, #45	; 0x2d
 800dc40:	4276      	negs	r6, r6
 800dc42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc46:	230a      	movs	r3, #10
 800dc48:	4859      	ldr	r0, [pc, #356]	; (800ddb0 <_printf_i+0x23c>)
 800dc4a:	e012      	b.n	800dc72 <_printf_i+0xfe>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	6820      	ldr	r0, [r4, #0]
 800dc50:	1d19      	adds	r1, r3, #4
 800dc52:	6029      	str	r1, [r5, #0]
 800dc54:	0605      	lsls	r5, r0, #24
 800dc56:	d501      	bpl.n	800dc5c <_printf_i+0xe8>
 800dc58:	681e      	ldr	r6, [r3, #0]
 800dc5a:	e002      	b.n	800dc62 <_printf_i+0xee>
 800dc5c:	0641      	lsls	r1, r0, #25
 800dc5e:	d5fb      	bpl.n	800dc58 <_printf_i+0xe4>
 800dc60:	881e      	ldrh	r6, [r3, #0]
 800dc62:	2f6f      	cmp	r7, #111	; 0x6f
 800dc64:	bf0c      	ite	eq
 800dc66:	2308      	moveq	r3, #8
 800dc68:	230a      	movne	r3, #10
 800dc6a:	4851      	ldr	r0, [pc, #324]	; (800ddb0 <_printf_i+0x23c>)
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc72:	6865      	ldr	r5, [r4, #4]
 800dc74:	2d00      	cmp	r5, #0
 800dc76:	bfa8      	it	ge
 800dc78:	6821      	ldrge	r1, [r4, #0]
 800dc7a:	60a5      	str	r5, [r4, #8]
 800dc7c:	bfa4      	itt	ge
 800dc7e:	f021 0104 	bicge.w	r1, r1, #4
 800dc82:	6021      	strge	r1, [r4, #0]
 800dc84:	b90e      	cbnz	r6, 800dc8a <_printf_i+0x116>
 800dc86:	2d00      	cmp	r5, #0
 800dc88:	d04b      	beq.n	800dd22 <_printf_i+0x1ae>
 800dc8a:	4615      	mov	r5, r2
 800dc8c:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc90:	fb03 6711 	mls	r7, r3, r1, r6
 800dc94:	5dc7      	ldrb	r7, [r0, r7]
 800dc96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc9a:	4637      	mov	r7, r6
 800dc9c:	42bb      	cmp	r3, r7
 800dc9e:	460e      	mov	r6, r1
 800dca0:	d9f4      	bls.n	800dc8c <_printf_i+0x118>
 800dca2:	2b08      	cmp	r3, #8
 800dca4:	d10b      	bne.n	800dcbe <_printf_i+0x14a>
 800dca6:	6823      	ldr	r3, [r4, #0]
 800dca8:	07de      	lsls	r6, r3, #31
 800dcaa:	d508      	bpl.n	800dcbe <_printf_i+0x14a>
 800dcac:	6923      	ldr	r3, [r4, #16]
 800dcae:	6861      	ldr	r1, [r4, #4]
 800dcb0:	4299      	cmp	r1, r3
 800dcb2:	bfde      	ittt	le
 800dcb4:	2330      	movle	r3, #48	; 0x30
 800dcb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dcba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dcbe:	1b52      	subs	r2, r2, r5
 800dcc0:	6122      	str	r2, [r4, #16]
 800dcc2:	464b      	mov	r3, r9
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	f8cd a000 	str.w	sl, [sp]
 800dccc:	aa03      	add	r2, sp, #12
 800dcce:	f7ff fedf 	bl	800da90 <_printf_common>
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	d14a      	bne.n	800dd6c <_printf_i+0x1f8>
 800dcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcda:	b004      	add	sp, #16
 800dcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	f043 0320 	orr.w	r3, r3, #32
 800dce6:	6023      	str	r3, [r4, #0]
 800dce8:	2778      	movs	r7, #120	; 0x78
 800dcea:	4832      	ldr	r0, [pc, #200]	; (800ddb4 <_printf_i+0x240>)
 800dcec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	6829      	ldr	r1, [r5, #0]
 800dcf4:	061f      	lsls	r7, r3, #24
 800dcf6:	f851 6b04 	ldr.w	r6, [r1], #4
 800dcfa:	d402      	bmi.n	800dd02 <_printf_i+0x18e>
 800dcfc:	065f      	lsls	r7, r3, #25
 800dcfe:	bf48      	it	mi
 800dd00:	b2b6      	uxthmi	r6, r6
 800dd02:	07df      	lsls	r7, r3, #31
 800dd04:	bf48      	it	mi
 800dd06:	f043 0320 	orrmi.w	r3, r3, #32
 800dd0a:	6029      	str	r1, [r5, #0]
 800dd0c:	bf48      	it	mi
 800dd0e:	6023      	strmi	r3, [r4, #0]
 800dd10:	b91e      	cbnz	r6, 800dd1a <_printf_i+0x1a6>
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	f023 0320 	bic.w	r3, r3, #32
 800dd18:	6023      	str	r3, [r4, #0]
 800dd1a:	2310      	movs	r3, #16
 800dd1c:	e7a6      	b.n	800dc6c <_printf_i+0xf8>
 800dd1e:	4824      	ldr	r0, [pc, #144]	; (800ddb0 <_printf_i+0x23c>)
 800dd20:	e7e4      	b.n	800dcec <_printf_i+0x178>
 800dd22:	4615      	mov	r5, r2
 800dd24:	e7bd      	b.n	800dca2 <_printf_i+0x12e>
 800dd26:	682b      	ldr	r3, [r5, #0]
 800dd28:	6826      	ldr	r6, [r4, #0]
 800dd2a:	1d18      	adds	r0, r3, #4
 800dd2c:	6961      	ldr	r1, [r4, #20]
 800dd2e:	6028      	str	r0, [r5, #0]
 800dd30:	0635      	lsls	r5, r6, #24
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	d501      	bpl.n	800dd3a <_printf_i+0x1c6>
 800dd36:	6019      	str	r1, [r3, #0]
 800dd38:	e002      	b.n	800dd40 <_printf_i+0x1cc>
 800dd3a:	0670      	lsls	r0, r6, #25
 800dd3c:	d5fb      	bpl.n	800dd36 <_printf_i+0x1c2>
 800dd3e:	8019      	strh	r1, [r3, #0]
 800dd40:	2300      	movs	r3, #0
 800dd42:	4615      	mov	r5, r2
 800dd44:	6123      	str	r3, [r4, #16]
 800dd46:	e7bc      	b.n	800dcc2 <_printf_i+0x14e>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	1d1a      	adds	r2, r3, #4
 800dd4e:	602a      	str	r2, [r5, #0]
 800dd50:	681d      	ldr	r5, [r3, #0]
 800dd52:	6862      	ldr	r2, [r4, #4]
 800dd54:	4628      	mov	r0, r5
 800dd56:	f000 f849 	bl	800ddec <memchr>
 800dd5a:	b108      	cbz	r0, 800dd60 <_printf_i+0x1ec>
 800dd5c:	1b40      	subs	r0, r0, r5
 800dd5e:	6060      	str	r0, [r4, #4]
 800dd60:	6863      	ldr	r3, [r4, #4]
 800dd62:	6123      	str	r3, [r4, #16]
 800dd64:	2300      	movs	r3, #0
 800dd66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd6a:	e7aa      	b.n	800dcc2 <_printf_i+0x14e>
 800dd6c:	462a      	mov	r2, r5
 800dd6e:	4649      	mov	r1, r9
 800dd70:	4640      	mov	r0, r8
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	47d0      	blx	sl
 800dd76:	3001      	adds	r0, #1
 800dd78:	d0ad      	beq.n	800dcd6 <_printf_i+0x162>
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	079b      	lsls	r3, r3, #30
 800dd7e:	d413      	bmi.n	800dda8 <_printf_i+0x234>
 800dd80:	68e0      	ldr	r0, [r4, #12]
 800dd82:	9b03      	ldr	r3, [sp, #12]
 800dd84:	4298      	cmp	r0, r3
 800dd86:	bfb8      	it	lt
 800dd88:	4618      	movlt	r0, r3
 800dd8a:	e7a6      	b.n	800dcda <_printf_i+0x166>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	4632      	mov	r2, r6
 800dd90:	4649      	mov	r1, r9
 800dd92:	4640      	mov	r0, r8
 800dd94:	47d0      	blx	sl
 800dd96:	3001      	adds	r0, #1
 800dd98:	d09d      	beq.n	800dcd6 <_printf_i+0x162>
 800dd9a:	3501      	adds	r5, #1
 800dd9c:	68e3      	ldr	r3, [r4, #12]
 800dd9e:	9903      	ldr	r1, [sp, #12]
 800dda0:	1a5b      	subs	r3, r3, r1
 800dda2:	42ab      	cmp	r3, r5
 800dda4:	dcf2      	bgt.n	800dd8c <_printf_i+0x218>
 800dda6:	e7eb      	b.n	800dd80 <_printf_i+0x20c>
 800dda8:	2500      	movs	r5, #0
 800ddaa:	f104 0619 	add.w	r6, r4, #25
 800ddae:	e7f5      	b.n	800dd9c <_printf_i+0x228>
 800ddb0:	0800eddc 	.word	0x0800eddc
 800ddb4:	0800eded 	.word	0x0800eded

0800ddb8 <memmove>:
 800ddb8:	4288      	cmp	r0, r1
 800ddba:	b510      	push	{r4, lr}
 800ddbc:	eb01 0402 	add.w	r4, r1, r2
 800ddc0:	d902      	bls.n	800ddc8 <memmove+0x10>
 800ddc2:	4284      	cmp	r4, r0
 800ddc4:	4623      	mov	r3, r4
 800ddc6:	d807      	bhi.n	800ddd8 <memmove+0x20>
 800ddc8:	1e43      	subs	r3, r0, #1
 800ddca:	42a1      	cmp	r1, r4
 800ddcc:	d008      	beq.n	800dde0 <memmove+0x28>
 800ddce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddd6:	e7f8      	b.n	800ddca <memmove+0x12>
 800ddd8:	4601      	mov	r1, r0
 800ddda:	4402      	add	r2, r0
 800dddc:	428a      	cmp	r2, r1
 800ddde:	d100      	bne.n	800dde2 <memmove+0x2a>
 800dde0:	bd10      	pop	{r4, pc}
 800dde2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dde6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddea:	e7f7      	b.n	800dddc <memmove+0x24>

0800ddec <memchr>:
 800ddec:	4603      	mov	r3, r0
 800ddee:	b510      	push	{r4, lr}
 800ddf0:	b2c9      	uxtb	r1, r1
 800ddf2:	4402      	add	r2, r0
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	d101      	bne.n	800ddfe <memchr+0x12>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	e003      	b.n	800de06 <memchr+0x1a>
 800ddfe:	7804      	ldrb	r4, [r0, #0]
 800de00:	3301      	adds	r3, #1
 800de02:	428c      	cmp	r4, r1
 800de04:	d1f6      	bne.n	800ddf4 <memchr+0x8>
 800de06:	bd10      	pop	{r4, pc}

0800de08 <memcpy>:
 800de08:	440a      	add	r2, r1
 800de0a:	4291      	cmp	r1, r2
 800de0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de10:	d100      	bne.n	800de14 <memcpy+0xc>
 800de12:	4770      	bx	lr
 800de14:	b510      	push	{r4, lr}
 800de16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de1a:	4291      	cmp	r1, r2
 800de1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de20:	d1f9      	bne.n	800de16 <memcpy+0xe>
 800de22:	bd10      	pop	{r4, pc}

0800de24 <_realloc_r>:
 800de24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de28:	4680      	mov	r8, r0
 800de2a:	4614      	mov	r4, r2
 800de2c:	460e      	mov	r6, r1
 800de2e:	b921      	cbnz	r1, 800de3a <_realloc_r+0x16>
 800de30:	4611      	mov	r1, r2
 800de32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de36:	f7ff bb0b 	b.w	800d450 <_malloc_r>
 800de3a:	b92a      	cbnz	r2, 800de48 <_realloc_r+0x24>
 800de3c:	f7ff fc88 	bl	800d750 <_free_r>
 800de40:	4625      	mov	r5, r4
 800de42:	4628      	mov	r0, r5
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de48:	f000 f81b 	bl	800de82 <_malloc_usable_size_r>
 800de4c:	4284      	cmp	r4, r0
 800de4e:	4607      	mov	r7, r0
 800de50:	d802      	bhi.n	800de58 <_realloc_r+0x34>
 800de52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de56:	d812      	bhi.n	800de7e <_realloc_r+0x5a>
 800de58:	4621      	mov	r1, r4
 800de5a:	4640      	mov	r0, r8
 800de5c:	f7ff faf8 	bl	800d450 <_malloc_r>
 800de60:	4605      	mov	r5, r0
 800de62:	2800      	cmp	r0, #0
 800de64:	d0ed      	beq.n	800de42 <_realloc_r+0x1e>
 800de66:	42bc      	cmp	r4, r7
 800de68:	4622      	mov	r2, r4
 800de6a:	4631      	mov	r1, r6
 800de6c:	bf28      	it	cs
 800de6e:	463a      	movcs	r2, r7
 800de70:	f7ff ffca 	bl	800de08 <memcpy>
 800de74:	4631      	mov	r1, r6
 800de76:	4640      	mov	r0, r8
 800de78:	f7ff fc6a 	bl	800d750 <_free_r>
 800de7c:	e7e1      	b.n	800de42 <_realloc_r+0x1e>
 800de7e:	4635      	mov	r5, r6
 800de80:	e7df      	b.n	800de42 <_realloc_r+0x1e>

0800de82 <_malloc_usable_size_r>:
 800de82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de86:	1f18      	subs	r0, r3, #4
 800de88:	2b00      	cmp	r3, #0
 800de8a:	bfbc      	itt	lt
 800de8c:	580b      	ldrlt	r3, [r1, r0]
 800de8e:	18c0      	addlt	r0, r0, r3
 800de90:	4770      	bx	lr
	...

0800de94 <_init>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	bf00      	nop
 800de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9a:	bc08      	pop	{r3}
 800de9c:	469e      	mov	lr, r3
 800de9e:	4770      	bx	lr

0800dea0 <_fini>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	bf00      	nop
 800dea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea6:	bc08      	pop	{r3}
 800dea8:	469e      	mov	lr, r3
 800deaa:	4770      	bx	lr
