
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9f8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb8  0800dbb8  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbb8  0800dbb8  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbb8  0800dbb8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb8  0800dbb8  0001dbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbbc  0800dbbc  0001dbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800dbc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000104  0800dcc4  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800dcc4  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166d7  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ef  00000000  00000000  00036847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0a7  00000000  00000000  000584dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eec9  00000000  00000000  00074583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d8  00000000  00000000  0011344c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000104 	.word	0x20000104
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cbc4 	.word	0x0800cbc4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000108 	.word	0x20000108
 8000220:	0800cbc4 	.word	0x0800cbc4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 faf6 	bl	8009840 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f96e 	bl	8008538 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000120 	.word	0x20000120
 80004bc:	20000284 	.word	0x20000284
 80004c0:	200001cd 	.word	0x200001cd
 80004c4:	200001f5 	.word	0x200001f5
 80004c8:	200001f8 	.word	0x200001f8
 80004cc:	200001f9 	.word	0x200001f9
 80004d0:	200001fa 	.word	0x200001fa
 80004d4:	200001fb 	.word	0x200001fb
 80004d8:	200001fc 	.word	0x200001fc
 80004dc:	200001fd 	.word	0x200001fd
 80004e0:	2000020d 	.word	0x2000020d
 80004e4:	200001fe 	.word	0x200001fe
 80004e8:	2000020e 	.word	0x2000020e
 80004ec:	200001ff 	.word	0x200001ff
 80004f0:	2000020f 	.word	0x2000020f
 80004f4:	20000202 	.word	0x20000202
 80004f8:	20000203 	.word	0x20000203
 80004fc:	20000204 	.word	0x20000204
 8000500:	20000205 	.word	0x20000205
 8000504:	20000206 	.word	0x20000206
 8000508:	20000207 	.word	0x20000207
 800050c:	20000208 	.word	0x20000208
 8000510:	20000209 	.word	0x20000209
 8000514:	2000020a 	.word	0x2000020a
 8000518:	2000020b 	.word	0x2000020b
 800051c:	2000020c 	.word	0x2000020c
 8000520:	20000210 	.word	0x20000210
 8000524:	20000212 	.word	0x20000212
 8000528:	200001f0 	.word	0x200001f0
 800052c:	200001f1 	.word	0x200001f1
 8000530:	200001f2 	.word	0x200001f2
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001f3 	.word	0x200001f3
 8000540:	20000215 	.word	0x20000215
 8000544:	20000213 	.word	0x20000213
 8000548:	20000201 	.word	0x20000201
 800054c:	20000214 	.word	0x20000214
 8000550:	20000200 	.word	0x20000200
 8000554:	20000216 	.word	0x20000216
 8000558:	20000217 	.word	0x20000217
 800055c:	20000218 	.word	0x20000218
 8000560:	20000219 	.word	0x20000219
 8000564:	2000021a 	.word	0x2000021a
 8000568:	2000021b 	.word	0x2000021b
 800056c:	2000021c 	.word	0x2000021c
 8000570:	2000021d 	.word	0x2000021d
 8000574:	2000021e 	.word	0x2000021e
 8000578:	2000021f 	.word	0x2000021f
 800057c:	200001cc 	.word	0x200001cc
	}

	if(kapi1AcSure>5) {
 8000580:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <eepromKontrol+0x49c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <eepromKontrol+0x49c>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b51      	ldr	r3, [pc, #324]	; (80006d4 <eepromKontrol+0x4a0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b4f      	ldr	r3, [pc, #316]	; (80006d4 <eepromKontrol+0x4a0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <eepromKontrol+0x4a4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <eepromKontrol+0x4a4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b4c      	ldr	r3, [pc, #304]	; (80006dc <eepromKontrol+0x4a8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <eepromKontrol+0x4a8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b49      	ldr	r3, [pc, #292]	; (80006e0 <eepromKontrol+0x4ac>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <eepromKontrol+0x4ac>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <eepromKontrol+0x4b0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <eepromKontrol+0x4b0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <eepromKontrol+0x4b4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <eepromKontrol+0x4b4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b42      	ldr	r3, [pc, #264]	; (80006ec <eepromKontrol+0x4b8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b40      	ldr	r3, [pc, #256]	; (80006ec <eepromKontrol+0x4b8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <eepromKontrol+0x4bc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <eepromKontrol+0x4bc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <eepromKontrol+0x4c0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <eepromKontrol+0x4c0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <eepromKontrol+0x4c4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <eepromKontrol+0x4c4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <eepromKontrol+0x4c8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <eepromKontrol+0x4c8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <eepromKontrol+0x4cc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <eepromKontrol+0x4cc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <eepromKontrol+0x4d0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <eepromKontrol+0x4d0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <eepromKontrol+0x4d4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <eepromKontrol+0x4d4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <eepromKontrol+0x4d8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <eepromKontrol+0x4d8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <eepromKontrol+0x4dc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <eepromKontrol+0x4dc>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <eepromKontrol+0x4e0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <eepromKontrol+0x4e0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <eepromKontrol+0x4e4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <eepromKontrol+0x4e4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <eepromKontrol+0x4e8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <eepromKontrol+0x4e8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <eepromKontrol+0x4ec>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <eepromKontrol+0x4ec>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <eepromKontrol+0x4f0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <eepromKontrol+0x4f0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <eepromKontrol+0x4f4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <eepromKontrol+0x4f8>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <eepromKontrol+0x4fc>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000020d 	.word	0x2000020d
 80006d4:	200001fe 	.word	0x200001fe
 80006d8:	2000020e 	.word	0x2000020e
 80006dc:	200001ff 	.word	0x200001ff
 80006e0:	20000201 	.word	0x20000201
 80006e4:	2000020f 	.word	0x2000020f
 80006e8:	20000202 	.word	0x20000202
 80006ec:	20000203 	.word	0x20000203
 80006f0:	20000204 	.word	0x20000204
 80006f4:	20000205 	.word	0x20000205
 80006f8:	20000206 	.word	0x20000206
 80006fc:	20000207 	.word	0x20000207
 8000700:	20000208 	.word	0x20000208
 8000704:	20000209 	.word	0x20000209
 8000708:	2000020a 	.word	0x2000020a
 800070c:	2000020b 	.word	0x2000020b
 8000710:	2000020c 	.word	0x2000020c
 8000714:	20000210 	.word	0x20000210
 8000718:	20000212 	.word	0x20000212
 800071c:	20000214 	.word	0x20000214
 8000720:	20000215 	.word	0x20000215
 8000724:	20000213 	.word	0x20000213
 8000728:	20000004 	.word	0x20000004
 800072c:	20000120 	.word	0x20000120
 8000730:	20000198 	.word	0x20000198

08000734 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <getCharFromCursorPosition+0x1c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000024 	.word	0x20000024

08000754 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	f7ff fd5e 	bl	8000224 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29b      	uxth	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f00a ffad 	bl	800b6d0 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	4618      	mov	r0, r3
 800077a:	f007 fedd 	bl	8008538 <HAL_Delay>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b0a0      	sub	sp, #128	; 0x80
 800078c:	af02      	add	r7, sp, #8
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	4915      	ldr	r1, [pc, #84]	; (80007f0 <ESP8266_Init+0x68>)
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff ffda 	bl	8000754 <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 80007a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <ESP8266_Init+0x6c>)
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f7ff ffd4 	bl	8000754 <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 80007ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007b0:	4911      	ldr	r1, [pc, #68]	; (80007f8 <ESP8266_Init+0x70>)
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f7ff ffce 	bl	8000754 <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 80007b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007bc:	490f      	ldr	r1, [pc, #60]	; (80007fc <ESP8266_Init+0x74>)
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f7ff ffc8 	bl	8000754 <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 80007c4:	f107 0014 	add.w	r0, r7, #20
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <ESP8266_Init+0x78>)
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	f00b fd57 	bl	800c284 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff ffb7 	bl	8000754 <sendATCommand>
}
 80007e6:	bf00      	nop
 80007e8:	3778      	adds	r7, #120	; 0x78
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0800cbdc 	.word	0x0800cbdc
 80007f4:	0800cbec 	.word	0x0800cbec
 80007f8:	0800cbf8 	.word	0x0800cbf8
 80007fc:	0800cc00 	.word	0x0800cc00
 8000800:	0800cc10 	.word	0x0800cc10

08000804 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b0c6      	sub	sp, #280	; 0x118
 8000808:	af02      	add	r7, sp, #8
 800080a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800080e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800081c:	6019      	str	r1, [r3, #0]
 800081e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000826:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000828:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <sendMachineData+0xb8>)
 800082e:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <sendMachineData+0xbc>)
 8000830:	21c8      	movs	r1, #200	; 0xc8
 8000832:	f00b fd27 	bl	800c284 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 8000836:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800083a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800083e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000842:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	f7ff ff84 	bl	8000754 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 800084c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000854:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000858:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <sendMachineData+0xc0>)
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000860:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	9200      	str	r2, [sp, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <sendMachineData+0xc4>)
 800086c:	21c8      	movs	r1, #200	; 0xc8
 800086e:	f00b fd09 	bl	800c284 <sniprintf>
 8000872:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 8000876:	f107 0010 	add.w	r0, r7, #16
 800087a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <sendMachineData+0xc8>)
 8000880:	2132      	movs	r1, #50	; 0x32
 8000882:	f00b fcff 	bl	800c284 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 8000886:	f107 0110 	add.w	r1, r7, #16
 800088a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000892:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	f7ff ff5c 	bl	8000754 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 800089c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80008a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008a8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	f7ff ff51 	bl	8000754 <sendATCommand>
}
 80008b2:	bf00      	nop
 80008b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	0800cc2c 	.word	0x0800cc2c
 80008c0:	0800cc3c 	.word	0x0800cc3c
 80008c4:	0800ccb8 	.word	0x0800ccb8
 80008c8:	0800cc5c 	.word	0x0800cc5c
 80008cc:	0800cccc 	.word	0x0800cccc

080008d0 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af04      	add	r7, sp, #16
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <hata2EEPROM+0xa4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <hata2EEPROM+0xa8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a25      	ldr	r2, [pc, #148]	; (800097c <hata2EEPROM+0xac>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80008ee:	f000 f92b 	bl	8000b48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80008f2:	e000      	b.n	80008f6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80008f4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e012      	b.n	8000922 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <hata2EEPROM+0xa8>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <hata2EEPROM+0xac>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d107      	bne.n	800091c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <hata2EEPROM+0xa8>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	4919      	ldr	r1, [pc, #100]	; (800097c <hata2EEPROM+0xac>)
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	54ca      	strb	r2, [r1, r3]
					break;
 800091a:	e007      	b.n	800092c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <hata2EEPROM+0xa4>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbe7      	blt.n	80008fc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <hata2EEPROM+0xa8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	b299      	uxth	r1, r3
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <hata2EEPROM+0xa4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	b298      	uxth	r0, r3
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <hata2EEPROM+0xa8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <hata2EEPROM+0xac>)
 800093e:	4413      	add	r3, r2
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <hata2EEPROM+0xa4>)
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	b292      	uxth	r2, r2
 8000946:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800094a:	9402      	str	r4, [sp, #8]
 800094c:	9201      	str	r2, [sp, #4]
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	460a      	mov	r2, r1
 8000954:	21a0      	movs	r1, #160	; 0xa0
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <hata2EEPROM+0xb0>)
 8000958:	f008 fe78 	bl	800964c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000960:	f007 fdea 	bl	8008538 <HAL_Delay>
	eepromKontrol(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fc65 	bl	8000234 <eepromKontrol>
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	bf00      	nop
 8000974:	200000a0 	.word	0x200000a0
 8000978:	200000a4 	.word	0x200000a4
 800097c:	20000120 	.word	0x20000120
 8000980:	20000284 	.word	0x20000284

08000984 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d11d      	bne.n	80009d0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000994:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 800099c:	4a61      	ldr	r2, [pc, #388]	; (8000b24 <hataKoduLcdGoster+0x1a0>)
 800099e:	2101      	movs	r1, #1
 80009a0:	2001      	movs	r0, #1
 80009a2:	f007 f873 	bl	8007a8c <lcd_print>
 80009a6:	e008      	b.n	80009ba <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80009a8:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d104      	bne.n	80009ba <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 80009b0:	4a5d      	ldr	r2, [pc, #372]	; (8000b28 <hataKoduLcdGoster+0x1a4>)
 80009b2:	2101      	movs	r1, #1
 80009b4:	2001      	movs	r0, #1
 80009b6:	f007 f869 	bl	8007a8c <lcd_print>
		}
		lcd_print(2, 1, "1");
 80009ba:	4a5c      	ldr	r2, [pc, #368]	; (8000b2c <hataKoduLcdGoster+0x1a8>)
 80009bc:	2101      	movs	r1, #1
 80009be:	2002      	movs	r0, #2
 80009c0:	f007 f864 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "          ");
 80009c4:	4a5a      	ldr	r2, [pc, #360]	; (8000b30 <hataKoduLcdGoster+0x1ac>)
 80009c6:	2107      	movs	r1, #7
 80009c8:	2002      	movs	r0, #2
 80009ca:	f007 f85f 	bl	8007a8c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80009ce:	e0a3      	b.n	8000b18 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d11d      	bne.n	8000a12 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d105      	bne.n	80009ea <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 80009de:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <hataKoduLcdGoster+0x1a0>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	2001      	movs	r0, #1
 80009e4:	f007 f852 	bl	8007a8c <lcd_print>
 80009e8:	e008      	b.n	80009fc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80009ea:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d104      	bne.n	80009fc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 80009f2:	4a4d      	ldr	r2, [pc, #308]	; (8000b28 <hataKoduLcdGoster+0x1a4>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	2001      	movs	r0, #1
 80009f8:	f007 f848 	bl	8007a8c <lcd_print>
		lcd_print(2, 2, "2");
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <hataKoduLcdGoster+0x1b0>)
 80009fe:	2102      	movs	r1, #2
 8000a00:	2002      	movs	r0, #2
 8000a02:	f007 f843 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000a06:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <hataKoduLcdGoster+0x1ac>)
 8000a08:	2107      	movs	r1, #7
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f007 f83e 	bl	8007a8c <lcd_print>
}
 8000a10:	e082      	b.n	8000b18 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d11d      	bne.n	8000a54 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000a18:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d105      	bne.n	8000a2c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000a20:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <hataKoduLcdGoster+0x1a0>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f007 f831 	bl	8007a8c <lcd_print>
 8000a2a:	e008      	b.n	8000a3e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000a2c:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d104      	bne.n	8000a3e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000a34:	4a3c      	ldr	r2, [pc, #240]	; (8000b28 <hataKoduLcdGoster+0x1a4>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f007 f827 	bl	8007a8c <lcd_print>
		lcd_print(2, 3, "3");
 8000a3e:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <hataKoduLcdGoster+0x1b4>)
 8000a40:	2103      	movs	r1, #3
 8000a42:	2002      	movs	r0, #2
 8000a44:	f007 f822 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000a48:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <hataKoduLcdGoster+0x1ac>)
 8000a4a:	2107      	movs	r1, #7
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f007 f81d 	bl	8007a8c <lcd_print>
}
 8000a52:	e061      	b.n	8000b18 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d11d      	bne.n	8000a96 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d105      	bne.n	8000a6e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000a62:	4a30      	ldr	r2, [pc, #192]	; (8000b24 <hataKoduLcdGoster+0x1a0>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2001      	movs	r0, #1
 8000a68:	f007 f810 	bl	8007a8c <lcd_print>
 8000a6c:	e008      	b.n	8000a80 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d104      	bne.n	8000a80 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000a76:	4a2c      	ldr	r2, [pc, #176]	; (8000b28 <hataKoduLcdGoster+0x1a4>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f007 f806 	bl	8007a8c <lcd_print>
		lcd_print(2, 4, "4");
 8000a80:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <hataKoduLcdGoster+0x1b8>)
 8000a82:	2104      	movs	r1, #4
 8000a84:	2002      	movs	r0, #2
 8000a86:	f007 f801 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000a8a:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <hataKoduLcdGoster+0x1ac>)
 8000a8c:	2107      	movs	r1, #7
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f006 fffc 	bl	8007a8c <lcd_print>
}
 8000a94:	e040      	b.n	8000b18 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d11d      	bne.n	8000ad8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d105      	bne.n	8000ab0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <hataKoduLcdGoster+0x1a0>)
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f006 ffef 	bl	8007a8c <lcd_print>
 8000aae:	e008      	b.n	8000ac2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d104      	bne.n	8000ac2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <hataKoduLcdGoster+0x1a4>)
 8000aba:	2101      	movs	r1, #1
 8000abc:	2001      	movs	r0, #1
 8000abe:	f006 ffe5 	bl	8007a8c <lcd_print>
		lcd_print(2, 5, "5");
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <hataKoduLcdGoster+0x1bc>)
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f006 ffe0 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <hataKoduLcdGoster+0x1ac>)
 8000ace:	2107      	movs	r1, #7
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f006 ffdb 	bl	8007a8c <lcd_print>
}
 8000ad6:	e01f      	b.n	8000b18 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d11c      	bne.n	8000b18 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d105      	bne.n	8000af2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <hataKoduLcdGoster+0x1a0>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	2001      	movs	r0, #1
 8000aec:	f006 ffce 	bl	8007a8c <lcd_print>
 8000af0:	e008      	b.n	8000b04 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <hataKoduLcdGoster+0x19c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d104      	bne.n	8000b04 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <hataKoduLcdGoster+0x1a4>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	2001      	movs	r0, #1
 8000b00:	f006 ffc4 	bl	8007a8c <lcd_print>
		lcd_print(2, 6, "6");
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <hataKoduLcdGoster+0x1c0>)
 8000b06:	2106      	movs	r1, #6
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f006 ffbf 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <hataKoduLcdGoster+0x1ac>)
 8000b10:	2107      	movs	r1, #7
 8000b12:	2002      	movs	r0, #2
 8000b14:	f006 ffba 	bl	8007a8c <lcd_print>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000215 	.word	0x20000215
 8000b24:	0800cd58 	.word	0x0800cd58
 8000b28:	0800cd68 	.word	0x0800cd68
 8000b2c:	0800cd78 	.word	0x0800cd78
 8000b30:	0800cd7c 	.word	0x0800cd7c
 8000b34:	0800cd88 	.word	0x0800cd88
 8000b38:	0800cd8c 	.word	0x0800cd8c
 8000b3c:	0800cd90 	.word	0x0800cd90
 8000b40:	0800cd94 	.word	0x0800cd94
 8000b44:	0800cd98 	.word	0x0800cd98

08000b48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e009      	b.n	8000b68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <eepromDataFillWithEmpty+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <eepromDataFillWithEmpty+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <eepromDataFillWithEmpty+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000078 	.word	0x20000078
 8000b84:	20000120 	.word	0x20000120
 8000b88:	200000a0 	.word	0x200000a0

08000b8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <i2cTest+0x154>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bae:	484c      	ldr	r0, [pc, #304]	; (8000ce0 <i2cTest+0x154>)
 8000bb0:	f008 fc1e 	bl	80093f0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	; 0xc0
 8000bb6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4846      	ldr	r0, [pc, #280]	; (8000ce4 <i2cTest+0x158>)
 8000bca:	f008 f825 	bl	8008c18 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4844      	ldr	r0, [pc, #272]	; (8000ce4 <i2cTest+0x158>)
 8000bd4:	f008 fa97 	bl	8009106 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	4841      	ldr	r0, [pc, #260]	; (8000ce4 <i2cTest+0x158>)
 8000bde:	f008 fa92 	bl	8009106 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f007 fca8 	bl	8008538 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000be8:	bf00      	nop
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <i2cTest+0x158>)
 8000bee:	f008 fa73 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <i2cTest+0x7a>
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <i2cTest+0x158>)
 8000bfc:	f008 fa6c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f1      	bne.n	8000bea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4836      	ldr	r0, [pc, #216]	; (8000ce4 <i2cTest+0x158>)
 8000c0c:	f008 fa7b 	bl	8009106 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f007 fc91 	bl	8008538 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c16:	bf00      	nop
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <i2cTest+0x158>)
 8000c1c:	f008 fa5c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0f8      	beq.n	8000c18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <i2cTest+0x158>)
 8000c2c:	f008 fa6b 	bl	8009106 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f007 fc81 	bl	8008538 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c36:	bf00      	nop
 8000c38:	2140      	movs	r1, #64	; 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <i2cTest+0x158>)
 8000c3c:	f008 fa4c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f8      	beq.n	8000c38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <i2cTest+0x158>)
 8000c4c:	f008 fa5b 	bl	8009106 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f007 fc71 	bl	8008538 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c56:	bf00      	nop
 8000c58:	2140      	movs	r1, #64	; 0x40
 8000c5a:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <i2cTest+0x158>)
 8000c5c:	f008 fa3c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1f8      	bne.n	8000c58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <i2cTest+0x158>)
 8000c6c:	f008 fa4b 	bl	8009106 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f007 fc61 	bl	8008538 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <i2cTest+0x158>)
 8000c7c:	f008 fa2c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f8      	bne.n	8000c78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	; 0xc0
 8000c88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <i2cTest+0x158>)
 8000c9c:	f007 ffbc 	bl	8008c18 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <i2cTest+0x154>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <i2cTest+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <i2cTest+0x154>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cbe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <i2cTest+0x154>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <i2cTest+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <i2cTest+0x154>)
 8000cd2:	f008 fa49 	bl	8009168 <HAL_I2C_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000284 	.word	0x20000284
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cf2:	20c8      	movs	r0, #200	; 0xc8
 8000cf4:	f007 fc20 	bl	8008538 <HAL_Delay>
	lcd_clear();
 8000cf8:	f006 fef4 	bl	8007ae4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d143      	bne.n	8000d8a <printTemplate+0xa2>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d140      	bne.n	8000d8a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000d08:	4a9d      	ldr	r2, [pc, #628]	; (8000f80 <printTemplate+0x298>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f006 febd 	bl	8007a8c <lcd_print>
		lcd_print(2, 3, "0");
 8000d12:	4a9c      	ldr	r2, [pc, #624]	; (8000f84 <printTemplate+0x29c>)
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f006 feb8 	bl	8007a8c <lcd_print>
		lcd_print(2, 4, "1");
 8000d1c:	4a9a      	ldr	r2, [pc, #616]	; (8000f88 <printTemplate+0x2a0>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f006 feb3 	bl	8007a8c <lcd_print>
		lcd_print(2, 5, "2");
 8000d26:	4a99      	ldr	r2, [pc, #612]	; (8000f8c <printTemplate+0x2a4>)
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f006 feae 	bl	8007a8c <lcd_print>
		lcd_print(2, 6, "3");
 8000d30:	4a97      	ldr	r2, [pc, #604]	; (8000f90 <printTemplate+0x2a8>)
 8000d32:	2106      	movs	r1, #6
 8000d34:	2002      	movs	r0, #2
 8000d36:	f006 fea9 	bl	8007a8c <lcd_print>
		lcd_print(2, 7, "4");
 8000d3a:	4a96      	ldr	r2, [pc, #600]	; (8000f94 <printTemplate+0x2ac>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f006 fea4 	bl	8007a8c <lcd_print>
		lcd_print(2, 10, "5");
 8000d44:	4a94      	ldr	r2, [pc, #592]	; (8000f98 <printTemplate+0x2b0>)
 8000d46:	210a      	movs	r1, #10
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f006 fe9f 	bl	8007a8c <lcd_print>
		lcd_print(2, 11, "6");
 8000d4e:	4a93      	ldr	r2, [pc, #588]	; (8000f9c <printTemplate+0x2b4>)
 8000d50:	210b      	movs	r1, #11
 8000d52:	2002      	movs	r0, #2
 8000d54:	f006 fe9a 	bl	8007a8c <lcd_print>
		lcd_print(2, 12, "7");
 8000d58:	4a91      	ldr	r2, [pc, #580]	; (8000fa0 <printTemplate+0x2b8>)
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f006 fe95 	bl	8007a8c <lcd_print>
		lcd_print(2, 13, "8");
 8000d62:	4a90      	ldr	r2, [pc, #576]	; (8000fa4 <printTemplate+0x2bc>)
 8000d64:	210d      	movs	r1, #13
 8000d66:	2002      	movs	r0, #2
 8000d68:	f006 fe90 	bl	8007a8c <lcd_print>
		lcd_print(2, 14, "9");
 8000d6c:	4a8e      	ldr	r2, [pc, #568]	; (8000fa8 <printTemplate+0x2c0>)
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2002      	movs	r0, #2
 8000d72:	f006 fe8b 	bl	8007a8c <lcd_print>
		lcd_print(1, 5, machineID);
 8000d76:	4a8d      	ldr	r2, [pc, #564]	; (8000fac <printTemplate+0x2c4>)
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f006 fe86 	bl	8007a8c <lcd_print>
		lcd_gotoxy(2, 3);
 8000d80:	2103      	movs	r1, #3
 8000d82:	2002      	movs	r0, #2
 8000d84:	f006 fe63 	bl	8007a4e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000d88:	e0f5      	b.n	8000f76 <printTemplate+0x28e>
	} else if(type == 2) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d178      	bne.n	8000e82 <printTemplate+0x19a>
		if(page == 1) {
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d114      	bne.n	8000dc0 <printTemplate+0xd8>
			lcd_clear();
 8000d96:	f006 fea5 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f007 fbcc 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000da0:	4a83      	ldr	r2, [pc, #524]	; (8000fb0 <printTemplate+0x2c8>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	2001      	movs	r0, #1
 8000da6:	f006 fe71 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000daa:	4a82      	ldr	r2, [pc, #520]	; (8000fb4 <printTemplate+0x2cc>)
 8000dac:	2107      	movs	r1, #7
 8000dae:	2001      	movs	r0, #1
 8000db0:	f006 fe6c 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000db4:	4a80      	ldr	r2, [pc, #512]	; (8000fb8 <printTemplate+0x2d0>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2002      	movs	r0, #2
 8000dba:	f006 fe67 	bl	8007a8c <lcd_print>
}
 8000dbe:	e0da      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 2) {
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d114      	bne.n	8000df0 <printTemplate+0x108>
			lcd_clear();
 8000dc6:	f006 fe8d 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f007 fbb4 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dd0:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <printTemplate+0x2c8>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f006 fe59 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dda:	4a76      	ldr	r2, [pc, #472]	; (8000fb4 <printTemplate+0x2cc>)
 8000ddc:	2107      	movs	r1, #7
 8000dde:	2001      	movs	r0, #1
 8000de0:	f006 fe54 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000de4:	4a75      	ldr	r2, [pc, #468]	; (8000fbc <printTemplate+0x2d4>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2002      	movs	r0, #2
 8000dea:	f006 fe4f 	bl	8007a8c <lcd_print>
}
 8000dee:	e0c2      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 3) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d114      	bne.n	8000e20 <printTemplate+0x138>
			lcd_clear();
 8000df6:	f006 fe75 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f007 fb9c 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e00:	4a6b      	ldr	r2, [pc, #428]	; (8000fb0 <printTemplate+0x2c8>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	f006 fe41 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e0a:	4a6a      	ldr	r2, [pc, #424]	; (8000fb4 <printTemplate+0x2cc>)
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f006 fe3c 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000e14:	4a6a      	ldr	r2, [pc, #424]	; (8000fc0 <printTemplate+0x2d8>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f006 fe37 	bl	8007a8c <lcd_print>
}
 8000e1e:	e0aa      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 4) {
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d114      	bne.n	8000e50 <printTemplate+0x168>
			lcd_clear();
 8000e26:	f006 fe5d 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f007 fb84 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <printTemplate+0x2c8>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	2001      	movs	r0, #1
 8000e36:	f006 fe29 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e3a:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <printTemplate+0x2cc>)
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f006 fe24 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000e44:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <printTemplate+0x2dc>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f006 fe1f 	bl	8007a8c <lcd_print>
}
 8000e4e:	e092      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 5) {
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	f040 808f 	bne.w	8000f76 <printTemplate+0x28e>
			lcd_clear();
 8000e58:	f006 fe44 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f007 fb6b 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e62:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <printTemplate+0x2c8>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	2001      	movs	r0, #1
 8000e68:	f006 fe10 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e6c:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <printTemplate+0x2cc>)
 8000e6e:	2107      	movs	r1, #7
 8000e70:	2001      	movs	r0, #1
 8000e72:	f006 fe0b 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000e76:	4a54      	ldr	r2, [pc, #336]	; (8000fc8 <printTemplate+0x2e0>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f006 fe06 	bl	8007a8c <lcd_print>
}
 8000e80:	e079      	b.n	8000f76 <printTemplate+0x28e>
	} else if(type == 3) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d176      	bne.n	8000f76 <printTemplate+0x28e>
		if(page == 1) {
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d114      	bne.n	8000eb8 <printTemplate+0x1d0>
			lcd_clear();
 8000e8e:	f006 fe29 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000e92:	2064      	movs	r0, #100	; 0x64
 8000e94:	f007 fb50 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <printTemplate+0x2e4>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f006 fdf5 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <printTemplate+0x2e8>)
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f006 fdf0 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000eac:	4a42      	ldr	r2, [pc, #264]	; (8000fb8 <printTemplate+0x2d0>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f006 fdeb 	bl	8007a8c <lcd_print>
}
 8000eb6:	e05e      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 2) {
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d114      	bne.n	8000ee8 <printTemplate+0x200>
			lcd_clear();
 8000ebe:	f006 fe11 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000ec2:	2064      	movs	r0, #100	; 0x64
 8000ec4:	f007 fb38 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ec8:	4a40      	ldr	r2, [pc, #256]	; (8000fcc <printTemplate+0x2e4>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f006 fddd 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	; (8000fd0 <printTemplate+0x2e8>)
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f006 fdd8 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000edc:	4a37      	ldr	r2, [pc, #220]	; (8000fbc <printTemplate+0x2d4>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f006 fdd3 	bl	8007a8c <lcd_print>
}
 8000ee6:	e046      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 3) {
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d114      	bne.n	8000f18 <printTemplate+0x230>
			lcd_clear();
 8000eee:	f006 fdf9 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000ef2:	2064      	movs	r0, #100	; 0x64
 8000ef4:	f007 fb20 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ef8:	4a34      	ldr	r2, [pc, #208]	; (8000fcc <printTemplate+0x2e4>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	2001      	movs	r0, #1
 8000efe:	f006 fdc5 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <printTemplate+0x2e8>)
 8000f04:	2107      	movs	r1, #7
 8000f06:	2001      	movs	r0, #1
 8000f08:	f006 fdc0 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <printTemplate+0x2d8>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2002      	movs	r0, #2
 8000f12:	f006 fdbb 	bl	8007a8c <lcd_print>
}
 8000f16:	e02e      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 4) {
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d114      	bne.n	8000f48 <printTemplate+0x260>
			lcd_clear();
 8000f1e:	f006 fde1 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000f22:	2064      	movs	r0, #100	; 0x64
 8000f24:	f007 fb08 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <printTemplate+0x2e4>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f006 fdad 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <printTemplate+0x2e8>)
 8000f34:	2107      	movs	r1, #7
 8000f36:	2001      	movs	r0, #1
 8000f38:	f006 fda8 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f3c:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <printTemplate+0x2dc>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2002      	movs	r0, #2
 8000f42:	f006 fda3 	bl	8007a8c <lcd_print>
}
 8000f46:	e016      	b.n	8000f76 <printTemplate+0x28e>
		} else if(page == 5) {
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d113      	bne.n	8000f76 <printTemplate+0x28e>
			lcd_clear();
 8000f4e:	f006 fdc9 	bl	8007ae4 <lcd_clear>
			HAL_Delay(100);
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f007 faf0 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <printTemplate+0x2e4>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f006 fd95 	bl	8007a8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <printTemplate+0x2e8>)
 8000f64:	2107      	movs	r1, #7
 8000f66:	2001      	movs	r0, #1
 8000f68:	f006 fd90 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f6c:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <printTemplate+0x2e0>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2002      	movs	r0, #2
 8000f72:	f006 fd8b 	bl	8007a8c <lcd_print>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0800cd9c 	.word	0x0800cd9c
 8000f84:	0800cda4 	.word	0x0800cda4
 8000f88:	0800cda8 	.word	0x0800cda8
 8000f8c:	0800cdac 	.word	0x0800cdac
 8000f90:	0800cdb0 	.word	0x0800cdb0
 8000f94:	0800cdb4 	.word	0x0800cdb4
 8000f98:	0800cdb8 	.word	0x0800cdb8
 8000f9c:	0800cdbc 	.word	0x0800cdbc
 8000fa0:	0800cdc0 	.word	0x0800cdc0
 8000fa4:	0800cdc4 	.word	0x0800cdc4
 8000fa8:	0800cdc8 	.word	0x0800cdc8
 8000fac:	20000198 	.word	0x20000198
 8000fb0:	0800cdcc 	.word	0x0800cdcc
 8000fb4:	200001a4 	.word	0x200001a4
 8000fb8:	0800cdd4 	.word	0x0800cdd4
 8000fbc:	0800cde8 	.word	0x0800cde8
 8000fc0:	0800cdfc 	.word	0x0800cdfc
 8000fc4:	0800ce10 	.word	0x0800ce10
 8000fc8:	0800ce24 	.word	0x0800ce24
 8000fcc:	0800ce38 	.word	0x0800ce38
 8000fd0:	200001b8 	.word	0x200001b8

08000fd4 <checkSlideVal>:

int checkSlideVal(int state) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d111      	bne.n	8001006 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4813      	ldr	r0, [pc, #76]	; (8001034 <checkSlideVal+0x60>)
 8000fe6:	f008 f877 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <checkSlideVal+0x20>
			return 34;
 8000ff0:	2322      	movs	r3, #34	; 0x22
 8000ff2:	e01b      	b.n	800102c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4810      	ldr	r0, [pc, #64]	; (8001038 <checkSlideVal+0x64>)
 8000ff8:	f008 f86e 	bl	80090d8 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d113      	bne.n	800102a <checkSlideVal+0x56>
			return 32;
 8001002:	2320      	movs	r3, #32
 8001004:	e012      	b.n	800102c <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001006:	2101      	movs	r1, #1
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <checkSlideVal+0x60>)
 800100a:	f008 f865 	bl	80090d8 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <checkSlideVal+0x44>
			return 35;
 8001014:	2323      	movs	r3, #35	; 0x23
 8001016:	e009      	b.n	800102c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001018:	2108      	movs	r1, #8
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <checkSlideVal+0x64>)
 800101c:	f008 f85c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <checkSlideVal+0x56>
			return 33;
 8001026:	2321      	movs	r3, #33	; 0x21
 8001028:	e000      	b.n	800102c <checkSlideVal+0x58>
		}
	}
	return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010800 	.word	0x40010800
 8001038:	40011000 	.word	0x40011000

0800103c <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff f8ea 	bl	8000224 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001058:	e08a      	b.n	8001170 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f7ff ffba 	bl	8000fd4 <checkSlideVal>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd07      	ble.n	8001076 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f7ff ffb4 	bl	8000fd4 <checkSlideVal>
 800106c:	4603      	mov	r3, r0
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b44      	ldr	r3, [pc, #272]	; (8001184 <slideText+0x148>)
 8001072:	701a      	strb	r2, [r3, #0]
			break;
 8001074:	e081      	b.n	800117a <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
 800107a:	e075      	b.n	8001168 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f7ff ffa9 	bl	8000fd4 <checkSlideVal>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	dd09      	ble.n	800109c <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f7ff ffa3 	bl	8000fd4 <checkSlideVal>
 800108e:	4603      	mov	r3, r0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <slideText+0x148>)
 8001094:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800109a:	e069      	b.n	8001170 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	4413      	add	r3, r2
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e029      	b.n	80010fa <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff ff94 	bl	8000fd4 <checkSlideVal>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dd0b      	ble.n	80010ca <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f7ff ff8e 	bl	8000fd4 <checkSlideVal>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <slideText+0x148>)
 80010be:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80010c8:	e01d      	b.n	8001106 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	b2d8      	uxtb	r0, r3
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b2d9      	uxtb	r1, r3
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f006 fce4 	bl	8007ab6 <lcd_print_char>
				HAL_Delay(30);
 80010ee:	201e      	movs	r0, #30
 80010f0:	f007 fa22 	bl	8008538 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3301      	adds	r3, #1
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	7dfa      	ldrb	r2, [r7, #23]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	429a      	cmp	r2, r3
 8001104:	dbcf      	blt.n	80010a6 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	3b01      	subs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	e023      	b.n	8001156 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff ff60 	bl	8000fd4 <checkSlideVal>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	dd0b      	ble.n	8001132 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f7ff ff5a 	bl	8000fd4 <checkSlideVal>
 8001120:	4603      	mov	r3, r0
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <slideText+0x148>)
 8001126:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001130:	e017      	b.n	8001162 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	429a      	cmp	r2, r3
 8001138:	db0a      	blt.n	8001150 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	b2d1      	uxtb	r1, r2
 8001142:	2220      	movs	r2, #32
 8001144:	4618      	mov	r0, r3
 8001146:	f006 fcb6 	bl	8007ab6 <lcd_print_char>
			    	 HAL_Delay(30);
 800114a:	201e      	movs	r0, #30
 800114c:	f007 f9f4 	bl	8008538 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	3b01      	subs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	7dfa      	ldrb	r2, [r7, #23]
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	429a      	cmp	r2, r3
 8001160:	dad5      	bge.n	800110e <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	3301      	adds	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	6a3a      	ldr	r2, [r7, #32]
 800116c:	429a      	cmp	r2, r3
 800116e:	db85      	blt.n	800107c <slideText+0x40>
	while(mainLoopVal == 1) {
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	2b01      	cmp	r3, #1
 8001174:	f43f af71 	beq.w	800105a <slideText+0x1e>
			     }
			}
		}
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001f4 	.word	0x200001f4

08001188 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800118c:	f3bf 8f4f 	dsb	sy
}
 8001190:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <__NVIC_SystemReset+0x24>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800119a:	4904      	ldr	r1, [pc, #16]	; (80011ac <__NVIC_SystemReset+0x24>)
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_SystemReset+0x28>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011a2:	f3bf 8f4f 	dsb	sy
}
 80011a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <__NVIC_SystemReset+0x20>
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	05fa0004 	.word	0x05fa0004

080011b4 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011ba:	2101      	movs	r1, #1
 80011bc:	488e      	ldr	r0, [pc, #568]	; (80013f8 <menu+0x244>)
 80011be:	f007 ff8b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	f040 808e 	bne.w	80012e6 <menu+0x132>
 80011ca:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <menu+0x248>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 8086 	beq.w	80012e6 <menu+0x132>
		menuSayac = menuSayac+1;
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <menu+0x24c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b87      	ldr	r3, [pc, #540]	; (8001400 <menu+0x24c>)
 80011e4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80011e6:	4b86      	ldr	r3, [pc, #536]	; (8001400 <menu+0x24c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b24      	cmp	r3, #36	; 0x24
 80011ec:	d102      	bne.n	80011f4 <menu+0x40>
			menuSayac = 1;
 80011ee:	4b84      	ldr	r3, [pc, #528]	; (8001400 <menu+0x24c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80011f4:	4b82      	ldr	r3, [pc, #520]	; (8001400 <menu+0x24c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d106      	bne.n	800120a <menu+0x56>
 80011fc:	4b81      	ldr	r3, [pc, #516]	; (8001404 <menu+0x250>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <menu+0x56>
			menuSayac = 21;
 8001204:	4b7e      	ldr	r3, [pc, #504]	; (8001400 <menu+0x24c>)
 8001206:	2215      	movs	r2, #21
 8001208:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800120a:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <menu+0x24c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d106      	bne.n	8001220 <menu+0x6c>
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <menu+0x254>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <menu+0x6c>
			menuSayac = 16;
 800121a:	4b79      	ldr	r3, [pc, #484]	; (8001400 <menu+0x24c>)
 800121c:	2210      	movs	r2, #16
 800121e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <menu+0x24c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b0d      	cmp	r3, #13
 8001226:	d106      	bne.n	8001236 <menu+0x82>
 8001228:	4b77      	ldr	r3, [pc, #476]	; (8001408 <menu+0x254>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d102      	bne.n	8001236 <menu+0x82>
			menuSayac = 16;
 8001230:	4b73      	ldr	r3, [pc, #460]	; (8001400 <menu+0x24c>)
 8001232:	2210      	movs	r2, #16
 8001234:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <menu+0x24c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b09      	cmp	r3, #9
 800123c:	d106      	bne.n	800124c <menu+0x98>
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <menu+0x254>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d102      	bne.n	800124c <menu+0x98>
			menuSayac = 13;
 8001246:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <menu+0x24c>)
 8001248:	220d      	movs	r2, #13
 800124a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800124c:	4b6c      	ldr	r3, [pc, #432]	; (8001400 <menu+0x24c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b0a      	cmp	r3, #10
 8001252:	d10a      	bne.n	800126a <menu+0xb6>
 8001254:	4b6d      	ldr	r3, [pc, #436]	; (800140c <menu+0x258>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d003      	beq.n	8001264 <menu+0xb0>
 800125c:	4b6b      	ldr	r3, [pc, #428]	; (800140c <menu+0x258>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d102      	bne.n	800126a <menu+0xb6>
			menuSayac = 11;
 8001264:	4b66      	ldr	r3, [pc, #408]	; (8001400 <menu+0x24c>)
 8001266:	220b      	movs	r2, #11
 8001268:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <menu+0x24c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d10e      	bne.n	8001290 <menu+0xdc>
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <menu+0x25c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d003      	beq.n	8001282 <menu+0xce>
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <menu+0x25c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d106      	bne.n	8001290 <menu+0xdc>
 8001282:	4b61      	ldr	r3, [pc, #388]	; (8001408 <menu+0x254>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d102      	bne.n	8001290 <menu+0xdc>
			menuSayac = 16;
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <menu+0x24c>)
 800128c:	2210      	movs	r2, #16
 800128e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <menu+0x24c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d10e      	bne.n	80012b6 <menu+0x102>
 8001298:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <menu+0x25c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d003      	beq.n	80012a8 <menu+0xf4>
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <menu+0x25c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d106      	bne.n	80012b6 <menu+0x102>
 80012a8:	4b57      	ldr	r3, [pc, #348]	; (8001408 <menu+0x254>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d102      	bne.n	80012b6 <menu+0x102>
			menuSayac = 13;
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <menu+0x24c>)
 80012b2:	220d      	movs	r2, #13
 80012b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <menu+0x24c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d106      	bne.n	80012cc <menu+0x118>
 80012be:	4b55      	ldr	r3, [pc, #340]	; (8001414 <menu+0x260>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <menu+0x118>
			menuSayac = 16;
 80012c6:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <menu+0x24c>)
 80012c8:	2210      	movs	r2, #16
 80012ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <menu+0x24c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b18      	cmp	r3, #24
 80012d2:	d106      	bne.n	80012e2 <menu+0x12e>
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <menu+0x250>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <menu+0x12e>
			menuSayac = 26;
 80012dc:	4b48      	ldr	r3, [pc, #288]	; (8001400 <menu+0x24c>)
 80012de:	221a      	movs	r2, #26
 80012e0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012e2:	f003 fb33 	bl	800494c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012e6:	2108      	movs	r1, #8
 80012e8:	484b      	ldr	r0, [pc, #300]	; (8001418 <menu+0x264>)
 80012ea:	f007 fef5 	bl	80090d8 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d175      	bne.n	80013e0 <menu+0x22c>
 80012f4:	4b41      	ldr	r3, [pc, #260]	; (80013fc <menu+0x248>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06e      	beq.n	80013e0 <menu+0x22c>
		if (menuSayac <= 1) {
 8001302:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <menu+0x24c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d802      	bhi.n	8001310 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <menu+0x24c>)
 800130c:	2224      	movs	r2, #36	; 0x24
 800130e:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001310:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <menu+0x24c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <menu+0x24c>)
 800131a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800131c:	4b38      	ldr	r3, [pc, #224]	; (8001400 <menu+0x24c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b14      	cmp	r3, #20
 8001322:	d106      	bne.n	8001332 <menu+0x17e>
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <menu+0x250>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <menu+0x17e>
			menuSayac = 17;
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <menu+0x24c>)
 800132e:	2211      	movs	r2, #17
 8001330:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <menu+0x24c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d106      	bne.n	8001348 <menu+0x194>
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <menu+0x254>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <menu+0x194>
			menuSayac = 7;
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <menu+0x24c>)
 8001344:	2207      	movs	r2, #7
 8001346:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <menu+0x24c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d106      	bne.n	800135e <menu+0x1aa>
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <menu+0x254>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <menu+0x1aa>
			menuSayac = 12;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <menu+0x24c>)
 800135a:	220c      	movs	r2, #12
 800135c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <menu+0x24c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	d106      	bne.n	8001374 <menu+0x1c0>
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <menu+0x254>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d102      	bne.n	8001374 <menu+0x1c0>
			menuSayac = 8;
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <menu+0x24c>)
 8001370:	2208      	movs	r2, #8
 8001372:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <menu+0x24c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b0a      	cmp	r3, #10
 800137a:	d10a      	bne.n	8001392 <menu+0x1de>
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <menu+0x258>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d003      	beq.n	800138c <menu+0x1d8>
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <menu+0x258>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d102      	bne.n	8001392 <menu+0x1de>
			menuSayac = 9;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <menu+0x24c>)
 800138e:	2209      	movs	r2, #9
 8001390:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <menu+0x24c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d10a      	bne.n	80013b0 <menu+0x1fc>
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <menu+0x25c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <menu+0x1f6>
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <menu+0x25c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d102      	bne.n	80013b0 <menu+0x1fc>
			menuSayac = 11;
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <menu+0x24c>)
 80013ac:	220b      	movs	r2, #11
 80013ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <menu+0x24c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d106      	bne.n	80013c6 <menu+0x212>
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <menu+0x260>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <menu+0x212>
			menuSayac = 14;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <menu+0x24c>)
 80013c2:	220e      	movs	r2, #14
 80013c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <menu+0x24c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b19      	cmp	r3, #25
 80013cc:	d106      	bne.n	80013dc <menu+0x228>
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <menu+0x250>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <menu+0x228>
			menuSayac = 23;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <menu+0x24c>)
 80013d8:	2217      	movs	r2, #23
 80013da:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013dc:	f003 fab6 	bl	800494c <bekle>
	}

	if (menuSayac == 0) {
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <menu+0x24c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d133      	bne.n	8001450 <menu+0x29c>
		if(dilSecim == 0) {
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <menu+0x268>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d121      	bne.n	8001434 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <menu+0x26c>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	2001      	movs	r0, #1
 80013f6:	e015      	b.n	8001424 <menu+0x270>
 80013f8:	40010800 	.word	0x40010800
 80013fc:	20000223 	.word	0x20000223
 8001400:	200001f4 	.word	0x200001f4
 8001404:	20000203 	.word	0x20000203
 8001408:	200001fc 	.word	0x200001fc
 800140c:	200001fd 	.word	0x200001fd
 8001410:	200001fe 	.word	0x200001fe
 8001414:	200001ff 	.word	0x200001ff
 8001418:	40011000 	.word	0x40011000
 800141c:	20000215 	.word	0x20000215
 8001420:	0800ce40 	.word	0x0800ce40
 8001424:	f006 fb32 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001428:	4a94      	ldr	r2, [pc, #592]	; (800167c <menu+0x4c8>)
 800142a:	2101      	movs	r1, #1
 800142c:	2002      	movs	r0, #2
 800142e:	f006 fb2d 	bl	8007a8c <lcd_print>
 8001432:	e00d      	b.n	8001450 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <menu+0x4cc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d109      	bne.n	8001450 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800143c:	4a91      	ldr	r2, [pc, #580]	; (8001684 <menu+0x4d0>)
 800143e:	2101      	movs	r1, #1
 8001440:	2001      	movs	r0, #1
 8001442:	f006 fb23 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001446:	4a90      	ldr	r2, [pc, #576]	; (8001688 <menu+0x4d4>)
 8001448:	2101      	movs	r1, #1
 800144a:	2002      	movs	r0, #2
 800144c:	f006 fb1e 	bl	8007a8c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001450:	4b8e      	ldr	r3, [pc, #568]	; (800168c <menu+0x4d8>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 82b5 	bne.w	80019c4 <menu+0x810>
		if(dilSecim == 0) {
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <menu+0x4cc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001462:	4a8b      	ldr	r2, [pc, #556]	; (8001690 <menu+0x4dc>)
 8001464:	2101      	movs	r1, #1
 8001466:	2001      	movs	r0, #1
 8001468:	f006 fb10 	bl	8007a8c <lcd_print>
 800146c:	e008      	b.n	8001480 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800146e:	4b84      	ldr	r3, [pc, #528]	; (8001680 <menu+0x4cc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d104      	bne.n	8001480 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001476:	4a87      	ldr	r2, [pc, #540]	; (8001694 <menu+0x4e0>)
 8001478:	2101      	movs	r1, #1
 800147a:	2001      	movs	r0, #1
 800147c:	f006 fb06 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001480:	4b85      	ldr	r3, [pc, #532]	; (8001698 <menu+0x4e4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d123      	bne.n	80014d0 <menu+0x31c>
			if(dilSecim == 0) {
 8001488:	4b7d      	ldr	r3, [pc, #500]	; (8001680 <menu+0x4cc>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001490:	4a82      	ldr	r2, [pc, #520]	; (800169c <menu+0x4e8>)
 8001492:	2101      	movs	r1, #1
 8001494:	2002      	movs	r0, #2
 8001496:	f006 faf9 	bl	8007a8c <lcd_print>
 800149a:	e008      	b.n	80014ae <menu+0x2fa>

			} else if(dilSecim == 1) {
 800149c:	4b78      	ldr	r3, [pc, #480]	; (8001680 <menu+0x4cc>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d104      	bne.n	80014ae <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80014a4:	4a7e      	ldr	r2, [pc, #504]	; (80016a0 <menu+0x4ec>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	2002      	movs	r0, #2
 80014aa:	f006 faef 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80014ae:	4a7d      	ldr	r2, [pc, #500]	; (80016a4 <menu+0x4f0>)
 80014b0:	210f      	movs	r1, #15
 80014b2:	2002      	movs	r0, #2
 80014b4:	f006 faea 	bl	8007a8c <lcd_print>
			itoa(hataKayit1, snum, 10);
 80014b8:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <menu+0x4f4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	220a      	movs	r2, #10
 80014be:	497b      	ldr	r1, [pc, #492]	; (80016ac <menu+0x4f8>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a fe35 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 80014c6:	4a79      	ldr	r2, [pc, #484]	; (80016ac <menu+0x4f8>)
 80014c8:	210e      	movs	r1, #14
 80014ca:	2002      	movs	r0, #2
 80014cc:	f006 fade 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80014d0:	4b71      	ldr	r3, [pc, #452]	; (8001698 <menu+0x4e4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d123      	bne.n	8001520 <menu+0x36c>
			if(dilSecim == 0) {
 80014d8:	4b69      	ldr	r3, [pc, #420]	; (8001680 <menu+0x4cc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80014e0:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <menu+0x4fc>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f006 fad1 	bl	8007a8c <lcd_print>
 80014ea:	e008      	b.n	80014fe <menu+0x34a>
			} else if(dilSecim == 1) {
 80014ec:	4b64      	ldr	r3, [pc, #400]	; (8001680 <menu+0x4cc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80014f4:	4a6f      	ldr	r2, [pc, #444]	; (80016b4 <menu+0x500>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f006 fac7 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014fe:	4a6e      	ldr	r2, [pc, #440]	; (80016b8 <menu+0x504>)
 8001500:	210f      	movs	r1, #15
 8001502:	2002      	movs	r0, #2
 8001504:	f006 fac2 	bl	8007a8c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001508:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <menu+0x508>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	220a      	movs	r2, #10
 800150e:	4967      	ldr	r1, [pc, #412]	; (80016ac <menu+0x4f8>)
 8001510:	4618      	mov	r0, r3
 8001512:	f00a fe0d 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 8001516:	4a65      	ldr	r2, [pc, #404]	; (80016ac <menu+0x4f8>)
 8001518:	210e      	movs	r1, #14
 800151a:	2002      	movs	r0, #2
 800151c:	f006 fab6 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001520:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <menu+0x4e4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d123      	bne.n	8001570 <menu+0x3bc>
			if(dilSecim == 0) {
 8001528:	4b55      	ldr	r3, [pc, #340]	; (8001680 <menu+0x4cc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001530:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <menu+0x50c>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 faa9 	bl	8007a8c <lcd_print>
 800153a:	e008      	b.n	800154e <menu+0x39a>
			} else if(dilSecim == 1) {
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <menu+0x4cc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d104      	bne.n	800154e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001544:	4a5f      	ldr	r2, [pc, #380]	; (80016c4 <menu+0x510>)
 8001546:	2101      	movs	r1, #1
 8001548:	2002      	movs	r0, #2
 800154a:	f006 fa9f 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800154e:	4a5a      	ldr	r2, [pc, #360]	; (80016b8 <menu+0x504>)
 8001550:	210f      	movs	r1, #15
 8001552:	2002      	movs	r0, #2
 8001554:	f006 fa9a 	bl	8007a8c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001558:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <menu+0x514>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	220a      	movs	r2, #10
 800155e:	4953      	ldr	r1, [pc, #332]	; (80016ac <menu+0x4f8>)
 8001560:	4618      	mov	r0, r3
 8001562:	f00a fde5 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 8001566:	4a51      	ldr	r2, [pc, #324]	; (80016ac <menu+0x4f8>)
 8001568:	210e      	movs	r1, #14
 800156a:	2002      	movs	r0, #2
 800156c:	f006 fa8e 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <menu+0x4e4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d123      	bne.n	80015c0 <menu+0x40c>
			if(dilSecim == 0) {
 8001578:	4b41      	ldr	r3, [pc, #260]	; (8001680 <menu+0x4cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <menu+0x518>)
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f006 fa81 	bl	8007a8c <lcd_print>
 800158a:	e008      	b.n	800159e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <menu+0x4cc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d104      	bne.n	800159e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001594:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <menu+0x51c>)
 8001596:	2101      	movs	r1, #1
 8001598:	2002      	movs	r0, #2
 800159a:	f006 fa77 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800159e:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <menu+0x504>)
 80015a0:	210f      	movs	r1, #15
 80015a2:	2002      	movs	r0, #2
 80015a4:	f006 fa72 	bl	8007a8c <lcd_print>
			itoa(hataKayit4, snum, 10);
 80015a8:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <menu+0x520>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	220a      	movs	r2, #10
 80015ae:	493f      	ldr	r1, [pc, #252]	; (80016ac <menu+0x4f8>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a fdbd 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <menu+0x4f8>)
 80015b8:	210e      	movs	r1, #14
 80015ba:	2002      	movs	r0, #2
 80015bc:	f006 fa66 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <menu+0x4e4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d123      	bne.n	8001610 <menu+0x45c>
			if(dilSecim == 0) {
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <menu+0x4cc>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80015d0:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <menu+0x524>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fa59 	bl	8007a8c <lcd_print>
 80015da:	e008      	b.n	80015ee <menu+0x43a>
			} else if(dilSecim == 1) {
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <menu+0x4cc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d104      	bne.n	80015ee <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80015e4:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <menu+0x528>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	2002      	movs	r0, #2
 80015ea:	f006 fa4f 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015ee:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <menu+0x504>)
 80015f0:	210f      	movs	r1, #15
 80015f2:	2002      	movs	r0, #2
 80015f4:	f006 fa4a 	bl	8007a8c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <menu+0x52c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	220a      	movs	r2, #10
 80015fe:	492b      	ldr	r1, [pc, #172]	; (80016ac <menu+0x4f8>)
 8001600:	4618      	mov	r0, r3
 8001602:	f00a fd95 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 8001606:	4a29      	ldr	r2, [pc, #164]	; (80016ac <menu+0x4f8>)
 8001608:	210e      	movs	r1, #14
 800160a:	2002      	movs	r0, #2
 800160c:	f006 fa3e 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <menu+0x4e4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d123      	bne.n	8001660 <menu+0x4ac>
			if(dilSecim == 0) {
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <menu+0x4cc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001620:	4a30      	ldr	r2, [pc, #192]	; (80016e4 <menu+0x530>)
 8001622:	2101      	movs	r1, #1
 8001624:	2002      	movs	r0, #2
 8001626:	f006 fa31 	bl	8007a8c <lcd_print>
 800162a:	e008      	b.n	800163e <menu+0x48a>
			} else if(dilSecim == 1) {
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <menu+0x4cc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d104      	bne.n	800163e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001634:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <menu+0x534>)
 8001636:	2101      	movs	r1, #1
 8001638:	2002      	movs	r0, #2
 800163a:	f006 fa27 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <menu+0x504>)
 8001640:	210f      	movs	r1, #15
 8001642:	2002      	movs	r0, #2
 8001644:	f006 fa22 	bl	8007a8c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001648:	4b28      	ldr	r3, [pc, #160]	; (80016ec <menu+0x538>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	220a      	movs	r2, #10
 800164e:	4917      	ldr	r1, [pc, #92]	; (80016ac <menu+0x4f8>)
 8001650:	4618      	mov	r0, r3
 8001652:	f00a fd6d 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <menu+0x4f8>)
 8001658:	210e      	movs	r1, #14
 800165a:	2002      	movs	r0, #2
 800165c:	f006 fa16 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <menu+0x4e4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b06      	cmp	r3, #6
 8001666:	d15f      	bne.n	8001728 <menu+0x574>
			if(dilSecim == 0) {
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <menu+0x4cc>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d141      	bne.n	80016f4 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <menu+0x53c>)
 8001672:	2101      	movs	r1, #1
 8001674:	2002      	movs	r0, #2
 8001676:	f006 fa09 	bl	8007a8c <lcd_print>
 800167a:	e044      	b.n	8001706 <menu+0x552>
 800167c:	0800ce54 	.word	0x0800ce54
 8001680:	20000215 	.word	0x20000215
 8001684:	0800ce68 	.word	0x0800ce68
 8001688:	0800ce7c 	.word	0x0800ce7c
 800168c:	200001f4 	.word	0x200001f4
 8001690:	0800ce90 	.word	0x0800ce90
 8001694:	0800cea4 	.word	0x0800cea4
 8001698:	200001f6 	.word	0x200001f6
 800169c:	0800ceb8 	.word	0x0800ceb8
 80016a0:	0800cec8 	.word	0x0800cec8
 80016a4:	0800ced8 	.word	0x0800ced8
 80016a8:	20000216 	.word	0x20000216
 80016ac:	20000190 	.word	0x20000190
 80016b0:	0800cedc 	.word	0x0800cedc
 80016b4:	0800ceec 	.word	0x0800ceec
 80016b8:	0800cefc 	.word	0x0800cefc
 80016bc:	20000217 	.word	0x20000217
 80016c0:	0800cf00 	.word	0x0800cf00
 80016c4:	0800cf10 	.word	0x0800cf10
 80016c8:	20000218 	.word	0x20000218
 80016cc:	0800cf20 	.word	0x0800cf20
 80016d0:	0800cf30 	.word	0x0800cf30
 80016d4:	20000219 	.word	0x20000219
 80016d8:	0800cf40 	.word	0x0800cf40
 80016dc:	0800cf50 	.word	0x0800cf50
 80016e0:	2000021a 	.word	0x2000021a
 80016e4:	0800cf60 	.word	0x0800cf60
 80016e8:	0800cf70 	.word	0x0800cf70
 80016ec:	2000021b 	.word	0x2000021b
 80016f0:	0800cf80 	.word	0x0800cf80
			} else if(dilSecim == 1) {
 80016f4:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <menu+0x680>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d104      	bne.n	8001706 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80016fc:	4a4e      	ldr	r2, [pc, #312]	; (8001838 <menu+0x684>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2002      	movs	r0, #2
 8001702:	f006 f9c3 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001706:	4a4d      	ldr	r2, [pc, #308]	; (800183c <menu+0x688>)
 8001708:	210f      	movs	r1, #15
 800170a:	2002      	movs	r0, #2
 800170c:	f006 f9be 	bl	8007a8c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001710:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <menu+0x68c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	220a      	movs	r2, #10
 8001716:	494b      	ldr	r1, [pc, #300]	; (8001844 <menu+0x690>)
 8001718:	4618      	mov	r0, r3
 800171a:	f00a fd09 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 800171e:	4a49      	ldr	r2, [pc, #292]	; (8001844 <menu+0x690>)
 8001720:	210e      	movs	r1, #14
 8001722:	2002      	movs	r0, #2
 8001724:	f006 f9b2 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001728:	4b47      	ldr	r3, [pc, #284]	; (8001848 <menu+0x694>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b07      	cmp	r3, #7
 800172e:	d123      	bne.n	8001778 <menu+0x5c4>
			if(dilSecim == 0) {
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <menu+0x680>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001738:	4a44      	ldr	r2, [pc, #272]	; (800184c <menu+0x698>)
 800173a:	2101      	movs	r1, #1
 800173c:	2002      	movs	r0, #2
 800173e:	f006 f9a5 	bl	8007a8c <lcd_print>
 8001742:	e008      	b.n	8001756 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <menu+0x680>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d104      	bne.n	8001756 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 800174c:	4a40      	ldr	r2, [pc, #256]	; (8001850 <menu+0x69c>)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f006 f99b 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001756:	4a39      	ldr	r2, [pc, #228]	; (800183c <menu+0x688>)
 8001758:	210f      	movs	r1, #15
 800175a:	2002      	movs	r0, #2
 800175c:	f006 f996 	bl	8007a8c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001760:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <menu+0x6a0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	220a      	movs	r2, #10
 8001766:	4937      	ldr	r1, [pc, #220]	; (8001844 <menu+0x690>)
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fce1 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 800176e:	4a35      	ldr	r2, [pc, #212]	; (8001844 <menu+0x690>)
 8001770:	210e      	movs	r1, #14
 8001772:	2002      	movs	r0, #2
 8001774:	f006 f98a 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <menu+0x694>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d123      	bne.n	80017c8 <menu+0x614>
			if(dilSecim == 0) {
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <menu+0x680>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001788:	4a33      	ldr	r2, [pc, #204]	; (8001858 <menu+0x6a4>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f006 f97d 	bl	8007a8c <lcd_print>
 8001792:	e008      	b.n	80017a6 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <menu+0x680>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d104      	bne.n	80017a6 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 800179c:	4a2f      	ldr	r2, [pc, #188]	; (800185c <menu+0x6a8>)
 800179e:	2101      	movs	r1, #1
 80017a0:	2002      	movs	r0, #2
 80017a2:	f006 f973 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017a6:	4a25      	ldr	r2, [pc, #148]	; (800183c <menu+0x688>)
 80017a8:	210f      	movs	r1, #15
 80017aa:	2002      	movs	r0, #2
 80017ac:	f006 f96e 	bl	8007a8c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <menu+0x6ac>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	220a      	movs	r2, #10
 80017b6:	4923      	ldr	r1, [pc, #140]	; (8001844 <menu+0x690>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00a fcb9 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 80017be:	4a21      	ldr	r2, [pc, #132]	; (8001844 <menu+0x690>)
 80017c0:	210e      	movs	r1, #14
 80017c2:	2002      	movs	r0, #2
 80017c4:	f006 f962 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <menu+0x694>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	d123      	bne.n	8001818 <menu+0x664>
			if(dilSecim == 0) {
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <menu+0x680>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80017d8:	4a22      	ldr	r2, [pc, #136]	; (8001864 <menu+0x6b0>)
 80017da:	2101      	movs	r1, #1
 80017dc:	2002      	movs	r0, #2
 80017de:	f006 f955 	bl	8007a8c <lcd_print>
 80017e2:	e008      	b.n	80017f6 <menu+0x642>
			} else if(dilSecim == 1) {
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <menu+0x680>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d104      	bne.n	80017f6 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <menu+0x6b4>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	2002      	movs	r0, #2
 80017f2:	f006 f94b 	bl	8007a8c <lcd_print>
			}
			lcd_print(2, 16, " ");
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <menu+0x6b8>)
 80017f8:	2110      	movs	r1, #16
 80017fa:	2002      	movs	r0, #2
 80017fc:	f006 f946 	bl	8007a8c <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <menu+0x6bc>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	220a      	movs	r2, #10
 8001806:	490f      	ldr	r1, [pc, #60]	; (8001844 <menu+0x690>)
 8001808:	4618      	mov	r0, r3
 800180a:	f00a fc91 	bl	800c130 <itoa>
			lcd_print(2, 15, snum);
 800180e:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <menu+0x690>)
 8001810:	210f      	movs	r1, #15
 8001812:	2002      	movs	r0, #2
 8001814:	f006 f93a 	bl	8007a8c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <menu+0x694>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b0a      	cmp	r3, #10
 800181e:	d134      	bne.n	800188a <menu+0x6d6>
			if(dilSecim == 0) {
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <menu+0x680>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d127      	bne.n	8001878 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <menu+0x6c0>)
 800182a:	2101      	movs	r1, #1
 800182c:	2002      	movs	r0, #2
 800182e:	f006 f92d 	bl	8007a8c <lcd_print>
 8001832:	e02a      	b.n	800188a <menu+0x6d6>
 8001834:	20000215 	.word	0x20000215
 8001838:	0800cf90 	.word	0x0800cf90
 800183c:	0800cefc 	.word	0x0800cefc
 8001840:	2000021c 	.word	0x2000021c
 8001844:	20000190 	.word	0x20000190
 8001848:	200001f6 	.word	0x200001f6
 800184c:	0800cfa0 	.word	0x0800cfa0
 8001850:	0800cfb0 	.word	0x0800cfb0
 8001854:	2000021d 	.word	0x2000021d
 8001858:	0800cfc0 	.word	0x0800cfc0
 800185c:	0800cfd0 	.word	0x0800cfd0
 8001860:	2000021e 	.word	0x2000021e
 8001864:	0800cfe0 	.word	0x0800cfe0
 8001868:	0800cff0 	.word	0x0800cff0
 800186c:	0800d000 	.word	0x0800d000
 8001870:	2000021f 	.word	0x2000021f
 8001874:	0800d004 	.word	0x0800d004
			} else if(dilSecim == 1) {
 8001878:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <menu+0x8d0>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001880:	4a81      	ldr	r2, [pc, #516]	; (8001a88 <menu+0x8d4>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f006 f901 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800188a:	2102      	movs	r1, #2
 800188c:	487f      	ldr	r0, [pc, #508]	; (8001a8c <menu+0x8d8>)
 800188e:	f007 fc23 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b01      	cmp	r3, #1
 8001896:	d119      	bne.n	80018cc <menu+0x718>
 8001898:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <menu+0x8dc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d012      	beq.n	80018cc <menu+0x718>
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <menu+0x8e0>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <menu+0x8e4>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <menu+0x8e4>)
 80018b8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80018ba:	4b77      	ldr	r3, [pc, #476]	; (8001a98 <menu+0x8e4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	d902      	bls.n	80018c8 <menu+0x714>
				hataGostermeSirasi = 0;
 80018c2:	4b75      	ldr	r3, [pc, #468]	; (8001a98 <menu+0x8e4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018c8:	f003 f840 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018cc:	2104      	movs	r1, #4
 80018ce:	486f      	ldr	r0, [pc, #444]	; (8001a8c <menu+0x8d8>)
 80018d0:	f007 fc02 	bl	80090d8 <HAL_GPIO_ReadPin>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d119      	bne.n	800190e <menu+0x75a>
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <menu+0x8dc>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f083 0301 	eor.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <menu+0x75a>
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <menu+0x8e0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10e      	bne.n	800190e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018f0:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <menu+0x8e4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <menu+0x8e4>)
 80018fa:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <menu+0x8e4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b0b      	cmp	r3, #11
 8001902:	d902      	bls.n	800190a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <menu+0x8e4>)
 8001906:	220a      	movs	r2, #10
 8001908:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800190a:	f003 f81f 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800190e:	2108      	movs	r1, #8
 8001910:	485e      	ldr	r0, [pc, #376]	; (8001a8c <menu+0x8d8>)
 8001912:	f007 fbe1 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b01      	cmp	r3, #1
 800191a:	d153      	bne.n	80019c4 <menu+0x810>
 800191c:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <menu+0x8dc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	f083 0301 	eor.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d04c      	beq.n	80019c4 <menu+0x810>
 800192a:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <menu+0x8e4>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b0a      	cmp	r3, #10
 8001930:	d148      	bne.n	80019c4 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001932:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <menu+0x8e8>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <menu+0x8ec>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <menu+0x8f0>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <menu+0x8ec>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <menu+0x8f4>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <menu+0x8ec>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <menu+0x8f8>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <menu+0x8ec>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <menu+0x8fc>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	4b4b      	ldr	r3, [pc, #300]	; (8001aa0 <menu+0x8ec>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001978:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <menu+0x900>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <menu+0x8ec>)
 8001980:	2200      	movs	r2, #0
 8001982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <menu+0x904>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <menu+0x8ec>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <menu+0x908>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <menu+0x8ec>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <menu+0x90c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <menu+0x8ec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <menu+0x910>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <menu+0x8ec>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80019be:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <menu+0x914>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <menu+0x918>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 80fc 	bne.w	8001bc6 <menu+0xa12>
		if(dilSecim == 0) {
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <menu+0x8d0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <menu+0x91c>)
 80019d8:	2101      	movs	r1, #1
 80019da:	2001      	movs	r0, #1
 80019dc:	f006 f856 	bl	8007a8c <lcd_print>
 80019e0:	e008      	b.n	80019f4 <menu+0x840>
		} else if(dilSecim == 1) {
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <menu+0x8d0>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d104      	bne.n	80019f4 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80019ea:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <menu+0x920>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	2001      	movs	r0, #1
 80019f0:	f006 f84c 	bl	8007a8c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <menu+0x8e0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d003      	beq.n	8001a04 <menu+0x850>
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <menu+0x8e0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d112      	bne.n	8001a2a <menu+0x876>
			if(dilSecim == 0) {
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <menu+0x8d0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001a0c:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <menu+0x924>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2002      	movs	r0, #2
 8001a12:	f006 f83b 	bl	8007a8c <lcd_print>
 8001a16:	e008      	b.n	8001a2a <menu+0x876>
			} else if(dilSecim == 1) {
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <menu+0x8d0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d104      	bne.n	8001a2a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a20:	4a2e      	ldr	r2, [pc, #184]	; (8001adc <menu+0x928>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	2002      	movs	r0, #2
 8001a26:	f006 f831 	bl	8007a8c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <menu+0x92c>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <menu+0x8ac>
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <menu+0x8e0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d112      	bne.n	8001a60 <menu+0x8ac>
			if(dilSecim == 0) {
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <menu+0x8d0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a42:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <menu+0x930>)
 8001a44:	2101      	movs	r1, #1
 8001a46:	2002      	movs	r0, #2
 8001a48:	f006 f820 	bl	8007a8c <lcd_print>
 8001a4c:	e008      	b.n	8001a60 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <menu+0x8d0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d104      	bne.n	8001a60 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001a56:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <menu+0x934>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f006 f816 	bl	8007a8c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <menu+0x92c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d14c      	bne.n	8001b02 <menu+0x94e>
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <menu+0x8e0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d148      	bne.n	8001b02 <menu+0x94e>
			if(dilSecim == 0) {
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <menu+0x8d0>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13b      	bne.n	8001af0 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <menu+0x938>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f006 f805 	bl	8007a8c <lcd_print>
 8001a82:	e03e      	b.n	8001b02 <menu+0x94e>
 8001a84:	20000215 	.word	0x20000215
 8001a88:	0800d018 	.word	0x0800d018
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	20000223 	.word	0x20000223
 8001a94:	20000203 	.word	0x20000203
 8001a98:	200001f6 	.word	0x200001f6
 8001a9c:	20000216 	.word	0x20000216
 8001aa0:	20000120 	.word	0x20000120
 8001aa4:	20000217 	.word	0x20000217
 8001aa8:	20000218 	.word	0x20000218
 8001aac:	20000219 	.word	0x20000219
 8001ab0:	2000021a 	.word	0x2000021a
 8001ab4:	2000021b 	.word	0x2000021b
 8001ab8:	2000021c 	.word	0x2000021c
 8001abc:	2000021d 	.word	0x2000021d
 8001ac0:	2000021e 	.word	0x2000021e
 8001ac4:	2000021f 	.word	0x2000021f
 8001ac8:	20000220 	.word	0x20000220
 8001acc:	200001f4 	.word	0x200001f4
 8001ad0:	0800d02c 	.word	0x0800d02c
 8001ad4:	0800d040 	.word	0x0800d040
 8001ad8:	0800d054 	.word	0x0800d054
 8001adc:	0800d068 	.word	0x0800d068
 8001ae0:	200001f5 	.word	0x200001f5
 8001ae4:	0800d07c 	.word	0x0800d07c
 8001ae8:	0800d08c 	.word	0x0800d08c
 8001aec:	0800d09c 	.word	0x0800d09c
			} else if(dilSecim == 1) {
 8001af0:	4b98      	ldr	r3, [pc, #608]	; (8001d54 <menu+0xba0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001af8:	4a97      	ldr	r2, [pc, #604]	; (8001d58 <menu+0xba4>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2002      	movs	r0, #2
 8001afe:	f005 ffc5 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b02:	2102      	movs	r1, #2
 8001b04:	4895      	ldr	r0, [pc, #596]	; (8001d5c <menu+0xba8>)
 8001b06:	f007 fae7 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d119      	bne.n	8001b44 <menu+0x990>
 8001b10:	4b93      	ldr	r3, [pc, #588]	; (8001d60 <menu+0xbac>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	f083 0301 	eor.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d012      	beq.n	8001b44 <menu+0x990>
 8001b1e:	4b91      	ldr	r3, [pc, #580]	; (8001d64 <menu+0xbb0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10e      	bne.n	8001b44 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b26:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <menu+0xbb4>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b8e      	ldr	r3, [pc, #568]	; (8001d68 <menu+0xbb4>)
 8001b30:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b32:	4b8d      	ldr	r3, [pc, #564]	; (8001d68 <menu+0xbb4>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d902      	bls.n	8001b40 <menu+0x98c>
				calismaSekli = 0;
 8001b3a:	4b8b      	ldr	r3, [pc, #556]	; (8001d68 <menu+0xbb4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b40:	f002 ff04 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b44:	2104      	movs	r1, #4
 8001b46:	4885      	ldr	r0, [pc, #532]	; (8001d5c <menu+0xba8>)
 8001b48:	f007 fac6 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d119      	bne.n	8001b86 <menu+0x9d2>
 8001b52:	4b83      	ldr	r3, [pc, #524]	; (8001d60 <menu+0xbac>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f083 0301 	eor.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d012      	beq.n	8001b86 <menu+0x9d2>
 8001b60:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <menu+0xbb0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10e      	bne.n	8001b86 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001b68:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <menu+0xbb4>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <menu+0xbb4>)
 8001b72:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b74:	4b7c      	ldr	r3, [pc, #496]	; (8001d68 <menu+0xbb4>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <menu+0x9ce>
	    		calismaSekli = 1;
 8001b7c:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <menu+0xbb4>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b82:	f002 fee3 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b86:	2108      	movs	r1, #8
 8001b88:	4874      	ldr	r0, [pc, #464]	; (8001d5c <menu+0xba8>)
 8001b8a:	f007 faa5 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d118      	bne.n	8001bc6 <menu+0xa12>
 8001b94:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <menu+0xbac>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d011      	beq.n	8001bc6 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001ba2:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <menu+0xbb4>)
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <menu+0xbb8>)
 8001ba8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001baa:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <menu+0xbb4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <menu+0xa0c>
				altLimit = 1;
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <menu+0xbbc>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001bb8:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <menu+0xbbc>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <menu+0xbb8>)
 8001bbe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <menu+0xbc0>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <menu+0xbc4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	f040 8083 	bne.w	8001cd6 <menu+0xb22>
		if(dilSecim == 0) {
 8001bd0:	4b60      	ldr	r3, [pc, #384]	; (8001d54 <menu+0xba0>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001bd8:	4a68      	ldr	r2, [pc, #416]	; (8001d7c <menu+0xbc8>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f005 ff55 	bl	8007a8c <lcd_print>
 8001be2:	e008      	b.n	8001bf6 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001be4:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <menu+0xba0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d104      	bne.n	8001bf6 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001bec:	4a64      	ldr	r2, [pc, #400]	; (8001d80 <menu+0xbcc>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f005 ff4b 	bl	8007a8c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001bf6:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <menu+0xbd0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d113      	bne.n	8001c26 <menu+0xa72>
			if(dilSecim == 0) {
 8001bfe:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <menu+0xba0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001c06:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <menu+0xbd4>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f005 ff3e 	bl	8007a8c <lcd_print>
 8001c10:	e012      	b.n	8001c38 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <menu+0xba0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10e      	bne.n	8001c38 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001c1a:	4a5c      	ldr	r2, [pc, #368]	; (8001d8c <menu+0xbd8>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f005 ff34 	bl	8007a8c <lcd_print>
 8001c24:	e008      	b.n	8001c38 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <menu+0xbd0>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d104      	bne.n	8001c38 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c2e:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <menu+0xbdc>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	2002      	movs	r0, #2
 8001c34:	f005 ff2a 	bl	8007a8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4848      	ldr	r0, [pc, #288]	; (8001d5c <menu+0xba8>)
 8001c3c:	f007 fa4c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d115      	bne.n	8001c72 <menu+0xabe>
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <menu+0xbac>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <menu+0xbd0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <menu+0xbd0>)
 8001c5e:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001c60:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <menu+0xbd0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d902      	bls.n	8001c6e <menu+0xaba>
				emniyetCercevesi = 0;
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <menu+0xbd0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c6e:	f002 fe6d 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c72:	2104      	movs	r1, #4
 8001c74:	4839      	ldr	r0, [pc, #228]	; (8001d5c <menu+0xba8>)
 8001c76:	f007 fa2f 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d115      	bne.n	8001cac <menu+0xaf8>
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <menu+0xbac>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <menu+0xbd0>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <menu+0xbd0>)
 8001c98:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <menu+0xbd0>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <menu+0xbd0>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ca8:	f002 fe50 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001cac:	2108      	movs	r1, #8
 8001cae:	482b      	ldr	r0, [pc, #172]	; (8001d5c <menu+0xba8>)
 8001cb0:	f007 fa12 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10d      	bne.n	8001cd6 <menu+0xb22>
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <menu+0xbac>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <menu+0xbd0>)
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <menu+0xbb8>)
 8001cce:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <menu+0xbc0>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <menu+0xbc4>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	f040 80ba 	bne.w	8001e54 <menu+0xca0>
		if(dilSecim == 0) {
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <menu+0xba0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ce8:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <menu+0xbe0>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	2001      	movs	r0, #1
 8001cee:	f005 fecd 	bl	8007a8c <lcd_print>
 8001cf2:	e008      	b.n	8001d06 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <menu+0xba0>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d104      	bne.n	8001d06 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001cfc:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <menu+0xbe4>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	2001      	movs	r0, #1
 8001d02:	f005 fec3 	bl	8007a8c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <menu+0xbe8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d113      	bne.n	8001d36 <menu+0xb82>
			if(dilSecim == 0) {
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <menu+0xba0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <menu+0xbd4>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f005 feb6 	bl	8007a8c <lcd_print>
 8001d20:	e049      	b.n	8001db6 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <menu+0xba0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d145      	bne.n	8001db6 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <menu+0xbd8>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f005 feac 	bl	8007a8c <lcd_print>
 8001d34:	e03f      	b.n	8001db6 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <menu+0xbe8>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d13b      	bne.n	8001db6 <menu+0xc02>
			if(dilSecim == 0) {
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <menu+0xba0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d12e      	bne.n	8001da4 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <menu+0xbec>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f005 fe9e 	bl	8007a8c <lcd_print>
 8001d50:	e031      	b.n	8001db6 <menu+0xc02>
 8001d52:	bf00      	nop
 8001d54:	20000215 	.word	0x20000215
 8001d58:	0800d0ac 	.word	0x0800d0ac
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	20000223 	.word	0x20000223
 8001d64:	20000203 	.word	0x20000203
 8001d68:	200001f5 	.word	0x200001f5
 8001d6c:	20000120 	.word	0x20000120
 8001d70:	200001fa 	.word	0x200001fa
 8001d74:	20000220 	.word	0x20000220
 8001d78:	200001f4 	.word	0x200001f4
 8001d7c:	0800d0bc 	.word	0x0800d0bc
 8001d80:	0800d0d0 	.word	0x0800d0d0
 8001d84:	200001f8 	.word	0x200001f8
 8001d88:	0800d0e4 	.word	0x0800d0e4
 8001d8c:	0800d0f8 	.word	0x0800d0f8
 8001d90:	0800d10c 	.word	0x0800d10c
 8001d94:	0800d11c 	.word	0x0800d11c
 8001d98:	0800d130 	.word	0x0800d130
 8001d9c:	200001f9 	.word	0x200001f9
 8001da0:	0800d144 	.word	0x0800d144
			} else if(dilSecim == 1) {
 8001da4:	4b92      	ldr	r3, [pc, #584]	; (8001ff0 <menu+0xe3c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d104      	bne.n	8001db6 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001dac:	4a91      	ldr	r2, [pc, #580]	; (8001ff4 <menu+0xe40>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	2002      	movs	r0, #2
 8001db2:	f005 fe6b 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001db6:	2102      	movs	r1, #2
 8001db8:	488f      	ldr	r0, [pc, #572]	; (8001ff8 <menu+0xe44>)
 8001dba:	f007 f98d 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d115      	bne.n	8001df0 <menu+0xc3c>
 8001dc4:	4b8d      	ldr	r3, [pc, #564]	; (8001ffc <menu+0xe48>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00e      	beq.n	8001df0 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <menu+0xe4c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <menu+0xe4c>)
 8001ddc:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <menu+0xe4c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d902      	bls.n	8001dec <menu+0xc38>
				yavaslamaLimit = 0;
 8001de6:	4b86      	ldr	r3, [pc, #536]	; (8002000 <menu+0xe4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dec:	f002 fdae 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001df0:	2104      	movs	r1, #4
 8001df2:	4881      	ldr	r0, [pc, #516]	; (8001ff8 <menu+0xe44>)
 8001df4:	f007 f970 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d115      	bne.n	8001e2a <menu+0xc76>
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <menu+0xe48>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e0c:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <menu+0xe4c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <menu+0xe4c>)
 8001e16:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <menu+0xe4c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e20:	4b77      	ldr	r3, [pc, #476]	; (8002000 <menu+0xe4c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e26:	f002 fd91 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	4872      	ldr	r0, [pc, #456]	; (8001ff8 <menu+0xe44>)
 8001e2e:	f007 f953 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10d      	bne.n	8001e54 <menu+0xca0>
 8001e38:	4b70      	ldr	r3, [pc, #448]	; (8001ffc <menu+0xe48>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e46:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <menu+0xe4c>)
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <menu+0xe50>)
 8001e4c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e4e:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <menu+0xe54>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <menu+0xe58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	f040 80b9 	bne.w	8001fd0 <menu+0xe1c>
		if(dilSecim == 0) {
 8001e5e:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <menu+0xe3c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001e66:	4a6a      	ldr	r2, [pc, #424]	; (8002010 <menu+0xe5c>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f005 fe0e 	bl	8007a8c <lcd_print>
 8001e70:	e008      	b.n	8001e84 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <menu+0xe3c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d104      	bne.n	8001e84 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001e7a:	4a66      	ldr	r2, [pc, #408]	; (8002014 <menu+0xe60>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f005 fe04 	bl	8007a8c <lcd_print>
		}

		if(altLimit == 0) {
 8001e84:	4b64      	ldr	r3, [pc, #400]	; (8002018 <menu+0xe64>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d113      	bne.n	8001eb4 <menu+0xd00>
			if(dilSecim == 0) {
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <menu+0xe3c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e94:	4a61      	ldr	r2, [pc, #388]	; (800201c <menu+0xe68>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f005 fdf7 	bl	8007a8c <lcd_print>
 8001e9e:	e020      	b.n	8001ee2 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <menu+0xe3c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d11c      	bne.n	8001ee2 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <menu+0xe6c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2002      	movs	r0, #2
 8001eae:	f005 fded 	bl	8007a8c <lcd_print>
 8001eb2:	e016      	b.n	8001ee2 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001eb4:	4b58      	ldr	r3, [pc, #352]	; (8002018 <menu+0xe64>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d112      	bne.n	8001ee2 <menu+0xd2e>
			if(dilSecim == 0){
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <menu+0xe3c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001ec4:	4a57      	ldr	r2, [pc, #348]	; (8002024 <menu+0xe70>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f005 fddf 	bl	8007a8c <lcd_print>
 8001ece:	e008      	b.n	8001ee2 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <menu+0xe3c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d104      	bne.n	8001ee2 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001ed8:	4a46      	ldr	r2, [pc, #280]	; (8001ff4 <menu+0xe40>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2002      	movs	r0, #2
 8001ede:	f005 fdd5 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	4844      	ldr	r0, [pc, #272]	; (8001ff8 <menu+0xe44>)
 8001ee6:	f007 f8f7 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d119      	bne.n	8001f24 <menu+0xd70>
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <menu+0xe48>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d012      	beq.n	8001f24 <menu+0xd70>
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <menu+0xe74>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10e      	bne.n	8001f24 <menu+0xd70>
			altLimit = altLimit + 1;
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <menu+0xe64>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b42      	ldr	r3, [pc, #264]	; (8002018 <menu+0xe64>)
 8001f10:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <menu+0xe64>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d902      	bls.n	8001f20 <menu+0xd6c>
				altLimit = 0;
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <menu+0xe64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f20:	f002 fd14 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f24:	2104      	movs	r1, #4
 8001f26:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <menu+0xe44>)
 8001f28:	f007 f8d6 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d119      	bne.n	8001f66 <menu+0xdb2>
 8001f32:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <menu+0xe48>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <menu+0xdb2>
 8001f40:	4b39      	ldr	r3, [pc, #228]	; (8002028 <menu+0xe74>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10e      	bne.n	8001f66 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f48:	4b33      	ldr	r3, [pc, #204]	; (8002018 <menu+0xe64>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <menu+0xe64>)
 8001f52:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <menu+0xe64>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <menu+0xdae>
		   		altLimit = 1;
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <menu+0xe64>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f62:	f002 fcf3 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f66:	2108      	movs	r1, #8
 8001f68:	4823      	ldr	r0, [pc, #140]	; (8001ff8 <menu+0xe44>)
 8001f6a:	f007 f8b5 	bl	80090d8 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d12d      	bne.n	8001fd0 <menu+0xe1c>
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <menu+0xe48>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d026      	beq.n	8001fd0 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <menu+0xe64>)
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <menu+0xe50>)
 8001f88:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <menu+0xe64>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d110      	bne.n	8001fb4 <menu+0xe00>
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <menu+0xe78>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <menu+0xdee>
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <menu+0xe78>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d108      	bne.n	8001fb4 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <menu+0xe78>)
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <menu+0xe78>)
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <menu+0xe50>)
 8001fae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001fb2:	e00a      	b.n	8001fca <menu+0xe16>
			} else if(altLimit == 0) {
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <menu+0xe64>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <menu+0xe16>
				platformSilindirTipi = 0;
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <menu+0xe7c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <menu+0xe7c>)
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <menu+0xe50>)
 8001fc8:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <menu+0xe54>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <menu+0xe58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b06      	cmp	r3, #6
 8001fd6:	f040 80b6 	bne.w	8002146 <menu+0xf92>
		if(dilSecim == 0) {
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <menu+0xe3c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d12a      	bne.n	8002038 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <menu+0xe80>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f005 fd50 	bl	8007a8c <lcd_print>
 8001fec:	e02d      	b.n	800204a <menu+0xe96>
 8001fee:	bf00      	nop
 8001ff0:	20000215 	.word	0x20000215
 8001ff4:	0800d158 	.word	0x0800d158
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	20000223 	.word	0x20000223
 8002000:	200001f9 	.word	0x200001f9
 8002004:	20000120 	.word	0x20000120
 8002008:	20000220 	.word	0x20000220
 800200c:	200001f4 	.word	0x200001f4
 8002010:	0800d16c 	.word	0x0800d16c
 8002014:	0800d180 	.word	0x0800d180
 8002018:	200001fa 	.word	0x200001fa
 800201c:	0800d0e4 	.word	0x0800d0e4
 8002020:	0800d0f8 	.word	0x0800d0f8
 8002024:	0800d144 	.word	0x0800d144
 8002028:	200001f5 	.word	0x200001f5
 800202c:	20000201 	.word	0x20000201
 8002030:	20000207 	.word	0x20000207
 8002034:	0800d194 	.word	0x0800d194
		} else if(dilSecim == 1){
 8002038:	4b7a      	ldr	r3, [pc, #488]	; (8002224 <menu+0x1070>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d104      	bne.n	800204a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002040:	4a79      	ldr	r2, [pc, #484]	; (8002228 <menu+0x1074>)
 8002042:	2101      	movs	r1, #1
 8002044:	2001      	movs	r0, #1
 8002046:	f005 fd21 	bl	8007a8c <lcd_print>
		}
		if(basincSalteri == 0){
 800204a:	4b78      	ldr	r3, [pc, #480]	; (800222c <menu+0x1078>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d113      	bne.n	800207a <menu+0xec6>
			if(dilSecim == 0) {
 8002052:	4b74      	ldr	r3, [pc, #464]	; (8002224 <menu+0x1070>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800205a:	4a75      	ldr	r2, [pc, #468]	; (8002230 <menu+0x107c>)
 800205c:	2101      	movs	r1, #1
 800205e:	2002      	movs	r0, #2
 8002060:	f005 fd14 	bl	8007a8c <lcd_print>
 8002064:	e020      	b.n	80020a8 <menu+0xef4>
			} else if(dilSecim == 1){
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <menu+0x1070>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11c      	bne.n	80020a8 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800206e:	4a71      	ldr	r2, [pc, #452]	; (8002234 <menu+0x1080>)
 8002070:	2101      	movs	r1, #1
 8002072:	2002      	movs	r0, #2
 8002074:	f005 fd0a 	bl	8007a8c <lcd_print>
 8002078:	e016      	b.n	80020a8 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800207a:	4b6c      	ldr	r3, [pc, #432]	; (800222c <menu+0x1078>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d112      	bne.n	80020a8 <menu+0xef4>
			if(dilSecim == 0) {
 8002082:	4b68      	ldr	r3, [pc, #416]	; (8002224 <menu+0x1070>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800208a:	4a6b      	ldr	r2, [pc, #428]	; (8002238 <menu+0x1084>)
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f005 fcfc 	bl	8007a8c <lcd_print>
 8002094:	e008      	b.n	80020a8 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <menu+0x1070>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d104      	bne.n	80020a8 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800209e:	4a67      	ldr	r2, [pc, #412]	; (800223c <menu+0x1088>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	2002      	movs	r0, #2
 80020a4:	f005 fcf2 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020a8:	2102      	movs	r1, #2
 80020aa:	4865      	ldr	r0, [pc, #404]	; (8002240 <menu+0x108c>)
 80020ac:	f007 f814 	bl	80090d8 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d115      	bne.n	80020e2 <menu+0xf2e>
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <menu+0x1090>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <menu+0x1078>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <menu+0x1078>)
 80020ce:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80020d0:	4b56      	ldr	r3, [pc, #344]	; (800222c <menu+0x1078>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d902      	bls.n	80020de <menu+0xf2a>
				basincSalteri = 0;
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <menu+0x1078>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020de:	f002 fc35 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e2:	2104      	movs	r1, #4
 80020e4:	4856      	ldr	r0, [pc, #344]	; (8002240 <menu+0x108c>)
 80020e6:	f006 fff7 	bl	80090d8 <HAL_GPIO_ReadPin>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d115      	bne.n	800211c <menu+0xf68>
 80020f0:	4b54      	ldr	r3, [pc, #336]	; (8002244 <menu+0x1090>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00e      	beq.n	800211c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80020fe:	4b4b      	ldr	r3, [pc, #300]	; (800222c <menu+0x1078>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b49      	ldr	r3, [pc, #292]	; (800222c <menu+0x1078>)
 8002108:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800210a:	4b48      	ldr	r3, [pc, #288]	; (800222c <menu+0x1078>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <menu+0xf64>
		   		basincSalteri = 1;
 8002112:	4b46      	ldr	r3, [pc, #280]	; (800222c <menu+0x1078>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002118:	f002 fc18 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800211c:	2108      	movs	r1, #8
 800211e:	4848      	ldr	r0, [pc, #288]	; (8002240 <menu+0x108c>)
 8002120:	f006 ffda 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10d      	bne.n	8002146 <menu+0xf92>
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <menu+0x1090>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <menu+0x1078>)
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <menu+0x1094>)
 800213e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <menu+0x1098>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <menu+0x109c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b07      	cmp	r3, #7
 800214c:	f040 80f5 	bne.w	800233a <menu+0x1186>
		if(dilSecim == 0) {
 8002150:	4b34      	ldr	r3, [pc, #208]	; (8002224 <menu+0x1070>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002158:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <menu+0x10a0>)
 800215a:	2101      	movs	r1, #1
 800215c:	2001      	movs	r0, #1
 800215e:	f005 fc95 	bl	8007a8c <lcd_print>
 8002162:	e008      	b.n	8002176 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002164:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <menu+0x1070>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d104      	bne.n	8002176 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800216c:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <menu+0x10a4>)
 800216e:	2101      	movs	r1, #1
 8002170:	2001      	movs	r0, #1
 8002172:	f005 fc8b 	bl	8007a8c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <menu+0x10a8>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d113      	bne.n	80021a6 <menu+0xff2>
			if(dilSecim == 0) {
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <menu+0x1070>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002186:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <menu+0x107c>)
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f005 fc7e 	bl	8007a8c <lcd_print>
 8002190:	e079      	b.n	8002286 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <menu+0x1070>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d175      	bne.n	8002286 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <menu+0x1080>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f005 fc74 	bl	8007a8c <lcd_print>
 80021a4:	e06f      	b.n	8002286 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <menu+0x10a8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d113      	bne.n	80021d6 <menu+0x1022>
			if(dilSecim == 0) {
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <menu+0x1070>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80021b6:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <menu+0x10ac>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2002      	movs	r0, #2
 80021bc:	f005 fc66 	bl	8007a8c <lcd_print>
 80021c0:	e061      	b.n	8002286 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <menu+0x1070>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d15d      	bne.n	8002286 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80021ca:	4a26      	ldr	r2, [pc, #152]	; (8002264 <menu+0x10b0>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f005 fc5c 	bl	8007a8c <lcd_print>
 80021d4:	e057      	b.n	8002286 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <menu+0x10a8>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d113      	bne.n	8002206 <menu+0x1052>
			if(dilSecim == 0) {
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <menu+0x1070>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80021e6:	4a20      	ldr	r2, [pc, #128]	; (8002268 <menu+0x10b4>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	2002      	movs	r0, #2
 80021ec:	f005 fc4e 	bl	8007a8c <lcd_print>
 80021f0:	e049      	b.n	8002286 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <menu+0x1070>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d145      	bne.n	8002286 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <menu+0x10b8>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	2002      	movs	r0, #2
 8002200:	f005 fc44 	bl	8007a8c <lcd_print>
 8002204:	e03f      	b.n	8002286 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <menu+0x10a8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d13b      	bne.n	8002286 <menu+0x10d2>
			if(dilSecim == 0) {
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <menu+0x1070>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d12e      	bne.n	8002274 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <menu+0x10bc>)
 8002218:	2101      	movs	r1, #1
 800221a:	2002      	movs	r0, #2
 800221c:	f005 fc36 	bl	8007a8c <lcd_print>
 8002220:	e031      	b.n	8002286 <menu+0x10d2>
 8002222:	bf00      	nop
 8002224:	20000215 	.word	0x20000215
 8002228:	0800d1a4 	.word	0x0800d1a4
 800222c:	200001fb 	.word	0x200001fb
 8002230:	0800d0e4 	.word	0x0800d0e4
 8002234:	0800d0f8 	.word	0x0800d0f8
 8002238:	0800d144 	.word	0x0800d144
 800223c:	0800d158 	.word	0x0800d158
 8002240:	40010800 	.word	0x40010800
 8002244:	20000223 	.word	0x20000223
 8002248:	20000120 	.word	0x20000120
 800224c:	20000220 	.word	0x20000220
 8002250:	200001f4 	.word	0x200001f4
 8002254:	0800d1b4 	.word	0x0800d1b4
 8002258:	0800d1c8 	.word	0x0800d1c8
 800225c:	200001fc 	.word	0x200001fc
 8002260:	0800d1dc 	.word	0x0800d1dc
 8002264:	0800d1f0 	.word	0x0800d1f0
 8002268:	0800d204 	.word	0x0800d204
 800226c:	0800d218 	.word	0x0800d218
 8002270:	0800d22c 	.word	0x0800d22c
			} else if(dilSecim == 1){
 8002274:	4b99      	ldr	r3, [pc, #612]	; (80024dc <menu+0x1328>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d104      	bne.n	8002286 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800227c:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <menu+0x132c>)
 800227e:	2101      	movs	r1, #1
 8002280:	2002      	movs	r0, #2
 8002282:	f005 fc03 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002286:	2102      	movs	r1, #2
 8002288:	4896      	ldr	r0, [pc, #600]	; (80024e4 <menu+0x1330>)
 800228a:	f006 ff25 	bl	80090d8 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d115      	bne.n	80022c0 <menu+0x110c>
 8002294:	4b94      	ldr	r3, [pc, #592]	; (80024e8 <menu+0x1334>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80022a2:	4b92      	ldr	r3, [pc, #584]	; (80024ec <menu+0x1338>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b90      	ldr	r3, [pc, #576]	; (80024ec <menu+0x1338>)
 80022ac:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80022ae:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <menu+0x1338>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d902      	bls.n	80022bc <menu+0x1108>
				kapiSecimleri = 0;
 80022b6:	4b8d      	ldr	r3, [pc, #564]	; (80024ec <menu+0x1338>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022bc:	f002 fb46 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022c0:	2104      	movs	r1, #4
 80022c2:	4888      	ldr	r0, [pc, #544]	; (80024e4 <menu+0x1330>)
 80022c4:	f006 ff08 	bl	80090d8 <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d115      	bne.n	80022fa <menu+0x1146>
 80022ce:	4b86      	ldr	r3, [pc, #536]	; (80024e8 <menu+0x1334>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00e      	beq.n	80022fa <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80022dc:	4b83      	ldr	r3, [pc, #524]	; (80024ec <menu+0x1338>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b81      	ldr	r3, [pc, #516]	; (80024ec <menu+0x1338>)
 80022e6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022e8:	4b80      	ldr	r3, [pc, #512]	; (80024ec <menu+0x1338>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d902      	bls.n	80022f6 <menu+0x1142>
		   		kapiSecimleri = 3;
 80022f0:	4b7e      	ldr	r3, [pc, #504]	; (80024ec <menu+0x1338>)
 80022f2:	2203      	movs	r2, #3
 80022f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022f6:	f002 fb29 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022fa:	2108      	movs	r1, #8
 80022fc:	4879      	ldr	r0, [pc, #484]	; (80024e4 <menu+0x1330>)
 80022fe:	f006 feeb 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d118      	bne.n	800233a <menu+0x1186>
 8002308:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <menu+0x1334>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d011      	beq.n	800233a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002316:	4b75      	ldr	r3, [pc, #468]	; (80024ec <menu+0x1338>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <menu+0x133c>)
 800231c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <menu+0x1338>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <menu+0x1180>
				altLimit = 1;
 8002326:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <menu+0x1340>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800232c:	4b71      	ldr	r3, [pc, #452]	; (80024f4 <menu+0x1340>)
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <menu+0x133c>)
 8002332:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002334:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <menu+0x1344>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800233a:	4b70      	ldr	r3, [pc, #448]	; (80024fc <menu+0x1348>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b08      	cmp	r3, #8
 8002340:	f040 8092 	bne.w	8002468 <menu+0x12b4>
		if(dilSecim == 0) {
 8002344:	4b65      	ldr	r3, [pc, #404]	; (80024dc <menu+0x1328>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800234c:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <menu+0x134c>)
 800234e:	2101      	movs	r1, #1
 8002350:	2001      	movs	r0, #1
 8002352:	f005 fb9b 	bl	8007a8c <lcd_print>
 8002356:	e008      	b.n	800236a <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002358:	4b60      	ldr	r3, [pc, #384]	; (80024dc <menu+0x1328>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d104      	bne.n	800236a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002360:	4a68      	ldr	r2, [pc, #416]	; (8002504 <menu+0x1350>)
 8002362:	2101      	movs	r1, #1
 8002364:	2001      	movs	r0, #1
 8002366:	f005 fb91 	bl	8007a8c <lcd_print>
		}

		if(kapiAcTipi == 0){
 800236a:	4b67      	ldr	r3, [pc, #412]	; (8002508 <menu+0x1354>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d113      	bne.n	800239a <menu+0x11e6>
			if(dilSecim == 0) {
 8002372:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <menu+0x1328>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800237a:	4a64      	ldr	r2, [pc, #400]	; (800250c <menu+0x1358>)
 800237c:	2101      	movs	r1, #1
 800237e:	2002      	movs	r0, #2
 8002380:	f005 fb84 	bl	8007a8c <lcd_print>
 8002384:	e020      	b.n	80023c8 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002386:	4b55      	ldr	r3, [pc, #340]	; (80024dc <menu+0x1328>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d11c      	bne.n	80023c8 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800238e:	4a60      	ldr	r2, [pc, #384]	; (8002510 <menu+0x135c>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f005 fb7a 	bl	8007a8c <lcd_print>
 8002398:	e016      	b.n	80023c8 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800239a:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <menu+0x1354>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d112      	bne.n	80023c8 <menu+0x1214>
			if(dilSecim == 0){
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <menu+0x1328>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80023aa:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <menu+0x1360>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	2002      	movs	r0, #2
 80023b0:	f005 fb6c 	bl	8007a8c <lcd_print>
 80023b4:	e008      	b.n	80023c8 <menu+0x1214>
			} else if(dilSecim == 1){
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <menu+0x1328>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d104      	bne.n	80023c8 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80023be:	4a56      	ldr	r2, [pc, #344]	; (8002518 <menu+0x1364>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	2002      	movs	r0, #2
 80023c4:	f005 fb62 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c8:	2102      	movs	r1, #2
 80023ca:	4846      	ldr	r0, [pc, #280]	; (80024e4 <menu+0x1330>)
 80023cc:	f006 fe84 	bl	80090d8 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d115      	bne.n	8002402 <menu+0x124e>
 80023d6:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <menu+0x1334>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80023e4:	4b48      	ldr	r3, [pc, #288]	; (8002508 <menu+0x1354>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b46      	ldr	r3, [pc, #280]	; (8002508 <menu+0x1354>)
 80023ee:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80023f0:	4b45      	ldr	r3, [pc, #276]	; (8002508 <menu+0x1354>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d902      	bls.n	80023fe <menu+0x124a>
				kapiAcTipi = 0;
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <menu+0x1354>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023fe:	f002 faa5 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002402:	2104      	movs	r1, #4
 8002404:	4837      	ldr	r0, [pc, #220]	; (80024e4 <menu+0x1330>)
 8002406:	f006 fe67 	bl	80090d8 <HAL_GPIO_ReadPin>
 800240a:	4603      	mov	r3, r0
 800240c:	2b01      	cmp	r3, #1
 800240e:	d115      	bne.n	800243c <menu+0x1288>
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <menu+0x1334>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f083 0301 	eor.w	r3, r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00e      	beq.n	800243c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <menu+0x1354>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <menu+0x1354>)
 8002428:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <menu+0x1354>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002432:	4b35      	ldr	r3, [pc, #212]	; (8002508 <menu+0x1354>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002438:	f002 fa88 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800243c:	2108      	movs	r1, #8
 800243e:	4829      	ldr	r0, [pc, #164]	; (80024e4 <menu+0x1330>)
 8002440:	f006 fe4a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10e      	bne.n	8002468 <menu+0x12b4>
 800244a:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <menu+0x1334>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <menu+0x1354>)
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <menu+0x133c>)
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <menu+0x1344>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <menu+0x1348>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b09      	cmp	r3, #9
 800246e:	f040 80b9 	bne.w	80025e4 <menu+0x1430>
		if(dilSecim == 0){
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <menu+0x1328>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d105      	bne.n	8002486 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800247a:	4a28      	ldr	r2, [pc, #160]	; (800251c <menu+0x1368>)
 800247c:	2101      	movs	r1, #1
 800247e:	2001      	movs	r0, #1
 8002480:	f005 fb04 	bl	8007a8c <lcd_print>
 8002484:	e008      	b.n	8002498 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <menu+0x1328>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d104      	bne.n	8002498 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800248e:	4a24      	ldr	r2, [pc, #144]	; (8002520 <menu+0x136c>)
 8002490:	2101      	movs	r1, #1
 8002492:	2001      	movs	r0, #1
 8002494:	f005 fafa 	bl	8007a8c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <menu+0x1370>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <menu+0x1374>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	2002      	movs	r0, #2
 80024a6:	f005 faf1 	bl	8007a8c <lcd_print>
 80024aa:	e04c      	b.n	8002546 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <menu+0x1370>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d13f      	bne.n	8002534 <menu+0x1380>
			if(dilSecim == 0){
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <menu+0x1328>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <menu+0x1378>)
 80024be:	2101      	movs	r1, #1
 80024c0:	2002      	movs	r0, #2
 80024c2:	f005 fae3 	bl	8007a8c <lcd_print>
 80024c6:	e03e      	b.n	8002546 <menu+0x1392>
			} else if(dilSecim == 1) {
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <menu+0x1328>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d13a      	bne.n	8002546 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80024d0:	4a17      	ldr	r2, [pc, #92]	; (8002530 <menu+0x137c>)
 80024d2:	2101      	movs	r1, #1
 80024d4:	2002      	movs	r0, #2
 80024d6:	f005 fad9 	bl	8007a8c <lcd_print>
 80024da:	e034      	b.n	8002546 <menu+0x1392>
 80024dc:	20000215 	.word	0x20000215
 80024e0:	0800d240 	.word	0x0800d240
 80024e4:	40010800 	.word	0x40010800
 80024e8:	20000223 	.word	0x20000223
 80024ec:	200001fc 	.word	0x200001fc
 80024f0:	20000120 	.word	0x20000120
 80024f4:	200001fa 	.word	0x200001fa
 80024f8:	20000220 	.word	0x20000220
 80024fc:	200001f4 	.word	0x200001f4
 8002500:	0800d254 	.word	0x0800d254
 8002504:	0800d268 	.word	0x0800d268
 8002508:	20000200 	.word	0x20000200
 800250c:	0800d27c 	.word	0x0800d27c
 8002510:	0800d28c 	.word	0x0800d28c
 8002514:	0800d29c 	.word	0x0800d29c
 8002518:	0800d2b0 	.word	0x0800d2b0
 800251c:	0800d2c4 	.word	0x0800d2c4
 8002520:	0800d2d8 	.word	0x0800d2d8
 8002524:	200001fd 	.word	0x200001fd
 8002528:	0800d2ec 	.word	0x0800d2ec
 800252c:	0800d300 	.word	0x0800d300
 8002530:	0800d310 	.word	0x0800d310
			}
		} else if(kapi1Tip == 2) {
 8002534:	4b8a      	ldr	r3, [pc, #552]	; (8002760 <menu+0x15ac>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d104      	bne.n	8002546 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800253c:	4a89      	ldr	r2, [pc, #548]	; (8002764 <menu+0x15b0>)
 800253e:	2101      	movs	r1, #1
 8002540:	2002      	movs	r0, #2
 8002542:	f005 faa3 	bl	8007a8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002546:	2102      	movs	r1, #2
 8002548:	4887      	ldr	r0, [pc, #540]	; (8002768 <menu+0x15b4>)
 800254a:	f006 fdc5 	bl	80090d8 <HAL_GPIO_ReadPin>
 800254e:	4603      	mov	r3, r0
 8002550:	2b01      	cmp	r3, #1
 8002552:	d115      	bne.n	8002580 <menu+0x13cc>
 8002554:	4b85      	ldr	r3, [pc, #532]	; (800276c <menu+0x15b8>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002562:	4b7f      	ldr	r3, [pc, #508]	; (8002760 <menu+0x15ac>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <menu+0x15ac>)
 800256c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800256e:	4b7c      	ldr	r3, [pc, #496]	; (8002760 <menu+0x15ac>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d902      	bls.n	800257c <menu+0x13c8>
				kapi1Tip = 0;
 8002576:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <menu+0x15ac>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800257c:	f002 f9e6 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002580:	2104      	movs	r1, #4
 8002582:	4879      	ldr	r0, [pc, #484]	; (8002768 <menu+0x15b4>)
 8002584:	f006 fda8 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d115      	bne.n	80025ba <menu+0x1406>
 800258e:	4b77      	ldr	r3, [pc, #476]	; (800276c <menu+0x15b8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800259c:	4b70      	ldr	r3, [pc, #448]	; (8002760 <menu+0x15ac>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b6e      	ldr	r3, [pc, #440]	; (8002760 <menu+0x15ac>)
 80025a6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025a8:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <menu+0x15ac>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d902      	bls.n	80025b6 <menu+0x1402>
		   		kapi1Tip = 2;
 80025b0:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <menu+0x15ac>)
 80025b2:	2202      	movs	r2, #2
 80025b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025b6:	f002 f9c9 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ba:	2108      	movs	r1, #8
 80025bc:	486a      	ldr	r0, [pc, #424]	; (8002768 <menu+0x15b4>)
 80025be:	f006 fd8b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10d      	bne.n	80025e4 <menu+0x1430>
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <menu+0x15b8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80025d6:	4b62      	ldr	r3, [pc, #392]	; (8002760 <menu+0x15ac>)
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <menu+0x15bc>)
 80025dc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80025de:	4b65      	ldr	r3, [pc, #404]	; (8002774 <menu+0x15c0>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <menu+0x15c4>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b0a      	cmp	r3, #10
 80025ea:	d17f      	bne.n	80026ec <menu+0x1538>
		if(dilSecim == 0) {
 80025ec:	4b63      	ldr	r3, [pc, #396]	; (800277c <menu+0x15c8>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80025f4:	4a62      	ldr	r2, [pc, #392]	; (8002780 <menu+0x15cc>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	2001      	movs	r0, #1
 80025fa:	f005 fa47 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80025fe:	4a61      	ldr	r2, [pc, #388]	; (8002784 <menu+0x15d0>)
 8002600:	2101      	movs	r1, #1
 8002602:	2002      	movs	r0, #2
 8002604:	f005 fa42 	bl	8007a8c <lcd_print>
 8002608:	e00d      	b.n	8002626 <menu+0x1472>
		} else if(dilSecim == 1) {
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <menu+0x15c8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d109      	bne.n	8002626 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002612:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <menu+0x15d4>)
 8002614:	2101      	movs	r1, #1
 8002616:	2001      	movs	r0, #1
 8002618:	f005 fa38 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800261c:	4a5b      	ldr	r2, [pc, #364]	; (800278c <menu+0x15d8>)
 800261e:	2101      	movs	r1, #1
 8002620:	2002      	movs	r0, #2
 8002622:	f005 fa33 	bl	8007a8c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002626:	4b5a      	ldr	r3, [pc, #360]	; (8002790 <menu+0x15dc>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	220a      	movs	r2, #10
 800262c:	4959      	ldr	r1, [pc, #356]	; (8002794 <menu+0x15e0>)
 800262e:	4618      	mov	r0, r3
 8002630:	f009 fd7e 	bl	800c130 <itoa>
		lcd_print(2,16,snum);
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <menu+0x15e0>)
 8002636:	2110      	movs	r1, #16
 8002638:	2002      	movs	r0, #2
 800263a:	f005 fa27 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800263e:	2102      	movs	r1, #2
 8002640:	4849      	ldr	r0, [pc, #292]	; (8002768 <menu+0x15b4>)
 8002642:	f006 fd49 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d119      	bne.n	8002680 <menu+0x14cc>
 800264c:	4b47      	ldr	r3, [pc, #284]	; (800276c <menu+0x15b8>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <menu+0x14cc>
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <menu+0x15ac>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <menu+0x15dc>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b49      	ldr	r3, [pc, #292]	; (8002790 <menu+0x15dc>)
 800266c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800266e:	4b48      	ldr	r3, [pc, #288]	; (8002790 <menu+0x15dc>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d902      	bls.n	800267c <menu+0x14c8>
				kapi1AcSure = 0;
 8002676:	4b46      	ldr	r3, [pc, #280]	; (8002790 <menu+0x15dc>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800267c:	f002 f966 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002680:	2104      	movs	r1, #4
 8002682:	4839      	ldr	r0, [pc, #228]	; (8002768 <menu+0x15b4>)
 8002684:	f006 fd28 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d119      	bne.n	80026c2 <menu+0x150e>
 800268e:	4b37      	ldr	r3, [pc, #220]	; (800276c <menu+0x15b8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <menu+0x150e>
 800269c:	4b30      	ldr	r3, [pc, #192]	; (8002760 <menu+0x15ac>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10e      	bne.n	80026c2 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <menu+0x15dc>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b38      	ldr	r3, [pc, #224]	; (8002790 <menu+0x15dc>)
 80026ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <menu+0x15dc>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b06      	cmp	r3, #6
 80026b6:	d902      	bls.n	80026be <menu+0x150a>
		   		kapi1AcSure = 5;
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <menu+0x15dc>)
 80026ba:	2205      	movs	r2, #5
 80026bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026be:	f002 f945 	bl	800494c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c2:	2108      	movs	r1, #8
 80026c4:	4828      	ldr	r0, [pc, #160]	; (8002768 <menu+0x15b4>)
 80026c6:	f006 fd07 	bl	80090d8 <HAL_GPIO_ReadPin>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10d      	bne.n	80026ec <menu+0x1538>
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <menu+0x15b8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f083 0301 	eor.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <menu+0x15dc>)
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <menu+0x15bc>)
 80026e4:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <menu+0x15c0>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <menu+0x15c4>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b0b      	cmp	r3, #11
 80026f2:	f040 80b5 	bne.w	8002860 <menu+0x16ac>
		if(dilSecim == 0) {
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <menu+0x15c8>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80026fe:	4a26      	ldr	r2, [pc, #152]	; (8002798 <menu+0x15e4>)
 8002700:	2101      	movs	r1, #1
 8002702:	2001      	movs	r0, #1
 8002704:	f005 f9c2 	bl	8007a8c <lcd_print>
 8002708:	e008      	b.n	800271c <menu+0x1568>
		} else if(dilSecim == 1) {
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <menu+0x15c8>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d104      	bne.n	800271c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <menu+0x15e8>)
 8002714:	2101      	movs	r1, #1
 8002716:	2001      	movs	r0, #1
 8002718:	f005 f9b8 	bl	8007a8c <lcd_print>
		}

		if(kapi2Tip == 0) {
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <menu+0x15ec>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <menu+0x15f0>)
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f005 f9af 	bl	8007a8c <lcd_print>
 800272e:	e048      	b.n	80027c2 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <menu+0x15ec>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d13b      	bne.n	80027b0 <menu+0x15fc>
			if(dilSecim == 0) {
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <menu+0x15c8>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <menu+0x15f4>)
 8002742:	2101      	movs	r1, #1
 8002744:	2002      	movs	r0, #2
 8002746:	f005 f9a1 	bl	8007a8c <lcd_print>
 800274a:	e03a      	b.n	80027c2 <menu+0x160e>
			} else if(dilSecim == 1) {
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <menu+0x15c8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d136      	bne.n	80027c2 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002754:	4a15      	ldr	r2, [pc, #84]	; (80027ac <menu+0x15f8>)
 8002756:	2101      	movs	r1, #1
 8002758:	2002      	movs	r0, #2
 800275a:	f005 f997 	bl	8007a8c <lcd_print>
 800275e:	e030      	b.n	80027c2 <menu+0x160e>
 8002760:	200001fd 	.word	0x200001fd
 8002764:	0800d324 	.word	0x0800d324
 8002768:	40010800 	.word	0x40010800
 800276c:	20000223 	.word	0x20000223
 8002770:	20000120 	.word	0x20000120
 8002774:	20000220 	.word	0x20000220
 8002778:	200001f4 	.word	0x200001f4
 800277c:	20000215 	.word	0x20000215
 8002780:	0800d334 	.word	0x0800d334
 8002784:	0800d348 	.word	0x0800d348
 8002788:	0800d358 	.word	0x0800d358
 800278c:	0800d36c 	.word	0x0800d36c
 8002790:	2000020d 	.word	0x2000020d
 8002794:	20000190 	.word	0x20000190
 8002798:	0800d37c 	.word	0x0800d37c
 800279c:	0800d390 	.word	0x0800d390
 80027a0:	200001fe 	.word	0x200001fe
 80027a4:	0800d2ec 	.word	0x0800d2ec
 80027a8:	0800d300 	.word	0x0800d300
 80027ac:	0800d310 	.word	0x0800d310
			}
		} else if(kapi2Tip == 2) {
 80027b0:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <menu+0x1828>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d104      	bne.n	80027c2 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80027b8:	4a89      	ldr	r2, [pc, #548]	; (80029e0 <menu+0x182c>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	2002      	movs	r0, #2
 80027be:	f005 f965 	bl	8007a8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c2:	2102      	movs	r1, #2
 80027c4:	4887      	ldr	r0, [pc, #540]	; (80029e4 <menu+0x1830>)
 80027c6:	f006 fc87 	bl	80090d8 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d115      	bne.n	80027fc <menu+0x1648>
 80027d0:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <menu+0x1834>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f083 0301 	eor.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00e      	beq.n	80027fc <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <menu+0x1828>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4b7d      	ldr	r3, [pc, #500]	; (80029dc <menu+0x1828>)
 80027e8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027ea:	4b7c      	ldr	r3, [pc, #496]	; (80029dc <menu+0x1828>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d902      	bls.n	80027f8 <menu+0x1644>
				kapi2Tip = 0;
 80027f2:	4b7a      	ldr	r3, [pc, #488]	; (80029dc <menu+0x1828>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027f8:	f002 f8a8 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fc:	2104      	movs	r1, #4
 80027fe:	4879      	ldr	r0, [pc, #484]	; (80029e4 <menu+0x1830>)
 8002800:	f006 fc6a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d115      	bne.n	8002836 <menu+0x1682>
 800280a:	4b77      	ldr	r3, [pc, #476]	; (80029e8 <menu+0x1834>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002818:	4b70      	ldr	r3, [pc, #448]	; (80029dc <menu+0x1828>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <menu+0x1828>)
 8002822:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002824:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <menu+0x1828>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d902      	bls.n	8002832 <menu+0x167e>
		   		kapi2Tip = 2;
 800282c:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <menu+0x1828>)
 800282e:	2202      	movs	r2, #2
 8002830:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002832:	f002 f88b 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002836:	2108      	movs	r1, #8
 8002838:	486a      	ldr	r0, [pc, #424]	; (80029e4 <menu+0x1830>)
 800283a:	f006 fc4d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10d      	bne.n	8002860 <menu+0x16ac>
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <menu+0x1834>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002852:	4b62      	ldr	r3, [pc, #392]	; (80029dc <menu+0x1828>)
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	4b65      	ldr	r3, [pc, #404]	; (80029ec <menu+0x1838>)
 8002858:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <menu+0x183c>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <menu+0x1840>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d17f      	bne.n	8002968 <menu+0x17b4>
		if(dilSecim == 0) {
 8002868:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <menu+0x1844>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002870:	4a62      	ldr	r2, [pc, #392]	; (80029fc <menu+0x1848>)
 8002872:	2101      	movs	r1, #1
 8002874:	2001      	movs	r0, #1
 8002876:	f005 f909 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800287a:	4a61      	ldr	r2, [pc, #388]	; (8002a00 <menu+0x184c>)
 800287c:	2101      	movs	r1, #1
 800287e:	2002      	movs	r0, #2
 8002880:	f005 f904 	bl	8007a8c <lcd_print>
 8002884:	e00d      	b.n	80028a2 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <menu+0x1844>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d109      	bne.n	80028a2 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800288e:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <menu+0x1850>)
 8002890:	2101      	movs	r1, #1
 8002892:	2001      	movs	r0, #1
 8002894:	f005 f8fa 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002898:	4a5b      	ldr	r2, [pc, #364]	; (8002a08 <menu+0x1854>)
 800289a:	2101      	movs	r1, #1
 800289c:	2002      	movs	r0, #2
 800289e:	f005 f8f5 	bl	8007a8c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <menu+0x1858>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	220a      	movs	r2, #10
 80028a8:	4959      	ldr	r1, [pc, #356]	; (8002a10 <menu+0x185c>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f009 fc40 	bl	800c130 <itoa>
		lcd_print(2,16,snum);
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <menu+0x185c>)
 80028b2:	2110      	movs	r1, #16
 80028b4:	2002      	movs	r0, #2
 80028b6:	f005 f8e9 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028ba:	2102      	movs	r1, #2
 80028bc:	4849      	ldr	r0, [pc, #292]	; (80029e4 <menu+0x1830>)
 80028be:	f006 fc0b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <menu+0x1748>
 80028c8:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <menu+0x1834>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f083 0301 	eor.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <menu+0x1748>
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <menu+0x1828>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80028de:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <menu+0x1858>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <menu+0x1858>)
 80028e8:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <menu+0x1858>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d902      	bls.n	80028f8 <menu+0x1744>
				kapi2AcSure = 0;
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <menu+0x1858>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028f8:	f002 f828 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028fc:	2104      	movs	r1, #4
 80028fe:	4839      	ldr	r0, [pc, #228]	; (80029e4 <menu+0x1830>)
 8002900:	f006 fbea 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	d119      	bne.n	800293e <menu+0x178a>
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <menu+0x1834>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d012      	beq.n	800293e <menu+0x178a>
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <menu+0x1828>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10e      	bne.n	800293e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <menu+0x1858>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <menu+0x1858>)
 800292a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800292c:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <menu+0x1858>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d902      	bls.n	800293a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <menu+0x1858>)
 8002936:	2205      	movs	r2, #5
 8002938:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800293a:	f002 f807 	bl	800494c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800293e:	2108      	movs	r1, #8
 8002940:	4828      	ldr	r0, [pc, #160]	; (80029e4 <menu+0x1830>)
 8002942:	f006 fbc9 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002946:	4603      	mov	r3, r0
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <menu+0x17b4>
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <menu+0x1834>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <menu+0x1858>)
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <menu+0x1838>)
 8002960:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <menu+0x183c>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <menu+0x1840>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b0d      	cmp	r3, #13
 800296e:	f040 80b5 	bne.w	8002adc <menu+0x1928>
		if(dilSecim == 0) {
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <menu+0x1844>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800297a:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <menu+0x1860>)
 800297c:	2101      	movs	r1, #1
 800297e:	2001      	movs	r0, #1
 8002980:	f005 f884 	bl	8007a8c <lcd_print>
 8002984:	e008      	b.n	8002998 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <menu+0x1844>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d104      	bne.n	8002998 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800298e:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <menu+0x1864>)
 8002990:	2101      	movs	r1, #1
 8002992:	2001      	movs	r0, #1
 8002994:	f005 f87a 	bl	8007a8c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <menu+0x1868>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <menu+0x186c>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	2002      	movs	r0, #2
 80029a6:	f005 f871 	bl	8007a8c <lcd_print>
 80029aa:	e048      	b.n	8002a3e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <menu+0x1868>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d13b      	bne.n	8002a2c <menu+0x1878>
			if(dilSecim == 0) {
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <menu+0x1844>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <menu+0x1870>)
 80029be:	2101      	movs	r1, #1
 80029c0:	2002      	movs	r0, #2
 80029c2:	f005 f863 	bl	8007a8c <lcd_print>
 80029c6:	e03a      	b.n	8002a3e <menu+0x188a>
			} else if(dilSecim == 1) {
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <menu+0x1844>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d136      	bne.n	8002a3e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <menu+0x1874>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	2002      	movs	r0, #2
 80029d6:	f005 f859 	bl	8007a8c <lcd_print>
 80029da:	e030      	b.n	8002a3e <menu+0x188a>
 80029dc:	200001fe 	.word	0x200001fe
 80029e0:	0800d324 	.word	0x0800d324
 80029e4:	40010800 	.word	0x40010800
 80029e8:	20000223 	.word	0x20000223
 80029ec:	20000120 	.word	0x20000120
 80029f0:	20000220 	.word	0x20000220
 80029f4:	200001f4 	.word	0x200001f4
 80029f8:	20000215 	.word	0x20000215
 80029fc:	0800d3a4 	.word	0x0800d3a4
 8002a00:	0800d348 	.word	0x0800d348
 8002a04:	0800d3b8 	.word	0x0800d3b8
 8002a08:	0800d36c 	.word	0x0800d36c
 8002a0c:	2000020e 	.word	0x2000020e
 8002a10:	20000190 	.word	0x20000190
 8002a14:	0800d3cc 	.word	0x0800d3cc
 8002a18:	0800d3e0 	.word	0x0800d3e0
 8002a1c:	200001ff 	.word	0x200001ff
 8002a20:	0800d2ec 	.word	0x0800d2ec
 8002a24:	0800d300 	.word	0x0800d300
 8002a28:	0800d310 	.word	0x0800d310
			}
		} else if(kapitablaTip == 2) {
 8002a2c:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <menu+0x19e8>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d104      	bne.n	8002a3e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a34:	4a5a      	ldr	r2, [pc, #360]	; (8002ba0 <menu+0x19ec>)
 8002a36:	2101      	movs	r1, #1
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f005 f827 	bl	8007a8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4858      	ldr	r0, [pc, #352]	; (8002ba4 <menu+0x19f0>)
 8002a42:	f006 fb49 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d115      	bne.n	8002a78 <menu+0x18c4>
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <menu+0x19f4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002a5a:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <menu+0x19e8>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <menu+0x19e8>)
 8002a64:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a66:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <menu+0x19e8>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <menu+0x18c0>
				kapitablaTip = 0;
 8002a6e:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <menu+0x19e8>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a74:	f001 ff6a 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a78:	2104      	movs	r1, #4
 8002a7a:	484a      	ldr	r0, [pc, #296]	; (8002ba4 <menu+0x19f0>)
 8002a7c:	f006 fb2c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d115      	bne.n	8002ab2 <menu+0x18fe>
 8002a86:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <menu+0x19f4>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f083 0301 	eor.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00e      	beq.n	8002ab2 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <menu+0x19e8>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <menu+0x19e8>)
 8002a9e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002aa0:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <menu+0x19e8>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d902      	bls.n	8002aae <menu+0x18fa>
		   		kapitablaTip = 2;
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <menu+0x19e8>)
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aae:	f001 ff4d 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	483b      	ldr	r0, [pc, #236]	; (8002ba4 <menu+0x19f0>)
 8002ab6:	f006 fb0f 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10d      	bne.n	8002adc <menu+0x1928>
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <menu+0x19f4>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	f083 0301 	eor.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <menu+0x19e8>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <menu+0x19f8>)
 8002ad4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <menu+0x19fc>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <menu+0x1a00>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b0e      	cmp	r3, #14
 8002ae2:	f040 80f2 	bne.w	8002cca <menu+0x1b16>
		if(dilSecim == 0) {
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <menu+0x1a04>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002aee:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <menu+0x1a08>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	2001      	movs	r0, #1
 8002af4:	f004 ffca 	bl	8007a8c <lcd_print>
 8002af8:	e008      	b.n	8002b0c <menu+0x1958>
		} else if(dilSecim == 1) {
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <menu+0x1a04>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d104      	bne.n	8002b0c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b02:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <menu+0x1a0c>)
 8002b04:	2101      	movs	r1, #1
 8002b06:	2001      	movs	r0, #1
 8002b08:	f004 ffc0 	bl	8007a8c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <menu+0x1a10>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d113      	bne.n	8002b3c <menu+0x1988>
			if(dilSecim == 0){
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <menu+0x1a04>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <menu+0x1a14>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	2002      	movs	r0, #2
 8002b22:	f004 ffb3 	bl	8007a8c <lcd_print>
 8002b26:	e071      	b.n	8002c0c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <menu+0x1a04>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d16d      	bne.n	8002c0c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b30:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <menu+0x1a18>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2002      	movs	r0, #2
 8002b36:	f004 ffa9 	bl	8007a8c <lcd_print>
 8002b3a:	e067      	b.n	8002c0c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <menu+0x1a10>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d112      	bne.n	8002b6a <menu+0x19b6>
			if(dilSecim == 0){
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <menu+0x1a04>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <menu+0x1a1c>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2002      	movs	r0, #2
 8002b52:	f004 ff9b 	bl	8007a8c <lcd_print>
			}
			if(dilSecim == 1){
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <menu+0x1a04>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d156      	bne.n	8002c0c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <menu+0x1a20>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	2002      	movs	r0, #2
 8002b64:	f004 ff92 	bl	8007a8c <lcd_print>
 8002b68:	e050      	b.n	8002c0c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <menu+0x1a10>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d136      	bne.n	8002be0 <menu+0x1a2c>
			if(dilSecim == 0){
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <menu+0x1a04>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <menu+0x1a24>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2002      	movs	r0, #2
 8002b80:	f004 ff84 	bl	8007a8c <lcd_print>
 8002b84:	e042      	b.n	8002c0c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <menu+0x1a04>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d13e      	bne.n	8002c0c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <menu+0x1a28>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	2002      	movs	r0, #2
 8002b94:	f004 ff7a 	bl	8007a8c <lcd_print>
 8002b98:	e038      	b.n	8002c0c <menu+0x1a58>
 8002b9a:	bf00      	nop
 8002b9c:	200001ff 	.word	0x200001ff
 8002ba0:	0800d324 	.word	0x0800d324
 8002ba4:	40010800 	.word	0x40010800
 8002ba8:	20000223 	.word	0x20000223
 8002bac:	20000120 	.word	0x20000120
 8002bb0:	20000220 	.word	0x20000220
 8002bb4:	200001f4 	.word	0x200001f4
 8002bb8:	20000215 	.word	0x20000215
 8002bbc:	0800d3f4 	.word	0x0800d3f4
 8002bc0:	0800d408 	.word	0x0800d408
 8002bc4:	20000201 	.word	0x20000201
 8002bc8:	0800d41c 	.word	0x0800d41c
 8002bcc:	0800d42c 	.word	0x0800d42c
 8002bd0:	0800d43c 	.word	0x0800d43c
 8002bd4:	0800d44c 	.word	0x0800d44c
 8002bd8:	0800d45c 	.word	0x0800d45c
 8002bdc:	0800d470 	.word	0x0800d470
			}
		} else if(kapiTablaAcKonum == 3) {
 8002be0:	4b9b      	ldr	r3, [pc, #620]	; (8002e50 <menu+0x1c9c>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d111      	bne.n	8002c0c <menu+0x1a58>
			if(dilSecim == 0) {
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <menu+0x1ca0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002bf0:	4a99      	ldr	r2, [pc, #612]	; (8002e58 <menu+0x1ca4>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f004 ff49 	bl	8007a8c <lcd_print>
			}
			if(dilSecim == 1) {
 8002bfa:	4b96      	ldr	r3, [pc, #600]	; (8002e54 <menu+0x1ca0>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d104      	bne.n	8002c0c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002c02:	4a96      	ldr	r2, [pc, #600]	; (8002e5c <menu+0x1ca8>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2002      	movs	r0, #2
 8002c08:	f004 ff40 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4894      	ldr	r0, [pc, #592]	; (8002e60 <menu+0x1cac>)
 8002c10:	f006 fa62 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d115      	bne.n	8002c46 <menu+0x1a92>
 8002c1a:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <menu+0x1cb0>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c28:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <menu+0x1c9c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <menu+0x1c9c>)
 8002c32:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c34:	4b86      	ldr	r3, [pc, #536]	; (8002e50 <menu+0x1c9c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d902      	bls.n	8002c42 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c3c:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <menu+0x1c9c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c42:	f001 fe83 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c46:	2104      	movs	r1, #4
 8002c48:	4885      	ldr	r0, [pc, #532]	; (8002e60 <menu+0x1cac>)
 8002c4a:	f006 fa45 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d115      	bne.n	8002c80 <menu+0x1acc>
 8002c54:	4b83      	ldr	r3, [pc, #524]	; (8002e64 <menu+0x1cb0>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00e      	beq.n	8002c80 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c62:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <menu+0x1c9c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <menu+0x1c9c>)
 8002c6c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c6e:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <menu+0x1c9c>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d902      	bls.n	8002c7c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <menu+0x1c9c>)
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c7c:	f001 fe66 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c80:	2108      	movs	r1, #8
 8002c82:	4877      	ldr	r0, [pc, #476]	; (8002e60 <menu+0x1cac>)
 8002c84:	f006 fa28 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d11d      	bne.n	8002cca <menu+0x1b16>
 8002c8e:	4b75      	ldr	r3, [pc, #468]	; (8002e64 <menu+0x1cb0>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	f083 0301 	eor.w	r3, r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <menu+0x1c9c>)
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	4b71      	ldr	r3, [pc, #452]	; (8002e68 <menu+0x1cb4>)
 8002ca2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <menu+0x1c9c>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <menu+0x1b02>
 8002cae:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <menu+0x1c9c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d106      	bne.n	8002cc4 <menu+0x1b10>
				altLimit = 1;
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <menu+0x1cb8>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002cbc:	4b6b      	ldr	r3, [pc, #428]	; (8002e6c <menu+0x1cb8>)
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <menu+0x1cb4>)
 8002cc2:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <menu+0x1cbc>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002cca:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <menu+0x1cc0>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	d17f      	bne.n	8002dd2 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002cd2:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <menu+0x1ca0>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <menu+0x1cc4>)
 8002cdc:	2101      	movs	r1, #1
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f004 fed4 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ce4:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <menu+0x1cc8>)
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f004 fecf 	bl	8007a8c <lcd_print>
 8002cee:	e00d      	b.n	8002d0c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002cf0:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <menu+0x1ca0>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d109      	bne.n	8002d0c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <menu+0x1ccc>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f004 fec5 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d02:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <menu+0x1cd0>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	2002      	movs	r0, #2
 8002d08:	f004 fec0 	bl	8007a8c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <menu+0x1cd4>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	220a      	movs	r2, #10
 8002d12:	495e      	ldr	r1, [pc, #376]	; (8002e8c <menu+0x1cd8>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f009 fa0b 	bl	800c130 <itoa>
		lcd_print(2,16,snum);
 8002d1a:	4a5c      	ldr	r2, [pc, #368]	; (8002e8c <menu+0x1cd8>)
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	2002      	movs	r0, #2
 8002d20:	f004 feb4 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d24:	2102      	movs	r1, #2
 8002d26:	484e      	ldr	r0, [pc, #312]	; (8002e60 <menu+0x1cac>)
 8002d28:	f006 f9d6 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d119      	bne.n	8002d66 <menu+0x1bb2>
 8002d32:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <menu+0x1cb0>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d012      	beq.n	8002d66 <menu+0x1bb2>
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <menu+0x1cdc>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10e      	bne.n	8002d66 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d48:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <menu+0x1cd4>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <menu+0x1cd4>)
 8002d52:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d54:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <menu+0x1cd4>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d902      	bls.n	8002d62 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <menu+0x1cd4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d62:	f001 fdf3 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d66:	2104      	movs	r1, #4
 8002d68:	483d      	ldr	r0, [pc, #244]	; (8002e60 <menu+0x1cac>)
 8002d6a:	f006 f9b5 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d119      	bne.n	8002da8 <menu+0x1bf4>
 8002d74:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <menu+0x1cb0>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f083 0301 	eor.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <menu+0x1bf4>
 8002d82:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <menu+0x1cdc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10e      	bne.n	8002da8 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <menu+0x1cd4>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <menu+0x1cd4>)
 8002d94:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <menu+0x1cd4>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d902      	bls.n	8002da4 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <menu+0x1cd4>)
 8002da0:	2205      	movs	r2, #5
 8002da2:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002da4:	f001 fdd2 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da8:	2108      	movs	r1, #8
 8002daa:	482d      	ldr	r0, [pc, #180]	; (8002e60 <menu+0x1cac>)
 8002dac:	f006 f994 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10d      	bne.n	8002dd2 <menu+0x1c1e>
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <menu+0x1cb0>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <menu+0x1cd4>)
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <menu+0x1cb4>)
 8002dca:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <menu+0x1cbc>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <menu+0x1cc0>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	f040 80bc 	bne.w	8002f54 <menu+0x1da0>
		if(dilSecim == 0) {
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <menu+0x1ca0>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <menu+0x1ce0>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	2001      	movs	r0, #1
 8002dea:	f004 fe4f 	bl	8007a8c <lcd_print>
 8002dee:	e008      	b.n	8002e02 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <menu+0x1ca0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d104      	bne.n	8002e02 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <menu+0x1ce4>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f004 fe45 	bl	8007a8c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <menu+0x1ce8>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d113      	bne.n	8002e32 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <menu+0x1ca0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e12:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <menu+0x1ca4>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	2002      	movs	r0, #2
 8002e18:	f004 fe38 	bl	8007a8c <lcd_print>
 8002e1c:	e04b      	b.n	8002eb6 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <menu+0x1ca0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d147      	bne.n	8002eb6 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e26:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <menu+0x1ca8>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f004 fe2e 	bl	8007a8c <lcd_print>
 8002e30:	e041      	b.n	8002eb6 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <menu+0x1ce8>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d13d      	bne.n	8002eb6 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <menu+0x1ca0>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d130      	bne.n	8002ea4 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e42:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <menu+0x1cec>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	2002      	movs	r0, #2
 8002e48:	f004 fe20 	bl	8007a8c <lcd_print>
 8002e4c:	e033      	b.n	8002eb6 <menu+0x1d02>
 8002e4e:	bf00      	nop
 8002e50:	20000201 	.word	0x20000201
 8002e54:	20000215 	.word	0x20000215
 8002e58:	0800d0e4 	.word	0x0800d0e4
 8002e5c:	0800d0f8 	.word	0x0800d0f8
 8002e60:	40010800 	.word	0x40010800
 8002e64:	20000223 	.word	0x20000223
 8002e68:	20000120 	.word	0x20000120
 8002e6c:	200001fa 	.word	0x200001fa
 8002e70:	20000220 	.word	0x20000220
 8002e74:	200001f4 	.word	0x200001f4
 8002e78:	0800d484 	.word	0x0800d484
 8002e7c:	0800d348 	.word	0x0800d348
 8002e80:	0800d498 	.word	0x0800d498
 8002e84:	0800d36c 	.word	0x0800d36c
 8002e88:	2000020f 	.word	0x2000020f
 8002e8c:	20000190 	.word	0x20000190
 8002e90:	200001ff 	.word	0x200001ff
 8002e94:	0800d4ac 	.word	0x0800d4ac
 8002e98:	0800d4c0 	.word	0x0800d4c0
 8002e9c:	20000202 	.word	0x20000202
 8002ea0:	0800d144 	.word	0x0800d144
			} else if(dilSecim == 1) {
 8002ea4:	4b99      	ldr	r3, [pc, #612]	; (800310c <menu+0x1f58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d104      	bne.n	8002eb6 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002eac:	4a98      	ldr	r2, [pc, #608]	; (8003110 <menu+0x1f5c>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f004 fdeb 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4896      	ldr	r0, [pc, #600]	; (8003114 <menu+0x1f60>)
 8002eba:	f006 f90d 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d115      	bne.n	8002ef0 <menu+0x1d3c>
 8002ec4:	4b94      	ldr	r3, [pc, #592]	; (8003118 <menu+0x1f64>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f083 0301 	eor.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002ed2:	4b92      	ldr	r3, [pc, #584]	; (800311c <menu+0x1f68>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b90      	ldr	r3, [pc, #576]	; (800311c <menu+0x1f68>)
 8002edc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002ede:	4b8f      	ldr	r3, [pc, #572]	; (800311c <menu+0x1f68>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d902      	bls.n	8002eec <menu+0x1d38>
				yukariYavasLimit = 0;
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	; (800311c <menu+0x1f68>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002eec:	f001 fd2e 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ef0:	2104      	movs	r1, #4
 8002ef2:	4888      	ldr	r0, [pc, #544]	; (8003114 <menu+0x1f60>)
 8002ef4:	f006 f8f0 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d115      	bne.n	8002f2a <menu+0x1d76>
 8002efe:	4b86      	ldr	r3, [pc, #536]	; (8003118 <menu+0x1f64>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f0c:	4b83      	ldr	r3, [pc, #524]	; (800311c <menu+0x1f68>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b81      	ldr	r3, [pc, #516]	; (800311c <menu+0x1f68>)
 8002f16:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f18:	4b80      	ldr	r3, [pc, #512]	; (800311c <menu+0x1f68>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f20:	4b7e      	ldr	r3, [pc, #504]	; (800311c <menu+0x1f68>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f26:	f001 fd11 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f2a:	2108      	movs	r1, #8
 8002f2c:	4879      	ldr	r0, [pc, #484]	; (8003114 <menu+0x1f60>)
 8002f2e:	f006 f8d3 	bl	80090d8 <HAL_GPIO_ReadPin>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10d      	bne.n	8002f54 <menu+0x1da0>
 8002f38:	4b77      	ldr	r3, [pc, #476]	; (8003118 <menu+0x1f64>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f46:	4b75      	ldr	r3, [pc, #468]	; (800311c <menu+0x1f68>)
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	4b75      	ldr	r3, [pc, #468]	; (8003120 <menu+0x1f6c>)
 8002f4c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f4e:	4b75      	ldr	r3, [pc, #468]	; (8003124 <menu+0x1f70>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f54:	4b74      	ldr	r3, [pc, #464]	; (8003128 <menu+0x1f74>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	f040 80c3 	bne.w	80030e4 <menu+0x1f30>
		if(dilSecim == 0) {
 8002f5e:	4b6b      	ldr	r3, [pc, #428]	; (800310c <menu+0x1f58>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f66:	4a71      	ldr	r2, [pc, #452]	; (800312c <menu+0x1f78>)
 8002f68:	2101      	movs	r1, #1
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f004 fd8e 	bl	8007a8c <lcd_print>
 8002f70:	e008      	b.n	8002f84 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002f72:	4b66      	ldr	r3, [pc, #408]	; (800310c <menu+0x1f58>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d104      	bne.n	8002f84 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f7a:	4a6d      	ldr	r2, [pc, #436]	; (8003130 <menu+0x1f7c>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f004 fd84 	bl	8007a8c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f84:	4b6b      	ldr	r3, [pc, #428]	; (8003134 <menu+0x1f80>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d113      	bne.n	8002fb4 <menu+0x1e00>
			if(dilSecim == 0){
 8002f8c:	4b5f      	ldr	r3, [pc, #380]	; (800310c <menu+0x1f58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f94:	4a68      	ldr	r2, [pc, #416]	; (8003138 <menu+0x1f84>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f004 fd77 	bl	8007a8c <lcd_print>
 8002f9e:	e038      	b.n	8003012 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <menu+0x1f58>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d134      	bne.n	8003012 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002fa8:	4a64      	ldr	r2, [pc, #400]	; (800313c <menu+0x1f88>)
 8002faa:	2101      	movs	r1, #1
 8002fac:	2002      	movs	r0, #2
 8002fae:	f004 fd6d 	bl	8007a8c <lcd_print>
 8002fb2:	e02e      	b.n	8003012 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002fb4:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <menu+0x1f80>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d113      	bne.n	8002fe4 <menu+0x1e30>
			if(dilSecim == 0){
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <menu+0x1f58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002fc4:	4a5e      	ldr	r2, [pc, #376]	; (8003140 <menu+0x1f8c>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	2002      	movs	r0, #2
 8002fca:	f004 fd5f 	bl	8007a8c <lcd_print>
 8002fce:	e020      	b.n	8003012 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fd0:	4b4e      	ldr	r3, [pc, #312]	; (800310c <menu+0x1f58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d11c      	bne.n	8003012 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <menu+0x1f90>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f004 fd55 	bl	8007a8c <lcd_print>
 8002fe2:	e016      	b.n	8003012 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <menu+0x1f80>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002fec:	4b47      	ldr	r3, [pc, #284]	; (800310c <menu+0x1f58>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002ff4:	4a54      	ldr	r2, [pc, #336]	; (8003148 <menu+0x1f94>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f004 fd47 	bl	8007a8c <lcd_print>
 8002ffe:	e008      	b.n	8003012 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003000:	4b42      	ldr	r3, [pc, #264]	; (800310c <menu+0x1f58>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d104      	bne.n	8003012 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003008:	4a50      	ldr	r2, [pc, #320]	; (800314c <menu+0x1f98>)
 800300a:	2101      	movs	r1, #1
 800300c:	2002      	movs	r0, #2
 800300e:	f004 fd3d 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003012:	2102      	movs	r1, #2
 8003014:	483f      	ldr	r0, [pc, #252]	; (8003114 <menu+0x1f60>)
 8003016:	f006 f85f 	bl	80090d8 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d115      	bne.n	800304c <menu+0x1e98>
 8003020:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <menu+0x1f64>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <menu+0x1f80>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <menu+0x1f80>)
 8003038:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <menu+0x1f80>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003042:	4b3c      	ldr	r3, [pc, #240]	; (8003134 <menu+0x1f80>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003048:	f001 fc80 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800304c:	2104      	movs	r1, #4
 800304e:	4831      	ldr	r0, [pc, #196]	; (8003114 <menu+0x1f60>)
 8003050:	f006 f842 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d115      	bne.n	8003086 <menu+0x1ed2>
 800305a:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <menu+0x1f64>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <menu+0x1f80>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <menu+0x1f80>)
 8003072:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003074:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <menu+0x1f80>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d902      	bls.n	8003082 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <menu+0x1f80>)
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003082:	f001 fc63 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003086:	2108      	movs	r1, #8
 8003088:	4822      	ldr	r0, [pc, #136]	; (8003114 <menu+0x1f60>)
 800308a:	f006 f825 	bl	80090d8 <HAL_GPIO_ReadPin>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d127      	bne.n	80030e4 <menu+0x1f30>
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <menu+0x1f64>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d020      	beq.n	80030e4 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <menu+0x1f80>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <menu+0x1f6c>)
 80030a8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <menu+0x1f80>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d003      	beq.n	80030ba <menu+0x1f06>
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <menu+0x1f80>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d106      	bne.n	80030c8 <menu+0x1f14>
				calismaSekli = 0;
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <menu+0x1f9c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <menu+0x1f9c>)
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <menu+0x1f6c>)
 80030c6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <menu+0x1f80>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <menu+0x1fa0>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <menu+0x1fa0>)
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <menu+0x1f6c>)
 80030dc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <menu+0x1f70>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <menu+0x1f74>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b12      	cmp	r3, #18
 80030ea:	f040 80d5 	bne.w	8003298 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <menu+0x1f80>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d13c      	bne.n	8003170 <menu+0x1fbc>
			if(dilSecim == 0) {
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <menu+0x1f58>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d12e      	bne.n	800315c <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80030fe:	4a16      	ldr	r2, [pc, #88]	; (8003158 <menu+0x1fa4>)
 8003100:	2101      	movs	r1, #1
 8003102:	2001      	movs	r0, #1
 8003104:	f004 fcc2 	bl	8007a8c <lcd_print>
 8003108:	e048      	b.n	800319c <menu+0x1fe8>
 800310a:	bf00      	nop
 800310c:	20000215 	.word	0x20000215
 8003110:	0800d158 	.word	0x0800d158
 8003114:	40010800 	.word	0x40010800
 8003118:	20000223 	.word	0x20000223
 800311c:	20000202 	.word	0x20000202
 8003120:	20000120 	.word	0x20000120
 8003124:	20000220 	.word	0x20000220
 8003128:	200001f4 	.word	0x200001f4
 800312c:	0800d4d4 	.word	0x0800d4d4
 8003130:	0800d4e8 	.word	0x0800d4e8
 8003134:	20000203 	.word	0x20000203
 8003138:	0800d4fc 	.word	0x0800d4fc
 800313c:	0800d50c 	.word	0x0800d50c
 8003140:	0800d51c 	.word	0x0800d51c
 8003144:	0800d52c 	.word	0x0800d52c
 8003148:	0800d0e4 	.word	0x0800d0e4
 800314c:	0800d0f8 	.word	0x0800d0f8
 8003150:	200001f5 	.word	0x200001f5
 8003154:	20000206 	.word	0x20000206
 8003158:	0800d53c 	.word	0x0800d53c
			} else if(dilSecim == 1) {
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <menu+0x2198>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d11b      	bne.n	800319c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003164:	4a7a      	ldr	r2, [pc, #488]	; (8003350 <menu+0x219c>)
 8003166:	2101      	movs	r1, #1
 8003168:	2001      	movs	r0, #1
 800316a:	f004 fc8f 	bl	8007a8c <lcd_print>
 800316e:	e015      	b.n	800319c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003170:	4b78      	ldr	r3, [pc, #480]	; (8003354 <menu+0x21a0>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d111      	bne.n	800319c <menu+0x1fe8>
			if(dilSecim == 0){
 8003178:	4b74      	ldr	r3, [pc, #464]	; (800334c <menu+0x2198>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003180:	4a75      	ldr	r2, [pc, #468]	; (8003358 <menu+0x21a4>)
 8003182:	2101      	movs	r1, #1
 8003184:	2001      	movs	r0, #1
 8003186:	f004 fc81 	bl	8007a8c <lcd_print>
			}
			if(dilSecim == 1){
 800318a:	4b70      	ldr	r3, [pc, #448]	; (800334c <menu+0x2198>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d104      	bne.n	800319c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003192:	4a72      	ldr	r2, [pc, #456]	; (800335c <menu+0x21a8>)
 8003194:	2101      	movs	r1, #1
 8003196:	2001      	movs	r0, #1
 8003198:	f004 fc78 	bl	8007a8c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800319c:	4b70      	ldr	r3, [pc, #448]	; (8003360 <menu+0x21ac>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d113      	bne.n	80031cc <menu+0x2018>
			if(dilSecim == 0) {
 80031a4:	4b69      	ldr	r3, [pc, #420]	; (800334c <menu+0x2198>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80031ac:	4a6d      	ldr	r2, [pc, #436]	; (8003364 <menu+0x21b0>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f004 fc6b 	bl	8007a8c <lcd_print>
 80031b6:	e020      	b.n	80031fa <menu+0x2046>
			} else if(dilSecim == 1){
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <menu+0x2198>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d11c      	bne.n	80031fa <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80031c0:	4a69      	ldr	r2, [pc, #420]	; (8003368 <menu+0x21b4>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f004 fc61 	bl	8007a8c <lcd_print>
 80031ca:	e016      	b.n	80031fa <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80031cc:	4b64      	ldr	r3, [pc, #400]	; (8003360 <menu+0x21ac>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d112      	bne.n	80031fa <menu+0x2046>
			if(dilSecim == 0){
 80031d4:	4b5d      	ldr	r3, [pc, #372]	; (800334c <menu+0x2198>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80031dc:	4a63      	ldr	r2, [pc, #396]	; (800336c <menu+0x21b8>)
 80031de:	2101      	movs	r1, #1
 80031e0:	2002      	movs	r0, #2
 80031e2:	f004 fc53 	bl	8007a8c <lcd_print>
 80031e6:	e008      	b.n	80031fa <menu+0x2046>
			} else if(dilSecim == 1){
 80031e8:	4b58      	ldr	r3, [pc, #352]	; (800334c <menu+0x2198>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d104      	bne.n	80031fa <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80031f0:	4a5f      	ldr	r2, [pc, #380]	; (8003370 <menu+0x21bc>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f004 fc49 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fa:	2102      	movs	r1, #2
 80031fc:	485d      	ldr	r0, [pc, #372]	; (8003374 <menu+0x21c0>)
 80031fe:	f005 ff6b 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003202:	4603      	mov	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d115      	bne.n	8003234 <menu+0x2080>
 8003208:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <menu+0x21c4>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00e      	beq.n	8003234 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003216:	4b52      	ldr	r3, [pc, #328]	; (8003360 <menu+0x21ac>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b50      	ldr	r3, [pc, #320]	; (8003360 <menu+0x21ac>)
 8003220:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003222:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <menu+0x21ac>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d902      	bls.n	8003230 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800322a:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <menu+0x21ac>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003230:	f001 fb8c 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003234:	2104      	movs	r1, #4
 8003236:	484f      	ldr	r0, [pc, #316]	; (8003374 <menu+0x21c0>)
 8003238:	f005 ff4e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800323c:	4603      	mov	r3, r0
 800323e:	2b01      	cmp	r3, #1
 8003240:	d115      	bne.n	800326e <menu+0x20ba>
 8003242:	4b4d      	ldr	r3, [pc, #308]	; (8003378 <menu+0x21c4>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <menu+0x21ac>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	3b01      	subs	r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b41      	ldr	r3, [pc, #260]	; (8003360 <menu+0x21ac>)
 800325a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800325c:	4b40      	ldr	r3, [pc, #256]	; (8003360 <menu+0x21ac>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003264:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <menu+0x21ac>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800326a:	f001 fb6f 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800326e:	2108      	movs	r1, #8
 8003270:	4840      	ldr	r0, [pc, #256]	; (8003374 <menu+0x21c0>)
 8003272:	f005 ff31 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10d      	bne.n	8003298 <menu+0x20e4>
 800327c:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <menu+0x21c4>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	f083 0301 	eor.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800328a:	4b35      	ldr	r3, [pc, #212]	; (8003360 <menu+0x21ac>)
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <menu+0x21c8>)
 8003290:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <menu+0x21cc>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <menu+0x21d0>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b13      	cmp	r3, #19
 800329e:	f040 80d5 	bne.w	800344c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <menu+0x21a0>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d113      	bne.n	80032d2 <menu+0x211e>
			if(dilSecim == 0) {
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <menu+0x2198>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80032b2:	4a35      	ldr	r2, [pc, #212]	; (8003388 <menu+0x21d4>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	2001      	movs	r0, #1
 80032b8:	f004 fbe8 	bl	8007a8c <lcd_print>
 80032bc:	e01f      	b.n	80032fe <menu+0x214a>
			} else if(dilSecim == 1) {
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <menu+0x2198>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d11b      	bne.n	80032fe <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80032c6:	4a31      	ldr	r2, [pc, #196]	; (800338c <menu+0x21d8>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	2001      	movs	r0, #1
 80032cc:	f004 fbde 	bl	8007a8c <lcd_print>
 80032d0:	e015      	b.n	80032fe <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <menu+0x21a0>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d111      	bne.n	80032fe <menu+0x214a>
			if(dilSecim == 0) {
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <menu+0x2198>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80032e2:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <menu+0x21dc>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	2001      	movs	r0, #1
 80032e8:	f004 fbd0 	bl	8007a8c <lcd_print>
			}
			if(dilSecim == 1) {
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <menu+0x2198>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d104      	bne.n	80032fe <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <menu+0x21e0>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2001      	movs	r0, #1
 80032fa:	f004 fbc7 	bl	8007a8c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <menu+0x21e4>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <menu+0x217a>
			if(dilSecim == 0) {
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <menu+0x2198>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800330e:	4a15      	ldr	r2, [pc, #84]	; (8003364 <menu+0x21b0>)
 8003310:	2101      	movs	r1, #1
 8003312:	2002      	movs	r0, #2
 8003314:	f004 fbba 	bl	8007a8c <lcd_print>
 8003318:	e049      	b.n	80033ae <menu+0x21fa>
			} else if(dilSecim == 1) {
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <menu+0x2198>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d145      	bne.n	80033ae <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003322:	4a11      	ldr	r2, [pc, #68]	; (8003368 <menu+0x21b4>)
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f004 fbb0 	bl	8007a8c <lcd_print>
 800332c:	e03f      	b.n	80033ae <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <menu+0x21e4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d13b      	bne.n	80033ae <menu+0x21fa>
			if(dilSecim == 0) {
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <menu+0x2198>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d12e      	bne.n	800339c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <menu+0x21b8>)
 8003340:	2101      	movs	r1, #1
 8003342:	2002      	movs	r0, #2
 8003344:	f004 fba2 	bl	8007a8c <lcd_print>
 8003348:	e031      	b.n	80033ae <menu+0x21fa>
 800334a:	bf00      	nop
 800334c:	20000215 	.word	0x20000215
 8003350:	0800d550 	.word	0x0800d550
 8003354:	20000203 	.word	0x20000203
 8003358:	0800d560 	.word	0x0800d560
 800335c:	0800d574 	.word	0x0800d574
 8003360:	20000204 	.word	0x20000204
 8003364:	0800d0e4 	.word	0x0800d0e4
 8003368:	0800d0f8 	.word	0x0800d0f8
 800336c:	0800d144 	.word	0x0800d144
 8003370:	0800d158 	.word	0x0800d158
 8003374:	40010800 	.word	0x40010800
 8003378:	20000223 	.word	0x20000223
 800337c:	20000120 	.word	0x20000120
 8003380:	20000220 	.word	0x20000220
 8003384:	200001f4 	.word	0x200001f4
 8003388:	0800d588 	.word	0x0800d588
 800338c:	0800d59c 	.word	0x0800d59c
 8003390:	0800d5b0 	.word	0x0800d5b0
 8003394:	0800d5c4 	.word	0x0800d5c4
 8003398:	20000205 	.word	0x20000205
			} else if(dilSecim == 1) {
 800339c:	4b90      	ldr	r3, [pc, #576]	; (80035e0 <menu+0x242c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d104      	bne.n	80033ae <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80033a4:	4a8f      	ldr	r2, [pc, #572]	; (80035e4 <menu+0x2430>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2002      	movs	r0, #2
 80033aa:	f004 fb6f 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ae:	2102      	movs	r1, #2
 80033b0:	488d      	ldr	r0, [pc, #564]	; (80035e8 <menu+0x2434>)
 80033b2:	f005 fe91 	bl	80090d8 <HAL_GPIO_ReadPin>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d115      	bne.n	80033e8 <menu+0x2234>
 80033bc:	4b8b      	ldr	r3, [pc, #556]	; (80035ec <menu+0x2438>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <menu+0x243c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b87      	ldr	r3, [pc, #540]	; (80035f0 <menu+0x243c>)
 80033d4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80033d6:	4b86      	ldr	r3, [pc, #536]	; (80035f0 <menu+0x243c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d902      	bls.n	80033e4 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80033de:	4b84      	ldr	r3, [pc, #528]	; (80035f0 <menu+0x243c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e4:	f001 fab2 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e8:	2104      	movs	r1, #4
 80033ea:	487f      	ldr	r0, [pc, #508]	; (80035e8 <menu+0x2434>)
 80033ec:	f005 fe74 	bl	80090d8 <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d115      	bne.n	8003422 <menu+0x226e>
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <menu+0x2438>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003404:	4b7a      	ldr	r3, [pc, #488]	; (80035f0 <menu+0x243c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <menu+0x243c>)
 800340e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003410:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <menu+0x243c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003418:	4b75      	ldr	r3, [pc, #468]	; (80035f0 <menu+0x243c>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800341e:	f001 fa95 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003422:	2108      	movs	r1, #8
 8003424:	4870      	ldr	r0, [pc, #448]	; (80035e8 <menu+0x2434>)
 8003426:	f005 fe57 	bl	80090d8 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10d      	bne.n	800344c <menu+0x2298>
 8003430:	4b6e      	ldr	r3, [pc, #440]	; (80035ec <menu+0x2438>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <menu+0x243c>)
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <menu+0x2440>)
 8003444:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <menu+0x2444>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800344c:	4b6b      	ldr	r3, [pc, #428]	; (80035fc <menu+0x2448>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b14      	cmp	r3, #20
 8003452:	f040 80b5 	bne.w	80035c0 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003456:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <menu+0x244c>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d113      	bne.n	8003486 <menu+0x22d2>
			if(dilSecim == 0) {
 800345e:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <menu+0x242c>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003466:	4a67      	ldr	r2, [pc, #412]	; (8003604 <menu+0x2450>)
 8003468:	2101      	movs	r1, #1
 800346a:	2001      	movs	r0, #1
 800346c:	f004 fb0e 	bl	8007a8c <lcd_print>
 8003470:	e020      	b.n	80034b4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <menu+0x242c>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d11c      	bne.n	80034b4 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800347a:	4a63      	ldr	r2, [pc, #396]	; (8003608 <menu+0x2454>)
 800347c:	2101      	movs	r1, #1
 800347e:	2001      	movs	r0, #1
 8003480:	f004 fb04 	bl	8007a8c <lcd_print>
 8003484:	e016      	b.n	80034b4 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003486:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <menu+0x244c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d112      	bne.n	80034b4 <menu+0x2300>
			if(dilSecim == 0) {
 800348e:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <menu+0x242c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003496:	4a5d      	ldr	r2, [pc, #372]	; (800360c <menu+0x2458>)
 8003498:	2101      	movs	r1, #1
 800349a:	2001      	movs	r0, #1
 800349c:	f004 faf6 	bl	8007a8c <lcd_print>
 80034a0:	e008      	b.n	80034b4 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <menu+0x242c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d104      	bne.n	80034b4 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80034aa:	4a59      	ldr	r2, [pc, #356]	; (8003610 <menu+0x245c>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	2001      	movs	r0, #1
 80034b0:	f004 faec 	bl	8007a8c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <menu+0x2460>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d113      	bne.n	80034e4 <menu+0x2330>
			if(dilSecim == 0) {
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <menu+0x242c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80034c4:	4a54      	ldr	r2, [pc, #336]	; (8003618 <menu+0x2464>)
 80034c6:	2101      	movs	r1, #1
 80034c8:	2002      	movs	r0, #2
 80034ca:	f004 fadf 	bl	8007a8c <lcd_print>
 80034ce:	e020      	b.n	8003512 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <menu+0x242c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d11c      	bne.n	8003512 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80034d8:	4a50      	ldr	r2, [pc, #320]	; (800361c <menu+0x2468>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f004 fad5 	bl	8007a8c <lcd_print>
 80034e2:	e016      	b.n	8003512 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <menu+0x2460>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d112      	bne.n	8003512 <menu+0x235e>
			if(dilSecim == 0) {
 80034ec:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <menu+0x242c>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80034f4:	4a4a      	ldr	r2, [pc, #296]	; (8003620 <menu+0x246c>)
 80034f6:	2101      	movs	r1, #1
 80034f8:	2002      	movs	r0, #2
 80034fa:	f004 fac7 	bl	8007a8c <lcd_print>
 80034fe:	e008      	b.n	8003512 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <menu+0x242c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d104      	bne.n	8003512 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003508:	4a46      	ldr	r2, [pc, #280]	; (8003624 <menu+0x2470>)
 800350a:	2101      	movs	r1, #1
 800350c:	2002      	movs	r0, #2
 800350e:	f004 fabd 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003512:	2102      	movs	r1, #2
 8003514:	4834      	ldr	r0, [pc, #208]	; (80035e8 <menu+0x2434>)
 8003516:	f005 fddf 	bl	80090d8 <HAL_GPIO_ReadPin>
 800351a:	4603      	mov	r3, r0
 800351c:	2b01      	cmp	r3, #1
 800351e:	d119      	bne.n	8003554 <menu+0x23a0>
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <menu+0x2438>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <menu+0x23a0>
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <menu+0x244c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d10e      	bne.n	8003554 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <menu+0x2460>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <menu+0x2460>)
 8003540:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <menu+0x2460>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d902      	bls.n	8003550 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800354a:	4b32      	ldr	r3, [pc, #200]	; (8003614 <menu+0x2460>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003550:	f001 f9fc 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003554:	2104      	movs	r1, #4
 8003556:	4824      	ldr	r0, [pc, #144]	; (80035e8 <menu+0x2434>)
 8003558:	f005 fdbe 	bl	80090d8 <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d119      	bne.n	8003596 <menu+0x23e2>
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <menu+0x2438>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f083 0301 	eor.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <menu+0x23e2>
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <menu+0x244c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d10e      	bne.n	8003596 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <menu+0x2460>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <menu+0x2460>)
 8003582:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <menu+0x2460>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <menu+0x2460>)
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003592:	f001 f9db 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2108      	movs	r1, #8
 8003598:	4813      	ldr	r0, [pc, #76]	; (80035e8 <menu+0x2434>)
 800359a:	f005 fd9d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10d      	bne.n	80035c0 <menu+0x240c>
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <menu+0x2438>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <menu+0x2460>)
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <menu+0x2440>)
 80035b8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <menu+0x2444>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <menu+0x2448>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b15      	cmp	r3, #21
 80035c6:	f040 80c2 	bne.w	800374e <menu+0x259a>
		if(dilSecim == 0) {
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <menu+0x242c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d12c      	bne.n	800362c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <menu+0x2474>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	2001      	movs	r0, #1
 80035d8:	f004 fa58 	bl	8007a8c <lcd_print>
 80035dc:	e02f      	b.n	800363e <menu+0x248a>
 80035de:	bf00      	nop
 80035e0:	20000215 	.word	0x20000215
 80035e4:	0800d158 	.word	0x0800d158
 80035e8:	40010800 	.word	0x40010800
 80035ec:	20000223 	.word	0x20000223
 80035f0:	20000205 	.word	0x20000205
 80035f4:	20000120 	.word	0x20000120
 80035f8:	20000220 	.word	0x20000220
 80035fc:	200001f4 	.word	0x200001f4
 8003600:	20000203 	.word	0x20000203
 8003604:	0800d5d8 	.word	0x0800d5d8
 8003608:	0800d5ec 	.word	0x0800d5ec
 800360c:	0800d600 	.word	0x0800d600
 8003610:	0800d614 	.word	0x0800d614
 8003614:	20000206 	.word	0x20000206
 8003618:	0800d628 	.word	0x0800d628
 800361c:	0800d63c 	.word	0x0800d63c
 8003620:	0800d64c 	.word	0x0800d64c
 8003624:	0800d660 	.word	0x0800d660
 8003628:	0800d670 	.word	0x0800d670
		} else if(dilSecim == 1) {
 800362c:	4b9c      	ldr	r3, [pc, #624]	; (80038a0 <menu+0x26ec>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d104      	bne.n	800363e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003634:	4a9b      	ldr	r2, [pc, #620]	; (80038a4 <menu+0x26f0>)
 8003636:	2101      	movs	r1, #1
 8003638:	2001      	movs	r0, #1
 800363a:	f004 fa27 	bl	8007a8c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800363e:	4b9a      	ldr	r3, [pc, #616]	; (80038a8 <menu+0x26f4>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d112      	bne.n	800366c <menu+0x24b8>
			if(dilSecim == 0) {
 8003646:	4b96      	ldr	r3, [pc, #600]	; (80038a0 <menu+0x26ec>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800364e:	4a97      	ldr	r2, [pc, #604]	; (80038ac <menu+0x26f8>)
 8003650:	2101      	movs	r1, #1
 8003652:	2002      	movs	r0, #2
 8003654:	f004 fa1a 	bl	8007a8c <lcd_print>
			}
			if(dilSecim == 1) {
 8003658:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <menu+0x26ec>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11c      	bne.n	800369a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003660:	4a93      	ldr	r2, [pc, #588]	; (80038b0 <menu+0x26fc>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fa11 	bl	8007a8c <lcd_print>
 800366a:	e016      	b.n	800369a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 800366c:	4b8e      	ldr	r3, [pc, #568]	; (80038a8 <menu+0x26f4>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d112      	bne.n	800369a <menu+0x24e6>
			if(dilSecim == 0) {
 8003674:	4b8a      	ldr	r3, [pc, #552]	; (80038a0 <menu+0x26ec>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 800367c:	4a8d      	ldr	r2, [pc, #564]	; (80038b4 <menu+0x2700>)
 800367e:	2101      	movs	r1, #1
 8003680:	2002      	movs	r0, #2
 8003682:	f004 fa03 	bl	8007a8c <lcd_print>
 8003686:	e008      	b.n	800369a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003688:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <menu+0x26ec>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d104      	bne.n	800369a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003690:	4a89      	ldr	r2, [pc, #548]	; (80038b8 <menu+0x2704>)
 8003692:	2101      	movs	r1, #1
 8003694:	2002      	movs	r0, #2
 8003696:	f004 f9f9 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800369a:	2102      	movs	r1, #2
 800369c:	4887      	ldr	r0, [pc, #540]	; (80038bc <menu+0x2708>)
 800369e:	f005 fd1b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d115      	bne.n	80036d4 <menu+0x2520>
 80036a8:	4b85      	ldr	r3, [pc, #532]	; (80038c0 <menu+0x270c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f083 0301 	eor.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <menu+0x26f4>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b7a      	ldr	r3, [pc, #488]	; (80038a8 <menu+0x26f4>)
 80036c0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80036c2:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <menu+0x26f4>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d902      	bls.n	80036d0 <menu+0x251c>
				platformSilindirTipi = 0;
 80036ca:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <menu+0x26f4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036d0:	f001 f93c 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d4:	2104      	movs	r1, #4
 80036d6:	4879      	ldr	r0, [pc, #484]	; (80038bc <menu+0x2708>)
 80036d8:	f005 fcfe 	bl	80090d8 <HAL_GPIO_ReadPin>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d115      	bne.n	800370e <menu+0x255a>
 80036e2:	4b77      	ldr	r3, [pc, #476]	; (80038c0 <menu+0x270c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	f083 0301 	eor.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <menu+0x26f4>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <menu+0x26f4>)
 80036fa:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80036fc:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <menu+0x26f4>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <menu+0x26f4>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800370a:	f001 f91f 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800370e:	2108      	movs	r1, #8
 8003710:	486a      	ldr	r0, [pc, #424]	; (80038bc <menu+0x2708>)
 8003712:	f005 fce1 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d118      	bne.n	800374e <menu+0x259a>
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <menu+0x270c>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800372a:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <menu+0x26f4>)
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <menu+0x2710>)
 8003730:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003732:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <menu+0x26f4>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d106      	bne.n	8003748 <menu+0x2594>
				altLimit = 1;
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <menu+0x2714>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003740:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <menu+0x2714>)
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <menu+0x2710>)
 8003746:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003748:	4b60      	ldr	r3, [pc, #384]	; (80038cc <menu+0x2718>)
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800374e:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <menu+0x271c>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b16      	cmp	r3, #22
 8003754:	f040 8081 	bne.w	800385a <menu+0x26a6>
		if(dilSecim == 0) {
 8003758:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <menu+0x26ec>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003760:	4a5c      	ldr	r2, [pc, #368]	; (80038d4 <menu+0x2720>)
 8003762:	2101      	movs	r1, #1
 8003764:	2001      	movs	r0, #1
 8003766:	f004 f991 	bl	8007a8c <lcd_print>
 800376a:	e008      	b.n	800377e <menu+0x25ca>
		} else if(dilSecim == 1) {
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <menu+0x26ec>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d104      	bne.n	800377e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <menu+0x2724>)
 8003776:	2101      	movs	r1, #1
 8003778:	2001      	movs	r0, #1
 800377a:	f004 f987 	bl	8007a8c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800377e:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <menu+0x26ec>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003786:	4a55      	ldr	r2, [pc, #340]	; (80038dc <menu+0x2728>)
 8003788:	2101      	movs	r1, #1
 800378a:	2002      	movs	r0, #2
 800378c:	f004 f97e 	bl	8007a8c <lcd_print>
 8003790:	e008      	b.n	80037a4 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003792:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <menu+0x26ec>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d104      	bne.n	80037a4 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800379a:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <menu+0x272c>)
 800379c:	2101      	movs	r1, #1
 800379e:	2002      	movs	r0, #2
 80037a0:	f004 f974 	bl	8007a8c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80037a4:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <menu+0x2730>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	220a      	movs	r2, #10
 80037aa:	494f      	ldr	r1, [pc, #316]	; (80038e8 <menu+0x2734>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f008 fcbf 	bl	800c130 <itoa>
		lcd_print(2,16,snum);
 80037b2:	4a4d      	ldr	r2, [pc, #308]	; (80038e8 <menu+0x2734>)
 80037b4:	2110      	movs	r1, #16
 80037b6:	2002      	movs	r0, #2
 80037b8:	f004 f968 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037bc:	2102      	movs	r1, #2
 80037be:	483f      	ldr	r0, [pc, #252]	; (80038bc <menu+0x2708>)
 80037c0:	f005 fc8a 	bl	80090d8 <HAL_GPIO_ReadPin>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d115      	bne.n	80037f6 <menu+0x2642>
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <menu+0x270c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	f083 0301 	eor.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80037d8:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <menu+0x2730>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <menu+0x2730>)
 80037e2:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <menu+0x2730>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d902      	bls.n	80037f2 <menu+0x263e>
				yukariValfTmr = 0;
 80037ec:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <menu+0x2730>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037f2:	f001 f8ab 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f6:	2104      	movs	r1, #4
 80037f8:	4830      	ldr	r0, [pc, #192]	; (80038bc <menu+0x2708>)
 80037fa:	f005 fc6d 	bl	80090d8 <HAL_GPIO_ReadPin>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d115      	bne.n	8003830 <menu+0x267c>
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <menu+0x270c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <menu+0x2730>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	3b01      	subs	r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <menu+0x2730>)
 800381c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <menu+0x2730>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <menu+0x2730>)
 8003828:	2205      	movs	r2, #5
 800382a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800382c:	f001 f88e 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003830:	2108      	movs	r1, #8
 8003832:	4822      	ldr	r0, [pc, #136]	; (80038bc <menu+0x2708>)
 8003834:	f005 fc50 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10d      	bne.n	800385a <menu+0x26a6>
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <menu+0x270c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	f083 0301 	eor.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <menu+0x2730>)
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <menu+0x2710>)
 8003852:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <menu+0x2718>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <menu+0x271c>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b17      	cmp	r3, #23
 8003860:	f040 80ac 	bne.w	80039bc <menu+0x2808>
		if(dilSecim == 0) {
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <menu+0x26ec>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <menu+0x2738>)
 800386e:	2101      	movs	r1, #1
 8003870:	2001      	movs	r0, #1
 8003872:	f004 f90b 	bl	8007a8c <lcd_print>
 8003876:	e008      	b.n	800388a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <menu+0x26ec>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d104      	bne.n	800388a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <menu+0x273c>)
 8003882:	2101      	movs	r1, #1
 8003884:	2001      	movs	r0, #1
 8003886:	f004 f901 	bl	8007a8c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <menu+0x26ec>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d130      	bne.n	80038f4 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <menu+0x2728>)
 8003894:	2101      	movs	r1, #1
 8003896:	2002      	movs	r0, #2
 8003898:	f004 f8f8 	bl	8007a8c <lcd_print>
 800389c:	e033      	b.n	8003906 <menu+0x2752>
 800389e:	bf00      	nop
 80038a0:	20000215 	.word	0x20000215
 80038a4:	0800d684 	.word	0x0800d684
 80038a8:	20000207 	.word	0x20000207
 80038ac:	0800d628 	.word	0x0800d628
 80038b0:	0800d63c 	.word	0x0800d63c
 80038b4:	0800d64c 	.word	0x0800d64c
 80038b8:	0800d660 	.word	0x0800d660
 80038bc:	40010800 	.word	0x40010800
 80038c0:	20000223 	.word	0x20000223
 80038c4:	20000120 	.word	0x20000120
 80038c8:	200001fa 	.word	0x200001fa
 80038cc:	20000220 	.word	0x20000220
 80038d0:	200001f4 	.word	0x200001f4
 80038d4:	0800d694 	.word	0x0800d694
 80038d8:	0800d6a8 	.word	0x0800d6a8
 80038dc:	0800d348 	.word	0x0800d348
 80038e0:	0800d6bc 	.word	0x0800d6bc
 80038e4:	20000208 	.word	0x20000208
 80038e8:	20000190 	.word	0x20000190
 80038ec:	0800d6cc 	.word	0x0800d6cc
 80038f0:	0800d6e0 	.word	0x0800d6e0
			} else if(dilSecim == 1) {
 80038f4:	4b98      	ldr	r3, [pc, #608]	; (8003b58 <menu+0x29a4>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d104      	bne.n	8003906 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80038fc:	4a97      	ldr	r2, [pc, #604]	; (8003b5c <menu+0x29a8>)
 80038fe:	2101      	movs	r1, #1
 8003900:	2002      	movs	r0, #2
 8003902:	f004 f8c3 	bl	8007a8c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003906:	4b96      	ldr	r3, [pc, #600]	; (8003b60 <menu+0x29ac>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	220a      	movs	r2, #10
 800390c:	4995      	ldr	r1, [pc, #596]	; (8003b64 <menu+0x29b0>)
 800390e:	4618      	mov	r0, r3
 8003910:	f008 fc0e 	bl	800c130 <itoa>
		lcd_print(2,16,snum);
 8003914:	4a93      	ldr	r2, [pc, #588]	; (8003b64 <menu+0x29b0>)
 8003916:	2110      	movs	r1, #16
 8003918:	2002      	movs	r0, #2
 800391a:	f004 f8b7 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800391e:	2102      	movs	r1, #2
 8003920:	4891      	ldr	r0, [pc, #580]	; (8003b68 <menu+0x29b4>)
 8003922:	f005 fbd9 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d115      	bne.n	8003958 <menu+0x27a4>
 800392c:	4b8f      	ldr	r3, [pc, #572]	; (8003b6c <menu+0x29b8>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	f083 0301 	eor.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800393a:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <menu+0x29ac>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	4b87      	ldr	r3, [pc, #540]	; (8003b60 <menu+0x29ac>)
 8003944:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003946:	4b86      	ldr	r3, [pc, #536]	; (8003b60 <menu+0x29ac>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b05      	cmp	r3, #5
 800394c:	d902      	bls.n	8003954 <menu+0x27a0>
				asagiValfTmr = 0;
 800394e:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <menu+0x29ac>)
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003954:	f000 fffa 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003958:	2104      	movs	r1, #4
 800395a:	4883      	ldr	r0, [pc, #524]	; (8003b68 <menu+0x29b4>)
 800395c:	f005 fbbc 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d115      	bne.n	8003992 <menu+0x27de>
 8003966:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <menu+0x29b8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	f083 0301 	eor.w	r3, r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003974:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <menu+0x29ac>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	3b01      	subs	r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b78      	ldr	r3, [pc, #480]	; (8003b60 <menu+0x29ac>)
 800397e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003980:	4b77      	ldr	r3, [pc, #476]	; (8003b60 <menu+0x29ac>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d902      	bls.n	800398e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003988:	4b75      	ldr	r3, [pc, #468]	; (8003b60 <menu+0x29ac>)
 800398a:	2205      	movs	r2, #5
 800398c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800398e:	f000 ffdd 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003992:	2108      	movs	r1, #8
 8003994:	4874      	ldr	r0, [pc, #464]	; (8003b68 <menu+0x29b4>)
 8003996:	f005 fb9f 	bl	80090d8 <HAL_GPIO_ReadPin>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10d      	bne.n	80039bc <menu+0x2808>
 80039a0:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <menu+0x29b8>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <menu+0x29ac>)
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <menu+0x29bc>)
 80039b4:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80039b6:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <menu+0x29c0>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80039bc:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <menu+0x29c4>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b18      	cmp	r3, #24
 80039c2:	f040 809d 	bne.w	8003b00 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80039c6:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <menu+0x29c8>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d113      	bne.n	80039f6 <menu+0x2842>
			if(dilSecim == 0) {
 80039ce:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <menu+0x29a4>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80039d6:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <menu+0x29cc>)
 80039d8:	2101      	movs	r1, #1
 80039da:	2001      	movs	r0, #1
 80039dc:	f004 f856 	bl	8007a8c <lcd_print>
 80039e0:	e020      	b.n	8003a24 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <menu+0x29a4>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11c      	bne.n	8003a24 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80039ea:	4a66      	ldr	r2, [pc, #408]	; (8003b84 <menu+0x29d0>)
 80039ec:	2101      	movs	r1, #1
 80039ee:	2001      	movs	r0, #1
 80039f0:	f004 f84c 	bl	8007a8c <lcd_print>
 80039f4:	e016      	b.n	8003a24 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80039f6:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <menu+0x29c8>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d112      	bne.n	8003a24 <menu+0x2870>
			if(dilSecim == 0) {
 80039fe:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <menu+0x29a4>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003a06:	4a60      	ldr	r2, [pc, #384]	; (8003b88 <menu+0x29d4>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f004 f83e 	bl	8007a8c <lcd_print>
 8003a10:	e008      	b.n	8003a24 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a12:	4b51      	ldr	r3, [pc, #324]	; (8003b58 <menu+0x29a4>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d104      	bne.n	8003a24 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003a1a:	4a5c      	ldr	r2, [pc, #368]	; (8003b8c <menu+0x29d8>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f004 f834 	bl	8007a8c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a24:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <menu+0x29a4>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <menu+0x29dc>)
 8003a2e:	2101      	movs	r1, #1
 8003a30:	2002      	movs	r0, #2
 8003a32:	f004 f82b 	bl	8007a8c <lcd_print>
 8003a36:	e008      	b.n	8003a4a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a38:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <menu+0x29a4>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d104      	bne.n	8003a4a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a40:	4a46      	ldr	r2, [pc, #280]	; (8003b5c <menu+0x29a8>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	2002      	movs	r0, #2
 8003a46:	f004 f821 	bl	8007a8c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a4a:	4b52      	ldr	r3, [pc, #328]	; (8003b94 <menu+0x29e0>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	220a      	movs	r2, #10
 8003a50:	4944      	ldr	r1, [pc, #272]	; (8003b64 <menu+0x29b0>)
 8003a52:	4618      	mov	r0, r3
 8003a54:	f008 fb6c 	bl	800c130 <itoa>
		lcd_print(2, 16, snum);
 8003a58:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <menu+0x29b0>)
 8003a5a:	2110      	movs	r1, #16
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f004 f815 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a62:	2102      	movs	r1, #2
 8003a64:	4840      	ldr	r0, [pc, #256]	; (8003b68 <menu+0x29b4>)
 8003a66:	f005 fb37 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d115      	bne.n	8003a9c <menu+0x28e8>
 8003a70:	4b3e      	ldr	r3, [pc, #248]	; (8003b6c <menu+0x29b8>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a7e:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <menu+0x29e0>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3301      	adds	r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b43      	ldr	r3, [pc, #268]	; (8003b94 <menu+0x29e0>)
 8003a88:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a8a:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <menu+0x29e0>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d902      	bls.n	8003a98 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a92:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <menu+0x29e0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a98:	f000 ff58 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	4832      	ldr	r0, [pc, #200]	; (8003b68 <menu+0x29b4>)
 8003aa0:	f005 fb1a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d115      	bne.n	8003ad6 <menu+0x2922>
 8003aaa:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <menu+0x29b8>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f083 0301 	eor.w	r3, r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <menu+0x29e0>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <menu+0x29e0>)
 8003ac2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ac4:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <menu+0x29e0>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d902      	bls.n	8003ad2 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <menu+0x29e0>)
 8003ace:	2205      	movs	r2, #5
 8003ad0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ad2:	f000 ff3b 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad6:	2108      	movs	r1, #8
 8003ad8:	4823      	ldr	r0, [pc, #140]	; (8003b68 <menu+0x29b4>)
 8003ada:	f005 fafd 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d10d      	bne.n	8003b00 <menu+0x294c>
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <menu+0x29b8>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	f083 0301 	eor.w	r3, r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <menu+0x29e0>)
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <menu+0x29bc>)
 8003af8:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <menu+0x29c0>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <menu+0x29c4>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b19      	cmp	r3, #25
 8003b06:	f040 80c4 	bne.w	8003c92 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <menu+0x29c8>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d113      	bne.n	8003b3a <menu+0x2986>
			if(dilSecim == 0) {
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <menu+0x29a4>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <menu+0x29e4>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f003 ffb4 	bl	8007a8c <lcd_print>
 8003b24:	e047      	b.n	8003bb6 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <menu+0x29a4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d143      	bne.n	8003bb6 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <menu+0x29e8>)
 8003b30:	2101      	movs	r1, #1
 8003b32:	2001      	movs	r0, #1
 8003b34:	f003 ffaa 	bl	8007a8c <lcd_print>
 8003b38:	e03d      	b.n	8003bb6 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <menu+0x29c8>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d139      	bne.n	8003bb6 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <menu+0x29a4>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d12c      	bne.n	8003ba4 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <menu+0x29ec>)
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f003 ff9c 	bl	8007a8c <lcd_print>
 8003b54:	e02f      	b.n	8003bb6 <menu+0x2a02>
 8003b56:	bf00      	nop
 8003b58:	20000215 	.word	0x20000215
 8003b5c:	0800d6bc 	.word	0x0800d6bc
 8003b60:	20000209 	.word	0x20000209
 8003b64:	20000190 	.word	0x20000190
 8003b68:	40010800 	.word	0x40010800
 8003b6c:	20000223 	.word	0x20000223
 8003b70:	20000120 	.word	0x20000120
 8003b74:	20000220 	.word	0x20000220
 8003b78:	200001f4 	.word	0x200001f4
 8003b7c:	20000203 	.word	0x20000203
 8003b80:	0800d6f4 	.word	0x0800d6f4
 8003b84:	0800d708 	.word	0x0800d708
 8003b88:	0800d71c 	.word	0x0800d71c
 8003b8c:	0800d730 	.word	0x0800d730
 8003b90:	0800d348 	.word	0x0800d348
 8003b94:	2000020a 	.word	0x2000020a
 8003b98:	0800d744 	.word	0x0800d744
 8003b9c:	0800d758 	.word	0x0800d758
 8003ba0:	0800d76c 	.word	0x0800d76c
			} else if(dilSecim == 1) {
 8003ba4:	4b73      	ldr	r3, [pc, #460]	; (8003d74 <menu+0x2bc0>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d104      	bne.n	8003bb6 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003bac:	4a72      	ldr	r2, [pc, #456]	; (8003d78 <menu+0x2bc4>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f003 ff6b 	bl	8007a8c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003bb6:	4b6f      	ldr	r3, [pc, #444]	; (8003d74 <menu+0x2bc0>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bbe:	4a6f      	ldr	r2, [pc, #444]	; (8003d7c <menu+0x2bc8>)
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	2002      	movs	r0, #2
 8003bc4:	f003 ff62 	bl	8007a8c <lcd_print>
 8003bc8:	e008      	b.n	8003bdc <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003bca:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <menu+0x2bc0>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d104      	bne.n	8003bdc <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003bd2:	4a6b      	ldr	r2, [pc, #428]	; (8003d80 <menu+0x2bcc>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2002      	movs	r0, #2
 8003bd8:	f003 ff58 	bl	8007a8c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <menu+0x2bd0>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	220a      	movs	r2, #10
 8003be2:	4969      	ldr	r1, [pc, #420]	; (8003d88 <menu+0x2bd4>)
 8003be4:	4618      	mov	r0, r3
 8003be6:	f008 faa3 	bl	800c130 <itoa>
		lcd_print(2,16,snum);
 8003bea:	4a67      	ldr	r2, [pc, #412]	; (8003d88 <menu+0x2bd4>)
 8003bec:	2110      	movs	r1, #16
 8003bee:	2002      	movs	r0, #2
 8003bf0:	f003 ff4c 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	4865      	ldr	r0, [pc, #404]	; (8003d8c <menu+0x2bd8>)
 8003bf8:	f005 fa6e 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d115      	bne.n	8003c2e <menu+0x2a7a>
 8003c02:	4b63      	ldr	r3, [pc, #396]	; (8003d90 <menu+0x2bdc>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	f083 0301 	eor.w	r3, r3, #1
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c10:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <menu+0x2bd0>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b5a      	ldr	r3, [pc, #360]	; (8003d84 <menu+0x2bd0>)
 8003c1a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <menu+0x2bd0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d902      	bls.n	8003c2a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c24:	4b57      	ldr	r3, [pc, #348]	; (8003d84 <menu+0x2bd0>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c2a:	f000 fe8f 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2e:	2104      	movs	r1, #4
 8003c30:	4856      	ldr	r0, [pc, #344]	; (8003d8c <menu+0x2bd8>)
 8003c32:	f005 fa51 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d115      	bne.n	8003c68 <menu+0x2ab4>
 8003c3c:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <menu+0x2bdc>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00e      	beq.n	8003c68 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c4a:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <menu+0x2bd0>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <menu+0x2bd0>)
 8003c54:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003c56:	4b4b      	ldr	r3, [pc, #300]	; (8003d84 <menu+0x2bd0>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d902      	bls.n	8003c64 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003c5e:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <menu+0x2bd0>)
 8003c60:	2205      	movs	r2, #5
 8003c62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c64:	f000 fe72 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c68:	2108      	movs	r1, #8
 8003c6a:	4848      	ldr	r0, [pc, #288]	; (8003d8c <menu+0x2bd8>)
 8003c6c:	f005 fa34 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10d      	bne.n	8003c92 <menu+0x2ade>
 8003c76:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <menu+0x2bdc>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f083 0301 	eor.w	r3, r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c84:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <menu+0x2bd0>)
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <menu+0x2be0>)
 8003c8a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c8c:	4b42      	ldr	r3, [pc, #264]	; (8003d98 <menu+0x2be4>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c92:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <menu+0x2be8>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b1a      	cmp	r3, #26
 8003c98:	f040 80ec 	bne.w	8003e74 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <menu+0x2bc0>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003ca4:	4a3e      	ldr	r2, [pc, #248]	; (8003da0 <menu+0x2bec>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f003 feef 	bl	8007a8c <lcd_print>
 8003cae:	e008      	b.n	8003cc2 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <menu+0x2bc0>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d104      	bne.n	8003cc2 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <menu+0x2bf0>)
 8003cba:	2101      	movs	r1, #1
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f003 fee5 	bl	8007a8c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <menu+0x2bf4>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b63      	cmp	r3, #99	; 0x63
 8003cc8:	d91e      	bls.n	8003d08 <menu+0x2b54>
			if(dilSecim == 0) {
 8003cca:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <menu+0x2bc0>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <menu+0x2bc8>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f003 fed8 	bl	8007a8c <lcd_print>
			}
			if(dilSecim == 1) {
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <menu+0x2bc0>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d104      	bne.n	8003cee <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <menu+0x2bcc>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f003 fecf 	bl	8007a8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cee:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <menu+0x2bf4>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	220a      	movs	r2, #10
 8003cf4:	4924      	ldr	r1, [pc, #144]	; (8003d88 <menu+0x2bd4>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f008 fa1a 	bl	800c130 <itoa>
			lcd_print(2,14,snum);
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <menu+0x2bd4>)
 8003cfe:	210e      	movs	r1, #14
 8003d00:	2002      	movs	r0, #2
 8003d02:	f003 fec3 	bl	8007a8c <lcd_print>
 8003d06:	e066      	b.n	8003dd6 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <menu+0x2bf4>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	d923      	bls.n	8003d58 <menu+0x2ba4>
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <menu+0x2bf4>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b63      	cmp	r3, #99	; 0x63
 8003d16:	d81f      	bhi.n	8003d58 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <menu+0x2bc0>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <menu+0x2bc8>)
 8003d22:	2101      	movs	r1, #1
 8003d24:	2002      	movs	r0, #2
 8003d26:	f003 feb1 	bl	8007a8c <lcd_print>
 8003d2a:	e008      	b.n	8003d3e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <menu+0x2bc0>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d104      	bne.n	8003d3e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d34:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <menu+0x2bcc>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	2002      	movs	r0, #2
 8003d3a:	f003 fea7 	bl	8007a8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <menu+0x2bf4>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	220a      	movs	r2, #10
 8003d44:	4910      	ldr	r1, [pc, #64]	; (8003d88 <menu+0x2bd4>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f008 f9f2 	bl	800c130 <itoa>
			lcd_print(2, 15, snum);
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <menu+0x2bd4>)
 8003d4e:	210f      	movs	r1, #15
 8003d50:	2002      	movs	r0, #2
 8003d52:	f003 fe9b 	bl	8007a8c <lcd_print>
 8003d56:	e03e      	b.n	8003dd6 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <menu+0x2bf4>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d83a      	bhi.n	8003dd6 <menu+0x2c22>
			if(dilSecim == 0) {
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <menu+0x2bc0>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d121      	bne.n	8003dac <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <menu+0x2bc8>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f003 fe8d 	bl	8007a8c <lcd_print>
 8003d72:	e024      	b.n	8003dbe <menu+0x2c0a>
 8003d74:	20000215 	.word	0x20000215
 8003d78:	0800d780 	.word	0x0800d780
 8003d7c:	0800d348 	.word	0x0800d348
 8003d80:	0800d6bc 	.word	0x0800d6bc
 8003d84:	2000020b 	.word	0x2000020b
 8003d88:	20000190 	.word	0x20000190
 8003d8c:	40010800 	.word	0x40010800
 8003d90:	20000223 	.word	0x20000223
 8003d94:	20000120 	.word	0x20000120
 8003d98:	20000220 	.word	0x20000220
 8003d9c:	200001f4 	.word	0x200001f4
 8003da0:	0800d794 	.word	0x0800d794
 8003da4:	0800d7a8 	.word	0x0800d7a8
 8003da8:	2000020c 	.word	0x2000020c
			} else if(dilSecim == 1) {
 8003dac:	4b8f      	ldr	r3, [pc, #572]	; (8003fec <menu+0x2e38>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d104      	bne.n	8003dbe <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003db4:	4a8e      	ldr	r2, [pc, #568]	; (8003ff0 <menu+0x2e3c>)
 8003db6:	2101      	movs	r1, #1
 8003db8:	2002      	movs	r0, #2
 8003dba:	f003 fe67 	bl	8007a8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dbe:	4b8d      	ldr	r3, [pc, #564]	; (8003ff4 <menu+0x2e40>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	220a      	movs	r2, #10
 8003dc4:	498c      	ldr	r1, [pc, #560]	; (8003ff8 <menu+0x2e44>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f008 f9b2 	bl	800c130 <itoa>
			lcd_print(2, 16, snum);
 8003dcc:	4a8a      	ldr	r2, [pc, #552]	; (8003ff8 <menu+0x2e44>)
 8003dce:	2110      	movs	r1, #16
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f003 fe5b 	bl	8007a8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4888      	ldr	r0, [pc, #544]	; (8003ffc <menu+0x2e48>)
 8003dda:	f005 f97d 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <menu+0x2c5c>
 8003de4:	4b86      	ldr	r3, [pc, #536]	; (8004000 <menu+0x2e4c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f083 0301 	eor.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003df2:	4b80      	ldr	r3, [pc, #512]	; (8003ff4 <menu+0x2e40>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b7e      	ldr	r3, [pc, #504]	; (8003ff4 <menu+0x2e40>)
 8003dfc:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <menu+0x2e40>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2bb4      	cmp	r3, #180	; 0xb4
 8003e04:	d902      	bls.n	8003e0c <menu+0x2c58>
				makineCalismaTmr = 0;
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <menu+0x2e40>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e0c:	f000 fd9e 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e10:	2104      	movs	r1, #4
 8003e12:	487a      	ldr	r0, [pc, #488]	; (8003ffc <menu+0x2e48>)
 8003e14:	f005 f960 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d115      	bne.n	8003e4a <menu+0x2c96>
 8003e1e:	4b78      	ldr	r3, [pc, #480]	; (8004000 <menu+0x2e4c>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e2c:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <menu+0x2e40>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <menu+0x2e40>)
 8003e36:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e38:	4b6e      	ldr	r3, [pc, #440]	; (8003ff4 <menu+0x2e40>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2bb5      	cmp	r3, #181	; 0xb5
 8003e3e:	d902      	bls.n	8003e46 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <menu+0x2e40>)
 8003e42:	22b4      	movs	r2, #180	; 0xb4
 8003e44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e46:	f000 fd81 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	486b      	ldr	r0, [pc, #428]	; (8003ffc <menu+0x2e48>)
 8003e4e:	f005 f943 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10d      	bne.n	8003e74 <menu+0x2cc0>
 8003e58:	4b69      	ldr	r3, [pc, #420]	; (8004000 <menu+0x2e4c>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003e66:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <menu+0x2e40>)
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <menu+0x2e50>)
 8003e6c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003e6e:	4b66      	ldr	r3, [pc, #408]	; (8004008 <menu+0x2e54>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003e74:	4b65      	ldr	r3, [pc, #404]	; (800400c <menu+0x2e58>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b1b      	cmp	r3, #27
 8003e7a:	f040 8083 	bne.w	8003f84 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e7e:	4a64      	ldr	r2, [pc, #400]	; (8004010 <menu+0x2e5c>)
 8003e80:	2101      	movs	r1, #1
 8003e82:	2001      	movs	r0, #1
 8003e84:	f003 fe02 	bl	8007a8c <lcd_print>

		if(buzzer == 0) {
 8003e88:	4b62      	ldr	r3, [pc, #392]	; (8004014 <menu+0x2e60>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d113      	bne.n	8003eb8 <menu+0x2d04>
			if(dilSecim == 0) {
 8003e90:	4b56      	ldr	r3, [pc, #344]	; (8003fec <menu+0x2e38>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e98:	4a5f      	ldr	r2, [pc, #380]	; (8004018 <menu+0x2e64>)
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f003 fdf5 	bl	8007a8c <lcd_print>
 8003ea2:	e020      	b.n	8003ee6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ea4:	4b51      	ldr	r3, [pc, #324]	; (8003fec <menu+0x2e38>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d11c      	bne.n	8003ee6 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003eac:	4a5b      	ldr	r2, [pc, #364]	; (800401c <menu+0x2e68>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f003 fdeb 	bl	8007a8c <lcd_print>
 8003eb6:	e016      	b.n	8003ee6 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003eb8:	4b56      	ldr	r3, [pc, #344]	; (8004014 <menu+0x2e60>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d112      	bne.n	8003ee6 <menu+0x2d32>
			if(dilSecim == 0) {
 8003ec0:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <menu+0x2e38>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003ec8:	4a55      	ldr	r2, [pc, #340]	; (8004020 <menu+0x2e6c>)
 8003eca:	2101      	movs	r1, #1
 8003ecc:	2002      	movs	r0, #2
 8003ece:	f003 fddd 	bl	8007a8c <lcd_print>
 8003ed2:	e008      	b.n	8003ee6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ed4:	4b45      	ldr	r3, [pc, #276]	; (8003fec <menu+0x2e38>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d104      	bne.n	8003ee6 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <menu+0x2e70>)
 8003ede:	2101      	movs	r1, #1
 8003ee0:	2002      	movs	r0, #2
 8003ee2:	f003 fdd3 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4844      	ldr	r0, [pc, #272]	; (8003ffc <menu+0x2e48>)
 8003eea:	f005 f8f5 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d115      	bne.n	8003f20 <menu+0x2d6c>
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <menu+0x2e4c>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f083 0301 	eor.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003f02:	4b44      	ldr	r3, [pc, #272]	; (8004014 <menu+0x2e60>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b42      	ldr	r3, [pc, #264]	; (8004014 <menu+0x2e60>)
 8003f0c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003f0e:	4b41      	ldr	r3, [pc, #260]	; (8004014 <menu+0x2e60>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d902      	bls.n	8003f1c <menu+0x2d68>
				buzzer = 0;
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <menu+0x2e60>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f1c:	f000 fd16 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f20:	2104      	movs	r1, #4
 8003f22:	4836      	ldr	r0, [pc, #216]	; (8003ffc <menu+0x2e48>)
 8003f24:	f005 f8d8 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d115      	bne.n	8003f5a <menu+0x2da6>
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <menu+0x2e4c>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f083 0301 	eor.w	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f3c:	4b35      	ldr	r3, [pc, #212]	; (8004014 <menu+0x2e60>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	4b33      	ldr	r3, [pc, #204]	; (8004014 <menu+0x2e60>)
 8003f46:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f48:	4b32      	ldr	r3, [pc, #200]	; (8004014 <menu+0x2e60>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <menu+0x2da2>
		   		buzzer = 1;
 8003f50:	4b30      	ldr	r3, [pc, #192]	; (8004014 <menu+0x2e60>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f56:	f000 fcf9 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f5a:	2108      	movs	r1, #8
 8003f5c:	4827      	ldr	r0, [pc, #156]	; (8003ffc <menu+0x2e48>)
 8003f5e:	f005 f8bb 	bl	80090d8 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10d      	bne.n	8003f84 <menu+0x2dd0>
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <menu+0x2e4c>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <menu+0x2e60>)
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <menu+0x2e50>)
 8003f7c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <menu+0x2e54>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <menu+0x2e58>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b1c      	cmp	r3, #28
 8003f8a:	f040 80ab 	bne.w	80040e4 <menu+0x2f30>
		calismaSayModu = 0;
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <menu+0x2e74>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <menu+0x2e78>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f003 fd77 	bl	8007a8c <lcd_print>

		if(demoMode == 0) {
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <menu+0x2e7c>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d113      	bne.n	8003fce <menu+0x2e1a>
			if(dilSecim == 0) {
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <menu+0x2e38>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <menu+0x2e64>)
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	f003 fd6a 	bl	8007a8c <lcd_print>
 8003fb8:	e045      	b.n	8004046 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <menu+0x2e38>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d141      	bne.n	8004046 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003fc2:	4a16      	ldr	r2, [pc, #88]	; (800401c <menu+0x2e68>)
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f003 fd60 	bl	8007a8c <lcd_print>
 8003fcc:	e03b      	b.n	8004046 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <menu+0x2e7c>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d137      	bne.n	8004046 <menu+0x2e92>
			if(dilSecim == 0){
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <menu+0x2e38>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d12a      	bne.n	8004034 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <menu+0x2e6c>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f003 fd52 	bl	8007a8c <lcd_print>
 8003fe8:	e02d      	b.n	8004046 <menu+0x2e92>
 8003fea:	bf00      	nop
 8003fec:	20000215 	.word	0x20000215
 8003ff0:	0800d6bc 	.word	0x0800d6bc
 8003ff4:	2000020c 	.word	0x2000020c
 8003ff8:	20000190 	.word	0x20000190
 8003ffc:	40010800 	.word	0x40010800
 8004000:	20000223 	.word	0x20000223
 8004004:	20000120 	.word	0x20000120
 8004008:	20000220 	.word	0x20000220
 800400c:	200001f4 	.word	0x200001f4
 8004010:	0800d7bc 	.word	0x0800d7bc
 8004014:	20000210 	.word	0x20000210
 8004018:	0800d0e4 	.word	0x0800d0e4
 800401c:	0800d0f8 	.word	0x0800d0f8
 8004020:	0800d144 	.word	0x0800d144
 8004024:	0800d158 	.word	0x0800d158
 8004028:	20000214 	.word	0x20000214
 800402c:	0800d7d0 	.word	0x0800d7d0
 8004030:	20000212 	.word	0x20000212
			} else if(dilSecim == 1) {
 8004034:	4b71      	ldr	r3, [pc, #452]	; (80041fc <menu+0x3048>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d104      	bne.n	8004046 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 800403c:	4a70      	ldr	r2, [pc, #448]	; (8004200 <menu+0x304c>)
 800403e:	2101      	movs	r1, #1
 8004040:	2002      	movs	r0, #2
 8004042:	f003 fd23 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004046:	2102      	movs	r1, #2
 8004048:	486e      	ldr	r0, [pc, #440]	; (8004204 <menu+0x3050>)
 800404a:	f005 f845 	bl	80090d8 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d115      	bne.n	8004080 <menu+0x2ecc>
 8004054:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <menu+0x3054>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f083 0301 	eor.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00e      	beq.n	8004080 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004062:	4b6a      	ldr	r3, [pc, #424]	; (800420c <menu+0x3058>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b68      	ldr	r3, [pc, #416]	; (800420c <menu+0x3058>)
 800406c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800406e:	4b67      	ldr	r3, [pc, #412]	; (800420c <menu+0x3058>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d902      	bls.n	800407c <menu+0x2ec8>
				demoMode = 0;
 8004076:	4b65      	ldr	r3, [pc, #404]	; (800420c <menu+0x3058>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800407c:	f000 fc66 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004080:	2104      	movs	r1, #4
 8004082:	4860      	ldr	r0, [pc, #384]	; (8004204 <menu+0x3050>)
 8004084:	f005 f828 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004088:	4603      	mov	r3, r0
 800408a:	2b01      	cmp	r3, #1
 800408c:	d115      	bne.n	80040ba <menu+0x2f06>
 800408e:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <menu+0x3054>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	f083 0301 	eor.w	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <menu+0x2f06>
			demoMode = demoMode - 1;
 800409c:	4b5b      	ldr	r3, [pc, #364]	; (800420c <menu+0x3058>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <menu+0x3058>)
 80040a6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80040a8:	4b58      	ldr	r3, [pc, #352]	; (800420c <menu+0x3058>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <menu+0x2f02>
		   		demoMode = 1;
 80040b0:	4b56      	ldr	r3, [pc, #344]	; (800420c <menu+0x3058>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040b6:	f000 fc49 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ba:	2108      	movs	r1, #8
 80040bc:	4851      	ldr	r0, [pc, #324]	; (8004204 <menu+0x3050>)
 80040be:	f005 f80b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10d      	bne.n	80040e4 <menu+0x2f30>
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <menu+0x3054>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f083 0301 	eor.w	r3, r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <menu+0x2f30>
			eepromData[26] = demoMode;
 80040d6:	4b4d      	ldr	r3, [pc, #308]	; (800420c <menu+0x3058>)
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	4b4d      	ldr	r3, [pc, #308]	; (8004210 <menu+0x305c>)
 80040dc:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80040de:	4b4d      	ldr	r3, [pc, #308]	; (8004214 <menu+0x3060>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80040e4:	4b4c      	ldr	r3, [pc, #304]	; (8004218 <menu+0x3064>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b1d      	cmp	r3, #29
 80040ea:	f040 8132 	bne.w	8004352 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80040ee:	4b4b      	ldr	r3, [pc, #300]	; (800421c <menu+0x3068>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d113      	bne.n	800411e <menu+0x2f6a>
 80040f6:	4b4a      	ldr	r3, [pc, #296]	; (8004220 <menu+0x306c>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <menu+0x2f6a>
 80040fe:	4b49      	ldr	r3, [pc, #292]	; (8004224 <menu+0x3070>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <menu+0x2f6a>
 8004106:	4b48      	ldr	r3, [pc, #288]	; (8004228 <menu+0x3074>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <menu+0x2f6a>
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <menu+0x3078>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004116:	4b46      	ldr	r3, [pc, #280]	; (8004230 <menu+0x307c>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e002      	b.n	8004124 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800411e:	4b44      	ldr	r3, [pc, #272]	; (8004230 <menu+0x307c>)
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004124:	4b43      	ldr	r3, [pc, #268]	; (8004234 <menu+0x3080>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d154      	bne.n	80041d6 <menu+0x3022>
			if(dilSecim == 0) {
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <menu+0x3048>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004134:	4a40      	ldr	r2, [pc, #256]	; (8004238 <menu+0x3084>)
 8004136:	2101      	movs	r1, #1
 8004138:	2001      	movs	r0, #1
 800413a:	f003 fca7 	bl	8007a8c <lcd_print>
 800413e:	e008      	b.n	8004152 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <menu+0x3048>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d104      	bne.n	8004152 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004148:	4a3c      	ldr	r2, [pc, #240]	; (800423c <menu+0x3088>)
 800414a:	2101      	movs	r1, #1
 800414c:	2001      	movs	r0, #1
 800414e:	f003 fc9d 	bl	8007a8c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <menu+0x3078>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	220a      	movs	r2, #10
 8004158:	4939      	ldr	r1, [pc, #228]	; (8004240 <menu+0x308c>)
 800415a:	4618      	mov	r0, r3
 800415c:	f007 ffe8 	bl	800c130 <itoa>
			lcd_print(2, 12, snum);
 8004160:	4a37      	ldr	r2, [pc, #220]	; (8004240 <menu+0x308c>)
 8004162:	210c      	movs	r1, #12
 8004164:	2002      	movs	r0, #2
 8004166:	f003 fc91 	bl	8007a8c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <menu+0x3074>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	220a      	movs	r2, #10
 8004170:	4933      	ldr	r1, [pc, #204]	; (8004240 <menu+0x308c>)
 8004172:	4618      	mov	r0, r3
 8004174:	f007 ffdc 	bl	800c130 <itoa>
			lcd_print(2, 13, snum);
 8004178:	4a31      	ldr	r2, [pc, #196]	; (8004240 <menu+0x308c>)
 800417a:	210d      	movs	r1, #13
 800417c:	2002      	movs	r0, #2
 800417e:	f003 fc85 	bl	8007a8c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <menu+0x3070>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	220a      	movs	r2, #10
 8004188:	492d      	ldr	r1, [pc, #180]	; (8004240 <menu+0x308c>)
 800418a:	4618      	mov	r0, r3
 800418c:	f007 ffd0 	bl	800c130 <itoa>
			lcd_print(2, 14, snum);
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <menu+0x308c>)
 8004192:	210e      	movs	r1, #14
 8004194:	2002      	movs	r0, #2
 8004196:	f003 fc79 	bl	8007a8c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <menu+0x306c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	220a      	movs	r2, #10
 80041a0:	4927      	ldr	r1, [pc, #156]	; (8004240 <menu+0x308c>)
 80041a2:	4618      	mov	r0, r3
 80041a4:	f007 ffc4 	bl	800c130 <itoa>
			lcd_print(2, 15, snum);
 80041a8:	4a25      	ldr	r2, [pc, #148]	; (8004240 <menu+0x308c>)
 80041aa:	210f      	movs	r1, #15
 80041ac:	2002      	movs	r0, #2
 80041ae:	f003 fc6d 	bl	8007a8c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <menu+0x3068>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	220a      	movs	r2, #10
 80041b8:	4921      	ldr	r1, [pc, #132]	; (8004240 <menu+0x308c>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f007 ffb8 	bl	800c130 <itoa>
			lcd_print(2, 16, snum);
 80041c0:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <menu+0x308c>)
 80041c2:	2110      	movs	r1, #16
 80041c4:	2002      	movs	r0, #2
 80041c6:	f003 fc61 	bl	8007a8c <lcd_print>

			lcd_print(2, 1, "           ");
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <menu+0x3090>)
 80041cc:	2101      	movs	r1, #1
 80041ce:	2002      	movs	r0, #2
 80041d0:	f003 fc5c 	bl	8007a8c <lcd_print>
 80041d4:	e048      	b.n	8004268 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <menu+0x3080>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d144      	bne.n	8004268 <menu+0x30b4>
			if(dilSecim == 0) {
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <menu+0x3048>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d132      	bne.n	800424c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <menu+0x3084>)
 80041e8:	2101      	movs	r1, #1
 80041ea:	2001      	movs	r0, #1
 80041ec:	f003 fc4e 	bl	8007a8c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <menu+0x3094>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	2002      	movs	r0, #2
 80041f6:	f003 fc49 	bl	8007a8c <lcd_print>
 80041fa:	e035      	b.n	8004268 <menu+0x30b4>
 80041fc:	20000215 	.word	0x20000215
 8004200:	0800d158 	.word	0x0800d158
 8004204:	40010800 	.word	0x40010800
 8004208:	20000223 	.word	0x20000223
 800420c:	20000212 	.word	0x20000212
 8004210:	20000120 	.word	0x20000120
 8004214:	20000220 	.word	0x20000220
 8004218:	200001f4 	.word	0x200001f4
 800421c:	200001f1 	.word	0x200001f1
 8004220:	200001f2 	.word	0x200001f2
 8004224:	20000000 	.word	0x20000000
 8004228:	20000001 	.word	0x20000001
 800422c:	200001f3 	.word	0x200001f3
 8004230:	20000235 	.word	0x20000235
 8004234:	20000214 	.word	0x20000214
 8004238:	0800d7e0 	.word	0x0800d7e0
 800423c:	0800d7f4 	.word	0x0800d7f4
 8004240:	20000190 	.word	0x20000190
 8004244:	0800d808 	.word	0x0800d808
 8004248:	0800d814 	.word	0x0800d814
			} else if(dilSecim == 1) {
 800424c:	4b94      	ldr	r3, [pc, #592]	; (80044a0 <menu+0x32ec>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d109      	bne.n	8004268 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004254:	4a93      	ldr	r2, [pc, #588]	; (80044a4 <menu+0x32f0>)
 8004256:	2101      	movs	r1, #1
 8004258:	2001      	movs	r0, #1
 800425a:	f003 fc17 	bl	8007a8c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800425e:	4a92      	ldr	r2, [pc, #584]	; (80044a8 <menu+0x32f4>)
 8004260:	2101      	movs	r1, #1
 8004262:	2002      	movs	r0, #2
 8004264:	f003 fc12 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004268:	2102      	movs	r1, #2
 800426a:	4890      	ldr	r0, [pc, #576]	; (80044ac <menu+0x32f8>)
 800426c:	f004 ff34 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004270:	4603      	mov	r3, r0
 8004272:	2b01      	cmp	r3, #1
 8004274:	d119      	bne.n	80042aa <menu+0x30f6>
 8004276:	4b8e      	ldr	r3, [pc, #568]	; (80044b0 <menu+0x32fc>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f083 0301 	eor.w	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <menu+0x30f6>
 8004284:	4b8b      	ldr	r3, [pc, #556]	; (80044b4 <menu+0x3300>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800428c:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <menu+0x3304>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <menu+0x3304>)
 8004296:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004298:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <menu+0x3304>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d902      	bls.n	80042a6 <menu+0x30f2>
				calismaSayModu = 0;
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <menu+0x3304>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042a6:	f000 fb51 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042aa:	2104      	movs	r1, #4
 80042ac:	487f      	ldr	r0, [pc, #508]	; (80044ac <menu+0x32f8>)
 80042ae:	f004 ff13 	bl	80090d8 <HAL_GPIO_ReadPin>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d119      	bne.n	80042ec <menu+0x3138>
 80042b8:	4b7d      	ldr	r3, [pc, #500]	; (80044b0 <menu+0x32fc>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d012      	beq.n	80042ec <menu+0x3138>
 80042c6:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <menu+0x3300>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80042ce:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <menu+0x3304>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <menu+0x3304>)
 80042d8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80042da:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <menu+0x3304>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <menu+0x3134>
		   		calismaSayModu = 1;
 80042e2:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <menu+0x3304>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042e8:	f000 fb30 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ec:	2108      	movs	r1, #8
 80042ee:	486f      	ldr	r0, [pc, #444]	; (80044ac <menu+0x32f8>)
 80042f0:	f004 fef2 	bl	80090d8 <HAL_GPIO_ReadPin>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d12b      	bne.n	8004352 <menu+0x319e>
 80042fa:	4b6d      	ldr	r3, [pc, #436]	; (80044b0 <menu+0x32fc>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f083 0301 	eor.w	r3, r3, #1
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d024      	beq.n	8004352 <menu+0x319e>
			eepromData[32] = 0;
 8004308:	4b6c      	ldr	r3, [pc, #432]	; (80044bc <menu+0x3308>)
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <menu+0x3308>)
 8004312:	2200      	movs	r2, #0
 8004314:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004316:	4b69      	ldr	r3, [pc, #420]	; (80044bc <menu+0x3308>)
 8004318:	2200      	movs	r2, #0
 800431a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800431c:	4b67      	ldr	r3, [pc, #412]	; (80044bc <menu+0x3308>)
 800431e:	2200      	movs	r2, #0
 8004320:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004322:	4b66      	ldr	r3, [pc, #408]	; (80044bc <menu+0x3308>)
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004328:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <menu+0x330c>)
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <menu+0x3310>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004334:	4b64      	ldr	r3, [pc, #400]	; (80044c8 <menu+0x3314>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800433a:	4b64      	ldr	r3, [pc, #400]	; (80044cc <menu+0x3318>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004340:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <menu+0x331c>)
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004346:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <menu+0x3304>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <menu+0x3320>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004352:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <menu+0x3324>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b1e      	cmp	r3, #30
 8004358:	d16f      	bne.n	800443a <menu+0x3286>
		calismaSayModu = 0;
 800435a:	4b57      	ldr	r3, [pc, #348]	; (80044b8 <menu+0x3304>)
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004360:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <menu+0x32ec>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004368:	4a5c      	ldr	r2, [pc, #368]	; (80044dc <menu+0x3328>)
 800436a:	2101      	movs	r1, #1
 800436c:	2001      	movs	r0, #1
 800436e:	f003 fb8d 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004372:	4a5b      	ldr	r2, [pc, #364]	; (80044e0 <menu+0x332c>)
 8004374:	2101      	movs	r1, #1
 8004376:	2002      	movs	r0, #2
 8004378:	f003 fb88 	bl	8007a8c <lcd_print>
 800437c:	e00d      	b.n	800439a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800437e:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <menu+0x32ec>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d109      	bne.n	800439a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004386:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <menu+0x3330>)
 8004388:	2101      	movs	r1, #1
 800438a:	2001      	movs	r0, #1
 800438c:	f003 fb7e 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004390:	4a55      	ldr	r2, [pc, #340]	; (80044e8 <menu+0x3334>)
 8004392:	2101      	movs	r1, #1
 8004394:	2002      	movs	r0, #2
 8004396:	f003 fb79 	bl	8007a8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800439a:	2102      	movs	r1, #2
 800439c:	4843      	ldr	r0, [pc, #268]	; (80044ac <menu+0x32f8>)
 800439e:	f004 fe9b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d115      	bne.n	80043d4 <menu+0x3220>
 80043a8:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <menu+0x32fc>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f083 0301 	eor.w	r3, r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <menu+0x32ec>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b38      	ldr	r3, [pc, #224]	; (80044a0 <menu+0x32ec>)
 80043c0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <menu+0x32ec>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d902      	bls.n	80043d0 <menu+0x321c>
				dilSecim = 0;
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <menu+0x32ec>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80043d0:	f000 fabc 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043d4:	2104      	movs	r1, #4
 80043d6:	4835      	ldr	r0, [pc, #212]	; (80044ac <menu+0x32f8>)
 80043d8:	f004 fe7e 	bl	80090d8 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d115      	bne.n	800440e <menu+0x325a>
 80043e2:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <menu+0x32fc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <menu+0x325a>
			dilSecim = dilSecim - 1;
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <menu+0x32ec>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <menu+0x32ec>)
 80043fa:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <menu+0x32ec>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <menu+0x3256>
		   		dilSecim = 1;
 8004404:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <menu+0x32ec>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800440a:	f000 fa9f 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800440e:	2108      	movs	r1, #8
 8004410:	4826      	ldr	r0, [pc, #152]	; (80044ac <menu+0x32f8>)
 8004412:	f004 fe61 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10e      	bne.n	800443a <menu+0x3286>
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <menu+0x32fc>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f083 0301 	eor.w	r3, r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <menu+0x3286>
			eepromData[33] = dilSecim;
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <menu+0x32ec>)
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <menu+0x3308>)
 8004430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <menu+0x3320>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <menu+0x3324>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b1f      	cmp	r3, #31
 8004440:	f040 80b7 	bne.w	80045b2 <menu+0x33fe>
		calismaSayModu = 0;
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <menu+0x3304>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800444a:	4a28      	ldr	r2, [pc, #160]	; (80044ec <menu+0x3338>)
 800444c:	2101      	movs	r1, #1
 800444e:	2001      	movs	r0, #1
 8004450:	f003 fb1c 	bl	8007a8c <lcd_print>

		if(iotMode == 0) {
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <menu+0x333c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d113      	bne.n	8004484 <menu+0x32d0>
			if(dilSecim == 0) {
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <menu+0x32ec>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <menu+0x3340>)
 8004466:	2101      	movs	r1, #1
 8004468:	2002      	movs	r0, #2
 800446a:	f003 fb0f 	bl	8007a8c <lcd_print>
 800446e:	e050      	b.n	8004512 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <menu+0x32ec>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d14c      	bne.n	8004512 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <menu+0x3344>)
 800447a:	2101      	movs	r1, #1
 800447c:	2002      	movs	r0, #2
 800447e:	f003 fb05 	bl	8007a8c <lcd_print>
 8004482:	e046      	b.n	8004512 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <menu+0x333c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d142      	bne.n	8004512 <menu+0x335e>
			if(dilSecim == 0) {
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <menu+0x32ec>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d135      	bne.n	8004500 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <menu+0x3348>)
 8004496:	2101      	movs	r1, #1
 8004498:	2002      	movs	r0, #2
 800449a:	f003 faf7 	bl	8007a8c <lcd_print>
 800449e:	e038      	b.n	8004512 <menu+0x335e>
 80044a0:	20000215 	.word	0x20000215
 80044a4:	0800d7f4 	.word	0x0800d7f4
 80044a8:	0800d828 	.word	0x0800d828
 80044ac:	40010800 	.word	0x40010800
 80044b0:	20000223 	.word	0x20000223
 80044b4:	20000235 	.word	0x20000235
 80044b8:	20000214 	.word	0x20000214
 80044bc:	20000120 	.word	0x20000120
 80044c0:	200001f3 	.word	0x200001f3
 80044c4:	20000001 	.word	0x20000001
 80044c8:	20000000 	.word	0x20000000
 80044cc:	200001f2 	.word	0x200001f2
 80044d0:	200001f1 	.word	0x200001f1
 80044d4:	20000220 	.word	0x20000220
 80044d8:	200001f4 	.word	0x200001f4
 80044dc:	0800d83c 	.word	0x0800d83c
 80044e0:	0800d850 	.word	0x0800d850
 80044e4:	0800d864 	.word	0x0800d864
 80044e8:	0800d878 	.word	0x0800d878
 80044ec:	0800d88c 	.word	0x0800d88c
 80044f0:	20000213 	.word	0x20000213
 80044f4:	0800d0e4 	.word	0x0800d0e4
 80044f8:	0800d0f8 	.word	0x0800d0f8
 80044fc:	0800d144 	.word	0x0800d144
			} else if(dilSecim == 1) {
 8004500:	4bab      	ldr	r3, [pc, #684]	; (80047b0 <menu+0x35fc>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d104      	bne.n	8004512 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004508:	4aaa      	ldr	r2, [pc, #680]	; (80047b4 <menu+0x3600>)
 800450a:	2101      	movs	r1, #1
 800450c:	2002      	movs	r0, #2
 800450e:	f003 fabd 	bl	8007a8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004512:	2102      	movs	r1, #2
 8004514:	48a8      	ldr	r0, [pc, #672]	; (80047b8 <menu+0x3604>)
 8004516:	f004 fddf 	bl	80090d8 <HAL_GPIO_ReadPin>
 800451a:	4603      	mov	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d115      	bne.n	800454c <menu+0x3398>
 8004520:	4ba6      	ldr	r3, [pc, #664]	; (80047bc <menu+0x3608>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	f083 0301 	eor.w	r3, r3, #1
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00e      	beq.n	800454c <menu+0x3398>
			iotMode = iotMode + 1;
 800452e:	4ba4      	ldr	r3, [pc, #656]	; (80047c0 <menu+0x360c>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4ba2      	ldr	r3, [pc, #648]	; (80047c0 <menu+0x360c>)
 8004538:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800453a:	4ba1      	ldr	r3, [pc, #644]	; (80047c0 <menu+0x360c>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d902      	bls.n	8004548 <menu+0x3394>
				iotMode = 0;
 8004542:	4b9f      	ldr	r3, [pc, #636]	; (80047c0 <menu+0x360c>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004548:	f000 fa00 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800454c:	2104      	movs	r1, #4
 800454e:	489a      	ldr	r0, [pc, #616]	; (80047b8 <menu+0x3604>)
 8004550:	f004 fdc2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d115      	bne.n	8004586 <menu+0x33d2>
 800455a:	4b98      	ldr	r3, [pc, #608]	; (80047bc <menu+0x3608>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	f083 0301 	eor.w	r3, r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004568:	4b95      	ldr	r3, [pc, #596]	; (80047c0 <menu+0x360c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	3b01      	subs	r3, #1
 800456e:	b2da      	uxtb	r2, r3
 8004570:	4b93      	ldr	r3, [pc, #588]	; (80047c0 <menu+0x360c>)
 8004572:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <menu+0x360c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <menu+0x33ce>
		   		iotMode = 1;
 800457c:	4b90      	ldr	r3, [pc, #576]	; (80047c0 <menu+0x360c>)
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004582:	f000 f9e3 	bl	800494c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004586:	2108      	movs	r1, #8
 8004588:	488b      	ldr	r0, [pc, #556]	; (80047b8 <menu+0x3604>)
 800458a:	f004 fda5 	bl	80090d8 <HAL_GPIO_ReadPin>
 800458e:	4603      	mov	r3, r0
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10e      	bne.n	80045b2 <menu+0x33fe>
 8004594:	4b89      	ldr	r3, [pc, #548]	; (80047bc <menu+0x3608>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f083 0301 	eor.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <menu+0x33fe>
			eepromData[48] = iotMode;
 80045a2:	4b87      	ldr	r3, [pc, #540]	; (80047c0 <menu+0x360c>)
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	4b87      	ldr	r3, [pc, #540]	; (80047c4 <menu+0x3610>)
 80045a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80045ac:	4b86      	ldr	r3, [pc, #536]	; (80047c8 <menu+0x3614>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80045b2:	4b86      	ldr	r3, [pc, #536]	; (80047cc <menu+0x3618>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d13f      	bne.n	800463a <menu+0x3486>
		calismaSayModu = 0;
 80045ba:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <menu+0x361c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80045c0:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <menu+0x35fc>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80045c8:	4a82      	ldr	r2, [pc, #520]	; (80047d4 <menu+0x3620>)
 80045ca:	2101      	movs	r1, #1
 80045cc:	2001      	movs	r0, #1
 80045ce:	f003 fa5d 	bl	8007a8c <lcd_print>
 80045d2:	e004      	b.n	80045de <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80045d4:	4a80      	ldr	r2, [pc, #512]	; (80047d8 <menu+0x3624>)
 80045d6:	2101      	movs	r1, #1
 80045d8:	2001      	movs	r0, #1
 80045da:	f003 fa57 	bl	8007a8c <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80045de:	4a7f      	ldr	r2, [pc, #508]	; (80047dc <menu+0x3628>)
 80045e0:	2101      	movs	r1, #1
 80045e2:	2002      	movs	r0, #2
 80045e4:	f003 fa52 	bl	8007a8c <lcd_print>
		lcd_print(2, 13, "    ");
 80045e8:	4a7d      	ldr	r2, [pc, #500]	; (80047e0 <menu+0x362c>)
 80045ea:	210d      	movs	r1, #13
 80045ec:	2002      	movs	r0, #2
 80045ee:	f003 fa4d 	bl	8007a8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045f2:	2102      	movs	r1, #2
 80045f4:	4870      	ldr	r0, [pc, #448]	; (80047b8 <menu+0x3604>)
 80045f6:	f004 fd6f 	bl	80090d8 <HAL_GPIO_ReadPin>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d11c      	bne.n	800463a <menu+0x3486>
 8004600:	2104      	movs	r1, #4
 8004602:	486d      	ldr	r0, [pc, #436]	; (80047b8 <menu+0x3604>)
 8004604:	f004 fd68 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d115      	bne.n	800463a <menu+0x3486>
 800460e:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <menu+0x3608>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f083 0301 	eor.w	r3, r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <menu+0x3486>
			takeMachineID();
 800461c:	f002 faa2 	bl	8006b64 <takeMachineID>

			HAL_Delay(250);
 8004620:	20fa      	movs	r0, #250	; 0xfa
 8004622:	f003 ff89 	bl	8008538 <HAL_Delay>
			lcd_print(2, 1, machineID);
 8004626:	4a6d      	ldr	r2, [pc, #436]	; (80047dc <menu+0x3628>)
 8004628:	2101      	movs	r1, #1
 800462a:	2002      	movs	r0, #2
 800462c:	f003 fa2e 	bl	8007a8c <lcd_print>
			lcd_print(2, 13, "    ");
 8004630:	4a6b      	ldr	r2, [pc, #428]	; (80047e0 <menu+0x362c>)
 8004632:	210d      	movs	r1, #13
 8004634:	2002      	movs	r0, #2
 8004636:	f003 fa29 	bl	8007a8c <lcd_print>
		}
	}

	if (menuSayac == 33) {
 800463a:	4b64      	ldr	r3, [pc, #400]	; (80047cc <menu+0x3618>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b21      	cmp	r3, #33	; 0x21
 8004640:	d14f      	bne.n	80046e2 <menu+0x352e>
		calismaSayModu = 0;
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <menu+0x361c>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004648:	4866      	ldr	r0, [pc, #408]	; (80047e4 <menu+0x3630>)
 800464a:	f7fb fdeb 	bl	8000224 <strlen>
 800464e:	4603      	mov	r3, r0
 8004650:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004652:	4a65      	ldr	r2, [pc, #404]	; (80047e8 <menu+0x3634>)
 8004654:	2101      	movs	r1, #1
 8004656:	2001      	movs	r0, #1
 8004658:	f003 fa18 	bl	8007a8c <lcd_print>

		if(ssidLength <=16) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b10      	cmp	r3, #16
 8004660:	dc0e      	bgt.n	8004680 <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 8004662:	4a60      	ldr	r2, [pc, #384]	; (80047e4 <menu+0x3630>)
 8004664:	2101      	movs	r1, #1
 8004666:	2002      	movs	r0, #2
 8004668:	f003 fa10 	bl	8007a8c <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4a5d      	ldr	r2, [pc, #372]	; (80047ec <menu+0x3638>)
 8004676:	4619      	mov	r1, r3
 8004678:	2002      	movs	r0, #2
 800467a:	f003 fa07 	bl	8007a8c <lcd_print>
 800467e:	e005      	b.n	800468c <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004680:	2300      	movs	r3, #0
 8004682:	2202      	movs	r2, #2
 8004684:	2101      	movs	r1, #1
 8004686:	4857      	ldr	r0, [pc, #348]	; (80047e4 <menu+0x3630>)
 8004688:	f7fc fcd8 	bl	800103c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800468c:	2102      	movs	r1, #2
 800468e:	484a      	ldr	r0, [pc, #296]	; (80047b8 <menu+0x3604>)
 8004690:	f004 fd22 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d123      	bne.n	80046e2 <menu+0x352e>
 800469a:	2104      	movs	r1, #4
 800469c:	4846      	ldr	r0, [pc, #280]	; (80047b8 <menu+0x3604>)
 800469e:	f004 fd1b 	bl	80090d8 <HAL_GPIO_ReadPin>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d11c      	bne.n	80046e2 <menu+0x352e>
 80046a8:	4b44      	ldr	r3, [pc, #272]	; (80047bc <menu+0x3608>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f083 0301 	eor.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d015      	beq.n	80046e2 <menu+0x352e>
			takeWifiSSID();
 80046b6:	f002 fbab 	bl	8006e10 <takeWifiSSID>

			HAL_Delay(250);
 80046ba:	20fa      	movs	r0, #250	; 0xfa
 80046bc:	f003 ff3c 	bl	8008538 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 80046c0:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <menu+0x3630>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	2002      	movs	r0, #2
 80046c6:	f003 f9e1 	bl	8007a8c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80046ca:	4846      	ldr	r0, [pc, #280]	; (80047e4 <menu+0x3630>)
 80046cc:	f7fb fdaa 	bl	8000224 <strlen>
 80046d0:	4603      	mov	r3, r0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4a44      	ldr	r2, [pc, #272]	; (80047ec <menu+0x3638>)
 80046da:	4619      	mov	r1, r3
 80046dc:	2002      	movs	r0, #2
 80046de:	f003 f9d5 	bl	8007a8c <lcd_print>
		}
	}

	if (menuSayac == 34) {
 80046e2:	4b3a      	ldr	r3, [pc, #232]	; (80047cc <menu+0x3618>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b22      	cmp	r3, #34	; 0x22
 80046e8:	d14f      	bne.n	800478a <menu+0x35d6>
		calismaSayModu = 0;
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <menu+0x361c>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80046f0:	483f      	ldr	r0, [pc, #252]	; (80047f0 <menu+0x363c>)
 80046f2:	f7fb fd97 	bl	8000224 <strlen>
 80046f6:	4603      	mov	r3, r0
 80046f8:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80046fa:	4a3e      	ldr	r2, [pc, #248]	; (80047f4 <menu+0x3640>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	2001      	movs	r0, #1
 8004700:	f003 f9c4 	bl	8007a8c <lcd_print>

		if(passLength <= 16) {
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b10      	cmp	r3, #16
 8004708:	dc0e      	bgt.n	8004728 <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 800470a:	4a39      	ldr	r2, [pc, #228]	; (80047f0 <menu+0x363c>)
 800470c:	2101      	movs	r1, #1
 800470e:	2002      	movs	r0, #2
 8004710:	f003 f9bc 	bl	8007a8c <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3301      	adds	r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	4a33      	ldr	r2, [pc, #204]	; (80047ec <menu+0x3638>)
 800471e:	4619      	mov	r1, r3
 8004720:	2002      	movs	r0, #2
 8004722:	f003 f9b3 	bl	8007a8c <lcd_print>
 8004726:	e005      	b.n	8004734 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004728:	2301      	movs	r3, #1
 800472a:	2202      	movs	r2, #2
 800472c:	2101      	movs	r1, #1
 800472e:	4830      	ldr	r0, [pc, #192]	; (80047f0 <menu+0x363c>)
 8004730:	f7fc fc84 	bl	800103c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004734:	2102      	movs	r1, #2
 8004736:	4820      	ldr	r0, [pc, #128]	; (80047b8 <menu+0x3604>)
 8004738:	f004 fcce 	bl	80090d8 <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d123      	bne.n	800478a <menu+0x35d6>
 8004742:	2104      	movs	r1, #4
 8004744:	481c      	ldr	r0, [pc, #112]	; (80047b8 <menu+0x3604>)
 8004746:	f004 fcc7 	bl	80090d8 <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b01      	cmp	r3, #1
 800474e:	d11c      	bne.n	800478a <menu+0x35d6>
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <menu+0x3608>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f083 0301 	eor.w	r3, r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d015      	beq.n	800478a <menu+0x35d6>
			takeWifiPass();
 800475e:	f002 fcd7 	bl	8007110 <takeWifiPass>

			HAL_Delay(250);
 8004762:	20fa      	movs	r0, #250	; 0xfa
 8004764:	f003 fee8 	bl	8008538 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004768:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <menu+0x363c>)
 800476a:	2101      	movs	r1, #1
 800476c:	2002      	movs	r0, #2
 800476e:	f003 f98d 	bl	8007a8c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004772:	481f      	ldr	r0, [pc, #124]	; (80047f0 <menu+0x363c>)
 8004774:	f7fb fd56 	bl	8000224 <strlen>
 8004778:	4603      	mov	r3, r0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3301      	adds	r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <menu+0x3638>)
 8004782:	4619      	mov	r1, r3
 8004784:	2002      	movs	r0, #2
 8004786:	f003 f981 	bl	8007a8c <lcd_print>
		}
	}

	if (menuSayac == 35) {
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <menu+0x3618>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b23      	cmp	r3, #35	; 0x23
 8004790:	d175      	bne.n	800487e <menu+0x36ca>
		if(dilSecim == 0) {
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <menu+0x35fc>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d132      	bne.n	8004800 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <menu+0x3644>)
 800479c:	2101      	movs	r1, #1
 800479e:	2001      	movs	r0, #1
 80047a0:	f003 f974 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <menu+0x3648>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	2002      	movs	r0, #2
 80047aa:	f003 f96f 	bl	8007a8c <lcd_print>
 80047ae:	e035      	b.n	800481c <menu+0x3668>
 80047b0:	20000215 	.word	0x20000215
 80047b4:	0800d158 	.word	0x0800d158
 80047b8:	40010800 	.word	0x40010800
 80047bc:	20000223 	.word	0x20000223
 80047c0:	20000213 	.word	0x20000213
 80047c4:	20000120 	.word	0x20000120
 80047c8:	20000220 	.word	0x20000220
 80047cc:	200001f4 	.word	0x200001f4
 80047d0:	20000214 	.word	0x20000214
 80047d4:	0800d8a0 	.word	0x0800d8a0
 80047d8:	0800d8b4 	.word	0x0800d8b4
 80047dc:	20000198 	.word	0x20000198
 80047e0:	0800d8c8 	.word	0x0800d8c8
 80047e4:	200001a4 	.word	0x200001a4
 80047e8:	0800d8d0 	.word	0x0800d8d0
 80047ec:	20000010 	.word	0x20000010
 80047f0:	200001b8 	.word	0x200001b8
 80047f4:	0800d8e4 	.word	0x0800d8e4
 80047f8:	0800d8f8 	.word	0x0800d8f8
 80047fc:	0800d90c 	.word	0x0800d90c
		} else if(dilSecim == 1) {
 8004800:	4b21      	ldr	r3, [pc, #132]	; (8004888 <menu+0x36d4>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d109      	bne.n	800481c <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004808:	4a20      	ldr	r2, [pc, #128]	; (800488c <menu+0x36d8>)
 800480a:	2101      	movs	r1, #1
 800480c:	2001      	movs	r0, #1
 800480e:	f003 f93d 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004812:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <menu+0x36dc>)
 8004814:	2101      	movs	r1, #1
 8004816:	2002      	movs	r0, #2
 8004818:	f003 f938 	bl	8007a8c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800481c:	2108      	movs	r1, #8
 800481e:	481d      	ldr	r0, [pc, #116]	; (8004894 <menu+0x36e0>)
 8004820:	f004 fc5a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004824:	4603      	mov	r3, r0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d129      	bne.n	800487e <menu+0x36ca>
			menuGiris = 0;
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <menu+0x36e4>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004830:	bf00      	nop
 8004832:	481a      	ldr	r0, [pc, #104]	; (800489c <menu+0x36e8>)
 8004834:	f005 fa79 	bl	8009d2a <HAL_I2C_GetError>
 8004838:	4603      	mov	r3, r0
 800483a:	2b04      	cmp	r3, #4
 800483c:	d0f9      	beq.n	8004832 <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800483e:	bf00      	nop
 8004840:	4816      	ldr	r0, [pc, #88]	; (800489c <menu+0x36e8>)
 8004842:	f005 fa65 	bl	8009d10 <HAL_I2C_GetState>
 8004846:	4603      	mov	r3, r0
 8004848:	2b20      	cmp	r3, #32
 800484a:	d1f9      	bne.n	8004840 <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800484c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004850:	9302      	str	r3, [sp, #8]
 8004852:	236e      	movs	r3, #110	; 0x6e
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <menu+0x36ec>)
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	236e      	movs	r3, #110	; 0x6e
 800485c:	2200      	movs	r2, #0
 800485e:	21a0      	movs	r1, #160	; 0xa0
 8004860:	480e      	ldr	r0, [pc, #56]	; (800489c <menu+0x36e8>)
 8004862:	f004 fef3 	bl	800964c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004866:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800486a:	f003 fe65 	bl	8008538 <HAL_Delay>

			lcd_clear();
 800486e:	f003 f939 	bl	8007ae4 <lcd_clear>
			HAL_Delay(500);
 8004872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004876:	f003 fe5f 	bl	8008538 <HAL_Delay>
			NVIC_SystemReset();
 800487a:	f7fc fc85 	bl	8001188 <__NVIC_SystemReset>
		}
	}
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000215 	.word	0x20000215
 800488c:	0800d920 	.word	0x0800d920
 8004890:	0800d934 	.word	0x0800d934
 8004894:	40010800 	.word	0x40010800
 8004898:	20000211 	.word	0x20000211
 800489c:	20000284 	.word	0x20000284
 80048a0:	20000120 	.word	0x20000120

080048a4 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <lcdUpdate+0x9c>)
 80048b6:	2101      	movs	r1, #1
 80048b8:	2002      	movs	r0, #2
 80048ba:	f003 f8e7 	bl	8007a8c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80048be:	e03b      	b.n	8004938 <lcdUpdate+0x94>
	} else if(y==2) {
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d105      	bne.n	80048d2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80048c6:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <lcdUpdate+0x9c>)
 80048c8:	2102      	movs	r1, #2
 80048ca:	2002      	movs	r0, #2
 80048cc:	f003 f8de 	bl	8007a8c <lcd_print>
}
 80048d0:	e032      	b.n	8004938 <lcdUpdate+0x94>
	} else if(y==3) {
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d105      	bne.n	80048e4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <lcdUpdate+0x9c>)
 80048da:	2103      	movs	r1, #3
 80048dc:	2002      	movs	r0, #2
 80048de:	f003 f8d5 	bl	8007a8c <lcd_print>
}
 80048e2:	e029      	b.n	8004938 <lcdUpdate+0x94>
	} else if(y==4) {
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d105      	bne.n	80048f6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <lcdUpdate+0x9c>)
 80048ec:	2104      	movs	r1, #4
 80048ee:	2002      	movs	r0, #2
 80048f0:	f003 f8cc 	bl	8007a8c <lcd_print>
}
 80048f4:	e020      	b.n	8004938 <lcdUpdate+0x94>
	} else if(y==5) {
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d105      	bne.n	8004908 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80048fc:	4a10      	ldr	r2, [pc, #64]	; (8004940 <lcdUpdate+0x9c>)
 80048fe:	2105      	movs	r1, #5
 8004900:	2002      	movs	r0, #2
 8004902:	f003 f8c3 	bl	8007a8c <lcd_print>
}
 8004906:	e017      	b.n	8004938 <lcdUpdate+0x94>
	} else if(y==6) {
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	2b06      	cmp	r3, #6
 800490c:	d105      	bne.n	800491a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800490e:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <lcdUpdate+0x9c>)
 8004910:	2106      	movs	r1, #6
 8004912:	2002      	movs	r0, #2
 8004914:	f003 f8ba 	bl	8007a8c <lcd_print>
}
 8004918:	e00e      	b.n	8004938 <lcdUpdate+0x94>
	} else if (y==7) {
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	2b07      	cmp	r3, #7
 800491e:	d10b      	bne.n	8004938 <lcdUpdate+0x94>
		lcd_clear();
 8004920:	f003 f8e0 	bl	8007ae4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004924:	4a07      	ldr	r2, [pc, #28]	; (8004944 <lcdUpdate+0xa0>)
 8004926:	2104      	movs	r1, #4
 8004928:	2001      	movs	r0, #1
 800492a:	f003 f8af 	bl	8007a8c <lcd_print>
		lcd_print(2, 6, "RUN");
 800492e:	4a06      	ldr	r2, [pc, #24]	; (8004948 <lcdUpdate+0xa4>)
 8004930:	2106      	movs	r1, #6
 8004932:	2002      	movs	r0, #2
 8004934:	f003 f8aa 	bl	8007a8c <lcd_print>
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	0800d948 	.word	0x0800d948
 8004944:	0800d94c 	.word	0x0800d94c
 8004948:	0800d954 	.word	0x0800d954

0800494c <bekle>:

void bekle() {
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
	timer1=millis;
 8004950:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <bekle+0x124>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a47      	ldr	r2, [pc, #284]	; (8004a74 <bekle+0x128>)
 8004956:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004958:	e002      	b.n	8004960 <bekle+0x14>
    	butonKontrol = 1;
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <bekle+0x12c>)
 800495c:	2201      	movs	r2, #1
 800495e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004960:	2101      	movs	r1, #1
 8004962:	4846      	ldr	r0, [pc, #280]	; (8004a7c <bekle+0x130>)
 8004964:	f004 fbb8 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d109      	bne.n	8004982 <bekle+0x36>
 800496e:	4b40      	ldr	r3, [pc, #256]	; (8004a70 <bekle+0x124>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <bekle+0x128>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d0ef      	beq.n	800495a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800497a:	e002      	b.n	8004982 <bekle+0x36>
    	butonKontrol = 1;
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <bekle+0x12c>)
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004982:	2108      	movs	r1, #8
 8004984:	483e      	ldr	r0, [pc, #248]	; (8004a80 <bekle+0x134>)
 8004986:	f004 fba7 	bl	80090d8 <HAL_GPIO_ReadPin>
 800498a:	4603      	mov	r3, r0
 800498c:	2b01      	cmp	r3, #1
 800498e:	d109      	bne.n	80049a4 <bekle+0x58>
 8004990:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <bekle+0x124>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b37      	ldr	r3, [pc, #220]	; (8004a74 <bekle+0x128>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d0ef      	beq.n	800497c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800499c:	e002      	b.n	80049a4 <bekle+0x58>
    	butonKontrol = 1;
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <bekle+0x12c>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a4:	2102      	movs	r1, #2
 80049a6:	4835      	ldr	r0, [pc, #212]	; (8004a7c <bekle+0x130>)
 80049a8:	f004 fb96 	bl	80090d8 <HAL_GPIO_ReadPin>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d109      	bne.n	80049c6 <bekle+0x7a>
 80049b2:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <bekle+0x124>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <bekle+0x128>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d0ef      	beq.n	800499e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049be:	e002      	b.n	80049c6 <bekle+0x7a>
    	butonKontrol = 1;
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <bekle+0x12c>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049c6:	2104      	movs	r1, #4
 80049c8:	482c      	ldr	r0, [pc, #176]	; (8004a7c <bekle+0x130>)
 80049ca:	f004 fb85 	bl	80090d8 <HAL_GPIO_ReadPin>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d109      	bne.n	80049e8 <bekle+0x9c>
 80049d4:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <bekle+0x124>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <bekle+0x128>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d0ef      	beq.n	80049c0 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049e0:	e002      	b.n	80049e8 <bekle+0x9c>
    	butonKontrol = 1;
 80049e2:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <bekle+0x12c>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049e8:	2108      	movs	r1, #8
 80049ea:	4824      	ldr	r0, [pc, #144]	; (8004a7c <bekle+0x130>)
 80049ec:	f004 fb74 	bl	80090d8 <HAL_GPIO_ReadPin>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d109      	bne.n	8004a0a <bekle+0xbe>
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <bekle+0x124>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <bekle+0x128>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d0ef      	beq.n	80049e2 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a02:	e002      	b.n	8004a0a <bekle+0xbe>
    	butonKontrol = 1;
 8004a04:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <bekle+0x12c>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	481c      	ldr	r0, [pc, #112]	; (8004a80 <bekle+0x134>)
 8004a0e:	f004 fb63 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <bekle+0xe0>
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <bekle+0x124>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <bekle+0x128>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0ef      	beq.n	8004a04 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a24:	e002      	b.n	8004a2c <bekle+0xe0>
    	butonKontrol = 1;
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <bekle+0x12c>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a30:	4813      	ldr	r0, [pc, #76]	; (8004a80 <bekle+0x134>)
 8004a32:	f004 fb51 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <bekle+0x104>
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <bekle+0x124>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <bekle+0x128>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d0ee      	beq.n	8004a26 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a48:	e002      	b.n	8004a50 <bekle+0x104>
    	butonKontrol = 1;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <bekle+0x12c>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a54:	480a      	ldr	r0, [pc, #40]	; (8004a80 <bekle+0x134>)
 8004a56:	f004 fb3f 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <bekle+0x120>
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <bekle+0x124>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <bekle+0x128>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d0ee      	beq.n	8004a4a <bekle+0xfe>
    }

}
 8004a6c:	bf00      	nop
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	200001d0 	.word	0x200001d0
 8004a74:	200001d8 	.word	0x200001d8
 8004a78:	20000223 	.word	0x20000223
 8004a7c:	40010800 	.word	0x40010800
 8004a80:	40011000 	.word	0x40011000

08004a84 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <checkLCDBacklight+0x24>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <checkLCDBacklight+0x28>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b3b      	cmp	r3, #59	; 0x3b
 8004a94:	d903      	bls.n	8004a9e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f003 f844 	bl	8007b24 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004a9c:	e002      	b.n	8004aa4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f003 f840 	bl	8007b24 <lcd_backlight>
}
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200001d0 	.word	0x200001d0
 8004aac:	200001ec 	.word	0x200001ec

08004ab0 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <checkBasincSalteri+0x54>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <checkBasincSalteri+0x12>
		basincVar=1;
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <checkBasincSalteri+0x58>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <checkBasincSalteri+0x54>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d119      	bne.n	8004afe <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ace:	480f      	ldr	r0, [pc, #60]	; (8004b0c <checkBasincSalteri+0x5c>)
 8004ad0:	f004 fb02 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <checkBasincSalteri+0x60>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <checkBasincSalteri+0x64>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d90a      	bls.n	8004afe <checkBasincSalteri+0x4e>
				basincVar=1;
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <checkBasincSalteri+0x58>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004aee:	e006      	b.n	8004afe <checkBasincSalteri+0x4e>
			timer5=millis;
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <checkBasincSalteri+0x60>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <checkBasincSalteri+0x64>)
 8004af6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <checkBasincSalteri+0x58>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200001fb 	.word	0x200001fb
 8004b08:	200001f7 	.word	0x200001f7
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	200001d0 	.word	0x200001d0
 8004b14:	200001e8 	.word	0x200001e8

08004b18 <checkBasGonder>:

void checkBasGonder() {
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <checkBasGonder+0x74>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10b      	bne.n	8004b3c <checkBasGonder+0x24>
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <checkBasGonder+0x78>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <checkBasGonder+0x24>
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <checkBasGonder+0x7c>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004b34:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <checkBasGonder+0x80>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e009      	b.n	8004b50 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <checkBasGonder+0x78>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f083 0301 	eor.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <checkBasGonder+0x80>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <checkBasGonder+0x74>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10b      	bne.n	8004b70 <checkBasGonder+0x58>
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <checkBasGonder+0x84>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <checkBasGonder+0x58>
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <checkBasGonder+0x7c>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <checkBasGonder+0x88>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004b6e:	e009      	b.n	8004b84 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <checkBasGonder+0x84>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	f083 0301 	eor.w	r3, r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <checkBasGonder+0x88>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	200001f5 	.word	0x200001f5
 8004b90:	20000229 	.word	0x20000229
 8004b94:	20000203 	.word	0x20000203
 8004b98:	20000230 	.word	0x20000230
 8004b9c:	2000022c 	.word	0x2000022c
 8004ba0:	20000231 	.word	0x20000231

08004ba4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <checkKapiSecimleri+0x98>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004bb0:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004bb6:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <checkKapiSecimleri+0x98>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10e      	bne.n	8004bdc <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc2:	4820      	ldr	r0, [pc, #128]	; (8004c44 <checkKapiSecimleri+0xa0>)
 8004bc4:	f004 fa88 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e002      	b.n	8004bdc <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <checkKapiSecimleri+0x98>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d10e      	bne.n	8004c02 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004be8:	4816      	ldr	r0, [pc, #88]	; (8004c44 <checkKapiSecimleri+0xa0>)
 8004bea:	f004 fa75 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004bfc:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <checkKapiSecimleri+0x98>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d116      	bne.n	8004c38 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c0e:	480d      	ldr	r0, [pc, #52]	; (8004c44 <checkKapiSecimleri+0xa0>)
 8004c10:	f004 fa62 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <checkKapiSecimleri+0x8e>
 8004c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c1e:	4809      	ldr	r0, [pc, #36]	; (8004c44 <checkKapiSecimleri+0xa0>)
 8004c20:	f004 fa5a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004c30:	e002      	b.n	8004c38 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004c32:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <checkKapiSecimleri+0x9c>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	200001fc 	.word	0x200001fc
 8004c40:	20000247 	.word	0x20000247
 8004c44:	40010800 	.word	0x40010800

08004c48 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004c4c:	4b62      	ldr	r3, [pc, #392]	; (8004dd8 <checkAktifCalisma+0x190>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f041 833e 	bne.w	80062d2 <checkAktifCalisma+0x168a>
 8004c56:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <checkAktifCalisma+0x194>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f041 8339 	bne.w	80062d2 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004c60:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <checkAktifCalisma+0x198>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11a      	bne.n	8004c9e <checkAktifCalisma+0x56>
 8004c68:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <checkAktifCalisma+0x19c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d116      	bne.n	8004c9e <checkAktifCalisma+0x56>
 8004c70:	4b5d      	ldr	r3, [pc, #372]	; (8004de8 <checkAktifCalisma+0x1a0>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <checkAktifCalisma+0x46>
 8004c78:	4b5c      	ldr	r3, [pc, #368]	; (8004dec <checkAktifCalisma+0x1a4>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f083 0301 	eor.w	r3, r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <checkAktifCalisma+0x46>
 8004c86:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <checkAktifCalisma+0x1a8>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d007      	beq.n	8004c9e <checkAktifCalisma+0x56>
 8004c8e:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <checkAktifCalisma+0x1ac>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <checkAktifCalisma+0x80>
 8004c96:	4b58      	ldr	r3, [pc, #352]	; (8004df8 <checkAktifCalisma+0x1b0>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d114      	bne.n	8004cc8 <checkAktifCalisma+0x80>
 8004c9e:	4b57      	ldr	r3, [pc, #348]	; (8004dfc <checkAktifCalisma+0x1b4>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <checkAktifCalisma+0x80>
 8004ca6:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <checkAktifCalisma+0x1b8>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cb4:	4853      	ldr	r0, [pc, #332]	; (8004e04 <checkAktifCalisma+0x1bc>)
 8004cb6:	f004 fa26 	bl	8009106 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004cba:	4b53      	ldr	r3, [pc, #332]	; (8004e08 <checkAktifCalisma+0x1c0>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004cc0:	4b52      	ldr	r3, [pc, #328]	; (8004e0c <checkAktifCalisma+0x1c4>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e008      	b.n	8004cda <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cce:	484d      	ldr	r0, [pc, #308]	; (8004e04 <checkAktifCalisma+0x1bc>)
 8004cd0:	f004 fa19 	bl	8009106 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004cd4:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <checkAktifCalisma+0x1c0>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004cda:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <checkAktifCalisma+0x194>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d160      	bne.n	8004da4 <checkAktifCalisma+0x15c>
 8004ce2:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <checkAktifCalisma+0x1b4>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d05c      	beq.n	8004da4 <checkAktifCalisma+0x15c>
 8004cea:	4b45      	ldr	r3, [pc, #276]	; (8004e00 <checkAktifCalisma+0x1b8>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d058      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cf6:	4843      	ldr	r0, [pc, #268]	; (8004e04 <checkAktifCalisma+0x1bc>)
 8004cf8:	f004 f9ee 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <checkAktifCalisma+0xc2>
 8004d02:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <checkAktifCalisma+0x1c8>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04c      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	4841      	ldr	r0, [pc, #260]	; (8004e14 <checkAktifCalisma+0x1cc>)
 8004d0e:	f004 f9e3 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d145      	bne.n	8004da4 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004d18:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <checkAktifCalisma+0x1d0>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d041      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d24:	4837      	ldr	r0, [pc, #220]	; (8004e04 <checkAktifCalisma+0x1bc>)
 8004d26:	f004 f9d7 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10e      	bne.n	8004d4e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d34:	4833      	ldr	r0, [pc, #204]	; (8004e04 <checkAktifCalisma+0x1bc>)
 8004d36:	f004 f9cf 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d106      	bne.n	8004d4e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004d40:	2140      	movs	r1, #64	; 0x40
 8004d42:	4834      	ldr	r0, [pc, #208]	; (8004e14 <checkAktifCalisma+0x1cc>)
 8004d44:	f004 f9c8 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d003      	beq.n	8004d56 <checkAktifCalisma+0x10e>
 8004d4e:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <checkAktifCalisma+0x198>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d026      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <checkAktifCalisma+0x1a0>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	f083 0301 	eor.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01f      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <checkAktifCalisma+0x19c>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f083 0301 	eor.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004d72:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <checkAktifCalisma+0x1ac>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f083 0301 	eor.w	r3, r3, #1
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d011      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d80:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <checkAktifCalisma+0x1d4>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f083 0301 	eor.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <checkAktifCalisma+0x1d8>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f083 0301 	eor.w	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <checkAktifCalisma+0x198>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e002      	b.n	8004daa <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <checkAktifCalisma+0x198>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <checkAktifCalisma+0x198>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03a      	beq.n	8004e28 <checkAktifCalisma+0x1e0>
 8004db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004db6:	4817      	ldr	r0, [pc, #92]	; (8004e14 <checkAktifCalisma+0x1cc>)
 8004db8:	f004 f98e 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d132      	bne.n	8004e28 <checkAktifCalisma+0x1e0>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <checkAktifCalisma+0x1dc>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d02e      	beq.n	8004e28 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dd0:	480c      	ldr	r0, [pc, #48]	; (8004e04 <checkAktifCalisma+0x1bc>)
 8004dd2:	f004 f998 	bl	8009106 <HAL_GPIO_WritePin>
 8004dd6:	e02d      	b.n	8004e34 <checkAktifCalisma+0x1ec>
 8004dd8:	20000212 	.word	0x20000212
 8004ddc:	20000211 	.word	0x20000211
 8004de0:	20000229 	.word	0x20000229
 8004de4:	2000022a 	.word	0x2000022a
 8004de8:	2000022c 	.word	0x2000022c
 8004dec:	20000224 	.word	0x20000224
 8004df0:	20000207 	.word	0x20000207
 8004df4:	2000022b 	.word	0x2000022b
 8004df8:	20000206 	.word	0x20000206
 8004dfc:	20000246 	.word	0x20000246
 8004e00:	20000247 	.word	0x20000247
 8004e04:	40010c00 	.word	0x40010c00
 8004e08:	20000248 	.word	0x20000248
 8004e0c:	20000233 	.word	0x20000233
 8004e10:	20000230 	.word	0x20000230
 8004e14:	40011000 	.word	0x40011000
 8004e18:	200001f7 	.word	0x200001f7
 8004e1c:	2000022e 	.word	0x2000022e
 8004e20:	2000022f 	.word	0x2000022f
 8004e24:	20000202 	.word	0x20000202
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e2e:	4860      	ldr	r0, [pc, #384]	; (8004fb0 <checkAktifCalisma+0x368>)
 8004e30:	f004 f969 	bl	8009106 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004e34:	4b5f      	ldr	r3, [pc, #380]	; (8004fb4 <checkAktifCalisma+0x36c>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d013      	beq.n	8004e64 <checkAktifCalisma+0x21c>
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <checkAktifCalisma+0x370>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d007      	beq.n	8004e54 <checkAktifCalisma+0x20c>
 8004e44:	4b5c      	ldr	r3, [pc, #368]	; (8004fb8 <checkAktifCalisma+0x370>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d003      	beq.n	8004e54 <checkAktifCalisma+0x20c>
 8004e4c:	4b5b      	ldr	r3, [pc, #364]	; (8004fbc <checkAktifCalisma+0x374>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004e54:	2201      	movs	r2, #1
 8004e56:	2104      	movs	r1, #4
 8004e58:	4855      	ldr	r0, [pc, #340]	; (8004fb0 <checkAktifCalisma+0x368>)
 8004e5a:	f004 f954 	bl	8009106 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004e5e:	4b58      	ldr	r3, [pc, #352]	; (8004fc0 <checkAktifCalisma+0x378>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004e64:	4b56      	ldr	r3, [pc, #344]	; (8004fc0 <checkAktifCalisma+0x378>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02f      	beq.n	8004ecc <checkAktifCalisma+0x284>
 8004e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e70:	484f      	ldr	r0, [pc, #316]	; (8004fb0 <checkAktifCalisma+0x368>)
 8004e72:	f004 f931 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <checkAktifCalisma+0x242>
 8004e7c:	4b51      	ldr	r3, [pc, #324]	; (8004fc4 <checkAktifCalisma+0x37c>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f083 0301 	eor.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <checkAktifCalisma+0x250>
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	484e      	ldr	r0, [pc, #312]	; (8004fc8 <checkAktifCalisma+0x380>)
 8004e8e:	f004 f923 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d119      	bne.n	8004ecc <checkAktifCalisma+0x284>
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <checkAktifCalisma+0x384>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <checkAktifCalisma+0x284>
 8004ea0:	4b4b      	ldr	r3, [pc, #300]	; (8004fd0 <checkAktifCalisma+0x388>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d011      	beq.n	8004ecc <checkAktifCalisma+0x284>
 8004ea8:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <checkAktifCalisma+0x38c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <checkAktifCalisma+0x284>
 8004eb0:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <checkAktifCalisma+0x390>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d006      	beq.n	8004ecc <checkAktifCalisma+0x284>
			timer2=millis;
 8004ebe:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <checkAktifCalisma+0x394>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a47      	ldr	r2, [pc, #284]	; (8004fe0 <checkAktifCalisma+0x398>)
 8004ec4:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <checkAktifCalisma+0x390>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004ecc:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <checkAktifCalisma+0x394>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <checkAktifCalisma+0x398>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	4a43      	ldr	r2, [pc, #268]	; (8004fe4 <checkAktifCalisma+0x39c>)
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d303      	bcc.n	8004ee6 <checkAktifCalisma+0x29e>
 8004ede:	4b3e      	ldr	r3, [pc, #248]	; (8004fd8 <checkAktifCalisma+0x390>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d111      	bne.n	8004f0a <checkAktifCalisma+0x2c2>
 8004ee6:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <checkAktifCalisma+0x384>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f083 0301 	eor.w	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <checkAktifCalisma+0x2c2>
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <checkAktifCalisma+0x388>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <checkAktifCalisma+0x2c2>
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <checkAktifCalisma+0x38c>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	4828      	ldr	r0, [pc, #160]	; (8004fb0 <checkAktifCalisma+0x368>)
 8004f10:	f004 f8f9 	bl	8009106 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004f14:	4b2a      	ldr	r3, [pc, #168]	; (8004fc0 <checkAktifCalisma+0x378>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <checkAktifCalisma+0x390>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004f20:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <checkAktifCalisma+0x3a0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004f28:	4b30      	ldr	r3, [pc, #192]	; (8004fec <checkAktifCalisma+0x3a4>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <checkAktifCalisma+0x3a0>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d116      	bne.n	8004f64 <checkAktifCalisma+0x31c>
 8004f36:	4b2e      	ldr	r3, [pc, #184]	; (8004ff0 <checkAktifCalisma+0x3a8>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d112      	bne.n	8004f64 <checkAktifCalisma+0x31c>
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4821      	ldr	r0, [pc, #132]	; (8004fc8 <checkAktifCalisma+0x380>)
 8004f42:	f004 f8c9 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <checkAktifCalisma+0x31c>
 8004f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f50:	4817      	ldr	r0, [pc, #92]	; (8004fb0 <checkAktifCalisma+0x368>)
 8004f52:	f004 f8c1 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004f5c:	4b23      	ldr	r3, [pc, #140]	; (8004fec <checkAktifCalisma+0x3a4>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e011      	b.n	8004f88 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <checkAktifCalisma+0x3a0>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10d      	bne.n	8004f88 <checkAktifCalisma+0x340>
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	4816      	ldr	r0, [pc, #88]	; (8004fc8 <checkAktifCalisma+0x380>)
 8004f70:	f004 f8b2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d106      	bne.n	8004f88 <checkAktifCalisma+0x340>
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <checkAktifCalisma+0x3a8>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f82:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <checkAktifCalisma+0x3a4>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f88:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <checkAktifCalisma+0x3a0>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d134      	bne.n	8004ffa <checkAktifCalisma+0x3b2>
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <checkAktifCalisma+0x3a8>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d130      	bne.n	8004ffa <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f98:	2101      	movs	r1, #1
 8004f9a:	480b      	ldr	r0, [pc, #44]	; (8004fc8 <checkAktifCalisma+0x380>)
 8004f9c:	f004 f89c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d126      	bne.n	8004ff4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004fa6:	4b11      	ldr	r3, [pc, #68]	; (8004fec <checkAktifCalisma+0x3a4>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e025      	b.n	8004ffa <checkAktifCalisma+0x3b2>
 8004fae:	bf00      	nop
 8004fb0:	40010c00 	.word	0x40010c00
 8004fb4:	20000229 	.word	0x20000229
 8004fb8:	20000203 	.word	0x20000203
 8004fbc:	20000207 	.word	0x20000207
 8004fc0:	2000022d 	.word	0x2000022d
 8004fc4:	20000230 	.word	0x20000230
 8004fc8:	40011000 	.word	0x40011000
 8004fcc:	20000246 	.word	0x20000246
 8004fd0:	20000247 	.word	0x20000247
 8004fd4:	200001f7 	.word	0x200001f7
 8004fd8:	20000225 	.word	0x20000225
 8004fdc:	200001d0 	.word	0x200001d0
 8004fe0:	200001dc 	.word	0x200001dc
 8004fe4:	20000208 	.word	0x20000208
 8004fe8:	200001f8 	.word	0x200001f8
 8004fec:	2000024b 	.word	0x2000024b
 8004ff0:	200001f5 	.word	0x200001f5
			} else {
				cerceveVar=0;
 8004ff4:	4b7f      	ldr	r3, [pc, #508]	; (80051f4 <checkAktifCalisma+0x5ac>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	; (80051f8 <checkAktifCalisma+0x5b0>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d17c      	bne.n	80050fc <checkAktifCalisma+0x4b4>
 8005002:	4b7e      	ldr	r3, [pc, #504]	; (80051fc <checkAktifCalisma+0x5b4>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d078      	beq.n	80050fc <checkAktifCalisma+0x4b4>
 800500a:	4b7d      	ldr	r3, [pc, #500]	; (8005200 <checkAktifCalisma+0x5b8>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d074      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005016:	487b      	ldr	r0, [pc, #492]	; (8005204 <checkAktifCalisma+0x5bc>)
 8005018:	f004 f85e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <checkAktifCalisma+0x3e2>
 8005022:	4b79      	ldr	r3, [pc, #484]	; (8005208 <checkAktifCalisma+0x5c0>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d068      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800502a:	4b72      	ldr	r3, [pc, #456]	; (80051f4 <checkAktifCalisma+0x5ac>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d064      	beq.n	80050fc <checkAktifCalisma+0x4b4>
 8005032:	4b76      	ldr	r3, [pc, #472]	; (800520c <checkAktifCalisma+0x5c4>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05d      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005040:	2104      	movs	r1, #4
 8005042:	4873      	ldr	r0, [pc, #460]	; (8005210 <checkAktifCalisma+0x5c8>)
 8005044:	f004 f848 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <checkAktifCalisma+0x40e>
 800504e:	4b71      	ldr	r3, [pc, #452]	; (8005214 <checkAktifCalisma+0x5cc>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d152      	bne.n	80050fc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800505a:	486a      	ldr	r0, [pc, #424]	; (8005204 <checkAktifCalisma+0x5bc>)
 800505c:	f004 f83c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d10e      	bne.n	8005084 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800506a:	4866      	ldr	r0, [pc, #408]	; (8005204 <checkAktifCalisma+0x5bc>)
 800506c:	f004 f834 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d106      	bne.n	8005084 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	4865      	ldr	r0, [pc, #404]	; (8005210 <checkAktifCalisma+0x5c8>)
 800507a:	f004 f82d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800507e:	4603      	mov	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d003      	beq.n	800508c <checkAktifCalisma+0x444>
 8005084:	4b64      	ldr	r3, [pc, #400]	; (8005218 <checkAktifCalisma+0x5d0>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d037      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800508c:	4b63      	ldr	r3, [pc, #396]	; (800521c <checkAktifCalisma+0x5d4>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f083 0301 	eor.w	r3, r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d030      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800509a:	4b61      	ldr	r3, [pc, #388]	; (8005220 <checkAktifCalisma+0x5d8>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f083 0301 	eor.w	r3, r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d029      	beq.n	80050fc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80050a8:	4b5e      	ldr	r3, [pc, #376]	; (8005224 <checkAktifCalisma+0x5dc>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f083 0301 	eor.w	r3, r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d022      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80050b6:	4b5c      	ldr	r3, [pc, #368]	; (8005228 <checkAktifCalisma+0x5e0>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f083 0301 	eor.w	r3, r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80050c4:	4b59      	ldr	r3, [pc, #356]	; (800522c <checkAktifCalisma+0x5e4>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f083 0301 	eor.w	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d014      	beq.n	80050fc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80050d2:	4b57      	ldr	r3, [pc, #348]	; (8005230 <checkAktifCalisma+0x5e8>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f083 0301 	eor.w	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00d      	beq.n	80050fc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80050e0:	2201      	movs	r2, #1
 80050e2:	2102      	movs	r1, #2
 80050e4:	4847      	ldr	r0, [pc, #284]	; (8005204 <checkAktifCalisma+0x5bc>)
 80050e6:	f004 f80e 	bl	8009106 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80050ea:	4b4b      	ldr	r3, [pc, #300]	; (8005218 <checkAktifCalisma+0x5d0>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80050f0:	4b50      	ldr	r3, [pc, #320]	; (8005234 <checkAktifCalisma+0x5ec>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80050f6:	4b50      	ldr	r3, [pc, #320]	; (8005238 <checkAktifCalisma+0x5f0>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80050fc:	4b46      	ldr	r3, [pc, #280]	; (8005218 <checkAktifCalisma+0x5d0>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d033      	beq.n	800516c <checkAktifCalisma+0x524>
 8005104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005108:	483e      	ldr	r0, [pc, #248]	; (8005204 <checkAktifCalisma+0x5bc>)
 800510a:	f003 ffe5 	bl	80090d8 <HAL_GPIO_ReadPin>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	d106      	bne.n	8005122 <checkAktifCalisma+0x4da>
 8005114:	4b3c      	ldr	r3, [pc, #240]	; (8005208 <checkAktifCalisma+0x5c0>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	f083 0301 	eor.w	r3, r3, #1
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <checkAktifCalisma+0x4f0>
 8005122:	2104      	movs	r1, #4
 8005124:	483a      	ldr	r0, [pc, #232]	; (8005210 <checkAktifCalisma+0x5c8>)
 8005126:	f003 ffd7 	bl	80090d8 <HAL_GPIO_ReadPin>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11d      	bne.n	800516c <checkAktifCalisma+0x524>
 8005130:	4b38      	ldr	r3, [pc, #224]	; (8005214 <checkAktifCalisma+0x5cc>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d019      	beq.n	800516c <checkAktifCalisma+0x524>
 8005138:	4b30      	ldr	r3, [pc, #192]	; (80051fc <checkAktifCalisma+0x5b4>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <checkAktifCalisma+0x524>
 8005140:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <checkAktifCalisma+0x5b8>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d011      	beq.n	800516c <checkAktifCalisma+0x524>
 8005148:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <checkAktifCalisma+0x5ac>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <checkAktifCalisma+0x524>
 8005150:	4b3a      	ldr	r3, [pc, #232]	; (800523c <checkAktifCalisma+0x5f4>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f083 0301 	eor.w	r3, r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <checkAktifCalisma+0x524>
			timer2=millis;
 800515e:	4b38      	ldr	r3, [pc, #224]	; (8005240 <checkAktifCalisma+0x5f8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a38      	ldr	r2, [pc, #224]	; (8005244 <checkAktifCalisma+0x5fc>)
 8005164:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005166:	4b35      	ldr	r3, [pc, #212]	; (800523c <checkAktifCalisma+0x5f4>)
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800516c:	4b34      	ldr	r3, [pc, #208]	; (8005240 <checkAktifCalisma+0x5f8>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b34      	ldr	r3, [pc, #208]	; (8005244 <checkAktifCalisma+0x5fc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	4a34      	ldr	r2, [pc, #208]	; (8005248 <checkAktifCalisma+0x600>)
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	4293      	cmp	r3, r2
 800517c:	d303      	bcc.n	8005186 <checkAktifCalisma+0x53e>
 800517e:	4b2f      	ldr	r3, [pc, #188]	; (800523c <checkAktifCalisma+0x5f4>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d114      	bne.n	80051b0 <checkAktifCalisma+0x568>
 8005186:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <checkAktifCalisma+0x5b4>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f083 0301 	eor.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10d      	bne.n	80051b0 <checkAktifCalisma+0x568>
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <checkAktifCalisma+0x5b8>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f083 0301 	eor.w	r3, r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <checkAktifCalisma+0x568>
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <checkAktifCalisma+0x5ac>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f083 0301 	eor.w	r3, r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2102      	movs	r1, #2
 80051b4:	4813      	ldr	r0, [pc, #76]	; (8005204 <checkAktifCalisma+0x5bc>)
 80051b6:	f003 ffa6 	bl	8009106 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80051ba:	4b17      	ldr	r3, [pc, #92]	; (8005218 <checkAktifCalisma+0x5d0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80051c0:	4b1e      	ldr	r3, [pc, #120]	; (800523c <checkAktifCalisma+0x5f4>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <checkAktifCalisma+0x5d0>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d040      	beq.n	8005250 <checkAktifCalisma+0x608>
 80051ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051d2:	480f      	ldr	r0, [pc, #60]	; (8005210 <checkAktifCalisma+0x5c8>)
 80051d4:	f003 ff80 	bl	80090d8 <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d138      	bne.n	8005250 <checkAktifCalisma+0x608>
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <checkAktifCalisma+0x604>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d034      	beq.n	8005250 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80051e6:	2201      	movs	r2, #1
 80051e8:	2101      	movs	r1, #1
 80051ea:	4806      	ldr	r0, [pc, #24]	; (8005204 <checkAktifCalisma+0x5bc>)
 80051ec:	f003 ff8b 	bl	8009106 <HAL_GPIO_WritePin>
 80051f0:	e033      	b.n	800525a <checkAktifCalisma+0x612>
 80051f2:	bf00      	nop
 80051f4:	2000024b 	.word	0x2000024b
 80051f8:	20000211 	.word	0x20000211
 80051fc:	20000246 	.word	0x20000246
 8005200:	20000247 	.word	0x20000247
 8005204:	40010c00 	.word	0x40010c00
 8005208:	20000231 	.word	0x20000231
 800520c:	20000245 	.word	0x20000245
 8005210:	40011000 	.word	0x40011000
 8005214:	200001fa 	.word	0x200001fa
 8005218:	2000022c 	.word	0x2000022c
 800521c:	20000229 	.word	0x20000229
 8005220:	2000022d 	.word	0x2000022d
 8005224:	2000022a 	.word	0x2000022a
 8005228:	2000022b 	.word	0x2000022b
 800522c:	2000022e 	.word	0x2000022e
 8005230:	2000022f 	.word	0x2000022f
 8005234:	20000234 	.word	0x20000234
 8005238:	20000255 	.word	0x20000255
 800523c:	20000224 	.word	0x20000224
 8005240:	200001d0 	.word	0x200001d0
 8005244:	200001dc 	.word	0x200001dc
 8005248:	20000209 	.word	0x20000209
 800524c:	200001f9 	.word	0x200001f9
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005250:	2200      	movs	r2, #0
 8005252:	2101      	movs	r1, #1
 8005254:	4836      	ldr	r0, [pc, #216]	; (8005330 <checkAktifCalisma+0x6e8>)
 8005256:	f003 ff56 	bl	8009106 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <checkAktifCalisma+0x6ec>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 8080 	bne.w	8005364 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005264:	4b34      	ldr	r3, [pc, #208]	; (8005338 <checkAktifCalisma+0x6f0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d003      	beq.n	8005274 <checkAktifCalisma+0x62c>
 800526c:	4b32      	ldr	r3, [pc, #200]	; (8005338 <checkAktifCalisma+0x6f0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d177      	bne.n	8005364 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005274:	4b31      	ldr	r3, [pc, #196]	; (800533c <checkAktifCalisma+0x6f4>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d073      	beq.n	8005364 <checkAktifCalisma+0x71c>
 800527c:	4b30      	ldr	r3, [pc, #192]	; (8005340 <checkAktifCalisma+0x6f8>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d06f      	beq.n	8005364 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005288:	4829      	ldr	r0, [pc, #164]	; (8005330 <checkAktifCalisma+0x6e8>)
 800528a:	f003 ff25 	bl	80090d8 <HAL_GPIO_ReadPin>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d167      	bne.n	8005364 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005298:	482a      	ldr	r0, [pc, #168]	; (8005344 <checkAktifCalisma+0x6fc>)
 800529a:	f003 ff1d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <checkAktifCalisma+0x664>
 80052a4:	4b28      	ldr	r3, [pc, #160]	; (8005348 <checkAktifCalisma+0x700>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d15b      	bne.n	8005364 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80052ac:	2140      	movs	r1, #64	; 0x40
 80052ae:	4825      	ldr	r0, [pc, #148]	; (8005344 <checkAktifCalisma+0x6fc>)
 80052b0:	f003 ff12 	bl	80090d8 <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10f      	bne.n	80052da <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80052ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052be:	481c      	ldr	r0, [pc, #112]	; (8005330 <checkAktifCalisma+0x6e8>)
 80052c0:	f003 ff0a 	bl	80090d8 <HAL_GPIO_ReadPin>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80052ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052ce:	4818      	ldr	r0, [pc, #96]	; (8005330 <checkAktifCalisma+0x6e8>)
 80052d0:	f003 ff02 	bl	80090d8 <HAL_GPIO_ReadPin>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d003      	beq.n	80052e2 <checkAktifCalisma+0x69a>
 80052da:	4b1c      	ldr	r3, [pc, #112]	; (800534c <checkAktifCalisma+0x704>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d040      	beq.n	8005364 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80052e2:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <checkAktifCalisma+0x708>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f083 0301 	eor.w	r3, r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d039      	beq.n	8005364 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80052f0:	4b18      	ldr	r3, [pc, #96]	; (8005354 <checkAktifCalisma+0x70c>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	f083 0301 	eor.w	r3, r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d032      	beq.n	8005364 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <checkAktifCalisma+0x710>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f083 0301 	eor.w	r3, r3, #1
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02b      	beq.n	8005364 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 800530c:	4b13      	ldr	r3, [pc, #76]	; (800535c <checkAktifCalisma+0x714>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f083 0301 	eor.w	r3, r3, #1
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d024      	beq.n	8005364 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <checkAktifCalisma+0x718>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f083 0301 	eor.w	r3, r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01d      	beq.n	8005364 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <checkAktifCalisma+0x704>)
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e01c      	b.n	800536a <checkAktifCalisma+0x722>
 8005330:	40010c00 	.word	0x40010c00
 8005334:	20000211 	.word	0x20000211
 8005338:	20000203 	.word	0x20000203
 800533c:	20000246 	.word	0x20000246
 8005340:	20000247 	.word	0x20000247
 8005344:	40011000 	.word	0x40011000
 8005348:	20000204 	.word	0x20000204
 800534c:	2000022a 	.word	0x2000022a
 8005350:	20000229 	.word	0x20000229
 8005354:	2000022d 	.word	0x2000022d
 8005358:	2000022c 	.word	0x2000022c
 800535c:	2000022b 	.word	0x2000022b
 8005360:	2000022f 	.word	0x2000022f
		} else {
			devmotoryukaricalisiyor=0;
 8005364:	4b64      	ldr	r3, [pc, #400]	; (80054f8 <checkAktifCalisma+0x8b0>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800536a:	4b63      	ldr	r3, [pc, #396]	; (80054f8 <checkAktifCalisma+0x8b0>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005372:	2201      	movs	r2, #1
 8005374:	2120      	movs	r1, #32
 8005376:	4861      	ldr	r0, [pc, #388]	; (80054fc <checkAktifCalisma+0x8b4>)
 8005378:	f003 fec5 	bl	8009106 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800537c:	4b60      	ldr	r3, [pc, #384]	; (8005500 <checkAktifCalisma+0x8b8>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005382:	4b5f      	ldr	r3, [pc, #380]	; (8005500 <checkAktifCalisma+0x8b8>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d025      	beq.n	80053d6 <checkAktifCalisma+0x78e>
 800538a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800538e:	485d      	ldr	r0, [pc, #372]	; (8005504 <checkAktifCalisma+0x8bc>)
 8005390:	f003 fea2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b01      	cmp	r3, #1
 8005398:	d007      	beq.n	80053aa <checkAktifCalisma+0x762>
 800539a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800539e:	4857      	ldr	r0, [pc, #348]	; (80054fc <checkAktifCalisma+0x8b4>)
 80053a0:	f003 fe9a 	bl	80090d8 <HAL_GPIO_ReadPin>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d115      	bne.n	80053d6 <checkAktifCalisma+0x78e>
 80053aa:	4b57      	ldr	r3, [pc, #348]	; (8005508 <checkAktifCalisma+0x8c0>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <checkAktifCalisma+0x78e>
 80053b2:	4b56      	ldr	r3, [pc, #344]	; (800550c <checkAktifCalisma+0x8c4>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <checkAktifCalisma+0x78e>
 80053ba:	4b55      	ldr	r3, [pc, #340]	; (8005510 <checkAktifCalisma+0x8c8>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	f083 0301 	eor.w	r3, r3, #1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <checkAktifCalisma+0x78e>
			timer2=millis;
 80053c8:	4b52      	ldr	r3, [pc, #328]	; (8005514 <checkAktifCalisma+0x8cc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a52      	ldr	r2, [pc, #328]	; (8005518 <checkAktifCalisma+0x8d0>)
 80053ce:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80053d0:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <checkAktifCalisma+0x8c8>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80053d6:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <checkAktifCalisma+0x8cc>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b4f      	ldr	r3, [pc, #316]	; (8005518 <checkAktifCalisma+0x8d0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	4a4e      	ldr	r2, [pc, #312]	; (800551c <checkAktifCalisma+0x8d4>)
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d303      	bcc.n	80053f0 <checkAktifCalisma+0x7a8>
 80053e8:	4b49      	ldr	r3, [pc, #292]	; (8005510 <checkAktifCalisma+0x8c8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10d      	bne.n	800540c <checkAktifCalisma+0x7c4>
 80053f0:	4b45      	ldr	r3, [pc, #276]	; (8005508 <checkAktifCalisma+0x8c0>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <checkAktifCalisma+0x7c4>
 80053fe:	4b43      	ldr	r3, [pc, #268]	; (800550c <checkAktifCalisma+0x8c4>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	f083 0301 	eor.w	r3, r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800540c:	2200      	movs	r2, #0
 800540e:	2120      	movs	r1, #32
 8005410:	483a      	ldr	r0, [pc, #232]	; (80054fc <checkAktifCalisma+0x8b4>)
 8005412:	f003 fe78 	bl	8009106 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005416:	4b3a      	ldr	r3, [pc, #232]	; (8005500 <checkAktifCalisma+0x8b8>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800541c:	4b3c      	ldr	r3, [pc, #240]	; (8005510 <checkAktifCalisma+0x8c8>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <checkAktifCalisma+0x8d8>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8088 	bne.w	800553c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800542c:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <checkAktifCalisma+0x8dc>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d003      	beq.n	800543c <checkAktifCalisma+0x7f4>
 8005434:	4b3b      	ldr	r3, [pc, #236]	; (8005524 <checkAktifCalisma+0x8dc>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d17f      	bne.n	800553c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800543c:	4b32      	ldr	r3, [pc, #200]	; (8005508 <checkAktifCalisma+0x8c0>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d07b      	beq.n	800553c <checkAktifCalisma+0x8f4>
 8005444:	4b31      	ldr	r3, [pc, #196]	; (800550c <checkAktifCalisma+0x8c4>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d077      	beq.n	800553c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	482b      	ldr	r0, [pc, #172]	; (80054fc <checkAktifCalisma+0x8b4>)
 8005450:	f003 fe42 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d170      	bne.n	800553c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800545a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800545e:	4827      	ldr	r0, [pc, #156]	; (80054fc <checkAktifCalisma+0x8b4>)
 8005460:	f003 fe3a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <checkAktifCalisma+0x82a>
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <checkAktifCalisma+0x8e0>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d164      	bne.n	800553c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005476:	4823      	ldr	r0, [pc, #140]	; (8005504 <checkAktifCalisma+0x8bc>)
 8005478:	f003 fe2e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10f      	bne.n	80054a2 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005486:	481f      	ldr	r0, [pc, #124]	; (8005504 <checkAktifCalisma+0x8bc>)
 8005488:	f003 fe26 	bl	80090d8 <HAL_GPIO_ReadPin>
 800548c:	4603      	mov	r3, r0
 800548e:	2b01      	cmp	r3, #1
 8005490:	d107      	bne.n	80054a2 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005492:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005496:	481b      	ldr	r0, [pc, #108]	; (8005504 <checkAktifCalisma+0x8bc>)
 8005498:	f003 fe1e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d003      	beq.n	80054aa <checkAktifCalisma+0x862>
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <checkAktifCalisma+0x8e4>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d048      	beq.n	800553c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <checkAktifCalisma+0x8e8>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f083 0301 	eor.w	r3, r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d041      	beq.n	800553c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <checkAktifCalisma+0x8ec>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f083 0301 	eor.w	r3, r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03a      	beq.n	800553c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <checkAktifCalisma+0x8f0>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f083 0301 	eor.w	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d033      	beq.n	800553c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <checkAktifCalisma+0x8b8>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02c      	beq.n	800553c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <checkAktifCalisma+0x8b0>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d025      	beq.n	800553c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <checkAktifCalisma+0x8e4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e024      	b.n	8005542 <checkAktifCalisma+0x8fa>
 80054f8:	2000022a 	.word	0x2000022a
 80054fc:	40011000 	.word	0x40011000
 8005500:	2000022e 	.word	0x2000022e
 8005504:	40010c00 	.word	0x40010c00
 8005508:	20000246 	.word	0x20000246
 800550c:	20000247 	.word	0x20000247
 8005510:	20000226 	.word	0x20000226
 8005514:	200001d0 	.word	0x200001d0
 8005518:	200001dc 	.word	0x200001dc
 800551c:	2000020a 	.word	0x2000020a
 8005520:	20000211 	.word	0x20000211
 8005524:	20000203 	.word	0x20000203
 8005528:	20000205 	.word	0x20000205
 800552c:	2000022b 	.word	0x2000022b
 8005530:	20000229 	.word	0x20000229
 8005534:	2000022d 	.word	0x2000022d
 8005538:	2000022c 	.word	0x2000022c
		} else {
			devmotorasagicalisiyor=0;
 800553c:	4b96      	ldr	r3, [pc, #600]	; (8005798 <checkAktifCalisma+0xb50>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005542:	4b95      	ldr	r3, [pc, #596]	; (8005798 <checkAktifCalisma+0xb50>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800554a:	2201      	movs	r2, #1
 800554c:	2110      	movs	r1, #16
 800554e:	4893      	ldr	r0, [pc, #588]	; (800579c <checkAktifCalisma+0xb54>)
 8005550:	f003 fdd9 	bl	8009106 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005554:	4b92      	ldr	r3, [pc, #584]	; (80057a0 <checkAktifCalisma+0xb58>)
 8005556:	2201      	movs	r2, #1
 8005558:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800555a:	4b91      	ldr	r3, [pc, #580]	; (80057a0 <checkAktifCalisma+0xb58>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d024      	beq.n	80055ac <checkAktifCalisma+0x964>
 8005562:	2140      	movs	r1, #64	; 0x40
 8005564:	488d      	ldr	r0, [pc, #564]	; (800579c <checkAktifCalisma+0xb54>)
 8005566:	f003 fdb7 	bl	80090d8 <HAL_GPIO_ReadPin>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d007      	beq.n	8005580 <checkAktifCalisma+0x938>
 8005570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005574:	4889      	ldr	r0, [pc, #548]	; (800579c <checkAktifCalisma+0xb54>)
 8005576:	f003 fdaf 	bl	80090d8 <HAL_GPIO_ReadPin>
 800557a:	4603      	mov	r3, r0
 800557c:	2b01      	cmp	r3, #1
 800557e:	d115      	bne.n	80055ac <checkAktifCalisma+0x964>
 8005580:	4b88      	ldr	r3, [pc, #544]	; (80057a4 <checkAktifCalisma+0xb5c>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <checkAktifCalisma+0x964>
 8005588:	4b87      	ldr	r3, [pc, #540]	; (80057a8 <checkAktifCalisma+0xb60>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <checkAktifCalisma+0x964>
 8005590:	4b86      	ldr	r3, [pc, #536]	; (80057ac <checkAktifCalisma+0xb64>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f083 0301 	eor.w	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d006      	beq.n	80055ac <checkAktifCalisma+0x964>
			timer2=millis;
 800559e:	4b84      	ldr	r3, [pc, #528]	; (80057b0 <checkAktifCalisma+0xb68>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a84      	ldr	r2, [pc, #528]	; (80057b4 <checkAktifCalisma+0xb6c>)
 80055a4:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80055a6:	4b81      	ldr	r3, [pc, #516]	; (80057ac <checkAktifCalisma+0xb64>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055ac:	4b80      	ldr	r3, [pc, #512]	; (80057b0 <checkAktifCalisma+0xb68>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <checkAktifCalisma+0xb6c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	4a80      	ldr	r2, [pc, #512]	; (80057b8 <checkAktifCalisma+0xb70>)
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d303      	bcc.n	80055c6 <checkAktifCalisma+0x97e>
 80055be:	4b7b      	ldr	r3, [pc, #492]	; (80057ac <checkAktifCalisma+0xb64>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <checkAktifCalisma+0x99a>
 80055c6:	4b77      	ldr	r3, [pc, #476]	; (80057a4 <checkAktifCalisma+0xb5c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <checkAktifCalisma+0x99a>
 80055d4:	4b74      	ldr	r3, [pc, #464]	; (80057a8 <checkAktifCalisma+0xb60>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f083 0301 	eor.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80055e2:	2200      	movs	r2, #0
 80055e4:	2110      	movs	r1, #16
 80055e6:	486d      	ldr	r0, [pc, #436]	; (800579c <checkAktifCalisma+0xb54>)
 80055e8:	f003 fd8d 	bl	8009106 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80055ec:	4b6c      	ldr	r3, [pc, #432]	; (80057a0 <checkAktifCalisma+0xb58>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80055f2:	4b6e      	ldr	r3, [pc, #440]	; (80057ac <checkAktifCalisma+0xb64>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80055f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055fc:	486f      	ldr	r0, [pc, #444]	; (80057bc <checkAktifCalisma+0xb74>)
 80055fe:	f003 fd6b 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d120      	bne.n	800564a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800560c:	486b      	ldr	r0, [pc, #428]	; (80057bc <checkAktifCalisma+0xb74>)
 800560e:	f003 fd63 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d118      	bne.n	800564a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005618:	2104      	movs	r1, #4
 800561a:	4868      	ldr	r0, [pc, #416]	; (80057bc <checkAktifCalisma+0xb74>)
 800561c:	f003 fd5c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d111      	bne.n	800564a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005626:	2102      	movs	r1, #2
 8005628:	4864      	ldr	r0, [pc, #400]	; (80057bc <checkAktifCalisma+0xb74>)
 800562a:	f003 fd55 	bl	80090d8 <HAL_GPIO_ReadPin>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005634:	2101      	movs	r1, #1
 8005636:	4861      	ldr	r0, [pc, #388]	; (80057bc <checkAktifCalisma+0xb74>)
 8005638:	f003 fd4e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <checkAktifCalisma+0xa02>
			makineStop=1;
 8005642:	4b5f      	ldr	r3, [pc, #380]	; (80057c0 <checkAktifCalisma+0xb78>)
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e002      	b.n	8005650 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <checkAktifCalisma+0xb78>)
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005650:	4b5c      	ldr	r3, [pc, #368]	; (80057c4 <checkAktifCalisma+0xb7c>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d144      	bne.n	80056e2 <checkAktifCalisma+0xa9a>
 8005658:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <checkAktifCalisma+0xb80>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d003      	beq.n	8005668 <checkAktifCalisma+0xa20>
 8005660:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <checkAktifCalisma+0xb80>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d13c      	bne.n	80056e2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005668:	2180      	movs	r1, #128	; 0x80
 800566a:	484c      	ldr	r0, [pc, #304]	; (800579c <checkAktifCalisma+0xb54>)
 800566c:	f003 fd34 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <checkAktifCalisma+0xa36>
 8005676:	4b55      	ldr	r3, [pc, #340]	; (80057cc <checkAktifCalisma+0xb84>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <checkAktifCalisma+0xa4e>
 800567e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005682:	484e      	ldr	r0, [pc, #312]	; (80057bc <checkAktifCalisma+0xb74>)
 8005684:	f003 fd28 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d129      	bne.n	80056e2 <checkAktifCalisma+0xa9a>
 800568e:	4b4f      	ldr	r3, [pc, #316]	; (80057cc <checkAktifCalisma+0xb84>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d125      	bne.n	80056e2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005696:	2104      	movs	r1, #4
 8005698:	4840      	ldr	r0, [pc, #256]	; (800579c <checkAktifCalisma+0xb54>)
 800569a:	f003 fd1d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d003      	beq.n	80056ac <checkAktifCalisma+0xa64>
 80056a4:	4b4a      	ldr	r3, [pc, #296]	; (80057d0 <checkAktifCalisma+0xb88>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11a      	bne.n	80056e2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056ac:	2102      	movs	r1, #2
 80056ae:	483b      	ldr	r0, [pc, #236]	; (800579c <checkAktifCalisma+0xb54>)
 80056b0:	f003 fd12 	bl	80090d8 <HAL_GPIO_ReadPin>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d113      	bne.n	80056e2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80056ba:	4b46      	ldr	r3, [pc, #280]	; (80057d4 <checkAktifCalisma+0xb8c>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f083 0301 	eor.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00c      	beq.n	80056e2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <checkAktifCalisma+0xb78>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80056d0:	4b41      	ldr	r3, [pc, #260]	; (80057d8 <checkAktifCalisma+0xb90>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80056d6:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <checkAktifCalisma+0xb68>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a40      	ldr	r2, [pc, #256]	; (80057dc <checkAktifCalisma+0xb94>)
 80056dc:	6013      	str	r3, [r2, #0]
			bekle();
 80056de:	f7ff f935 	bl	800494c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80056e2:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <checkAktifCalisma+0xb68>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b3d      	ldr	r3, [pc, #244]	; (80057dc <checkAktifCalisma+0xb94>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <checkAktifCalisma+0xb98>)
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d211      	bcs.n	8005718 <checkAktifCalisma+0xad0>
 80056f4:	2104      	movs	r1, #4
 80056f6:	4829      	ldr	r0, [pc, #164]	; (800579c <checkAktifCalisma+0xb54>)
 80056f8:	f003 fcee 	bl	80090d8 <HAL_GPIO_ReadPin>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <checkAktifCalisma+0xad0>
 8005702:	4b33      	ldr	r3, [pc, #204]	; (80057d0 <checkAktifCalisma+0xb88>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <checkAktifCalisma+0xad0>
 800570a:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <checkAktifCalisma+0xb78>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005718:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <checkAktifCalisma+0xb90>)
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800571e:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <checkAktifCalisma+0xb7c>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d160      	bne.n	80057e8 <checkAktifCalisma+0xba0>
 8005726:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <checkAktifCalisma+0xb80>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d003      	beq.n	8005736 <checkAktifCalisma+0xaee>
 800572e:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <checkAktifCalisma+0xb80>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d158      	bne.n	80057e8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005736:	2104      	movs	r1, #4
 8005738:	4818      	ldr	r0, [pc, #96]	; (800579c <checkAktifCalisma+0xb54>)
 800573a:	f003 fccd 	bl	80090d8 <HAL_GPIO_ReadPin>
 800573e:	4603      	mov	r3, r0
 8005740:	2b01      	cmp	r3, #1
 8005742:	d003      	beq.n	800574c <checkAktifCalisma+0xb04>
 8005744:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <checkAktifCalisma+0xb88>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d14d      	bne.n	80057e8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800574c:	2102      	movs	r1, #2
 800574e:	4813      	ldr	r0, [pc, #76]	; (800579c <checkAktifCalisma+0xb54>)
 8005750:	f003 fcc2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d146      	bne.n	80057e8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	480f      	ldr	r0, [pc, #60]	; (800579c <checkAktifCalisma+0xb54>)
 800575e:	f003 fcbb 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <checkAktifCalisma+0xb28>
 8005768:	4b18      	ldr	r3, [pc, #96]	; (80057cc <checkAktifCalisma+0xb84>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <checkAktifCalisma+0xb40>
 8005770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005774:	4811      	ldr	r0, [pc, #68]	; (80057bc <checkAktifCalisma+0xb74>)
 8005776:	f003 fcaf 	bl	80090d8 <HAL_GPIO_ReadPin>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d133      	bne.n	80057e8 <checkAktifCalisma+0xba0>
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <checkAktifCalisma+0xb84>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d12f      	bne.n	80057e8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005788:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <checkAktifCalisma+0xb78>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d02b      	beq.n	80057e8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <checkAktifCalisma+0xb9c>)
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e02a      	b.n	80057ee <checkAktifCalisma+0xba6>
 8005798:	2000022b 	.word	0x2000022b
 800579c:	40011000 	.word	0x40011000
 80057a0:	2000022f 	.word	0x2000022f
 80057a4:	20000246 	.word	0x20000246
 80057a8:	20000247 	.word	0x20000247
 80057ac:	20000227 	.word	0x20000227
 80057b0:	200001d0 	.word	0x200001d0
 80057b4:	200001dc 	.word	0x200001dc
 80057b8:	2000020a 	.word	0x2000020a
 80057bc:	40010c00 	.word	0x40010c00
 80057c0:	20000236 	.word	0x20000236
 80057c4:	200001fd 	.word	0x200001fd
 80057c8:	200001fc 	.word	0x200001fc
 80057cc:	20000200 	.word	0x20000200
 80057d0:	200001fa 	.word	0x200001fa
 80057d4:	20000223 	.word	0x20000223
 80057d8:	20000237 	.word	0x20000237
 80057dc:	200001d4 	.word	0x200001d4
 80057e0:	2000020d 	.word	0x2000020d
 80057e4:	20000238 	.word	0x20000238
		} else {
			kapi1butonkontrol=0;
 80057e8:	4b8b      	ldr	r3, [pc, #556]	; (8005a18 <checkAktifCalisma+0xdd0>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057ee:	4b8b      	ldr	r3, [pc, #556]	; (8005a1c <checkAktifCalisma+0xdd4>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d121      	bne.n	800583a <checkAktifCalisma+0xbf2>
 80057f6:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <checkAktifCalisma+0xdd8>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d003      	beq.n	8005806 <checkAktifCalisma+0xbbe>
 80057fe:	4b88      	ldr	r3, [pc, #544]	; (8005a20 <checkAktifCalisma+0xdd8>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d119      	bne.n	800583a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005806:	2104      	movs	r1, #4
 8005808:	4886      	ldr	r0, [pc, #536]	; (8005a24 <checkAktifCalisma+0xddc>)
 800580a:	f003 fc65 	bl	80090d8 <HAL_GPIO_ReadPin>
 800580e:	4603      	mov	r3, r0
 8005810:	2b01      	cmp	r3, #1
 8005812:	d003      	beq.n	800581c <checkAktifCalisma+0xbd4>
 8005814:	4b84      	ldr	r3, [pc, #528]	; (8005a28 <checkAktifCalisma+0xde0>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10e      	bne.n	800583a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800581c:	2102      	movs	r1, #2
 800581e:	4881      	ldr	r0, [pc, #516]	; (8005a24 <checkAktifCalisma+0xddc>)
 8005820:	f003 fc5a 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d107      	bne.n	800583a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800582a:	4b80      	ldr	r3, [pc, #512]	; (8005a2c <checkAktifCalisma+0xde4>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005832:	4b7f      	ldr	r3, [pc, #508]	; (8005a30 <checkAktifCalisma+0xde8>)
 8005834:	2201      	movs	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	e002      	b.n	8005840 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800583a:	4b7d      	ldr	r3, [pc, #500]	; (8005a30 <checkAktifCalisma+0xde8>)
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005840:	4b75      	ldr	r3, [pc, #468]	; (8005a18 <checkAktifCalisma+0xdd0>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d107      	bne.n	8005858 <checkAktifCalisma+0xc10>
 8005848:	4b79      	ldr	r3, [pc, #484]	; (8005a30 <checkAktifCalisma+0xde8>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <checkAktifCalisma+0xc10>
 8005850:	4b78      	ldr	r3, [pc, #480]	; (8005a34 <checkAktifCalisma+0xdec>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005858:	2201      	movs	r2, #1
 800585a:	2180      	movs	r1, #128	; 0x80
 800585c:	4876      	ldr	r0, [pc, #472]	; (8005a38 <checkAktifCalisma+0xdf0>)
 800585e:	f003 fc52 	bl	8009106 <HAL_GPIO_WritePin>
 8005862:	e004      	b.n	800586e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005864:	2200      	movs	r2, #0
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	4873      	ldr	r0, [pc, #460]	; (8005a38 <checkAktifCalisma+0xdf0>)
 800586a:	f003 fc4c 	bl	8009106 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800586e:	4b73      	ldr	r3, [pc, #460]	; (8005a3c <checkAktifCalisma+0xdf4>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d141      	bne.n	80058fa <checkAktifCalisma+0xcb2>
 8005876:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <checkAktifCalisma+0xdd8>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d003      	beq.n	8005886 <checkAktifCalisma+0xc3e>
 800587e:	4b68      	ldr	r3, [pc, #416]	; (8005a20 <checkAktifCalisma+0xdd8>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d139      	bne.n	80058fa <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800588a:	4866      	ldr	r0, [pc, #408]	; (8005a24 <checkAktifCalisma+0xddc>)
 800588c:	f003 fc24 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <checkAktifCalisma+0xc56>
 8005896:	4b6a      	ldr	r3, [pc, #424]	; (8005a40 <checkAktifCalisma+0xdf8>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00b      	beq.n	80058b6 <checkAktifCalisma+0xc6e>
 800589e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058a2:	4868      	ldr	r0, [pc, #416]	; (8005a44 <checkAktifCalisma+0xdfc>)
 80058a4:	f003 fc18 	bl	80090d8 <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d125      	bne.n	80058fa <checkAktifCalisma+0xcb2>
 80058ae:	4b64      	ldr	r3, [pc, #400]	; (8005a40 <checkAktifCalisma+0xdf8>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d121      	bne.n	80058fa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058b6:	2102      	movs	r1, #2
 80058b8:	485a      	ldr	r0, [pc, #360]	; (8005a24 <checkAktifCalisma+0xddc>)
 80058ba:	f003 fc0d 	bl	80090d8 <HAL_GPIO_ReadPin>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d11a      	bne.n	80058fa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058c4:	2104      	movs	r1, #4
 80058c6:	4857      	ldr	r0, [pc, #348]	; (8005a24 <checkAktifCalisma+0xddc>)
 80058c8:	f003 fc06 	bl	80090d8 <HAL_GPIO_ReadPin>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d113      	bne.n	80058fa <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80058d2:	4b56      	ldr	r3, [pc, #344]	; (8005a2c <checkAktifCalisma+0xde4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00f      	beq.n	80058fa <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80058da:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <checkAktifCalisma+0xe00>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80058e8:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <checkAktifCalisma+0xe04>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058ee:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <checkAktifCalisma+0xe08>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <checkAktifCalisma+0xe0c>)
 80058f4:	6013      	str	r3, [r2, #0]
			bekle();
 80058f6:	f7ff f829 	bl	800494c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80058fa:	4b55      	ldr	r3, [pc, #340]	; (8005a50 <checkAktifCalisma+0xe08>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <checkAktifCalisma+0xe0c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	4a54      	ldr	r2, [pc, #336]	; (8005a58 <checkAktifCalisma+0xe10>)
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	4293      	cmp	r3, r2
 800590a:	d20d      	bcs.n	8005928 <checkAktifCalisma+0xce0>
 800590c:	2102      	movs	r1, #2
 800590e:	4845      	ldr	r0, [pc, #276]	; (8005a24 <checkAktifCalisma+0xddc>)
 8005910:	f003 fbe2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <checkAktifCalisma+0xce0>
 800591a:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <checkAktifCalisma+0xde4>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005928:	4b48      	ldr	r3, [pc, #288]	; (8005a4c <checkAktifCalisma+0xe04>)
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800592e:	4b43      	ldr	r3, [pc, #268]	; (8005a3c <checkAktifCalisma+0xdf4>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d135      	bne.n	80059a2 <checkAktifCalisma+0xd5a>
 8005936:	4b3a      	ldr	r3, [pc, #232]	; (8005a20 <checkAktifCalisma+0xdd8>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d003      	beq.n	8005946 <checkAktifCalisma+0xcfe>
 800593e:	4b38      	ldr	r3, [pc, #224]	; (8005a20 <checkAktifCalisma+0xdd8>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d12d      	bne.n	80059a2 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800594a:	4836      	ldr	r0, [pc, #216]	; (8005a24 <checkAktifCalisma+0xddc>)
 800594c:	f003 fbc4 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <checkAktifCalisma+0xd16>
 8005956:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <checkAktifCalisma+0xdf8>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <checkAktifCalisma+0xd2e>
 800595e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005962:	4838      	ldr	r0, [pc, #224]	; (8005a44 <checkAktifCalisma+0xdfc>)
 8005964:	f003 fbb8 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d119      	bne.n	80059a2 <checkAktifCalisma+0xd5a>
 800596e:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <checkAktifCalisma+0xdf8>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d115      	bne.n	80059a2 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005976:	2102      	movs	r1, #2
 8005978:	482a      	ldr	r0, [pc, #168]	; (8005a24 <checkAktifCalisma+0xddc>)
 800597a:	f003 fbad 	bl	80090d8 <HAL_GPIO_ReadPin>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d10e      	bne.n	80059a2 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005984:	2104      	movs	r1, #4
 8005986:	4827      	ldr	r0, [pc, #156]	; (8005a24 <checkAktifCalisma+0xddc>)
 8005988:	f003 fba6 	bl	80090d8 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <checkAktifCalisma+0xde4>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800599a:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <checkAktifCalisma+0xe14>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e002      	b.n	80059a8 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80059a2:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <checkAktifCalisma+0xe14>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059a8:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <checkAktifCalisma+0xdf4>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d11d      	bne.n	80059ec <checkAktifCalisma+0xda4>
 80059b0:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <checkAktifCalisma+0xdd8>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d003      	beq.n	80059c0 <checkAktifCalisma+0xd78>
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <checkAktifCalisma+0xdd8>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d115      	bne.n	80059ec <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059c0:	2102      	movs	r1, #2
 80059c2:	4818      	ldr	r0, [pc, #96]	; (8005a24 <checkAktifCalisma+0xddc>)
 80059c4:	f003 fb88 	bl	80090d8 <HAL_GPIO_ReadPin>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d10e      	bne.n	80059ec <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059ce:	2104      	movs	r1, #4
 80059d0:	4814      	ldr	r0, [pc, #80]	; (8005a24 <checkAktifCalisma+0xddc>)
 80059d2:	f003 fb81 	bl	80090d8 <HAL_GPIO_ReadPin>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80059dc:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <checkAktifCalisma+0xde4>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80059e4:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <checkAktifCalisma+0xe18>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80059ec:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <checkAktifCalisma+0xe18>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80059f2:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <checkAktifCalisma+0xe14>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <checkAktifCalisma+0xdc2>
 80059fa:	4b19      	ldr	r3, [pc, #100]	; (8005a60 <checkAktifCalisma+0xe18>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <checkAktifCalisma+0xdc2>
 8005a02:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <checkAktifCalisma+0xe04>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d02c      	beq.n	8005a64 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	2140      	movs	r1, #64	; 0x40
 8005a0e:	480a      	ldr	r0, [pc, #40]	; (8005a38 <checkAktifCalisma+0xdf0>)
 8005a10:	f003 fb79 	bl	8009106 <HAL_GPIO_WritePin>
 8005a14:	e02b      	b.n	8005a6e <checkAktifCalisma+0xe26>
 8005a16:	bf00      	nop
 8005a18:	20000238 	.word	0x20000238
 8005a1c:	200001fd 	.word	0x200001fd
 8005a20:	200001fc 	.word	0x200001fc
 8005a24:	40011000 	.word	0x40011000
 8005a28:	200001fa 	.word	0x200001fa
 8005a2c:	20000236 	.word	0x20000236
 8005a30:	20000239 	.word	0x20000239
 8005a34:	20000237 	.word	0x20000237
 8005a38:	40010800 	.word	0x40010800
 8005a3c:	200001fe 	.word	0x200001fe
 8005a40:	20000200 	.word	0x20000200
 8005a44:	40010c00 	.word	0x40010c00
 8005a48:	20000223 	.word	0x20000223
 8005a4c:	2000023a 	.word	0x2000023a
 8005a50:	200001d0 	.word	0x200001d0
 8005a54:	200001d4 	.word	0x200001d4
 8005a58:	2000020e 	.word	0x2000020e
 8005a5c:	2000023b 	.word	0x2000023b
 8005a60:	2000023c 	.word	0x2000023c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a64:	2200      	movs	r2, #0
 8005a66:	2140      	movs	r1, #64	; 0x40
 8005a68:	488d      	ldr	r0, [pc, #564]	; (8005ca0 <checkAktifCalisma+0x1058>)
 8005a6a:	f003 fb4c 	bl	8009106 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005a6e:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <checkAktifCalisma+0x105c>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <checkAktifCalisma+0xe36>
 8005a76:	4b8b      	ldr	r3, [pc, #556]	; (8005ca4 <checkAktifCalisma+0x105c>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d115      	bne.n	8005aaa <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4889      	ldr	r0, [pc, #548]	; (8005ca8 <checkAktifCalisma+0x1060>)
 8005a82:	f003 fb29 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d003      	beq.n	8005a94 <checkAktifCalisma+0xe4c>
 8005a8c:	4b87      	ldr	r3, [pc, #540]	; (8005cac <checkAktifCalisma+0x1064>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a94:	2102      	movs	r1, #2
 8005a96:	4884      	ldr	r0, [pc, #528]	; (8005ca8 <checkAktifCalisma+0x1060>)
 8005a98:	f003 fb1e 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005aa2:	4b83      	ldr	r3, [pc, #524]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e002      	b.n	8005ab0 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005aaa:	4b81      	ldr	r3, [pc, #516]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005ab0:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <checkAktifCalisma+0x105c>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d003      	beq.n	8005ac0 <checkAktifCalisma+0xe78>
 8005ab8:	4b7a      	ldr	r3, [pc, #488]	; (8005ca4 <checkAktifCalisma+0x105c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d111      	bne.n	8005ae4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4879      	ldr	r0, [pc, #484]	; (8005ca8 <checkAktifCalisma+0x1060>)
 8005ac4:	f003 fb08 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d10a      	bne.n	8005ae4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005ace:	2104      	movs	r1, #4
 8005ad0:	4875      	ldr	r0, [pc, #468]	; (8005ca8 <checkAktifCalisma+0x1060>)
 8005ad2:	f003 fb01 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005adc:	4b75      	ldr	r3, [pc, #468]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ae4:	4b73      	ldr	r3, [pc, #460]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005aea:	4b71      	ldr	r3, [pc, #452]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00f      	beq.n	8005b12 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005af2:	4b71      	ldr	r3, [pc, #452]	; (8005cb8 <checkAktifCalisma+0x1070>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10b      	bne.n	8005b12 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005afe:	486f      	ldr	r0, [pc, #444]	; (8005cbc <checkAktifCalisma+0x1074>)
 8005b00:	f003 faea 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005b0a:	4b6d      	ldr	r3, [pc, #436]	; (8005cc0 <checkAktifCalisma+0x1078>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e002      	b.n	8005b18 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005b12:	4b6b      	ldr	r3, [pc, #428]	; (8005cc0 <checkAktifCalisma+0x1078>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005b18:	4b66      	ldr	r3, [pc, #408]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00f      	beq.n	8005b40 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005b20:	4b65      	ldr	r3, [pc, #404]	; (8005cb8 <checkAktifCalisma+0x1070>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10b      	bne.n	8005b40 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b2c:	4863      	ldr	r0, [pc, #396]	; (8005cbc <checkAktifCalisma+0x1074>)
 8005b2e:	f003 fad3 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005b38:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <checkAktifCalisma+0x107c>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e002      	b.n	8005b46 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005b40:	4b60      	ldr	r3, [pc, #384]	; (8005cc4 <checkAktifCalisma+0x107c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b46:	4b60      	ldr	r3, [pc, #384]	; (8005cc8 <checkAktifCalisma+0x1080>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d137      	bne.n	8005bbe <checkAktifCalisma+0xf76>
 8005b4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ccc <checkAktifCalisma+0x1084>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d003      	beq.n	8005b5e <checkAktifCalisma+0xf16>
 8005b56:	4b5d      	ldr	r3, [pc, #372]	; (8005ccc <checkAktifCalisma+0x1084>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d12f      	bne.n	8005bbe <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b5e:	4b54      	ldr	r3, [pc, #336]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <checkAktifCalisma+0xf26>
 8005b66:	4b53      	ldr	r3, [pc, #332]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d027      	beq.n	8005bbe <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b72:	484d      	ldr	r0, [pc, #308]	; (8005ca8 <checkAktifCalisma+0x1060>)
 8005b74:	f003 fab0 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <checkAktifCalisma+0xf3e>
 8005b7e:	4b4e      	ldr	r3, [pc, #312]	; (8005cb8 <checkAktifCalisma+0x1070>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b86:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <checkAktifCalisma+0x1078>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <checkAktifCalisma+0xf4e>
 8005b8e:	4b4d      	ldr	r3, [pc, #308]	; (8005cc4 <checkAktifCalisma+0x107c>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d013      	beq.n	8005bbe <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b96:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <checkAktifCalisma+0x1088>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00f      	beq.n	8005bbe <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005b9e:	4b4d      	ldr	r3, [pc, #308]	; (8005cd4 <checkAktifCalisma+0x108c>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f083 0301 	eor.w	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005bac:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <checkAktifCalisma+0x1090>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005bb2:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <checkAktifCalisma+0x1094>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a4a      	ldr	r2, [pc, #296]	; (8005ce0 <checkAktifCalisma+0x1098>)
 8005bb8:	6013      	str	r3, [r2, #0]
			bekle();
 8005bba:	f7fe fec7 	bl	800494c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <checkAktifCalisma+0x1094>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <checkAktifCalisma+0x1098>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	4a46      	ldr	r2, [pc, #280]	; (8005ce4 <checkAktifCalisma+0x109c>)
 8005bca:	7812      	ldrb	r2, [r2, #0]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d214      	bcs.n	8005bfa <checkAktifCalisma+0xfb2>
 8005bd0:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f083 0301 	eor.w	r3, r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <checkAktifCalisma+0xfa4>
 8005bde:	4b35      	ldr	r3, [pc, #212]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f083 0301 	eor.w	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <checkAktifCalisma+0xfb2>
 8005bec:	4b38      	ldr	r3, [pc, #224]	; (8005cd0 <checkAktifCalisma+0x1088>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f083 0301 	eor.w	r3, r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005bfa:	4b37      	ldr	r3, [pc, #220]	; (8005cd8 <checkAktifCalisma+0x1090>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <checkAktifCalisma+0x1080>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d12b      	bne.n	8005c60 <checkAktifCalisma+0x1018>
 8005c08:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <checkAktifCalisma+0x1084>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d003      	beq.n	8005c18 <checkAktifCalisma+0xfd0>
 8005c10:	4b2e      	ldr	r3, [pc, #184]	; (8005ccc <checkAktifCalisma+0x1084>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d123      	bne.n	8005c60 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <checkAktifCalisma+0xfe0>
 8005c20:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01b      	beq.n	8005c60 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c2c:	481e      	ldr	r0, [pc, #120]	; (8005ca8 <checkAktifCalisma+0x1060>)
 8005c2e:	f003 fa53 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <checkAktifCalisma+0xff8>
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <checkAktifCalisma+0x1070>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <checkAktifCalisma+0x1078>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <checkAktifCalisma+0x1008>
 8005c48:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <checkAktifCalisma+0x107c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c50:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <checkAktifCalisma+0x1088>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005c58:	4b23      	ldr	r3, [pc, #140]	; (8005ce8 <checkAktifCalisma+0x10a0>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005c60:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <checkAktifCalisma+0x10a0>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <checkAktifCalisma+0x1080>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d140      	bne.n	8005cf0 <checkAktifCalisma+0x10a8>
 8005c6e:	4b17      	ldr	r3, [pc, #92]	; (8005ccc <checkAktifCalisma+0x1084>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d003      	beq.n	8005c7e <checkAktifCalisma+0x1036>
 8005c76:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <checkAktifCalisma+0x1084>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d138      	bne.n	8005cf0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <checkAktifCalisma+0x1068>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <checkAktifCalisma+0x1046>
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <checkAktifCalisma+0x106c>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d030      	beq.n	8005cf0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <checkAktifCalisma+0x1088>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02c      	beq.n	8005cf0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <checkAktifCalisma+0x10a4>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e02b      	b.n	8005cf6 <checkAktifCalisma+0x10ae>
 8005c9e:	bf00      	nop
 8005ca0:	40010800 	.word	0x40010800
 8005ca4:	20000201 	.word	0x20000201
 8005ca8:	40011000 	.word	0x40011000
 8005cac:	200001fa 	.word	0x200001fa
 8005cb0:	20000240 	.word	0x20000240
 8005cb4:	20000241 	.word	0x20000241
 8005cb8:	20000200 	.word	0x20000200
 8005cbc:	40010c00 	.word	0x40010c00
 8005cc0:	20000250 	.word	0x20000250
 8005cc4:	20000251 	.word	0x20000251
 8005cc8:	200001ff 	.word	0x200001ff
 8005ccc:	200001fc 	.word	0x200001fc
 8005cd0:	20000236 	.word	0x20000236
 8005cd4:	20000223 	.word	0x20000223
 8005cd8:	2000023d 	.word	0x2000023d
 8005cdc:	200001d0 	.word	0x200001d0
 8005ce0:	200001d4 	.word	0x200001d4
 8005ce4:	2000020f 	.word	0x2000020f
 8005ce8:	2000023e 	.word	0x2000023e
 8005cec:	2000023f 	.word	0x2000023f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005cf0:	4b8b      	ldr	r3, [pc, #556]	; (8005f20 <checkAktifCalisma+0x12d8>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005cf6:	4b8b      	ldr	r3, [pc, #556]	; (8005f24 <checkAktifCalisma+0x12dc>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <checkAktifCalisma+0x10c6>
 8005cfe:	4b8a      	ldr	r3, [pc, #552]	; (8005f28 <checkAktifCalisma+0x12e0>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <checkAktifCalisma+0x10c6>
 8005d06:	4b86      	ldr	r3, [pc, #536]	; (8005f20 <checkAktifCalisma+0x12d8>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005d0e:	2201      	movs	r2, #1
 8005d10:	2120      	movs	r1, #32
 8005d12:	4886      	ldr	r0, [pc, #536]	; (8005f2c <checkAktifCalisma+0x12e4>)
 8005d14:	f003 f9f7 	bl	8009106 <HAL_GPIO_WritePin>
 8005d18:	e004      	b.n	8005d24 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	4883      	ldr	r0, [pc, #524]	; (8005f2c <checkAktifCalisma+0x12e4>)
 8005d20:	f003 f9f1 	bl	8009106 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005d24:	4b82      	ldr	r3, [pc, #520]	; (8005f30 <checkAktifCalisma+0x12e8>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00e      	beq.n	8005d4a <checkAktifCalisma+0x1102>
 8005d2c:	2102      	movs	r1, #2
 8005d2e:	4881      	ldr	r0, [pc, #516]	; (8005f34 <checkAktifCalisma+0x12ec>)
 8005d30:	f003 f9d2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <checkAktifCalisma+0x1102>
 8005d3a:	4b7f      	ldr	r3, [pc, #508]	; (8005f38 <checkAktifCalisma+0x12f0>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <checkAktifCalisma+0x1102>
 8005d42:	4b7e      	ldr	r3, [pc, #504]	; (8005f3c <checkAktifCalisma+0x12f4>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d112      	bne.n	8005d70 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005d4a:	4b7d      	ldr	r3, [pc, #500]	; (8005f40 <checkAktifCalisma+0x12f8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d066      	beq.n	8005e20 <checkAktifCalisma+0x11d8>
 8005d52:	2104      	movs	r1, #4
 8005d54:	4877      	ldr	r0, [pc, #476]	; (8005f34 <checkAktifCalisma+0x12ec>)
 8005d56:	f003 f9bf 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d15f      	bne.n	8005e20 <checkAktifCalisma+0x11d8>
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <checkAktifCalisma+0x12f0>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d05b      	beq.n	8005e20 <checkAktifCalisma+0x11d8>
 8005d68:	4b74      	ldr	r3, [pc, #464]	; (8005f3c <checkAktifCalisma+0x12f4>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d057      	beq.n	8005e20 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005d70:	4b74      	ldr	r3, [pc, #464]	; (8005f44 <checkAktifCalisma+0x12fc>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	4b72      	ldr	r3, [pc, #456]	; (8005f44 <checkAktifCalisma+0x12fc>)
 8005d7a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d7c:	4b71      	ldr	r3, [pc, #452]	; (8005f44 <checkAktifCalisma+0x12fc>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d908      	bls.n	8005d96 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d84:	4b6f      	ldr	r3, [pc, #444]	; (8005f44 <checkAktifCalisma+0x12fc>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d8a:	4b6f      	ldr	r3, [pc, #444]	; (8005f48 <checkAktifCalisma+0x1300>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <checkAktifCalisma+0x1300>)
 8005d94:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d96:	4b6c      	ldr	r3, [pc, #432]	; (8005f48 <checkAktifCalisma+0x1300>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b09      	cmp	r3, #9
 8005d9c:	d908      	bls.n	8005db0 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005d9e:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <checkAktifCalisma+0x1300>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005da4:	4b69      	ldr	r3, [pc, #420]	; (8005f4c <checkAktifCalisma+0x1304>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b67      	ldr	r3, [pc, #412]	; (8005f4c <checkAktifCalisma+0x1304>)
 8005dae:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005db0:	4b66      	ldr	r3, [pc, #408]	; (8005f4c <checkAktifCalisma+0x1304>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b09      	cmp	r3, #9
 8005db6:	d908      	bls.n	8005dca <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005db8:	4b64      	ldr	r3, [pc, #400]	; (8005f4c <checkAktifCalisma+0x1304>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005dbe:	4b64      	ldr	r3, [pc, #400]	; (8005f50 <checkAktifCalisma+0x1308>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <checkAktifCalisma+0x1308>)
 8005dc8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <checkAktifCalisma+0x1308>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b09      	cmp	r3, #9
 8005dd0:	d908      	bls.n	8005de4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005dd2:	4b5f      	ldr	r3, [pc, #380]	; (8005f50 <checkAktifCalisma+0x1308>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005dd8:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <checkAktifCalisma+0x130c>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	4b5c      	ldr	r3, [pc, #368]	; (8005f54 <checkAktifCalisma+0x130c>)
 8005de2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005de4:	4b5b      	ldr	r3, [pc, #364]	; (8005f54 <checkAktifCalisma+0x130c>)
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	4b5b      	ldr	r3, [pc, #364]	; (8005f58 <checkAktifCalisma+0x1310>)
 8005dea:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005dee:	4b58      	ldr	r3, [pc, #352]	; (8005f50 <checkAktifCalisma+0x1308>)
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <checkAktifCalisma+0x1310>)
 8005df4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005df6:	4b55      	ldr	r3, [pc, #340]	; (8005f4c <checkAktifCalisma+0x1304>)
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	4b57      	ldr	r3, [pc, #348]	; (8005f58 <checkAktifCalisma+0x1310>)
 8005dfc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005dfe:	4b52      	ldr	r3, [pc, #328]	; (8005f48 <checkAktifCalisma+0x1300>)
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	4b55      	ldr	r3, [pc, #340]	; (8005f58 <checkAktifCalisma+0x1310>)
 8005e04:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005e06:	4b4f      	ldr	r3, [pc, #316]	; (8005f44 <checkAktifCalisma+0x12fc>)
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <checkAktifCalisma+0x1310>)
 8005e0c:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005e0e:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <checkAktifCalisma+0x1314>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005e14:	4b46      	ldr	r3, [pc, #280]	; (8005f30 <checkAktifCalisma+0x12e8>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005e1a:	4b49      	ldr	r3, [pc, #292]	; (8005f40 <checkAktifCalisma+0x12f8>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e24:	484e      	ldr	r0, [pc, #312]	; (8005f60 <checkAktifCalisma+0x1318>)
 8005e26:	f003 f957 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d016      	beq.n	8005e5e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e34:	484a      	ldr	r0, [pc, #296]	; (8005f60 <checkAktifCalisma+0x1318>)
 8005e36:	f003 f94f 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00e      	beq.n	8005e5e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e44:	4846      	ldr	r0, [pc, #280]	; (8005f60 <checkAktifCalisma+0x1318>)
 8005e46:	f003 f947 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e50:	2140      	movs	r1, #64	; 0x40
 8005e52:	4838      	ldr	r0, [pc, #224]	; (8005f34 <checkAktifCalisma+0x12ec>)
 8005e54:	f003 f940 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005e5e:	4b41      	ldr	r3, [pc, #260]	; (8005f64 <checkAktifCalisma+0x131c>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005e66:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <checkAktifCalisma+0x131c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005e6c:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <checkAktifCalisma+0x131c>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d016      	beq.n	8005ea2 <checkAktifCalisma+0x125a>
 8005e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e78:	4839      	ldr	r0, [pc, #228]	; (8005f60 <checkAktifCalisma+0x1318>)
 8005e7a:	f003 f92d 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d10e      	bne.n	8005ea2 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e84:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <checkAktifCalisma+0x1320>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	f7fa fd7a 	bl	8000984 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e90:	2001      	movs	r0, #1
 8005e92:	f7fa fd1d 	bl	80008d0 <hata2EEPROM>
			convertAndSendData();
 8005e96:	f001 fbdd 	bl	8007654 <convertAndSendData>
			acilstophatasi=1;
 8005e9a:	4b34      	ldr	r3, [pc, #208]	; (8005f6c <checkAktifCalisma+0x1324>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e018      	b.n	8005ed4 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005ea2:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <checkAktifCalisma+0x1324>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d014      	beq.n	8005ed4 <checkAktifCalisma+0x128c>
 8005eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005eae:	482c      	ldr	r0, [pc, #176]	; (8005f60 <checkAktifCalisma+0x1318>)
 8005eb0:	f003 f912 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10c      	bne.n	8005ed4 <checkAktifCalisma+0x128c>
 8005eba:	4b2a      	ldr	r3, [pc, #168]	; (8005f64 <checkAktifCalisma+0x131c>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f083 0301 	eor.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005ec8:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <checkAktifCalisma+0x1324>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005ece:	2001      	movs	r0, #1
 8005ed0:	f7fe fce8 	bl	80048a4 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005ed4:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <checkAktifCalisma+0x1328>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	f083 0301 	eor.w	r3, r3, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d04e      	beq.n	8005f80 <checkAktifCalisma+0x1338>
 8005ee2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ee6:	481e      	ldr	r0, [pc, #120]	; (8005f60 <checkAktifCalisma+0x1318>)
 8005ee8:	f003 f8f6 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <checkAktifCalisma+0x12b2>
 8005ef2:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <checkAktifCalisma+0x132c>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d042      	beq.n	8005f80 <checkAktifCalisma+0x1338>
 8005efa:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <checkAktifCalisma+0x1330>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d13e      	bne.n	8005f80 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <checkAktifCalisma+0x1320>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005f08:	2002      	movs	r0, #2
 8005f0a:	f7fa fd3b 	bl	8000984 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005f0e:	2002      	movs	r0, #2
 8005f10:	f7fa fcde 	bl	80008d0 <hata2EEPROM>
			convertAndSendData();
 8005f14:	f001 fb9e 	bl	8007654 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <checkAktifCalisma+0x1334>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e047      	b.n	8005fb0 <checkAktifCalisma+0x1368>
 8005f20:	2000023f 	.word	0x2000023f
 8005f24:	2000023e 	.word	0x2000023e
 8005f28:	2000023d 	.word	0x2000023d
 8005f2c:	40010800 	.word	0x40010800
 8005f30:	20000233 	.word	0x20000233
 8005f34:	40011000 	.word	0x40011000
 8005f38:	200001fa 	.word	0x200001fa
 8005f3c:	20000236 	.word	0x20000236
 8005f40:	20000234 	.word	0x20000234
 8005f44:	200001f1 	.word	0x200001f1
 8005f48:	200001f2 	.word	0x200001f2
 8005f4c:	20000000 	.word	0x20000000
 8005f50:	20000001 	.word	0x20000001
 8005f54:	200001f3 	.word	0x200001f3
 8005f58:	20000120 	.word	0x20000120
 8005f5c:	20000220 	.word	0x20000220
 8005f60:	40010c00 	.word	0x40010c00
 8005f64:	20000242 	.word	0x20000242
 8005f68:	20000249 	.word	0x20000249
 8005f6c:	20000244 	.word	0x20000244
 8005f70:	2000024b 	.word	0x2000024b
 8005f74:	20000255 	.word	0x20000255
 8005f78:	200001f8 	.word	0x200001f8
 8005f7c:	20000245 	.word	0x20000245
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f80:	4b9b      	ldr	r3, [pc, #620]	; (80061f0 <checkAktifCalisma+0x15a8>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <checkAktifCalisma+0x1368>
 8005f88:	4b9a      	ldr	r3, [pc, #616]	; (80061f4 <checkAktifCalisma+0x15ac>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00f      	beq.n	8005fb0 <checkAktifCalisma+0x1368>
 8005f90:	4b99      	ldr	r3, [pc, #612]	; (80061f8 <checkAktifCalisma+0x15b0>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f083 0301 	eor.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005f9e:	4b94      	ldr	r3, [pc, #592]	; (80061f0 <checkAktifCalisma+0x15a8>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005fa4:	4b95      	ldr	r3, [pc, #596]	; (80061fc <checkAktifCalisma+0x15b4>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005faa:	2002      	movs	r0, #2
 8005fac:	f7fe fc7a 	bl	80048a4 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005fb0:	4b93      	ldr	r3, [pc, #588]	; (8006200 <checkAktifCalisma+0x15b8>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11e      	bne.n	8005ff6 <checkAktifCalisma+0x13ae>
 8005fb8:	4b92      	ldr	r3, [pc, #584]	; (8006204 <checkAktifCalisma+0x15bc>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d11a      	bne.n	8005ff6 <checkAktifCalisma+0x13ae>
 8005fc0:	4b91      	ldr	r3, [pc, #580]	; (8006208 <checkAktifCalisma+0x15c0>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d016      	beq.n	8005ff6 <checkAktifCalisma+0x13ae>
 8005fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fcc:	488f      	ldr	r0, [pc, #572]	; (800620c <checkAktifCalisma+0x15c4>)
 8005fce:	f003 f883 	bl	80090d8 <HAL_GPIO_ReadPin>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10e      	bne.n	8005ff6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005fd8:	4b8d      	ldr	r3, [pc, #564]	; (8006210 <checkAktifCalisma+0x15c8>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005fde:	2003      	movs	r0, #3
 8005fe0:	f7fa fcd0 	bl	8000984 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005fe4:	2003      	movs	r0, #3
 8005fe6:	f7fa fc73 	bl	80008d0 <hata2EEPROM>
			convertAndSendData();
 8005fea:	f001 fb33 	bl	8007654 <convertAndSendData>
			basinchatasi=1;
 8005fee:	4b89      	ldr	r3, [pc, #548]	; (8006214 <checkAktifCalisma+0x15cc>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	e015      	b.n	8006022 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005ff6:	4b87      	ldr	r3, [pc, #540]	; (8006214 <checkAktifCalisma+0x15cc>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d011      	beq.n	8006022 <checkAktifCalisma+0x13da>
 8005ffe:	4b80      	ldr	r3, [pc, #512]	; (8006200 <checkAktifCalisma+0x15b8>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10d      	bne.n	8006022 <checkAktifCalisma+0x13da>
 8006006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800600a:	4883      	ldr	r0, [pc, #524]	; (8006218 <checkAktifCalisma+0x15d0>)
 800600c:	f003 f864 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006010:	4603      	mov	r3, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006016:	4b7f      	ldr	r3, [pc, #508]	; (8006214 <checkAktifCalisma+0x15cc>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800601c:	2003      	movs	r0, #3
 800601e:	f7fe fc41 	bl	80048a4 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006022:	4b7e      	ldr	r3, [pc, #504]	; (800621c <checkAktifCalisma+0x15d4>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d103      	bne.n	8006032 <checkAktifCalisma+0x13ea>
 800602a:	4b7d      	ldr	r3, [pc, #500]	; (8006220 <checkAktifCalisma+0x15d8>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01e      	beq.n	8006070 <checkAktifCalisma+0x1428>
 8006032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006036:	487b      	ldr	r0, [pc, #492]	; (8006224 <checkAktifCalisma+0x15dc>)
 8006038:	f003 f84e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800603c:	4603      	mov	r3, r0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d116      	bne.n	8006070 <checkAktifCalisma+0x1428>
 8006042:	4b79      	ldr	r3, [pc, #484]	; (8006228 <checkAktifCalisma+0x15e0>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d003      	beq.n	8006052 <checkAktifCalisma+0x140a>
 800604a:	4b77      	ldr	r3, [pc, #476]	; (8006228 <checkAktifCalisma+0x15e0>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d10e      	bne.n	8006070 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006052:	4b6f      	ldr	r3, [pc, #444]	; (8006210 <checkAktifCalisma+0x15c8>)
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006058:	2004      	movs	r0, #4
 800605a:	f7fa fc93 	bl	8000984 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800605e:	2004      	movs	r0, #4
 8006060:	f7fa fc36 	bl	80008d0 <hata2EEPROM>
			convertAndSendData();
 8006064:	f001 faf6 	bl	8007654 <convertAndSendData>
			katkapisivicihatasi=1;
 8006068:	4b70      	ldr	r3, [pc, #448]	; (800622c <checkAktifCalisma+0x15e4>)
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e01f      	b.n	80060b0 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006070:	4b6e      	ldr	r3, [pc, #440]	; (800622c <checkAktifCalisma+0x15e4>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <checkAktifCalisma+0x1468>
 8006078:	4b6d      	ldr	r3, [pc, #436]	; (8006230 <checkAktifCalisma+0x15e8>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d017      	beq.n	80060b0 <checkAktifCalisma+0x1468>
 8006080:	4b66      	ldr	r3, [pc, #408]	; (800621c <checkAktifCalisma+0x15d4>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f083 0301 	eor.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d010      	beq.n	80060b0 <checkAktifCalisma+0x1468>
 800608e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006092:	4864      	ldr	r0, [pc, #400]	; (8006224 <checkAktifCalisma+0x15dc>)
 8006094:	f003 f820 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d108      	bne.n	80060b0 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800609e:	4b63      	ldr	r3, [pc, #396]	; (800622c <checkAktifCalisma+0x15e4>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80060a4:	4b5e      	ldr	r3, [pc, #376]	; (8006220 <checkAktifCalisma+0x15d8>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80060aa:	2004      	movs	r0, #4
 80060ac:	f7fe fbfa 	bl	80048a4 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80060b0:	4b5a      	ldr	r3, [pc, #360]	; (800621c <checkAktifCalisma+0x15d4>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <checkAktifCalisma+0x1478>
 80060b8:	4b5e      	ldr	r3, [pc, #376]	; (8006234 <checkAktifCalisma+0x15ec>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <checkAktifCalisma+0x14b6>
 80060c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060c4:	4857      	ldr	r0, [pc, #348]	; (8006224 <checkAktifCalisma+0x15dc>)
 80060c6:	f003 f807 	bl	80090d8 <HAL_GPIO_ReadPin>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d116      	bne.n	80060fe <checkAktifCalisma+0x14b6>
 80060d0:	4b55      	ldr	r3, [pc, #340]	; (8006228 <checkAktifCalisma+0x15e0>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d003      	beq.n	80060e0 <checkAktifCalisma+0x1498>
 80060d8:	4b53      	ldr	r3, [pc, #332]	; (8006228 <checkAktifCalisma+0x15e0>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d10e      	bne.n	80060fe <checkAktifCalisma+0x14b6>
			hataVar=1;
 80060e0:	4b4b      	ldr	r3, [pc, #300]	; (8006210 <checkAktifCalisma+0x15c8>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80060e6:	2005      	movs	r0, #5
 80060e8:	f7fa fc4c 	bl	8000984 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80060ec:	2005      	movs	r0, #5
 80060ee:	f7fa fbef 	bl	80008d0 <hata2EEPROM>
			convertAndSendData();
 80060f2:	f001 faaf 	bl	8007654 <convertAndSendData>
			tablakapisivicihatasi=1;
 80060f6:	4b50      	ldr	r3, [pc, #320]	; (8006238 <checkAktifCalisma+0x15f0>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e023      	b.n	8006146 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80060fe:	4b4e      	ldr	r3, [pc, #312]	; (8006238 <checkAktifCalisma+0x15f0>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01f      	beq.n	8006146 <checkAktifCalisma+0x14fe>
 8006106:	4b4a      	ldr	r3, [pc, #296]	; (8006230 <checkAktifCalisma+0x15e8>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01b      	beq.n	8006146 <checkAktifCalisma+0x14fe>
 800610e:	4b43      	ldr	r3, [pc, #268]	; (800621c <checkAktifCalisma+0x15d4>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	f083 0301 	eor.w	r3, r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d014      	beq.n	8006146 <checkAktifCalisma+0x14fe>
 800611c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006120:	4840      	ldr	r0, [pc, #256]	; (8006224 <checkAktifCalisma+0x15dc>)
 8006122:	f002 ffd9 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10c      	bne.n	8006146 <checkAktifCalisma+0x14fe>
 800612c:	4b40      	ldr	r3, [pc, #256]	; (8006230 <checkAktifCalisma+0x15e8>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006134:	4b40      	ldr	r3, [pc, #256]	; (8006238 <checkAktifCalisma+0x15f0>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800613a:	4b3e      	ldr	r3, [pc, #248]	; (8006234 <checkAktifCalisma+0x15ec>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006140:	2005      	movs	r0, #5
 8006142:	f7fe fbaf 	bl	80048a4 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006146:	4b30      	ldr	r3, [pc, #192]	; (8006208 <checkAktifCalisma+0x15c0>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <checkAktifCalisma+0x1516>
 800614e:	4b2a      	ldr	r3, [pc, #168]	; (80061f8 <checkAktifCalisma+0x15b0>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <checkAktifCalisma+0x1516>
 8006156:	4b39      	ldr	r3, [pc, #228]	; (800623c <checkAktifCalisma+0x15f4>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800615e:	4b38      	ldr	r3, [pc, #224]	; (8006240 <checkAktifCalisma+0x15f8>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b38      	ldr	r3, [pc, #224]	; (8006244 <checkAktifCalisma+0x15fc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	4a37      	ldr	r2, [pc, #220]	; (8006248 <checkAktifCalisma+0x1600>)
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	4293      	cmp	r3, r2
 800616e:	d30d      	bcc.n	800618c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006170:	4b27      	ldr	r3, [pc, #156]	; (8006210 <checkAktifCalisma+0x15c8>)
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006176:	2006      	movs	r0, #6
 8006178:	f7fa fc04 	bl	8000984 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800617c:	2006      	movs	r0, #6
 800617e:	f7fa fba7 	bl	80008d0 <hata2EEPROM>
			  	convertAndSendData();
 8006182:	f001 fa67 	bl	8007654 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006186:	4b31      	ldr	r3, [pc, #196]	; (800624c <checkAktifCalisma+0x1604>)
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800618c:	4b2f      	ldr	r3, [pc, #188]	; (800624c <checkAktifCalisma+0x1604>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <checkAktifCalisma+0x1574>
 8006194:	2108      	movs	r1, #8
 8006196:	4823      	ldr	r0, [pc, #140]	; (8006224 <checkAktifCalisma+0x15dc>)
 8006198:	f002 ff9e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <checkAktifCalisma+0x1574>
 80061a2:	4b1e      	ldr	r3, [pc, #120]	; (800621c <checkAktifCalisma+0x15d4>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f083 0301 	eor.w	r3, r3, #1
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80061b0:	4b26      	ldr	r3, [pc, #152]	; (800624c <checkAktifCalisma+0x1604>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80061b6:	2006      	movs	r0, #6
 80061b8:	f7fe fb74 	bl	80048a4 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80061bc:	4b24      	ldr	r3, [pc, #144]	; (8006250 <checkAktifCalisma+0x1608>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10b      	bne.n	80061dc <checkAktifCalisma+0x1594>
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <checkAktifCalisma+0x15b0>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <checkAktifCalisma+0x1594>
 80061cc:	4b21      	ldr	r3, [pc, #132]	; (8006254 <checkAktifCalisma+0x160c>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <checkAktifCalisma+0x1594>
 80061d4:	4b19      	ldr	r3, [pc, #100]	; (800623c <checkAktifCalisma+0x15f4>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d03f      	beq.n	800625c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80061dc:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <checkAktifCalisma+0x1610>)
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <checkAktifCalisma+0x15d8>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80061e8:	4b12      	ldr	r3, [pc, #72]	; (8006234 <checkAktifCalisma+0x15ec>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e03c      	b.n	800626a <checkAktifCalisma+0x1622>
 80061f0:	20000245 	.word	0x20000245
 80061f4:	2000024b 	.word	0x2000024b
 80061f8:	2000022c 	.word	0x2000022c
 80061fc:	20000255 	.word	0x20000255
 8006200:	200001f7 	.word	0x200001f7
 8006204:	200001fb 	.word	0x200001fb
 8006208:	20000248 	.word	0x20000248
 800620c:	40011000 	.word	0x40011000
 8006210:	20000249 	.word	0x20000249
 8006214:	20000252 	.word	0x20000252
 8006218:	40010c00 	.word	0x40010c00
 800621c:	20000242 	.word	0x20000242
 8006220:	20000256 	.word	0x20000256
 8006224:	40010800 	.word	0x40010800
 8006228:	200001fc 	.word	0x200001fc
 800622c:	20000253 	.word	0x20000253
 8006230:	20000236 	.word	0x20000236
 8006234:	20000257 	.word	0x20000257
 8006238:	20000254 	.word	0x20000254
 800623c:	2000022b 	.word	0x2000022b
 8006240:	200001d0 	.word	0x200001d0
 8006244:	200001e4 	.word	0x200001e4
 8006248:	2000020c 	.word	0x2000020c
 800624c:	20000243 	.word	0x20000243
 8006250:	20000229 	.word	0x20000229
 8006254:	2000022a 	.word	0x2000022a
 8006258:	2000024a 	.word	0x2000024a
		} else {
			makineCalisiyor=1;
 800625c:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <checkAktifCalisma+0x1690>)
 800625e:	2201      	movs	r2, #1
 8006260:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006262:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <checkAktifCalisma+0x1694>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <checkAktifCalisma+0x1698>)
 8006268:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800626a:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <checkAktifCalisma+0x169c>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d02f      	beq.n	80062d2 <checkAktifCalisma+0x168a>
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <checkAktifCalisma+0x16a0>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f083 0301 	eor.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d028      	beq.n	80062d2 <checkAktifCalisma+0x168a>
 8006280:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <checkAktifCalisma+0x16a4>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f083 0301 	eor.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d021      	beq.n	80062d2 <checkAktifCalisma+0x168a>
 800628e:	4b18      	ldr	r3, [pc, #96]	; (80062f0 <checkAktifCalisma+0x16a8>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f083 0301 	eor.w	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800629c:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <checkAktifCalisma+0x16ac>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f083 0301 	eor.w	r3, r3, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d013      	beq.n	80062d2 <checkAktifCalisma+0x168a>
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <checkAktifCalisma+0x16b0>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f083 0301 	eor.w	r3, r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <checkAktifCalisma+0x168a>
 80062b8:	4b10      	ldr	r3, [pc, #64]	; (80062fc <checkAktifCalisma+0x16b4>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f083 0301 	eor.w	r3, r3, #1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <checkAktifCalisma+0x168a>
			hataVar=0;
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <checkAktifCalisma+0x169c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80062cc:	2007      	movs	r0, #7
 80062ce:	f7fe fae9 	bl	80048a4 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000024a 	.word	0x2000024a
 80062dc:	200001d0 	.word	0x200001d0
 80062e0:	200001e4 	.word	0x200001e4
 80062e4:	20000249 	.word	0x20000249
 80062e8:	20000244 	.word	0x20000244
 80062ec:	20000245 	.word	0x20000245
 80062f0:	20000252 	.word	0x20000252
 80062f4:	20000253 	.word	0x20000253
 80062f8:	20000254 	.word	0x20000254
 80062fc:	20000243 	.word	0x20000243

08006300 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006304:	4b8b      	ldr	r3, [pc, #556]	; (8006534 <checkDemoModCalisma+0x234>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b01      	cmp	r3, #1
 800630a:	f040 8229 	bne.w	8006760 <checkDemoModCalisma+0x460>
 800630e:	4b8a      	ldr	r3, [pc, #552]	; (8006538 <checkDemoModCalisma+0x238>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8224 	beq.w	8006760 <checkDemoModCalisma+0x460>
 8006318:	4b88      	ldr	r3, [pc, #544]	; (800653c <checkDemoModCalisma+0x23c>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 821f 	bne.w	8006760 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006322:	2102      	movs	r1, #2
 8006324:	4886      	ldr	r0, [pc, #536]	; (8006540 <checkDemoModCalisma+0x240>)
 8006326:	f002 fed7 	bl	80090d8 <HAL_GPIO_ReadPin>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11d      	bne.n	800636c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006330:	4b84      	ldr	r3, [pc, #528]	; (8006544 <checkDemoModCalisma+0x244>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f083 0301 	eor.w	r3, r3, #1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d016      	beq.n	800636c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800633e:	4b82      	ldr	r3, [pc, #520]	; (8006548 <checkDemoModCalisma+0x248>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f083 0301 	eor.w	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00f      	beq.n	800636c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 800634c:	4b7f      	ldr	r3, [pc, #508]	; (800654c <checkDemoModCalisma+0x24c>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800635a:	2201      	movs	r2, #1
 800635c:	2104      	movs	r1, #4
 800635e:	487c      	ldr	r0, [pc, #496]	; (8006550 <checkDemoModCalisma+0x250>)
 8006360:	f002 fed1 	bl	8009106 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006364:	4b7b      	ldr	r3, [pc, #492]	; (8006554 <checkDemoModCalisma+0x254>)
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e00e      	b.n	800638a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800636c:	2102      	movs	r1, #2
 800636e:	4874      	ldr	r0, [pc, #464]	; (8006540 <checkDemoModCalisma+0x240>)
 8006370:	f002 feb2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006374:	4603      	mov	r3, r0
 8006376:	2b01      	cmp	r3, #1
 8006378:	d107      	bne.n	800638a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800637a:	2200      	movs	r2, #0
 800637c:	2104      	movs	r1, #4
 800637e:	4874      	ldr	r0, [pc, #464]	; (8006550 <checkDemoModCalisma+0x250>)
 8006380:	f002 fec1 	bl	8009106 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006384:	4b73      	ldr	r3, [pc, #460]	; (8006554 <checkDemoModCalisma+0x254>)
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800638a:	4b72      	ldr	r3, [pc, #456]	; (8006554 <checkDemoModCalisma+0x254>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <checkDemoModCalisma+0xaa>
 8006392:	4b6d      	ldr	r3, [pc, #436]	; (8006548 <checkDemoModCalisma+0x248>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d107      	bne.n	80063aa <checkDemoModCalisma+0xaa>
 800639a:	4b6c      	ldr	r3, [pc, #432]	; (800654c <checkDemoModCalisma+0x24c>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <checkDemoModCalisma+0xaa>
 80063a2:	4b68      	ldr	r3, [pc, #416]	; (8006544 <checkDemoModCalisma+0x244>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80063aa:	2201      	movs	r2, #1
 80063ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063b0:	4867      	ldr	r0, [pc, #412]	; (8006550 <checkDemoModCalisma+0x250>)
 80063b2:	f002 fea8 	bl	8009106 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80063b6:	2201      	movs	r2, #1
 80063b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063bc:	4864      	ldr	r0, [pc, #400]	; (8006550 <checkDemoModCalisma+0x250>)
 80063be:	f002 fea2 	bl	8009106 <HAL_GPIO_WritePin>
 80063c2:	e00b      	b.n	80063dc <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063ca:	4861      	ldr	r0, [pc, #388]	; (8006550 <checkDemoModCalisma+0x250>)
 80063cc:	f002 fe9b 	bl	8009106 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80063d0:	2200      	movs	r2, #0
 80063d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063d6:	485e      	ldr	r0, [pc, #376]	; (8006550 <checkDemoModCalisma+0x250>)
 80063d8:	f002 fe95 	bl	8009106 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063dc:	2102      	movs	r1, #2
 80063de:	4858      	ldr	r0, [pc, #352]	; (8006540 <checkDemoModCalisma+0x240>)
 80063e0:	f002 fe7a 	bl	80090d8 <HAL_GPIO_ReadPin>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d10d      	bne.n	8006406 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063ee:	4854      	ldr	r0, [pc, #336]	; (8006540 <checkDemoModCalisma+0x240>)
 80063f0:	f002 fe72 	bl	80090d8 <HAL_GPIO_ReadPin>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d105      	bne.n	8006406 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <checkDemoModCalisma+0x254>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f083 0301 	eor.w	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006406:	2102      	movs	r1, #2
 8006408:	484d      	ldr	r0, [pc, #308]	; (8006540 <checkDemoModCalisma+0x240>)
 800640a:	f002 fe65 	bl	80090d8 <HAL_GPIO_ReadPin>
 800640e:	4603      	mov	r3, r0
 8006410:	2b01      	cmp	r3, #1
 8006412:	d125      	bne.n	8006460 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006418:	4849      	ldr	r0, [pc, #292]	; (8006540 <checkDemoModCalisma+0x240>)
 800641a:	f002 fe5d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11d      	bne.n	8006460 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006424:	4b4b      	ldr	r3, [pc, #300]	; (8006554 <checkDemoModCalisma+0x254>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f083 0301 	eor.w	r3, r3, #1
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d016      	beq.n	8006460 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006432:	4b44      	ldr	r3, [pc, #272]	; (8006544 <checkDemoModCalisma+0x244>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f083 0301 	eor.w	r3, r3, #1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006440:	4b42      	ldr	r3, [pc, #264]	; (800654c <checkDemoModCalisma+0x24c>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f083 0301 	eor.w	r3, r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800644e:	2201      	movs	r2, #1
 8006450:	2120      	movs	r1, #32
 8006452:	483b      	ldr	r0, [pc, #236]	; (8006540 <checkDemoModCalisma+0x240>)
 8006454:	f002 fe57 	bl	8009106 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <checkDemoModCalisma+0x248>)
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	e007      	b.n	8006470 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006460:	2200      	movs	r2, #0
 8006462:	2120      	movs	r1, #32
 8006464:	4836      	ldr	r0, [pc, #216]	; (8006540 <checkDemoModCalisma+0x240>)
 8006466:	f002 fe4e 	bl	8009106 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <checkDemoModCalisma+0x248>)
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006470:	2102      	movs	r1, #2
 8006472:	4833      	ldr	r0, [pc, #204]	; (8006540 <checkDemoModCalisma+0x240>)
 8006474:	f002 fe30 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006478:	4603      	mov	r3, r0
 800647a:	2b01      	cmp	r3, #1
 800647c:	d125      	bne.n	80064ca <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800647e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006482:	482f      	ldr	r0, [pc, #188]	; (8006540 <checkDemoModCalisma+0x240>)
 8006484:	f002 fe28 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11d      	bne.n	80064ca <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <checkDemoModCalisma+0x254>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f083 0301 	eor.w	r3, r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800649c:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <checkDemoModCalisma+0x248>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f083 0301 	eor.w	r3, r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00f      	beq.n	80064ca <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80064aa:	4b26      	ldr	r3, [pc, #152]	; (8006544 <checkDemoModCalisma+0x244>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f083 0301 	eor.w	r3, r3, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80064b8:	2201      	movs	r2, #1
 80064ba:	2110      	movs	r1, #16
 80064bc:	4820      	ldr	r0, [pc, #128]	; (8006540 <checkDemoModCalisma+0x240>)
 80064be:	f002 fe22 	bl	8009106 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <checkDemoModCalisma+0x24c>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e007      	b.n	80064da <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80064ca:	2200      	movs	r2, #0
 80064cc:	2110      	movs	r1, #16
 80064ce:	481c      	ldr	r0, [pc, #112]	; (8006540 <checkDemoModCalisma+0x240>)
 80064d0:	f002 fe19 	bl	8009106 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <checkDemoModCalisma+0x24c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80064da:	2104      	movs	r1, #4
 80064dc:	4818      	ldr	r0, [pc, #96]	; (8006540 <checkDemoModCalisma+0x240>)
 80064de:	f002 fdfb 	bl	80090d8 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d139      	bne.n	800655c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <checkDemoModCalisma+0x254>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f083 0301 	eor.w	r3, r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d032      	beq.n	800655c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <checkDemoModCalisma+0x24c>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02b      	beq.n	800655c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <checkDemoModCalisma+0x248>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	f083 0301 	eor.w	r3, r3, #1
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d024      	beq.n	800655c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006512:	2201      	movs	r2, #1
 8006514:	2102      	movs	r1, #2
 8006516:	480e      	ldr	r0, [pc, #56]	; (8006550 <checkDemoModCalisma+0x250>)
 8006518:	f002 fdf5 	bl	8009106 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800651c:	2201      	movs	r2, #1
 800651e:	2101      	movs	r1, #1
 8006520:	480b      	ldr	r0, [pc, #44]	; (8006550 <checkDemoModCalisma+0x250>)
 8006522:	f002 fdf0 	bl	8009106 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <checkDemoModCalisma+0x244>)
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <checkDemoModCalisma+0x258>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e027      	b.n	8006584 <checkDemoModCalisma+0x284>
 8006534:	20000212 	.word	0x20000212
 8006538:	20000246 	.word	0x20000246
 800653c:	20000211 	.word	0x20000211
 8006540:	40011000 	.word	0x40011000
 8006544:	2000024d 	.word	0x2000024d
 8006548:	2000024e 	.word	0x2000024e
 800654c:	2000024f 	.word	0x2000024f
 8006550:	40010c00 	.word	0x40010c00
 8006554:	2000024c 	.word	0x2000024c
 8006558:	20000232 	.word	0x20000232
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800655c:	2104      	movs	r1, #4
 800655e:	48a0      	ldr	r0, [pc, #640]	; (80067e0 <checkDemoModCalisma+0x4e0>)
 8006560:	f002 fdba 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d10c      	bne.n	8006584 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800656a:	2200      	movs	r2, #0
 800656c:	2102      	movs	r1, #2
 800656e:	489d      	ldr	r0, [pc, #628]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 8006570:	f002 fdc9 	bl	8009106 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006574:	2200      	movs	r2, #0
 8006576:	2101      	movs	r1, #1
 8006578:	489a      	ldr	r0, [pc, #616]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 800657a:	f002 fdc4 	bl	8009106 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800657e:	4b9a      	ldr	r3, [pc, #616]	; (80067e8 <checkDemoModCalisma+0x4e8>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006584:	2104      	movs	r1, #4
 8006586:	4896      	ldr	r0, [pc, #600]	; (80067e0 <checkDemoModCalisma+0x4e0>)
 8006588:	f002 fda6 	bl	80090d8 <HAL_GPIO_ReadPin>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10d      	bne.n	80065ae <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006592:	2201      	movs	r2, #1
 8006594:	2180      	movs	r1, #128	; 0x80
 8006596:	4895      	ldr	r0, [pc, #596]	; (80067ec <checkDemoModCalisma+0x4ec>)
 8006598:	f002 fdb5 	bl	8009106 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800659c:	2201      	movs	r2, #1
 800659e:	2120      	movs	r1, #32
 80065a0:	4892      	ldr	r0, [pc, #584]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80065a2:	f002 fdb0 	bl	8009106 <HAL_GPIO_WritePin>
			timer3 = millis;
 80065a6:	4b92      	ldr	r3, [pc, #584]	; (80067f0 <checkDemoModCalisma+0x4f0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a92      	ldr	r2, [pc, #584]	; (80067f4 <checkDemoModCalisma+0x4f4>)
 80065ac:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065ae:	4b90      	ldr	r3, [pc, #576]	; (80067f0 <checkDemoModCalisma+0x4f0>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b90      	ldr	r3, [pc, #576]	; (80067f4 <checkDemoModCalisma+0x4f4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d909      	bls.n	80065d0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80065bc:	2200      	movs	r2, #0
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	488a      	ldr	r0, [pc, #552]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80065c2:	f002 fda0 	bl	8009106 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80065c6:	2200      	movs	r2, #0
 80065c8:	2120      	movs	r1, #32
 80065ca:	4888      	ldr	r0, [pc, #544]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80065cc:	f002 fd9b 	bl	8009106 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80065d0:	2102      	movs	r1, #2
 80065d2:	4883      	ldr	r0, [pc, #524]	; (80067e0 <checkDemoModCalisma+0x4e0>)
 80065d4:	f002 fd80 	bl	80090d8 <HAL_GPIO_ReadPin>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d108      	bne.n	80065f0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80065de:	2201      	movs	r2, #1
 80065e0:	2140      	movs	r1, #64	; 0x40
 80065e2:	4882      	ldr	r0, [pc, #520]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80065e4:	f002 fd8f 	bl	8009106 <HAL_GPIO_WritePin>
			timer3 = millis;
 80065e8:	4b81      	ldr	r3, [pc, #516]	; (80067f0 <checkDemoModCalisma+0x4f0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a81      	ldr	r2, [pc, #516]	; (80067f4 <checkDemoModCalisma+0x4f4>)
 80065ee:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065f0:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <checkDemoModCalisma+0x4f0>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <checkDemoModCalisma+0x4f4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d904      	bls.n	8006608 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80065fe:	2200      	movs	r2, #0
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	487a      	ldr	r0, [pc, #488]	; (80067ec <checkDemoModCalisma+0x4ec>)
 8006604:	f002 fd7f 	bl	8009106 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006608:	4b7b      	ldr	r3, [pc, #492]	; (80067f8 <checkDemoModCalisma+0x4f8>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d058      	beq.n	80066c2 <checkDemoModCalisma+0x3c2>
 8006610:	4b7a      	ldr	r3, [pc, #488]	; (80067fc <checkDemoModCalisma+0x4fc>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d054      	beq.n	80066c2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006618:	4b79      	ldr	r3, [pc, #484]	; (8006800 <checkDemoModCalisma+0x500>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	4b77      	ldr	r3, [pc, #476]	; (8006800 <checkDemoModCalisma+0x500>)
 8006622:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006624:	4b76      	ldr	r3, [pc, #472]	; (8006800 <checkDemoModCalisma+0x500>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b09      	cmp	r3, #9
 800662a:	d908      	bls.n	800663e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800662c:	4b74      	ldr	r3, [pc, #464]	; (8006800 <checkDemoModCalisma+0x500>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006632:	4b74      	ldr	r3, [pc, #464]	; (8006804 <checkDemoModCalisma+0x504>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4b72      	ldr	r3, [pc, #456]	; (8006804 <checkDemoModCalisma+0x504>)
 800663c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800663e:	4b71      	ldr	r3, [pc, #452]	; (8006804 <checkDemoModCalisma+0x504>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b09      	cmp	r3, #9
 8006644:	d908      	bls.n	8006658 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006646:	4b6f      	ldr	r3, [pc, #444]	; (8006804 <checkDemoModCalisma+0x504>)
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 800664c:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <checkDemoModCalisma+0x508>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <checkDemoModCalisma+0x508>)
 8006656:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006658:	4b6b      	ldr	r3, [pc, #428]	; (8006808 <checkDemoModCalisma+0x508>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b09      	cmp	r3, #9
 800665e:	d908      	bls.n	8006672 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006660:	4b69      	ldr	r3, [pc, #420]	; (8006808 <checkDemoModCalisma+0x508>)
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006666:	4b69      	ldr	r3, [pc, #420]	; (800680c <checkDemoModCalisma+0x50c>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4b67      	ldr	r3, [pc, #412]	; (800680c <checkDemoModCalisma+0x50c>)
 8006670:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006672:	4b66      	ldr	r3, [pc, #408]	; (800680c <checkDemoModCalisma+0x50c>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b09      	cmp	r3, #9
 8006678:	d908      	bls.n	800668c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800667a:	4b64      	ldr	r3, [pc, #400]	; (800680c <checkDemoModCalisma+0x50c>)
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006680:	4b63      	ldr	r3, [pc, #396]	; (8006810 <checkDemoModCalisma+0x510>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	4b61      	ldr	r3, [pc, #388]	; (8006810 <checkDemoModCalisma+0x510>)
 800668a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800668c:	4b60      	ldr	r3, [pc, #384]	; (8006810 <checkDemoModCalisma+0x510>)
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	4b60      	ldr	r3, [pc, #384]	; (8006814 <checkDemoModCalisma+0x514>)
 8006692:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006696:	4b5d      	ldr	r3, [pc, #372]	; (800680c <checkDemoModCalisma+0x50c>)
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	4b5e      	ldr	r3, [pc, #376]	; (8006814 <checkDemoModCalisma+0x514>)
 800669c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800669e:	4b5a      	ldr	r3, [pc, #360]	; (8006808 <checkDemoModCalisma+0x508>)
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	4b5c      	ldr	r3, [pc, #368]	; (8006814 <checkDemoModCalisma+0x514>)
 80066a4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80066a6:	4b57      	ldr	r3, [pc, #348]	; (8006804 <checkDemoModCalisma+0x504>)
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	4b5a      	ldr	r3, [pc, #360]	; (8006814 <checkDemoModCalisma+0x514>)
 80066ac:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80066ae:	4b54      	ldr	r3, [pc, #336]	; (8006800 <checkDemoModCalisma+0x500>)
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	4b58      	ldr	r3, [pc, #352]	; (8006814 <checkDemoModCalisma+0x514>)
 80066b4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80066b6:	4b58      	ldr	r3, [pc, #352]	; (8006818 <checkDemoModCalisma+0x518>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80066bc:	4b4f      	ldr	r3, [pc, #316]	; (80067fc <checkDemoModCalisma+0x4fc>)
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80066c2:	4b56      	ldr	r3, [pc, #344]	; (800681c <checkDemoModCalisma+0x51c>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 8087 	bne.w	80067da <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80066cc:	4a54      	ldr	r2, [pc, #336]	; (8006820 <checkDemoModCalisma+0x520>)
 80066ce:	2101      	movs	r1, #1
 80066d0:	2002      	movs	r0, #2
 80066d2:	f001 f9db 	bl	8007a8c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80066d6:	4a53      	ldr	r2, [pc, #332]	; (8006824 <checkDemoModCalisma+0x524>)
 80066d8:	2101      	movs	r1, #1
 80066da:	2001      	movs	r0, #1
 80066dc:	f001 f9d6 	bl	8007a8c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <checkDemoModCalisma+0x510>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	220a      	movs	r2, #10
 80066e6:	4950      	ldr	r1, [pc, #320]	; (8006828 <checkDemoModCalisma+0x528>)
 80066e8:	4618      	mov	r0, r3
 80066ea:	f005 fd21 	bl	800c130 <itoa>
			lcd_print(2,12,snum);
 80066ee:	4a4e      	ldr	r2, [pc, #312]	; (8006828 <checkDemoModCalisma+0x528>)
 80066f0:	210c      	movs	r1, #12
 80066f2:	2002      	movs	r0, #2
 80066f4:	f001 f9ca 	bl	8007a8c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80066f8:	4b44      	ldr	r3, [pc, #272]	; (800680c <checkDemoModCalisma+0x50c>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	220a      	movs	r2, #10
 80066fe:	494a      	ldr	r1, [pc, #296]	; (8006828 <checkDemoModCalisma+0x528>)
 8006700:	4618      	mov	r0, r3
 8006702:	f005 fd15 	bl	800c130 <itoa>
			lcd_print(2,13,snum);
 8006706:	4a48      	ldr	r2, [pc, #288]	; (8006828 <checkDemoModCalisma+0x528>)
 8006708:	210d      	movs	r1, #13
 800670a:	2002      	movs	r0, #2
 800670c:	f001 f9be 	bl	8007a8c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006710:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <checkDemoModCalisma+0x508>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	220a      	movs	r2, #10
 8006716:	4944      	ldr	r1, [pc, #272]	; (8006828 <checkDemoModCalisma+0x528>)
 8006718:	4618      	mov	r0, r3
 800671a:	f005 fd09 	bl	800c130 <itoa>
			lcd_print(2,14,snum);
 800671e:	4a42      	ldr	r2, [pc, #264]	; (8006828 <checkDemoModCalisma+0x528>)
 8006720:	210e      	movs	r1, #14
 8006722:	2002      	movs	r0, #2
 8006724:	f001 f9b2 	bl	8007a8c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006728:	4b36      	ldr	r3, [pc, #216]	; (8006804 <checkDemoModCalisma+0x504>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	220a      	movs	r2, #10
 800672e:	493e      	ldr	r1, [pc, #248]	; (8006828 <checkDemoModCalisma+0x528>)
 8006730:	4618      	mov	r0, r3
 8006732:	f005 fcfd 	bl	800c130 <itoa>
			lcd_print(2,15,snum);
 8006736:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <checkDemoModCalisma+0x528>)
 8006738:	210f      	movs	r1, #15
 800673a:	2002      	movs	r0, #2
 800673c:	f001 f9a6 	bl	8007a8c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006740:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <checkDemoModCalisma+0x500>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	220a      	movs	r2, #10
 8006746:	4938      	ldr	r1, [pc, #224]	; (8006828 <checkDemoModCalisma+0x528>)
 8006748:	4618      	mov	r0, r3
 800674a:	f005 fcf1 	bl	800c130 <itoa>
			lcd_print(2,16,snum);
 800674e:	4a36      	ldr	r2, [pc, #216]	; (8006828 <checkDemoModCalisma+0x528>)
 8006750:	2110      	movs	r1, #16
 8006752:	2002      	movs	r0, #2
 8006754:	f001 f99a 	bl	8007a8c <lcd_print>
			mesajYazildi=1;
 8006758:	4b34      	ldr	r3, [pc, #208]	; (800682c <checkDemoModCalisma+0x52c>)
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800675e:	e03c      	b.n	80067da <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006760:	4b33      	ldr	r3, [pc, #204]	; (8006830 <checkDemoModCalisma+0x530>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d003      	beq.n	8006770 <checkDemoModCalisma+0x470>
 8006768:	4b2c      	ldr	r3, [pc, #176]	; (800681c <checkDemoModCalisma+0x51c>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d134      	bne.n	80067da <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006770:	2200      	movs	r2, #0
 8006772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006776:	481b      	ldr	r0, [pc, #108]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 8006778:	f002 fcc5 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006782:	4818      	ldr	r0, [pc, #96]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 8006784:	f002 fcbf 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006788:	2200      	movs	r2, #0
 800678a:	2104      	movs	r1, #4
 800678c:	4815      	ldr	r0, [pc, #84]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 800678e:	f002 fcba 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006792:	2200      	movs	r2, #0
 8006794:	2102      	movs	r1, #2
 8006796:	4813      	ldr	r0, [pc, #76]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 8006798:	f002 fcb5 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800679c:	2200      	movs	r2, #0
 800679e:	2101      	movs	r1, #1
 80067a0:	4810      	ldr	r0, [pc, #64]	; (80067e4 <checkDemoModCalisma+0x4e4>)
 80067a2:	f002 fcb0 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80067a6:	2200      	movs	r2, #0
 80067a8:	2120      	movs	r1, #32
 80067aa:	480d      	ldr	r0, [pc, #52]	; (80067e0 <checkDemoModCalisma+0x4e0>)
 80067ac:	f002 fcab 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067b0:	2200      	movs	r2, #0
 80067b2:	2110      	movs	r1, #16
 80067b4:	480a      	ldr	r0, [pc, #40]	; (80067e0 <checkDemoModCalisma+0x4e0>)
 80067b6:	f002 fca6 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	480b      	ldr	r0, [pc, #44]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80067c0:	f002 fca1 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2140      	movs	r1, #64	; 0x40
 80067c8:	4808      	ldr	r0, [pc, #32]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80067ca:	f002 fc9c 	bl	8009106 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	2120      	movs	r1, #32
 80067d2:	4806      	ldr	r0, [pc, #24]	; (80067ec <checkDemoModCalisma+0x4ec>)
 80067d4:	f002 fc97 	bl	8009106 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80067d8:	e7ff      	b.n	80067da <checkDemoModCalisma+0x4da>
 80067da:	bf00      	nop
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40011000 	.word	0x40011000
 80067e4:	40010c00 	.word	0x40010c00
 80067e8:	2000024d 	.word	0x2000024d
 80067ec:	40010800 	.word	0x40010800
 80067f0:	200001d0 	.word	0x200001d0
 80067f4:	200001e0 	.word	0x200001e0
 80067f8:	2000024c 	.word	0x2000024c
 80067fc:	20000232 	.word	0x20000232
 8006800:	200001f1 	.word	0x200001f1
 8006804:	200001f2 	.word	0x200001f2
 8006808:	20000000 	.word	0x20000000
 800680c:	20000001 	.word	0x20000001
 8006810:	200001f3 	.word	0x200001f3
 8006814:	20000120 	.word	0x20000120
 8006818:	20000220 	.word	0x20000220
 800681c:	20000211 	.word	0x20000211
 8006820:	0800d958 	.word	0x0800d958
 8006824:	0800d964 	.word	0x0800d964
 8006828:	20000190 	.word	0x20000190
 800682c:	20000228 	.word	0x20000228
 8006830:	20000212 	.word	0x20000212

08006834 <mainLoop>:

void mainLoop() {
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800683a:	f7fe f923 	bl	8004a84 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800683e:	2101      	movs	r1, #1
 8006840:	48ac      	ldr	r0, [pc, #688]	; (8006af4 <mainLoop+0x2c0>)
 8006842:	f002 fc49 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d136      	bne.n	80068ba <mainLoop+0x86>
 800684c:	2108      	movs	r1, #8
 800684e:	48aa      	ldr	r0, [pc, #680]	; (8006af8 <mainLoop+0x2c4>)
 8006850:	f002 fc42 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12f      	bne.n	80068ba <mainLoop+0x86>
 800685a:	2102      	movs	r1, #2
 800685c:	48a5      	ldr	r0, [pc, #660]	; (8006af4 <mainLoop+0x2c0>)
 800685e:	f002 fc3b 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d128      	bne.n	80068ba <mainLoop+0x86>
 8006868:	2104      	movs	r1, #4
 800686a:	48a2      	ldr	r0, [pc, #648]	; (8006af4 <mainLoop+0x2c0>)
 800686c:	f002 fc34 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d121      	bne.n	80068ba <mainLoop+0x86>
 8006876:	2108      	movs	r1, #8
 8006878:	489e      	ldr	r0, [pc, #632]	; (8006af4 <mainLoop+0x2c0>)
 800687a:	f002 fc2d 	bl	80090d8 <HAL_GPIO_ReadPin>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11a      	bne.n	80068ba <mainLoop+0x86>
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	489c      	ldr	r0, [pc, #624]	; (8006af8 <mainLoop+0x2c4>)
 8006888:	f002 fc26 	bl	80090d8 <HAL_GPIO_ReadPin>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d113      	bne.n	80068ba <mainLoop+0x86>
 8006892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006896:	4898      	ldr	r0, [pc, #608]	; (8006af8 <mainLoop+0x2c4>)
 8006898:	f002 fc1e 	bl	80090d8 <HAL_GPIO_ReadPin>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d10b      	bne.n	80068ba <mainLoop+0x86>
 80068a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068a6:	4894      	ldr	r0, [pc, #592]	; (8006af8 <mainLoop+0x2c4>)
 80068a8:	f002 fc16 	bl	80090d8 <HAL_GPIO_ReadPin>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d103      	bne.n	80068ba <mainLoop+0x86>
			butonKontrol=0;
 80068b2:	4b92      	ldr	r3, [pc, #584]	; (8006afc <mainLoop+0x2c8>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e003      	b.n	80068c2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80068ba:	4b91      	ldr	r3, [pc, #580]	; (8006b00 <mainLoop+0x2cc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a91      	ldr	r2, [pc, #580]	; (8006b04 <mainLoop+0x2d0>)
 80068c0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80068c2:	4b91      	ldr	r3, [pc, #580]	; (8006b08 <mainLoop+0x2d4>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d03a      	beq.n	8006940 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068ca:	bf00      	nop
 80068cc:	488f      	ldr	r0, [pc, #572]	; (8006b0c <mainLoop+0x2d8>)
 80068ce:	f003 fa2c 	bl	8009d2a <HAL_I2C_GetError>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d0f9      	beq.n	80068cc <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80068d8:	bf00      	nop
 80068da:	488c      	ldr	r0, [pc, #560]	; (8006b0c <mainLoop+0x2d8>)
 80068dc:	f003 fa18 	bl	8009d10 <HAL_I2C_GetState>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d1f9      	bne.n	80068da <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80068e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068ea:	9302      	str	r3, [sp, #8]
 80068ec:	236e      	movs	r3, #110	; 0x6e
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	4b87      	ldr	r3, [pc, #540]	; (8006b10 <mainLoop+0x2dc>)
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	236e      	movs	r3, #110	; 0x6e
 80068f6:	2200      	movs	r2, #0
 80068f8:	21a0      	movs	r1, #160	; 0xa0
 80068fa:	4884      	ldr	r0, [pc, #528]	; (8006b0c <mainLoop+0x2d8>)
 80068fc:	f002 fea6 	bl	800964c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006904:	f001 fe18 	bl	8008538 <HAL_Delay>

		  hafizaYaz=0;
 8006908:	4b7f      	ldr	r3, [pc, #508]	; (8006b08 <mainLoop+0x2d4>)
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800690e:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <mainLoop+0x2e0>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006916:	4a80      	ldr	r2, [pc, #512]	; (8006b18 <mainLoop+0x2e4>)
 8006918:	2101      	movs	r1, #1
 800691a:	2002      	movs	r0, #2
 800691c:	f001 f8b6 	bl	8007a8c <lcd_print>
 8006920:	e008      	b.n	8006934 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006922:	4b7c      	ldr	r3, [pc, #496]	; (8006b14 <mainLoop+0x2e0>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d104      	bne.n	8006934 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 800692a:	4a7c      	ldr	r2, [pc, #496]	; (8006b1c <mainLoop+0x2e8>)
 800692c:	2101      	movs	r1, #1
 800692e:	2002      	movs	r0, #2
 8006930:	f001 f8ac 	bl	8007a8c <lcd_print>
		  }

		  HAL_Delay(1000);
 8006934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006938:	f001 fdfe 	bl	8008538 <HAL_Delay>
		  lcd_clear();
 800693c:	f001 f8d2 	bl	8007ae4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006940:	4b77      	ldr	r3, [pc, #476]	; (8006b20 <mainLoop+0x2ec>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f083 0301 	eor.w	r3, r3, #1
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d06d      	beq.n	8006a2a <mainLoop+0x1f6>
 800694e:	486f      	ldr	r0, [pc, #444]	; (8006b0c <mainLoop+0x2d8>)
 8006950:	f003 f9de 	bl	8009d10 <HAL_I2C_GetState>
 8006954:	4603      	mov	r3, r0
 8006956:	2b20      	cmp	r3, #32
 8006958:	d167      	bne.n	8006a2a <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 800695a:	4b72      	ldr	r3, [pc, #456]	; (8006b24 <mainLoop+0x2f0>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f083 0301 	eor.w	r3, r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d044      	beq.n	80069f2 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006968:	4a6f      	ldr	r2, [pc, #444]	; (8006b28 <mainLoop+0x2f4>)
 800696a:	2101      	movs	r1, #1
 800696c:	2001      	movs	r0, #1
 800696e:	f001 f88d 	bl	8007a8c <lcd_print>
			  if(dilSecim==0) {
 8006972:	4b68      	ldr	r3, [pc, #416]	; (8006b14 <mainLoop+0x2e0>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d105      	bne.n	8006986 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800697a:	4a6c      	ldr	r2, [pc, #432]	; (8006b2c <mainLoop+0x2f8>)
 800697c:	2101      	movs	r1, #1
 800697e:	2002      	movs	r0, #2
 8006980:	f001 f884 	bl	8007a8c <lcd_print>
 8006984:	e008      	b.n	8006998 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006986:	4b63      	ldr	r3, [pc, #396]	; (8006b14 <mainLoop+0x2e0>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d104      	bne.n	8006998 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800698e:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <mainLoop+0x2fc>)
 8006990:	2101      	movs	r1, #1
 8006992:	2002      	movs	r0, #2
 8006994:	f001 f87a 	bl	8007a8c <lcd_print>
			  }
			  HAL_Delay(1000);
 8006998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800699c:	f001 fdcc 	bl	8008538 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80069a0:	bf00      	nop
 80069a2:	485a      	ldr	r0, [pc, #360]	; (8006b0c <mainLoop+0x2d8>)
 80069a4:	f003 f9c1 	bl	8009d2a <HAL_I2C_GetError>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d0f9      	beq.n	80069a2 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80069ae:	e003      	b.n	80069b8 <mainLoop+0x184>
				  HAL_Delay(1000);
 80069b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069b4:	f001 fdc0 	bl	8008538 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80069b8:	4854      	ldr	r0, [pc, #336]	; (8006b0c <mainLoop+0x2d8>)
 80069ba:	f003 f9a9 	bl	8009d10 <HAL_I2C_GetState>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d1f5      	bne.n	80069b0 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80069c4:	4b53      	ldr	r3, [pc, #332]	; (8006b14 <mainLoop+0x2e0>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80069cc:	4a59      	ldr	r2, [pc, #356]	; (8006b34 <mainLoop+0x300>)
 80069ce:	2101      	movs	r1, #1
 80069d0:	2002      	movs	r0, #2
 80069d2:	f001 f85b 	bl	8007a8c <lcd_print>
 80069d6:	e008      	b.n	80069ea <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80069d8:	4b4e      	ldr	r3, [pc, #312]	; (8006b14 <mainLoop+0x2e0>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d104      	bne.n	80069ea <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80069e0:	4a55      	ldr	r2, [pc, #340]	; (8006b38 <mainLoop+0x304>)
 80069e2:	2101      	movs	r1, #1
 80069e4:	2002      	movs	r0, #2
 80069e6:	f001 f851 	bl	8007a8c <lcd_print>
			  }

			  ilkOkuma=1;
 80069ea:	4b4e      	ldr	r3, [pc, #312]	; (8006b24 <mainLoop+0x2f0>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e014      	b.n	8006a1c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80069f2:	4b48      	ldr	r3, [pc, #288]	; (8006b14 <mainLoop+0x2e0>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80069fa:	4a50      	ldr	r2, [pc, #320]	; (8006b3c <mainLoop+0x308>)
 80069fc:	2101      	movs	r1, #1
 80069fe:	2002      	movs	r0, #2
 8006a00:	f001 f844 	bl	8007a8c <lcd_print>
 8006a04:	e008      	b.n	8006a18 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006a06:	4b43      	ldr	r3, [pc, #268]	; (8006b14 <mainLoop+0x2e0>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d104      	bne.n	8006a18 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006a0e:	4a4c      	ldr	r2, [pc, #304]	; (8006b40 <mainLoop+0x30c>)
 8006a10:	2101      	movs	r1, #1
 8006a12:	2002      	movs	r0, #2
 8006a14:	f001 f83a 	bl	8007a8c <lcd_print>
			  }
			  lcd_clear();
 8006a18:	f001 f864 	bl	8007ae4 <lcd_clear>
		  }

		  lcd_clear();
 8006a1c:	f001 f862 	bl	8007ae4 <lcd_clear>

		  eepromKontrol();
 8006a20:	f7f9 fc08 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006a24:	4b3e      	ldr	r3, [pc, #248]	; (8006b20 <mainLoop+0x2ec>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006a2a:	4b46      	ldr	r3, [pc, #280]	; (8006b44 <mainLoop+0x310>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11c      	bne.n	8006a6c <mainLoop+0x238>
 8006a32:	4b45      	ldr	r3, [pc, #276]	; (8006b48 <mainLoop+0x314>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f083 0301 	eor.w	r3, r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <mainLoop+0x238>
 8006a40:	4b42      	ldr	r3, [pc, #264]	; (8006b4c <mainLoop+0x318>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d111      	bne.n	8006a6c <mainLoop+0x238>
			lcd_clear();
 8006a48:	f001 f84c 	bl	8007ae4 <lcd_clear>
			HAL_Delay(10);
 8006a4c:	200a      	movs	r0, #10
 8006a4e:	f001 fd73 	bl	8008538 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a52:	4a3f      	ldr	r2, [pc, #252]	; (8006b50 <mainLoop+0x31c>)
 8006a54:	2101      	movs	r1, #1
 8006a56:	2001      	movs	r0, #1
 8006a58:	f001 f818 	bl	8007a8c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006a5c:	4a3d      	ldr	r2, [pc, #244]	; (8006b54 <mainLoop+0x320>)
 8006a5e:	2101      	movs	r1, #1
 8006a60:	2002      	movs	r0, #2
 8006a62:	f001 f813 	bl	8007a8c <lcd_print>
			mesajYazildi=1;
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <mainLoop+0x314>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006a6c:	4b35      	ldr	r3, [pc, #212]	; (8006b44 <mainLoop+0x310>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d112      	bne.n	8006a9a <mainLoop+0x266>
 8006a74:	2102      	movs	r1, #2
 8006a76:	481f      	ldr	r0, [pc, #124]	; (8006af4 <mainLoop+0x2c0>)
 8006a78:	f002 fb2e 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10b      	bne.n	8006a9a <mainLoop+0x266>
 8006a82:	2104      	movs	r1, #4
 8006a84:	481b      	ldr	r0, [pc, #108]	; (8006af4 <mainLoop+0x2c0>)
 8006a86:	f002 fb27 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d104      	bne.n	8006a9a <mainLoop+0x266>
			menuGiris=1;
 8006a90:	4b2c      	ldr	r3, [pc, #176]	; (8006b44 <mainLoop+0x310>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a96:	f001 f825 	bl	8007ae4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006a9a:	4b2a      	ldr	r3, [pc, #168]	; (8006b44 <mainLoop+0x310>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <mainLoop+0x272>
			menu();
 8006aa2:	f7fa fb87 	bl	80011b4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006aaa:	4813      	ldr	r0, [pc, #76]	; (8006af8 <mainLoop+0x2c4>)
 8006aac:	f002 fb43 	bl	8009136 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ab4:	4828      	ldr	r0, [pc, #160]	; (8006b58 <mainLoop+0x324>)
 8006ab6:	f002 fb0f 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <mainLoop+0x2a2>
 8006ac0:	4b26      	ldr	r3, [pc, #152]	; (8006b5c <mainLoop+0x328>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f083 0301 	eor.w	r3, r3, #1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <mainLoop+0x2a2>
			stopVar=1;
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <mainLoop+0x32c>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e002      	b.n	8006adc <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006ad6:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <mainLoop+0x32c>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006adc:	f7fd ffe8 	bl	8004ab0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006ae0:	f7fe f81a 	bl	8004b18 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ae4:	f7fe f85e 	bl	8004ba4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006ae8:	f7fe f8ae 	bl	8004c48 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006aec:	f7ff fc08 	bl	8006300 <checkDemoModCalisma>
		checkLCDBacklight();
 8006af0:	e6a3      	b.n	800683a <mainLoop+0x6>
 8006af2:	bf00      	nop
 8006af4:	40010800 	.word	0x40010800
 8006af8:	40011000 	.word	0x40011000
 8006afc:	20000223 	.word	0x20000223
 8006b00:	200001d0 	.word	0x200001d0
 8006b04:	200001ec 	.word	0x200001ec
 8006b08:	20000220 	.word	0x20000220
 8006b0c:	20000284 	.word	0x20000284
 8006b10:	20000120 	.word	0x20000120
 8006b14:	20000215 	.word	0x20000215
 8006b18:	0800d978 	.word	0x0800d978
 8006b1c:	0800d98c 	.word	0x0800d98c
 8006b20:	20000221 	.word	0x20000221
 8006b24:	20000222 	.word	0x20000222
 8006b28:	0800d9a0 	.word	0x0800d9a0
 8006b2c:	0800d9b4 	.word	0x0800d9b4
 8006b30:	0800d9c8 	.word	0x0800d9c8
 8006b34:	0800d9dc 	.word	0x0800d9dc
 8006b38:	0800d9f0 	.word	0x0800d9f0
 8006b3c:	0800da04 	.word	0x0800da04
 8006b40:	0800da18 	.word	0x0800da18
 8006b44:	20000211 	.word	0x20000211
 8006b48:	20000228 	.word	0x20000228
 8006b4c:	20000212 	.word	0x20000212
 8006b50:	0800da2c 	.word	0x0800da2c
 8006b54:	0800da40 	.word	0x0800da40
 8006b58:	40010c00 	.word	0x40010c00
 8006b5c:	20000249 	.word	0x20000249
 8006b60:	20000246 	.word	0x20000246

08006b64 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f000 ffec 	bl	8007b48 <lcd_cursor>

    int cursorPosition = 3;
 8006b70:	2303      	movs	r3, #3
 8006b72:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006b78:	2305      	movs	r3, #5
 8006b7a:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006b7c:	220c      	movs	r2, #12
 8006b7e:	2100      	movs	r1, #0
 8006b80:	489b      	ldr	r0, [pc, #620]	; (8006df0 <takeMachineID+0x28c>)
 8006b82:	f005 fc30 	bl	800c3e6 <memset>
    HAL_Delay(100);
 8006b86:	2064      	movs	r0, #100	; 0x64
 8006b88:	f001 fcd6 	bl	8008538 <HAL_Delay>

    printTemplate(1, 0);
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f7fa f8aa 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006b94:	2108      	movs	r1, #8
 8006b96:	4897      	ldr	r0, [pc, #604]	; (8006df4 <takeMachineID+0x290>)
 8006b98:	f002 fa9e 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d139      	bne.n	8006c16 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f000 ffd0 	bl	8007b48 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006ba8:	4891      	ldr	r0, [pc, #580]	; (8006df0 <takeMachineID+0x28c>)
 8006baa:	f7f9 fb3b 	bl	8000224 <strlen>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	d010      	beq.n	8006bd6 <takeMachineID+0x72>
        		lcd_clear();
 8006bb4:	f000 ff96 	bl	8007ae4 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006bb8:	4a8f      	ldr	r2, [pc, #572]	; (8006df8 <takeMachineID+0x294>)
 8006bba:	2101      	movs	r1, #1
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f000 ff65 	bl	8007a8c <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006bc2:	4a8e      	ldr	r2, [pc, #568]	; (8006dfc <takeMachineID+0x298>)
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	2002      	movs	r0, #2
 8006bc8:	f000 ff60 	bl	8007a8c <lcd_print>
        		HAL_Delay(1200);
 8006bcc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006bd0:	f001 fcb2 	bl	8008538 <HAL_Delay>
        		goto mainSection;
 8006bd4:	e7c9      	b.n	8006b6a <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006bd6:	4b8a      	ldr	r3, [pc, #552]	; (8006e00 <takeMachineID+0x29c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a8a      	ldr	r2, [pc, #552]	; (8006e04 <takeMachineID+0x2a0>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	4a84      	ldr	r2, [pc, #528]	; (8006df0 <takeMachineID+0x28c>)
 8006be0:	6810      	ldr	r0, [r2, #0]
 8006be2:	6851      	ldr	r1, [r2, #4]
 8006be4:	6892      	ldr	r2, [r2, #8]
 8006be6:	6018      	str	r0, [r3, #0]
 8006be8:	6059      	str	r1, [r3, #4]
 8006bea:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006bec:	20c8      	movs	r0, #200	; 0xc8
 8006bee:	f001 fca3 	bl	8008538 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006bf2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bf6:	9302      	str	r3, [sp, #8]
 8006bf8:	236e      	movs	r3, #110	; 0x6e
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	4b81      	ldr	r3, [pc, #516]	; (8006e04 <takeMachineID+0x2a0>)
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	236e      	movs	r3, #110	; 0x6e
 8006c02:	2200      	movs	r2, #0
 8006c04:	21a0      	movs	r1, #160	; 0xa0
 8006c06:	4880      	ldr	r0, [pc, #512]	; (8006e08 <takeMachineID+0x2a4>)
 8006c08:	f002 fd20 	bl	800964c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c10:	f001 fc92 	bl	8008538 <HAL_Delay>

            break;
 8006c14:	e0e7      	b.n	8006de6 <takeMachineID+0x282>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006c16:	2101      	movs	r1, #1
 8006c18:	4876      	ldr	r0, [pc, #472]	; (8006df4 <takeMachineID+0x290>)
 8006c1a:	f002 fa5d 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d111      	bne.n	8006c48 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b07      	cmp	r3, #7
 8006c28:	d102      	bne.n	8006c30 <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	e008      	b.n	8006c42 <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b0e      	cmp	r3, #14
 8006c34:	d102      	bne.n	8006c3c <takeMachineID+0xd8>
                cursorPosition = 3;
 8006c36:	2303      	movs	r3, #3
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e002      	b.n	8006c42 <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(150);
 8006c42:	2096      	movs	r0, #150	; 0x96
 8006c44:	f001 fc78 	bl	8008538 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006c48:	2108      	movs	r1, #8
 8006c4a:	4870      	ldr	r0, [pc, #448]	; (8006e0c <takeMachineID+0x2a8>)
 8006c4c:	f002 fa44 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d111      	bne.n	8006c7a <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d102      	bne.n	8006c62 <takeMachineID+0xfe>
                cursorPosition = 14;
 8006c5c:	230e      	movs	r3, #14
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e008      	b.n	8006c74 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b0a      	cmp	r3, #10
 8006c66:	d102      	bne.n	8006c6e <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006c68:	2307      	movs	r3, #7
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e002      	b.n	8006c74 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006c74:	2096      	movs	r0, #150	; 0x96
 8006c76:	f001 fc5f 	bl	8008538 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	485d      	ldr	r0, [pc, #372]	; (8006df4 <takeMachineID+0x290>)
 8006c7e:	f002 fa2b 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d171      	bne.n	8006d6c <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d105      	bne.n	8006c9a <takeMachineID+0x136>
        		machineID[machineIDLoc] = '0';
 8006c8e:	4a58      	ldr	r2, [pc, #352]	; (8006df0 <takeMachineID+0x28c>)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4413      	add	r3, r2
 8006c94:	2230      	movs	r2, #48	; 0x30
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e04f      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 4) {
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d105      	bne.n	8006cac <takeMachineID+0x148>
        		machineID[machineIDLoc] = '1';
 8006ca0:	4a53      	ldr	r2, [pc, #332]	; (8006df0 <takeMachineID+0x28c>)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	2231      	movs	r2, #49	; 0x31
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e046      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 5) {
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	d105      	bne.n	8006cbe <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '2';
 8006cb2:	4a4f      	ldr	r2, [pc, #316]	; (8006df0 <takeMachineID+0x28c>)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2232      	movs	r2, #50	; 0x32
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e03d      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 6) {
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	d105      	bne.n	8006cd0 <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '3';
 8006cc4:	4a4a      	ldr	r2, [pc, #296]	; (8006df0 <takeMachineID+0x28c>)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2233      	movs	r2, #51	; 0x33
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	e034      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 7) {
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	d105      	bne.n	8006ce2 <takeMachineID+0x17e>
        		machineID[machineIDLoc] = '4';
 8006cd6:	4a46      	ldr	r2, [pc, #280]	; (8006df0 <takeMachineID+0x28c>)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4413      	add	r3, r2
 8006cdc:	2234      	movs	r2, #52	; 0x34
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	e02b      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 10) {
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b0a      	cmp	r3, #10
 8006ce6:	d105      	bne.n	8006cf4 <takeMachineID+0x190>
        		machineID[machineIDLoc] = '5';
 8006ce8:	4a41      	ldr	r2, [pc, #260]	; (8006df0 <takeMachineID+0x28c>)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	2235      	movs	r2, #53	; 0x35
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e022      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 11) {
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b0b      	cmp	r3, #11
 8006cf8:	d105      	bne.n	8006d06 <takeMachineID+0x1a2>
        		machineID[machineIDLoc] = '6';
 8006cfa:	4a3d      	ldr	r2, [pc, #244]	; (8006df0 <takeMachineID+0x28c>)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4413      	add	r3, r2
 8006d00:	2236      	movs	r2, #54	; 0x36
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	e019      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 12) {
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b0c      	cmp	r3, #12
 8006d0a:	d105      	bne.n	8006d18 <takeMachineID+0x1b4>
        		machineID[machineIDLoc] = '7';
 8006d0c:	4a38      	ldr	r2, [pc, #224]	; (8006df0 <takeMachineID+0x28c>)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	2237      	movs	r2, #55	; 0x37
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e010      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 13) {
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b0d      	cmp	r3, #13
 8006d1c:	d105      	bne.n	8006d2a <takeMachineID+0x1c6>
        		machineID[machineIDLoc] = '8';
 8006d1e:	4a34      	ldr	r2, [pc, #208]	; (8006df0 <takeMachineID+0x28c>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4413      	add	r3, r2
 8006d24:	2238      	movs	r2, #56	; 0x38
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e007      	b.n	8006d3a <takeMachineID+0x1d6>
        	} else if(cursorPosition == 14) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b0e      	cmp	r3, #14
 8006d2e:	d104      	bne.n	8006d3a <takeMachineID+0x1d6>
        		machineID[machineIDLoc] = '9';
 8006d30:	4a2f      	ldr	r2, [pc, #188]	; (8006df0 <takeMachineID+0x28c>)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4413      	add	r3, r2
 8006d36:	2239      	movs	r2, #57	; 0x39
 8006d38:	701a      	strb	r2, [r3, #0]
        	}

        	if(machineIDLoc == machineIDCharacterLimit - 1) {
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b0b      	cmp	r3, #11
 8006d3e:	d102      	bne.n	8006d46 <takeMachineID+0x1e2>
        		machineID[machineIDCharacterLimit] = '\0';
 8006d40:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <takeMachineID+0x28c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	b2d9      	uxtb	r1, r3
 8006d4a:	4a29      	ldr	r2, [pc, #164]	; (8006df0 <takeMachineID+0x28c>)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4413      	add	r3, r2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	2001      	movs	r0, #1
 8006d56:	f000 feae 	bl	8007ab6 <lcd_print_char>

        	writeLoc++;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8006d66:	2096      	movs	r0, #150	; 0x96
 8006d68:	f001 fbe6 	bl	8008538 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006d6c:	2104      	movs	r1, #4
 8006d6e:	4821      	ldr	r0, [pc, #132]	; (8006df4 <takeMachineID+0x290>)
 8006d70:	f002 f9b2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d12e      	bne.n	8006dd8 <takeMachineID+0x274>
            if(strlen(machineID) >= 1) {
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <takeMachineID+0x28c>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d027      	beq.n	8006dd2 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <takeMachineID+0x28c>)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4413      	add	r3, r2
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	3304      	adds	r3, #4
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	4619      	mov	r1, r3
 8006d96:	2001      	movs	r0, #1
 8006d98:	f000 feae 	bl	8007af8 <lcd_delete_char>
                HAL_Delay(50);
 8006d9c:	2032      	movs	r0, #50	; 0x32
 8006d9e:	f001 fbcb 	bl	8008538 <HAL_Delay>

                if(writeLoc > 5) {
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	dd03      	ble.n	8006db0 <takeMachineID+0x24c>
                	writeLoc--;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	e004      	b.n	8006dba <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	dc01      	bgt.n	8006dba <takeMachineID+0x256>
                	writeLoc = 5;
 8006db6:	2305      	movs	r3, #5
 8006db8:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dd03      	ble.n	8006dc8 <takeMachineID+0x264>
                	machineIDLoc--;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	e004      	b.n	8006dd2 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da01      	bge.n	8006dd2 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(150);
 8006dd2:	2096      	movs	r0, #150	; 0x96
 8006dd4:	f001 fbb0 	bl	8008538 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	2002      	movs	r0, #2
 8006de0:	f000 fe35 	bl	8007a4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006de4:	e6d6      	b.n	8006b94 <takeMachineID+0x30>
    }
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000198 	.word	0x20000198
 8006df4:	40010800 	.word	0x40010800
 8006df8:	0800da54 	.word	0x0800da54
 8006dfc:	0800da68 	.word	0x0800da68
 8006e00:	20000004 	.word	0x20000004
 8006e04:	20000120 	.word	0x20000120
 8006e08:	20000284 	.word	0x20000284
 8006e0c:	40011000 	.word	0x40011000

08006e10 <takeWifiSSID>:

void takeWifiSSID() {
 8006e10:	b590      	push	{r4, r7, lr}
 8006e12:	b08b      	sub	sp, #44	; 0x2c
 8006e14:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006e16:	2001      	movs	r0, #1
 8006e18:	f000 fe96 	bl	8007b48 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006e1c:	2214      	movs	r2, #20
 8006e1e:	2100      	movs	r1, #0
 8006e20:	48a9      	ldr	r0, [pc, #676]	; (80070c8 <takeWifiSSID+0x2b8>)
 8006e22:	f005 fae0 	bl	800c3e6 <memset>
    HAL_Delay(100);
 8006e26:	2064      	movs	r0, #100	; 0x64
 8006e28:	f001 fb86 	bl	8008538 <HAL_Delay>

    int realCharPos = 1;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006e30:	2301      	movs	r3, #1
 8006e32:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006e34:	2301      	movs	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006e3c:	2307      	movs	r3, #7
 8006e3e:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006e40:	2101      	movs	r1, #1
 8006e42:	2002      	movs	r0, #2
 8006e44:	f7f9 ff50 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e48:	2108      	movs	r1, #8
 8006e4a:	48a0      	ldr	r0, [pc, #640]	; (80070cc <takeWifiSSID+0x2bc>)
 8006e4c:	f002 f944 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d138      	bne.n	8006ec8 <takeWifiSSID+0xb8>
            lcd_cursor(0);
 8006e56:	2000      	movs	r0, #0
 8006e58:	f000 fe76 	bl	8007b48 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006e5c:	489a      	ldr	r0, [pc, #616]	; (80070c8 <takeWifiSSID+0x2b8>)
 8006e5e:	f7f9 f9e1 	bl	8000224 <strlen>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b14      	cmp	r3, #20
 8006e66:	d910      	bls.n	8006e8a <takeWifiSSID+0x7a>
                lcd_clear();
 8006e68:	f000 fe3c 	bl	8007ae4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006e6c:	4a98      	ldr	r2, [pc, #608]	; (80070d0 <takeWifiSSID+0x2c0>)
 8006e6e:	2101      	movs	r1, #1
 8006e70:	2001      	movs	r0, #1
 8006e72:	f000 fe0b 	bl	8007a8c <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006e76:	4a97      	ldr	r2, [pc, #604]	; (80070d4 <takeWifiSSID+0x2c4>)
 8006e78:	2101      	movs	r1, #1
 8006e7a:	2002      	movs	r0, #2
 8006e7c:	f000 fe06 	bl	8007a8c <lcd_print>
                HAL_Delay(1200);
 8006e80:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e84:	f001 fb58 	bl	8008538 <HAL_Delay>
                goto mainSSIDSection;
 8006e88:	e7c5      	b.n	8006e16 <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8006e8a:	4b93      	ldr	r3, [pc, #588]	; (80070d8 <takeWifiSSID+0x2c8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a93      	ldr	r2, [pc, #588]	; (80070dc <takeWifiSSID+0x2cc>)
 8006e90:	189c      	adds	r4, r3, r2
 8006e92:	488d      	ldr	r0, [pc, #564]	; (80070c8 <takeWifiSSID+0x2b8>)
 8006e94:	f7f9 f9c6 	bl	8000224 <strlen>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	498a      	ldr	r1, [pc, #552]	; (80070c8 <takeWifiSSID+0x2b8>)
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f005 fae6 	bl	800c470 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ea4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	236e      	movs	r3, #110	; 0x6e
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	4b8b      	ldr	r3, [pc, #556]	; (80070dc <takeWifiSSID+0x2cc>)
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	236e      	movs	r3, #110	; 0x6e
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	21a0      	movs	r1, #160	; 0xa0
 8006eb8:	4889      	ldr	r0, [pc, #548]	; (80070e0 <takeWifiSSID+0x2d0>)
 8006eba:	f002 fbc7 	bl	800964c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ec2:	f001 fb39 	bl	8008538 <HAL_Delay>

            break;
 8006ec6:	e11e      	b.n	8007106 <takeWifiSSID+0x2f6>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4880      	ldr	r0, [pc, #512]	; (80070cc <takeWifiSSID+0x2bc>)
 8006ecc:	f002 f904 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d150      	bne.n	8006f78 <takeWifiSSID+0x168>
        	realCharPos++;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b50      	cmp	r3, #80	; 0x50
 8006ee0:	dd01      	ble.n	8006ee6 <takeWifiSSID+0xd6>
        		realCharPos = 1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d13f      	bne.n	8006f6c <takeWifiSSID+0x15c>
            	if(page == 1) {
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d109      	bne.n	8006f06 <takeWifiSSID+0xf6>
            		cursorPosition = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
            		page++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006efc:	2102      	movs	r1, #2
 8006efe:	2002      	movs	r0, #2
 8006f00:	f7f9 fef2 	bl	8000ce8 <printTemplate>
 8006f04:	e035      	b.n	8006f72 <takeWifiSSID+0x162>
            	} else if(page == 2) {
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d109      	bne.n	8006f20 <takeWifiSSID+0x110>
            		cursorPosition = 1;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	613b      	str	r3, [r7, #16]
            		page++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006f16:	2103      	movs	r1, #3
 8006f18:	2002      	movs	r0, #2
 8006f1a:	f7f9 fee5 	bl	8000ce8 <printTemplate>
 8006f1e:	e028      	b.n	8006f72 <takeWifiSSID+0x162>
            	} else if(page == 3) {
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d109      	bne.n	8006f3a <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8006f26:	2301      	movs	r3, #1
 8006f28:	613b      	str	r3, [r7, #16]
            		page++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8006f30:	2104      	movs	r1, #4
 8006f32:	2002      	movs	r0, #2
 8006f34:	f7f9 fed8 	bl	8000ce8 <printTemplate>
 8006f38:	e01b      	b.n	8006f72 <takeWifiSSID+0x162>
            	} else if(page == 4) {
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d109      	bne.n	8006f54 <takeWifiSSID+0x144>
            		cursorPosition = 1;
 8006f40:	2301      	movs	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]
            		page++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006f4a:	2105      	movs	r1, #5
 8006f4c:	2002      	movs	r0, #2
 8006f4e:	f7f9 fecb 	bl	8000ce8 <printTemplate>
 8006f52:	e00e      	b.n	8006f72 <takeWifiSSID+0x162>
            	} else if(page == 5) {
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d10b      	bne.n	8006f72 <takeWifiSSID+0x162>
            		cursorPosition = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006f62:	2101      	movs	r1, #1
 8006f64:	2002      	movs	r0, #2
 8006f66:	f7f9 febf 	bl	8000ce8 <printTemplate>
 8006f6a:	e002      	b.n	8006f72 <takeWifiSSID+0x162>
            	}
            } else {
            	cursorPosition++;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8006f72:	2096      	movs	r0, #150	; 0x96
 8006f74:	f001 fae0 	bl	8008538 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f78:	2108      	movs	r1, #8
 8006f7a:	485a      	ldr	r0, [pc, #360]	; (80070e4 <takeWifiSSID+0x2d4>)
 8006f7c:	f002 f8ac 	bl	80090d8 <HAL_GPIO_ReadPin>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d14c      	bne.n	8007020 <takeWifiSSID+0x210>
        	realCharPos--;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dc01      	bgt.n	8006f96 <takeWifiSSID+0x186>
        		realCharPos = 80;
 8006f92:	2350      	movs	r3, #80	; 0x50
 8006f94:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d13b      	bne.n	8007014 <takeWifiSSID+0x204>
            	if(page == 1) {
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d108      	bne.n	8006fb4 <takeWifiSSID+0x1a4>
            		cursorPosition = 16;
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	613b      	str	r3, [r7, #16]
            		page = 5;
 8006fa6:	2305      	movs	r3, #5
 8006fa8:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006faa:	2105      	movs	r1, #5
 8006fac:	2002      	movs	r0, #2
 8006fae:	f7f9 fe9b 	bl	8000ce8 <printTemplate>
 8006fb2:	e032      	b.n	800701a <takeWifiSSID+0x20a>
            	} else if(page == 2) {
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d108      	bne.n	8006fcc <takeWifiSSID+0x1bc>
            		cursorPosition = 16;
 8006fba:	2310      	movs	r3, #16
 8006fbc:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	2002      	movs	r0, #2
 8006fc6:	f7f9 fe8f 	bl	8000ce8 <printTemplate>
 8006fca:	e026      	b.n	800701a <takeWifiSSID+0x20a>
            	} else if(page == 3) {
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d108      	bne.n	8006fe4 <takeWifiSSID+0x1d4>
            		cursorPosition = 16;
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	613b      	str	r3, [r7, #16]
            		page = 2;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006fda:	2102      	movs	r1, #2
 8006fdc:	2002      	movs	r0, #2
 8006fde:	f7f9 fe83 	bl	8000ce8 <printTemplate>
 8006fe2:	e01a      	b.n	800701a <takeWifiSSID+0x20a>
            	} else if(page == 4) {
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d108      	bne.n	8006ffc <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 8006fea:	2310      	movs	r3, #16
 8006fec:	613b      	str	r3, [r7, #16]
            		page = 3;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006ff2:	2103      	movs	r1, #3
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	f7f9 fe77 	bl	8000ce8 <printTemplate>
 8006ffa:	e00e      	b.n	800701a <takeWifiSSID+0x20a>
            	} else if(page == 5) {
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	d10b      	bne.n	800701a <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 8007002:	2310      	movs	r3, #16
 8007004:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007006:	2304      	movs	r3, #4
 8007008:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 800700a:	2104      	movs	r1, #4
 800700c:	2002      	movs	r0, #2
 800700e:	f7f9 fe6b 	bl	8000ce8 <printTemplate>
 8007012:	e002      	b.n	800701a <takeWifiSSID+0x20a>
            	}
            } else {
            	cursorPosition--;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3b01      	subs	r3, #1
 8007018:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 800701a:	2096      	movs	r0, #150	; 0x96
 800701c:	f001 fa8c 	bl	8008538 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007020:	2102      	movs	r1, #2
 8007022:	482a      	ldr	r0, [pc, #168]	; (80070cc <takeWifiSSID+0x2bc>)
 8007024:	f002 f858 	bl	80090d8 <HAL_GPIO_ReadPin>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d11e      	bne.n	800706c <takeWifiSSID+0x25c>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	3b01      	subs	r3, #1
 8007032:	4618      	mov	r0, r3
 8007034:	f7f9 fb7e 	bl	8000734 <getCharFromCursorPosition>
 8007038:	4603      	mov	r3, r0
 800703a:	4619      	mov	r1, r3
 800703c:	4a22      	ldr	r2, [pc, #136]	; (80070c8 <takeWifiSSID+0x2b8>)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	460a      	mov	r2, r1
 8007044:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	b2d9      	uxtb	r1, r3
 800704a:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <takeWifiSSID+0x2b8>)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	2001      	movs	r0, #1
 8007056:	f000 fd2e 	bl	8007ab6 <lcd_print_char>

            writeLoc++;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3301      	adds	r3, #1
 800705e:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3301      	adds	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 8007066:	2096      	movs	r0, #150	; 0x96
 8007068:	f001 fa66 	bl	8008538 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800706c:	2104      	movs	r1, #4
 800706e:	4817      	ldr	r0, [pc, #92]	; (80070cc <takeWifiSSID+0x2bc>)
 8007070:	f002 f832 	bl	80090d8 <HAL_GPIO_ReadPin>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d13e      	bne.n	80070f8 <takeWifiSSID+0x2e8>
        	if(strlen(wifiSSID) >= 1) {
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <takeWifiSSID+0x2b8>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d037      	beq.n	80070f2 <takeWifiSSID+0x2e2>
        		wifiSSID[wifiNameLoc] = '\0';
 8007082:	4a11      	ldr	r2, [pc, #68]	; (80070c8 <takeWifiSSID+0x2b8>)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4413      	add	r3, r2
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	3306      	adds	r3, #6
 8007092:	b2db      	uxtb	r3, r3
 8007094:	4619      	mov	r1, r3
 8007096:	2001      	movs	r0, #1
 8007098:	f000 fd2e 	bl	8007af8 <lcd_delete_char>
        		HAL_Delay(50);
 800709c:	2032      	movs	r0, #50	; 0x32
 800709e:	f001 fa4b 	bl	8008538 <HAL_Delay>
        		if(writeLoc > 7) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b07      	cmp	r3, #7
 80070a6:	dd03      	ble.n	80070b0 <takeWifiSSID+0x2a0>
        			writeLoc--;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	e004      	b.n	80070ba <takeWifiSSID+0x2aa>
        		} else if(writeLoc < 7) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	dc01      	bgt.n	80070ba <takeWifiSSID+0x2aa>
        			writeLoc = 7;
 80070b6:	2307      	movs	r3, #7
 80070b8:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dd13      	ble.n	80070e8 <takeWifiSSID+0x2d8>
        			wifiNameLoc--;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	e014      	b.n	80070f2 <takeWifiSSID+0x2e2>
 80070c8:	200001a4 	.word	0x200001a4
 80070cc:	40010800 	.word	0x40010800
 80070d0:	0800da7c 	.word	0x0800da7c
 80070d4:	0800da90 	.word	0x0800da90
 80070d8:	20000008 	.word	0x20000008
 80070dc:	20000120 	.word	0x20000120
 80070e0:	20000284 	.word	0x20000284
 80070e4:	40011000 	.word	0x40011000
        		} else if(wifiNameLoc < 0) {
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da01      	bge.n	80070f2 <takeWifiSSID+0x2e2>
        			wifiNameLoc = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(150);
 80070f2:	2096      	movs	r0, #150	; 0x96
 80070f4:	f001 fa20 	bl	8008538 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	4619      	mov	r1, r3
 80070fe:	2002      	movs	r0, #2
 8007100:	f000 fca5 	bl	8007a4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007104:	e6a0      	b.n	8006e48 <takeWifiSSID+0x38>
    }
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	bd90      	pop	{r4, r7, pc}
 800710e:	bf00      	nop

08007110 <takeWifiPass>:

void takeWifiPass() {
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b08b      	sub	sp, #44	; 0x2c
 8007114:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007116:	2001      	movs	r0, #1
 8007118:	f000 fd16 	bl	8007b48 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 800711c:	2214      	movs	r2, #20
 800711e:	2100      	movs	r1, #0
 8007120:	48a9      	ldr	r0, [pc, #676]	; (80073c8 <takeWifiPass+0x2b8>)
 8007122:	f005 f960 	bl	800c3e6 <memset>
    HAL_Delay(100);
 8007126:	2064      	movs	r0, #100	; 0x64
 8007128:	f001 fa06 	bl	8008538 <HAL_Delay>

    int realCharPos = 1;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8007130:	2301      	movs	r3, #1
 8007132:	613b      	str	r3, [r7, #16]
    int page = 1;
 8007134:	2301      	movs	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 800713c:	2307      	movs	r3, #7
 800713e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007140:	2101      	movs	r1, #1
 8007142:	2003      	movs	r0, #3
 8007144:	f7f9 fdd0 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007148:	2108      	movs	r1, #8
 800714a:	48a0      	ldr	r0, [pc, #640]	; (80073cc <takeWifiPass+0x2bc>)
 800714c:	f001 ffc4 	bl	80090d8 <HAL_GPIO_ReadPin>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d138      	bne.n	80071c8 <takeWifiPass+0xb8>
            lcd_cursor(0);
 8007156:	2000      	movs	r0, #0
 8007158:	f000 fcf6 	bl	8007b48 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800715c:	489a      	ldr	r0, [pc, #616]	; (80073c8 <takeWifiPass+0x2b8>)
 800715e:	f7f9 f861 	bl	8000224 <strlen>
 8007162:	4603      	mov	r3, r0
 8007164:	2b14      	cmp	r3, #20
 8007166:	d910      	bls.n	800718a <takeWifiPass+0x7a>
                lcd_clear();
 8007168:	f000 fcbc 	bl	8007ae4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800716c:	4a98      	ldr	r2, [pc, #608]	; (80073d0 <takeWifiPass+0x2c0>)
 800716e:	2101      	movs	r1, #1
 8007170:	2001      	movs	r0, #1
 8007172:	f000 fc8b 	bl	8007a8c <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007176:	4a97      	ldr	r2, [pc, #604]	; (80073d4 <takeWifiPass+0x2c4>)
 8007178:	2101      	movs	r1, #1
 800717a:	2002      	movs	r0, #2
 800717c:	f000 fc86 	bl	8007a8c <lcd_print>
                HAL_Delay(1200);
 8007180:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007184:	f001 f9d8 	bl	8008538 <HAL_Delay>
                goto mainPASSSection;
 8007188:	e7c5      	b.n	8007116 <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 800718a:	4b93      	ldr	r3, [pc, #588]	; (80073d8 <takeWifiPass+0x2c8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a93      	ldr	r2, [pc, #588]	; (80073dc <takeWifiPass+0x2cc>)
 8007190:	189c      	adds	r4, r3, r2
 8007192:	488d      	ldr	r0, [pc, #564]	; (80073c8 <takeWifiPass+0x2b8>)
 8007194:	f7f9 f846 	bl	8000224 <strlen>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	498a      	ldr	r1, [pc, #552]	; (80073c8 <takeWifiPass+0x2b8>)
 800719e:	4620      	mov	r0, r4
 80071a0:	f005 f966 	bl	800c470 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	236e      	movs	r3, #110	; 0x6e
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	4b8b      	ldr	r3, [pc, #556]	; (80073dc <takeWifiPass+0x2cc>)
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	236e      	movs	r3, #110	; 0x6e
 80071b4:	2200      	movs	r2, #0
 80071b6:	21a0      	movs	r1, #160	; 0xa0
 80071b8:	4889      	ldr	r0, [pc, #548]	; (80073e0 <takeWifiPass+0x2d0>)
 80071ba:	f002 fa47 	bl	800964c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80071be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071c2:	f001 f9b9 	bl	8008538 <HAL_Delay>

            break;
 80071c6:	e11e      	b.n	8007406 <takeWifiPass+0x2f6>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071c8:	2101      	movs	r1, #1
 80071ca:	4880      	ldr	r0, [pc, #512]	; (80073cc <takeWifiPass+0x2bc>)
 80071cc:	f001 ff84 	bl	80090d8 <HAL_GPIO_ReadPin>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d150      	bne.n	8007278 <takeWifiPass+0x168>
        	realCharPos++;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	3301      	adds	r3, #1
 80071da:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b50      	cmp	r3, #80	; 0x50
 80071e0:	dd01      	ble.n	80071e6 <takeWifiPass+0xd6>
        	    realCharPos = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d13f      	bne.n	800726c <takeWifiPass+0x15c>
            	if(page == 1) {
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d109      	bne.n	8007206 <takeWifiPass+0xf6>
            		cursorPosition = 1;
 80071f2:	2301      	movs	r3, #1
 80071f4:	613b      	str	r3, [r7, #16]
            		page++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 80071fc:	2102      	movs	r1, #2
 80071fe:	2003      	movs	r0, #3
 8007200:	f7f9 fd72 	bl	8000ce8 <printTemplate>
 8007204:	e035      	b.n	8007272 <takeWifiPass+0x162>
            	} else if(page == 2) {
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d109      	bne.n	8007220 <takeWifiPass+0x110>
            		cursorPosition = 1;
 800720c:	2301      	movs	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
            		page++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 8007216:	2103      	movs	r1, #3
 8007218:	2003      	movs	r0, #3
 800721a:	f7f9 fd65 	bl	8000ce8 <printTemplate>
 800721e:	e028      	b.n	8007272 <takeWifiPass+0x162>
            	} else if(page == 3) {
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b03      	cmp	r3, #3
 8007224:	d109      	bne.n	800723a <takeWifiPass+0x12a>
            		cursorPosition = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	613b      	str	r3, [r7, #16]
            		page++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007230:	2104      	movs	r1, #4
 8007232:	2003      	movs	r0, #3
 8007234:	f7f9 fd58 	bl	8000ce8 <printTemplate>
 8007238:	e01b      	b.n	8007272 <takeWifiPass+0x162>
            	} else if(page == 4) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d109      	bne.n	8007254 <takeWifiPass+0x144>
            		cursorPosition = 1;
 8007240:	2301      	movs	r3, #1
 8007242:	613b      	str	r3, [r7, #16]
            		page++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 800724a:	2105      	movs	r1, #5
 800724c:	2003      	movs	r0, #3
 800724e:	f7f9 fd4b 	bl	8000ce8 <printTemplate>
 8007252:	e00e      	b.n	8007272 <takeWifiPass+0x162>
            	} else if(page == 5) {
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b05      	cmp	r3, #5
 8007258:	d10b      	bne.n	8007272 <takeWifiPass+0x162>
            		cursorPosition = 1;
 800725a:	2301      	movs	r3, #1
 800725c:	613b      	str	r3, [r7, #16]
            		page = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007262:	2101      	movs	r1, #1
 8007264:	2003      	movs	r0, #3
 8007266:	f7f9 fd3f 	bl	8000ce8 <printTemplate>
 800726a:	e002      	b.n	8007272 <takeWifiPass+0x162>
            	}
            } else {
            	cursorPosition++;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3301      	adds	r3, #1
 8007270:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007272:	2096      	movs	r0, #150	; 0x96
 8007274:	f001 f960 	bl	8008538 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007278:	2108      	movs	r1, #8
 800727a:	485a      	ldr	r0, [pc, #360]	; (80073e4 <takeWifiPass+0x2d4>)
 800727c:	f001 ff2c 	bl	80090d8 <HAL_GPIO_ReadPin>
 8007280:	4603      	mov	r3, r0
 8007282:	2b01      	cmp	r3, #1
 8007284:	d14c      	bne.n	8007320 <takeWifiPass+0x210>
        	realCharPos--;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	3b01      	subs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	dc01      	bgt.n	8007296 <takeWifiPass+0x186>
        	    realCharPos = 80;
 8007292:	2350      	movs	r3, #80	; 0x50
 8007294:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d13b      	bne.n	8007314 <takeWifiPass+0x204>
            	if(page == 1) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d108      	bne.n	80072b4 <takeWifiPass+0x1a4>
            		cursorPosition = 16;
 80072a2:	2310      	movs	r3, #16
 80072a4:	613b      	str	r3, [r7, #16]
            		page = 5;
 80072a6:	2305      	movs	r3, #5
 80072a8:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80072aa:	2105      	movs	r1, #5
 80072ac:	2003      	movs	r0, #3
 80072ae:	f7f9 fd1b 	bl	8000ce8 <printTemplate>
 80072b2:	e032      	b.n	800731a <takeWifiPass+0x20a>
            	} else if(page == 2) {
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d108      	bne.n	80072cc <takeWifiPass+0x1bc>
            		cursorPosition = 16;
 80072ba:	2310      	movs	r3, #16
 80072bc:	613b      	str	r3, [r7, #16]
            		page = 1;
 80072be:	2301      	movs	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80072c2:	2101      	movs	r1, #1
 80072c4:	2003      	movs	r0, #3
 80072c6:	f7f9 fd0f 	bl	8000ce8 <printTemplate>
 80072ca:	e026      	b.n	800731a <takeWifiPass+0x20a>
            	} else if(page == 3) {
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d108      	bne.n	80072e4 <takeWifiPass+0x1d4>
            		cursorPosition = 16;
 80072d2:	2310      	movs	r3, #16
 80072d4:	613b      	str	r3, [r7, #16]
            		page = 2;
 80072d6:	2302      	movs	r3, #2
 80072d8:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 80072da:	2102      	movs	r1, #2
 80072dc:	2003      	movs	r0, #3
 80072de:	f7f9 fd03 	bl	8000ce8 <printTemplate>
 80072e2:	e01a      	b.n	800731a <takeWifiPass+0x20a>
            	} else if(page == 4) {
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d108      	bne.n	80072fc <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 80072ea:	2310      	movs	r3, #16
 80072ec:	613b      	str	r3, [r7, #16]
            		page = 3;
 80072ee:	2303      	movs	r3, #3
 80072f0:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 80072f2:	2103      	movs	r1, #3
 80072f4:	2003      	movs	r0, #3
 80072f6:	f7f9 fcf7 	bl	8000ce8 <printTemplate>
 80072fa:	e00e      	b.n	800731a <takeWifiPass+0x20a>
            	} else if(page == 5) {
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d10b      	bne.n	800731a <takeWifiPass+0x20a>
            		cursorPosition = 16;
 8007302:	2310      	movs	r3, #16
 8007304:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007306:	2304      	movs	r3, #4
 8007308:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 800730a:	2104      	movs	r1, #4
 800730c:	2003      	movs	r0, #3
 800730e:	f7f9 fceb 	bl	8000ce8 <printTemplate>
 8007312:	e002      	b.n	800731a <takeWifiPass+0x20a>
            	}
            } else {
            	cursorPosition--;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3b01      	subs	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 800731a:	2096      	movs	r0, #150	; 0x96
 800731c:	f001 f90c 	bl	8008538 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007320:	2102      	movs	r1, #2
 8007322:	482a      	ldr	r0, [pc, #168]	; (80073cc <takeWifiPass+0x2bc>)
 8007324:	f001 fed8 	bl	80090d8 <HAL_GPIO_ReadPin>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d11e      	bne.n	800736c <takeWifiPass+0x25c>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	3b01      	subs	r3, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f7f9 f9fe 	bl	8000734 <getCharFromCursorPosition>
 8007338:	4603      	mov	r3, r0
 800733a:	4619      	mov	r1, r3
 800733c:	4a22      	ldr	r2, [pc, #136]	; (80073c8 <takeWifiPass+0x2b8>)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4413      	add	r3, r2
 8007342:	460a      	mov	r2, r1
 8007344:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	b2d9      	uxtb	r1, r3
 800734a:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <takeWifiPass+0x2b8>)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4413      	add	r3, r2
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	2001      	movs	r0, #1
 8007356:	f000 fbae 	bl	8007ab6 <lcd_print_char>

            writeLoc++;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3301      	adds	r3, #1
 800735e:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	3301      	adds	r3, #1
 8007364:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 8007366:	2096      	movs	r0, #150	; 0x96
 8007368:	f001 f8e6 	bl	8008538 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800736c:	2104      	movs	r1, #4
 800736e:	4817      	ldr	r0, [pc, #92]	; (80073cc <takeWifiPass+0x2bc>)
 8007370:	f001 feb2 	bl	80090d8 <HAL_GPIO_ReadPin>
 8007374:	4603      	mov	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d13e      	bne.n	80073f8 <takeWifiPass+0x2e8>
            if(strlen(wifiPass) >= 1) {
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <takeWifiPass+0x2b8>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d037      	beq.n	80073f2 <takeWifiPass+0x2e2>
            	wifiPass[wifiPassLoc] = '\0';
 8007382:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <takeWifiPass+0x2b8>)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	3306      	adds	r3, #6
 8007392:	b2db      	uxtb	r3, r3
 8007394:	4619      	mov	r1, r3
 8007396:	2001      	movs	r0, #1
 8007398:	f000 fbae 	bl	8007af8 <lcd_delete_char>
            	HAL_Delay(50);
 800739c:	2032      	movs	r0, #50	; 0x32
 800739e:	f001 f8cb 	bl	8008538 <HAL_Delay>

            	if(writeLoc > 7) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b07      	cmp	r3, #7
 80073a6:	dd03      	ble.n	80073b0 <takeWifiPass+0x2a0>
            		writeLoc--;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	e004      	b.n	80073ba <takeWifiPass+0x2aa>
            	} else if(writeLoc < 7) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b06      	cmp	r3, #6
 80073b4:	dc01      	bgt.n	80073ba <takeWifiPass+0x2aa>
            		writeLoc = 7;
 80073b6:	2307      	movs	r3, #7
 80073b8:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dd13      	ble.n	80073e8 <takeWifiPass+0x2d8>
            		wifiPassLoc--;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	e014      	b.n	80073f2 <takeWifiPass+0x2e2>
 80073c8:	200001b8 	.word	0x200001b8
 80073cc:	40010800 	.word	0x40010800
 80073d0:	0800da7c 	.word	0x0800da7c
 80073d4:	0800daa4 	.word	0x0800daa4
 80073d8:	2000000c 	.word	0x2000000c
 80073dc:	20000120 	.word	0x20000120
 80073e0:	20000284 	.word	0x20000284
 80073e4:	40011000 	.word	0x40011000
            	} else if(wifiPassLoc < 0) {
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da01      	bge.n	80073f2 <takeWifiPass+0x2e2>
            		wifiPassLoc = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(150);
 80073f2:	2096      	movs	r0, #150	; 0x96
 80073f4:	f001 f8a0 	bl	8008538 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	2002      	movs	r0, #2
 8007400:	f000 fb25 	bl	8007a4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007404:	e6a0      	b.n	8007148 <takeWifiPass+0x38>
    }
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	bd90      	pop	{r4, r7, pc}
 800740e:	bf00      	nop

08007410 <mergeData>:

char* mergeData() {
 8007410:	b580      	push	{r7, lr}
 8007412:	b09c      	sub	sp, #112	; 0x70
 8007414:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007416:	2300      	movs	r3, #0
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800741a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800741e:	2228      	movs	r2, #40	; 0x28
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f004 ffdf 	bl	800c3e6 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007428:	4b67      	ldr	r3, [pc, #412]	; (80075c8 <mergeData+0x1b8>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	713b      	strb	r3, [r7, #4]
 800742e:	4b67      	ldr	r3, [pc, #412]	; (80075cc <mergeData+0x1bc>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	717b      	strb	r3, [r7, #5]
 8007434:	4b66      	ldr	r3, [pc, #408]	; (80075d0 <mergeData+0x1c0>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	71bb      	strb	r3, [r7, #6]
 800743a:	4b66      	ldr	r3, [pc, #408]	; (80075d4 <mergeData+0x1c4>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
 8007440:	4b65      	ldr	r3, [pc, #404]	; (80075d8 <mergeData+0x1c8>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	723b      	strb	r3, [r7, #8]
 8007446:	4b65      	ldr	r3, [pc, #404]	; (80075dc <mergeData+0x1cc>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	727b      	strb	r3, [r7, #9]
 800744c:	4b64      	ldr	r3, [pc, #400]	; (80075e0 <mergeData+0x1d0>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	72bb      	strb	r3, [r7, #10]
 8007452:	4b64      	ldr	r3, [pc, #400]	; (80075e4 <mergeData+0x1d4>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	72fb      	strb	r3, [r7, #11]
 8007458:	4b63      	ldr	r3, [pc, #396]	; (80075e8 <mergeData+0x1d8>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	733b      	strb	r3, [r7, #12]
 800745e:	4b63      	ldr	r3, [pc, #396]	; (80075ec <mergeData+0x1dc>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	737b      	strb	r3, [r7, #13]
 8007464:	4b62      	ldr	r3, [pc, #392]	; (80075f0 <mergeData+0x1e0>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	73bb      	strb	r3, [r7, #14]
 800746a:	4b62      	ldr	r3, [pc, #392]	; (80075f4 <mergeData+0x1e4>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	4b61      	ldr	r3, [pc, #388]	; (80075f8 <mergeData+0x1e8>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	743b      	strb	r3, [r7, #16]
 8007476:	4b61      	ldr	r3, [pc, #388]	; (80075fc <mergeData+0x1ec>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	747b      	strb	r3, [r7, #17]
 800747c:	4b60      	ldr	r3, [pc, #384]	; (8007600 <mergeData+0x1f0>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	74bb      	strb	r3, [r7, #18]
 8007482:	4b60      	ldr	r3, [pc, #384]	; (8007604 <mergeData+0x1f4>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	74fb      	strb	r3, [r7, #19]
 8007488:	4b5f      	ldr	r3, [pc, #380]	; (8007608 <mergeData+0x1f8>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	753b      	strb	r3, [r7, #20]
 800748e:	4b5f      	ldr	r3, [pc, #380]	; (800760c <mergeData+0x1fc>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	757b      	strb	r3, [r7, #21]
 8007494:	4b5e      	ldr	r3, [pc, #376]	; (8007610 <mergeData+0x200>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	75bb      	strb	r3, [r7, #22]
 800749a:	4b5e      	ldr	r3, [pc, #376]	; (8007614 <mergeData+0x204>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	75fb      	strb	r3, [r7, #23]
 80074a0:	4b5d      	ldr	r3, [pc, #372]	; (8007618 <mergeData+0x208>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	763b      	strb	r3, [r7, #24]
 80074a6:	4b5d      	ldr	r3, [pc, #372]	; (800761c <mergeData+0x20c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	767b      	strb	r3, [r7, #25]
 80074ac:	4b5c      	ldr	r3, [pc, #368]	; (8007620 <mergeData+0x210>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	76bb      	strb	r3, [r7, #26]
 80074b2:	4b5c      	ldr	r3, [pc, #368]	; (8007624 <mergeData+0x214>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	76fb      	strb	r3, [r7, #27]
 80074b8:	4b5b      	ldr	r3, [pc, #364]	; (8007628 <mergeData+0x218>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	773b      	strb	r3, [r7, #28]
 80074be:	4b5b      	ldr	r3, [pc, #364]	; (800762c <mergeData+0x21c>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	777b      	strb	r3, [r7, #29]
 80074c4:	4b5a      	ldr	r3, [pc, #360]	; (8007630 <mergeData+0x220>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	77bb      	strb	r3, [r7, #30]
 80074ca:	4b5a      	ldr	r3, [pc, #360]	; (8007634 <mergeData+0x224>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	4b59      	ldr	r3, [pc, #356]	; (8007638 <mergeData+0x228>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f887 3020 	strb.w	r3, [r7, #32]
 80074d8:	4b58      	ldr	r3, [pc, #352]	; (800763c <mergeData+0x22c>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80074e0:	4b57      	ldr	r3, [pc, #348]	; (8007640 <mergeData+0x230>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074e8:	4b56      	ldr	r3, [pc, #344]	; (8007644 <mergeData+0x234>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f0:	4b55      	ldr	r3, [pc, #340]	; (8007648 <mergeData+0x238>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80074f8:	4b54      	ldr	r3, [pc, #336]	; (800764c <mergeData+0x23c>)
 80074fa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80074fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007502:	4b52      	ldr	r3, [pc, #328]	; (800764c <mergeData+0x23c>)
 8007504:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007508:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 800750c:	4b4f      	ldr	r3, [pc, #316]	; (800764c <mergeData+0x23c>)
 800750e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007516:	4b4d      	ldr	r3, [pc, #308]	; (800764c <mergeData+0x23c>)
 8007518:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800751c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007520:	4b4a      	ldr	r3, [pc, #296]	; (800764c <mergeData+0x23c>)
 8007522:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007526:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800752a:	4b48      	ldr	r3, [pc, #288]	; (800764c <mergeData+0x23c>)
 800752c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007534:	4b45      	ldr	r3, [pc, #276]	; (800764c <mergeData+0x23c>)
 8007536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800753e:	4b43      	ldr	r3, [pc, #268]	; (800764c <mergeData+0x23c>)
 8007540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007544:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007548:	4b40      	ldr	r3, [pc, #256]	; (800764c <mergeData+0x23c>)
 800754a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800754e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007552:	4b3e      	ldr	r3, [pc, #248]	; (800764c <mergeData+0x23c>)
 8007554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007558:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800755c:	2306      	movs	r3, #6
 800755e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007562:	2300      	movs	r3, #0
 8007564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007566:	e015      	b.n	8007594 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007568:	1d3a      	adds	r2, r7, #4
 800756a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756c:	4413      	add	r3, r2
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007576:	4936      	ldr	r1, [pc, #216]	; (8007650 <mergeData+0x240>)
 8007578:	4618      	mov	r0, r3
 800757a:	f004 fec3 	bl	800c304 <siprintf>
	    strcat(combinedString, temp);
 800757e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007582:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f004 ff1d 	bl	800c3c8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800758e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007590:	3301      	adds	r3, #1
 8007592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007596:	2b2b      	cmp	r3, #43	; 0x2b
 8007598:	d9e6      	bls.n	8007568 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800759a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800759e:	4618      	mov	r0, r3
 80075a0:	f7f8 fe40 	bl	8000224 <strlen>
 80075a4:	4603      	mov	r3, r0
 80075a6:	3301      	adds	r3, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	f004 fdc3 	bl	800c134 <malloc>
 80075ae:	4603      	mov	r3, r0
 80075b0:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80075b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075b6:	4619      	mov	r1, r3
 80075b8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80075ba:	f004 ff67 	bl	800c48c <strcpy>
	return result;
 80075be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3770      	adds	r7, #112	; 0x70
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000203 	.word	0x20000203
 80075cc:	200001f5 	.word	0x200001f5
 80075d0:	200001f8 	.word	0x200001f8
 80075d4:	200001f9 	.word	0x200001f9
 80075d8:	200001fa 	.word	0x200001fa
 80075dc:	20000201 	.word	0x20000201
 80075e0:	200001fb 	.word	0x200001fb
 80075e4:	200001fc 	.word	0x200001fc
 80075e8:	20000200 	.word	0x20000200
 80075ec:	200001fd 	.word	0x200001fd
 80075f0:	2000020d 	.word	0x2000020d
 80075f4:	200001fe 	.word	0x200001fe
 80075f8:	2000020e 	.word	0x2000020e
 80075fc:	200001ff 	.word	0x200001ff
 8007600:	2000020f 	.word	0x2000020f
 8007604:	20000202 	.word	0x20000202
 8007608:	20000204 	.word	0x20000204
 800760c:	20000205 	.word	0x20000205
 8007610:	20000206 	.word	0x20000206
 8007614:	20000207 	.word	0x20000207
 8007618:	20000208 	.word	0x20000208
 800761c:	20000209 	.word	0x20000209
 8007620:	2000020a 	.word	0x2000020a
 8007624:	2000020b 	.word	0x2000020b
 8007628:	2000020c 	.word	0x2000020c
 800762c:	20000210 	.word	0x20000210
 8007630:	20000212 	.word	0x20000212
 8007634:	200001f1 	.word	0x200001f1
 8007638:	200001f2 	.word	0x200001f2
 800763c:	20000000 	.word	0x20000000
 8007640:	20000001 	.word	0x20000001
 8007644:	200001f3 	.word	0x200001f3
 8007648:	20000215 	.word	0x20000215
 800764c:	20000120 	.word	0x20000120
 8007650:	0800dab8 	.word	0x0800dab8

08007654 <convertAndSendData>:

void convertAndSendData() {
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800765a:	4b1a      	ldr	r3, [pc, #104]	; (80076c4 <convertAndSendData+0x70>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007662:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <convertAndSendData+0x74>)
 8007664:	2101      	movs	r1, #1
 8007666:	2001      	movs	r0, #1
 8007668:	f000 fa10 	bl	8007a8c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800766c:	4a17      	ldr	r2, [pc, #92]	; (80076cc <convertAndSendData+0x78>)
 800766e:	2101      	movs	r1, #1
 8007670:	2002      	movs	r0, #2
 8007672:	f000 fa0b 	bl	8007a8c <lcd_print>
 8007676:	e009      	b.n	800768c <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007678:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <convertAndSendData+0x7c>)
 800767a:	2101      	movs	r1, #1
 800767c:	2001      	movs	r0, #1
 800767e:	f000 fa05 	bl	8007a8c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007682:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <convertAndSendData+0x80>)
 8007684:	2101      	movs	r1, #1
 8007686:	2002      	movs	r0, #2
 8007688:	f000 fa00 	bl	8007a8c <lcd_print>
	}
	for(int i=0; i<2; i++) {
 800768c:	2300      	movs	r3, #0
 800768e:	607b      	str	r3, [r7, #4]
 8007690:	e00a      	b.n	80076a8 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007692:	f7ff febd 	bl	8007410 <mergeData>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	490f      	ldr	r1, [pc, #60]	; (80076d8 <convertAndSendData+0x84>)
 800769c:	480f      	ldr	r0, [pc, #60]	; (80076dc <convertAndSendData+0x88>)
 800769e:	f7f9 f8b1 	bl	8000804 <sendMachineData>
	for(int i=0; i<2; i++) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3301      	adds	r3, #1
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	ddf1      	ble.n	8007692 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80076ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076b2:	f000 ff41 	bl	8008538 <HAL_Delay>
	lcd_clear();
 80076b6:	f000 fa15 	bl	8007ae4 <lcd_clear>
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000215 	.word	0x20000215
 80076c8:	0800dabc 	.word	0x0800dabc
 80076cc:	0800dad0 	.word	0x0800dad0
 80076d0:	0800dae4 	.word	0x0800dae4
 80076d4:	0800daf8 	.word	0x0800daf8
 80076d8:	20000198 	.word	0x20000198
 80076dc:	20000320 	.word	0x20000320

080076e0 <iotSetup>:

void iotSetup() {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80076e4:	4b18      	ldr	r3, [pc, #96]	; (8007748 <iotSetup+0x68>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01f      	beq.n	800772c <iotSetup+0x4c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 80076ec:	4817      	ldr	r0, [pc, #92]	; (800774c <iotSetup+0x6c>)
 80076ee:	f7f8 fd99 	bl	8000224 <strlen>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d001      	beq.n	80076fc <iotSetup+0x1c>
			takeMachineID();
 80076f8:	f7ff fa34 	bl	8006b64 <takeMachineID>
		}
		HAL_Delay(500);
 80076fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007700:	f000 ff1a 	bl	8008538 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007704:	4b12      	ldr	r3, [pc, #72]	; (8007750 <iotSetup+0x70>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <iotSetup+0x30>
			takeWifiSSID();
 800770c:	f7ff fb80 	bl	8006e10 <takeWifiSSID>
		}
		HAL_Delay(500);
 8007710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007714:	f000 ff10 	bl	8008538 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 8007718:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <iotSetup+0x74>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <iotSetup+0x44>
			takeWifiPass();
 8007720:	f7ff fcf6 	bl	8007110 <takeWifiPass>
		}
		HAL_Delay(500);
 8007724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007728:	f000 ff06 	bl	8008538 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 800772c:	4a09      	ldr	r2, [pc, #36]	; (8007754 <iotSetup+0x74>)
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <iotSetup+0x70>)
 8007730:	4809      	ldr	r0, [pc, #36]	; (8007758 <iotSetup+0x78>)
 8007732:	f7f9 f829 	bl	8000788 <ESP8266_Init>
	HAL_Delay(500);
 8007736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800773a:	f000 fefd 	bl	8008538 <HAL_Delay>
	convertAndSendData();
 800773e:	f7ff ff89 	bl	8007654 <convertAndSendData>
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000213 	.word	0x20000213
 800774c:	20000198 	.word	0x20000198
 8007750:	200001a4 	.word	0x200001a4
 8007754:	200001b8 	.word	0x200001b8
 8007758:	20000320 	.word	0x20000320

0800775c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af02      	add	r7, sp, #8
 8007762:	4603      	mov	r3, r0
 8007764:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	f023 030f 	bic.w	r3, r3, #15
 800776c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007774:	7b7b      	ldrb	r3, [r7, #13]
 8007776:	f043 030c 	orr.w	r3, r3, #12
 800777a:	b2db      	uxtb	r3, r3
 800777c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800777e:	7b7b      	ldrb	r3, [r7, #13]
 8007780:	f043 0308 	orr.w	r3, r3, #8
 8007784:	b2db      	uxtb	r3, r3
 8007786:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007788:	7b3b      	ldrb	r3, [r7, #12]
 800778a:	f043 030c 	orr.w	r3, r3, #12
 800778e:	b2db      	uxtb	r3, r3
 8007790:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007792:	7b3b      	ldrb	r3, [r7, #12]
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	b2db      	uxtb	r3, r3
 800779a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800779c:	bf00      	nop
 800779e:	4825      	ldr	r0, [pc, #148]	; (8007834 <lcd_send_cmd+0xd8>)
 80077a0:	f002 fac3 	bl	8009d2a <HAL_I2C_GetError>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d0f9      	beq.n	800779e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077aa:	bf00      	nop
 80077ac:	4821      	ldr	r0, [pc, #132]	; (8007834 <lcd_send_cmd+0xd8>)
 80077ae:	f002 faaf 	bl	8009d10 <HAL_I2C_GetState>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d1f9      	bne.n	80077ac <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80077b8:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <lcd_send_cmd+0xdc>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d116      	bne.n	80077ee <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	e00f      	b.n	80077e6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	3310      	adds	r3, #16
 80077ca:	443b      	add	r3, r7
 80077cc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	f022 0208 	bic.w	r2, r2, #8
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	3310      	adds	r3, #16
 80077da:	443b      	add	r3, r7
 80077dc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	3301      	adds	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d9ec      	bls.n	80077c6 <lcd_send_cmd+0x6a>
 80077ec:	e015      	b.n	800781a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80077ee:	2300      	movs	r3, #0
 80077f0:	73bb      	strb	r3, [r7, #14]
 80077f2:	e00f      	b.n	8007814 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	3310      	adds	r3, #16
 80077f8:	443b      	add	r3, r7
 80077fa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f042 0208 	orr.w	r2, r2, #8
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	3310      	adds	r3, #16
 8007808:	443b      	add	r3, r7
 800780a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	3301      	adds	r3, #1
 8007812:	73bb      	strb	r3, [r7, #14]
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d9ec      	bls.n	80077f4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	2364      	movs	r3, #100	; 0x64
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2304      	movs	r3, #4
 8007824:	214e      	movs	r1, #78	; 0x4e
 8007826:	4803      	ldr	r0, [pc, #12]	; (8007834 <lcd_send_cmd+0xd8>)
 8007828:	f001 fe12 	bl	8009450 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000284 	.word	0x20000284
 8007838:	20000258 	.word	0x20000258

0800783c <lcd_send_data>:

void lcd_send_data (char data) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af02      	add	r7, sp, #8
 8007842:	4603      	mov	r3, r0
 8007844:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	f023 030f 	bic.w	r3, r3, #15
 800784c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007854:	7b7b      	ldrb	r3, [r7, #13]
 8007856:	f043 030d 	orr.w	r3, r3, #13
 800785a:	b2db      	uxtb	r3, r3
 800785c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800785e:	7b7b      	ldrb	r3, [r7, #13]
 8007860:	f043 0309 	orr.w	r3, r3, #9
 8007864:	b2db      	uxtb	r3, r3
 8007866:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007868:	7b3b      	ldrb	r3, [r7, #12]
 800786a:	f043 030d 	orr.w	r3, r3, #13
 800786e:	b2db      	uxtb	r3, r3
 8007870:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007872:	7b3b      	ldrb	r3, [r7, #12]
 8007874:	f043 0309 	orr.w	r3, r3, #9
 8007878:	b2db      	uxtb	r3, r3
 800787a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800787c:	bf00      	nop
 800787e:	4825      	ldr	r0, [pc, #148]	; (8007914 <lcd_send_data+0xd8>)
 8007880:	f002 fa53 	bl	8009d2a <HAL_I2C_GetError>
 8007884:	4603      	mov	r3, r0
 8007886:	2b04      	cmp	r3, #4
 8007888:	d0f9      	beq.n	800787e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800788a:	bf00      	nop
 800788c:	4821      	ldr	r0, [pc, #132]	; (8007914 <lcd_send_data+0xd8>)
 800788e:	f002 fa3f 	bl	8009d10 <HAL_I2C_GetState>
 8007892:	4603      	mov	r3, r0
 8007894:	2b20      	cmp	r3, #32
 8007896:	d1f9      	bne.n	800788c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007898:	4b1f      	ldr	r3, [pc, #124]	; (8007918 <lcd_send_data+0xdc>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d116      	bne.n	80078ce <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
 80078a4:	e00f      	b.n	80078c6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	3310      	adds	r3, #16
 80078aa:	443b      	add	r3, r7
 80078ac:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	f022 0208 	bic.w	r2, r2, #8
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	3310      	adds	r3, #16
 80078ba:	443b      	add	r3, r7
 80078bc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	3301      	adds	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d9ec      	bls.n	80078a6 <lcd_send_data+0x6a>
 80078cc:	e015      	b.n	80078fa <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80078ce:	2300      	movs	r3, #0
 80078d0:	73bb      	strb	r3, [r7, #14]
 80078d2:	e00f      	b.n	80078f4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	3310      	adds	r3, #16
 80078d8:	443b      	add	r3, r7
 80078da:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	f042 0208 	orr.w	r2, r2, #8
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	3310      	adds	r3, #16
 80078e8:	443b      	add	r3, r7
 80078ea:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	3301      	adds	r3, #1
 80078f2:	73bb      	strb	r3, [r7, #14]
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d9ec      	bls.n	80078d4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80078fa:	f107 0208 	add.w	r2, r7, #8
 80078fe:	2364      	movs	r3, #100	; 0x64
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	2304      	movs	r3, #4
 8007904:	214e      	movs	r1, #78	; 0x4e
 8007906:	4803      	ldr	r0, [pc, #12]	; (8007914 <lcd_send_data+0xd8>)
 8007908:	f001 fda2 	bl	8009450 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000284 	.word	0x20000284
 8007918:	20000258 	.word	0x20000258

0800791c <lcd_send_string>:

void lcd_send_string (char *str) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007924:	e006      	b.n	8007934 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff ff84 	bl	800783c <lcd_send_data>
	while (*str) {
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f4      	bne.n	8007926 <lcd_send_string+0xa>
	}
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	f023 030f 	bic.w	r3, r3, #15
 8007958:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007960:	7b7b      	ldrb	r3, [r7, #13]
 8007962:	f043 030d 	orr.w	r3, r3, #13
 8007966:	b2db      	uxtb	r3, r3
 8007968:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	f043 0309 	orr.w	r3, r3, #9
 8007970:	b2db      	uxtb	r3, r3
 8007972:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007974:	7b3b      	ldrb	r3, [r7, #12]
 8007976:	f043 030d 	orr.w	r3, r3, #13
 800797a:	b2db      	uxtb	r3, r3
 800797c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800797e:	7b3b      	ldrb	r3, [r7, #12]
 8007980:	f043 0309 	orr.w	r3, r3, #9
 8007984:	b2db      	uxtb	r3, r3
 8007986:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007988:	bf00      	nop
 800798a:	4825      	ldr	r0, [pc, #148]	; (8007a20 <lcd_send_char+0xd8>)
 800798c:	f002 f9cd 	bl	8009d2a <HAL_I2C_GetError>
 8007990:	4603      	mov	r3, r0
 8007992:	2b04      	cmp	r3, #4
 8007994:	d0f9      	beq.n	800798a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007996:	bf00      	nop
 8007998:	4821      	ldr	r0, [pc, #132]	; (8007a20 <lcd_send_char+0xd8>)
 800799a:	f002 f9b9 	bl	8009d10 <HAL_I2C_GetState>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d1f9      	bne.n	8007998 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80079a4:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <lcd_send_char+0xdc>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d116      	bne.n	80079da <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
 80079b0:	e00f      	b.n	80079d2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	3310      	adds	r3, #16
 80079b6:	443b      	add	r3, r7
 80079b8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	f022 0208 	bic.w	r2, r2, #8
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	3310      	adds	r3, #16
 80079c6:	443b      	add	r3, r7
 80079c8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	3301      	adds	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d9ec      	bls.n	80079b2 <lcd_send_char+0x6a>
 80079d8:	e015      	b.n	8007a06 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80079da:	2300      	movs	r3, #0
 80079dc:	73bb      	strb	r3, [r7, #14]
 80079de:	e00f      	b.n	8007a00 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	3310      	adds	r3, #16
 80079e4:	443b      	add	r3, r7
 80079e6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	f042 0208 	orr.w	r2, r2, #8
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	3310      	adds	r3, #16
 80079f4:	443b      	add	r3, r7
 80079f6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	3301      	adds	r3, #1
 80079fe:	73bb      	strb	r3, [r7, #14]
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d9ec      	bls.n	80079e0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007a06:	f107 0208 	add.w	r2, r7, #8
 8007a0a:	2364      	movs	r3, #100	; 0x64
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	2304      	movs	r3, #4
 8007a10:	214e      	movs	r1, #78	; 0x4e
 8007a12:	4803      	ldr	r0, [pc, #12]	; (8007a20 <lcd_send_char+0xd8>)
 8007a14:	f001 fd1c 	bl	8009450 <HAL_I2C_Master_Transmit>
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000284 	.word	0x20000284
 8007a24:	20000258 	.word	0x20000258

08007a28 <lcd_init>:

void lcd_init (void) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007a2c:	2002      	movs	r0, #2
 8007a2e:	f7ff fe95 	bl	800775c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007a32:	2028      	movs	r0, #40	; 0x28
 8007a34:	f7ff fe92 	bl	800775c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007a38:	200c      	movs	r0, #12
 8007a3a:	f7ff fe8f 	bl	800775c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007a3e:	2080      	movs	r0, #128	; 0x80
 8007a40:	f7ff fe8c 	bl	800775c <lcd_send_cmd>
	lcd_backlight(1);
 8007a44:	2001      	movs	r0, #1
 8007a46:	f000 f86d 	bl	8007b24 <lcd_backlight>
}
 8007a4a:	bf00      	nop
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	4603      	mov	r3, r0
 8007a56:	460a      	mov	r2, r1
 8007a58:	71fb      	strb	r3, [r7, #7]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d106      	bne.n	8007a72 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007a64:	79bb      	ldrb	r3, [r7, #6]
 8007a66:	337f      	adds	r3, #127	; 0x7f
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fe76 	bl	800775c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007a70:	e008      	b.n	8007a84 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d105      	bne.n	8007a84 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007a78:	79bb      	ldrb	r3, [r7, #6]
 8007a7a:	3b41      	subs	r3, #65	; 0x41
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fe6c 	bl	800775c <lcd_send_cmd>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	603a      	str	r2, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007a9c:	79ba      	ldrb	r2, [r7, #6]
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff ffd3 	bl	8007a4e <lcd_gotoxy>
	lcd_send_string(str);
 8007aa8:	6838      	ldr	r0, [r7, #0]
 8007aaa:	f7ff ff37 	bl	800791c <lcd_send_string>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	4603      	mov	r3, r0
 8007abe:	71fb      	strb	r3, [r7, #7]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	71bb      	strb	r3, [r7, #6]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007ac8:	79ba      	ldrb	r2, [r7, #6]
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff ffbd 	bl	8007a4e <lcd_gotoxy>
    lcd_send_char(ch);
 8007ad4:	797b      	ldrb	r3, [r7, #5]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff ff36 	bl	8007948 <lcd_send_char>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <lcd_clear>:

void lcd_clear(void) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f7ff fe37 	bl	800775c <lcd_send_cmd>
    HAL_Delay(2);
 8007aee:	2002      	movs	r0, #2
 8007af0:	f000 fd22 	bl	8008538 <HAL_Delay>
}
 8007af4:	bf00      	nop
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	460a      	mov	r2, r1
 8007b02:	71fb      	strb	r3, [r7, #7]
 8007b04:	4613      	mov	r3, r2
 8007b06:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007b08:	79ba      	ldrb	r2, [r7, #6]
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ff9d 	bl	8007a4e <lcd_gotoxy>

    lcd_send_char(' ');
 8007b14:	2020      	movs	r0, #32
 8007b16:	f7ff ff17 	bl	8007948 <lcd_send_char>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007b2e:	4a05      	ldr	r2, [pc, #20]	; (8007b44 <lcd_backlight+0x20>)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007b34:	2000      	movs	r0, #0
 8007b36:	f7ff fe11 	bl	800775c <lcd_send_cmd>
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000258 	.word	0x20000258

08007b48 <lcd_cursor>:

void lcd_cursor(int state) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d106      	bne.n	8007b64 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007b56:	200e      	movs	r0, #14
 8007b58:	f7ff fe00 	bl	800775c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007b5c:	200f      	movs	r0, #15
 8007b5e:	f7ff fdfd 	bl	800775c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007b62:	e002      	b.n	8007b6a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007b64:	200c      	movs	r0, #12
 8007b66:	f7ff fdf9 	bl	800775c <lcd_send_cmd>
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	4a03      	ldr	r2, [pc, #12]	; (8007b90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b84:	6013      	str	r3, [r2, #0]
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr
 8007b90:	200001d0 	.word	0x200001d0

08007b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b98:	f000 fc6c 	bl	8008474 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ba0:	f000 fcca 	bl	8008538 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ba4:	f000 f89c 	bl	8007ce0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ba8:	f000 f9be 	bl	8007f28 <MX_GPIO_Init>
  MX_CAN_Init();
 8007bac:	f000 f8de 	bl	8007d6c <MX_CAN_Init>
  MX_I2C1_Init();
 8007bb0:	f000 f910 	bl	8007dd4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007bb4:	f000 f93c 	bl	8007e30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007bb8:	f000 f98c 	bl	8007ed4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	2140      	movs	r1, #64	; 0x40
 8007bc0:	483e      	ldr	r0, [pc, #248]	; (8007cbc <main+0x128>)
 8007bc2:	f001 faa0 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	2180      	movs	r1, #128	; 0x80
 8007bca:	483c      	ldr	r0, [pc, #240]	; (8007cbc <main+0x128>)
 8007bcc:	f001 fa9b 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007bd0:	200a      	movs	r0, #10
 8007bd2:	f000 fcb1 	bl	8008538 <HAL_Delay>
  lcd_init();
 8007bd6:	f7ff ff27 	bl	8007a28 <lcd_init>
  HAL_Delay(10);
 8007bda:	200a      	movs	r0, #10
 8007bdc:	f000 fcac 	bl	8008538 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007be0:	4837      	ldr	r0, [pc, #220]	; (8007cc0 <main+0x12c>)
 8007be2:	f003 f943 	bl	800ae6c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007be6:	bf00      	nop
 8007be8:	4836      	ldr	r0, [pc, #216]	; (8007cc4 <main+0x130>)
 8007bea:	f002 f89e 	bl	8009d2a <HAL_I2C_GetError>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d0f9      	beq.n	8007be8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bf4:	bf00      	nop
 8007bf6:	4833      	ldr	r0, [pc, #204]	; (8007cc4 <main+0x130>)
 8007bf8:	f002 f88a 	bl	8009d10 <HAL_I2C_GetState>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	d1f9      	bne.n	8007bf6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007c02:	2200      	movs	r2, #0
 8007c04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c08:	482c      	ldr	r0, [pc, #176]	; (8007cbc <main+0x128>)
 8007c0a:	f001 fa7c 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c14:	4829      	ldr	r0, [pc, #164]	; (8007cbc <main+0x128>)
 8007c16:	f001 fa76 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2104      	movs	r1, #4
 8007c1e:	4827      	ldr	r0, [pc, #156]	; (8007cbc <main+0x128>)
 8007c20:	f001 fa71 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2102      	movs	r1, #2
 8007c28:	4824      	ldr	r0, [pc, #144]	; (8007cbc <main+0x128>)
 8007c2a:	f001 fa6c 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2101      	movs	r1, #1
 8007c32:	4822      	ldr	r0, [pc, #136]	; (8007cbc <main+0x128>)
 8007c34:	f001 fa67 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2120      	movs	r1, #32
 8007c3c:	4822      	ldr	r0, [pc, #136]	; (8007cc8 <main+0x134>)
 8007c3e:	f001 fa62 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c42:	2200      	movs	r2, #0
 8007c44:	2110      	movs	r1, #16
 8007c46:	4820      	ldr	r0, [pc, #128]	; (8007cc8 <main+0x134>)
 8007c48:	f001 fa5d 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2180      	movs	r1, #128	; 0x80
 8007c50:	481e      	ldr	r0, [pc, #120]	; (8007ccc <main+0x138>)
 8007c52:	f001 fa58 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2140      	movs	r1, #64	; 0x40
 8007c5a:	481c      	ldr	r0, [pc, #112]	; (8007ccc <main+0x138>)
 8007c5c:	f001 fa53 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2120      	movs	r1, #32
 8007c64:	4819      	ldr	r0, [pc, #100]	; (8007ccc <main+0x138>)
 8007c66:	f001 fa4e 	bl	8009106 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2110      	movs	r1, #16
 8007c6e:	4817      	ldr	r0, [pc, #92]	; (8007ccc <main+0x138>)
 8007c70:	f001 fa49 	bl	8009106 <HAL_GPIO_WritePin>

  i2cTest();
 8007c74:	f7f8 ff8a 	bl	8000b8c <i2cTest>
  HAL_Delay(100);
 8007c78:	2064      	movs	r0, #100	; 0x64
 8007c7a:	f000 fc5d 	bl	8008538 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007c7e:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <main+0x13c>)
 8007c80:	2101      	movs	r1, #1
 8007c82:	2001      	movs	r0, #1
 8007c84:	f7ff ff02 	bl	8007a8c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007c88:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <main+0x140>)
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	2002      	movs	r0, #2
 8007c8e:	f7ff fefd 	bl	8007a8c <lcd_print>
  HAL_Delay(1000);
 8007c92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c96:	f000 fc4f 	bl	8008538 <HAL_Delay>
  lcd_clear();
 8007c9a:	f7ff ff23 	bl	8007ae4 <lcd_clear>

  eepromKontrol();
 8007c9e:	f7f8 fac9 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ca6:	f000 fc47 	bl	8008538 <HAL_Delay>

  backLightTimer = millis;
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <main+0x144>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a0b      	ldr	r2, [pc, #44]	; (8007cdc <main+0x148>)
 8007cb0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007cb2:	f7ff fd15 	bl	80076e0 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007cb6:	f7fe fdbd 	bl	8006834 <mainLoop>
 8007cba:	e7fc      	b.n	8007cb6 <main+0x122>
 8007cbc:	40010c00 	.word	0x40010c00
 8007cc0:	200002d8 	.word	0x200002d8
 8007cc4:	20000284 	.word	0x20000284
 8007cc8:	40011000 	.word	0x40011000
 8007ccc:	40010800 	.word	0x40010800
 8007cd0:	0800db0c 	.word	0x0800db0c
 8007cd4:	0800db20 	.word	0x0800db20
 8007cd8:	200001d0 	.word	0x200001d0
 8007cdc:	200001ec 	.word	0x200001ec

08007ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b090      	sub	sp, #64	; 0x40
 8007ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	2228      	movs	r2, #40	; 0x28
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f004 fb79 	bl	800c3e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007cf4:	1d3b      	adds	r3, r7, #4
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	605a      	str	r2, [r3, #4]
 8007cfc:	609a      	str	r2, [r3, #8]
 8007cfe:	60da      	str	r2, [r3, #12]
 8007d00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d02:	2301      	movs	r3, #1
 8007d04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d10:	2301      	movs	r3, #1
 8007d12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d14:	2302      	movs	r3, #2
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007d1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d24:	f107 0318 	add.w	r3, r7, #24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f002 fc3f 	bl	800a5ac <HAL_RCC_OscConfig>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007d34:	f000 f9a2 	bl	800807c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d38:	230f      	movs	r3, #15
 8007d3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007d4e:	1d3b      	adds	r3, r7, #4
 8007d50:	2102      	movs	r1, #2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 feac 	bl	800aab0 <HAL_RCC_ClockConfig>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007d5e:	f000 f98d 	bl	800807c <Error_Handler>
  }
}
 8007d62:	bf00      	nop
 8007d64:	3740      	adds	r7, #64	; 0x40
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007d70:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d72:	4a17      	ldr	r2, [pc, #92]	; (8007dd0 <MX_CAN_Init+0x64>)
 8007d74:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007d76:	4b15      	ldr	r3, [pc, #84]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d78:	2210      	movs	r2, #16
 8007d7a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007d7c:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d82:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007d88:	4b10      	ldr	r3, [pc, #64]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007d9a:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <MX_CAN_Init+0x60>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <MX_CAN_Init+0x60>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <MX_CAN_Init+0x60>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007dac:	4b07      	ldr	r3, [pc, #28]	; (8007dcc <MX_CAN_Init+0x60>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <MX_CAN_Init+0x60>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007db8:	4804      	ldr	r0, [pc, #16]	; (8007dcc <MX_CAN_Init+0x60>)
 8007dba:	f000 fbe1 	bl	8008580 <HAL_CAN_Init>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007dc4:	f000 f95a 	bl	800807c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007dc8:	bf00      	nop
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	2000025c 	.word	0x2000025c
 8007dd0:	40006400 	.word	0x40006400

08007dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007dd8:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007dda:	4a13      	ldr	r2, [pc, #76]	; (8007e28 <MX_I2C1_Init+0x54>)
 8007ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007de0:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <MX_I2C1_Init+0x58>)
 8007de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007df0:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e10:	4804      	ldr	r0, [pc, #16]	; (8007e24 <MX_I2C1_Init+0x50>)
 8007e12:	f001 f9a9 	bl	8009168 <HAL_I2C_Init>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e1c:	f000 f92e 	bl	800807c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000284 	.word	0x20000284
 8007e28:	40005400 	.word	0x40005400
 8007e2c:	00061a80 	.word	0x00061a80

08007e30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	605a      	str	r2, [r3, #4]
 8007e40:	609a      	str	r2, [r3, #8]
 8007e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e44:	463b      	mov	r3, r7
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007e4c:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e4e:	4a20      	ldr	r2, [pc, #128]	; (8007ed0 <MX_TIM1_Init+0xa0>)
 8007e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007e52:	4b1e      	ldr	r3, [pc, #120]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e54:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e5a:	4b1c      	ldr	r3, [pc, #112]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007e60:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e62:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e68:	4b18      	ldr	r3, [pc, #96]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e6e:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007e7a:	4814      	ldr	r0, [pc, #80]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e7c:	f002 ffa6 	bl	800adcc <HAL_TIM_Base_Init>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007e86:	f000 f8f9 	bl	800807c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007e90:	f107 0308 	add.w	r3, r7, #8
 8007e94:	4619      	mov	r1, r3
 8007e96:	480d      	ldr	r0, [pc, #52]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007e98:	f003 f950 	bl	800b13c <HAL_TIM_ConfigClockSource>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007ea2:	f000 f8eb 	bl	800807c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007eae:	463b      	mov	r3, r7
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4806      	ldr	r0, [pc, #24]	; (8007ecc <MX_TIM1_Init+0x9c>)
 8007eb4:	f003 fb3e 	bl	800b534 <HAL_TIMEx_MasterConfigSynchronization>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007ebe:	f000 f8dd 	bl	800807c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007ec2:	bf00      	nop
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	200002d8 	.word	0x200002d8
 8007ed0:	40012c00 	.word	0x40012c00

08007ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ed8:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <MX_USART1_UART_Init+0x50>)
 8007edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007ede:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ee6:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007eec:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ef8:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007efa:	220c      	movs	r2, #12
 8007efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f04:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f0a:	4805      	ldr	r0, [pc, #20]	; (8007f20 <MX_USART1_UART_Init+0x4c>)
 8007f0c:	f003 fb90 	bl	800b630 <HAL_UART_Init>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f16:	f000 f8b1 	bl	800807c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000320 	.word	0x20000320
 8007f24:	40013800 	.word	0x40013800

08007f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f2e:	f107 0310 	add.w	r3, r7, #16
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	609a      	str	r2, [r3, #8]
 8007f3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f3c:	4b4b      	ldr	r3, [pc, #300]	; (800806c <MX_GPIO_Init+0x144>)
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	4a4a      	ldr	r2, [pc, #296]	; (800806c <MX_GPIO_Init+0x144>)
 8007f42:	f043 0310 	orr.w	r3, r3, #16
 8007f46:	6193      	str	r3, [r2, #24]
 8007f48:	4b48      	ldr	r3, [pc, #288]	; (800806c <MX_GPIO_Init+0x144>)
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f54:	4b45      	ldr	r3, [pc, #276]	; (800806c <MX_GPIO_Init+0x144>)
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	4a44      	ldr	r2, [pc, #272]	; (800806c <MX_GPIO_Init+0x144>)
 8007f5a:	f043 0320 	orr.w	r3, r3, #32
 8007f5e:	6193      	str	r3, [r2, #24]
 8007f60:	4b42      	ldr	r3, [pc, #264]	; (800806c <MX_GPIO_Init+0x144>)
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6c:	4b3f      	ldr	r3, [pc, #252]	; (800806c <MX_GPIO_Init+0x144>)
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	4a3e      	ldr	r2, [pc, #248]	; (800806c <MX_GPIO_Init+0x144>)
 8007f72:	f043 0304 	orr.w	r3, r3, #4
 8007f76:	6193      	str	r3, [r2, #24]
 8007f78:	4b3c      	ldr	r3, [pc, #240]	; (800806c <MX_GPIO_Init+0x144>)
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f84:	4b39      	ldr	r3, [pc, #228]	; (800806c <MX_GPIO_Init+0x144>)
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	4a38      	ldr	r2, [pc, #224]	; (800806c <MX_GPIO_Init+0x144>)
 8007f8a:	f043 0308 	orr.w	r3, r3, #8
 8007f8e:	6193      	str	r3, [r2, #24]
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <MX_GPIO_Init+0x144>)
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	603b      	str	r3, [r7, #0]
 8007f9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	21f0      	movs	r1, #240	; 0xf0
 8007fa0:	4833      	ldr	r0, [pc, #204]	; (8008070 <MX_GPIO_Init+0x148>)
 8007fa2:	f001 f8b0 	bl	8009106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f241 0130 	movw	r1, #4144	; 0x1030
 8007fac:	4831      	ldr	r0, [pc, #196]	; (8008074 <MX_GPIO_Init+0x14c>)
 8007fae:	f001 f8aa 	bl	8009106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f640 4107 	movw	r1, #3079	; 0xc07
 8007fb8:	482f      	ldr	r0, [pc, #188]	; (8008078 <MX_GPIO_Init+0x150>)
 8007fba:	f001 f8a4 	bl	8009106 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007fbe:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007fc2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fcc:	f107 0310 	add.w	r3, r7, #16
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4828      	ldr	r0, [pc, #160]	; (8008074 <MX_GPIO_Init+0x14c>)
 8007fd4:	f000 fe20 	bl	8008c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007fd8:	f248 130f 	movw	r3, #33039	; 0x810f
 8007fdc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe6:	f107 0310 	add.w	r3, r7, #16
 8007fea:	4619      	mov	r1, r3
 8007fec:	4820      	ldr	r0, [pc, #128]	; (8008070 <MX_GPIO_Init+0x148>)
 8007fee:	f000 fe13 	bl	8008c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007ff2:	23f0      	movs	r3, #240	; 0xf0
 8007ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ffe:	2302      	movs	r3, #2
 8008000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008002:	f107 0310 	add.w	r3, r7, #16
 8008006:	4619      	mov	r1, r3
 8008008:	4819      	ldr	r0, [pc, #100]	; (8008070 <MX_GPIO_Init+0x148>)
 800800a:	f000 fe05 	bl	8008c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800800e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800801c:	2302      	movs	r3, #2
 800801e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008020:	f107 0310 	add.w	r3, r7, #16
 8008024:	4619      	mov	r1, r3
 8008026:	4813      	ldr	r0, [pc, #76]	; (8008074 <MX_GPIO_Init+0x14c>)
 8008028:	f000 fdf6 	bl	8008c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800802c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008030:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800803a:	2302      	movs	r3, #2
 800803c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800803e:	f107 0310 	add.w	r3, r7, #16
 8008042:	4619      	mov	r1, r3
 8008044:	480c      	ldr	r0, [pc, #48]	; (8008078 <MX_GPIO_Init+0x150>)
 8008046:	f000 fde7 	bl	8008c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800804a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800804e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008054:	2300      	movs	r3, #0
 8008056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008058:	f107 0310 	add.w	r3, r7, #16
 800805c:	4619      	mov	r1, r3
 800805e:	4806      	ldr	r0, [pc, #24]	; (8008078 <MX_GPIO_Init+0x150>)
 8008060:	f000 fdda 	bl	8008c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008064:	bf00      	nop
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40021000 	.word	0x40021000
 8008070:	40010800 	.word	0x40010800
 8008074:	40011000 	.word	0x40011000
 8008078:	40010c00 	.word	0x40010c00

0800807c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800808e:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <HAL_MspInit+0x5c>)
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	4a14      	ldr	r2, [pc, #80]	; (80080e4 <HAL_MspInit+0x5c>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	6193      	str	r3, [r2, #24]
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <HAL_MspInit+0x5c>)
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	60bb      	str	r3, [r7, #8]
 80080a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <HAL_MspInit+0x5c>)
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	4a0e      	ldr	r2, [pc, #56]	; (80080e4 <HAL_MspInit+0x5c>)
 80080ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b0:	61d3      	str	r3, [r2, #28]
 80080b2:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <HAL_MspInit+0x5c>)
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80080be:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <HAL_MspInit+0x60>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	4a04      	ldr	r2, [pc, #16]	; (80080e8 <HAL_MspInit+0x60>)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080da:	bf00      	nop
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr
 80080e4:	40021000 	.word	0x40021000
 80080e8:	40010000 	.word	0x40010000

080080ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f4:	f107 0310 	add.w	r3, r7, #16
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	609a      	str	r2, [r3, #8]
 8008100:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1c      	ldr	r2, [pc, #112]	; (8008178 <HAL_CAN_MspInit+0x8c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d131      	bne.n	8008170 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800810c:	4b1b      	ldr	r3, [pc, #108]	; (800817c <HAL_CAN_MspInit+0x90>)
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	4a1a      	ldr	r2, [pc, #104]	; (800817c <HAL_CAN_MspInit+0x90>)
 8008112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008116:	61d3      	str	r3, [r2, #28]
 8008118:	4b18      	ldr	r3, [pc, #96]	; (800817c <HAL_CAN_MspInit+0x90>)
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008124:	4b15      	ldr	r3, [pc, #84]	; (800817c <HAL_CAN_MspInit+0x90>)
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	4a14      	ldr	r2, [pc, #80]	; (800817c <HAL_CAN_MspInit+0x90>)
 800812a:	f043 0304 	orr.w	r3, r3, #4
 800812e:	6193      	str	r3, [r2, #24]
 8008130:	4b12      	ldr	r3, [pc, #72]	; (800817c <HAL_CAN_MspInit+0x90>)
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	60bb      	str	r3, [r7, #8]
 800813a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800813c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008146:	2300      	movs	r3, #0
 8008148:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	4619      	mov	r1, r3
 8008150:	480b      	ldr	r0, [pc, #44]	; (8008180 <HAL_CAN_MspInit+0x94>)
 8008152:	f000 fd61 	bl	8008c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800815a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800815c:	2302      	movs	r3, #2
 800815e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008160:	2303      	movs	r3, #3
 8008162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008164:	f107 0310 	add.w	r3, r7, #16
 8008168:	4619      	mov	r1, r3
 800816a:	4805      	ldr	r0, [pc, #20]	; (8008180 <HAL_CAN_MspInit+0x94>)
 800816c:	f000 fd54 	bl	8008c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008170:	bf00      	nop
 8008172:	3720      	adds	r7, #32
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40006400 	.word	0x40006400
 800817c:	40021000 	.word	0x40021000
 8008180:	40010800 	.word	0x40010800

08008184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818c:	f107 0310 	add.w	r3, r7, #16
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a15      	ldr	r2, [pc, #84]	; (80081f4 <HAL_I2C_MspInit+0x70>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d123      	bne.n	80081ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a4:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <HAL_I2C_MspInit+0x74>)
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	4a13      	ldr	r2, [pc, #76]	; (80081f8 <HAL_I2C_MspInit+0x74>)
 80081aa:	f043 0308 	orr.w	r3, r3, #8
 80081ae:	6193      	str	r3, [r2, #24]
 80081b0:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <HAL_I2C_MspInit+0x74>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081bc:	23c0      	movs	r3, #192	; 0xc0
 80081be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081c0:	2312      	movs	r3, #18
 80081c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081c4:	2303      	movs	r3, #3
 80081c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081c8:	f107 0310 	add.w	r3, r7, #16
 80081cc:	4619      	mov	r1, r3
 80081ce:	480b      	ldr	r0, [pc, #44]	; (80081fc <HAL_I2C_MspInit+0x78>)
 80081d0:	f000 fd22 	bl	8008c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081d4:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <HAL_I2C_MspInit+0x74>)
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	4a07      	ldr	r2, [pc, #28]	; (80081f8 <HAL_I2C_MspInit+0x74>)
 80081da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081de:	61d3      	str	r3, [r2, #28]
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <HAL_I2C_MspInit+0x74>)
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e8:	60bb      	str	r3, [r7, #8]
 80081ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80081ec:	bf00      	nop
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40005400 	.word	0x40005400
 80081f8:	40021000 	.word	0x40021000
 80081fc:	40010c00 	.word	0x40010c00

08008200 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a0a      	ldr	r2, [pc, #40]	; (8008238 <HAL_I2C_MspDeInit+0x38>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d10d      	bne.n	800822e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <HAL_I2C_MspDeInit+0x3c>)
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	4a09      	ldr	r2, [pc, #36]	; (800823c <HAL_I2C_MspDeInit+0x3c>)
 8008218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800821c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800821e:	2140      	movs	r1, #64	; 0x40
 8008220:	4807      	ldr	r0, [pc, #28]	; (8008240 <HAL_I2C_MspDeInit+0x40>)
 8008222:	f000 fe8d 	bl	8008f40 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008226:	2180      	movs	r1, #128	; 0x80
 8008228:	4805      	ldr	r0, [pc, #20]	; (8008240 <HAL_I2C_MspDeInit+0x40>)
 800822a:	f000 fe89 	bl	8008f40 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40005400 	.word	0x40005400
 800823c:	40021000 	.word	0x40021000
 8008240:	40010c00 	.word	0x40010c00

08008244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0d      	ldr	r2, [pc, #52]	; (8008288 <HAL_TIM_Base_MspInit+0x44>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d113      	bne.n	800827e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008256:	4b0d      	ldr	r3, [pc, #52]	; (800828c <HAL_TIM_Base_MspInit+0x48>)
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	4a0c      	ldr	r2, [pc, #48]	; (800828c <HAL_TIM_Base_MspInit+0x48>)
 800825c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008260:	6193      	str	r3, [r2, #24]
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <HAL_TIM_Base_MspInit+0x48>)
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800826e:	2200      	movs	r2, #0
 8008270:	2100      	movs	r1, #0
 8008272:	2019      	movs	r0, #25
 8008274:	f000 fb57 	bl	8008926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008278:	2019      	movs	r0, #25
 800827a:	f000 fb70 	bl	800895e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	40012c00 	.word	0x40012c00
 800828c:	40021000 	.word	0x40021000

08008290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008298:	f107 0310 	add.w	r3, r7, #16
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	605a      	str	r2, [r3, #4]
 80082a2:	609a      	str	r2, [r3, #8]
 80082a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a20      	ldr	r2, [pc, #128]	; (800832c <HAL_UART_MspInit+0x9c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d139      	bne.n	8008324 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082b0:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <HAL_UART_MspInit+0xa0>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <HAL_UART_MspInit+0xa0>)
 80082b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082ba:	6193      	str	r3, [r2, #24]
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <HAL_UART_MspInit+0xa0>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c8:	4b19      	ldr	r3, [pc, #100]	; (8008330 <HAL_UART_MspInit+0xa0>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	4a18      	ldr	r2, [pc, #96]	; (8008330 <HAL_UART_MspInit+0xa0>)
 80082ce:	f043 0304 	orr.w	r3, r3, #4
 80082d2:	6193      	str	r3, [r2, #24]
 80082d4:	4b16      	ldr	r3, [pc, #88]	; (8008330 <HAL_UART_MspInit+0xa0>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80082e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e6:	2302      	movs	r3, #2
 80082e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082ea:	2303      	movs	r3, #3
 80082ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ee:	f107 0310 	add.w	r3, r7, #16
 80082f2:	4619      	mov	r1, r3
 80082f4:	480f      	ldr	r0, [pc, #60]	; (8008334 <HAL_UART_MspInit+0xa4>)
 80082f6:	f000 fc8f 	bl	8008c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80082fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008304:	2300      	movs	r3, #0
 8008306:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	4619      	mov	r1, r3
 800830e:	4809      	ldr	r0, [pc, #36]	; (8008334 <HAL_UART_MspInit+0xa4>)
 8008310:	f000 fc82 	bl	8008c18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	2025      	movs	r0, #37	; 0x25
 800831a:	f000 fb04 	bl	8008926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800831e:	2025      	movs	r0, #37	; 0x25
 8008320:	f000 fb1d 	bl	800895e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008324:	bf00      	nop
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40013800 	.word	0x40013800
 8008330:	40021000 	.word	0x40021000
 8008334:	40010800 	.word	0x40010800

08008338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800833c:	e7fe      	b.n	800833c <NMI_Handler+0x4>

0800833e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800833e:	b480      	push	{r7}
 8008340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008342:	e7fe      	b.n	8008342 <HardFault_Handler+0x4>

08008344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008348:	e7fe      	b.n	8008348 <MemManage_Handler+0x4>

0800834a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800834a:	b480      	push	{r7}
 800834c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800834e:	e7fe      	b.n	800834e <BusFault_Handler+0x4>

08008350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008354:	e7fe      	b.n	8008354 <UsageFault_Handler+0x4>

08008356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008356:	b480      	push	{r7}
 8008358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800835a:	bf00      	nop
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008362:	b480      	push	{r7}
 8008364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008366:	bf00      	nop
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr

0800836e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800836e:	b480      	push	{r7}
 8008370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008372:	bf00      	nop
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr

0800837a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800837e:	f000 f8bf 	bl	8008500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800838c:	4802      	ldr	r0, [pc, #8]	; (8008398 <TIM1_UP_IRQHandler+0x10>)
 800838e:	f002 fdcd 	bl	800af2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200002d8 	.word	0x200002d8

0800839c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80083a0:	4802      	ldr	r0, [pc, #8]	; (80083ac <USART1_IRQHandler+0x10>)
 80083a2:	f003 f9cb 	bl	800b73c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80083a6:	bf00      	nop
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000320 	.word	0x20000320

080083b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083b8:	4a14      	ldr	r2, [pc, #80]	; (800840c <_sbrk+0x5c>)
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <_sbrk+0x60>)
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083c4:	4b13      	ldr	r3, [pc, #76]	; (8008414 <_sbrk+0x64>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <_sbrk+0x64>)
 80083ce:	4a12      	ldr	r2, [pc, #72]	; (8008418 <_sbrk+0x68>)
 80083d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <_sbrk+0x64>)
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d207      	bcs.n	80083f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083e0:	f004 f81a 	bl	800c418 <__errno>
 80083e4:	4603      	mov	r3, r0
 80083e6:	220c      	movs	r2, #12
 80083e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ee:	e009      	b.n	8008404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083f0:	4b08      	ldr	r3, [pc, #32]	; (8008414 <_sbrk+0x64>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <_sbrk+0x64>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	4a05      	ldr	r2, [pc, #20]	; (8008414 <_sbrk+0x64>)
 8008400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008402:	68fb      	ldr	r3, [r7, #12]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	2000c000 	.word	0x2000c000
 8008410:	00000400 	.word	0x00000400
 8008414:	20000368 	.word	0x20000368
 8008418:	200004b8 	.word	0x200004b8

0800841c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008420:	bf00      	nop
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr

08008428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008428:	480c      	ldr	r0, [pc, #48]	; (800845c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800842a:	490d      	ldr	r1, [pc, #52]	; (8008460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800842c:	4a0d      	ldr	r2, [pc, #52]	; (8008464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800842e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008430:	e002      	b.n	8008438 <LoopCopyDataInit>

08008432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008436:	3304      	adds	r3, #4

08008438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800843a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800843c:	d3f9      	bcc.n	8008432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008440:	4c0a      	ldr	r4, [pc, #40]	; (800846c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008444:	e001      	b.n	800844a <LoopFillZerobss>

08008446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008448:	3204      	adds	r2, #4

0800844a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800844a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800844c:	d3fb      	bcc.n	8008446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800844e:	f7ff ffe5 	bl	800841c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008452:	f003 ffe7 	bl	800c424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008456:	f7ff fb9d 	bl	8007b94 <main>
  bx lr
 800845a:	4770      	bx	lr
  ldr r0, =_sdata
 800845c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008460:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8008464:	0800dbc0 	.word	0x0800dbc0
  ldr r2, =_sbss
 8008468:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800846c:	200004b8 	.word	0x200004b8

08008470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008470:	e7fe      	b.n	8008470 <ADC1_2_IRQHandler>
	...

08008474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008478:	4b08      	ldr	r3, [pc, #32]	; (800849c <HAL_Init+0x28>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a07      	ldr	r2, [pc, #28]	; (800849c <HAL_Init+0x28>)
 800847e:	f043 0310 	orr.w	r3, r3, #16
 8008482:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008484:	2003      	movs	r0, #3
 8008486:	f000 fa43 	bl	8008910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800848a:	200f      	movs	r0, #15
 800848c:	f000 f808 	bl	80084a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008490:	f7ff fdfa 	bl	8008088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40022000 	.word	0x40022000

080084a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <HAL_InitTick+0x54>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <HAL_InitTick+0x58>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa5b 	bl	800897a <HAL_SYSTICK_Config>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e00e      	b.n	80084ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b0f      	cmp	r3, #15
 80084d2:	d80a      	bhi.n	80084ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084d4:	2200      	movs	r2, #0
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084dc:	f000 fa23 	bl	8008926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084e0:	4a06      	ldr	r2, [pc, #24]	; (80084fc <HAL_InitTick+0x5c>)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e000      	b.n	80084ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	200000a8 	.word	0x200000a8
 80084f8:	200000b0 	.word	0x200000b0
 80084fc:	200000ac 	.word	0x200000ac

08008500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_IncTick+0x1c>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	4b05      	ldr	r3, [pc, #20]	; (8008520 <HAL_IncTick+0x20>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4413      	add	r3, r2
 8008510:	4a03      	ldr	r2, [pc, #12]	; (8008520 <HAL_IncTick+0x20>)
 8008512:	6013      	str	r3, [r2, #0]
}
 8008514:	bf00      	nop
 8008516:	46bd      	mov	sp, r7
 8008518:	bc80      	pop	{r7}
 800851a:	4770      	bx	lr
 800851c:	200000b0 	.word	0x200000b0
 8008520:	2000036c 	.word	0x2000036c

08008524 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  return uwTick;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <HAL_GetTick+0x10>)
 800852a:	681b      	ldr	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	2000036c 	.word	0x2000036c

08008538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008540:	f7ff fff0 	bl	8008524 <HAL_GetTick>
 8008544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008550:	d005      	beq.n	800855e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <HAL_Delay+0x44>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800855e:	bf00      	nop
 8008560:	f7ff ffe0 	bl	8008524 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	429a      	cmp	r2, r3
 800856e:	d8f7      	bhi.n	8008560 <HAL_Delay+0x28>
  {
  }
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	200000b0 	.word	0x200000b0

08008580 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e0ed      	b.n	800876e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fda4 	bl	80080ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085b4:	f7ff ffb6 	bl	8008524 <HAL_GetTick>
 80085b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085ba:	e012      	b.n	80085e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085bc:	f7ff ffb2 	bl	8008524 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b0a      	cmp	r3, #10
 80085c8:	d90b      	bls.n	80085e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2205      	movs	r2, #5
 80085da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e0c5      	b.n	800876e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0e5      	beq.n	80085bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0202 	bic.w	r2, r2, #2
 80085fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008600:	f7ff ff90 	bl	8008524 <HAL_GetTick>
 8008604:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008606:	e012      	b.n	800862e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008608:	f7ff ff8c 	bl	8008524 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b0a      	cmp	r3, #10
 8008614:	d90b      	bls.n	800862e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2205      	movs	r2, #5
 8008626:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e09f      	b.n	800876e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7e1b      	ldrb	r3, [r3, #24]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d108      	bne.n	8008656 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e007      	b.n	8008666 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7e5b      	ldrb	r3, [r3, #25]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d108      	bne.n	8008680 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e007      	b.n	8008690 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800868e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7e9b      	ldrb	r3, [r3, #26]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d108      	bne.n	80086aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0220 	orr.w	r2, r2, #32
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	e007      	b.n	80086ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0220 	bic.w	r2, r2, #32
 80086b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7edb      	ldrb	r3, [r3, #27]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d108      	bne.n	80086d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0210 	bic.w	r2, r2, #16
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	e007      	b.n	80086e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0210 	orr.w	r2, r2, #16
 80086e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7f1b      	ldrb	r3, [r3, #28]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d108      	bne.n	80086fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0208 	orr.w	r2, r2, #8
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e007      	b.n	800870e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0208 	bic.w	r2, r2, #8
 800870c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7f5b      	ldrb	r3, [r3, #29]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d108      	bne.n	8008728 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0204 	orr.w	r2, r2, #4
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e007      	b.n	8008738 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0204 	bic.w	r2, r2, #4
 8008736:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	ea42 0103 	orr.w	r1, r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	1e5a      	subs	r2, r3, #1
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <__NVIC_SetPriorityGrouping>:
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008788:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <__NVIC_SetPriorityGrouping+0x44>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008794:	4013      	ands	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087aa:	4a04      	ldr	r2, [pc, #16]	; (80087bc <__NVIC_SetPriorityGrouping+0x44>)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	60d3      	str	r3, [r2, #12]
}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	e000ed00 	.word	0xe000ed00

080087c0 <__NVIC_GetPriorityGrouping>:
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087c4:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <__NVIC_GetPriorityGrouping+0x18>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	0a1b      	lsrs	r3, r3, #8
 80087ca:	f003 0307 	and.w	r3, r3, #7
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	e000ed00 	.word	0xe000ed00

080087dc <__NVIC_EnableIRQ>:
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db0b      	blt.n	8008806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	f003 021f 	and.w	r2, r3, #31
 80087f4:	4906      	ldr	r1, [pc, #24]	; (8008810 <__NVIC_EnableIRQ+0x34>)
 80087f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	2001      	movs	r0, #1
 80087fe:	fa00 f202 	lsl.w	r2, r0, r2
 8008802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr
 8008810:	e000e100 	.word	0xe000e100

08008814 <__NVIC_SetPriority>:
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008824:	2b00      	cmp	r3, #0
 8008826:	db0a      	blt.n	800883e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	490c      	ldr	r1, [pc, #48]	; (8008860 <__NVIC_SetPriority+0x4c>)
 800882e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008832:	0112      	lsls	r2, r2, #4
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	440b      	add	r3, r1
 8008838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800883c:	e00a      	b.n	8008854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	b2da      	uxtb	r2, r3
 8008842:	4908      	ldr	r1, [pc, #32]	; (8008864 <__NVIC_SetPriority+0x50>)
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	3b04      	subs	r3, #4
 800884c:	0112      	lsls	r2, r2, #4
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	440b      	add	r3, r1
 8008852:	761a      	strb	r2, [r3, #24]
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	e000e100 	.word	0xe000e100
 8008864:	e000ed00 	.word	0xe000ed00

08008868 <NVIC_EncodePriority>:
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	; 0x24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f1c3 0307 	rsb	r3, r3, #7
 8008882:	2b04      	cmp	r3, #4
 8008884:	bf28      	it	cs
 8008886:	2304      	movcs	r3, #4
 8008888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	3304      	adds	r3, #4
 800888e:	2b06      	cmp	r3, #6
 8008890:	d902      	bls.n	8008898 <NVIC_EncodePriority+0x30>
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	3b03      	subs	r3, #3
 8008896:	e000      	b.n	800889a <NVIC_EncodePriority+0x32>
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800889c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	43da      	mvns	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	401a      	ands	r2, r3
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ba:	43d9      	mvns	r1, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088c0:	4313      	orrs	r3, r2
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3724      	adds	r7, #36	; 0x24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr

080088cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088dc:	d301      	bcc.n	80088e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088de:	2301      	movs	r3, #1
 80088e0:	e00f      	b.n	8008902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088e2:	4a0a      	ldr	r2, [pc, #40]	; (800890c <SysTick_Config+0x40>)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088ea:	210f      	movs	r1, #15
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f0:	f7ff ff90 	bl	8008814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088f4:	4b05      	ldr	r3, [pc, #20]	; (800890c <SysTick_Config+0x40>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088fa:	4b04      	ldr	r3, [pc, #16]	; (800890c <SysTick_Config+0x40>)
 80088fc:	2207      	movs	r2, #7
 80088fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	e000e010 	.word	0xe000e010

08008910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff ff2d 	bl	8008778 <__NVIC_SetPriorityGrouping>
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008926:	b580      	push	{r7, lr}
 8008928:	b086      	sub	sp, #24
 800892a:	af00      	add	r7, sp, #0
 800892c:	4603      	mov	r3, r0
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008934:	2300      	movs	r3, #0
 8008936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008938:	f7ff ff42 	bl	80087c0 <__NVIC_GetPriorityGrouping>
 800893c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	6978      	ldr	r0, [r7, #20]
 8008944:	f7ff ff90 	bl	8008868 <NVIC_EncodePriority>
 8008948:	4602      	mov	r2, r0
 800894a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff ff5f 	bl	8008814 <__NVIC_SetPriority>
}
 8008956:	bf00      	nop
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	4603      	mov	r3, r0
 8008966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff ff35 	bl	80087dc <__NVIC_EnableIRQ>
}
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff ffa2 	bl	80088cc <SysTick_Config>
 8008988:	4603      	mov	r3, r0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d008      	beq.n	80089bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2204      	movs	r2, #4
 80089ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e020      	b.n	80089fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 020e 	bic.w	r2, r2, #14
 80089ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0201 	bic.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f202 	lsl.w	r2, r1, r2
 80089ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d005      	beq.n	8008a2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2204      	movs	r2, #4
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	e0d6      	b.n	8008bda <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 020e 	bic.w	r2, r2, #14
 8008a3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0201 	bic.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	4b64      	ldr	r3, [pc, #400]	; (8008be4 <HAL_DMA_Abort_IT+0x1dc>)
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d958      	bls.n	8008b0a <HAL_DMA_Abort_IT+0x102>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a62      	ldr	r2, [pc, #392]	; (8008be8 <HAL_DMA_Abort_IT+0x1e0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d04f      	beq.n	8008b02 <HAL_DMA_Abort_IT+0xfa>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a61      	ldr	r2, [pc, #388]	; (8008bec <HAL_DMA_Abort_IT+0x1e4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d048      	beq.n	8008afe <HAL_DMA_Abort_IT+0xf6>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a5f      	ldr	r2, [pc, #380]	; (8008bf0 <HAL_DMA_Abort_IT+0x1e8>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d040      	beq.n	8008af8 <HAL_DMA_Abort_IT+0xf0>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a5e      	ldr	r2, [pc, #376]	; (8008bf4 <HAL_DMA_Abort_IT+0x1ec>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d038      	beq.n	8008af2 <HAL_DMA_Abort_IT+0xea>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a5c      	ldr	r2, [pc, #368]	; (8008bf8 <HAL_DMA_Abort_IT+0x1f0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d030      	beq.n	8008aec <HAL_DMA_Abort_IT+0xe4>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a5b      	ldr	r2, [pc, #364]	; (8008bfc <HAL_DMA_Abort_IT+0x1f4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d028      	beq.n	8008ae6 <HAL_DMA_Abort_IT+0xde>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a52      	ldr	r2, [pc, #328]	; (8008be4 <HAL_DMA_Abort_IT+0x1dc>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d020      	beq.n	8008ae0 <HAL_DMA_Abort_IT+0xd8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a57      	ldr	r2, [pc, #348]	; (8008c00 <HAL_DMA_Abort_IT+0x1f8>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d019      	beq.n	8008adc <HAL_DMA_Abort_IT+0xd4>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a55      	ldr	r2, [pc, #340]	; (8008c04 <HAL_DMA_Abort_IT+0x1fc>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d012      	beq.n	8008ad8 <HAL_DMA_Abort_IT+0xd0>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a54      	ldr	r2, [pc, #336]	; (8008c08 <HAL_DMA_Abort_IT+0x200>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00a      	beq.n	8008ad2 <HAL_DMA_Abort_IT+0xca>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a52      	ldr	r2, [pc, #328]	; (8008c0c <HAL_DMA_Abort_IT+0x204>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d102      	bne.n	8008acc <HAL_DMA_Abort_IT+0xc4>
 8008ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aca:	e01b      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ad0:	e018      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ad6:	e015      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	e013      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e011      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ae4:	e00e      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008ae6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008aea:	e00b      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008af0:	e008      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af6:	e005      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008afc:	e002      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008afe:	2310      	movs	r3, #16
 8008b00:	e000      	b.n	8008b04 <HAL_DMA_Abort_IT+0xfc>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4a42      	ldr	r2, [pc, #264]	; (8008c10 <HAL_DMA_Abort_IT+0x208>)
 8008b06:	6053      	str	r3, [r2, #4]
 8008b08:	e057      	b.n	8008bba <HAL_DMA_Abort_IT+0x1b2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a36      	ldr	r2, [pc, #216]	; (8008be8 <HAL_DMA_Abort_IT+0x1e0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d04f      	beq.n	8008bb4 <HAL_DMA_Abort_IT+0x1ac>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a34      	ldr	r2, [pc, #208]	; (8008bec <HAL_DMA_Abort_IT+0x1e4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d048      	beq.n	8008bb0 <HAL_DMA_Abort_IT+0x1a8>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a33      	ldr	r2, [pc, #204]	; (8008bf0 <HAL_DMA_Abort_IT+0x1e8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d040      	beq.n	8008baa <HAL_DMA_Abort_IT+0x1a2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a31      	ldr	r2, [pc, #196]	; (8008bf4 <HAL_DMA_Abort_IT+0x1ec>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d038      	beq.n	8008ba4 <HAL_DMA_Abort_IT+0x19c>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a30      	ldr	r2, [pc, #192]	; (8008bf8 <HAL_DMA_Abort_IT+0x1f0>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d030      	beq.n	8008b9e <HAL_DMA_Abort_IT+0x196>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a2e      	ldr	r2, [pc, #184]	; (8008bfc <HAL_DMA_Abort_IT+0x1f4>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d028      	beq.n	8008b98 <HAL_DMA_Abort_IT+0x190>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a26      	ldr	r2, [pc, #152]	; (8008be4 <HAL_DMA_Abort_IT+0x1dc>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d020      	beq.n	8008b92 <HAL_DMA_Abort_IT+0x18a>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a2a      	ldr	r2, [pc, #168]	; (8008c00 <HAL_DMA_Abort_IT+0x1f8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d019      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x186>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a29      	ldr	r2, [pc, #164]	; (8008c04 <HAL_DMA_Abort_IT+0x1fc>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d012      	beq.n	8008b8a <HAL_DMA_Abort_IT+0x182>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a27      	ldr	r2, [pc, #156]	; (8008c08 <HAL_DMA_Abort_IT+0x200>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00a      	beq.n	8008b84 <HAL_DMA_Abort_IT+0x17c>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a26      	ldr	r2, [pc, #152]	; (8008c0c <HAL_DMA_Abort_IT+0x204>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d102      	bne.n	8008b7e <HAL_DMA_Abort_IT+0x176>
 8008b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b7c:	e01b      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b82:	e018      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b88:	e015      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b8a:	2310      	movs	r3, #16
 8008b8c:	e013      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e011      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b96:	e00e      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b9c:	e00b      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ba2:	e008      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba8:	e005      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bae:	e002      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	e000      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1ae>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4a17      	ldr	r2, [pc, #92]	; (8008c14 <HAL_DMA_Abort_IT+0x20c>)
 8008bb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
    } 
  }
  return status;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	40020080 	.word	0x40020080
 8008be8:	40020008 	.word	0x40020008
 8008bec:	4002001c 	.word	0x4002001c
 8008bf0:	40020030 	.word	0x40020030
 8008bf4:	40020044 	.word	0x40020044
 8008bf8:	40020058 	.word	0x40020058
 8008bfc:	4002006c 	.word	0x4002006c
 8008c00:	40020408 	.word	0x40020408
 8008c04:	4002041c 	.word	0x4002041c
 8008c08:	40020430 	.word	0x40020430
 8008c0c:	40020444 	.word	0x40020444
 8008c10:	40020400 	.word	0x40020400
 8008c14:	40020000 	.word	0x40020000

08008c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b08b      	sub	sp, #44	; 0x2c
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c22:	2300      	movs	r3, #0
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008c26:	2300      	movs	r3, #0
 8008c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c2a:	e179      	b.n	8008f20 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	f040 8168 	bne.w	8008f1a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4a96      	ldr	r2, [pc, #600]	; (8008ea8 <HAL_GPIO_Init+0x290>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d05e      	beq.n	8008d12 <HAL_GPIO_Init+0xfa>
 8008c54:	4a94      	ldr	r2, [pc, #592]	; (8008ea8 <HAL_GPIO_Init+0x290>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d875      	bhi.n	8008d46 <HAL_GPIO_Init+0x12e>
 8008c5a:	4a94      	ldr	r2, [pc, #592]	; (8008eac <HAL_GPIO_Init+0x294>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d058      	beq.n	8008d12 <HAL_GPIO_Init+0xfa>
 8008c60:	4a92      	ldr	r2, [pc, #584]	; (8008eac <HAL_GPIO_Init+0x294>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d86f      	bhi.n	8008d46 <HAL_GPIO_Init+0x12e>
 8008c66:	4a92      	ldr	r2, [pc, #584]	; (8008eb0 <HAL_GPIO_Init+0x298>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d052      	beq.n	8008d12 <HAL_GPIO_Init+0xfa>
 8008c6c:	4a90      	ldr	r2, [pc, #576]	; (8008eb0 <HAL_GPIO_Init+0x298>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d869      	bhi.n	8008d46 <HAL_GPIO_Init+0x12e>
 8008c72:	4a90      	ldr	r2, [pc, #576]	; (8008eb4 <HAL_GPIO_Init+0x29c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d04c      	beq.n	8008d12 <HAL_GPIO_Init+0xfa>
 8008c78:	4a8e      	ldr	r2, [pc, #568]	; (8008eb4 <HAL_GPIO_Init+0x29c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d863      	bhi.n	8008d46 <HAL_GPIO_Init+0x12e>
 8008c7e:	4a8e      	ldr	r2, [pc, #568]	; (8008eb8 <HAL_GPIO_Init+0x2a0>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d046      	beq.n	8008d12 <HAL_GPIO_Init+0xfa>
 8008c84:	4a8c      	ldr	r2, [pc, #560]	; (8008eb8 <HAL_GPIO_Init+0x2a0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d85d      	bhi.n	8008d46 <HAL_GPIO_Init+0x12e>
 8008c8a:	2b12      	cmp	r3, #18
 8008c8c:	d82a      	bhi.n	8008ce4 <HAL_GPIO_Init+0xcc>
 8008c8e:	2b12      	cmp	r3, #18
 8008c90:	d859      	bhi.n	8008d46 <HAL_GPIO_Init+0x12e>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <HAL_GPIO_Init+0x80>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008d13 	.word	0x08008d13
 8008c9c:	08008ced 	.word	0x08008ced
 8008ca0:	08008cff 	.word	0x08008cff
 8008ca4:	08008d41 	.word	0x08008d41
 8008ca8:	08008d47 	.word	0x08008d47
 8008cac:	08008d47 	.word	0x08008d47
 8008cb0:	08008d47 	.word	0x08008d47
 8008cb4:	08008d47 	.word	0x08008d47
 8008cb8:	08008d47 	.word	0x08008d47
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008d47 	.word	0x08008d47
 8008cc4:	08008d47 	.word	0x08008d47
 8008cc8:	08008d47 	.word	0x08008d47
 8008ccc:	08008d47 	.word	0x08008d47
 8008cd0:	08008d47 	.word	0x08008d47
 8008cd4:	08008d47 	.word	0x08008d47
 8008cd8:	08008d47 	.word	0x08008d47
 8008cdc:	08008cf5 	.word	0x08008cf5
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	4a75      	ldr	r2, [pc, #468]	; (8008ebc <HAL_GPIO_Init+0x2a4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d013      	beq.n	8008d12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008cea:	e02c      	b.n	8008d46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	623b      	str	r3, [r7, #32]
          break;
 8008cf2:	e029      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	623b      	str	r3, [r7, #32]
          break;
 8008cfc:	e024      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	3308      	adds	r3, #8
 8008d04:	623b      	str	r3, [r7, #32]
          break;
 8008d06:	e01f      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	623b      	str	r3, [r7, #32]
          break;
 8008d10:	e01a      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008d1a:	2304      	movs	r3, #4
 8008d1c:	623b      	str	r3, [r7, #32]
          break;
 8008d1e:	e013      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d105      	bne.n	8008d34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d28:	2308      	movs	r3, #8
 8008d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	611a      	str	r2, [r3, #16]
          break;
 8008d32:	e009      	b.n	8008d48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d34:	2308      	movs	r3, #8
 8008d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69fa      	ldr	r2, [r7, #28]
 8008d3c:	615a      	str	r2, [r3, #20]
          break;
 8008d3e:	e003      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008d40:	2300      	movs	r3, #0
 8008d42:	623b      	str	r3, [r7, #32]
          break;
 8008d44:	e000      	b.n	8008d48 <HAL_GPIO_Init+0x130>
          break;
 8008d46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2bff      	cmp	r3, #255	; 0xff
 8008d4c:	d801      	bhi.n	8008d52 <HAL_GPIO_Init+0x13a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	e001      	b.n	8008d56 <HAL_GPIO_Init+0x13e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2bff      	cmp	r3, #255	; 0xff
 8008d5c:	d802      	bhi.n	8008d64 <HAL_GPIO_Init+0x14c>
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	e002      	b.n	8008d6a <HAL_GPIO_Init+0x152>
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	3b08      	subs	r3, #8
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	210f      	movs	r1, #15
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	fa01 f303 	lsl.w	r3, r1, r3
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	401a      	ands	r2, r3
 8008d7c:	6a39      	ldr	r1, [r7, #32]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	fa01 f303 	lsl.w	r3, r1, r3
 8008d84:	431a      	orrs	r2, r3
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 80c1 	beq.w	8008f1a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008d98:	4b49      	ldr	r3, [pc, #292]	; (8008ec0 <HAL_GPIO_Init+0x2a8>)
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	4a48      	ldr	r2, [pc, #288]	; (8008ec0 <HAL_GPIO_Init+0x2a8>)
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	6193      	str	r3, [r2, #24]
 8008da4:	4b46      	ldr	r3, [pc, #280]	; (8008ec0 <HAL_GPIO_Init+0x2a8>)
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	60bb      	str	r3, [r7, #8]
 8008dae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008db0:	4a44      	ldr	r2, [pc, #272]	; (8008ec4 <HAL_GPIO_Init+0x2ac>)
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	089b      	lsrs	r3, r3, #2
 8008db6:	3302      	adds	r3, #2
 8008db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	220f      	movs	r2, #15
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a3c      	ldr	r2, [pc, #240]	; (8008ec8 <HAL_GPIO_Init+0x2b0>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d01f      	beq.n	8008e1c <HAL_GPIO_Init+0x204>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a3b      	ldr	r2, [pc, #236]	; (8008ecc <HAL_GPIO_Init+0x2b4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d019      	beq.n	8008e18 <HAL_GPIO_Init+0x200>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a3a      	ldr	r2, [pc, #232]	; (8008ed0 <HAL_GPIO_Init+0x2b8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d013      	beq.n	8008e14 <HAL_GPIO_Init+0x1fc>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a39      	ldr	r2, [pc, #228]	; (8008ed4 <HAL_GPIO_Init+0x2bc>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00d      	beq.n	8008e10 <HAL_GPIO_Init+0x1f8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a38      	ldr	r2, [pc, #224]	; (8008ed8 <HAL_GPIO_Init+0x2c0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d007      	beq.n	8008e0c <HAL_GPIO_Init+0x1f4>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a37      	ldr	r2, [pc, #220]	; (8008edc <HAL_GPIO_Init+0x2c4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d101      	bne.n	8008e08 <HAL_GPIO_Init+0x1f0>
 8008e04:	2305      	movs	r3, #5
 8008e06:	e00a      	b.n	8008e1e <HAL_GPIO_Init+0x206>
 8008e08:	2306      	movs	r3, #6
 8008e0a:	e008      	b.n	8008e1e <HAL_GPIO_Init+0x206>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	e006      	b.n	8008e1e <HAL_GPIO_Init+0x206>
 8008e10:	2303      	movs	r3, #3
 8008e12:	e004      	b.n	8008e1e <HAL_GPIO_Init+0x206>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e002      	b.n	8008e1e <HAL_GPIO_Init+0x206>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <HAL_GPIO_Init+0x206>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e20:	f002 0203 	and.w	r2, r2, #3
 8008e24:	0092      	lsls	r2, r2, #2
 8008e26:	4093      	lsls	r3, r2
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008e2e:	4925      	ldr	r1, [pc, #148]	; (8008ec4 <HAL_GPIO_Init+0x2ac>)
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	089b      	lsrs	r3, r3, #2
 8008e34:	3302      	adds	r3, #2
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	4924      	ldr	r1, [pc, #144]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	608b      	str	r3, [r1, #8]
 8008e54:	e006      	b.n	8008e64 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	43db      	mvns	r3, r3
 8008e5e:	4920      	ldr	r1, [pc, #128]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e60:	4013      	ands	r3, r2
 8008e62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008e70:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	491a      	ldr	r1, [pc, #104]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60cb      	str	r3, [r1, #12]
 8008e7c:	e006      	b.n	8008e8c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008e7e:	4b18      	ldr	r3, [pc, #96]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	4916      	ldr	r1, [pc, #88]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d025      	beq.n	8008ee4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	4910      	ldr	r1, [pc, #64]	; (8008ee0 <HAL_GPIO_Init+0x2c8>)
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	604b      	str	r3, [r1, #4]
 8008ea4:	e025      	b.n	8008ef2 <HAL_GPIO_Init+0x2da>
 8008ea6:	bf00      	nop
 8008ea8:	10320000 	.word	0x10320000
 8008eac:	10310000 	.word	0x10310000
 8008eb0:	10220000 	.word	0x10220000
 8008eb4:	10210000 	.word	0x10210000
 8008eb8:	10120000 	.word	0x10120000
 8008ebc:	10110000 	.word	0x10110000
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40010000 	.word	0x40010000
 8008ec8:	40010800 	.word	0x40010800
 8008ecc:	40010c00 	.word	0x40010c00
 8008ed0:	40011000 	.word	0x40011000
 8008ed4:	40011400 	.word	0x40011400
 8008ed8:	40011800 	.word	0x40011800
 8008edc:	40011c00 	.word	0x40011c00
 8008ee0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <HAL_GPIO_Init+0x324>)
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	43db      	mvns	r3, r3
 8008eec:	4913      	ldr	r1, [pc, #76]	; (8008f3c <HAL_GPIO_Init+0x324>)
 8008eee:	4013      	ands	r3, r2
 8008ef0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d006      	beq.n	8008f0c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008efe:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <HAL_GPIO_Init+0x324>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	490e      	ldr	r1, [pc, #56]	; (8008f3c <HAL_GPIO_Init+0x324>)
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	600b      	str	r3, [r1, #0]
 8008f0a:	e006      	b.n	8008f1a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <HAL_GPIO_Init+0x324>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	43db      	mvns	r3, r3
 8008f14:	4909      	ldr	r1, [pc, #36]	; (8008f3c <HAL_GPIO_Init+0x324>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f ae7e 	bne.w	8008c2c <HAL_GPIO_Init+0x14>
  }
}
 8008f30:	bf00      	nop
 8008f32:	bf00      	nop
 8008f34:	372c      	adds	r7, #44	; 0x2c
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bc80      	pop	{r7}
 8008f3a:	4770      	bx	lr
 8008f3c:	40010400 	.word	0x40010400

08008f40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b089      	sub	sp, #36	; 0x24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008f4e:	e0a6      	b.n	800909e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f50:	2201      	movs	r2, #1
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	fa02 f303 	lsl.w	r3, r2, r3
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 8099 	beq.w	8009098 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008f66:	4a54      	ldr	r2, [pc, #336]	; (80090b8 <HAL_GPIO_DeInit+0x178>)
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	089b      	lsrs	r3, r3, #2
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f72:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	220f      	movs	r2, #15
 8008f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	4013      	ands	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a4c      	ldr	r2, [pc, #304]	; (80090bc <HAL_GPIO_DeInit+0x17c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d01f      	beq.n	8008fd0 <HAL_GPIO_DeInit+0x90>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a4b      	ldr	r2, [pc, #300]	; (80090c0 <HAL_GPIO_DeInit+0x180>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d019      	beq.n	8008fcc <HAL_GPIO_DeInit+0x8c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a4a      	ldr	r2, [pc, #296]	; (80090c4 <HAL_GPIO_DeInit+0x184>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d013      	beq.n	8008fc8 <HAL_GPIO_DeInit+0x88>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a49      	ldr	r2, [pc, #292]	; (80090c8 <HAL_GPIO_DeInit+0x188>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00d      	beq.n	8008fc4 <HAL_GPIO_DeInit+0x84>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a48      	ldr	r2, [pc, #288]	; (80090cc <HAL_GPIO_DeInit+0x18c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d007      	beq.n	8008fc0 <HAL_GPIO_DeInit+0x80>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a47      	ldr	r2, [pc, #284]	; (80090d0 <HAL_GPIO_DeInit+0x190>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d101      	bne.n	8008fbc <HAL_GPIO_DeInit+0x7c>
 8008fb8:	2305      	movs	r3, #5
 8008fba:	e00a      	b.n	8008fd2 <HAL_GPIO_DeInit+0x92>
 8008fbc:	2306      	movs	r3, #6
 8008fbe:	e008      	b.n	8008fd2 <HAL_GPIO_DeInit+0x92>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	e006      	b.n	8008fd2 <HAL_GPIO_DeInit+0x92>
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e004      	b.n	8008fd2 <HAL_GPIO_DeInit+0x92>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e002      	b.n	8008fd2 <HAL_GPIO_DeInit+0x92>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <HAL_GPIO_DeInit+0x92>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	f002 0203 	and.w	r2, r2, #3
 8008fd8:	0092      	lsls	r2, r2, #2
 8008fda:	4093      	lsls	r3, r2
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d132      	bne.n	8009048 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008fe2:	4b3c      	ldr	r3, [pc, #240]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	493a      	ldr	r1, [pc, #232]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008ff0:	4b38      	ldr	r3, [pc, #224]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	43db      	mvns	r3, r3
 8008ff8:	4936      	ldr	r1, [pc, #216]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008ffe:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	43db      	mvns	r3, r3
 8009006:	4933      	ldr	r1, [pc, #204]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8009008:	4013      	ands	r3, r2
 800900a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800900c:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	43db      	mvns	r3, r3
 8009014:	492f      	ldr	r1, [pc, #188]	; (80090d4 <HAL_GPIO_DeInit+0x194>)
 8009016:	4013      	ands	r3, r2
 8009018:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	220f      	movs	r2, #15
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800902a:	4a23      	ldr	r2, [pc, #140]	; (80090b8 <HAL_GPIO_DeInit+0x178>)
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	3302      	adds	r3, #2
 8009032:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	43da      	mvns	r2, r3
 800903a:	481f      	ldr	r0, [pc, #124]	; (80090b8 <HAL_GPIO_DeInit+0x178>)
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	089b      	lsrs	r3, r3, #2
 8009040:	400a      	ands	r2, r1
 8009042:	3302      	adds	r3, #2
 8009044:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	2bff      	cmp	r3, #255	; 0xff
 800904c:	d801      	bhi.n	8009052 <HAL_GPIO_DeInit+0x112>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	e001      	b.n	8009056 <HAL_GPIO_DeInit+0x116>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2bff      	cmp	r3, #255	; 0xff
 800905c:	d802      	bhi.n	8009064 <HAL_GPIO_DeInit+0x124>
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	e002      	b.n	800906a <HAL_GPIO_DeInit+0x12a>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	3b08      	subs	r3, #8
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	210f      	movs	r1, #15
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	43db      	mvns	r3, r3
 800907a:	401a      	ands	r2, r3
 800907c:	2104      	movs	r1, #4
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	fa01 f303 	lsl.w	r3, r1, r3
 8009084:	431a      	orrs	r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	43db      	mvns	r3, r3
 8009092:	401a      	ands	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	3301      	adds	r3, #1
 800909c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f47f af52 	bne.w	8008f50 <HAL_GPIO_DeInit+0x10>
  }
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	3724      	adds	r7, #36	; 0x24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010800 	.word	0x40010800
 80090c0:	40010c00 	.word	0x40010c00
 80090c4:	40011000 	.word	0x40011000
 80090c8:	40011400 	.word	0x40011400
 80090cc:	40011800 	.word	0x40011800
 80090d0:	40011c00 	.word	0x40011c00
 80090d4:	40010400 	.word	0x40010400

080090d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	887b      	ldrh	r3, [r7, #2]
 80090ea:	4013      	ands	r3, r2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
 80090f4:	e001      	b.n	80090fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr

08009106 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	807b      	strh	r3, [r7, #2]
 8009112:	4613      	mov	r3, r2
 8009114:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009116:	787b      	ldrb	r3, [r7, #1]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800911c:	887a      	ldrh	r2, [r7, #2]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009122:	e003      	b.n	800912c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009124:	887b      	ldrh	r3, [r7, #2]
 8009126:	041a      	lsls	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	611a      	str	r2, [r3, #16]
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr

08009136 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009148:	887a      	ldrh	r2, [r7, #2]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4013      	ands	r3, r2
 800914e:	041a      	lsls	r2, r3, #16
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	43d9      	mvns	r1, r3
 8009154:	887b      	ldrh	r3, [r7, #2]
 8009156:	400b      	ands	r3, r1
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	611a      	str	r2, [r3, #16]
}
 800915e:	bf00      	nop
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e12b      	b.n	80093d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fe fff8 	bl	8008184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2224      	movs	r2, #36	; 0x24
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0201 	bic.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80091cc:	f001 fdb8 	bl	800ad40 <HAL_RCC_GetPCLK1Freq>
 80091d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	4a81      	ldr	r2, [pc, #516]	; (80093dc <HAL_I2C_Init+0x274>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d807      	bhi.n	80091ec <HAL_I2C_Init+0x84>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a80      	ldr	r2, [pc, #512]	; (80093e0 <HAL_I2C_Init+0x278>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	bf94      	ite	ls
 80091e4:	2301      	movls	r3, #1
 80091e6:	2300      	movhi	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	e006      	b.n	80091fa <HAL_I2C_Init+0x92>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4a7d      	ldr	r2, [pc, #500]	; (80093e4 <HAL_I2C_Init+0x27c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	bf94      	ite	ls
 80091f4:	2301      	movls	r3, #1
 80091f6:	2300      	movhi	r3, #0
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e0e7      	b.n	80093d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4a78      	ldr	r2, [pc, #480]	; (80093e8 <HAL_I2C_Init+0x280>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	0c9b      	lsrs	r3, r3, #18
 800920c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4a6a      	ldr	r2, [pc, #424]	; (80093dc <HAL_I2C_Init+0x274>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d802      	bhi.n	800923c <HAL_I2C_Init+0xd4>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3301      	adds	r3, #1
 800923a:	e009      	b.n	8009250 <HAL_I2C_Init+0xe8>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009242:	fb02 f303 	mul.w	r3, r2, r3
 8009246:	4a69      	ldr	r2, [pc, #420]	; (80093ec <HAL_I2C_Init+0x284>)
 8009248:	fba2 2303 	umull	r2, r3, r2, r3
 800924c:	099b      	lsrs	r3, r3, #6
 800924e:	3301      	adds	r3, #1
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	6812      	ldr	r2, [r2, #0]
 8009254:	430b      	orrs	r3, r1
 8009256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	495c      	ldr	r1, [pc, #368]	; (80093dc <HAL_I2C_Init+0x274>)
 800926c:	428b      	cmp	r3, r1
 800926e:	d819      	bhi.n	80092a4 <HAL_I2C_Init+0x13c>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	1e59      	subs	r1, r3, #1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	fbb1 f3f3 	udiv	r3, r1, r3
 800927e:	1c59      	adds	r1, r3, #1
 8009280:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009284:	400b      	ands	r3, r1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <HAL_I2C_Init+0x138>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1e59      	subs	r1, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	fbb1 f3f3 	udiv	r3, r1, r3
 8009298:	3301      	adds	r3, #1
 800929a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800929e:	e051      	b.n	8009344 <HAL_I2C_Init+0x1dc>
 80092a0:	2304      	movs	r3, #4
 80092a2:	e04f      	b.n	8009344 <HAL_I2C_Init+0x1dc>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d111      	bne.n	80092d0 <HAL_I2C_Init+0x168>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	1e58      	subs	r0, r3, #1
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6859      	ldr	r1, [r3, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	440b      	add	r3, r1
 80092ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80092be:	3301      	adds	r3, #1
 80092c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	bf0c      	ite	eq
 80092c8:	2301      	moveq	r3, #1
 80092ca:	2300      	movne	r3, #0
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	e012      	b.n	80092f6 <HAL_I2C_Init+0x18e>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	1e58      	subs	r0, r3, #1
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6859      	ldr	r1, [r3, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	0099      	lsls	r1, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80092e6:	3301      	adds	r3, #1
 80092e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bf0c      	ite	eq
 80092f0:	2301      	moveq	r3, #1
 80092f2:	2300      	movne	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <HAL_I2C_Init+0x196>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e022      	b.n	8009344 <HAL_I2C_Init+0x1dc>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10e      	bne.n	8009324 <HAL_I2C_Init+0x1bc>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	1e58      	subs	r0, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	440b      	add	r3, r1
 8009314:	fbb0 f3f3 	udiv	r3, r0, r3
 8009318:	3301      	adds	r3, #1
 800931a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800931e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009322:	e00f      	b.n	8009344 <HAL_I2C_Init+0x1dc>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	1e58      	subs	r0, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6859      	ldr	r1, [r3, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	0099      	lsls	r1, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	fbb0 f3f3 	udiv	r3, r0, r3
 800933a:	3301      	adds	r3, #1
 800933c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	6809      	ldr	r1, [r1, #0]
 8009348:	4313      	orrs	r3, r2
 800934a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6911      	ldr	r1, [r2, #16]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	68d2      	ldr	r2, [r2, #12]
 800937e:	4311      	orrs	r1, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	430b      	orrs	r3, r1
 8009386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	695a      	ldr	r2, [r3, #20]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	000186a0 	.word	0x000186a0
 80093e0:	001e847f 	.word	0x001e847f
 80093e4:	003d08ff 	.word	0x003d08ff
 80093e8:	431bde83 	.word	0x431bde83
 80093ec:	10624dd3 	.word	0x10624dd3

080093f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e021      	b.n	8009446 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2224      	movs	r2, #36	; 0x24
 8009406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0201 	bic.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7fe fef0 	bl	8008200 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	461a      	mov	r2, r3
 800945c:	460b      	mov	r3, r1
 800945e:	817b      	strh	r3, [r7, #10]
 8009460:	4613      	mov	r3, r2
 8009462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009464:	f7ff f85e 	bl	8008524 <HAL_GetTick>
 8009468:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b20      	cmp	r3, #32
 8009474:	f040 80e0 	bne.w	8009638 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2319      	movs	r3, #25
 800947e:	2201      	movs	r2, #1
 8009480:	4970      	ldr	r1, [pc, #448]	; (8009644 <HAL_I2C_Master_Transmit+0x1f4>)
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 fe5c 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
 8009490:	e0d3      	b.n	800963a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_I2C_Master_Transmit+0x50>
 800949c:	2302      	movs	r3, #2
 800949e:	e0cc      	b.n	800963a <HAL_I2C_Master_Transmit+0x1ea>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d007      	beq.n	80094c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f042 0201 	orr.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2221      	movs	r2, #33	; 0x21
 80094da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2210      	movs	r2, #16
 80094e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	893a      	ldrh	r2, [r7, #8]
 80094f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a50      	ldr	r2, [pc, #320]	; (8009648 <HAL_I2C_Master_Transmit+0x1f8>)
 8009506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009508:	8979      	ldrh	r1, [r7, #10]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	6a3a      	ldr	r2, [r7, #32]
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fc16 	bl	8009d40 <I2C_MasterRequestWrite>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e08d      	b.n	800963a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009534:	e066      	b.n	8009604 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	6a39      	ldr	r1, [r7, #32]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 ff1a 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00d      	beq.n	8009562 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954a:	2b04      	cmp	r3, #4
 800954c:	d107      	bne.n	800955e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800955c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e06b      	b.n	800963a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	781a      	ldrb	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b04      	cmp	r3, #4
 800959e:	d11b      	bne.n	80095d8 <HAL_I2C_Master_Transmit+0x188>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d017      	beq.n	80095d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	6a39      	ldr	r1, [r7, #32]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 ff11 	bl	800a404 <I2C_WaitOnBTFFlagUntilTimeout>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d107      	bne.n	8009600 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e01a      	b.n	800963a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	d194      	bne.n	8009536 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800961a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	e000      	b.n	800963a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009638:	2302      	movs	r3, #2
  }
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	00100002 	.word	0x00100002
 8009648:	ffff0000 	.word	0xffff0000

0800964c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af02      	add	r7, sp, #8
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	4608      	mov	r0, r1
 8009656:	4611      	mov	r1, r2
 8009658:	461a      	mov	r2, r3
 800965a:	4603      	mov	r3, r0
 800965c:	817b      	strh	r3, [r7, #10]
 800965e:	460b      	mov	r3, r1
 8009660:	813b      	strh	r3, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009666:	f7fe ff5d 	bl	8008524 <HAL_GetTick>
 800966a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b20      	cmp	r3, #32
 8009676:	f040 80d9 	bne.w	800982c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	2319      	movs	r3, #25
 8009680:	2201      	movs	r2, #1
 8009682:	496d      	ldr	r1, [pc, #436]	; (8009838 <HAL_I2C_Mem_Write+0x1ec>)
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 fd5b 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009690:	2302      	movs	r3, #2
 8009692:	e0cc      	b.n	800982e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_I2C_Mem_Write+0x56>
 800969e:	2302      	movs	r3, #2
 80096a0:	e0c5      	b.n	800982e <HAL_I2C_Mem_Write+0x1e2>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d007      	beq.n	80096c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2221      	movs	r2, #33	; 0x21
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2240      	movs	r2, #64	; 0x40
 80096e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a3a      	ldr	r2, [r7, #32]
 80096f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fe:	b29a      	uxth	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a4d      	ldr	r2, [pc, #308]	; (800983c <HAL_I2C_Mem_Write+0x1f0>)
 8009708:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800970a:	88f8      	ldrh	r0, [r7, #6]
 800970c:	893a      	ldrh	r2, [r7, #8]
 800970e:	8979      	ldrh	r1, [r7, #10]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	4603      	mov	r3, r0
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fb92 	bl	8009e44 <I2C_RequestMemoryWrite>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d052      	beq.n	80097cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e081      	b.n	800982e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 fe20 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00d      	beq.n	8009756 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	2b04      	cmp	r3, #4
 8009740:	d107      	bne.n	8009752 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009750:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e06b      	b.n	800982e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009770:	3b01      	subs	r3, #1
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b04      	cmp	r3, #4
 8009792:	d11b      	bne.n	80097cc <HAL_I2C_Mem_Write+0x180>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	d017      	beq.n	80097cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1aa      	bne.n	800972a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 fe13 	bl	800a404 <I2C_WaitOnBTFFlagUntilTimeout>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00d      	beq.n	8009800 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d107      	bne.n	80097fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e016      	b.n	800982e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800980e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	e000      	b.n	800982e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800982c:	2302      	movs	r3, #2
  }
}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	00100002 	.word	0x00100002
 800983c:	ffff0000 	.word	0xffff0000

08009840 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08c      	sub	sp, #48	; 0x30
 8009844:	af02      	add	r7, sp, #8
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	4608      	mov	r0, r1
 800984a:	4611      	mov	r1, r2
 800984c:	461a      	mov	r2, r3
 800984e:	4603      	mov	r3, r0
 8009850:	817b      	strh	r3, [r7, #10]
 8009852:	460b      	mov	r3, r1
 8009854:	813b      	strh	r3, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800985e:	f7fe fe61 	bl	8008524 <HAL_GetTick>
 8009862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b20      	cmp	r3, #32
 800986e:	f040 8244 	bne.w	8009cfa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	2319      	movs	r3, #25
 8009878:	2201      	movs	r2, #1
 800987a:	4982      	ldr	r1, [pc, #520]	; (8009a84 <HAL_I2C_Mem_Read+0x244>)
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 fc5f 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009888:	2302      	movs	r3, #2
 800988a:	e237      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009892:	2b01      	cmp	r3, #1
 8009894:	d101      	bne.n	800989a <HAL_I2C_Mem_Read+0x5a>
 8009896:	2302      	movs	r3, #2
 8009898:	e230      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d007      	beq.n	80098c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0201 	orr.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2222      	movs	r2, #34	; 0x22
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2240      	movs	r2, #64	; 0x40
 80098dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80098f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4a62      	ldr	r2, [pc, #392]	; (8009a88 <HAL_I2C_Mem_Read+0x248>)
 8009900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009902:	88f8      	ldrh	r0, [r7, #6]
 8009904:	893a      	ldrh	r2, [r7, #8]
 8009906:	8979      	ldrh	r1, [r7, #10]
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	4603      	mov	r3, r0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fb2c 	bl	8009f70 <I2C_RequestMemoryRead>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e1ec      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d113      	bne.n	8009952 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	61fb      	str	r3, [r7, #28]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	61fb      	str	r3, [r7, #28]
 800993e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	e1c0      	b.n	8009cd4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009956:	2b01      	cmp	r3, #1
 8009958:	d11e      	bne.n	8009998 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800996a:	b672      	cpsid	i
}
 800996c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009994:	b662      	cpsie	i
}
 8009996:	e035      	b.n	8009a04 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999c:	2b02      	cmp	r3, #2
 800999e:	d11e      	bne.n	80099de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099b0:	b672      	cpsid	i
}
 80099b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099da:	b662      	cpsie	i
}
 80099dc:	e012      	b.n	8009a04 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099ee:	2300      	movs	r3, #0
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	613b      	str	r3, [r7, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009a04:	e166      	b.n	8009cd4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	f200 811f 	bhi.w	8009c4e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d123      	bne.n	8009a60 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fd39 	bl	800a494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e167      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a5e:	e139      	b.n	8009cd4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d152      	bne.n	8009b0e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4906      	ldr	r1, [pc, #24]	; (8009a8c <HAL_I2C_Mem_Read+0x24c>)
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 fb64 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d008      	beq.n	8009a90 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e13c      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
 8009a82:	bf00      	nop
 8009a84:	00100002 	.word	0x00100002
 8009a88:	ffff0000 	.word	0xffff0000
 8009a8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009a90:	b672      	cpsid	i
}
 8009a92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ad6:	b662      	cpsie	i
}
 8009ad8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b0c:	e0e2      	b.n	8009cd4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2200      	movs	r2, #0
 8009b16:	497b      	ldr	r1, [pc, #492]	; (8009d04 <HAL_I2C_Mem_Read+0x4c4>)
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 fb11 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e0e9      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b38:	b672      	cpsid	i
}
 8009b3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	691a      	ldr	r2, [r3, #16]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b6e:	4b66      	ldr	r3, [pc, #408]	; (8009d08 <HAL_I2C_Mem_Read+0x4c8>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	4a65      	ldr	r2, [pc, #404]	; (8009d0c <HAL_I2C_Mem_Read+0x4cc>)
 8009b76:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7a:	0a1a      	lsrs	r2, r3, #8
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	00da      	lsls	r2, r3, #3
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d118      	bne.n	8009bc6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	f043 0220 	orr.w	r2, r3, #32
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009bb6:	b662      	cpsie	i
}
 8009bb8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e09a      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d1d9      	bne.n	8009b88 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691a      	ldr	r2, [r3, #16]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c16:	b662      	cpsie	i
}
 8009c18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691a      	ldr	r2, [r3, #16]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	b2d2      	uxtb	r2, r2
 8009c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c36:	3b01      	subs	r3, #1
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c4c:	e042      	b.n	8009cd4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 fc1e 	bl	800a494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e04c      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	691a      	ldr	r2, [r3, #16]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d118      	bne.n	8009cd4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f47f ae94 	bne.w	8009a06 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e000      	b.n	8009cfc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009cfa:	2302      	movs	r3, #2
  }
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3728      	adds	r7, #40	; 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	00010004 	.word	0x00010004
 8009d08:	200000a8 	.word	0x200000a8
 8009d0c:	14f8b589 	.word	0x14f8b589

08009d10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1e:	b2db      	uxtb	r3, r3
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr

08009d2a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bc80      	pop	{r7}
 8009d3e:	4770      	bx	lr

08009d40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d006      	beq.n	8009d6a <I2C_MasterRequestWrite+0x2a>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d003      	beq.n	8009d6a <I2C_MasterRequestWrite+0x2a>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d68:	d108      	bne.n	8009d7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e00b      	b.n	8009d94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	2b12      	cmp	r3, #18
 8009d82:	d107      	bne.n	8009d94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f9cd 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00d      	beq.n	8009dc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dba:	d103      	bne.n	8009dc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e035      	b.n	8009e34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd0:	d108      	bne.n	8009de4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009dd2:	897b      	ldrh	r3, [r7, #10]
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009de0:	611a      	str	r2, [r3, #16]
 8009de2:	e01b      	b.n	8009e1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009de4:	897b      	ldrh	r3, [r7, #10]
 8009de6:	11db      	asrs	r3, r3, #7
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0306 	and.w	r3, r3, #6
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f063 030f 	orn	r3, r3, #15
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	490e      	ldr	r1, [pc, #56]	; (8009e3c <I2C_MasterRequestWrite+0xfc>)
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fa16 	bl	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e010      	b.n	8009e34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4907      	ldr	r1, [pc, #28]	; (8009e40 <I2C_MasterRequestWrite+0x100>)
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fa06 	bl	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	00010008 	.word	0x00010008
 8009e40:	00010002 	.word	0x00010002

08009e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	817b      	strh	r3, [r7, #10]
 8009e56:	460b      	mov	r3, r1
 8009e58:	813b      	strh	r3, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f960 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00d      	beq.n	8009ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e94:	d103      	bne.n	8009e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e05f      	b.n	8009f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ea2:	897b      	ldrh	r3, [r7, #10]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	6a3a      	ldr	r2, [r7, #32]
 8009eb6:	492d      	ldr	r1, [pc, #180]	; (8009f6c <I2C_RequestMemoryWrite+0x128>)
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f9bb 	bl	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e04c      	b.n	8009f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	617b      	str	r3, [r7, #20]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee0:	6a39      	ldr	r1, [r7, #32]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 fa46 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00d      	beq.n	8009f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d107      	bne.n	8009f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e02b      	b.n	8009f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f0a:	88fb      	ldrh	r3, [r7, #6]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d105      	bne.n	8009f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f10:	893b      	ldrh	r3, [r7, #8]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	611a      	str	r2, [r3, #16]
 8009f1a:	e021      	b.n	8009f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f1c:	893b      	ldrh	r3, [r7, #8]
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2c:	6a39      	ldr	r1, [r7, #32]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fa20 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d107      	bne.n	8009f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e005      	b.n	8009f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f56:	893b      	ldrh	r3, [r7, #8]
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	00010002 	.word	0x00010002

08009f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	4608      	mov	r0, r1
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	817b      	strh	r3, [r7, #10]
 8009f82:	460b      	mov	r3, r1
 8009f84:	813b      	strh	r3, [r7, #8]
 8009f86:	4613      	mov	r3, r2
 8009f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f000 f8c2 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00d      	beq.n	8009fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd0:	d103      	bne.n	8009fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e0aa      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fde:	897b      	ldrh	r3, [r7, #10]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	6a3a      	ldr	r2, [r7, #32]
 8009ff2:	4952      	ldr	r1, [pc, #328]	; (800a13c <I2C_RequestMemoryRead+0x1cc>)
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f91d 	bl	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e097      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01c:	6a39      	ldr	r1, [r7, #32]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 f9a8 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00d      	beq.n	800a046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d107      	bne.n	800a042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e076      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a046:	88fb      	ldrh	r3, [r7, #6]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d105      	bne.n	800a058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a04c:	893b      	ldrh	r3, [r7, #8]
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	611a      	str	r2, [r3, #16]
 800a056:	e021      	b.n	800a09c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a068:	6a39      	ldr	r1, [r7, #32]
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 f982 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00d      	beq.n	800a092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d107      	bne.n	800a08e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a08c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e050      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a092:	893b      	ldrh	r3, [r7, #8]
 800a094:	b2da      	uxtb	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09e:	6a39      	ldr	r1, [r7, #32]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f967 	bl	800a374 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00d      	beq.n	800a0c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d107      	bne.n	800a0c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e035      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 f82b 	bl	800a140 <I2C_WaitOnFlagUntilTimeout>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00d      	beq.n	800a10c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fe:	d103      	bne.n	800a108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e013      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a10c:	897b      	ldrh	r3, [r7, #10]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	b2da      	uxtb	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	6a3a      	ldr	r2, [r7, #32]
 800a120:	4906      	ldr	r1, [pc, #24]	; (800a13c <I2C_RequestMemoryRead+0x1cc>)
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f886 	bl	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	00010002 	.word	0x00010002

0800a140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a150:	e048      	b.n	800a1e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a158:	d044      	beq.n	800a1e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15a:	f7fe f9e3 	bl	8008524 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d302      	bcc.n	800a170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d139      	bne.n	800a1e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b01      	cmp	r3, #1
 800a178:	d10d      	bne.n	800a196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	43da      	mvns	r2, r3
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4013      	ands	r3, r2
 800a186:	b29b      	uxth	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	bf0c      	ite	eq
 800a18c:	2301      	moveq	r3, #1
 800a18e:	2300      	movne	r3, #0
 800a190:	b2db      	uxtb	r3, r3
 800a192:	461a      	mov	r2, r3
 800a194:	e00c      	b.n	800a1b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	43da      	mvns	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bf0c      	ite	eq
 800a1a8:	2301      	moveq	r3, #1
 800a1aa:	2300      	movne	r3, #0
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d116      	bne.n	800a1e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	f043 0220 	orr.w	r2, r3, #32
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e023      	b.n	800a22c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	0c1b      	lsrs	r3, r3, #16
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d10d      	bne.n	800a20a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	43da      	mvns	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bf0c      	ite	eq
 800a200:	2301      	moveq	r3, #1
 800a202:	2300      	movne	r3, #0
 800a204:	b2db      	uxtb	r3, r3
 800a206:	461a      	mov	r2, r3
 800a208:	e00c      	b.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	43da      	mvns	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	4013      	ands	r3, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bf0c      	ite	eq
 800a21c:	2301      	moveq	r3, #1
 800a21e:	2300      	movne	r3, #0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	461a      	mov	r2, r3
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	429a      	cmp	r2, r3
 800a228:	d093      	beq.n	800a152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a242:	e071      	b.n	800a328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a24e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a252:	d123      	bne.n	800a29c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a26c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2220      	movs	r2, #32
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a288:	f043 0204 	orr.w	r2, r3, #4
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e067      	b.n	800a36c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2a2:	d041      	beq.n	800a328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2a4:	f7fe f93e 	bl	8008524 <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d302      	bcc.n	800a2ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d136      	bne.n	800a328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	0c1b      	lsrs	r3, r3, #16
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d10c      	bne.n	800a2de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	43da      	mvns	r2, r3
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bf14      	ite	ne
 800a2d6:	2301      	movne	r3, #1
 800a2d8:	2300      	moveq	r3, #0
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	e00b      	b.n	800a2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	43da      	mvns	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bf14      	ite	ne
 800a2f0:	2301      	movne	r3, #1
 800a2f2:	2300      	moveq	r3, #0
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d016      	beq.n	800a328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2220      	movs	r2, #32
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	f043 0220 	orr.w	r2, r3, #32
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e021      	b.n	800a36c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	0c1b      	lsrs	r3, r3, #16
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d10c      	bne.n	800a34c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	43da      	mvns	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	4013      	ands	r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	bf14      	ite	ne
 800a344:	2301      	movne	r3, #1
 800a346:	2300      	moveq	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	e00b      	b.n	800a364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	43da      	mvns	r2, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4013      	ands	r3, r2
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bf14      	ite	ne
 800a35e:	2301      	movne	r3, #1
 800a360:	2300      	moveq	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	f47f af6d 	bne.w	800a244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a380:	e034      	b.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 f8e3 	bl	800a54e <I2C_IsAcknowledgeFailed>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e034      	b.n	800a3fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a398:	d028      	beq.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a39a:	f7fe f8c3 	bl	8008524 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d302      	bcc.n	800a3b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d11d      	bne.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ba:	2b80      	cmp	r3, #128	; 0x80
 800a3bc:	d016      	beq.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	f043 0220 	orr.w	r2, r3, #32
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e007      	b.n	800a3fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f6:	2b80      	cmp	r3, #128	; 0x80
 800a3f8:	d1c3      	bne.n	800a382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a410:	e034      	b.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 f89b 	bl	800a54e <I2C_IsAcknowledgeFailed>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e034      	b.n	800a48c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a428:	d028      	beq.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7fe f87b 	bl	8008524 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d11d      	bne.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d016      	beq.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2220      	movs	r2, #32
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a468:	f043 0220 	orr.w	r2, r3, #32
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e007      	b.n	800a48c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b04      	cmp	r3, #4
 800a488:	d1c3      	bne.n	800a412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a4a0:	e049      	b.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	f003 0310 	and.w	r3, r3, #16
 800a4ac:	2b10      	cmp	r3, #16
 800a4ae:	d119      	bne.n	800a4e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0210 	mvn.w	r2, #16
 800a4b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e030      	b.n	800a546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e4:	f7fe f81e 	bl	8008524 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d302      	bcc.n	800a4fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d11d      	bne.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a504:	2b40      	cmp	r3, #64	; 0x40
 800a506:	d016      	beq.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2220      	movs	r2, #32
 800a512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a522:	f043 0220 	orr.w	r2, r3, #32
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e007      	b.n	800a546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a540:	2b40      	cmp	r3, #64	; 0x40
 800a542:	d1ae      	bne.n	800a4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a564:	d11b      	bne.n	800a59e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a56e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2220      	movs	r2, #32
 800a57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58a:	f043 0204 	orr.w	r2, r3, #4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bc80      	pop	{r7}
 800a5a8:	4770      	bx	lr
	...

0800a5ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e272      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 8087 	beq.w	800a6da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5cc:	4b92      	ldr	r3, [pc, #584]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f003 030c 	and.w	r3, r3, #12
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d00c      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a5d8:	4b8f      	ldr	r3, [pc, #572]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	f003 030c 	and.w	r3, r3, #12
 800a5e0:	2b08      	cmp	r3, #8
 800a5e2:	d112      	bne.n	800a60a <HAL_RCC_OscConfig+0x5e>
 800a5e4:	4b8c      	ldr	r3, [pc, #560]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f0:	d10b      	bne.n	800a60a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5f2:	4b89      	ldr	r3, [pc, #548]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d06c      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x12c>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d168      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e24c      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a612:	d106      	bne.n	800a622 <HAL_RCC_OscConfig+0x76>
 800a614:	4b80      	ldr	r3, [pc, #512]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a7f      	ldr	r2, [pc, #508]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a61a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e02e      	b.n	800a680 <HAL_RCC_OscConfig+0xd4>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10c      	bne.n	800a644 <HAL_RCC_OscConfig+0x98>
 800a62a:	4b7b      	ldr	r3, [pc, #492]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a7a      	ldr	r2, [pc, #488]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	4b78      	ldr	r3, [pc, #480]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a77      	ldr	r2, [pc, #476]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a63c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	e01d      	b.n	800a680 <HAL_RCC_OscConfig+0xd4>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a64c:	d10c      	bne.n	800a668 <HAL_RCC_OscConfig+0xbc>
 800a64e:	4b72      	ldr	r3, [pc, #456]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a71      	ldr	r2, [pc, #452]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a658:	6013      	str	r3, [r2, #0]
 800a65a:	4b6f      	ldr	r3, [pc, #444]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a6e      	ldr	r2, [pc, #440]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	e00b      	b.n	800a680 <HAL_RCC_OscConfig+0xd4>
 800a668:	4b6b      	ldr	r3, [pc, #428]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a6a      	ldr	r2, [pc, #424]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a66e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	4b68      	ldr	r3, [pc, #416]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a67      	ldr	r2, [pc, #412]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a67a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a67e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d013      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a688:	f7fd ff4c 	bl	8008524 <HAL_GetTick>
 800a68c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a68e:	e008      	b.n	800a6a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a690:	f7fd ff48 	bl	8008524 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b64      	cmp	r3, #100	; 0x64
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e200      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6a2:	4b5d      	ldr	r3, [pc, #372]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0f0      	beq.n	800a690 <HAL_RCC_OscConfig+0xe4>
 800a6ae:	e014      	b.n	800a6da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6b0:	f7fd ff38 	bl	8008524 <HAL_GetTick>
 800a6b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6b6:	e008      	b.n	800a6ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6b8:	f7fd ff34 	bl	8008524 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b64      	cmp	r3, #100	; 0x64
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e1ec      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6ca:	4b53      	ldr	r3, [pc, #332]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1f0      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x10c>
 800a6d6:	e000      	b.n	800a6da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d063      	beq.n	800a7ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6e6:	4b4c      	ldr	r3, [pc, #304]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f003 030c 	and.w	r3, r3, #12
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a6f2:	4b49      	ldr	r3, [pc, #292]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f003 030c 	and.w	r3, r3, #12
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d11c      	bne.n	800a738 <HAL_RCC_OscConfig+0x18c>
 800a6fe:	4b46      	ldr	r3, [pc, #280]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d116      	bne.n	800a738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a70a:	4b43      	ldr	r3, [pc, #268]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <HAL_RCC_OscConfig+0x176>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d001      	beq.n	800a722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e1c0      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a722:	4b3d      	ldr	r3, [pc, #244]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4939      	ldr	r1, [pc, #228]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a732:	4313      	orrs	r3, r2
 800a734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a736:	e03a      	b.n	800a7ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d020      	beq.n	800a782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a740:	4b36      	ldr	r3, [pc, #216]	; (800a81c <HAL_RCC_OscConfig+0x270>)
 800a742:	2201      	movs	r2, #1
 800a744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a746:	f7fd feed 	bl	8008524 <HAL_GetTick>
 800a74a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a74c:	e008      	b.n	800a760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a74e:	f7fd fee9 	bl	8008524 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d901      	bls.n	800a760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e1a1      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a760:	4b2d      	ldr	r3, [pc, #180]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f0      	beq.n	800a74e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a76c:	4b2a      	ldr	r3, [pc, #168]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4927      	ldr	r1, [pc, #156]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	600b      	str	r3, [r1, #0]
 800a780:	e015      	b.n	800a7ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a782:	4b26      	ldr	r3, [pc, #152]	; (800a81c <HAL_RCC_OscConfig+0x270>)
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a788:	f7fd fecc 	bl	8008524 <HAL_GetTick>
 800a78c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a790:	f7fd fec8 	bl	8008524 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e180      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7a2:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1f0      	bne.n	800a790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0308 	and.w	r3, r3, #8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d03a      	beq.n	800a830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d019      	beq.n	800a7f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7c2:	4b17      	ldr	r3, [pc, #92]	; (800a820 <HAL_RCC_OscConfig+0x274>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7c8:	f7fd feac 	bl	8008524 <HAL_GetTick>
 800a7cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7ce:	e008      	b.n	800a7e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7d0:	f7fd fea8 	bl	8008524 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e160      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <HAL_RCC_OscConfig+0x26c>)
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0f0      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	f000 face 	bl	800ad90 <RCC_Delay>
 800a7f4:	e01c      	b.n	800a830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <HAL_RCC_OscConfig+0x274>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7fc:	f7fd fe92 	bl	8008524 <HAL_GetTick>
 800a800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a802:	e00f      	b.n	800a824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a804:	f7fd fe8e 	bl	8008524 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d908      	bls.n	800a824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e146      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
 800a816:	bf00      	nop
 800a818:	40021000 	.word	0x40021000
 800a81c:	42420000 	.word	0x42420000
 800a820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a824:	4b92      	ldr	r3, [pc, #584]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e9      	bne.n	800a804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80a6 	beq.w	800a98a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a83e:	2300      	movs	r3, #0
 800a840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a842:	4b8b      	ldr	r3, [pc, #556]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10d      	bne.n	800a86a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a84e:	4b88      	ldr	r3, [pc, #544]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	4a87      	ldr	r2, [pc, #540]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a858:	61d3      	str	r3, [r2, #28]
 800a85a:	4b85      	ldr	r3, [pc, #532]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a862:	60bb      	str	r3, [r7, #8]
 800a864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a866:	2301      	movs	r3, #1
 800a868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a86a:	4b82      	ldr	r3, [pc, #520]	; (800aa74 <HAL_RCC_OscConfig+0x4c8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a872:	2b00      	cmp	r3, #0
 800a874:	d118      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a876:	4b7f      	ldr	r3, [pc, #508]	; (800aa74 <HAL_RCC_OscConfig+0x4c8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a7e      	ldr	r2, [pc, #504]	; (800aa74 <HAL_RCC_OscConfig+0x4c8>)
 800a87c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a882:	f7fd fe4f 	bl	8008524 <HAL_GetTick>
 800a886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a888:	e008      	b.n	800a89c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a88a:	f7fd fe4b 	bl	8008524 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	2b64      	cmp	r3, #100	; 0x64
 800a896:	d901      	bls.n	800a89c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e103      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a89c:	4b75      	ldr	r3, [pc, #468]	; (800aa74 <HAL_RCC_OscConfig+0x4c8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0f0      	beq.n	800a88a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d106      	bne.n	800a8be <HAL_RCC_OscConfig+0x312>
 800a8b0:	4b6f      	ldr	r3, [pc, #444]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	4a6e      	ldr	r2, [pc, #440]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	6213      	str	r3, [r2, #32]
 800a8bc:	e02d      	b.n	800a91a <HAL_RCC_OscConfig+0x36e>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10c      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x334>
 800a8c6:	4b6a      	ldr	r3, [pc, #424]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	4a69      	ldr	r2, [pc, #420]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8cc:	f023 0301 	bic.w	r3, r3, #1
 800a8d0:	6213      	str	r3, [r2, #32]
 800a8d2:	4b67      	ldr	r3, [pc, #412]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	4a66      	ldr	r2, [pc, #408]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8d8:	f023 0304 	bic.w	r3, r3, #4
 800a8dc:	6213      	str	r3, [r2, #32]
 800a8de:	e01c      	b.n	800a91a <HAL_RCC_OscConfig+0x36e>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	2b05      	cmp	r3, #5
 800a8e6:	d10c      	bne.n	800a902 <HAL_RCC_OscConfig+0x356>
 800a8e8:	4b61      	ldr	r3, [pc, #388]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	4a60      	ldr	r2, [pc, #384]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8ee:	f043 0304 	orr.w	r3, r3, #4
 800a8f2:	6213      	str	r3, [r2, #32]
 800a8f4:	4b5e      	ldr	r3, [pc, #376]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	4a5d      	ldr	r2, [pc, #372]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a8fa:	f043 0301 	orr.w	r3, r3, #1
 800a8fe:	6213      	str	r3, [r2, #32]
 800a900:	e00b      	b.n	800a91a <HAL_RCC_OscConfig+0x36e>
 800a902:	4b5b      	ldr	r3, [pc, #364]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	4a5a      	ldr	r2, [pc, #360]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a908:	f023 0301 	bic.w	r3, r3, #1
 800a90c:	6213      	str	r3, [r2, #32]
 800a90e:	4b58      	ldr	r3, [pc, #352]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	4a57      	ldr	r2, [pc, #348]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a914:	f023 0304 	bic.w	r3, r3, #4
 800a918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d015      	beq.n	800a94e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a922:	f7fd fdff 	bl	8008524 <HAL_GetTick>
 800a926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a928:	e00a      	b.n	800a940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a92a:	f7fd fdfb 	bl	8008524 <HAL_GetTick>
 800a92e:	4602      	mov	r2, r0
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	f241 3288 	movw	r2, #5000	; 0x1388
 800a938:	4293      	cmp	r3, r2
 800a93a:	d901      	bls.n	800a940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e0b1      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a940:	4b4b      	ldr	r3, [pc, #300]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0ee      	beq.n	800a92a <HAL_RCC_OscConfig+0x37e>
 800a94c:	e014      	b.n	800a978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a94e:	f7fd fde9 	bl	8008524 <HAL_GetTick>
 800a952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a954:	e00a      	b.n	800a96c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a956:	f7fd fde5 	bl	8008524 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	f241 3288 	movw	r2, #5000	; 0x1388
 800a964:	4293      	cmp	r3, r2
 800a966:	d901      	bls.n	800a96c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e09b      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a96c:	4b40      	ldr	r3, [pc, #256]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1ee      	bne.n	800a956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d105      	bne.n	800a98a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a97e:	4b3c      	ldr	r3, [pc, #240]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	4a3b      	ldr	r2, [pc, #236]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 8087 	beq.w	800aaa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a994:	4b36      	ldr	r3, [pc, #216]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f003 030c 	and.w	r3, r3, #12
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	d061      	beq.n	800aa64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d146      	bne.n	800aa36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9a8:	4b33      	ldr	r3, [pc, #204]	; (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ae:	f7fd fdb9 	bl	8008524 <HAL_GetTick>
 800a9b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9b4:	e008      	b.n	800a9c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b6:	f7fd fdb5 	bl	8008524 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d901      	bls.n	800a9c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e06d      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9c8:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1f0      	bne.n	800a9b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9dc:	d108      	bne.n	800a9f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a9de:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	4921      	ldr	r1, [pc, #132]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9f0:	4b1f      	ldr	r3, [pc, #124]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a19      	ldr	r1, [r3, #32]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	430b      	orrs	r3, r1
 800aa02:	491b      	ldr	r1, [pc, #108]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa08:	4b1b      	ldr	r3, [pc, #108]	; (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa0e:	f7fd fd89 	bl	8008524 <HAL_GetTick>
 800aa12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa14:	e008      	b.n	800aa28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa16:	f7fd fd85 	bl	8008524 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d901      	bls.n	800aa28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e03d      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa28:	4b11      	ldr	r3, [pc, #68]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0f0      	beq.n	800aa16 <HAL_RCC_OscConfig+0x46a>
 800aa34:	e035      	b.n	800aaa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa36:	4b10      	ldr	r3, [pc, #64]	; (800aa78 <HAL_RCC_OscConfig+0x4cc>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa3c:	f7fd fd72 	bl	8008524 <HAL_GetTick>
 800aa40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa42:	e008      	b.n	800aa56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa44:	f7fd fd6e 	bl	8008524 <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d901      	bls.n	800aa56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e026      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa56:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f0      	bne.n	800aa44 <HAL_RCC_OscConfig+0x498>
 800aa62:	e01e      	b.n	800aaa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d107      	bne.n	800aa7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e019      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
 800aa70:	40021000 	.word	0x40021000
 800aa74:	40007000 	.word	0x40007000
 800aa78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <HAL_RCC_OscConfig+0x500>)
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d106      	bne.n	800aa9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d001      	beq.n	800aaa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	40021000 	.word	0x40021000

0800aab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e0d0      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aac4:	4b6a      	ldr	r3, [pc, #424]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0307 	and.w	r3, r3, #7
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d910      	bls.n	800aaf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aad2:	4b67      	ldr	r3, [pc, #412]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f023 0207 	bic.w	r2, r3, #7
 800aada:	4965      	ldr	r1, [pc, #404]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	4313      	orrs	r3, r2
 800aae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aae2:	4b63      	ldr	r3, [pc, #396]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d001      	beq.n	800aaf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e0b8      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d020      	beq.n	800ab42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d005      	beq.n	800ab18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab0c:	4b59      	ldr	r3, [pc, #356]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	4a58      	ldr	r2, [pc, #352]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab24:	4b53      	ldr	r3, [pc, #332]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	4a52      	ldr	r2, [pc, #328]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ab2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab30:	4b50      	ldr	r3, [pc, #320]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	494d      	ldr	r1, [pc, #308]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d040      	beq.n	800abd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d107      	bne.n	800ab66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab56:	4b47      	ldr	r3, [pc, #284]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d115      	bne.n	800ab8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e07f      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d107      	bne.n	800ab7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab6e:	4b41      	ldr	r3, [pc, #260]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d109      	bne.n	800ab8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e073      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab7e:	4b3d      	ldr	r3, [pc, #244]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e06b      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab8e:	4b39      	ldr	r3, [pc, #228]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f023 0203 	bic.w	r2, r3, #3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	4936      	ldr	r1, [pc, #216]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aba0:	f7fd fcc0 	bl	8008524 <HAL_GetTick>
 800aba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aba6:	e00a      	b.n	800abbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aba8:	f7fd fcbc 	bl	8008524 <HAL_GetTick>
 800abac:	4602      	mov	r2, r0
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e053      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abbe:	4b2d      	ldr	r3, [pc, #180]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f003 020c 	and.w	r2, r3, #12
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	429a      	cmp	r2, r3
 800abce:	d1eb      	bne.n	800aba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abd0:	4b27      	ldr	r3, [pc, #156]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d210      	bcs.n	800ac00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abde:	4b24      	ldr	r3, [pc, #144]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f023 0207 	bic.w	r2, r3, #7
 800abe6:	4922      	ldr	r1, [pc, #136]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	4313      	orrs	r3, r2
 800abec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abee:	4b20      	ldr	r3, [pc, #128]	; (800ac70 <HAL_RCC_ClockConfig+0x1c0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d001      	beq.n	800ac00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e032      	b.n	800ac66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d008      	beq.n	800ac1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac0c:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	4916      	ldr	r1, [pc, #88]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0308 	and.w	r3, r3, #8
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d009      	beq.n	800ac3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac2a:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	490e      	ldr	r1, [pc, #56]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac3e:	f000 f821 	bl	800ac84 <HAL_RCC_GetSysClockFreq>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b0b      	ldr	r3, [pc, #44]	; (800ac74 <HAL_RCC_ClockConfig+0x1c4>)
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	091b      	lsrs	r3, r3, #4
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	490a      	ldr	r1, [pc, #40]	; (800ac78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac50:	5ccb      	ldrb	r3, [r1, r3]
 800ac52:	fa22 f303 	lsr.w	r3, r2, r3
 800ac56:	4a09      	ldr	r2, [pc, #36]	; (800ac7c <HAL_RCC_ClockConfig+0x1cc>)
 800ac58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <HAL_RCC_ClockConfig+0x1d0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fd fc1e 	bl	80084a0 <HAL_InitTick>

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	40022000 	.word	0x40022000
 800ac74:	40021000 	.word	0x40021000
 800ac78:	0800db34 	.word	0x0800db34
 800ac7c:	200000a8 	.word	0x200000a8
 800ac80:	200000ac 	.word	0x200000ac

0800ac84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	2300      	movs	r3, #0
 800ac94:	617b      	str	r3, [r7, #20]
 800ac96:	2300      	movs	r3, #0
 800ac98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac9e:	4b1e      	ldr	r3, [pc, #120]	; (800ad18 <HAL_RCC_GetSysClockFreq+0x94>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f003 030c 	and.w	r3, r3, #12
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d002      	beq.n	800acb4 <HAL_RCC_GetSysClockFreq+0x30>
 800acae:	2b08      	cmp	r3, #8
 800acb0:	d003      	beq.n	800acba <HAL_RCC_GetSysClockFreq+0x36>
 800acb2:	e027      	b.n	800ad04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800acb4:	4b19      	ldr	r3, [pc, #100]	; (800ad1c <HAL_RCC_GetSysClockFreq+0x98>)
 800acb6:	613b      	str	r3, [r7, #16]
      break;
 800acb8:	e027      	b.n	800ad0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	0c9b      	lsrs	r3, r3, #18
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	4a17      	ldr	r2, [pc, #92]	; (800ad20 <HAL_RCC_GetSysClockFreq+0x9c>)
 800acc4:	5cd3      	ldrb	r3, [r2, r3]
 800acc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d010      	beq.n	800acf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800acd2:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <HAL_RCC_GetSysClockFreq+0x94>)
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	0c5b      	lsrs	r3, r3, #17
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	4a11      	ldr	r2, [pc, #68]	; (800ad24 <HAL_RCC_GetSysClockFreq+0xa0>)
 800acde:	5cd3      	ldrb	r3, [r2, r3]
 800ace0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a0d      	ldr	r2, [pc, #52]	; (800ad1c <HAL_RCC_GetSysClockFreq+0x98>)
 800ace6:	fb03 f202 	mul.w	r2, r3, r2
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	e004      	b.n	800acfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a0c      	ldr	r2, [pc, #48]	; (800ad28 <HAL_RCC_GetSysClockFreq+0xa4>)
 800acf8:	fb02 f303 	mul.w	r3, r2, r3
 800acfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	613b      	str	r3, [r7, #16]
      break;
 800ad02:	e002      	b.n	800ad0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ad04:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <HAL_RCC_GetSysClockFreq+0x98>)
 800ad06:	613b      	str	r3, [r7, #16]
      break;
 800ad08:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad0a:	693b      	ldr	r3, [r7, #16]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	371c      	adds	r7, #28
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bc80      	pop	{r7}
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	40021000 	.word	0x40021000
 800ad1c:	007a1200 	.word	0x007a1200
 800ad20:	0800db4c 	.word	0x0800db4c
 800ad24:	0800db5c 	.word	0x0800db5c
 800ad28:	003d0900 	.word	0x003d0900

0800ad2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad30:	4b02      	ldr	r3, [pc, #8]	; (800ad3c <HAL_RCC_GetHCLKFreq+0x10>)
 800ad32:	681b      	ldr	r3, [r3, #0]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bc80      	pop	{r7}
 800ad3a:	4770      	bx	lr
 800ad3c:	200000a8 	.word	0x200000a8

0800ad40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ad44:	f7ff fff2 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	4903      	ldr	r1, [pc, #12]	; (800ad64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad56:	5ccb      	ldrb	r3, [r1, r3]
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40021000 	.word	0x40021000
 800ad64:	0800db44 	.word	0x0800db44

0800ad68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ad6c:	f7ff ffde 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	0adb      	lsrs	r3, r3, #11
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	4903      	ldr	r1, [pc, #12]	; (800ad8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad7e:	5ccb      	ldrb	r3, [r1, r3]
 800ad80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	40021000 	.word	0x40021000
 800ad8c:	0800db44 	.word	0x0800db44

0800ad90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <RCC_Delay+0x34>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a0a      	ldr	r2, [pc, #40]	; (800adc8 <RCC_Delay+0x38>)
 800ad9e:	fba2 2303 	umull	r2, r3, r2, r3
 800ada2:	0a5b      	lsrs	r3, r3, #9
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	fb02 f303 	mul.w	r3, r2, r3
 800adaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800adac:	bf00      	nop
  }
  while (Delay --);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	1e5a      	subs	r2, r3, #1
 800adb2:	60fa      	str	r2, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1f9      	bne.n	800adac <RCC_Delay+0x1c>
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bc80      	pop	{r7}
 800adc2:	4770      	bx	lr
 800adc4:	200000a8 	.word	0x200000a8
 800adc8:	10624dd3 	.word	0x10624dd3

0800adcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e041      	b.n	800ae62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d106      	bne.n	800adf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7fd fa26 	bl	8008244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3304      	adds	r3, #4
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	f000 fa82 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d001      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e044      	b.n	800af0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68da      	ldr	r2, [r3, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 0201 	orr.w	r2, r2, #1
 800ae9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a1d      	ldr	r2, [pc, #116]	; (800af18 <HAL_TIM_Base_Start_IT+0xac>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d018      	beq.n	800aed8 <HAL_TIM_Base_Start_IT+0x6c>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a1c      	ldr	r2, [pc, #112]	; (800af1c <HAL_TIM_Base_Start_IT+0xb0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d013      	beq.n	800aed8 <HAL_TIM_Base_Start_IT+0x6c>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb8:	d00e      	beq.n	800aed8 <HAL_TIM_Base_Start_IT+0x6c>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a18      	ldr	r2, [pc, #96]	; (800af20 <HAL_TIM_Base_Start_IT+0xb4>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d009      	beq.n	800aed8 <HAL_TIM_Base_Start_IT+0x6c>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a16      	ldr	r2, [pc, #88]	; (800af24 <HAL_TIM_Base_Start_IT+0xb8>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d004      	beq.n	800aed8 <HAL_TIM_Base_Start_IT+0x6c>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a15      	ldr	r2, [pc, #84]	; (800af28 <HAL_TIM_Base_Start_IT+0xbc>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d111      	bne.n	800aefc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b06      	cmp	r3, #6
 800aee8:	d010      	beq.n	800af0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f042 0201 	orr.w	r2, r2, #1
 800aef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aefa:	e007      	b.n	800af0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f042 0201 	orr.w	r2, r2, #1
 800af0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	bc80      	pop	{r7}
 800af16:	4770      	bx	lr
 800af18:	40012c00 	.word	0x40012c00
 800af1c:	40013400 	.word	0x40013400
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00

0800af2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0302 	and.w	r3, r3, #2
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d122      	bne.n	800af88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d11b      	bne.n	800af88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0202 	mvn.w	r2, #2
 800af58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f003 0303 	and.w	r3, r3, #3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9b4 	bl	800b2dc <HAL_TIM_IC_CaptureCallback>
 800af74:	e005      	b.n	800af82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f9a7 	bl	800b2ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f9b6 	bl	800b2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b04      	cmp	r3, #4
 800af94:	d122      	bne.n	800afdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d11b      	bne.n	800afdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f06f 0204 	mvn.w	r2, #4
 800afac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2202      	movs	r2, #2
 800afb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f98a 	bl	800b2dc <HAL_TIM_IC_CaptureCallback>
 800afc8:	e005      	b.n	800afd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f97d 	bl	800b2ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f98c 	bl	800b2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f003 0308 	and.w	r3, r3, #8
 800afe6:	2b08      	cmp	r3, #8
 800afe8:	d122      	bne.n	800b030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f003 0308 	and.w	r3, r3, #8
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d11b      	bne.n	800b030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f06f 0208 	mvn.w	r2, #8
 800b000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2204      	movs	r2, #4
 800b006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f960 	bl	800b2dc <HAL_TIM_IC_CaptureCallback>
 800b01c:	e005      	b.n	800b02a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f953 	bl	800b2ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f962 	bl	800b2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	f003 0310 	and.w	r3, r3, #16
 800b03a:	2b10      	cmp	r3, #16
 800b03c:	d122      	bne.n	800b084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b10      	cmp	r3, #16
 800b04a:	d11b      	bne.n	800b084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f06f 0210 	mvn.w	r2, #16
 800b054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2208      	movs	r2, #8
 800b05a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	69db      	ldr	r3, [r3, #28]
 800b062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f936 	bl	800b2dc <HAL_TIM_IC_CaptureCallback>
 800b070:	e005      	b.n	800b07e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f929 	bl	800b2ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f938 	bl	800b2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d10e      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d107      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f06f 0201 	mvn.w	r2, #1
 800b0a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7fc fd62 	bl	8007b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ba:	2b80      	cmp	r3, #128	; 0x80
 800b0bc:	d10e      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c8:	2b80      	cmp	r3, #128	; 0x80
 800b0ca:	d107      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 faa1 	bl	800b61e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d10e      	bne.n	800b108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d107      	bne.n	800b108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f8fc 	bl	800b300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f003 0320 	and.w	r3, r3, #32
 800b112:	2b20      	cmp	r3, #32
 800b114:	d10e      	bne.n	800b134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f003 0320 	and.w	r3, r3, #32
 800b120:	2b20      	cmp	r3, #32
 800b122:	d107      	bne.n	800b134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f06f 0220 	mvn.w	r2, #32
 800b12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fa6c 	bl	800b60c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b150:	2b01      	cmp	r3, #1
 800b152:	d101      	bne.n	800b158 <HAL_TIM_ConfigClockSource+0x1c>
 800b154:	2302      	movs	r3, #2
 800b156:	e0b4      	b.n	800b2c2 <HAL_TIM_ConfigClockSource+0x186>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b17e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b190:	d03e      	beq.n	800b210 <HAL_TIM_ConfigClockSource+0xd4>
 800b192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b196:	f200 8087 	bhi.w	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b19a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b19e:	f000 8086 	beq.w	800b2ae <HAL_TIM_ConfigClockSource+0x172>
 800b1a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a6:	d87f      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a8:	2b70      	cmp	r3, #112	; 0x70
 800b1aa:	d01a      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0xa6>
 800b1ac:	2b70      	cmp	r3, #112	; 0x70
 800b1ae:	d87b      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b0:	2b60      	cmp	r3, #96	; 0x60
 800b1b2:	d050      	beq.n	800b256 <HAL_TIM_ConfigClockSource+0x11a>
 800b1b4:	2b60      	cmp	r3, #96	; 0x60
 800b1b6:	d877      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b8:	2b50      	cmp	r3, #80	; 0x50
 800b1ba:	d03c      	beq.n	800b236 <HAL_TIM_ConfigClockSource+0xfa>
 800b1bc:	2b50      	cmp	r3, #80	; 0x50
 800b1be:	d873      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c0:	2b40      	cmp	r3, #64	; 0x40
 800b1c2:	d058      	beq.n	800b276 <HAL_TIM_ConfigClockSource+0x13a>
 800b1c4:	2b40      	cmp	r3, #64	; 0x40
 800b1c6:	d86f      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c8:	2b30      	cmp	r3, #48	; 0x30
 800b1ca:	d064      	beq.n	800b296 <HAL_TIM_ConfigClockSource+0x15a>
 800b1cc:	2b30      	cmp	r3, #48	; 0x30
 800b1ce:	d86b      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d060      	beq.n	800b296 <HAL_TIM_ConfigClockSource+0x15a>
 800b1d4:	2b20      	cmp	r3, #32
 800b1d6:	d867      	bhi.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d05c      	beq.n	800b296 <HAL_TIM_ConfigClockSource+0x15a>
 800b1dc:	2b10      	cmp	r3, #16
 800b1de:	d05a      	beq.n	800b296 <HAL_TIM_ConfigClockSource+0x15a>
 800b1e0:	e062      	b.n	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1f2:	f000 f980 	bl	800b4f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	609a      	str	r2, [r3, #8]
      break;
 800b20e:	e04f      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b220:	f000 f969 	bl	800b4f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b232:	609a      	str	r2, [r3, #8]
      break;
 800b234:	e03c      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b242:	461a      	mov	r2, r3
 800b244:	f000 f8e0 	bl	800b408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2150      	movs	r1, #80	; 0x50
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 f937 	bl	800b4c2 <TIM_ITRx_SetConfig>
      break;
 800b254:	e02c      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b262:	461a      	mov	r2, r3
 800b264:	f000 f8fe 	bl	800b464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2160      	movs	r1, #96	; 0x60
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 f927 	bl	800b4c2 <TIM_ITRx_SetConfig>
      break;
 800b274:	e01c      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b282:	461a      	mov	r2, r3
 800b284:	f000 f8c0 	bl	800b408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f917 	bl	800b4c2 <TIM_ITRx_SetConfig>
      break;
 800b294:	e00c      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	f000 f90e 	bl	800b4c2 <TIM_ITRx_SetConfig>
      break;
 800b2a6:	e003      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ac:	e000      	b.n	800b2b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b2ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2d2:	bf00      	nop
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bc80      	pop	{r7}
 800b2da:	4770      	bx	lr

0800b2dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bc80      	pop	{r7}
 800b2ec:	4770      	bx	lr

0800b2ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b083      	sub	sp, #12
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2f6:	bf00      	nop
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bc80      	pop	{r7}
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr
	...

0800b314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a33      	ldr	r2, [pc, #204]	; (800b3f4 <TIM_Base_SetConfig+0xe0>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d013      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a32      	ldr	r2, [pc, #200]	; (800b3f8 <TIM_Base_SetConfig+0xe4>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d00f      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33a:	d00b      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a2f      	ldr	r2, [pc, #188]	; (800b3fc <TIM_Base_SetConfig+0xe8>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d007      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a2e      	ldr	r2, [pc, #184]	; (800b400 <TIM_Base_SetConfig+0xec>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d003      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a2d      	ldr	r2, [pc, #180]	; (800b404 <TIM_Base_SetConfig+0xf0>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d108      	bne.n	800b366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4313      	orrs	r3, r2
 800b364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a22      	ldr	r2, [pc, #136]	; (800b3f4 <TIM_Base_SetConfig+0xe0>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d013      	beq.n	800b396 <TIM_Base_SetConfig+0x82>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a21      	ldr	r2, [pc, #132]	; (800b3f8 <TIM_Base_SetConfig+0xe4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00f      	beq.n	800b396 <TIM_Base_SetConfig+0x82>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37c:	d00b      	beq.n	800b396 <TIM_Base_SetConfig+0x82>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <TIM_Base_SetConfig+0xe8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d007      	beq.n	800b396 <TIM_Base_SetConfig+0x82>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a1d      	ldr	r2, [pc, #116]	; (800b400 <TIM_Base_SetConfig+0xec>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d003      	beq.n	800b396 <TIM_Base_SetConfig+0x82>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a1c      	ldr	r2, [pc, #112]	; (800b404 <TIM_Base_SetConfig+0xf0>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d108      	bne.n	800b3a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b39c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a09      	ldr	r2, [pc, #36]	; (800b3f4 <TIM_Base_SetConfig+0xe0>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d003      	beq.n	800b3dc <TIM_Base_SetConfig+0xc8>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a08      	ldr	r2, [pc, #32]	; (800b3f8 <TIM_Base_SetConfig+0xe4>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d103      	bne.n	800b3e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	691a      	ldr	r2, [r3, #16]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	615a      	str	r2, [r3, #20]
}
 800b3ea:	bf00      	nop
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bc80      	pop	{r7}
 800b3f2:	4770      	bx	lr
 800b3f4:	40012c00 	.word	0x40012c00
 800b3f8:	40013400 	.word	0x40013400
 800b3fc:	40000400 	.word	0x40000400
 800b400:	40000800 	.word	0x40000800
 800b404:	40000c00 	.word	0x40000c00

0800b408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f023 0201 	bic.w	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f023 030a 	bic.w	r3, r3, #10
 800b444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	bc80      	pop	{r7}
 800b462:	4770      	bx	lr

0800b464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	f023 0210 	bic.w	r2, r3, #16
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b48e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	031b      	lsls	r3, r3, #12
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	011b      	lsls	r3, r3, #4
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	621a      	str	r2, [r3, #32]
}
 800b4b8:	bf00      	nop
 800b4ba:	371c      	adds	r7, #28
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bc80      	pop	{r7}
 800b4c0:	4770      	bx	lr

0800b4c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	f043 0307 	orr.w	r3, r3, #7
 800b4e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	609a      	str	r2, [r3, #8]
}
 800b4ec:	bf00      	nop
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr

0800b4f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b087      	sub	sp, #28
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	60b9      	str	r1, [r7, #8]
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b510:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	021a      	lsls	r2, r3, #8
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	431a      	orrs	r2, r3
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	4313      	orrs	r3, r2
 800b522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	609a      	str	r2, [r3, #8]
}
 800b52a:	bf00      	nop
 800b52c:	371c      	adds	r7, #28
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr

0800b534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b548:	2302      	movs	r3, #2
 800b54a:	e050      	b.n	800b5ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2202      	movs	r2, #2
 800b558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a1b      	ldr	r2, [pc, #108]	; (800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d018      	beq.n	800b5c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d013      	beq.n	800b5c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a2:	d00e      	beq.n	800b5c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a15      	ldr	r2, [pc, #84]	; (800b600 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d009      	beq.n	800b5c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a14      	ldr	r2, [pc, #80]	; (800b604 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d004      	beq.n	800b5c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a12      	ldr	r2, [pc, #72]	; (800b608 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d10c      	bne.n	800b5dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr
 800b5f8:	40012c00 	.word	0x40012c00
 800b5fc:	40013400 	.word	0x40013400
 800b600:	40000400 	.word	0x40000400
 800b604:	40000800 	.word	0x40000800
 800b608:	40000c00 	.word	0x40000c00

0800b60c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr

0800b61e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr

0800b630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e042      	b.n	800b6c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7fc fe1a 	bl	8008290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2224      	movs	r2, #36	; 0x24
 800b660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fcb5 	bl	800bfe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691a      	ldr	r2, [r3, #16]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695a      	ldr	r2, [r3, #20]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68da      	ldr	r2, [r3, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2220      	movs	r2, #32
 800b6bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d121      	bne.n	800b72e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <HAL_UART_Transmit_IT+0x26>
 800b6f0:	88fb      	ldrh	r3, [r7, #6]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e01a      	b.n	800b730 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	88fa      	ldrh	r2, [r7, #6]
 800b704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	88fa      	ldrh	r2, [r7, #6]
 800b70a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2221      	movs	r2, #33	; 0x21
 800b716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b728:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	e000      	b.n	800b730 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b72e:	2302      	movs	r3, #2
  }
}
 800b730:	4618      	mov	r0, r3
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
	...

0800b73c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b0ba      	sub	sp, #232	; 0xe8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b762:	2300      	movs	r3, #0
 800b764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b768:	2300      	movs	r3, #0
 800b76a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b772:	f003 030f 	and.w	r3, r3, #15
 800b776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b77a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10f      	bne.n	800b7a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b786:	f003 0320 	and.w	r3, r3, #32
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d009      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x66>
 800b78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b792:	f003 0320 	and.w	r3, r3, #32
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fb63 	bl	800be66 <UART_Receive_IT>
      return;
 800b7a0:	e25b      	b.n	800bc5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b7a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80de 	beq.w	800b968 <HAL_UART_IRQHandler+0x22c>
 800b7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 80d1 	beq.w	800b968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00b      	beq.n	800b7ea <HAL_UART_IRQHandler+0xae>
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d005      	beq.n	800b7ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e2:	f043 0201 	orr.w	r2, r3, #1
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ee:	f003 0304 	and.w	r3, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00b      	beq.n	800b80e <HAL_UART_IRQHandler+0xd2>
 800b7f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	f043 0202 	orr.w	r2, r3, #2
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b80e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b812:	f003 0302 	and.w	r3, r3, #2
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00b      	beq.n	800b832 <HAL_UART_IRQHandler+0xf6>
 800b81a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d005      	beq.n	800b832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b82a:	f043 0204 	orr.w	r2, r3, #4
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b836:	f003 0308 	and.w	r3, r3, #8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d011      	beq.n	800b862 <HAL_UART_IRQHandler+0x126>
 800b83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b842:	f003 0320 	and.w	r3, r3, #32
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b84a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d005      	beq.n	800b862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b85a:	f043 0208 	orr.w	r2, r3, #8
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 81f2 	beq.w	800bc50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b870:	f003 0320 	and.w	r3, r3, #32
 800b874:	2b00      	cmp	r3, #0
 800b876:	d008      	beq.n	800b88a <HAL_UART_IRQHandler+0x14e>
 800b878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b87c:	f003 0320 	and.w	r3, r3, #32
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 faee 	bl	800be66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	bf14      	ite	ne
 800b898:	2301      	movne	r3, #1
 800b89a:	2300      	moveq	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d103      	bne.n	800b8b6 <HAL_UART_IRQHandler+0x17a>
 800b8ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d04f      	beq.n	800b956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f9f8 	bl	800bcac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d041      	beq.n	800b94e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3314      	adds	r3, #20
 800b8d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b8e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3314      	adds	r3, #20
 800b8f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b906:	e841 2300 	strex	r3, r2, [r1]
 800b90a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b90e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1d9      	bne.n	800b8ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d013      	beq.n	800b946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b922:	4a7e      	ldr	r2, [pc, #504]	; (800bb1c <HAL_UART_IRQHandler+0x3e0>)
 800b924:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fd f86c 	bl	8008a08 <HAL_DMA_Abort_IT>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d016      	beq.n	800b964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b940:	4610      	mov	r0, r2
 800b942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b944:	e00e      	b.n	800b964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f99c 	bl	800bc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b94c:	e00a      	b.n	800b964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f998 	bl	800bc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b954:	e006      	b.n	800b964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f994 	bl	800bc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b962:	e175      	b.n	800bc50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b964:	bf00      	nop
    return;
 800b966:	e173      	b.n	800bc50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	f040 814f 	bne.w	800bc10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b976:	f003 0310 	and.w	r3, r3, #16
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 8148 	beq.w	800bc10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b984:	f003 0310 	and.w	r3, r3, #16
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 8141 	beq.w	800bc10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b98e:	2300      	movs	r3, #0
 800b990:	60bb      	str	r3, [r7, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	60bb      	str	r3, [r7, #8]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	60bb      	str	r3, [r7, #8]
 800b9a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	695b      	ldr	r3, [r3, #20]
 800b9aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 80b6 	beq.w	800bb20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b9c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 8145 	beq.w	800bc54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	f080 813e 	bcs.w	800bc54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	2b20      	cmp	r3, #32
 800b9e8:	f000 8088 	beq.w	800bafc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	330c      	adds	r3, #12
 800b9f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9fa:	e853 3f00 	ldrex	r3, [r3]
 800b9fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	330c      	adds	r3, #12
 800ba14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1d9      	bne.n	800b9ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3314      	adds	r3, #20
 800ba3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba42:	e853 3f00 	ldrex	r3, [r3]
 800ba46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba4a:	f023 0301 	bic.w	r3, r3, #1
 800ba4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3314      	adds	r3, #20
 800ba58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e1      	bne.n	800ba38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3314      	adds	r3, #20
 800ba7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	3314      	adds	r3, #20
 800ba94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba98:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800baa0:	e841 2300 	strex	r3, r2, [r1]
 800baa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800baa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e3      	bne.n	800ba74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2220      	movs	r2, #32
 800bab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	330c      	adds	r3, #12
 800bac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bacc:	f023 0310 	bic.w	r3, r3, #16
 800bad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	330c      	adds	r3, #12
 800bada:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bade:	65ba      	str	r2, [r7, #88]	; 0x58
 800bae0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800baec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e3      	bne.n	800baba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fc ff4b 	bl	8008992 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2202      	movs	r2, #2
 800bb00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f8bf 	bl	800bc96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb18:	e09c      	b.n	800bc54 <HAL_UART_IRQHandler+0x518>
 800bb1a:	bf00      	nop
 800bb1c:	0800bd71 	.word	0x0800bd71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 808e 	beq.w	800bc58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bb3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 8089 	beq.w	800bc58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	e853 3f00 	ldrex	r3, [r3]
 800bb54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	330c      	adds	r3, #12
 800bb66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb6a:	647a      	str	r2, [r7, #68]	; 0x44
 800bb6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb72:	e841 2300 	strex	r3, r2, [r1]
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1e3      	bne.n	800bb46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3314      	adds	r3, #20
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	e853 3f00 	ldrex	r3, [r3]
 800bb8c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	f023 0301 	bic.w	r3, r3, #1
 800bb94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3314      	adds	r3, #20
 800bb9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bba2:	633a      	str	r2, [r7, #48]	; 0x30
 800bba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e3      	bne.n	800bb7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	330c      	adds	r3, #12
 800bbca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	e853 3f00 	ldrex	r3, [r3]
 800bbd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f023 0310 	bic.w	r3, r3, #16
 800bbda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	330c      	adds	r3, #12
 800bbe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bbe8:	61fa      	str	r2, [r7, #28]
 800bbea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	69b9      	ldr	r1, [r7, #24]
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e3      	bne.n	800bbc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2202      	movs	r2, #2
 800bc00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f844 	bl	800bc96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc0e:	e023      	b.n	800bc58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d009      	beq.n	800bc30 <HAL_UART_IRQHandler+0x4f4>
 800bc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f8b5 	bl	800bd98 <UART_Transmit_IT>
    return;
 800bc2e:	e014      	b.n	800bc5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <HAL_UART_IRQHandler+0x51e>
 800bc3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d008      	beq.n	800bc5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f8f4 	bl	800be36 <UART_EndTransmit_IT>
    return;
 800bc4e:	e004      	b.n	800bc5a <HAL_UART_IRQHandler+0x51e>
    return;
 800bc50:	bf00      	nop
 800bc52:	e002      	b.n	800bc5a <HAL_UART_IRQHandler+0x51e>
      return;
 800bc54:	bf00      	nop
 800bc56:	e000      	b.n	800bc5a <HAL_UART_IRQHandler+0x51e>
      return;
 800bc58:	bf00      	nop
  }
}
 800bc5a:	37e8      	adds	r7, #232	; 0xe8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bc80      	pop	{r7}
 800bc70:	4770      	bx	lr

0800bc72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bc7a:	bf00      	nop
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bc80      	pop	{r7}
 800bc82:	4770      	bx	lr

0800bc84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bc80      	pop	{r7}
 800bc94:	4770      	bx	lr

0800bc96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bca2:	bf00      	nop
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bc80      	pop	{r7}
 800bcaa:	4770      	bx	lr

0800bcac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b095      	sub	sp, #84	; 0x54
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	330c      	adds	r3, #12
 800bcba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbe:	e853 3f00 	ldrex	r3, [r3]
 800bcc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	330c      	adds	r3, #12
 800bcd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcd4:	643a      	str	r2, [r7, #64]	; 0x40
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcdc:	e841 2300 	strex	r3, r2, [r1]
 800bce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1e5      	bne.n	800bcb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3314      	adds	r3, #20
 800bcee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	e853 3f00 	ldrex	r3, [r3]
 800bcf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	f023 0301 	bic.w	r3, r3, #1
 800bcfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3314      	adds	r3, #20
 800bd06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd10:	e841 2300 	strex	r3, r2, [r1]
 800bd14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e5      	bne.n	800bce8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d119      	bne.n	800bd58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	330c      	adds	r3, #12
 800bd2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	e853 3f00 	ldrex	r3, [r3]
 800bd32:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f023 0310 	bic.w	r3, r3, #16
 800bd3a:	647b      	str	r3, [r7, #68]	; 0x44
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	330c      	adds	r3, #12
 800bd42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd44:	61ba      	str	r2, [r7, #24]
 800bd46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd48:	6979      	ldr	r1, [r7, #20]
 800bd4a:	69ba      	ldr	r2, [r7, #24]
 800bd4c:	e841 2300 	strex	r3, r2, [r1]
 800bd50:	613b      	str	r3, [r7, #16]
   return(result);
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e5      	bne.n	800bd24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2220      	movs	r2, #32
 800bd5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd66:	bf00      	nop
 800bd68:	3754      	adds	r7, #84	; 0x54
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr

0800bd70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f7ff ff7a 	bl	800bc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd90:	bf00      	nop
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	2b21      	cmp	r3, #33	; 0x21
 800bdaa:	d13e      	bne.n	800be2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb4:	d114      	bne.n	800bde0 <UART_Transmit_IT+0x48>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d110      	bne.n	800bde0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a1b      	ldr	r3, [r3, #32]
 800bdd8:	1c9a      	adds	r2, r3, #2
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	621a      	str	r2, [r3, #32]
 800bdde:	e008      	b.n	800bdf2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	1c59      	adds	r1, r3, #1
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	6211      	str	r1, [r2, #32]
 800bdea:	781a      	ldrb	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	4619      	mov	r1, r3
 800be00:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10f      	bne.n	800be26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68da      	ldr	r2, [r3, #12]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	e000      	b.n	800be2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be2a:	2302      	movs	r3, #2
  }
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	bc80      	pop	{r7}
 800be34:	4770      	bx	lr

0800be36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68da      	ldr	r2, [r3, #12]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff ff02 	bl	800bc60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b08c      	sub	sp, #48	; 0x30
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b22      	cmp	r3, #34	; 0x22
 800be78:	f040 80ae 	bne.w	800bfd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be84:	d117      	bne.n	800beb6 <UART_Receive_IT+0x50>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d113      	bne.n	800beb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	1c9a      	adds	r2, r3, #2
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	629a      	str	r2, [r3, #40]	; 0x28
 800beb4:	e026      	b.n	800bf04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec8:	d007      	beq.n	800beda <UART_Receive_IT+0x74>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <UART_Receive_IT+0x82>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d106      	bne.n	800bee8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	e008      	b.n	800befa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	4619      	mov	r1, r3
 800bf12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d15d      	bne.n	800bfd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68da      	ldr	r2, [r3, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0220 	bic.w	r2, r2, #32
 800bf26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68da      	ldr	r2, [r3, #12]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	695a      	ldr	r2, [r3, #20]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f022 0201 	bic.w	r2, r2, #1
 800bf46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2220      	movs	r2, #32
 800bf4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d135      	bne.n	800bfca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	330c      	adds	r3, #12
 800bf6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	e853 3f00 	ldrex	r3, [r3]
 800bf72:	613b      	str	r3, [r7, #16]
   return(result);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f023 0310 	bic.w	r3, r3, #16
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	330c      	adds	r3, #12
 800bf82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf84:	623a      	str	r2, [r7, #32]
 800bf86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf88:	69f9      	ldr	r1, [r7, #28]
 800bf8a:	6a3a      	ldr	r2, [r7, #32]
 800bf8c:	e841 2300 	strex	r3, r2, [r1]
 800bf90:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1e5      	bne.n	800bf64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0310 	and.w	r3, r3, #16
 800bfa2:	2b10      	cmp	r3, #16
 800bfa4:	d10a      	bne.n	800bfbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fe67 	bl	800bc96 <HAL_UARTEx_RxEventCallback>
 800bfc8:	e002      	b.n	800bfd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff fe51 	bl	800bc72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e002      	b.n	800bfda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e000      	b.n	800bfda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bfd8:	2302      	movs	r3, #2
  }
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3730      	adds	r7, #48	; 0x30
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	689a      	ldr	r2, [r3, #8]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	4313      	orrs	r3, r2
 800c012:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c01e:	f023 030c 	bic.w	r3, r3, #12
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	430b      	orrs	r3, r1
 800c02a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	699a      	ldr	r2, [r3, #24]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a2c      	ldr	r2, [pc, #176]	; (800c0f8 <UART_SetConfig+0x114>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d103      	bne.n	800c054 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c04c:	f7fe fe8c 	bl	800ad68 <HAL_RCC_GetPCLK2Freq>
 800c050:	60f8      	str	r0, [r7, #12]
 800c052:	e002      	b.n	800c05a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c054:	f7fe fe74 	bl	800ad40 <HAL_RCC_GetPCLK1Freq>
 800c058:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	009a      	lsls	r2, r3, #2
 800c064:	441a      	add	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c070:	4a22      	ldr	r2, [pc, #136]	; (800c0fc <UART_SetConfig+0x118>)
 800c072:	fba2 2303 	umull	r2, r3, r2, r3
 800c076:	095b      	lsrs	r3, r3, #5
 800c078:	0119      	lsls	r1, r3, #4
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	4613      	mov	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	009a      	lsls	r2, r3, #2
 800c084:	441a      	add	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c090:	4b1a      	ldr	r3, [pc, #104]	; (800c0fc <UART_SetConfig+0x118>)
 800c092:	fba3 0302 	umull	r0, r3, r3, r2
 800c096:	095b      	lsrs	r3, r3, #5
 800c098:	2064      	movs	r0, #100	; 0x64
 800c09a:	fb00 f303 	mul.w	r3, r0, r3
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	011b      	lsls	r3, r3, #4
 800c0a2:	3332      	adds	r3, #50	; 0x32
 800c0a4:	4a15      	ldr	r2, [pc, #84]	; (800c0fc <UART_SetConfig+0x118>)
 800c0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0aa:	095b      	lsrs	r3, r3, #5
 800c0ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0b0:	4419      	add	r1, r3
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009a      	lsls	r2, r3, #2
 800c0bc:	441a      	add	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0c8:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <UART_SetConfig+0x118>)
 800c0ca:	fba3 0302 	umull	r0, r3, r3, r2
 800c0ce:	095b      	lsrs	r3, r3, #5
 800c0d0:	2064      	movs	r0, #100	; 0x64
 800c0d2:	fb00 f303 	mul.w	r3, r0, r3
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	011b      	lsls	r3, r3, #4
 800c0da:	3332      	adds	r3, #50	; 0x32
 800c0dc:	4a07      	ldr	r2, [pc, #28]	; (800c0fc <UART_SetConfig+0x118>)
 800c0de:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e2:	095b      	lsrs	r3, r3, #5
 800c0e4:	f003 020f 	and.w	r2, r3, #15
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	440a      	add	r2, r1
 800c0ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c0f0:	bf00      	nop
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	40013800 	.word	0x40013800
 800c0fc:	51eb851f 	.word	0x51eb851f

0800c100 <__itoa>:
 800c100:	1e93      	subs	r3, r2, #2
 800c102:	2b22      	cmp	r3, #34	; 0x22
 800c104:	b510      	push	{r4, lr}
 800c106:	460c      	mov	r4, r1
 800c108:	d904      	bls.n	800c114 <__itoa+0x14>
 800c10a:	2300      	movs	r3, #0
 800c10c:	461c      	mov	r4, r3
 800c10e:	700b      	strb	r3, [r1, #0]
 800c110:	4620      	mov	r0, r4
 800c112:	bd10      	pop	{r4, pc}
 800c114:	2a0a      	cmp	r2, #10
 800c116:	d109      	bne.n	800c12c <__itoa+0x2c>
 800c118:	2800      	cmp	r0, #0
 800c11a:	da07      	bge.n	800c12c <__itoa+0x2c>
 800c11c:	232d      	movs	r3, #45	; 0x2d
 800c11e:	700b      	strb	r3, [r1, #0]
 800c120:	2101      	movs	r1, #1
 800c122:	4240      	negs	r0, r0
 800c124:	4421      	add	r1, r4
 800c126:	f000 f90d 	bl	800c344 <__utoa>
 800c12a:	e7f1      	b.n	800c110 <__itoa+0x10>
 800c12c:	2100      	movs	r1, #0
 800c12e:	e7f9      	b.n	800c124 <__itoa+0x24>

0800c130 <itoa>:
 800c130:	f7ff bfe6 	b.w	800c100 <__itoa>

0800c134 <malloc>:
 800c134:	4b02      	ldr	r3, [pc, #8]	; (800c140 <malloc+0xc>)
 800c136:	4601      	mov	r1, r0
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	f000 b823 	b.w	800c184 <_malloc_r>
 800c13e:	bf00      	nop
 800c140:	20000100 	.word	0x20000100

0800c144 <sbrk_aligned>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	4e0e      	ldr	r6, [pc, #56]	; (800c180 <sbrk_aligned+0x3c>)
 800c148:	460c      	mov	r4, r1
 800c14a:	6831      	ldr	r1, [r6, #0]
 800c14c:	4605      	mov	r5, r0
 800c14e:	b911      	cbnz	r1, 800c156 <sbrk_aligned+0x12>
 800c150:	f000 f952 	bl	800c3f8 <_sbrk_r>
 800c154:	6030      	str	r0, [r6, #0]
 800c156:	4621      	mov	r1, r4
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 f94d 	bl	800c3f8 <_sbrk_r>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	d00a      	beq.n	800c178 <sbrk_aligned+0x34>
 800c162:	1cc4      	adds	r4, r0, #3
 800c164:	f024 0403 	bic.w	r4, r4, #3
 800c168:	42a0      	cmp	r0, r4
 800c16a:	d007      	beq.n	800c17c <sbrk_aligned+0x38>
 800c16c:	1a21      	subs	r1, r4, r0
 800c16e:	4628      	mov	r0, r5
 800c170:	f000 f942 	bl	800c3f8 <_sbrk_r>
 800c174:	3001      	adds	r0, #1
 800c176:	d101      	bne.n	800c17c <sbrk_aligned+0x38>
 800c178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c17c:	4620      	mov	r0, r4
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	20000374 	.word	0x20000374

0800c184 <_malloc_r>:
 800c184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c188:	1ccd      	adds	r5, r1, #3
 800c18a:	f025 0503 	bic.w	r5, r5, #3
 800c18e:	3508      	adds	r5, #8
 800c190:	2d0c      	cmp	r5, #12
 800c192:	bf38      	it	cc
 800c194:	250c      	movcc	r5, #12
 800c196:	2d00      	cmp	r5, #0
 800c198:	4607      	mov	r7, r0
 800c19a:	db01      	blt.n	800c1a0 <_malloc_r+0x1c>
 800c19c:	42a9      	cmp	r1, r5
 800c19e:	d905      	bls.n	800c1ac <_malloc_r+0x28>
 800c1a0:	230c      	movs	r3, #12
 800c1a2:	2600      	movs	r6, #0
 800c1a4:	603b      	str	r3, [r7, #0]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c280 <_malloc_r+0xfc>
 800c1b0:	f000 f89c 	bl	800c2ec <__malloc_lock>
 800c1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b8:	461c      	mov	r4, r3
 800c1ba:	bb5c      	cbnz	r4, 800c214 <_malloc_r+0x90>
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4638      	mov	r0, r7
 800c1c0:	f7ff ffc0 	bl	800c144 <sbrk_aligned>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	d155      	bne.n	800c276 <_malloc_r+0xf2>
 800c1ca:	f8d8 4000 	ldr.w	r4, [r8]
 800c1ce:	4626      	mov	r6, r4
 800c1d0:	2e00      	cmp	r6, #0
 800c1d2:	d145      	bne.n	800c260 <_malloc_r+0xdc>
 800c1d4:	2c00      	cmp	r4, #0
 800c1d6:	d048      	beq.n	800c26a <_malloc_r+0xe6>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4638      	mov	r0, r7
 800c1de:	eb04 0903 	add.w	r9, r4, r3
 800c1e2:	f000 f909 	bl	800c3f8 <_sbrk_r>
 800c1e6:	4581      	cmp	r9, r0
 800c1e8:	d13f      	bne.n	800c26a <_malloc_r+0xe6>
 800c1ea:	6821      	ldr	r1, [r4, #0]
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	1a6d      	subs	r5, r5, r1
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7ff ffa7 	bl	800c144 <sbrk_aligned>
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	d037      	beq.n	800c26a <_malloc_r+0xe6>
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	442b      	add	r3, r5
 800c1fe:	6023      	str	r3, [r4, #0]
 800c200:	f8d8 3000 	ldr.w	r3, [r8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d038      	beq.n	800c27a <_malloc_r+0xf6>
 800c208:	685a      	ldr	r2, [r3, #4]
 800c20a:	42a2      	cmp	r2, r4
 800c20c:	d12b      	bne.n	800c266 <_malloc_r+0xe2>
 800c20e:	2200      	movs	r2, #0
 800c210:	605a      	str	r2, [r3, #4]
 800c212:	e00f      	b.n	800c234 <_malloc_r+0xb0>
 800c214:	6822      	ldr	r2, [r4, #0]
 800c216:	1b52      	subs	r2, r2, r5
 800c218:	d41f      	bmi.n	800c25a <_malloc_r+0xd6>
 800c21a:	2a0b      	cmp	r2, #11
 800c21c:	d917      	bls.n	800c24e <_malloc_r+0xca>
 800c21e:	1961      	adds	r1, r4, r5
 800c220:	42a3      	cmp	r3, r4
 800c222:	6025      	str	r5, [r4, #0]
 800c224:	bf18      	it	ne
 800c226:	6059      	strne	r1, [r3, #4]
 800c228:	6863      	ldr	r3, [r4, #4]
 800c22a:	bf08      	it	eq
 800c22c:	f8c8 1000 	streq.w	r1, [r8]
 800c230:	5162      	str	r2, [r4, r5]
 800c232:	604b      	str	r3, [r1, #4]
 800c234:	4638      	mov	r0, r7
 800c236:	f104 060b 	add.w	r6, r4, #11
 800c23a:	f000 f85d 	bl	800c2f8 <__malloc_unlock>
 800c23e:	f026 0607 	bic.w	r6, r6, #7
 800c242:	1d23      	adds	r3, r4, #4
 800c244:	1af2      	subs	r2, r6, r3
 800c246:	d0ae      	beq.n	800c1a6 <_malloc_r+0x22>
 800c248:	1b9b      	subs	r3, r3, r6
 800c24a:	50a3      	str	r3, [r4, r2]
 800c24c:	e7ab      	b.n	800c1a6 <_malloc_r+0x22>
 800c24e:	42a3      	cmp	r3, r4
 800c250:	6862      	ldr	r2, [r4, #4]
 800c252:	d1dd      	bne.n	800c210 <_malloc_r+0x8c>
 800c254:	f8c8 2000 	str.w	r2, [r8]
 800c258:	e7ec      	b.n	800c234 <_malloc_r+0xb0>
 800c25a:	4623      	mov	r3, r4
 800c25c:	6864      	ldr	r4, [r4, #4]
 800c25e:	e7ac      	b.n	800c1ba <_malloc_r+0x36>
 800c260:	4634      	mov	r4, r6
 800c262:	6876      	ldr	r6, [r6, #4]
 800c264:	e7b4      	b.n	800c1d0 <_malloc_r+0x4c>
 800c266:	4613      	mov	r3, r2
 800c268:	e7cc      	b.n	800c204 <_malloc_r+0x80>
 800c26a:	230c      	movs	r3, #12
 800c26c:	4638      	mov	r0, r7
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	f000 f842 	bl	800c2f8 <__malloc_unlock>
 800c274:	e797      	b.n	800c1a6 <_malloc_r+0x22>
 800c276:	6025      	str	r5, [r4, #0]
 800c278:	e7dc      	b.n	800c234 <_malloc_r+0xb0>
 800c27a:	605b      	str	r3, [r3, #4]
 800c27c:	deff      	udf	#255	; 0xff
 800c27e:	bf00      	nop
 800c280:	20000370 	.word	0x20000370

0800c284 <sniprintf>:
 800c284:	b40c      	push	{r2, r3}
 800c286:	b530      	push	{r4, r5, lr}
 800c288:	4b17      	ldr	r3, [pc, #92]	; (800c2e8 <sniprintf+0x64>)
 800c28a:	1e0c      	subs	r4, r1, #0
 800c28c:	681d      	ldr	r5, [r3, #0]
 800c28e:	b09d      	sub	sp, #116	; 0x74
 800c290:	da08      	bge.n	800c2a4 <sniprintf+0x20>
 800c292:	238b      	movs	r3, #139	; 0x8b
 800c294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c298:	602b      	str	r3, [r5, #0]
 800c29a:	b01d      	add	sp, #116	; 0x74
 800c29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2a0:	b002      	add	sp, #8
 800c2a2:	4770      	bx	lr
 800c2a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c2a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c2ac:	bf0c      	ite	eq
 800c2ae:	4623      	moveq	r3, r4
 800c2b0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c2b4:	9304      	str	r3, [sp, #16]
 800c2b6:	9307      	str	r3, [sp, #28]
 800c2b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2bc:	9002      	str	r0, [sp, #8]
 800c2be:	9006      	str	r0, [sp, #24]
 800c2c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	ab21      	add	r3, sp, #132	; 0x84
 800c2c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c2ca:	a902      	add	r1, sp, #8
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	f000 f987 	bl	800c5e0 <_svfiprintf_r>
 800c2d2:	1c43      	adds	r3, r0, #1
 800c2d4:	bfbc      	itt	lt
 800c2d6:	238b      	movlt	r3, #139	; 0x8b
 800c2d8:	602b      	strlt	r3, [r5, #0]
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d0dd      	beq.n	800c29a <sniprintf+0x16>
 800c2de:	2200      	movs	r2, #0
 800c2e0:	9b02      	ldr	r3, [sp, #8]
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e7d9      	b.n	800c29a <sniprintf+0x16>
 800c2e6:	bf00      	nop
 800c2e8:	20000100 	.word	0x20000100

0800c2ec <__malloc_lock>:
 800c2ec:	4801      	ldr	r0, [pc, #4]	; (800c2f4 <__malloc_lock+0x8>)
 800c2ee:	f000 b8bd 	b.w	800c46c <__retarget_lock_acquire_recursive>
 800c2f2:	bf00      	nop
 800c2f4:	200004b0 	.word	0x200004b0

0800c2f8 <__malloc_unlock>:
 800c2f8:	4801      	ldr	r0, [pc, #4]	; (800c300 <__malloc_unlock+0x8>)
 800c2fa:	f000 b8b8 	b.w	800c46e <__retarget_lock_release_recursive>
 800c2fe:	bf00      	nop
 800c300:	200004b0 	.word	0x200004b0

0800c304 <siprintf>:
 800c304:	b40e      	push	{r1, r2, r3}
 800c306:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c30a:	b500      	push	{lr}
 800c30c:	b09c      	sub	sp, #112	; 0x70
 800c30e:	ab1d      	add	r3, sp, #116	; 0x74
 800c310:	9002      	str	r0, [sp, #8]
 800c312:	9006      	str	r0, [sp, #24]
 800c314:	9107      	str	r1, [sp, #28]
 800c316:	9104      	str	r1, [sp, #16]
 800c318:	4808      	ldr	r0, [pc, #32]	; (800c33c <siprintf+0x38>)
 800c31a:	4909      	ldr	r1, [pc, #36]	; (800c340 <siprintf+0x3c>)
 800c31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c320:	9105      	str	r1, [sp, #20]
 800c322:	6800      	ldr	r0, [r0, #0]
 800c324:	a902      	add	r1, sp, #8
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	f000 f95a 	bl	800c5e0 <_svfiprintf_r>
 800c32c:	2200      	movs	r2, #0
 800c32e:	9b02      	ldr	r3, [sp, #8]
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	b01c      	add	sp, #112	; 0x70
 800c334:	f85d eb04 	ldr.w	lr, [sp], #4
 800c338:	b003      	add	sp, #12
 800c33a:	4770      	bx	lr
 800c33c:	20000100 	.word	0x20000100
 800c340:	ffff0208 	.word	0xffff0208

0800c344 <__utoa>:
 800c344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c346:	b08b      	sub	sp, #44	; 0x2c
 800c348:	4605      	mov	r5, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	466e      	mov	r6, sp
 800c34e:	4c1d      	ldr	r4, [pc, #116]	; (800c3c4 <__utoa+0x80>)
 800c350:	f104 0c20 	add.w	ip, r4, #32
 800c354:	4637      	mov	r7, r6
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	6861      	ldr	r1, [r4, #4]
 800c35a:	3408      	adds	r4, #8
 800c35c:	c703      	stmia	r7!, {r0, r1}
 800c35e:	4564      	cmp	r4, ip
 800c360:	463e      	mov	r6, r7
 800c362:	d1f7      	bne.n	800c354 <__utoa+0x10>
 800c364:	7921      	ldrb	r1, [r4, #4]
 800c366:	6820      	ldr	r0, [r4, #0]
 800c368:	7139      	strb	r1, [r7, #4]
 800c36a:	1e91      	subs	r1, r2, #2
 800c36c:	2922      	cmp	r1, #34	; 0x22
 800c36e:	6038      	str	r0, [r7, #0]
 800c370:	f04f 0100 	mov.w	r1, #0
 800c374:	d904      	bls.n	800c380 <__utoa+0x3c>
 800c376:	7019      	strb	r1, [r3, #0]
 800c378:	460b      	mov	r3, r1
 800c37a:	4618      	mov	r0, r3
 800c37c:	b00b      	add	sp, #44	; 0x2c
 800c37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c380:	1e58      	subs	r0, r3, #1
 800c382:	4684      	mov	ip, r0
 800c384:	fbb5 f7f2 	udiv	r7, r5, r2
 800c388:	fb02 5617 	mls	r6, r2, r7, r5
 800c38c:	3628      	adds	r6, #40	; 0x28
 800c38e:	446e      	add	r6, sp
 800c390:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c394:	460c      	mov	r4, r1
 800c396:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c39a:	462e      	mov	r6, r5
 800c39c:	42b2      	cmp	r2, r6
 800c39e:	463d      	mov	r5, r7
 800c3a0:	f101 0101 	add.w	r1, r1, #1
 800c3a4:	d9ee      	bls.n	800c384 <__utoa+0x40>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	545a      	strb	r2, [r3, r1]
 800c3aa:	1919      	adds	r1, r3, r4
 800c3ac:	1aa5      	subs	r5, r4, r2
 800c3ae:	42aa      	cmp	r2, r5
 800c3b0:	dae3      	bge.n	800c37a <__utoa+0x36>
 800c3b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c3b6:	780e      	ldrb	r6, [r1, #0]
 800c3b8:	3201      	adds	r2, #1
 800c3ba:	7006      	strb	r6, [r0, #0]
 800c3bc:	f801 5901 	strb.w	r5, [r1], #-1
 800c3c0:	e7f4      	b.n	800c3ac <__utoa+0x68>
 800c3c2:	bf00      	nop
 800c3c4:	0800db5e 	.word	0x0800db5e

0800c3c8 <strcat>:
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	7814      	ldrb	r4, [r2, #0]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	3201      	adds	r2, #1
 800c3d2:	2c00      	cmp	r4, #0
 800c3d4:	d1fa      	bne.n	800c3cc <strcat+0x4>
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3e0:	2a00      	cmp	r2, #0
 800c3e2:	d1f9      	bne.n	800c3d8 <strcat+0x10>
 800c3e4:	bd10      	pop	{r4, pc}

0800c3e6 <memset>:
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	4402      	add	r2, r0
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d100      	bne.n	800c3f0 <memset+0xa>
 800c3ee:	4770      	bx	lr
 800c3f0:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f4:	e7f9      	b.n	800c3ea <memset+0x4>
	...

0800c3f8 <_sbrk_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4d05      	ldr	r5, [pc, #20]	; (800c414 <_sbrk_r+0x1c>)
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	602b      	str	r3, [r5, #0]
 800c404:	f7fb ffd4 	bl	80083b0 <_sbrk>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_sbrk_r+0x1a>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_sbrk_r+0x1a>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	200004b4 	.word	0x200004b4

0800c418 <__errno>:
 800c418:	4b01      	ldr	r3, [pc, #4]	; (800c420 <__errno+0x8>)
 800c41a:	6818      	ldr	r0, [r3, #0]
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000100 	.word	0x20000100

0800c424 <__libc_init_array>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	2600      	movs	r6, #0
 800c428:	4d0c      	ldr	r5, [pc, #48]	; (800c45c <__libc_init_array+0x38>)
 800c42a:	4c0d      	ldr	r4, [pc, #52]	; (800c460 <__libc_init_array+0x3c>)
 800c42c:	1b64      	subs	r4, r4, r5
 800c42e:	10a4      	asrs	r4, r4, #2
 800c430:	42a6      	cmp	r6, r4
 800c432:	d109      	bne.n	800c448 <__libc_init_array+0x24>
 800c434:	f000 fbc6 	bl	800cbc4 <_init>
 800c438:	2600      	movs	r6, #0
 800c43a:	4d0a      	ldr	r5, [pc, #40]	; (800c464 <__libc_init_array+0x40>)
 800c43c:	4c0a      	ldr	r4, [pc, #40]	; (800c468 <__libc_init_array+0x44>)
 800c43e:	1b64      	subs	r4, r4, r5
 800c440:	10a4      	asrs	r4, r4, #2
 800c442:	42a6      	cmp	r6, r4
 800c444:	d105      	bne.n	800c452 <__libc_init_array+0x2e>
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	f855 3b04 	ldr.w	r3, [r5], #4
 800c44c:	4798      	blx	r3
 800c44e:	3601      	adds	r6, #1
 800c450:	e7ee      	b.n	800c430 <__libc_init_array+0xc>
 800c452:	f855 3b04 	ldr.w	r3, [r5], #4
 800c456:	4798      	blx	r3
 800c458:	3601      	adds	r6, #1
 800c45a:	e7f2      	b.n	800c442 <__libc_init_array+0x1e>
 800c45c:	0800dbb8 	.word	0x0800dbb8
 800c460:	0800dbb8 	.word	0x0800dbb8
 800c464:	0800dbb8 	.word	0x0800dbb8
 800c468:	0800dbbc 	.word	0x0800dbbc

0800c46c <__retarget_lock_acquire_recursive>:
 800c46c:	4770      	bx	lr

0800c46e <__retarget_lock_release_recursive>:
 800c46e:	4770      	bx	lr

0800c470 <memcpy>:
 800c470:	440a      	add	r2, r1
 800c472:	4291      	cmp	r1, r2
 800c474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c478:	d100      	bne.n	800c47c <memcpy+0xc>
 800c47a:	4770      	bx	lr
 800c47c:	b510      	push	{r4, lr}
 800c47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c482:	4291      	cmp	r1, r2
 800c484:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c488:	d1f9      	bne.n	800c47e <memcpy+0xe>
 800c48a:	bd10      	pop	{r4, pc}

0800c48c <strcpy>:
 800c48c:	4603      	mov	r3, r0
 800c48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c492:	f803 2b01 	strb.w	r2, [r3], #1
 800c496:	2a00      	cmp	r2, #0
 800c498:	d1f9      	bne.n	800c48e <strcpy+0x2>
 800c49a:	4770      	bx	lr

0800c49c <_free_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4605      	mov	r5, r0
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	d040      	beq.n	800c526 <_free_r+0x8a>
 800c4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4a8:	1f0c      	subs	r4, r1, #4
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	bfb8      	it	lt
 800c4ae:	18e4      	addlt	r4, r4, r3
 800c4b0:	f7ff ff1c 	bl	800c2ec <__malloc_lock>
 800c4b4:	4a1c      	ldr	r2, [pc, #112]	; (800c528 <_free_r+0x8c>)
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	b933      	cbnz	r3, 800c4c8 <_free_r+0x2c>
 800c4ba:	6063      	str	r3, [r4, #4]
 800c4bc:	6014      	str	r4, [r2, #0]
 800c4be:	4628      	mov	r0, r5
 800c4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c4:	f7ff bf18 	b.w	800c2f8 <__malloc_unlock>
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d908      	bls.n	800c4de <_free_r+0x42>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	1821      	adds	r1, r4, r0
 800c4d0:	428b      	cmp	r3, r1
 800c4d2:	bf01      	itttt	eq
 800c4d4:	6819      	ldreq	r1, [r3, #0]
 800c4d6:	685b      	ldreq	r3, [r3, #4]
 800c4d8:	1809      	addeq	r1, r1, r0
 800c4da:	6021      	streq	r1, [r4, #0]
 800c4dc:	e7ed      	b.n	800c4ba <_free_r+0x1e>
 800c4de:	461a      	mov	r2, r3
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	b10b      	cbz	r3, 800c4e8 <_free_r+0x4c>
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	d9fa      	bls.n	800c4de <_free_r+0x42>
 800c4e8:	6811      	ldr	r1, [r2, #0]
 800c4ea:	1850      	adds	r0, r2, r1
 800c4ec:	42a0      	cmp	r0, r4
 800c4ee:	d10b      	bne.n	800c508 <_free_r+0x6c>
 800c4f0:	6820      	ldr	r0, [r4, #0]
 800c4f2:	4401      	add	r1, r0
 800c4f4:	1850      	adds	r0, r2, r1
 800c4f6:	4283      	cmp	r3, r0
 800c4f8:	6011      	str	r1, [r2, #0]
 800c4fa:	d1e0      	bne.n	800c4be <_free_r+0x22>
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	4408      	add	r0, r1
 800c502:	6010      	str	r0, [r2, #0]
 800c504:	6053      	str	r3, [r2, #4]
 800c506:	e7da      	b.n	800c4be <_free_r+0x22>
 800c508:	d902      	bls.n	800c510 <_free_r+0x74>
 800c50a:	230c      	movs	r3, #12
 800c50c:	602b      	str	r3, [r5, #0]
 800c50e:	e7d6      	b.n	800c4be <_free_r+0x22>
 800c510:	6820      	ldr	r0, [r4, #0]
 800c512:	1821      	adds	r1, r4, r0
 800c514:	428b      	cmp	r3, r1
 800c516:	bf01      	itttt	eq
 800c518:	6819      	ldreq	r1, [r3, #0]
 800c51a:	685b      	ldreq	r3, [r3, #4]
 800c51c:	1809      	addeq	r1, r1, r0
 800c51e:	6021      	streq	r1, [r4, #0]
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	6054      	str	r4, [r2, #4]
 800c524:	e7cb      	b.n	800c4be <_free_r+0x22>
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20000370 	.word	0x20000370

0800c52c <__ssputs_r>:
 800c52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c530:	461f      	mov	r7, r3
 800c532:	688e      	ldr	r6, [r1, #8]
 800c534:	4682      	mov	sl, r0
 800c536:	42be      	cmp	r6, r7
 800c538:	460c      	mov	r4, r1
 800c53a:	4690      	mov	r8, r2
 800c53c:	680b      	ldr	r3, [r1, #0]
 800c53e:	d82c      	bhi.n	800c59a <__ssputs_r+0x6e>
 800c540:	898a      	ldrh	r2, [r1, #12]
 800c542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c546:	d026      	beq.n	800c596 <__ssputs_r+0x6a>
 800c548:	6965      	ldr	r5, [r4, #20]
 800c54a:	6909      	ldr	r1, [r1, #16]
 800c54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c550:	eba3 0901 	sub.w	r9, r3, r1
 800c554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c558:	1c7b      	adds	r3, r7, #1
 800c55a:	444b      	add	r3, r9
 800c55c:	106d      	asrs	r5, r5, #1
 800c55e:	429d      	cmp	r5, r3
 800c560:	bf38      	it	cc
 800c562:	461d      	movcc	r5, r3
 800c564:	0553      	lsls	r3, r2, #21
 800c566:	d527      	bpl.n	800c5b8 <__ssputs_r+0x8c>
 800c568:	4629      	mov	r1, r5
 800c56a:	f7ff fe0b 	bl	800c184 <_malloc_r>
 800c56e:	4606      	mov	r6, r0
 800c570:	b360      	cbz	r0, 800c5cc <__ssputs_r+0xa0>
 800c572:	464a      	mov	r2, r9
 800c574:	6921      	ldr	r1, [r4, #16]
 800c576:	f7ff ff7b 	bl	800c470 <memcpy>
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	6126      	str	r6, [r4, #16]
 800c588:	444e      	add	r6, r9
 800c58a:	6026      	str	r6, [r4, #0]
 800c58c:	463e      	mov	r6, r7
 800c58e:	6165      	str	r5, [r4, #20]
 800c590:	eba5 0509 	sub.w	r5, r5, r9
 800c594:	60a5      	str	r5, [r4, #8]
 800c596:	42be      	cmp	r6, r7
 800c598:	d900      	bls.n	800c59c <__ssputs_r+0x70>
 800c59a:	463e      	mov	r6, r7
 800c59c:	4632      	mov	r2, r6
 800c59e:	4641      	mov	r1, r8
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	f000 fade 	bl	800cb62 <memmove>
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	68a3      	ldr	r3, [r4, #8]
 800c5aa:	1b9b      	subs	r3, r3, r6
 800c5ac:	60a3      	str	r3, [r4, #8]
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	4433      	add	r3, r6
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	f000 faa3 	bl	800cb04 <_realloc_r>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d1e0      	bne.n	800c586 <__ssputs_r+0x5a>
 800c5c4:	4650      	mov	r0, sl
 800c5c6:	6921      	ldr	r1, [r4, #16]
 800c5c8:	f7ff ff68 	bl	800c49c <_free_r>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	f8ca 3000 	str.w	r3, [sl]
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	e7e9      	b.n	800c5b4 <__ssputs_r+0x88>

0800c5e0 <_svfiprintf_r>:
 800c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	4698      	mov	r8, r3
 800c5e6:	898b      	ldrh	r3, [r1, #12]
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	061b      	lsls	r3, r3, #24
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	4614      	mov	r4, r2
 800c5f0:	b09d      	sub	sp, #116	; 0x74
 800c5f2:	d50e      	bpl.n	800c612 <_svfiprintf_r+0x32>
 800c5f4:	690b      	ldr	r3, [r1, #16]
 800c5f6:	b963      	cbnz	r3, 800c612 <_svfiprintf_r+0x32>
 800c5f8:	2140      	movs	r1, #64	; 0x40
 800c5fa:	f7ff fdc3 	bl	800c184 <_malloc_r>
 800c5fe:	6028      	str	r0, [r5, #0]
 800c600:	6128      	str	r0, [r5, #16]
 800c602:	b920      	cbnz	r0, 800c60e <_svfiprintf_r+0x2e>
 800c604:	230c      	movs	r3, #12
 800c606:	603b      	str	r3, [r7, #0]
 800c608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c60c:	e0d0      	b.n	800c7b0 <_svfiprintf_r+0x1d0>
 800c60e:	2340      	movs	r3, #64	; 0x40
 800c610:	616b      	str	r3, [r5, #20]
 800c612:	2300      	movs	r3, #0
 800c614:	9309      	str	r3, [sp, #36]	; 0x24
 800c616:	2320      	movs	r3, #32
 800c618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61c:	2330      	movs	r3, #48	; 0x30
 800c61e:	f04f 0901 	mov.w	r9, #1
 800c622:	f8cd 800c 	str.w	r8, [sp, #12]
 800c626:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c7c8 <_svfiprintf_r+0x1e8>
 800c62a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c62e:	4623      	mov	r3, r4
 800c630:	469a      	mov	sl, r3
 800c632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c636:	b10a      	cbz	r2, 800c63c <_svfiprintf_r+0x5c>
 800c638:	2a25      	cmp	r2, #37	; 0x25
 800c63a:	d1f9      	bne.n	800c630 <_svfiprintf_r+0x50>
 800c63c:	ebba 0b04 	subs.w	fp, sl, r4
 800c640:	d00b      	beq.n	800c65a <_svfiprintf_r+0x7a>
 800c642:	465b      	mov	r3, fp
 800c644:	4622      	mov	r2, r4
 800c646:	4629      	mov	r1, r5
 800c648:	4638      	mov	r0, r7
 800c64a:	f7ff ff6f 	bl	800c52c <__ssputs_r>
 800c64e:	3001      	adds	r0, #1
 800c650:	f000 80a9 	beq.w	800c7a6 <_svfiprintf_r+0x1c6>
 800c654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c656:	445a      	add	r2, fp
 800c658:	9209      	str	r2, [sp, #36]	; 0x24
 800c65a:	f89a 3000 	ldrb.w	r3, [sl]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 80a1 	beq.w	800c7a6 <_svfiprintf_r+0x1c6>
 800c664:	2300      	movs	r3, #0
 800c666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c66e:	f10a 0a01 	add.w	sl, sl, #1
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	9307      	str	r3, [sp, #28]
 800c676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c67a:	931a      	str	r3, [sp, #104]	; 0x68
 800c67c:	4654      	mov	r4, sl
 800c67e:	2205      	movs	r2, #5
 800c680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c684:	4850      	ldr	r0, [pc, #320]	; (800c7c8 <_svfiprintf_r+0x1e8>)
 800c686:	f000 fa86 	bl	800cb96 <memchr>
 800c68a:	9a04      	ldr	r2, [sp, #16]
 800c68c:	b9d8      	cbnz	r0, 800c6c6 <_svfiprintf_r+0xe6>
 800c68e:	06d0      	lsls	r0, r2, #27
 800c690:	bf44      	itt	mi
 800c692:	2320      	movmi	r3, #32
 800c694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c698:	0711      	lsls	r1, r2, #28
 800c69a:	bf44      	itt	mi
 800c69c:	232b      	movmi	r3, #43	; 0x2b
 800c69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a8:	d015      	beq.n	800c6d6 <_svfiprintf_r+0xf6>
 800c6aa:	4654      	mov	r4, sl
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f04f 0c0a 	mov.w	ip, #10
 800c6b2:	9a07      	ldr	r2, [sp, #28]
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ba:	3b30      	subs	r3, #48	; 0x30
 800c6bc:	2b09      	cmp	r3, #9
 800c6be:	d94d      	bls.n	800c75c <_svfiprintf_r+0x17c>
 800c6c0:	b1b0      	cbz	r0, 800c6f0 <_svfiprintf_r+0x110>
 800c6c2:	9207      	str	r2, [sp, #28]
 800c6c4:	e014      	b.n	800c6f0 <_svfiprintf_r+0x110>
 800c6c6:	eba0 0308 	sub.w	r3, r0, r8
 800c6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	46a2      	mov	sl, r4
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	e7d2      	b.n	800c67c <_svfiprintf_r+0x9c>
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	1d19      	adds	r1, r3, #4
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	9103      	str	r1, [sp, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfbb      	ittet	lt
 800c6e2:	425b      	neglt	r3, r3
 800c6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e8:	9307      	strge	r3, [sp, #28]
 800c6ea:	9307      	strlt	r3, [sp, #28]
 800c6ec:	bfb8      	it	lt
 800c6ee:	9204      	strlt	r2, [sp, #16]
 800c6f0:	7823      	ldrb	r3, [r4, #0]
 800c6f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6f4:	d10c      	bne.n	800c710 <_svfiprintf_r+0x130>
 800c6f6:	7863      	ldrb	r3, [r4, #1]
 800c6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fa:	d134      	bne.n	800c766 <_svfiprintf_r+0x186>
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	3402      	adds	r4, #2
 800c700:	1d1a      	adds	r2, r3, #4
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	9203      	str	r2, [sp, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfb8      	it	lt
 800c70a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c70e:	9305      	str	r3, [sp, #20]
 800c710:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c7cc <_svfiprintf_r+0x1ec>
 800c714:	2203      	movs	r2, #3
 800c716:	4650      	mov	r0, sl
 800c718:	7821      	ldrb	r1, [r4, #0]
 800c71a:	f000 fa3c 	bl	800cb96 <memchr>
 800c71e:	b138      	cbz	r0, 800c730 <_svfiprintf_r+0x150>
 800c720:	2240      	movs	r2, #64	; 0x40
 800c722:	9b04      	ldr	r3, [sp, #16]
 800c724:	eba0 000a 	sub.w	r0, r0, sl
 800c728:	4082      	lsls	r2, r0
 800c72a:	4313      	orrs	r3, r2
 800c72c:	3401      	adds	r4, #1
 800c72e:	9304      	str	r3, [sp, #16]
 800c730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c734:	2206      	movs	r2, #6
 800c736:	4826      	ldr	r0, [pc, #152]	; (800c7d0 <_svfiprintf_r+0x1f0>)
 800c738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c73c:	f000 fa2b 	bl	800cb96 <memchr>
 800c740:	2800      	cmp	r0, #0
 800c742:	d038      	beq.n	800c7b6 <_svfiprintf_r+0x1d6>
 800c744:	4b23      	ldr	r3, [pc, #140]	; (800c7d4 <_svfiprintf_r+0x1f4>)
 800c746:	bb1b      	cbnz	r3, 800c790 <_svfiprintf_r+0x1b0>
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	3307      	adds	r3, #7
 800c74c:	f023 0307 	bic.w	r3, r3, #7
 800c750:	3308      	adds	r3, #8
 800c752:	9303      	str	r3, [sp, #12]
 800c754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c756:	4433      	add	r3, r6
 800c758:	9309      	str	r3, [sp, #36]	; 0x24
 800c75a:	e768      	b.n	800c62e <_svfiprintf_r+0x4e>
 800c75c:	460c      	mov	r4, r1
 800c75e:	2001      	movs	r0, #1
 800c760:	fb0c 3202 	mla	r2, ip, r2, r3
 800c764:	e7a6      	b.n	800c6b4 <_svfiprintf_r+0xd4>
 800c766:	2300      	movs	r3, #0
 800c768:	f04f 0c0a 	mov.w	ip, #10
 800c76c:	4619      	mov	r1, r3
 800c76e:	3401      	adds	r4, #1
 800c770:	9305      	str	r3, [sp, #20]
 800c772:	4620      	mov	r0, r4
 800c774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c778:	3a30      	subs	r2, #48	; 0x30
 800c77a:	2a09      	cmp	r2, #9
 800c77c:	d903      	bls.n	800c786 <_svfiprintf_r+0x1a6>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d0c6      	beq.n	800c710 <_svfiprintf_r+0x130>
 800c782:	9105      	str	r1, [sp, #20]
 800c784:	e7c4      	b.n	800c710 <_svfiprintf_r+0x130>
 800c786:	4604      	mov	r4, r0
 800c788:	2301      	movs	r3, #1
 800c78a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c78e:	e7f0      	b.n	800c772 <_svfiprintf_r+0x192>
 800c790:	ab03      	add	r3, sp, #12
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	462a      	mov	r2, r5
 800c796:	4638      	mov	r0, r7
 800c798:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <_svfiprintf_r+0x1f8>)
 800c79a:	a904      	add	r1, sp, #16
 800c79c:	f3af 8000 	nop.w
 800c7a0:	1c42      	adds	r2, r0, #1
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	d1d6      	bne.n	800c754 <_svfiprintf_r+0x174>
 800c7a6:	89ab      	ldrh	r3, [r5, #12]
 800c7a8:	065b      	lsls	r3, r3, #25
 800c7aa:	f53f af2d 	bmi.w	800c608 <_svfiprintf_r+0x28>
 800c7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7b0:	b01d      	add	sp, #116	; 0x74
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b6:	ab03      	add	r3, sp, #12
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	4638      	mov	r0, r7
 800c7be:	4b06      	ldr	r3, [pc, #24]	; (800c7d8 <_svfiprintf_r+0x1f8>)
 800c7c0:	a904      	add	r1, sp, #16
 800c7c2:	f000 f87d 	bl	800c8c0 <_printf_i>
 800c7c6:	e7eb      	b.n	800c7a0 <_svfiprintf_r+0x1c0>
 800c7c8:	0800db83 	.word	0x0800db83
 800c7cc:	0800db89 	.word	0x0800db89
 800c7d0:	0800db8d 	.word	0x0800db8d
 800c7d4:	00000000 	.word	0x00000000
 800c7d8:	0800c52d 	.word	0x0800c52d

0800c7dc <_printf_common>:
 800c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e0:	4616      	mov	r6, r2
 800c7e2:	4699      	mov	r9, r3
 800c7e4:	688a      	ldr	r2, [r1, #8]
 800c7e6:	690b      	ldr	r3, [r1, #16]
 800c7e8:	4607      	mov	r7, r0
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	bfb8      	it	lt
 800c7ee:	4613      	movlt	r3, r2
 800c7f0:	6033      	str	r3, [r6, #0]
 800c7f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7fc:	b10a      	cbz	r2, 800c802 <_printf_common+0x26>
 800c7fe:	3301      	adds	r3, #1
 800c800:	6033      	str	r3, [r6, #0]
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	0699      	lsls	r1, r3, #26
 800c806:	bf42      	ittt	mi
 800c808:	6833      	ldrmi	r3, [r6, #0]
 800c80a:	3302      	addmi	r3, #2
 800c80c:	6033      	strmi	r3, [r6, #0]
 800c80e:	6825      	ldr	r5, [r4, #0]
 800c810:	f015 0506 	ands.w	r5, r5, #6
 800c814:	d106      	bne.n	800c824 <_printf_common+0x48>
 800c816:	f104 0a19 	add.w	sl, r4, #25
 800c81a:	68e3      	ldr	r3, [r4, #12]
 800c81c:	6832      	ldr	r2, [r6, #0]
 800c81e:	1a9b      	subs	r3, r3, r2
 800c820:	42ab      	cmp	r3, r5
 800c822:	dc2b      	bgt.n	800c87c <_printf_common+0xa0>
 800c824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c828:	1e13      	subs	r3, r2, #0
 800c82a:	6822      	ldr	r2, [r4, #0]
 800c82c:	bf18      	it	ne
 800c82e:	2301      	movne	r3, #1
 800c830:	0692      	lsls	r2, r2, #26
 800c832:	d430      	bmi.n	800c896 <_printf_common+0xba>
 800c834:	4649      	mov	r1, r9
 800c836:	4638      	mov	r0, r7
 800c838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c83c:	47c0      	blx	r8
 800c83e:	3001      	adds	r0, #1
 800c840:	d023      	beq.n	800c88a <_printf_common+0xae>
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	6922      	ldr	r2, [r4, #16]
 800c846:	f003 0306 	and.w	r3, r3, #6
 800c84a:	2b04      	cmp	r3, #4
 800c84c:	bf14      	ite	ne
 800c84e:	2500      	movne	r5, #0
 800c850:	6833      	ldreq	r3, [r6, #0]
 800c852:	f04f 0600 	mov.w	r6, #0
 800c856:	bf08      	it	eq
 800c858:	68e5      	ldreq	r5, [r4, #12]
 800c85a:	f104 041a 	add.w	r4, r4, #26
 800c85e:	bf08      	it	eq
 800c860:	1aed      	subeq	r5, r5, r3
 800c862:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c866:	bf08      	it	eq
 800c868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c86c:	4293      	cmp	r3, r2
 800c86e:	bfc4      	itt	gt
 800c870:	1a9b      	subgt	r3, r3, r2
 800c872:	18ed      	addgt	r5, r5, r3
 800c874:	42b5      	cmp	r5, r6
 800c876:	d11a      	bne.n	800c8ae <_printf_common+0xd2>
 800c878:	2000      	movs	r0, #0
 800c87a:	e008      	b.n	800c88e <_printf_common+0xb2>
 800c87c:	2301      	movs	r3, #1
 800c87e:	4652      	mov	r2, sl
 800c880:	4649      	mov	r1, r9
 800c882:	4638      	mov	r0, r7
 800c884:	47c0      	blx	r8
 800c886:	3001      	adds	r0, #1
 800c888:	d103      	bne.n	800c892 <_printf_common+0xb6>
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	3501      	adds	r5, #1
 800c894:	e7c1      	b.n	800c81a <_printf_common+0x3e>
 800c896:	2030      	movs	r0, #48	; 0x30
 800c898:	18e1      	adds	r1, r4, r3
 800c89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c89e:	1c5a      	adds	r2, r3, #1
 800c8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8a4:	4422      	add	r2, r4
 800c8a6:	3302      	adds	r3, #2
 800c8a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8ac:	e7c2      	b.n	800c834 <_printf_common+0x58>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	47c0      	blx	r8
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	d0e6      	beq.n	800c88a <_printf_common+0xae>
 800c8bc:	3601      	adds	r6, #1
 800c8be:	e7d9      	b.n	800c874 <_printf_common+0x98>

0800c8c0 <_printf_i>:
 800c8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c4:	7e0f      	ldrb	r7, [r1, #24]
 800c8c6:	4691      	mov	r9, r2
 800c8c8:	2f78      	cmp	r7, #120	; 0x78
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	469a      	mov	sl, r3
 800c8d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8d6:	d807      	bhi.n	800c8e8 <_printf_i+0x28>
 800c8d8:	2f62      	cmp	r7, #98	; 0x62
 800c8da:	d80a      	bhi.n	800c8f2 <_printf_i+0x32>
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	f000 80d5 	beq.w	800ca8c <_printf_i+0x1cc>
 800c8e2:	2f58      	cmp	r7, #88	; 0x58
 800c8e4:	f000 80c1 	beq.w	800ca6a <_printf_i+0x1aa>
 800c8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8f0:	e03a      	b.n	800c968 <_printf_i+0xa8>
 800c8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8f6:	2b15      	cmp	r3, #21
 800c8f8:	d8f6      	bhi.n	800c8e8 <_printf_i+0x28>
 800c8fa:	a101      	add	r1, pc, #4	; (adr r1, 800c900 <_printf_i+0x40>)
 800c8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c900:	0800c959 	.word	0x0800c959
 800c904:	0800c96d 	.word	0x0800c96d
 800c908:	0800c8e9 	.word	0x0800c8e9
 800c90c:	0800c8e9 	.word	0x0800c8e9
 800c910:	0800c8e9 	.word	0x0800c8e9
 800c914:	0800c8e9 	.word	0x0800c8e9
 800c918:	0800c96d 	.word	0x0800c96d
 800c91c:	0800c8e9 	.word	0x0800c8e9
 800c920:	0800c8e9 	.word	0x0800c8e9
 800c924:	0800c8e9 	.word	0x0800c8e9
 800c928:	0800c8e9 	.word	0x0800c8e9
 800c92c:	0800ca73 	.word	0x0800ca73
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800ca2d 	.word	0x0800ca2d
 800c938:	0800c8e9 	.word	0x0800c8e9
 800c93c:	0800c8e9 	.word	0x0800c8e9
 800c940:	0800ca95 	.word	0x0800ca95
 800c944:	0800c8e9 	.word	0x0800c8e9
 800c948:	0800c999 	.word	0x0800c999
 800c94c:	0800c8e9 	.word	0x0800c8e9
 800c950:	0800c8e9 	.word	0x0800c8e9
 800c954:	0800ca35 	.word	0x0800ca35
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	1d1a      	adds	r2, r3, #4
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	602a      	str	r2, [r5, #0]
 800c960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c968:	2301      	movs	r3, #1
 800c96a:	e0a0      	b.n	800caae <_printf_i+0x1ee>
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	0607      	lsls	r7, r0, #24
 800c972:	f103 0104 	add.w	r1, r3, #4
 800c976:	6029      	str	r1, [r5, #0]
 800c978:	d501      	bpl.n	800c97e <_printf_i+0xbe>
 800c97a:	681e      	ldr	r6, [r3, #0]
 800c97c:	e003      	b.n	800c986 <_printf_i+0xc6>
 800c97e:	0646      	lsls	r6, r0, #25
 800c980:	d5fb      	bpl.n	800c97a <_printf_i+0xba>
 800c982:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c986:	2e00      	cmp	r6, #0
 800c988:	da03      	bge.n	800c992 <_printf_i+0xd2>
 800c98a:	232d      	movs	r3, #45	; 0x2d
 800c98c:	4276      	negs	r6, r6
 800c98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c992:	230a      	movs	r3, #10
 800c994:	4859      	ldr	r0, [pc, #356]	; (800cafc <_printf_i+0x23c>)
 800c996:	e012      	b.n	800c9be <_printf_i+0xfe>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	6820      	ldr	r0, [r4, #0]
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	6029      	str	r1, [r5, #0]
 800c9a0:	0605      	lsls	r5, r0, #24
 800c9a2:	d501      	bpl.n	800c9a8 <_printf_i+0xe8>
 800c9a4:	681e      	ldr	r6, [r3, #0]
 800c9a6:	e002      	b.n	800c9ae <_printf_i+0xee>
 800c9a8:	0641      	lsls	r1, r0, #25
 800c9aa:	d5fb      	bpl.n	800c9a4 <_printf_i+0xe4>
 800c9ac:	881e      	ldrh	r6, [r3, #0]
 800c9ae:	2f6f      	cmp	r7, #111	; 0x6f
 800c9b0:	bf0c      	ite	eq
 800c9b2:	2308      	moveq	r3, #8
 800c9b4:	230a      	movne	r3, #10
 800c9b6:	4851      	ldr	r0, [pc, #324]	; (800cafc <_printf_i+0x23c>)
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9be:	6865      	ldr	r5, [r4, #4]
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	bfa8      	it	ge
 800c9c4:	6821      	ldrge	r1, [r4, #0]
 800c9c6:	60a5      	str	r5, [r4, #8]
 800c9c8:	bfa4      	itt	ge
 800c9ca:	f021 0104 	bicge.w	r1, r1, #4
 800c9ce:	6021      	strge	r1, [r4, #0]
 800c9d0:	b90e      	cbnz	r6, 800c9d6 <_printf_i+0x116>
 800c9d2:	2d00      	cmp	r5, #0
 800c9d4:	d04b      	beq.n	800ca6e <_printf_i+0x1ae>
 800c9d6:	4615      	mov	r5, r2
 800c9d8:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9dc:	fb03 6711 	mls	r7, r3, r1, r6
 800c9e0:	5dc7      	ldrb	r7, [r0, r7]
 800c9e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9e6:	4637      	mov	r7, r6
 800c9e8:	42bb      	cmp	r3, r7
 800c9ea:	460e      	mov	r6, r1
 800c9ec:	d9f4      	bls.n	800c9d8 <_printf_i+0x118>
 800c9ee:	2b08      	cmp	r3, #8
 800c9f0:	d10b      	bne.n	800ca0a <_printf_i+0x14a>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	07de      	lsls	r6, r3, #31
 800c9f6:	d508      	bpl.n	800ca0a <_printf_i+0x14a>
 800c9f8:	6923      	ldr	r3, [r4, #16]
 800c9fa:	6861      	ldr	r1, [r4, #4]
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	bfde      	ittt	le
 800ca00:	2330      	movle	r3, #48	; 0x30
 800ca02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ca0a:	1b52      	subs	r2, r2, r5
 800ca0c:	6122      	str	r2, [r4, #16]
 800ca0e:	464b      	mov	r3, r9
 800ca10:	4621      	mov	r1, r4
 800ca12:	4640      	mov	r0, r8
 800ca14:	f8cd a000 	str.w	sl, [sp]
 800ca18:	aa03      	add	r2, sp, #12
 800ca1a:	f7ff fedf 	bl	800c7dc <_printf_common>
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d14a      	bne.n	800cab8 <_printf_i+0x1f8>
 800ca22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca26:	b004      	add	sp, #16
 800ca28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	f043 0320 	orr.w	r3, r3, #32
 800ca32:	6023      	str	r3, [r4, #0]
 800ca34:	2778      	movs	r7, #120	; 0x78
 800ca36:	4832      	ldr	r0, [pc, #200]	; (800cb00 <_printf_i+0x240>)
 800ca38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	6829      	ldr	r1, [r5, #0]
 800ca40:	061f      	lsls	r7, r3, #24
 800ca42:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca46:	d402      	bmi.n	800ca4e <_printf_i+0x18e>
 800ca48:	065f      	lsls	r7, r3, #25
 800ca4a:	bf48      	it	mi
 800ca4c:	b2b6      	uxthmi	r6, r6
 800ca4e:	07df      	lsls	r7, r3, #31
 800ca50:	bf48      	it	mi
 800ca52:	f043 0320 	orrmi.w	r3, r3, #32
 800ca56:	6029      	str	r1, [r5, #0]
 800ca58:	bf48      	it	mi
 800ca5a:	6023      	strmi	r3, [r4, #0]
 800ca5c:	b91e      	cbnz	r6, 800ca66 <_printf_i+0x1a6>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	f023 0320 	bic.w	r3, r3, #32
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	2310      	movs	r3, #16
 800ca68:	e7a6      	b.n	800c9b8 <_printf_i+0xf8>
 800ca6a:	4824      	ldr	r0, [pc, #144]	; (800cafc <_printf_i+0x23c>)
 800ca6c:	e7e4      	b.n	800ca38 <_printf_i+0x178>
 800ca6e:	4615      	mov	r5, r2
 800ca70:	e7bd      	b.n	800c9ee <_printf_i+0x12e>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	6826      	ldr	r6, [r4, #0]
 800ca76:	1d18      	adds	r0, r3, #4
 800ca78:	6961      	ldr	r1, [r4, #20]
 800ca7a:	6028      	str	r0, [r5, #0]
 800ca7c:	0635      	lsls	r5, r6, #24
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	d501      	bpl.n	800ca86 <_printf_i+0x1c6>
 800ca82:	6019      	str	r1, [r3, #0]
 800ca84:	e002      	b.n	800ca8c <_printf_i+0x1cc>
 800ca86:	0670      	lsls	r0, r6, #25
 800ca88:	d5fb      	bpl.n	800ca82 <_printf_i+0x1c2>
 800ca8a:	8019      	strh	r1, [r3, #0]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4615      	mov	r5, r2
 800ca90:	6123      	str	r3, [r4, #16]
 800ca92:	e7bc      	b.n	800ca0e <_printf_i+0x14e>
 800ca94:	682b      	ldr	r3, [r5, #0]
 800ca96:	2100      	movs	r1, #0
 800ca98:	1d1a      	adds	r2, r3, #4
 800ca9a:	602a      	str	r2, [r5, #0]
 800ca9c:	681d      	ldr	r5, [r3, #0]
 800ca9e:	6862      	ldr	r2, [r4, #4]
 800caa0:	4628      	mov	r0, r5
 800caa2:	f000 f878 	bl	800cb96 <memchr>
 800caa6:	b108      	cbz	r0, 800caac <_printf_i+0x1ec>
 800caa8:	1b40      	subs	r0, r0, r5
 800caaa:	6060      	str	r0, [r4, #4]
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	6123      	str	r3, [r4, #16]
 800cab0:	2300      	movs	r3, #0
 800cab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab6:	e7aa      	b.n	800ca0e <_printf_i+0x14e>
 800cab8:	462a      	mov	r2, r5
 800caba:	4649      	mov	r1, r9
 800cabc:	4640      	mov	r0, r8
 800cabe:	6923      	ldr	r3, [r4, #16]
 800cac0:	47d0      	blx	sl
 800cac2:	3001      	adds	r0, #1
 800cac4:	d0ad      	beq.n	800ca22 <_printf_i+0x162>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	079b      	lsls	r3, r3, #30
 800caca:	d413      	bmi.n	800caf4 <_printf_i+0x234>
 800cacc:	68e0      	ldr	r0, [r4, #12]
 800cace:	9b03      	ldr	r3, [sp, #12]
 800cad0:	4298      	cmp	r0, r3
 800cad2:	bfb8      	it	lt
 800cad4:	4618      	movlt	r0, r3
 800cad6:	e7a6      	b.n	800ca26 <_printf_i+0x166>
 800cad8:	2301      	movs	r3, #1
 800cada:	4632      	mov	r2, r6
 800cadc:	4649      	mov	r1, r9
 800cade:	4640      	mov	r0, r8
 800cae0:	47d0      	blx	sl
 800cae2:	3001      	adds	r0, #1
 800cae4:	d09d      	beq.n	800ca22 <_printf_i+0x162>
 800cae6:	3501      	adds	r5, #1
 800cae8:	68e3      	ldr	r3, [r4, #12]
 800caea:	9903      	ldr	r1, [sp, #12]
 800caec:	1a5b      	subs	r3, r3, r1
 800caee:	42ab      	cmp	r3, r5
 800caf0:	dcf2      	bgt.n	800cad8 <_printf_i+0x218>
 800caf2:	e7eb      	b.n	800cacc <_printf_i+0x20c>
 800caf4:	2500      	movs	r5, #0
 800caf6:	f104 0619 	add.w	r6, r4, #25
 800cafa:	e7f5      	b.n	800cae8 <_printf_i+0x228>
 800cafc:	0800db94 	.word	0x0800db94
 800cb00:	0800dba5 	.word	0x0800dba5

0800cb04 <_realloc_r>:
 800cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb08:	4680      	mov	r8, r0
 800cb0a:	4614      	mov	r4, r2
 800cb0c:	460e      	mov	r6, r1
 800cb0e:	b921      	cbnz	r1, 800cb1a <_realloc_r+0x16>
 800cb10:	4611      	mov	r1, r2
 800cb12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb16:	f7ff bb35 	b.w	800c184 <_malloc_r>
 800cb1a:	b92a      	cbnz	r2, 800cb28 <_realloc_r+0x24>
 800cb1c:	f7ff fcbe 	bl	800c49c <_free_r>
 800cb20:	4625      	mov	r5, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb28:	f000 f843 	bl	800cbb2 <_malloc_usable_size_r>
 800cb2c:	4284      	cmp	r4, r0
 800cb2e:	4607      	mov	r7, r0
 800cb30:	d802      	bhi.n	800cb38 <_realloc_r+0x34>
 800cb32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb36:	d812      	bhi.n	800cb5e <_realloc_r+0x5a>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f7ff fb22 	bl	800c184 <_malloc_r>
 800cb40:	4605      	mov	r5, r0
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d0ed      	beq.n	800cb22 <_realloc_r+0x1e>
 800cb46:	42bc      	cmp	r4, r7
 800cb48:	4622      	mov	r2, r4
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	bf28      	it	cs
 800cb4e:	463a      	movcs	r2, r7
 800cb50:	f7ff fc8e 	bl	800c470 <memcpy>
 800cb54:	4631      	mov	r1, r6
 800cb56:	4640      	mov	r0, r8
 800cb58:	f7ff fca0 	bl	800c49c <_free_r>
 800cb5c:	e7e1      	b.n	800cb22 <_realloc_r+0x1e>
 800cb5e:	4635      	mov	r5, r6
 800cb60:	e7df      	b.n	800cb22 <_realloc_r+0x1e>

0800cb62 <memmove>:
 800cb62:	4288      	cmp	r0, r1
 800cb64:	b510      	push	{r4, lr}
 800cb66:	eb01 0402 	add.w	r4, r1, r2
 800cb6a:	d902      	bls.n	800cb72 <memmove+0x10>
 800cb6c:	4284      	cmp	r4, r0
 800cb6e:	4623      	mov	r3, r4
 800cb70:	d807      	bhi.n	800cb82 <memmove+0x20>
 800cb72:	1e43      	subs	r3, r0, #1
 800cb74:	42a1      	cmp	r1, r4
 800cb76:	d008      	beq.n	800cb8a <memmove+0x28>
 800cb78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb80:	e7f8      	b.n	800cb74 <memmove+0x12>
 800cb82:	4601      	mov	r1, r0
 800cb84:	4402      	add	r2, r0
 800cb86:	428a      	cmp	r2, r1
 800cb88:	d100      	bne.n	800cb8c <memmove+0x2a>
 800cb8a:	bd10      	pop	{r4, pc}
 800cb8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb94:	e7f7      	b.n	800cb86 <memmove+0x24>

0800cb96 <memchr>:
 800cb96:	4603      	mov	r3, r0
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	b2c9      	uxtb	r1, r1
 800cb9c:	4402      	add	r2, r0
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	4618      	mov	r0, r3
 800cba2:	d101      	bne.n	800cba8 <memchr+0x12>
 800cba4:	2000      	movs	r0, #0
 800cba6:	e003      	b.n	800cbb0 <memchr+0x1a>
 800cba8:	7804      	ldrb	r4, [r0, #0]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	428c      	cmp	r4, r1
 800cbae:	d1f6      	bne.n	800cb9e <memchr+0x8>
 800cbb0:	bd10      	pop	{r4, pc}

0800cbb2 <_malloc_usable_size_r>:
 800cbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb6:	1f18      	subs	r0, r3, #4
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	bfbc      	itt	lt
 800cbbc:	580b      	ldrlt	r3, [r1, r0]
 800cbbe:	18c0      	addlt	r0, r0, r3
 800cbc0:	4770      	bx	lr
	...

0800cbc4 <_init>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	bf00      	nop
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr

0800cbd0 <_fini>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr
