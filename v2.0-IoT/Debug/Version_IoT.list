
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c000  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  0800c1e4  0800c1e4  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfcc  0800cfcc  000209a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cfcc  0800cfcc  000209a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cfcc  0800cfcc  000209a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfcc  0800cfcc  0001cfcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfd0  0800cfd0  0001cfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a0  20000000  0800cfd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200009a0  0800d974  000209a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0800d974  00020f14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ea0  00000000  00000000  00020a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269b  00000000  00000000  000338ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  00037088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001adac  00000000  00000000  00037e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ded  00000000  00000000  00052bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fae0  00000000  00000000  0006a9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f6c  00000000  00000000  0010a4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a0 	.word	0x200009a0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c1cc 	.word	0x0800c1cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009a4 	.word	0x200009a4
 8000220:	0800c1cc 	.word	0x0800c1cc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"


void ESP8266_Init(UART_HandleTypeDef *huart1) {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b09c      	sub	sp, #112	; 0x70
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	sprintf(Tx_buffer, "AT+RST\r\n");
 800023c:	494f      	ldr	r1, [pc, #316]	; (800037c <ESP8266_Init+0x148>)
 800023e:	4850      	ldr	r0, [pc, #320]	; (8000380 <ESP8266_Init+0x14c>)
 8000240:	f00b fbb6 	bl	800b9b0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000244:	484e      	ldr	r0, [pc, #312]	; (8000380 <ESP8266_Init+0x14c>)
 8000246:	f7ff ffed 	bl	8000224 <strlen>
 800024a:	4603      	mov	r3, r0
 800024c:	b29b      	uxth	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	494b      	ldr	r1, [pc, #300]	; (8000380 <ESP8266_Init+0x14c>)
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f00a fd84 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800025c:	f007 fcb4 	bl	8007bc8 <HAL_Delay>

	sprintf(Tx_buffer, "AT\r\n");
 8000260:	4948      	ldr	r1, [pc, #288]	; (8000384 <ESP8266_Init+0x150>)
 8000262:	4847      	ldr	r0, [pc, #284]	; (8000380 <ESP8266_Init+0x14c>)
 8000264:	f00b fba4 	bl	800b9b0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000268:	4845      	ldr	r0, [pc, #276]	; (8000380 <ESP8266_Init+0x14c>)
 800026a:	f7ff ffdb 	bl	8000224 <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b29b      	uxth	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	4942      	ldr	r1, [pc, #264]	; (8000380 <ESP8266_Init+0x14c>)
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f00a fd72 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f007 fca2 	bl	8007bc8 <HAL_Delay>

	sprintf(Tx_buffer, "AT+CWMODE=1\r\n");
 8000284:	4940      	ldr	r1, [pc, #256]	; (8000388 <ESP8266_Init+0x154>)
 8000286:	483e      	ldr	r0, [pc, #248]	; (8000380 <ESP8266_Init+0x14c>)
 8000288:	f00b fb92 	bl	800b9b0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 800028c:	483c      	ldr	r0, [pc, #240]	; (8000380 <ESP8266_Init+0x14c>)
 800028e:	f7ff ffc9 	bl	8000224 <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29b      	uxth	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	4939      	ldr	r1, [pc, #228]	; (8000380 <ESP8266_Init+0x14c>)
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f00a fd60 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a4:	f007 fc90 	bl	8007bc8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4a37      	ldr	r2, [pc, #220]	; (800038c <ESP8266_Init+0x158>)
 80002ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b0:	c303      	stmia	r3!, {r0, r1}
 80002b2:	801a      	strh	r2, [r3, #0]
 80002b4:	3302      	adds	r3, #2
 80002b6:	0c12      	lsrs	r2, r2, #16
 80002b8:	701a      	strb	r2, [r3, #0]
	strcat(str, Wifi_name);
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ffb0 	bl	8000224 <strlen>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	f107 030c 	add.w	r3, r7, #12
 80002cc:	4413      	add	r3, r2
 80002ce:	4a30      	ldr	r2, [pc, #192]	; (8000390 <ESP8266_Init+0x15c>)
 80002d0:	461d      	mov	r5, r3
 80002d2:	4614      	mov	r4, r2
 80002d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002d6:	6028      	str	r0, [r5, #0]
 80002d8:	6069      	str	r1, [r5, #4]
 80002da:	60aa      	str	r2, [r5, #8]
 80002dc:	60eb      	str	r3, [r5, #12]
 80002de:	cc03      	ldmia	r4!, {r0, r1}
 80002e0:	6128      	str	r0, [r5, #16]
 80002e2:	6169      	str	r1, [r5, #20]
 80002e4:	8823      	ldrh	r3, [r4, #0]
 80002e6:	78a2      	ldrb	r2, [r4, #2]
 80002e8:	832b      	strh	r3, [r5, #24]
 80002ea:	4613      	mov	r3, r2
 80002ec:	76ab      	strb	r3, [r5, #26]
	strcat(str, "\",\"");
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4413      	add	r3, r2
 8000302:	4a24      	ldr	r2, [pc, #144]	; (8000394 <ESP8266_Init+0x160>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, Wifi_pass);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff89 	bl	8000224 <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4413      	add	r3, r2
 800031c:	4a1e      	ldr	r2, [pc, #120]	; (8000398 <ESP8266_Init+0x164>)
 800031e:	461c      	mov	r4, r3
 8000320:	4613      	mov	r3, r2
 8000322:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000324:	6020      	str	r0, [r4, #0]
 8000326:	6061      	str	r1, [r4, #4]
 8000328:	60a2      	str	r2, [r4, #8]
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	81a3      	strh	r3, [r4, #12]
	strcat(str, "\"\r\n");
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff76 	bl	8000224 <strlen>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	f107 030c 	add.w	r3, r7, #12
 8000340:	4413      	add	r3, r2
 8000342:	4a16      	ldr	r2, [pc, #88]	; (800039c <ESP8266_Init+0x168>)
 8000344:	6810      	ldr	r0, [r2, #0]
 8000346:	6018      	str	r0, [r3, #0]
	sprintf(Tx_buffer, "%s", str);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	461a      	mov	r2, r3
 800034e:	4914      	ldr	r1, [pc, #80]	; (80003a0 <ESP8266_Init+0x16c>)
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <ESP8266_Init+0x14c>)
 8000352:	f00b fb2d 	bl	800b9b0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000356:	480a      	ldr	r0, [pc, #40]	; (8000380 <ESP8266_Init+0x14c>)
 8000358:	f7ff ff64 	bl	8000224 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29b      	uxth	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	4907      	ldr	r1, [pc, #28]	; (8000380 <ESP8266_Init+0x14c>)
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f00a fcfb 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 800036a:	f241 7070 	movw	r0, #6000	; 0x1770
 800036e:	f007 fc2b 	bl	8007bc8 <HAL_Delay>
}
 8000372:	bf00      	nop
 8000374:	3770      	adds	r7, #112	; 0x70
 8000376:	46bd      	mov	sp, r7
 8000378:	bdb0      	pop	{r4, r5, r7, pc}
 800037a:	bf00      	nop
 800037c:	0800c1e4 	.word	0x0800c1e4
 8000380:	200009bc 	.word	0x200009bc
 8000384:	0800c1f0 	.word	0x0800c1f0
 8000388:	0800c1f8 	.word	0x0800c1f8
 800038c:	0800c208 	.word	0x0800c208
 8000390:	0800c214 	.word	0x0800c214
 8000394:	0800c230 	.word	0x0800c230
 8000398:	0800c234 	.word	0x0800c234
 800039c:	0800c244 	.word	0x0800c244
 80003a0:	0800c248 	.word	0x0800c248

080003a4 <SendMachineData>:

void SendMachineData(UART_HandleTypeDef *huart1) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b0c2      	sub	sp, #264	; 0x108
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80003ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003b2:	6018      	str	r0, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(Tx_buffer, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003b4:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <SendMachineData+0xc4>)
 80003b6:	492d      	ldr	r1, [pc, #180]	; (800046c <SendMachineData+0xc8>)
 80003b8:	482d      	ldr	r0, [pc, #180]	; (8000470 <SendMachineData+0xcc>)
 80003ba:	f00b faf9 	bl	800b9b0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 80003be:	482c      	ldr	r0, [pc, #176]	; (8000470 <SendMachineData+0xcc>)
 80003c0:	f7ff ff30 	bl	8000224 <strlen>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80003cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003d0:	4927      	ldr	r1, [pc, #156]	; (8000470 <SendMachineData+0xcc>)
 80003d2:	6818      	ldr	r0, [r3, #0]
 80003d4:	f00a fcc4 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 80003d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80003dc:	f007 fbf4 	bl	8007bc8 <HAL_Delay>

	sprintf(local_txA,
 80003e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003e4:	4a23      	ldr	r2, [pc, #140]	; (8000474 <SendMachineData+0xd0>)
 80003e6:	4924      	ldr	r1, [pc, #144]	; (8000478 <SendMachineData+0xd4>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f00b fae1 	bl	800b9b0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=12345&machineData=111001011021210101001210000102012345678923456 HTTP/1.0\r\nHost: %s\r\n\r\n", Server2);
	len = strlen(local_txA);
 80003ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff16 	bl	8000224 <strlen>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000406:	491d      	ldr	r1, [pc, #116]	; (800047c <SendMachineData+0xd8>)
 8000408:	4618      	mov	r0, r3
 800040a:	f00b fad1 	bl	800b9b0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff06 	bl	8000224 <strlen>
 8000418:	4603      	mov	r3, r0
 800041a:	b29a      	uxth	r2, r3
 800041c:	f107 0108 	add.w	r1, r7, #8
 8000420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	f00a fc99 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 800042e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000432:	f007 fbc9 	bl	8007bc8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fef2 	bl	8000224 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	b29a      	uxth	r2, r3
 8000444:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800044c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	f00a fc85 	bl	800ad60 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 8000456:	f241 3088 	movw	r0, #5000	; 0x1388
 800045a:	f007 fbb5 	bl	8007bc8 <HAL_Delay>
}
 800045e:	bf00      	nop
 8000460:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	0800c24c 	.word	0x0800c24c
 800046c:	0800c25c 	.word	0x0800c25c
 8000470:	200009bc 	.word	0x200009bc
 8000474:	0800c27c 	.word	0x0800c27c
 8000478:	0800c290 	.word	0x0800c290
 800047c:	0800c318 	.word	0x0800c318

08000480 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af02      	add	r7, sp, #8
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f023 030f 	bic.w	r3, r3, #15
 8000490:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	011b      	lsls	r3, r3, #4
 8000496:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000498:	7b7b      	ldrb	r3, [r7, #13]
 800049a:	f043 030c 	orr.w	r3, r3, #12
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004a2:	7b7b      	ldrb	r3, [r7, #13]
 80004a4:	f043 0308 	orr.w	r3, r3, #8
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004ac:	7b3b      	ldrb	r3, [r7, #12]
 80004ae:	f043 030c 	orr.w	r3, r3, #12
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004b6:	7b3b      	ldrb	r3, [r7, #12]
 80004b8:	f043 0308 	orr.w	r3, r3, #8
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c0:	bf00      	nop
 80004c2:	4825      	ldr	r0, [pc, #148]	; (8000558 <lcd_send_cmd+0xd8>)
 80004c4:	f008 ff79 	bl	80093ba <HAL_I2C_GetError>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d0f9      	beq.n	80004c2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004ce:	bf00      	nop
 80004d0:	4821      	ldr	r0, [pc, #132]	; (8000558 <lcd_send_cmd+0xd8>)
 80004d2:	f008 ff65 	bl	80093a0 <HAL_I2C_GetState>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b20      	cmp	r3, #32
 80004da:	d1f9      	bne.n	80004d0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <lcd_send_cmd+0xdc>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d116      	bne.n	8000512 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
 80004e8:	e00f      	b.n	800050a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	3310      	adds	r3, #16
 80004ee:	443b      	add	r3, r7
 80004f0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	f022 0208 	bic.w	r2, r2, #8
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	3310      	adds	r3, #16
 80004fe:	443b      	add	r3, r7
 8000500:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	3301      	adds	r3, #1
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d9ec      	bls.n	80004ea <lcd_send_cmd+0x6a>
 8000510:	e015      	b.n	800053e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000512:	2300      	movs	r3, #0
 8000514:	73bb      	strb	r3, [r7, #14]
 8000516:	e00f      	b.n	8000538 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000518:	7bbb      	ldrb	r3, [r7, #14]
 800051a:	3310      	adds	r3, #16
 800051c:	443b      	add	r3, r7
 800051e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000522:	7bbb      	ldrb	r3, [r7, #14]
 8000524:	f042 0208 	orr.w	r2, r2, #8
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	3310      	adds	r3, #16
 800052c:	443b      	add	r3, r7
 800052e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	3301      	adds	r3, #1
 8000536:	73bb      	strb	r3, [r7, #14]
 8000538:	7bbb      	ldrb	r3, [r7, #14]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d9ec      	bls.n	8000518 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800053e:	f107 0208 	add.w	r2, r7, #8
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2304      	movs	r3, #4
 8000548:	214e      	movs	r1, #78	; 0x4e
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <lcd_send_cmd+0xd8>)
 800054c:	f008 fac8 	bl	8008ae0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000ce0 	.word	0x20000ce0
 800055c:	20000ab6 	.word	0x20000ab6

08000560 <lcd_send_data>:

void lcd_send_data (char data) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	f043 030d 	orr.w	r3, r3, #13
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000582:	7b7b      	ldrb	r3, [r7, #13]
 8000584:	f043 0309 	orr.w	r3, r3, #9
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800058c:	7b3b      	ldrb	r3, [r7, #12]
 800058e:	f043 030d 	orr.w	r3, r3, #13
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000596:	7b3b      	ldrb	r3, [r7, #12]
 8000598:	f043 0309 	orr.w	r3, r3, #9
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a0:	bf00      	nop
 80005a2:	4825      	ldr	r0, [pc, #148]	; (8000638 <lcd_send_data+0xd8>)
 80005a4:	f008 ff09 	bl	80093ba <HAL_I2C_GetError>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d0f9      	beq.n	80005a2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005ae:	bf00      	nop
 80005b0:	4821      	ldr	r0, [pc, #132]	; (8000638 <lcd_send_data+0xd8>)
 80005b2:	f008 fef5 	bl	80093a0 <HAL_I2C_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b20      	cmp	r3, #32
 80005ba:	d1f9      	bne.n	80005b0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <lcd_send_data+0xdc>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d116      	bne.n	80005f2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e00f      	b.n	80005ea <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	3310      	adds	r3, #16
 80005ce:	443b      	add	r3, r7
 80005d0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	f022 0208 	bic.w	r2, r2, #8
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	3310      	adds	r3, #16
 80005de:	443b      	add	r3, r7
 80005e0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	3301      	adds	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d9ec      	bls.n	80005ca <lcd_send_data+0x6a>
 80005f0:	e015      	b.n	800061e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	73bb      	strb	r3, [r7, #14]
 80005f6:	e00f      	b.n	8000618 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	3310      	adds	r3, #16
 80005fc:	443b      	add	r3, r7
 80005fe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f042 0208 	orr.w	r2, r2, #8
 8000608:	b2d2      	uxtb	r2, r2
 800060a:	3310      	adds	r3, #16
 800060c:	443b      	add	r3, r7
 800060e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	3301      	adds	r3, #1
 8000616:	73bb      	strb	r3, [r7, #14]
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d9ec      	bls.n	80005f8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800061e:	f107 0208 	add.w	r2, r7, #8
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2304      	movs	r3, #4
 8000628:	214e      	movs	r1, #78	; 0x4e
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <lcd_send_data+0xd8>)
 800062c:	f008 fa58 	bl	8008ae0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000ce0 	.word	0x20000ce0
 800063c:	20000ab6 	.word	0x20000ab6

08000640 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000648:	e006      	b.n	8000658 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff84 	bl	8000560 <lcd_send_data>
	while (*str) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f4      	bne.n	800064a <lcd_send_string+0xa>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <lcd_init>:

void lcd_init (void) {
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff ff06 	bl	8000480 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f7ff ff03 	bl	8000480 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800067a:	200c      	movs	r0, #12
 800067c:	f7ff ff00 	bl	8000480 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000680:	2080      	movs	r0, #128	; 0x80
 8000682:	f7ff fefd 	bl	8000480 <lcd_send_cmd>
	lcd_backlight(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 f840 	bl	800070c <lcd_backlight>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d106      	bne.n	80006b4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	337f      	adds	r3, #127	; 0x7f
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fee7 	bl	8000480 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80006b2:	e008      	b.n	80006c6 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d105      	bne.n	80006c6 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	3b41      	subs	r3, #65	; 0x41
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fedd 	bl	8000480 <lcd_send_cmd>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	603a      	str	r2, [r7, #0]
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	460b      	mov	r3, r1
 80006dc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80006de:	79ba      	ldrb	r2, [r7, #6]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffd3 	bl	8000690 <lcd_gotoxy>
	lcd_send_string(str);
 80006ea:	6838      	ldr	r0, [r7, #0]
 80006ec:	f7ff ffa8 	bl	8000640 <lcd_send_string>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <lcd_clear>:

void lcd_clear(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff febf 	bl	8000480 <lcd_send_cmd>
    HAL_Delay(2);
 8000702:	2002      	movs	r0, #2
 8000704:	f007 fa60 	bl	8007bc8 <HAL_Delay>

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <lcd_backlight+0x20>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff feaf 	bl	8000480 <lcd_send_cmd>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000ab6 	.word	0x20000ab6

08000730 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000734:	f3bf 8f4f 	dsb	sy
}
 8000738:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <__NVIC_SystemReset+0x24>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <__NVIC_SystemReset+0x24>)
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_SystemReset+0x28>)
 8000746:	4313      	orrs	r3, r2
 8000748:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <__NVIC_SystemReset+0x20>
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	05fa0004 	.word	0x05fa0004

0800075c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd5d 	bl	8000224 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	3301      	adds	r3, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f00b f828 	bl	800b7c4 <malloc>
 8000774:	4603      	mov	r3, r0
 8000776:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <copyText+0x2a>
        strcpy(result, text);
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f00b f979 	bl	800ba78 <strcpy>
    }
    return result;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000794:	2101      	movs	r1, #1
 8000796:	488f      	ldr	r0, [pc, #572]	; (80009d4 <menu+0x244>)
 8000798:	f007 ffe6 	bl	8008768 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	f040 808e 	bne.w	80008c0 <menu+0x130>
 80007a4:	4b8c      	ldr	r3, [pc, #560]	; (80009d8 <menu+0x248>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 8086 	beq.w	80008c0 <menu+0x130>
		menuSayac = menuSayac+1;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <menu+0x24c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b87      	ldr	r3, [pc, #540]	; (80009dc <menu+0x24c>)
 80007be:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <menu+0x24c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b20      	cmp	r3, #32
 80007c6:	d102      	bne.n	80007ce <menu+0x3e>
			menuSayac = 1;
 80007c8:	4b84      	ldr	r3, [pc, #528]	; (80009dc <menu+0x24c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <menu+0x24c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b12      	cmp	r3, #18
 80007d4:	d106      	bne.n	80007e4 <menu+0x54>
 80007d6:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <menu+0x250>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <menu+0x54>
			menuSayac = 21;
 80007de:	4b7f      	ldr	r3, [pc, #508]	; (80009dc <menu+0x24c>)
 80007e0:	2215      	movs	r2, #21
 80007e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <menu+0x24c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d106      	bne.n	80007fa <menu+0x6a>
 80007ec:	4b7d      	ldr	r3, [pc, #500]	; (80009e4 <menu+0x254>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <menu+0x6a>
			menuSayac = 16;
 80007f4:	4b79      	ldr	r3, [pc, #484]	; (80009dc <menu+0x24c>)
 80007f6:	2210      	movs	r2, #16
 80007f8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80007fa:	4b78      	ldr	r3, [pc, #480]	; (80009dc <menu+0x24c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b0d      	cmp	r3, #13
 8000800:	d106      	bne.n	8000810 <menu+0x80>
 8000802:	4b78      	ldr	r3, [pc, #480]	; (80009e4 <menu+0x254>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d102      	bne.n	8000810 <menu+0x80>
			menuSayac = 16;
 800080a:	4b74      	ldr	r3, [pc, #464]	; (80009dc <menu+0x24c>)
 800080c:	2210      	movs	r2, #16
 800080e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000810:	4b72      	ldr	r3, [pc, #456]	; (80009dc <menu+0x24c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b09      	cmp	r3, #9
 8000816:	d106      	bne.n	8000826 <menu+0x96>
 8000818:	4b72      	ldr	r3, [pc, #456]	; (80009e4 <menu+0x254>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d102      	bne.n	8000826 <menu+0x96>
			menuSayac = 13;
 8000820:	4b6e      	ldr	r3, [pc, #440]	; (80009dc <menu+0x24c>)
 8000822:	220d      	movs	r2, #13
 8000824:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000826:	4b6d      	ldr	r3, [pc, #436]	; (80009dc <menu+0x24c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b0a      	cmp	r3, #10
 800082c:	d10a      	bne.n	8000844 <menu+0xb4>
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <menu+0x258>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d003      	beq.n	800083e <menu+0xae>
 8000836:	4b6c      	ldr	r3, [pc, #432]	; (80009e8 <menu+0x258>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d102      	bne.n	8000844 <menu+0xb4>
			menuSayac = 11;
 800083e:	4b67      	ldr	r3, [pc, #412]	; (80009dc <menu+0x24c>)
 8000840:	220b      	movs	r2, #11
 8000842:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000844:	4b65      	ldr	r3, [pc, #404]	; (80009dc <menu+0x24c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b0c      	cmp	r3, #12
 800084a:	d10e      	bne.n	800086a <menu+0xda>
 800084c:	4b67      	ldr	r3, [pc, #412]	; (80009ec <menu+0x25c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d003      	beq.n	800085c <menu+0xcc>
 8000854:	4b65      	ldr	r3, [pc, #404]	; (80009ec <menu+0x25c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d106      	bne.n	800086a <menu+0xda>
 800085c:	4b61      	ldr	r3, [pc, #388]	; (80009e4 <menu+0x254>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d102      	bne.n	800086a <menu+0xda>
			menuSayac = 16;
 8000864:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <menu+0x24c>)
 8000866:	2210      	movs	r2, #16
 8000868:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800086a:	4b5c      	ldr	r3, [pc, #368]	; (80009dc <menu+0x24c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b0c      	cmp	r3, #12
 8000870:	d10e      	bne.n	8000890 <menu+0x100>
 8000872:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <menu+0x25c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d003      	beq.n	8000882 <menu+0xf2>
 800087a:	4b5c      	ldr	r3, [pc, #368]	; (80009ec <menu+0x25c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d106      	bne.n	8000890 <menu+0x100>
 8000882:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <menu+0x254>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d102      	bne.n	8000890 <menu+0x100>
			menuSayac = 13;
 800088a:	4b54      	ldr	r3, [pc, #336]	; (80009dc <menu+0x24c>)
 800088c:	220d      	movs	r2, #13
 800088e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000890:	4b52      	ldr	r3, [pc, #328]	; (80009dc <menu+0x24c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d106      	bne.n	80008a6 <menu+0x116>
 8000898:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <menu+0x260>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d102      	bne.n	80008a6 <menu+0x116>
			menuSayac = 16;
 80008a0:	4b4e      	ldr	r3, [pc, #312]	; (80009dc <menu+0x24c>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80008a6:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <menu+0x24c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b18      	cmp	r3, #24
 80008ac:	d106      	bne.n	80008bc <menu+0x12c>
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <menu+0x250>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <menu+0x12c>
			menuSayac = 26;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <menu+0x24c>)
 80008b8:	221a      	movs	r2, #26
 80008ba:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80008bc:	f004 fadc 	bl	8004e78 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80008c0:	2108      	movs	r1, #8
 80008c2:	484c      	ldr	r0, [pc, #304]	; (80009f4 <menu+0x264>)
 80008c4:	f007 ff50 	bl	8008768 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d175      	bne.n	80009ba <menu+0x22a>
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <menu+0x248>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f083 0301 	eor.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d06e      	beq.n	80009ba <menu+0x22a>
		if (menuSayac <= 1) {
 80008dc:	4b3f      	ldr	r3, [pc, #252]	; (80009dc <menu+0x24c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d802      	bhi.n	80008ea <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80008e4:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <menu+0x24c>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80008ea:	4b3c      	ldr	r3, [pc, #240]	; (80009dc <menu+0x24c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <menu+0x24c>)
 80008f4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <menu+0x24c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b14      	cmp	r3, #20
 80008fc:	d106      	bne.n	800090c <menu+0x17c>
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <menu+0x250>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <menu+0x17c>
			menuSayac = 17;
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <menu+0x24c>)
 8000908:	2211      	movs	r2, #17
 800090a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <menu+0x24c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d106      	bne.n	8000922 <menu+0x192>
 8000914:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <menu+0x254>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <menu+0x192>
			menuSayac = 7;
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <menu+0x24c>)
 800091e:	2207      	movs	r2, #7
 8000920:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <menu+0x24c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d106      	bne.n	8000938 <menu+0x1a8>
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <menu+0x254>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d102      	bne.n	8000938 <menu+0x1a8>
			menuSayac = 12;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <menu+0x24c>)
 8000934:	220c      	movs	r2, #12
 8000936:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <menu+0x24c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b0c      	cmp	r3, #12
 800093e:	d106      	bne.n	800094e <menu+0x1be>
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <menu+0x254>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d102      	bne.n	800094e <menu+0x1be>
			menuSayac = 8;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <menu+0x24c>)
 800094a:	2208      	movs	r2, #8
 800094c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <menu+0x24c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b0a      	cmp	r3, #10
 8000954:	d10a      	bne.n	800096c <menu+0x1dc>
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <menu+0x258>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d003      	beq.n	8000966 <menu+0x1d6>
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <menu+0x258>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d102      	bne.n	800096c <menu+0x1dc>
			menuSayac = 9;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <menu+0x24c>)
 8000968:	2209      	movs	r2, #9
 800096a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <menu+0x24c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b0c      	cmp	r3, #12
 8000972:	d10a      	bne.n	800098a <menu+0x1fa>
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <menu+0x25c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d003      	beq.n	8000984 <menu+0x1f4>
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <menu+0x25c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d102      	bne.n	800098a <menu+0x1fa>
			menuSayac = 11;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <menu+0x24c>)
 8000986:	220b      	movs	r2, #11
 8000988:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <menu+0x24c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d106      	bne.n	80009a0 <menu+0x210>
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <menu+0x260>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d102      	bne.n	80009a0 <menu+0x210>
			menuSayac = 14;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <menu+0x24c>)
 800099c:	220e      	movs	r2, #14
 800099e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <menu+0x24c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b19      	cmp	r3, #25
 80009a6:	d106      	bne.n	80009b6 <menu+0x226>
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <menu+0x250>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <menu+0x226>
			menuSayac = 23;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <menu+0x24c>)
 80009b2:	2217      	movs	r2, #23
 80009b4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80009b6:	f004 fa5f 	bl	8004e78 <bekle>
	}

	if (menuSayac == 0) {
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <menu+0x24c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d134      	bne.n	8000a2c <menu+0x29c>
		if(dilSecim == 0) {
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <menu+0x268>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d122      	bne.n	8000a10 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <menu+0x26c>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	2001      	movs	r0, #1
 80009d0:	e016      	b.n	8000a00 <menu+0x270>
 80009d2:	bf00      	nop
 80009d4:	40010800 	.word	0x40010800
 80009d8:	20000b52 	.word	0x20000b52
 80009dc:	20000b24 	.word	0x20000b24
 80009e0:	20000b33 	.word	0x20000b33
 80009e4:	20000b2c 	.word	0x20000b2c
 80009e8:	20000b2d 	.word	0x20000b2d
 80009ec:	20000b2e 	.word	0x20000b2e
 80009f0:	20000b2f 	.word	0x20000b2f
 80009f4:	40011000 	.word	0x40011000
 80009f8:	20000b44 	.word	0x20000b44
 80009fc:	0800c328 	.word	0x0800c328
 8000a00:	f7ff fe65 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000a04:	4a94      	ldr	r2, [pc, #592]	; (8000c58 <menu+0x4c8>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe60 	bl	80006ce <lcd_print>
 8000a0e:	e00d      	b.n	8000a2c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000a10:	4b92      	ldr	r3, [pc, #584]	; (8000c5c <menu+0x4cc>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d109      	bne.n	8000a2c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000a18:	4a91      	ldr	r2, [pc, #580]	; (8000c60 <menu+0x4d0>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fe56 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000a22:	4a90      	ldr	r2, [pc, #576]	; (8000c64 <menu+0x4d4>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fe51 	bl	80006ce <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000a2c:	4b8e      	ldr	r3, [pc, #568]	; (8000c68 <menu+0x4d8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	f040 82b5 	bne.w	8000fa0 <menu+0x810>
		if(dilSecim == 0) {
 8000a36:	4b89      	ldr	r3, [pc, #548]	; (8000c5c <menu+0x4cc>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d105      	bne.n	8000a4a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000a3e:	4a8b      	ldr	r2, [pc, #556]	; (8000c6c <menu+0x4dc>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe43 	bl	80006ce <lcd_print>
 8000a48:	e008      	b.n	8000a5c <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000a4a:	4b84      	ldr	r3, [pc, #528]	; (8000c5c <menu+0x4cc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d104      	bne.n	8000a5c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000a52:	4a87      	ldr	r2, [pc, #540]	; (8000c70 <menu+0x4e0>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fe39 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000a5c:	4b85      	ldr	r3, [pc, #532]	; (8000c74 <menu+0x4e4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d123      	bne.n	8000aac <menu+0x31c>
			if(dilSecim == 0) {
 8000a64:	4b7d      	ldr	r3, [pc, #500]	; (8000c5c <menu+0x4cc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000a6c:	4a82      	ldr	r2, [pc, #520]	; (8000c78 <menu+0x4e8>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2002      	movs	r0, #2
 8000a72:	f7ff fe2c 	bl	80006ce <lcd_print>
 8000a76:	e008      	b.n	8000a8a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000a78:	4b78      	ldr	r3, [pc, #480]	; (8000c5c <menu+0x4cc>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000a80:	4a7e      	ldr	r2, [pc, #504]	; (8000c7c <menu+0x4ec>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff fe22 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000a8a:	4a7d      	ldr	r2, [pc, #500]	; (8000c80 <menu+0x4f0>)
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff fe1d 	bl	80006ce <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000a94:	4b7b      	ldr	r3, [pc, #492]	; (8000c84 <menu+0x4f4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	220a      	movs	r2, #10
 8000a9a:	497b      	ldr	r1, [pc, #492]	; (8000c88 <menu+0x4f8>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00a fe8f 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000aa2:	4a79      	ldr	r2, [pc, #484]	; (8000c88 <menu+0x4f8>)
 8000aa4:	210e      	movs	r1, #14
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff fe11 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000aac:	4b71      	ldr	r3, [pc, #452]	; (8000c74 <menu+0x4e4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d123      	bne.n	8000afc <menu+0x36c>
			if(dilSecim == 0) {
 8000ab4:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <menu+0x4cc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000abc:	4a73      	ldr	r2, [pc, #460]	; (8000c8c <menu+0x4fc>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff fe04 	bl	80006ce <lcd_print>
 8000ac6:	e008      	b.n	8000ada <menu+0x34a>
			} else if(dilSecim == 1) {
 8000ac8:	4b64      	ldr	r3, [pc, #400]	; (8000c5c <menu+0x4cc>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000ad0:	4a6f      	ldr	r2, [pc, #444]	; (8000c90 <menu+0x500>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff fdfa 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ada:	4a6e      	ldr	r2, [pc, #440]	; (8000c94 <menu+0x504>)
 8000adc:	210f      	movs	r1, #15
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff fdf5 	bl	80006ce <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000ae4:	4b6c      	ldr	r3, [pc, #432]	; (8000c98 <menu+0x508>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	220a      	movs	r2, #10
 8000aea:	4967      	ldr	r1, [pc, #412]	; (8000c88 <menu+0x4f8>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00a fe67 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000af2:	4a65      	ldr	r2, [pc, #404]	; (8000c88 <menu+0x4f8>)
 8000af4:	210e      	movs	r1, #14
 8000af6:	2002      	movs	r0, #2
 8000af8:	f7ff fde9 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000afc:	4b5d      	ldr	r3, [pc, #372]	; (8000c74 <menu+0x4e4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d123      	bne.n	8000b4c <menu+0x3bc>
			if(dilSecim == 0) {
 8000b04:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <menu+0x4cc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d105      	bne.n	8000b18 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8000b0c:	4a63      	ldr	r2, [pc, #396]	; (8000c9c <menu+0x50c>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff fddc 	bl	80006ce <lcd_print>
 8000b16:	e008      	b.n	8000b2a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000b18:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <menu+0x4cc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d104      	bne.n	8000b2a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000b20:	4a5f      	ldr	r2, [pc, #380]	; (8000ca0 <menu+0x510>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fdd2 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b2a:	4a5a      	ldr	r2, [pc, #360]	; (8000c94 <menu+0x504>)
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff fdcd 	bl	80006ce <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <menu+0x514>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	220a      	movs	r2, #10
 8000b3a:	4953      	ldr	r1, [pc, #332]	; (8000c88 <menu+0x4f8>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00a fe3f 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000b42:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <menu+0x4f8>)
 8000b44:	210e      	movs	r1, #14
 8000b46:	2002      	movs	r0, #2
 8000b48:	f7ff fdc1 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <menu+0x4e4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d123      	bne.n	8000b9c <menu+0x40c>
			if(dilSecim == 0) {
 8000b54:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <menu+0x4cc>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000b5c:	4a52      	ldr	r2, [pc, #328]	; (8000ca8 <menu+0x518>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fdb4 	bl	80006ce <lcd_print>
 8000b66:	e008      	b.n	8000b7a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <menu+0x4cc>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d104      	bne.n	8000b7a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000b70:	4a4e      	ldr	r2, [pc, #312]	; (8000cac <menu+0x51c>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	2002      	movs	r0, #2
 8000b76:	f7ff fdaa 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b7a:	4a46      	ldr	r2, [pc, #280]	; (8000c94 <menu+0x504>)
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f7ff fda5 	bl	80006ce <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000b84:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <menu+0x520>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	220a      	movs	r2, #10
 8000b8a:	493f      	ldr	r1, [pc, #252]	; (8000c88 <menu+0x4f8>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00a fe17 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <menu+0x4f8>)
 8000b94:	210e      	movs	r1, #14
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff fd99 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <menu+0x4e4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d123      	bne.n	8000bec <menu+0x45c>
			if(dilSecim == 0) {
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <menu+0x4cc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000bac:	4a41      	ldr	r2, [pc, #260]	; (8000cb4 <menu+0x524>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff fd8c 	bl	80006ce <lcd_print>
 8000bb6:	e008      	b.n	8000bca <menu+0x43a>
			} else if(dilSecim == 1) {
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <menu+0x4cc>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d104      	bne.n	8000bca <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000bc0:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <menu+0x528>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fd82 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000bca:	4a32      	ldr	r2, [pc, #200]	; (8000c94 <menu+0x504>)
 8000bcc:	210f      	movs	r1, #15
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fd7d 	bl	80006ce <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000bd4:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <menu+0x52c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	220a      	movs	r2, #10
 8000bda:	492b      	ldr	r1, [pc, #172]	; (8000c88 <menu+0x4f8>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00a fdef 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <menu+0x4f8>)
 8000be4:	210e      	movs	r1, #14
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fd71 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <menu+0x4e4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	d123      	bne.n	8000c3c <menu+0x4ac>
			if(dilSecim == 0) {
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <menu+0x4cc>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d105      	bne.n	8000c08 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8000bfc:	4a30      	ldr	r2, [pc, #192]	; (8000cc0 <menu+0x530>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff fd64 	bl	80006ce <lcd_print>
 8000c06:	e008      	b.n	8000c1a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <menu+0x4cc>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d104      	bne.n	8000c1a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000c10:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <menu+0x534>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff fd5a 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	; (8000c94 <menu+0x504>)
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fd55 	bl	80006ce <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <menu+0x538>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	220a      	movs	r2, #10
 8000c2a:	4917      	ldr	r1, [pc, #92]	; (8000c88 <menu+0x4f8>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00a fdc7 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <menu+0x4f8>)
 8000c34:	210e      	movs	r1, #14
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fd49 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <menu+0x4e4>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	d15f      	bne.n	8000d04 <menu+0x574>
			if(dilSecim == 0) {
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <menu+0x4cc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d141      	bne.n	8000cd0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <menu+0x53c>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff fd3c 	bl	80006ce <lcd_print>
 8000c56:	e044      	b.n	8000ce2 <menu+0x552>
 8000c58:	0800c33c 	.word	0x0800c33c
 8000c5c:	20000b44 	.word	0x20000b44
 8000c60:	0800c350 	.word	0x0800c350
 8000c64:	0800c364 	.word	0x0800c364
 8000c68:	20000b24 	.word	0x20000b24
 8000c6c:	0800c378 	.word	0x0800c378
 8000c70:	0800c38c 	.word	0x0800c38c
 8000c74:	20000b26 	.word	0x20000b26
 8000c78:	0800c3a0 	.word	0x0800c3a0
 8000c7c:	0800c3b0 	.word	0x0800c3b0
 8000c80:	0800c3c0 	.word	0x0800c3c0
 8000c84:	20000b45 	.word	0x20000b45
 8000c88:	20000af8 	.word	0x20000af8
 8000c8c:	0800c3c4 	.word	0x0800c3c4
 8000c90:	0800c3d4 	.word	0x0800c3d4
 8000c94:	0800c3e4 	.word	0x0800c3e4
 8000c98:	20000b46 	.word	0x20000b46
 8000c9c:	0800c3e8 	.word	0x0800c3e8
 8000ca0:	0800c3f8 	.word	0x0800c3f8
 8000ca4:	20000b47 	.word	0x20000b47
 8000ca8:	0800c408 	.word	0x0800c408
 8000cac:	0800c418 	.word	0x0800c418
 8000cb0:	20000b48 	.word	0x20000b48
 8000cb4:	0800c428 	.word	0x0800c428
 8000cb8:	0800c438 	.word	0x0800c438
 8000cbc:	20000b49 	.word	0x20000b49
 8000cc0:	0800c448 	.word	0x0800c448
 8000cc4:	0800c458 	.word	0x0800c458
 8000cc8:	20000b4a 	.word	0x20000b4a
 8000ccc:	0800c468 	.word	0x0800c468
			} else if(dilSecim == 1) {
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <menu+0x680>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d104      	bne.n	8000ce2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	; (8000e14 <menu+0x684>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff fcf6 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ce2:	4a4d      	ldr	r2, [pc, #308]	; (8000e18 <menu+0x688>)
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f7ff fcf1 	bl	80006ce <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000cec:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <menu+0x68c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	494b      	ldr	r1, [pc, #300]	; (8000e20 <menu+0x690>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00a fd63 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <menu+0x690>)
 8000cfc:	210e      	movs	r1, #14
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff fce5 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000d04:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <menu+0x694>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d123      	bne.n	8000d54 <menu+0x5c4>
			if(dilSecim == 0) {
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <menu+0x680>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000d14:	4a44      	ldr	r2, [pc, #272]	; (8000e28 <menu+0x698>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff fcd8 	bl	80006ce <lcd_print>
 8000d1e:	e008      	b.n	8000d32 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <menu+0x680>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d104      	bne.n	8000d32 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000d28:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <menu+0x69c>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fcce 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d32:	4a39      	ldr	r2, [pc, #228]	; (8000e18 <menu+0x688>)
 8000d34:	210f      	movs	r1, #15
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fcc9 	bl	80006ce <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <menu+0x6a0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	220a      	movs	r2, #10
 8000d42:	4937      	ldr	r1, [pc, #220]	; (8000e20 <menu+0x690>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00a fd3b 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000d4a:	4a35      	ldr	r2, [pc, #212]	; (8000e20 <menu+0x690>)
 8000d4c:	210e      	movs	r1, #14
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff fcbd 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <menu+0x694>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d123      	bne.n	8000da4 <menu+0x614>
			if(dilSecim == 0) {
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <menu+0x680>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000d64:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <menu+0x6a4>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff fcb0 	bl	80006ce <lcd_print>
 8000d6e:	e008      	b.n	8000d82 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <menu+0x680>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d104      	bne.n	8000d82 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <menu+0x6a8>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff fca6 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d82:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <menu+0x688>)
 8000d84:	210f      	movs	r1, #15
 8000d86:	2002      	movs	r0, #2
 8000d88:	f7ff fca1 	bl	80006ce <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <menu+0x6ac>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	220a      	movs	r2, #10
 8000d92:	4923      	ldr	r1, [pc, #140]	; (8000e20 <menu+0x690>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00a fd13 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 8000d9a:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <menu+0x690>)
 8000d9c:	210e      	movs	r1, #14
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff fc95 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <menu+0x694>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d123      	bne.n	8000df4 <menu+0x664>
			if(dilSecim == 0) {
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <menu+0x680>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d105      	bne.n	8000dc0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <menu+0x6b0>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff fc88 	bl	80006ce <lcd_print>
 8000dbe:	e008      	b.n	8000dd2 <menu+0x642>
			} else if(dilSecim == 1) {
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <menu+0x680>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d104      	bne.n	8000dd2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000dc8:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <menu+0x6b4>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff fc7e 	bl	80006ce <lcd_print>
			}
			lcd_print(2, 16, " ");
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <menu+0x6b8>)
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fc79 	bl	80006ce <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <menu+0x6bc>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	220a      	movs	r2, #10
 8000de2:	490f      	ldr	r1, [pc, #60]	; (8000e20 <menu+0x690>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00a fceb 	bl	800b7c0 <itoa>
			lcd_print(2, 15, snum);
 8000dea:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <menu+0x690>)
 8000dec:	210f      	movs	r1, #15
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff fc6d 	bl	80006ce <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <menu+0x694>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b0a      	cmp	r3, #10
 8000dfa:	d134      	bne.n	8000e66 <menu+0x6d6>
			if(dilSecim == 0) {
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <menu+0x680>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d127      	bne.n	8000e54 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <menu+0x6c0>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fc60 	bl	80006ce <lcd_print>
 8000e0e:	e02a      	b.n	8000e66 <menu+0x6d6>
 8000e10:	20000b44 	.word	0x20000b44
 8000e14:	0800c478 	.word	0x0800c478
 8000e18:	0800c3e4 	.word	0x0800c3e4
 8000e1c:	20000b4b 	.word	0x20000b4b
 8000e20:	20000af8 	.word	0x20000af8
 8000e24:	20000b26 	.word	0x20000b26
 8000e28:	0800c488 	.word	0x0800c488
 8000e2c:	0800c498 	.word	0x0800c498
 8000e30:	20000b4c 	.word	0x20000b4c
 8000e34:	0800c4a8 	.word	0x0800c4a8
 8000e38:	0800c4b8 	.word	0x0800c4b8
 8000e3c:	20000b4d 	.word	0x20000b4d
 8000e40:	0800c4c8 	.word	0x0800c4c8
 8000e44:	0800c4d8 	.word	0x0800c4d8
 8000e48:	0800c4e8 	.word	0x0800c4e8
 8000e4c:	20000b4e 	.word	0x20000b4e
 8000e50:	0800c4ec 	.word	0x0800c4ec
			} else if(dilSecim == 1) {
 8000e54:	4b82      	ldr	r3, [pc, #520]	; (8001060 <menu+0x8d0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d104      	bne.n	8000e66 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000e5c:	4a81      	ldr	r2, [pc, #516]	; (8001064 <menu+0x8d4>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fc34 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e66:	2102      	movs	r1, #2
 8000e68:	487f      	ldr	r0, [pc, #508]	; (8001068 <menu+0x8d8>)
 8000e6a:	f007 fc7d 	bl	8008768 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d119      	bne.n	8000ea8 <menu+0x718>
 8000e74:	4b7d      	ldr	r3, [pc, #500]	; (800106c <menu+0x8dc>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d012      	beq.n	8000ea8 <menu+0x718>
 8000e82:	4b7b      	ldr	r3, [pc, #492]	; (8001070 <menu+0x8e0>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10e      	bne.n	8000ea8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000e8a:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <menu+0x8e4>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b78      	ldr	r3, [pc, #480]	; (8001074 <menu+0x8e4>)
 8000e94:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000e96:	4b77      	ldr	r3, [pc, #476]	; (8001074 <menu+0x8e4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b0a      	cmp	r3, #10
 8000e9c:	d902      	bls.n	8000ea4 <menu+0x714>
				hataGostermeSirasi = 0;
 8000e9e:	4b75      	ldr	r3, [pc, #468]	; (8001074 <menu+0x8e4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ea4:	f003 ffe8 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	486f      	ldr	r0, [pc, #444]	; (8001068 <menu+0x8d8>)
 8000eac:	f007 fc5c 	bl	8008768 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d119      	bne.n	8000eea <menu+0x75a>
 8000eb6:	4b6d      	ldr	r3, [pc, #436]	; (800106c <menu+0x8dc>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	f083 0301 	eor.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d012      	beq.n	8000eea <menu+0x75a>
 8000ec4:	4b6a      	ldr	r3, [pc, #424]	; (8001070 <menu+0x8e0>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10e      	bne.n	8000eea <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000ecc:	4b69      	ldr	r3, [pc, #420]	; (8001074 <menu+0x8e4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b67      	ldr	r3, [pc, #412]	; (8001074 <menu+0x8e4>)
 8000ed6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000ed8:	4b66      	ldr	r3, [pc, #408]	; (8001074 <menu+0x8e4>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b0b      	cmp	r3, #11
 8000ede:	d902      	bls.n	8000ee6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000ee0:	4b64      	ldr	r3, [pc, #400]	; (8001074 <menu+0x8e4>)
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000ee6:	f003 ffc7 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000eea:	2108      	movs	r1, #8
 8000eec:	485e      	ldr	r0, [pc, #376]	; (8001068 <menu+0x8d8>)
 8000eee:	f007 fc3b 	bl	8008768 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d153      	bne.n	8000fa0 <menu+0x810>
 8000ef8:	4b5c      	ldr	r3, [pc, #368]	; (800106c <menu+0x8dc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	f083 0301 	eor.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d04c      	beq.n	8000fa0 <menu+0x810>
 8000f06:	4b5b      	ldr	r3, [pc, #364]	; (8001074 <menu+0x8e4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d148      	bne.n	8000fa0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000f0e:	4b5a      	ldr	r3, [pc, #360]	; (8001078 <menu+0x8e8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	4b59      	ldr	r3, [pc, #356]	; (800107c <menu+0x8ec>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000f1c:	4b58      	ldr	r3, [pc, #352]	; (8001080 <menu+0x8f0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	4b56      	ldr	r3, [pc, #344]	; (800107c <menu+0x8ec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000f2a:	4b56      	ldr	r3, [pc, #344]	; (8001084 <menu+0x8f4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	4b52      	ldr	r3, [pc, #328]	; (800107c <menu+0x8ec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000f38:	4b53      	ldr	r3, [pc, #332]	; (8001088 <menu+0x8f8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	; (800107c <menu+0x8ec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <menu+0x8fc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	4b4b      	ldr	r3, [pc, #300]	; (800107c <menu+0x8ec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000f54:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <menu+0x900>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <menu+0x8ec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000f62:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <menu+0x904>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	4b44      	ldr	r3, [pc, #272]	; (800107c <menu+0x8ec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000f70:	4b49      	ldr	r3, [pc, #292]	; (8001098 <menu+0x908>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <menu+0x8ec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <menu+0x90c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	4b3d      	ldr	r3, [pc, #244]	; (800107c <menu+0x8ec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000f8c:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <menu+0x910>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <menu+0x8ec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000f9a:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <menu+0x914>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <menu+0x918>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	f040 80fc 	bne.w	80011a2 <menu+0xa12>
		if(dilSecim == 0) {
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <menu+0x8d0>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <menu+0x91c>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff fb89 	bl	80006ce <lcd_print>
 8000fbc:	e008      	b.n	8000fd0 <menu+0x840>
		} else if(dilSecim == 1) {
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <menu+0x8d0>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d104      	bne.n	8000fd0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000fc6:	4a3a      	ldr	r2, [pc, #232]	; (80010b0 <menu+0x920>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff fb7f 	bl	80006ce <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <menu+0x8e0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d003      	beq.n	8000fe0 <menu+0x850>
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <menu+0x8e0>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d112      	bne.n	8001006 <menu+0x876>
			if(dilSecim == 0) {
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <menu+0x8d0>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000fe8:	4a32      	ldr	r2, [pc, #200]	; (80010b4 <menu+0x924>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff fb6e 	bl	80006ce <lcd_print>
 8000ff2:	e008      	b.n	8001006 <menu+0x876>
			} else if(dilSecim == 1) {
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <menu+0x8d0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d104      	bne.n	8001006 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <menu+0x928>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fb64 	bl	80006ce <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <menu+0x92c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d116      	bne.n	800103c <menu+0x8ac>
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <menu+0x8e0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d112      	bne.n	800103c <menu+0x8ac>
			if(dilSecim == 0) {
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <menu+0x8d0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <menu+0x930>)
 8001020:	2101      	movs	r1, #1
 8001022:	2002      	movs	r0, #2
 8001024:	f7ff fb53 	bl	80006ce <lcd_print>
 8001028:	e008      	b.n	800103c <menu+0x8ac>
			} else if(dilSecim == 1) {
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <menu+0x8d0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d104      	bne.n	800103c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001032:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <menu+0x934>)
 8001034:	2101      	movs	r1, #1
 8001036:	2002      	movs	r0, #2
 8001038:	f7ff fb49 	bl	80006ce <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <menu+0x92c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d14c      	bne.n	80010de <menu+0x94e>
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <menu+0x8e0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d148      	bne.n	80010de <menu+0x94e>
			if(dilSecim == 0) {
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <menu+0x8d0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d13b      	bne.n	80010cc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <menu+0x938>)
 8001056:	2101      	movs	r1, #1
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff fb38 	bl	80006ce <lcd_print>
 800105e:	e03e      	b.n	80010de <menu+0x94e>
 8001060:	20000b44 	.word	0x20000b44
 8001064:	0800c500 	.word	0x0800c500
 8001068:	40010800 	.word	0x40010800
 800106c:	20000b52 	.word	0x20000b52
 8001070:	20000b33 	.word	0x20000b33
 8001074:	20000b26 	.word	0x20000b26
 8001078:	20000b45 	.word	0x20000b45
 800107c:	20000ab8 	.word	0x20000ab8
 8001080:	20000b46 	.word	0x20000b46
 8001084:	20000b47 	.word	0x20000b47
 8001088:	20000b48 	.word	0x20000b48
 800108c:	20000b49 	.word	0x20000b49
 8001090:	20000b4a 	.word	0x20000b4a
 8001094:	20000b4b 	.word	0x20000b4b
 8001098:	20000b4c 	.word	0x20000b4c
 800109c:	20000b4d 	.word	0x20000b4d
 80010a0:	20000b4e 	.word	0x20000b4e
 80010a4:	20000b4f 	.word	0x20000b4f
 80010a8:	20000b24 	.word	0x20000b24
 80010ac:	0800c514 	.word	0x0800c514
 80010b0:	0800c528 	.word	0x0800c528
 80010b4:	0800c53c 	.word	0x0800c53c
 80010b8:	0800c550 	.word	0x0800c550
 80010bc:	20000b25 	.word	0x20000b25
 80010c0:	0800c564 	.word	0x0800c564
 80010c4:	0800c574 	.word	0x0800c574
 80010c8:	0800c584 	.word	0x0800c584
			} else if(dilSecim == 1) {
 80010cc:	4b98      	ldr	r3, [pc, #608]	; (8001330 <menu+0xba0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d104      	bne.n	80010de <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 80010d4:	4a97      	ldr	r2, [pc, #604]	; (8001334 <menu+0xba4>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff faf8 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80010de:	2102      	movs	r1, #2
 80010e0:	4895      	ldr	r0, [pc, #596]	; (8001338 <menu+0xba8>)
 80010e2:	f007 fb41 	bl	8008768 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d119      	bne.n	8001120 <menu+0x990>
 80010ec:	4b93      	ldr	r3, [pc, #588]	; (800133c <menu+0xbac>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d012      	beq.n	8001120 <menu+0x990>
 80010fa:	4b91      	ldr	r3, [pc, #580]	; (8001340 <menu+0xbb0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10e      	bne.n	8001120 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001102:	4b90      	ldr	r3, [pc, #576]	; (8001344 <menu+0xbb4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b8e      	ldr	r3, [pc, #568]	; (8001344 <menu+0xbb4>)
 800110c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800110e:	4b8d      	ldr	r3, [pc, #564]	; (8001344 <menu+0xbb4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d902      	bls.n	800111c <menu+0x98c>
				calismaSekli = 0;
 8001116:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <menu+0xbb4>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800111c:	f003 feac 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001120:	2104      	movs	r1, #4
 8001122:	4885      	ldr	r0, [pc, #532]	; (8001338 <menu+0xba8>)
 8001124:	f007 fb20 	bl	8008768 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d119      	bne.n	8001162 <menu+0x9d2>
 800112e:	4b83      	ldr	r3, [pc, #524]	; (800133c <menu+0xbac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d012      	beq.n	8001162 <menu+0x9d2>
 800113c:	4b80      	ldr	r3, [pc, #512]	; (8001340 <menu+0xbb0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10e      	bne.n	8001162 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001144:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <menu+0xbb4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b7d      	ldr	r3, [pc, #500]	; (8001344 <menu+0xbb4>)
 800114e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001150:	4b7c      	ldr	r3, [pc, #496]	; (8001344 <menu+0xbb4>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <menu+0x9ce>
	    		calismaSekli = 1;
 8001158:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <menu+0xbb4>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800115e:	f003 fe8b 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001162:	2108      	movs	r1, #8
 8001164:	4874      	ldr	r0, [pc, #464]	; (8001338 <menu+0xba8>)
 8001166:	f007 faff 	bl	8008768 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d118      	bne.n	80011a2 <menu+0xa12>
 8001170:	4b72      	ldr	r3, [pc, #456]	; (800133c <menu+0xbac>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d011      	beq.n	80011a2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 800117e:	4b71      	ldr	r3, [pc, #452]	; (8001344 <menu+0xbb4>)
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	4b71      	ldr	r3, [pc, #452]	; (8001348 <menu+0xbb8>)
 8001184:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001186:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <menu+0xbb4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d106      	bne.n	800119c <menu+0xa0c>
				altLimit = 1;
 800118e:	4b6f      	ldr	r3, [pc, #444]	; (800134c <menu+0xbbc>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001194:	4b6d      	ldr	r3, [pc, #436]	; (800134c <menu+0xbbc>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <menu+0xbb8>)
 800119a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800119c:	4b6c      	ldr	r3, [pc, #432]	; (8001350 <menu+0xbc0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80011a2:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <menu+0xbc4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	f040 8083 	bne.w	80012b2 <menu+0xb22>
		if(dilSecim == 0) {
 80011ac:	4b60      	ldr	r3, [pc, #384]	; (8001330 <menu+0xba0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80011b4:	4a68      	ldr	r2, [pc, #416]	; (8001358 <menu+0xbc8>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fa88 	bl	80006ce <lcd_print>
 80011be:	e008      	b.n	80011d2 <menu+0xa42>
		} else if(dilSecim == 1) {
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <menu+0xba0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d104      	bne.n	80011d2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 80011c8:	4a64      	ldr	r2, [pc, #400]	; (800135c <menu+0xbcc>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff fa7e 	bl	80006ce <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <menu+0xbd0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d113      	bne.n	8001202 <menu+0xa72>
			if(dilSecim == 0) {
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <menu+0xba0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 80011e2:	4a60      	ldr	r2, [pc, #384]	; (8001364 <menu+0xbd4>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	2002      	movs	r0, #2
 80011e8:	f7ff fa71 	bl	80006ce <lcd_print>
 80011ec:	e012      	b.n	8001214 <menu+0xa84>
			} else if(dilSecim == 1) {
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <menu+0xba0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10e      	bne.n	8001214 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 80011f6:	4a5c      	ldr	r2, [pc, #368]	; (8001368 <menu+0xbd8>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff fa67 	bl	80006ce <lcd_print>
 8001200:	e008      	b.n	8001214 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001202:	4b57      	ldr	r3, [pc, #348]	; (8001360 <menu+0xbd0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d104      	bne.n	8001214 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800120a:	4a58      	ldr	r2, [pc, #352]	; (800136c <menu+0xbdc>)
 800120c:	2101      	movs	r1, #1
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff fa5d 	bl	80006ce <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001214:	2102      	movs	r1, #2
 8001216:	4848      	ldr	r0, [pc, #288]	; (8001338 <menu+0xba8>)
 8001218:	f007 faa6 	bl	8008768 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d115      	bne.n	800124e <menu+0xabe>
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <menu+0xbac>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f083 0301 	eor.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00e      	beq.n	800124e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <menu+0xbd0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <menu+0xbd0>)
 800123a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <menu+0xbd0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d902      	bls.n	800124a <menu+0xaba>
				emniyetCercevesi = 0;
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <menu+0xbd0>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800124a:	f003 fe15 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800124e:	2104      	movs	r1, #4
 8001250:	4839      	ldr	r0, [pc, #228]	; (8001338 <menu+0xba8>)
 8001252:	f007 fa89 	bl	8008768 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d115      	bne.n	8001288 <menu+0xaf8>
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <menu+0xbac>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00e      	beq.n	8001288 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <menu+0xbd0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <menu+0xbd0>)
 8001274:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <menu+0xbd0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <menu+0xbd0>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001284:	f003 fdf8 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001288:	2108      	movs	r1, #8
 800128a:	482b      	ldr	r0, [pc, #172]	; (8001338 <menu+0xba8>)
 800128c:	f007 fa6c 	bl	8008768 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10d      	bne.n	80012b2 <menu+0xb22>
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <menu+0xbac>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <menu+0xbd0>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <menu+0xbb8>)
 80012aa:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <menu+0xbc0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <menu+0xbc4>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	f040 80ba 	bne.w	8001430 <menu+0xca0>
		if(dilSecim == 0) {
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <menu+0xba0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80012c4:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <menu+0xbe0>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff fa00 	bl	80006ce <lcd_print>
 80012ce:	e008      	b.n	80012e2 <menu+0xb52>
		} else if(dilSecim == 1) {
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <menu+0xba0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d104      	bne.n	80012e2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <menu+0xbe4>)
 80012da:	2101      	movs	r1, #1
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff f9f6 	bl	80006ce <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <menu+0xbe8>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d113      	bne.n	8001312 <menu+0xb82>
			if(dilSecim == 0) {
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <menu+0xba0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <menu+0xbd4>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	2002      	movs	r0, #2
 80012f8:	f7ff f9e9 	bl	80006ce <lcd_print>
 80012fc:	e049      	b.n	8001392 <menu+0xc02>
			} else if(dilSecim == 1) {
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <menu+0xba0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d145      	bne.n	8001392 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <menu+0xbd8>)
 8001308:	2101      	movs	r1, #1
 800130a:	2002      	movs	r0, #2
 800130c:	f7ff f9df 	bl	80006ce <lcd_print>
 8001310:	e03f      	b.n	8001392 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <menu+0xbe8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d13b      	bne.n	8001392 <menu+0xc02>
			if(dilSecim == 0) {
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <menu+0xba0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d12e      	bne.n	8001380 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <menu+0xbec>)
 8001324:	2101      	movs	r1, #1
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff f9d1 	bl	80006ce <lcd_print>
 800132c:	e031      	b.n	8001392 <menu+0xc02>
 800132e:	bf00      	nop
 8001330:	20000b44 	.word	0x20000b44
 8001334:	0800c594 	.word	0x0800c594
 8001338:	40010800 	.word	0x40010800
 800133c:	20000b52 	.word	0x20000b52
 8001340:	20000b33 	.word	0x20000b33
 8001344:	20000b25 	.word	0x20000b25
 8001348:	20000ab8 	.word	0x20000ab8
 800134c:	20000b2a 	.word	0x20000b2a
 8001350:	20000b4f 	.word	0x20000b4f
 8001354:	20000b24 	.word	0x20000b24
 8001358:	0800c5a4 	.word	0x0800c5a4
 800135c:	0800c5b8 	.word	0x0800c5b8
 8001360:	20000b28 	.word	0x20000b28
 8001364:	0800c5cc 	.word	0x0800c5cc
 8001368:	0800c5e0 	.word	0x0800c5e0
 800136c:	0800c5f4 	.word	0x0800c5f4
 8001370:	0800c604 	.word	0x0800c604
 8001374:	0800c618 	.word	0x0800c618
 8001378:	20000b29 	.word	0x20000b29
 800137c:	0800c62c 	.word	0x0800c62c
			} else if(dilSecim == 1) {
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <menu+0xe3c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d104      	bne.n	8001392 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001388:	4a91      	ldr	r2, [pc, #580]	; (80015d0 <menu+0xe40>)
 800138a:	2101      	movs	r1, #1
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff f99e 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001392:	2102      	movs	r1, #2
 8001394:	488f      	ldr	r0, [pc, #572]	; (80015d4 <menu+0xe44>)
 8001396:	f007 f9e7 	bl	8008768 <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d115      	bne.n	80013cc <menu+0xc3c>
 80013a0:	4b8d      	ldr	r3, [pc, #564]	; (80015d8 <menu+0xe48>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f083 0301 	eor.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00e      	beq.n	80013cc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80013ae:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <menu+0xe4c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <menu+0xe4c>)
 80013b8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <menu+0xe4c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d902      	bls.n	80013c8 <menu+0xc38>
				yavaslamaLimit = 0;
 80013c2:	4b86      	ldr	r3, [pc, #536]	; (80015dc <menu+0xe4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013c8:	f003 fd56 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013cc:	2104      	movs	r1, #4
 80013ce:	4881      	ldr	r0, [pc, #516]	; (80015d4 <menu+0xe44>)
 80013d0:	f007 f9ca 	bl	8008768 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d115      	bne.n	8001406 <menu+0xc76>
 80013da:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <menu+0xe48>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00e      	beq.n	8001406 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80013e8:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <menu+0xe4c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <menu+0xe4c>)
 80013f2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80013f4:	4b79      	ldr	r3, [pc, #484]	; (80015dc <menu+0xe4c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80013fc:	4b77      	ldr	r3, [pc, #476]	; (80015dc <menu+0xe4c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001402:	f003 fd39 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001406:	2108      	movs	r1, #8
 8001408:	4872      	ldr	r0, [pc, #456]	; (80015d4 <menu+0xe44>)
 800140a:	f007 f9ad 	bl	8008768 <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10d      	bne.n	8001430 <menu+0xca0>
 8001414:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <menu+0xe48>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001422:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <menu+0xe4c>)
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b6e      	ldr	r3, [pc, #440]	; (80015e0 <menu+0xe50>)
 8001428:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800142a:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <menu+0xe54>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001430:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <menu+0xe58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b05      	cmp	r3, #5
 8001436:	f040 80b9 	bne.w	80015ac <menu+0xe1c>
		if(dilSecim == 0) {
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <menu+0xe3c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001442:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <menu+0xe5c>)
 8001444:	2101      	movs	r1, #1
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff f941 	bl	80006ce <lcd_print>
 800144c:	e008      	b.n	8001460 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800144e:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <menu+0xe3c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d104      	bne.n	8001460 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001456:	4a66      	ldr	r2, [pc, #408]	; (80015f0 <menu+0xe60>)
 8001458:	2101      	movs	r1, #1
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff f937 	bl	80006ce <lcd_print>
		}

		if(altLimit == 0) {
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <menu+0xe64>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d113      	bne.n	8001490 <menu+0xd00>
			if(dilSecim == 0) {
 8001468:	4b58      	ldr	r3, [pc, #352]	; (80015cc <menu+0xe3c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001470:	4a61      	ldr	r2, [pc, #388]	; (80015f8 <menu+0xe68>)
 8001472:	2101      	movs	r1, #1
 8001474:	2002      	movs	r0, #2
 8001476:	f7ff f92a 	bl	80006ce <lcd_print>
 800147a:	e020      	b.n	80014be <menu+0xd2e>
			} else if(dilSecim == 1) {
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <menu+0xe3c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11c      	bne.n	80014be <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001484:	4a5d      	ldr	r2, [pc, #372]	; (80015fc <menu+0xe6c>)
 8001486:	2101      	movs	r1, #1
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff f920 	bl	80006ce <lcd_print>
 800148e:	e016      	b.n	80014be <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <menu+0xe64>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d112      	bne.n	80014be <menu+0xd2e>
			if(dilSecim == 0){
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <menu+0xe3c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80014a0:	4a57      	ldr	r2, [pc, #348]	; (8001600 <menu+0xe70>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff f912 	bl	80006ce <lcd_print>
 80014aa:	e008      	b.n	80014be <menu+0xd2e>
			} else if(dilSecim == 1){
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <menu+0xe3c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d104      	bne.n	80014be <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80014b4:	4a46      	ldr	r2, [pc, #280]	; (80015d0 <menu+0xe40>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2002      	movs	r0, #2
 80014ba:	f7ff f908 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80014be:	2102      	movs	r1, #2
 80014c0:	4844      	ldr	r0, [pc, #272]	; (80015d4 <menu+0xe44>)
 80014c2:	f007 f951 	bl	8008768 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d119      	bne.n	8001500 <menu+0xd70>
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <menu+0xe48>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d012      	beq.n	8001500 <menu+0xd70>
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <menu+0xe74>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <menu+0xd70>
			altLimit = altLimit + 1;
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <menu+0xe64>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <menu+0xe64>)
 80014ec:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <menu+0xe64>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d902      	bls.n	80014fc <menu+0xd6c>
				altLimit = 0;
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <menu+0xe64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80014fc:	f003 fcbc 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001500:	2104      	movs	r1, #4
 8001502:	4834      	ldr	r0, [pc, #208]	; (80015d4 <menu+0xe44>)
 8001504:	f007 f930 	bl	8008768 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d119      	bne.n	8001542 <menu+0xdb2>
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <menu+0xe48>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d012      	beq.n	8001542 <menu+0xdb2>
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <menu+0xe74>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10e      	bne.n	8001542 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <menu+0xe64>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <menu+0xe64>)
 800152e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <menu+0xe64>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <menu+0xdae>
		   		altLimit = 1;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <menu+0xe64>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800153e:	f003 fc9b 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001542:	2108      	movs	r1, #8
 8001544:	4823      	ldr	r0, [pc, #140]	; (80015d4 <menu+0xe44>)
 8001546:	f007 f90f 	bl	8008768 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d12d      	bne.n	80015ac <menu+0xe1c>
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <menu+0xe48>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d026      	beq.n	80015ac <menu+0xe1c>
			eepromData[5] = altLimit;
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <menu+0xe64>)
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <menu+0xe50>)
 8001564:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <menu+0xe64>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d110      	bne.n	8001590 <menu+0xe00>
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <menu+0xe78>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <menu+0xdee>
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <menu+0xe78>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d108      	bne.n	8001590 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <menu+0xe78>)
 8001580:	2203      	movs	r2, #3
 8001582:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <menu+0xe78>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <menu+0xe50>)
 800158a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800158e:	e00a      	b.n	80015a6 <menu+0xe16>
			} else if(altLimit == 0) {
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <menu+0xe64>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d106      	bne.n	80015a6 <menu+0xe16>
				platformSilindirTipi = 0;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <menu+0xe7c>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <menu+0xe7c>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <menu+0xe50>)
 80015a4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <menu+0xe54>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <menu+0xe58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	f040 80b6 	bne.w	8001722 <menu+0xf92>
		if(dilSecim == 0) {
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <menu+0xe3c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d12a      	bne.n	8001614 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <menu+0xe80>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff f883 	bl	80006ce <lcd_print>
 80015c8:	e02d      	b.n	8001626 <menu+0xe96>
 80015ca:	bf00      	nop
 80015cc:	20000b44 	.word	0x20000b44
 80015d0:	0800c640 	.word	0x0800c640
 80015d4:	40010800 	.word	0x40010800
 80015d8:	20000b52 	.word	0x20000b52
 80015dc:	20000b29 	.word	0x20000b29
 80015e0:	20000ab8 	.word	0x20000ab8
 80015e4:	20000b4f 	.word	0x20000b4f
 80015e8:	20000b24 	.word	0x20000b24
 80015ec:	0800c654 	.word	0x0800c654
 80015f0:	0800c668 	.word	0x0800c668
 80015f4:	20000b2a 	.word	0x20000b2a
 80015f8:	0800c5cc 	.word	0x0800c5cc
 80015fc:	0800c5e0 	.word	0x0800c5e0
 8001600:	0800c62c 	.word	0x0800c62c
 8001604:	20000b25 	.word	0x20000b25
 8001608:	20000b31 	.word	0x20000b31
 800160c:	20000b37 	.word	0x20000b37
 8001610:	0800c67c 	.word	0x0800c67c
		} else if(dilSecim == 1){
 8001614:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <menu+0x1070>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d104      	bne.n	8001626 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800161c:	4a79      	ldr	r2, [pc, #484]	; (8001804 <menu+0x1074>)
 800161e:	2101      	movs	r1, #1
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff f854 	bl	80006ce <lcd_print>
		}
		if(basincSalteri == 0){
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <menu+0x1078>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d113      	bne.n	8001656 <menu+0xec6>
			if(dilSecim == 0) {
 800162e:	4b74      	ldr	r3, [pc, #464]	; (8001800 <menu+0x1070>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <menu+0x107c>)
 8001638:	2101      	movs	r1, #1
 800163a:	2002      	movs	r0, #2
 800163c:	f7ff f847 	bl	80006ce <lcd_print>
 8001640:	e020      	b.n	8001684 <menu+0xef4>
			} else if(dilSecim == 1){
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <menu+0x1070>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d11c      	bne.n	8001684 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <menu+0x1080>)
 800164c:	2101      	movs	r1, #1
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff f83d 	bl	80006ce <lcd_print>
 8001654:	e016      	b.n	8001684 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <menu+0x1078>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d112      	bne.n	8001684 <menu+0xef4>
			if(dilSecim == 0) {
 800165e:	4b68      	ldr	r3, [pc, #416]	; (8001800 <menu+0x1070>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001666:	4a6b      	ldr	r2, [pc, #428]	; (8001814 <menu+0x1084>)
 8001668:	2101      	movs	r1, #1
 800166a:	2002      	movs	r0, #2
 800166c:	f7ff f82f 	bl	80006ce <lcd_print>
 8001670:	e008      	b.n	8001684 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <menu+0x1070>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d104      	bne.n	8001684 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800167a:	4a67      	ldr	r2, [pc, #412]	; (8001818 <menu+0x1088>)
 800167c:	2101      	movs	r1, #1
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff f825 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001684:	2102      	movs	r1, #2
 8001686:	4865      	ldr	r0, [pc, #404]	; (800181c <menu+0x108c>)
 8001688:	f007 f86e 	bl	8008768 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d115      	bne.n	80016be <menu+0xf2e>
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <menu+0x1090>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	f083 0301 	eor.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00e      	beq.n	80016be <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <menu+0x1078>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <menu+0x1078>)
 80016aa:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80016ac:	4b56      	ldr	r3, [pc, #344]	; (8001808 <menu+0x1078>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d902      	bls.n	80016ba <menu+0xf2a>
				basincSalteri = 0;
 80016b4:	4b54      	ldr	r3, [pc, #336]	; (8001808 <menu+0x1078>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016ba:	f003 fbdd 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016be:	2104      	movs	r1, #4
 80016c0:	4856      	ldr	r0, [pc, #344]	; (800181c <menu+0x108c>)
 80016c2:	f007 f851 	bl	8008768 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d115      	bne.n	80016f8 <menu+0xf68>
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <menu+0x1090>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f083 0301 	eor.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00e      	beq.n	80016f8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <menu+0x1078>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <menu+0x1078>)
 80016e4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <menu+0x1078>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <menu+0xf64>
		   		basincSalteri = 1;
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <menu+0x1078>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80016f4:	f003 fbc0 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80016f8:	2108      	movs	r1, #8
 80016fa:	4848      	ldr	r0, [pc, #288]	; (800181c <menu+0x108c>)
 80016fc:	f007 f834 	bl	8008768 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10d      	bne.n	8001722 <menu+0xf92>
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <menu+0x1090>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <menu+0x1078>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <menu+0x1094>)
 800171a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <menu+0x1098>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <menu+0x109c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b07      	cmp	r3, #7
 8001728:	f040 80f5 	bne.w	8001916 <menu+0x1186>
		if(dilSecim == 0) {
 800172c:	4b34      	ldr	r3, [pc, #208]	; (8001800 <menu+0x1070>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001734:	4a3e      	ldr	r2, [pc, #248]	; (8001830 <menu+0x10a0>)
 8001736:	2101      	movs	r1, #1
 8001738:	2001      	movs	r0, #1
 800173a:	f7fe ffc8 	bl	80006ce <lcd_print>
 800173e:	e008      	b.n	8001752 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <menu+0x1070>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d104      	bne.n	8001752 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001748:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <menu+0x10a4>)
 800174a:	2101      	movs	r1, #1
 800174c:	2001      	movs	r0, #1
 800174e:	f7fe ffbe 	bl	80006ce <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <menu+0x10a8>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d113      	bne.n	8001782 <menu+0xff2>
			if(dilSecim == 0) {
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <menu+0x1070>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8001762:	4a2a      	ldr	r2, [pc, #168]	; (800180c <menu+0x107c>)
 8001764:	2101      	movs	r1, #1
 8001766:	2002      	movs	r0, #2
 8001768:	f7fe ffb1 	bl	80006ce <lcd_print>
 800176c:	e079      	b.n	8001862 <menu+0x10d2>
			} else if(dilSecim == 1){
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <menu+0x1070>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d175      	bne.n	8001862 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <menu+0x1080>)
 8001778:	2101      	movs	r1, #1
 800177a:	2002      	movs	r0, #2
 800177c:	f7fe ffa7 	bl	80006ce <lcd_print>
 8001780:	e06f      	b.n	8001862 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <menu+0x10a8>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d113      	bne.n	80017b2 <menu+0x1022>
			if(dilSecim == 0) {
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <menu+0x1070>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <menu+0x10ac>)
 8001794:	2101      	movs	r1, #1
 8001796:	2002      	movs	r0, #2
 8001798:	f7fe ff99 	bl	80006ce <lcd_print>
 800179c:	e061      	b.n	8001862 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <menu+0x1070>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d15d      	bne.n	8001862 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <menu+0x10b0>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7fe ff8f 	bl	80006ce <lcd_print>
 80017b0:	e057      	b.n	8001862 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <menu+0x10a8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d113      	bne.n	80017e2 <menu+0x1052>
			if(dilSecim == 0) {
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <menu+0x1070>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80017c2:	4a20      	ldr	r2, [pc, #128]	; (8001844 <menu+0x10b4>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	2002      	movs	r0, #2
 80017c8:	f7fe ff81 	bl	80006ce <lcd_print>
 80017cc:	e049      	b.n	8001862 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <menu+0x1070>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d145      	bne.n	8001862 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <menu+0x10b8>)
 80017d8:	2101      	movs	r1, #1
 80017da:	2002      	movs	r0, #2
 80017dc:	f7fe ff77 	bl	80006ce <lcd_print>
 80017e0:	e03f      	b.n	8001862 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <menu+0x10a8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d13b      	bne.n	8001862 <menu+0x10d2>
			if(dilSecim == 0) {
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <menu+0x1070>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d12e      	bne.n	8001850 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80017f2:	4a16      	ldr	r2, [pc, #88]	; (800184c <menu+0x10bc>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	2002      	movs	r0, #2
 80017f8:	f7fe ff69 	bl	80006ce <lcd_print>
 80017fc:	e031      	b.n	8001862 <menu+0x10d2>
 80017fe:	bf00      	nop
 8001800:	20000b44 	.word	0x20000b44
 8001804:	0800c68c 	.word	0x0800c68c
 8001808:	20000b2b 	.word	0x20000b2b
 800180c:	0800c5cc 	.word	0x0800c5cc
 8001810:	0800c5e0 	.word	0x0800c5e0
 8001814:	0800c62c 	.word	0x0800c62c
 8001818:	0800c640 	.word	0x0800c640
 800181c:	40010800 	.word	0x40010800
 8001820:	20000b52 	.word	0x20000b52
 8001824:	20000ab8 	.word	0x20000ab8
 8001828:	20000b4f 	.word	0x20000b4f
 800182c:	20000b24 	.word	0x20000b24
 8001830:	0800c69c 	.word	0x0800c69c
 8001834:	0800c6b0 	.word	0x0800c6b0
 8001838:	20000b2c 	.word	0x20000b2c
 800183c:	0800c6c4 	.word	0x0800c6c4
 8001840:	0800c6d8 	.word	0x0800c6d8
 8001844:	0800c6ec 	.word	0x0800c6ec
 8001848:	0800c700 	.word	0x0800c700
 800184c:	0800c714 	.word	0x0800c714
			} else if(dilSecim == 1){
 8001850:	4b99      	ldr	r3, [pc, #612]	; (8001ab8 <menu+0x1328>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d104      	bne.n	8001862 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001858:	4a98      	ldr	r2, [pc, #608]	; (8001abc <menu+0x132c>)
 800185a:	2101      	movs	r1, #1
 800185c:	2002      	movs	r0, #2
 800185e:	f7fe ff36 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001862:	2102      	movs	r1, #2
 8001864:	4896      	ldr	r0, [pc, #600]	; (8001ac0 <menu+0x1330>)
 8001866:	f006 ff7f 	bl	8008768 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d115      	bne.n	800189c <menu+0x110c>
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <menu+0x1334>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00e      	beq.n	800189c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800187e:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <menu+0x1338>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b90      	ldr	r3, [pc, #576]	; (8001ac8 <menu+0x1338>)
 8001888:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800188a:	4b8f      	ldr	r3, [pc, #572]	; (8001ac8 <menu+0x1338>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d902      	bls.n	8001898 <menu+0x1108>
				kapiSecimleri = 0;
 8001892:	4b8d      	ldr	r3, [pc, #564]	; (8001ac8 <menu+0x1338>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001898:	f003 faee 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800189c:	2104      	movs	r1, #4
 800189e:	4888      	ldr	r0, [pc, #544]	; (8001ac0 <menu+0x1330>)
 80018a0:	f006 ff62 	bl	8008768 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d115      	bne.n	80018d6 <menu+0x1146>
 80018aa:	4b86      	ldr	r3, [pc, #536]	; (8001ac4 <menu+0x1334>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	f083 0301 	eor.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80018b8:	4b83      	ldr	r3, [pc, #524]	; (8001ac8 <menu+0x1338>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b81      	ldr	r3, [pc, #516]	; (8001ac8 <menu+0x1338>)
 80018c2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80018c4:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <menu+0x1338>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d902      	bls.n	80018d2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80018cc:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <menu+0x1338>)
 80018ce:	2203      	movs	r2, #3
 80018d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018d2:	f003 fad1 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018d6:	2108      	movs	r1, #8
 80018d8:	4879      	ldr	r0, [pc, #484]	; (8001ac0 <menu+0x1330>)
 80018da:	f006 ff45 	bl	8008768 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d118      	bne.n	8001916 <menu+0x1186>
 80018e4:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <menu+0x1334>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d011      	beq.n	8001916 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80018f2:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <menu+0x1338>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b75      	ldr	r3, [pc, #468]	; (8001acc <menu+0x133c>)
 80018f8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80018fa:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <menu+0x1338>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <menu+0x1180>
				altLimit = 1;
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <menu+0x1340>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001908:	4b71      	ldr	r3, [pc, #452]	; (8001ad0 <menu+0x1340>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <menu+0x133c>)
 800190e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001910:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <menu+0x1344>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001916:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <menu+0x1348>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b08      	cmp	r3, #8
 800191c:	f040 8092 	bne.w	8001a44 <menu+0x12b4>
		if(dilSecim == 0) {
 8001920:	4b65      	ldr	r3, [pc, #404]	; (8001ab8 <menu+0x1328>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001928:	4a6c      	ldr	r2, [pc, #432]	; (8001adc <menu+0x134c>)
 800192a:	2101      	movs	r1, #1
 800192c:	2001      	movs	r0, #1
 800192e:	f7fe fece 	bl	80006ce <lcd_print>
 8001932:	e008      	b.n	8001946 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001934:	4b60      	ldr	r3, [pc, #384]	; (8001ab8 <menu+0x1328>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d104      	bne.n	8001946 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800193c:	4a68      	ldr	r2, [pc, #416]	; (8001ae0 <menu+0x1350>)
 800193e:	2101      	movs	r1, #1
 8001940:	2001      	movs	r0, #1
 8001942:	f7fe fec4 	bl	80006ce <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001946:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <menu+0x1354>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d113      	bne.n	8001976 <menu+0x11e6>
			if(dilSecim == 0) {
 800194e:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <menu+0x1328>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001956:	4a64      	ldr	r2, [pc, #400]	; (8001ae8 <menu+0x1358>)
 8001958:	2101      	movs	r1, #1
 800195a:	2002      	movs	r0, #2
 800195c:	f7fe feb7 	bl	80006ce <lcd_print>
 8001960:	e020      	b.n	80019a4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001962:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <menu+0x1328>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11c      	bne.n	80019a4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800196a:	4a60      	ldr	r2, [pc, #384]	; (8001aec <menu+0x135c>)
 800196c:	2101      	movs	r1, #1
 800196e:	2002      	movs	r0, #2
 8001970:	f7fe fead 	bl	80006ce <lcd_print>
 8001974:	e016      	b.n	80019a4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <menu+0x1354>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d112      	bne.n	80019a4 <menu+0x1214>
			if(dilSecim == 0){
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <menu+0x1328>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001986:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <menu+0x1360>)
 8001988:	2101      	movs	r1, #1
 800198a:	2002      	movs	r0, #2
 800198c:	f7fe fe9f 	bl	80006ce <lcd_print>
 8001990:	e008      	b.n	80019a4 <menu+0x1214>
			} else if(dilSecim == 1){
 8001992:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <menu+0x1328>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d104      	bne.n	80019a4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800199a:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <menu+0x1364>)
 800199c:	2101      	movs	r1, #1
 800199e:	2002      	movs	r0, #2
 80019a0:	f7fe fe95 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019a4:	2102      	movs	r1, #2
 80019a6:	4846      	ldr	r0, [pc, #280]	; (8001ac0 <menu+0x1330>)
 80019a8:	f006 fede 	bl	8008768 <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d115      	bne.n	80019de <menu+0x124e>
 80019b2:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <menu+0x1334>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	f083 0301 	eor.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80019c0:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <menu+0x1354>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <menu+0x1354>)
 80019ca:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <menu+0x1354>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d902      	bls.n	80019da <menu+0x124a>
				kapiAcTipi = 0;
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <menu+0x1354>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019da:	f003 fa4d 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019de:	2104      	movs	r1, #4
 80019e0:	4837      	ldr	r0, [pc, #220]	; (8001ac0 <menu+0x1330>)
 80019e2:	f006 fec1 	bl	8008768 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d115      	bne.n	8001a18 <menu+0x1288>
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <menu+0x1334>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00e      	beq.n	8001a18 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <menu+0x1354>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <menu+0x1354>)
 8001a04:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <menu+0x1354>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <menu+0x1284>
		   		kapiAcTipi = 1;
 8001a0e:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <menu+0x1354>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a14:	f003 fa30 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4829      	ldr	r0, [pc, #164]	; (8001ac0 <menu+0x1330>)
 8001a1c:	f006 fea4 	bl	8008768 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10e      	bne.n	8001a44 <menu+0x12b4>
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <menu+0x1334>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <menu+0x1354>)
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <menu+0x133c>)
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <menu+0x1344>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <menu+0x1348>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	f040 80b9 	bne.w	8001bc0 <menu+0x1430>
		if(dilSecim == 0){
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <menu+0x1328>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d105      	bne.n	8001a62 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <menu+0x1368>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7fe fe37 	bl	80006ce <lcd_print>
 8001a60:	e008      	b.n	8001a74 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <menu+0x1328>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d104      	bne.n	8001a74 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <menu+0x136c>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7fe fe2d 	bl	80006ce <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <menu+0x1370>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001a7c:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <menu+0x1374>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7fe fe24 	bl	80006ce <lcd_print>
 8001a86:	e04c      	b.n	8001b22 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <menu+0x1370>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d13f      	bne.n	8001b10 <menu+0x1380>
			if(dilSecim == 0){
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <menu+0x1328>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <menu+0x1378>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7fe fe16 	bl	80006ce <lcd_print>
 8001aa2:	e03e      	b.n	8001b22 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <menu+0x1328>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d13a      	bne.n	8001b22 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001aac:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <menu+0x137c>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7fe fe0c 	bl	80006ce <lcd_print>
 8001ab6:	e034      	b.n	8001b22 <menu+0x1392>
 8001ab8:	20000b44 	.word	0x20000b44
 8001abc:	0800c728 	.word	0x0800c728
 8001ac0:	40010800 	.word	0x40010800
 8001ac4:	20000b52 	.word	0x20000b52
 8001ac8:	20000b2c 	.word	0x20000b2c
 8001acc:	20000ab8 	.word	0x20000ab8
 8001ad0:	20000b2a 	.word	0x20000b2a
 8001ad4:	20000b4f 	.word	0x20000b4f
 8001ad8:	20000b24 	.word	0x20000b24
 8001adc:	0800c73c 	.word	0x0800c73c
 8001ae0:	0800c750 	.word	0x0800c750
 8001ae4:	20000b30 	.word	0x20000b30
 8001ae8:	0800c764 	.word	0x0800c764
 8001aec:	0800c774 	.word	0x0800c774
 8001af0:	0800c784 	.word	0x0800c784
 8001af4:	0800c798 	.word	0x0800c798
 8001af8:	0800c7ac 	.word	0x0800c7ac
 8001afc:	0800c7c0 	.word	0x0800c7c0
 8001b00:	20000b2d 	.word	0x20000b2d
 8001b04:	0800c7d4 	.word	0x0800c7d4
 8001b08:	0800c7e8 	.word	0x0800c7e8
 8001b0c:	0800c7f8 	.word	0x0800c7f8
			}
		} else if(kapi1Tip == 2) {
 8001b10:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <menu+0x15ac>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d104      	bne.n	8001b22 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001b18:	4a89      	ldr	r2, [pc, #548]	; (8001d40 <menu+0x15b0>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7fe fdd6 	bl	80006ce <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b22:	2102      	movs	r1, #2
 8001b24:	4887      	ldr	r0, [pc, #540]	; (8001d44 <menu+0x15b4>)
 8001b26:	f006 fe1f 	bl	8008768 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d115      	bne.n	8001b5c <menu+0x13cc>
 8001b30:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <menu+0x15b8>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00e      	beq.n	8001b5c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <menu+0x15ac>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <menu+0x15ac>)
 8001b48:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <menu+0x15ac>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d902      	bls.n	8001b58 <menu+0x13c8>
				kapi1Tip = 0;
 8001b52:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <menu+0x15ac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b58:	f003 f98e 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4879      	ldr	r0, [pc, #484]	; (8001d44 <menu+0x15b4>)
 8001b60:	f006 fe02 	bl	8008768 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d115      	bne.n	8001b96 <menu+0x1406>
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <menu+0x15b8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	f083 0301 	eor.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00e      	beq.n	8001b96 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <menu+0x15ac>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <menu+0x15ac>)
 8001b82:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <menu+0x15ac>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d902      	bls.n	8001b92 <menu+0x1402>
		   		kapi1Tip = 2;
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <menu+0x15ac>)
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b92:	f003 f971 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b96:	2108      	movs	r1, #8
 8001b98:	486a      	ldr	r0, [pc, #424]	; (8001d44 <menu+0x15b4>)
 8001b9a:	f006 fde5 	bl	8008768 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10d      	bne.n	8001bc0 <menu+0x1430>
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <menu+0x15b8>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <menu+0x15ac>)
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <menu+0x15bc>)
 8001bb8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <menu+0x15c0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <menu+0x15c4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b0a      	cmp	r3, #10
 8001bc6:	d17f      	bne.n	8001cc8 <menu+0x1538>
		if(dilSecim == 0) {
 8001bc8:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <menu+0x15c8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001bd0:	4a62      	ldr	r2, [pc, #392]	; (8001d5c <menu+0x15cc>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7fe fd7a 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001bda:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <menu+0x15d0>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7fe fd75 	bl	80006ce <lcd_print>
 8001be4:	e00d      	b.n	8001c02 <menu+0x1472>
		} else if(dilSecim == 1) {
 8001be6:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <menu+0x15c8>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d109      	bne.n	8001c02 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001bee:	4a5d      	ldr	r2, [pc, #372]	; (8001d64 <menu+0x15d4>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7fe fd6b 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001bf8:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <menu+0x15d8>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7fe fd66 	bl	80006ce <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001c02:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <menu+0x15dc>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	220a      	movs	r2, #10
 8001c08:	4959      	ldr	r1, [pc, #356]	; (8001d70 <menu+0x15e0>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f009 fdd8 	bl	800b7c0 <itoa>
		lcd_print(2,16,snum);
 8001c10:	4a57      	ldr	r2, [pc, #348]	; (8001d70 <menu+0x15e0>)
 8001c12:	2110      	movs	r1, #16
 8001c14:	2002      	movs	r0, #2
 8001c16:	f7fe fd5a 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4849      	ldr	r0, [pc, #292]	; (8001d44 <menu+0x15b4>)
 8001c1e:	f006 fda3 	bl	8008768 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d119      	bne.n	8001c5c <menu+0x14cc>
 8001c28:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <menu+0x15b8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d012      	beq.n	8001c5c <menu+0x14cc>
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <menu+0x15ac>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10e      	bne.n	8001c5c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001c3e:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <menu+0x15dc>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <menu+0x15dc>)
 8001c48:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001c4a:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <menu+0x15dc>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d902      	bls.n	8001c58 <menu+0x14c8>
				kapi1AcSure = 0;
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <menu+0x15dc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c58:	f003 f90e 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4839      	ldr	r0, [pc, #228]	; (8001d44 <menu+0x15b4>)
 8001c60:	f006 fd82 	bl	8008768 <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d119      	bne.n	8001c9e <menu+0x150e>
 8001c6a:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <menu+0x15b8>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	f083 0301 	eor.w	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d012      	beq.n	8001c9e <menu+0x150e>
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <menu+0x15ac>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10e      	bne.n	8001c9e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <menu+0x15dc>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <menu+0x15dc>)
 8001c8a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <menu+0x15dc>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d902      	bls.n	8001c9a <menu+0x150a>
		   		kapi1AcSure = 5;
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <menu+0x15dc>)
 8001c96:	2205      	movs	r2, #5
 8001c98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c9a:	f003 f8ed 	bl	8004e78 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	4828      	ldr	r0, [pc, #160]	; (8001d44 <menu+0x15b4>)
 8001ca2:	f006 fd61 	bl	8008768 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10d      	bne.n	8001cc8 <menu+0x1538>
 8001cac:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <menu+0x15b8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <menu+0x15dc>)
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <menu+0x15bc>)
 8001cc0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <menu+0x15c0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <menu+0x15c4>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b0b      	cmp	r3, #11
 8001cce:	f040 80b5 	bne.w	8001e3c <menu+0x16ac>
		if(dilSecim == 0) {
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <menu+0x15c8>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001cda:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <menu+0x15e4>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7fe fcf5 	bl	80006ce <lcd_print>
 8001ce4:	e008      	b.n	8001cf8 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <menu+0x15c8>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d104      	bne.n	8001cf8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001cee:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <menu+0x15e8>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f7fe fceb 	bl	80006ce <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <menu+0x15ec>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001d00:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <menu+0x15f0>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7fe fce2 	bl	80006ce <lcd_print>
 8001d0a:	e048      	b.n	8001d9e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <menu+0x15ec>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d13b      	bne.n	8001d8c <menu+0x15fc>
			if(dilSecim == 0) {
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <menu+0x15c8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <menu+0x15f4>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7fe fcd4 	bl	80006ce <lcd_print>
 8001d26:	e03a      	b.n	8001d9e <menu+0x160e>
			} else if(dilSecim == 1) {
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <menu+0x15c8>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d136      	bne.n	8001d9e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <menu+0x15f8>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7fe fcca 	bl	80006ce <lcd_print>
 8001d3a:	e030      	b.n	8001d9e <menu+0x160e>
 8001d3c:	20000b2d 	.word	0x20000b2d
 8001d40:	0800c80c 	.word	0x0800c80c
 8001d44:	40010800 	.word	0x40010800
 8001d48:	20000b52 	.word	0x20000b52
 8001d4c:	20000ab8 	.word	0x20000ab8
 8001d50:	20000b4f 	.word	0x20000b4f
 8001d54:	20000b24 	.word	0x20000b24
 8001d58:	20000b44 	.word	0x20000b44
 8001d5c:	0800c81c 	.word	0x0800c81c
 8001d60:	0800c830 	.word	0x0800c830
 8001d64:	0800c840 	.word	0x0800c840
 8001d68:	0800c854 	.word	0x0800c854
 8001d6c:	20000b3d 	.word	0x20000b3d
 8001d70:	20000af8 	.word	0x20000af8
 8001d74:	0800c864 	.word	0x0800c864
 8001d78:	0800c878 	.word	0x0800c878
 8001d7c:	20000b2e 	.word	0x20000b2e
 8001d80:	0800c7d4 	.word	0x0800c7d4
 8001d84:	0800c7e8 	.word	0x0800c7e8
 8001d88:	0800c7f8 	.word	0x0800c7f8
			}
		} else if(kapi2Tip == 2) {
 8001d8c:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <menu+0x1828>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d104      	bne.n	8001d9e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001d94:	4a89      	ldr	r2, [pc, #548]	; (8001fbc <menu+0x182c>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7fe fc98 	bl	80006ce <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4887      	ldr	r0, [pc, #540]	; (8001fc0 <menu+0x1830>)
 8001da2:	f006 fce1 	bl	8008768 <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d115      	bne.n	8001dd8 <menu+0x1648>
 8001dac:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <menu+0x1834>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f083 0301 	eor.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00e      	beq.n	8001dd8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <menu+0x1828>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <menu+0x1828>)
 8001dc4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <menu+0x1828>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <menu+0x1644>
				kapi2Tip = 0;
 8001dce:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <menu+0x1828>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dd4:	f003 f850 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4879      	ldr	r0, [pc, #484]	; (8001fc0 <menu+0x1830>)
 8001ddc:	f006 fcc4 	bl	8008768 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d115      	bne.n	8001e12 <menu+0x1682>
 8001de6:	4b77      	ldr	r3, [pc, #476]	; (8001fc4 <menu+0x1834>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001df4:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <menu+0x1828>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <menu+0x1828>)
 8001dfe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001e00:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <menu+0x1828>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d902      	bls.n	8001e0e <menu+0x167e>
		   		kapi2Tip = 2;
 8001e08:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <menu+0x1828>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e0e:	f003 f833 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e12:	2108      	movs	r1, #8
 8001e14:	486a      	ldr	r0, [pc, #424]	; (8001fc0 <menu+0x1830>)
 8001e16:	f006 fca7 	bl	8008768 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10d      	bne.n	8001e3c <menu+0x16ac>
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <menu+0x1834>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001e2e:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <menu+0x1828>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b65      	ldr	r3, [pc, #404]	; (8001fc8 <menu+0x1838>)
 8001e34:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <menu+0x183c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001e3c:	4b64      	ldr	r3, [pc, #400]	; (8001fd0 <menu+0x1840>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d17f      	bne.n	8001f44 <menu+0x17b4>
		if(dilSecim == 0) {
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <menu+0x1844>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10a      	bne.n	8001e62 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001e4c:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <menu+0x1848>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7fe fc3c 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001e56:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <menu+0x184c>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7fe fc37 	bl	80006ce <lcd_print>
 8001e60:	e00d      	b.n	8001e7e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001e62:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <menu+0x1844>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d109      	bne.n	8001e7e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <menu+0x1850>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7fe fc2d 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001e74:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <menu+0x1854>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f7fe fc28 	bl	80006ce <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <menu+0x1858>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	220a      	movs	r2, #10
 8001e84:	4959      	ldr	r1, [pc, #356]	; (8001fec <menu+0x185c>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f009 fc9a 	bl	800b7c0 <itoa>
		lcd_print(2,16,snum);
 8001e8c:	4a57      	ldr	r2, [pc, #348]	; (8001fec <menu+0x185c>)
 8001e8e:	2110      	movs	r1, #16
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7fe fc1c 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001e96:	2102      	movs	r1, #2
 8001e98:	4849      	ldr	r0, [pc, #292]	; (8001fc0 <menu+0x1830>)
 8001e9a:	f006 fc65 	bl	8008768 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d119      	bne.n	8001ed8 <menu+0x1748>
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <menu+0x1834>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <menu+0x1748>
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <menu+0x1828>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001eba:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <menu+0x1858>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <menu+0x1858>)
 8001ec4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001ec6:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <menu+0x1858>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d902      	bls.n	8001ed4 <menu+0x1744>
				kapi2AcSure = 0;
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <menu+0x1858>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ed4:	f002 ffd0 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4839      	ldr	r0, [pc, #228]	; (8001fc0 <menu+0x1830>)
 8001edc:	f006 fc44 	bl	8008768 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d119      	bne.n	8001f1a <menu+0x178a>
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <menu+0x1834>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <menu+0x178a>
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <menu+0x1828>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10e      	bne.n	8001f1a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001efc:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <menu+0x1858>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <menu+0x1858>)
 8001f06:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001f08:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <menu+0x1858>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d902      	bls.n	8001f16 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <menu+0x1858>)
 8001f12:	2205      	movs	r2, #5
 8001f14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f16:	f002 ffaf 	bl	8004e78 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <menu+0x1830>)
 8001f1e:	f006 fc23 	bl	8008768 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10d      	bne.n	8001f44 <menu+0x17b4>
 8001f28:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <menu+0x1834>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <menu+0x1858>)
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <menu+0x1838>)
 8001f3c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <menu+0x183c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <menu+0x1840>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b0d      	cmp	r3, #13
 8001f4a:	f040 80b5 	bne.w	80020b8 <menu+0x1928>
		if(dilSecim == 0) {
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <menu+0x1844>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <menu+0x1860>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7fe fbb7 	bl	80006ce <lcd_print>
 8001f60:	e008      	b.n	8001f74 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <menu+0x1844>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d104      	bne.n	8001f74 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001f6a:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <menu+0x1864>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7fe fbad 	bl	80006ce <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <menu+0x1868>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <menu+0x186c>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2002      	movs	r0, #2
 8001f82:	f7fe fba4 	bl	80006ce <lcd_print>
 8001f86:	e048      	b.n	800201a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <menu+0x1868>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d13b      	bne.n	8002008 <menu+0x1878>
			if(dilSecim == 0) {
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <menu+0x1844>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <menu+0x1870>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f7fe fb96 	bl	80006ce <lcd_print>
 8001fa2:	e03a      	b.n	800201a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <menu+0x1844>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d136      	bne.n	800201a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <menu+0x1874>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7fe fb8c 	bl	80006ce <lcd_print>
 8001fb6:	e030      	b.n	800201a <menu+0x188a>
 8001fb8:	20000b2e 	.word	0x20000b2e
 8001fbc:	0800c80c 	.word	0x0800c80c
 8001fc0:	40010800 	.word	0x40010800
 8001fc4:	20000b52 	.word	0x20000b52
 8001fc8:	20000ab8 	.word	0x20000ab8
 8001fcc:	20000b4f 	.word	0x20000b4f
 8001fd0:	20000b24 	.word	0x20000b24
 8001fd4:	20000b44 	.word	0x20000b44
 8001fd8:	0800c88c 	.word	0x0800c88c
 8001fdc:	0800c830 	.word	0x0800c830
 8001fe0:	0800c8a0 	.word	0x0800c8a0
 8001fe4:	0800c854 	.word	0x0800c854
 8001fe8:	20000b3e 	.word	0x20000b3e
 8001fec:	20000af8 	.word	0x20000af8
 8001ff0:	0800c8b4 	.word	0x0800c8b4
 8001ff4:	0800c8c8 	.word	0x0800c8c8
 8001ff8:	20000b2f 	.word	0x20000b2f
 8001ffc:	0800c7d4 	.word	0x0800c7d4
 8002000:	0800c7e8 	.word	0x0800c7e8
 8002004:	0800c7f8 	.word	0x0800c7f8
			}
		} else if(kapitablaTip == 2) {
 8002008:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <menu+0x19e8>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d104      	bne.n	800201a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002010:	4a5a      	ldr	r2, [pc, #360]	; (800217c <menu+0x19ec>)
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f7fe fb5a 	bl	80006ce <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800201a:	2102      	movs	r1, #2
 800201c:	4858      	ldr	r0, [pc, #352]	; (8002180 <menu+0x19f0>)
 800201e:	f006 fba3 	bl	8008768 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d115      	bne.n	8002054 <menu+0x18c4>
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <menu+0x19f4>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f083 0301 	eor.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00e      	beq.n	8002054 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <menu+0x19e8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <menu+0x19e8>)
 8002040:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002042:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <menu+0x19e8>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d902      	bls.n	8002050 <menu+0x18c0>
				kapitablaTip = 0;
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <menu+0x19e8>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002050:	f002 ff12 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002054:	2104      	movs	r1, #4
 8002056:	484a      	ldr	r0, [pc, #296]	; (8002180 <menu+0x19f0>)
 8002058:	f006 fb86 	bl	8008768 <HAL_GPIO_ReadPin>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d115      	bne.n	800208e <menu+0x18fe>
 8002062:	4b48      	ldr	r3, [pc, #288]	; (8002184 <menu+0x19f4>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <menu+0x19e8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <menu+0x19e8>)
 800207a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <menu+0x19e8>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d902      	bls.n	800208a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <menu+0x19e8>)
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800208a:	f002 fef5 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800208e:	2108      	movs	r1, #8
 8002090:	483b      	ldr	r0, [pc, #236]	; (8002180 <menu+0x19f0>)
 8002092:	f006 fb69 	bl	8008768 <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10d      	bne.n	80020b8 <menu+0x1928>
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <menu+0x19f4>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <menu+0x19e8>)
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <menu+0x19f8>)
 80020b0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <menu+0x19fc>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80020b8:	4b35      	ldr	r3, [pc, #212]	; (8002190 <menu+0x1a00>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b0e      	cmp	r3, #14
 80020be:	f040 80f2 	bne.w	80022a6 <menu+0x1b16>
		if(dilSecim == 0) {
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <menu+0x1a04>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80020ca:	4a33      	ldr	r2, [pc, #204]	; (8002198 <menu+0x1a08>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7fe fafd 	bl	80006ce <lcd_print>
 80020d4:	e008      	b.n	80020e8 <menu+0x1958>
		} else if(dilSecim == 1) {
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <menu+0x1a04>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d104      	bne.n	80020e8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80020de:	4a2f      	ldr	r2, [pc, #188]	; (800219c <menu+0x1a0c>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7fe faf3 	bl	80006ce <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <menu+0x1a10>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d113      	bne.n	8002118 <menu+0x1988>
			if(dilSecim == 0){
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <menu+0x1a04>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 80020f8:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <menu+0x1a14>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	2002      	movs	r0, #2
 80020fe:	f7fe fae6 	bl	80006ce <lcd_print>
 8002102:	e071      	b.n	80021e8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <menu+0x1a04>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d16d      	bne.n	80021e8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <menu+0x1a18>)
 800210e:	2101      	movs	r1, #1
 8002110:	2002      	movs	r0, #2
 8002112:	f7fe fadc 	bl	80006ce <lcd_print>
 8002116:	e067      	b.n	80021e8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <menu+0x1a10>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d112      	bne.n	8002146 <menu+0x19b6>
			if(dilSecim == 0){
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <menu+0x1a04>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <menu+0x1a1c>)
 800212a:	2101      	movs	r1, #1
 800212c:	2002      	movs	r0, #2
 800212e:	f7fe face 	bl	80006ce <lcd_print>
			}
			if(dilSecim == 1){
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <menu+0x1a04>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d156      	bne.n	80021e8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <menu+0x1a20>)
 800213c:	2101      	movs	r1, #1
 800213e:	2002      	movs	r0, #2
 8002140:	f7fe fac5 	bl	80006ce <lcd_print>
 8002144:	e050      	b.n	80021e8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <menu+0x1a10>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d136      	bne.n	80021bc <menu+0x1a2c>
			if(dilSecim == 0){
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <menu+0x1a04>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <menu+0x1a24>)
 8002158:	2101      	movs	r1, #1
 800215a:	2002      	movs	r0, #2
 800215c:	f7fe fab7 	bl	80006ce <lcd_print>
 8002160:	e042      	b.n	80021e8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <menu+0x1a04>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d13e      	bne.n	80021e8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 800216a:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <menu+0x1a28>)
 800216c:	2101      	movs	r1, #1
 800216e:	2002      	movs	r0, #2
 8002170:	f7fe faad 	bl	80006ce <lcd_print>
 8002174:	e038      	b.n	80021e8 <menu+0x1a58>
 8002176:	bf00      	nop
 8002178:	20000b2f 	.word	0x20000b2f
 800217c:	0800c80c 	.word	0x0800c80c
 8002180:	40010800 	.word	0x40010800
 8002184:	20000b52 	.word	0x20000b52
 8002188:	20000ab8 	.word	0x20000ab8
 800218c:	20000b4f 	.word	0x20000b4f
 8002190:	20000b24 	.word	0x20000b24
 8002194:	20000b44 	.word	0x20000b44
 8002198:	0800c8dc 	.word	0x0800c8dc
 800219c:	0800c8f0 	.word	0x0800c8f0
 80021a0:	20000b31 	.word	0x20000b31
 80021a4:	0800c904 	.word	0x0800c904
 80021a8:	0800c914 	.word	0x0800c914
 80021ac:	0800c924 	.word	0x0800c924
 80021b0:	0800c934 	.word	0x0800c934
 80021b4:	0800c944 	.word	0x0800c944
 80021b8:	0800c958 	.word	0x0800c958
			}
		} else if(kapiTablaAcKonum == 3) {
 80021bc:	4b9b      	ldr	r3, [pc, #620]	; (800242c <menu+0x1c9c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d111      	bne.n	80021e8 <menu+0x1a58>
			if(dilSecim == 0) {
 80021c4:	4b9a      	ldr	r3, [pc, #616]	; (8002430 <menu+0x1ca0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 80021cc:	4a99      	ldr	r2, [pc, #612]	; (8002434 <menu+0x1ca4>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	2002      	movs	r0, #2
 80021d2:	f7fe fa7c 	bl	80006ce <lcd_print>
			}
			if(dilSecim == 1) {
 80021d6:	4b96      	ldr	r3, [pc, #600]	; (8002430 <menu+0x1ca0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d104      	bne.n	80021e8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 80021de:	4a96      	ldr	r2, [pc, #600]	; (8002438 <menu+0x1ca8>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7fe fa73 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e8:	2102      	movs	r1, #2
 80021ea:	4894      	ldr	r0, [pc, #592]	; (800243c <menu+0x1cac>)
 80021ec:	f006 fabc 	bl	8008768 <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d115      	bne.n	8002222 <menu+0x1a92>
 80021f6:	4b92      	ldr	r3, [pc, #584]	; (8002440 <menu+0x1cb0>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00e      	beq.n	8002222 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002204:	4b89      	ldr	r3, [pc, #548]	; (800242c <menu+0x1c9c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b87      	ldr	r3, [pc, #540]	; (800242c <menu+0x1c9c>)
 800220e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002210:	4b86      	ldr	r3, [pc, #536]	; (800242c <menu+0x1c9c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d902      	bls.n	800221e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002218:	4b84      	ldr	r3, [pc, #528]	; (800242c <menu+0x1c9c>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800221e:	f002 fe2b 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002222:	2104      	movs	r1, #4
 8002224:	4885      	ldr	r0, [pc, #532]	; (800243c <menu+0x1cac>)
 8002226:	f006 fa9f 	bl	8008768 <HAL_GPIO_ReadPin>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d115      	bne.n	800225c <menu+0x1acc>
 8002230:	4b83      	ldr	r3, [pc, #524]	; (8002440 <menu+0x1cb0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00e      	beq.n	800225c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800223e:	4b7b      	ldr	r3, [pc, #492]	; (800242c <menu+0x1c9c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b79      	ldr	r3, [pc, #484]	; (800242c <menu+0x1c9c>)
 8002248:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <menu+0x1c9c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d902      	bls.n	8002258 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <menu+0x1c9c>)
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002258:	f002 fe0e 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800225c:	2108      	movs	r1, #8
 800225e:	4877      	ldr	r0, [pc, #476]	; (800243c <menu+0x1cac>)
 8002260:	f006 fa82 	bl	8008768 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d11d      	bne.n	80022a6 <menu+0x1b16>
 800226a:	4b75      	ldr	r3, [pc, #468]	; (8002440 <menu+0x1cb0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d016      	beq.n	80022a6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002278:	4b6c      	ldr	r3, [pc, #432]	; (800242c <menu+0x1c9c>)
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	4b71      	ldr	r3, [pc, #452]	; (8002444 <menu+0x1cb4>)
 800227e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002282:	4b6a      	ldr	r3, [pc, #424]	; (800242c <menu+0x1c9c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <menu+0x1b02>
 800228a:	4b68      	ldr	r3, [pc, #416]	; (800242c <menu+0x1c9c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d106      	bne.n	80022a0 <menu+0x1b10>
				altLimit = 1;
 8002292:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <menu+0x1cb8>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002298:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <menu+0x1cb8>)
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	4b69      	ldr	r3, [pc, #420]	; (8002444 <menu+0x1cb4>)
 800229e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <menu+0x1cbc>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80022a6:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <menu+0x1cc0>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	d17f      	bne.n	80023ae <menu+0x1c1e>
		if(dilSecim == 0) {
 80022ae:	4b60      	ldr	r3, [pc, #384]	; (8002430 <menu+0x1ca0>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80022b6:	4a67      	ldr	r2, [pc, #412]	; (8002454 <menu+0x1cc4>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7fe fa07 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80022c0:	4a65      	ldr	r2, [pc, #404]	; (8002458 <menu+0x1cc8>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7fe fa02 	bl	80006ce <lcd_print>
 80022ca:	e00d      	b.n	80022e8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80022cc:	4b58      	ldr	r3, [pc, #352]	; (8002430 <menu+0x1ca0>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d109      	bne.n	80022e8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80022d4:	4a61      	ldr	r2, [pc, #388]	; (800245c <menu+0x1ccc>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe f9f8 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80022de:	4a60      	ldr	r2, [pc, #384]	; (8002460 <menu+0x1cd0>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f7fe f9f3 	bl	80006ce <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <menu+0x1cd4>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	220a      	movs	r2, #10
 80022ee:	495e      	ldr	r1, [pc, #376]	; (8002468 <menu+0x1cd8>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f009 fa65 	bl	800b7c0 <itoa>
		lcd_print(2,16,snum);
 80022f6:	4a5c      	ldr	r2, [pc, #368]	; (8002468 <menu+0x1cd8>)
 80022f8:	2110      	movs	r1, #16
 80022fa:	2002      	movs	r0, #2
 80022fc:	f7fe f9e7 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002300:	2102      	movs	r1, #2
 8002302:	484e      	ldr	r0, [pc, #312]	; (800243c <menu+0x1cac>)
 8002304:	f006 fa30 	bl	8008768 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d119      	bne.n	8002342 <menu+0x1bb2>
 800230e:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <menu+0x1cb0>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <menu+0x1bb2>
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <menu+0x1cdc>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10e      	bne.n	8002342 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002324:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <menu+0x1cd4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <menu+0x1cd4>)
 800232e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <menu+0x1cd4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d902      	bls.n	800233e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002338:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <menu+0x1cd4>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800233e:	f002 fd9b 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002342:	2104      	movs	r1, #4
 8002344:	483d      	ldr	r0, [pc, #244]	; (800243c <menu+0x1cac>)
 8002346:	f006 fa0f 	bl	8008768 <HAL_GPIO_ReadPin>
 800234a:	4603      	mov	r3, r0
 800234c:	2b01      	cmp	r3, #1
 800234e:	d119      	bne.n	8002384 <menu+0x1bf4>
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <menu+0x1cb0>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	f083 0301 	eor.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <menu+0x1bf4>
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <menu+0x1cdc>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10e      	bne.n	8002384 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <menu+0x1cd4>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	3b01      	subs	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <menu+0x1cd4>)
 8002370:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002372:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <menu+0x1cd4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <menu+0x1cd4>)
 800237c:	2205      	movs	r2, #5
 800237e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002380:	f002 fd7a 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002384:	2108      	movs	r1, #8
 8002386:	482d      	ldr	r0, [pc, #180]	; (800243c <menu+0x1cac>)
 8002388:	f006 f9ee 	bl	8008768 <HAL_GPIO_ReadPin>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10d      	bne.n	80023ae <menu+0x1c1e>
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <menu+0x1cb0>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f083 0301 	eor.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <menu+0x1cd4>)
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <menu+0x1cb4>)
 80023a6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <menu+0x1cbc>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <menu+0x1cc0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	f040 80bc 	bne.w	8002530 <menu+0x1da0>
		if(dilSecim == 0) {
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <menu+0x1ca0>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <menu+0x1ce0>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7fe f982 	bl	80006ce <lcd_print>
 80023ca:	e008      	b.n	80023de <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <menu+0x1ca0>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d104      	bne.n	80023de <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <menu+0x1ce4>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2001      	movs	r0, #1
 80023da:	f7fe f978 	bl	80006ce <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <menu+0x1ce8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d113      	bne.n	800240e <menu+0x1c7e>
			if(dilSecim == 0) {
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <menu+0x1ca0>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80023ee:	4a11      	ldr	r2, [pc, #68]	; (8002434 <menu+0x1ca4>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	2002      	movs	r0, #2
 80023f4:	f7fe f96b 	bl	80006ce <lcd_print>
 80023f8:	e04b      	b.n	8002492 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <menu+0x1ca0>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d147      	bne.n	8002492 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002402:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <menu+0x1ca8>)
 8002404:	2101      	movs	r1, #1
 8002406:	2002      	movs	r0, #2
 8002408:	f7fe f961 	bl	80006ce <lcd_print>
 800240c:	e041      	b.n	8002492 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <menu+0x1ce8>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d13d      	bne.n	8002492 <menu+0x1d02>
			if(dilSecim == 0) {
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <menu+0x1ca0>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d130      	bne.n	8002480 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800241e:	4a17      	ldr	r2, [pc, #92]	; (800247c <menu+0x1cec>)
 8002420:	2101      	movs	r1, #1
 8002422:	2002      	movs	r0, #2
 8002424:	f7fe f953 	bl	80006ce <lcd_print>
 8002428:	e033      	b.n	8002492 <menu+0x1d02>
 800242a:	bf00      	nop
 800242c:	20000b31 	.word	0x20000b31
 8002430:	20000b44 	.word	0x20000b44
 8002434:	0800c5cc 	.word	0x0800c5cc
 8002438:	0800c5e0 	.word	0x0800c5e0
 800243c:	40010800 	.word	0x40010800
 8002440:	20000b52 	.word	0x20000b52
 8002444:	20000ab8 	.word	0x20000ab8
 8002448:	20000b2a 	.word	0x20000b2a
 800244c:	20000b4f 	.word	0x20000b4f
 8002450:	20000b24 	.word	0x20000b24
 8002454:	0800c96c 	.word	0x0800c96c
 8002458:	0800c830 	.word	0x0800c830
 800245c:	0800c980 	.word	0x0800c980
 8002460:	0800c854 	.word	0x0800c854
 8002464:	20000b3f 	.word	0x20000b3f
 8002468:	20000af8 	.word	0x20000af8
 800246c:	20000b2f 	.word	0x20000b2f
 8002470:	0800c994 	.word	0x0800c994
 8002474:	0800c9a8 	.word	0x0800c9a8
 8002478:	20000b32 	.word	0x20000b32
 800247c:	0800c62c 	.word	0x0800c62c
			} else if(dilSecim == 1) {
 8002480:	4b99      	ldr	r3, [pc, #612]	; (80026e8 <menu+0x1f58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d104      	bne.n	8002492 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002488:	4a98      	ldr	r2, [pc, #608]	; (80026ec <menu+0x1f5c>)
 800248a:	2101      	movs	r1, #1
 800248c:	2002      	movs	r0, #2
 800248e:	f7fe f91e 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002492:	2102      	movs	r1, #2
 8002494:	4896      	ldr	r0, [pc, #600]	; (80026f0 <menu+0x1f60>)
 8002496:	f006 f967 	bl	8008768 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d115      	bne.n	80024cc <menu+0x1d3c>
 80024a0:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <menu+0x1f64>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00e      	beq.n	80024cc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80024ae:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <menu+0x1f68>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b90      	ldr	r3, [pc, #576]	; (80026f8 <menu+0x1f68>)
 80024b8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80024ba:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <menu+0x1f68>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d902      	bls.n	80024c8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80024c2:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <menu+0x1f68>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024c8:	f002 fcd6 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024cc:	2104      	movs	r1, #4
 80024ce:	4888      	ldr	r0, [pc, #544]	; (80026f0 <menu+0x1f60>)
 80024d0:	f006 f94a 	bl	8008768 <HAL_GPIO_ReadPin>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d115      	bne.n	8002506 <menu+0x1d76>
 80024da:	4b86      	ldr	r3, [pc, #536]	; (80026f4 <menu+0x1f64>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f083 0301 	eor.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80024e8:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <menu+0x1f68>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <menu+0x1f68>)
 80024f2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80024f4:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <menu+0x1f68>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80024fc:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <menu+0x1f68>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002502:	f002 fcb9 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002506:	2108      	movs	r1, #8
 8002508:	4879      	ldr	r0, [pc, #484]	; (80026f0 <menu+0x1f60>)
 800250a:	f006 f92d 	bl	8008768 <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10d      	bne.n	8002530 <menu+0x1da0>
 8002514:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <menu+0x1f64>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f083 0301 	eor.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002522:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <menu+0x1f68>)
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	4b75      	ldr	r3, [pc, #468]	; (80026fc <menu+0x1f6c>)
 8002528:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800252a:	4b75      	ldr	r3, [pc, #468]	; (8002700 <menu+0x1f70>)
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002530:	4b74      	ldr	r3, [pc, #464]	; (8002704 <menu+0x1f74>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b11      	cmp	r3, #17
 8002536:	f040 80c3 	bne.w	80026c0 <menu+0x1f30>
		if(dilSecim == 0) {
 800253a:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <menu+0x1f58>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <menu+0x1f78>)
 8002544:	2101      	movs	r1, #1
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe f8c1 	bl	80006ce <lcd_print>
 800254c:	e008      	b.n	8002560 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800254e:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <menu+0x1f58>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d104      	bne.n	8002560 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002556:	4a6d      	ldr	r2, [pc, #436]	; (800270c <menu+0x1f7c>)
 8002558:	2101      	movs	r1, #1
 800255a:	2001      	movs	r0, #1
 800255c:	f7fe f8b7 	bl	80006ce <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002560:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <menu+0x1f80>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d113      	bne.n	8002590 <menu+0x1e00>
			if(dilSecim == 0){
 8002568:	4b5f      	ldr	r3, [pc, #380]	; (80026e8 <menu+0x1f58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002570:	4a68      	ldr	r2, [pc, #416]	; (8002714 <menu+0x1f84>)
 8002572:	2101      	movs	r1, #1
 8002574:	2002      	movs	r0, #2
 8002576:	f7fe f8aa 	bl	80006ce <lcd_print>
 800257a:	e038      	b.n	80025ee <menu+0x1e5e>
			} else if(dilSecim == 1){
 800257c:	4b5a      	ldr	r3, [pc, #360]	; (80026e8 <menu+0x1f58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d134      	bne.n	80025ee <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002584:	4a64      	ldr	r2, [pc, #400]	; (8002718 <menu+0x1f88>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f7fe f8a0 	bl	80006ce <lcd_print>
 800258e:	e02e      	b.n	80025ee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002590:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <menu+0x1f80>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d113      	bne.n	80025c0 <menu+0x1e30>
			if(dilSecim == 0){
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <menu+0x1f58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80025a0:	4a5e      	ldr	r2, [pc, #376]	; (800271c <menu+0x1f8c>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7fe f892 	bl	80006ce <lcd_print>
 80025aa:	e020      	b.n	80025ee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80025ac:	4b4e      	ldr	r3, [pc, #312]	; (80026e8 <menu+0x1f58>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d11c      	bne.n	80025ee <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80025b4:	4a5a      	ldr	r2, [pc, #360]	; (8002720 <menu+0x1f90>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7fe f888 	bl	80006ce <lcd_print>
 80025be:	e016      	b.n	80025ee <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <menu+0x1f80>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d112      	bne.n	80025ee <menu+0x1e5e>
			if(dilSecim == 0) {
 80025c8:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <menu+0x1f58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80025d0:	4a54      	ldr	r2, [pc, #336]	; (8002724 <menu+0x1f94>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2002      	movs	r0, #2
 80025d6:	f7fe f87a 	bl	80006ce <lcd_print>
 80025da:	e008      	b.n	80025ee <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <menu+0x1f58>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d104      	bne.n	80025ee <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <menu+0x1f98>)
 80025e6:	2101      	movs	r1, #1
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7fe f870 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ee:	2102      	movs	r1, #2
 80025f0:	483f      	ldr	r0, [pc, #252]	; (80026f0 <menu+0x1f60>)
 80025f2:	f006 f8b9 	bl	8008768 <HAL_GPIO_ReadPin>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d115      	bne.n	8002628 <menu+0x1e98>
 80025fc:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <menu+0x1f64>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f083 0301 	eor.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00e      	beq.n	8002628 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <menu+0x1f80>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <menu+0x1f80>)
 8002614:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002616:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <menu+0x1f80>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d902      	bls.n	8002624 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <menu+0x1f80>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002624:	f002 fc28 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002628:	2104      	movs	r1, #4
 800262a:	4831      	ldr	r0, [pc, #196]	; (80026f0 <menu+0x1f60>)
 800262c:	f006 f89c 	bl	8008768 <HAL_GPIO_ReadPin>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d115      	bne.n	8002662 <menu+0x1ed2>
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <menu+0x1f64>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	f083 0301 	eor.w	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00e      	beq.n	8002662 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <menu+0x1f80>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	3b01      	subs	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <menu+0x1f80>)
 800264e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <menu+0x1f80>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d902      	bls.n	800265e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <menu+0x1f80>)
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800265e:	f002 fc0b 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002662:	2108      	movs	r1, #8
 8002664:	4822      	ldr	r0, [pc, #136]	; (80026f0 <menu+0x1f60>)
 8002666:	f006 f87f 	bl	8008768 <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d127      	bne.n	80026c0 <menu+0x1f30>
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <menu+0x1f64>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f083 0301 	eor.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d020      	beq.n	80026c0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <menu+0x1f80>)
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <menu+0x1f6c>)
 8002684:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <menu+0x1f80>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <menu+0x1f06>
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <menu+0x1f80>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d106      	bne.n	80026a4 <menu+0x1f14>
				calismaSekli = 0;
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <menu+0x1f9c>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <menu+0x1f9c>)
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <menu+0x1f6c>)
 80026a2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <menu+0x1f80>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80026ac:	4b20      	ldr	r3, [pc, #128]	; (8002730 <menu+0x1fa0>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <menu+0x1fa0>)
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <menu+0x1f6c>)
 80026b8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <menu+0x1f70>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <menu+0x1f74>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	f040 80d5 	bne.w	8002874 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <menu+0x1f80>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d13c      	bne.n	800274c <menu+0x1fbc>
			if(dilSecim == 0) {
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <menu+0x1f58>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d12e      	bne.n	8002738 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <menu+0x1fa4>)
 80026dc:	2101      	movs	r1, #1
 80026de:	2001      	movs	r0, #1
 80026e0:	f7fd fff5 	bl	80006ce <lcd_print>
 80026e4:	e048      	b.n	8002778 <menu+0x1fe8>
 80026e6:	bf00      	nop
 80026e8:	20000b44 	.word	0x20000b44
 80026ec:	0800c640 	.word	0x0800c640
 80026f0:	40010800 	.word	0x40010800
 80026f4:	20000b52 	.word	0x20000b52
 80026f8:	20000b32 	.word	0x20000b32
 80026fc:	20000ab8 	.word	0x20000ab8
 8002700:	20000b4f 	.word	0x20000b4f
 8002704:	20000b24 	.word	0x20000b24
 8002708:	0800c9bc 	.word	0x0800c9bc
 800270c:	0800c9d0 	.word	0x0800c9d0
 8002710:	20000b33 	.word	0x20000b33
 8002714:	0800c9e4 	.word	0x0800c9e4
 8002718:	0800c9f4 	.word	0x0800c9f4
 800271c:	0800ca04 	.word	0x0800ca04
 8002720:	0800ca14 	.word	0x0800ca14
 8002724:	0800c5cc 	.word	0x0800c5cc
 8002728:	0800c5e0 	.word	0x0800c5e0
 800272c:	20000b25 	.word	0x20000b25
 8002730:	20000b36 	.word	0x20000b36
 8002734:	0800ca24 	.word	0x0800ca24
			} else if(dilSecim == 1) {
 8002738:	4b7b      	ldr	r3, [pc, #492]	; (8002928 <menu+0x2198>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11b      	bne.n	8002778 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002740:	4a7a      	ldr	r2, [pc, #488]	; (800292c <menu+0x219c>)
 8002742:	2101      	movs	r1, #1
 8002744:	2001      	movs	r0, #1
 8002746:	f7fd ffc2 	bl	80006ce <lcd_print>
 800274a:	e015      	b.n	8002778 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800274c:	4b78      	ldr	r3, [pc, #480]	; (8002930 <menu+0x21a0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d111      	bne.n	8002778 <menu+0x1fe8>
			if(dilSecim == 0){
 8002754:	4b74      	ldr	r3, [pc, #464]	; (8002928 <menu+0x2198>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800275c:	4a75      	ldr	r2, [pc, #468]	; (8002934 <menu+0x21a4>)
 800275e:	2101      	movs	r1, #1
 8002760:	2001      	movs	r0, #1
 8002762:	f7fd ffb4 	bl	80006ce <lcd_print>
			}
			if(dilSecim == 1){
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <menu+0x2198>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d104      	bne.n	8002778 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800276e:	4a72      	ldr	r2, [pc, #456]	; (8002938 <menu+0x21a8>)
 8002770:	2101      	movs	r1, #1
 8002772:	2001      	movs	r0, #1
 8002774:	f7fd ffab 	bl	80006ce <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002778:	4b70      	ldr	r3, [pc, #448]	; (800293c <menu+0x21ac>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d113      	bne.n	80027a8 <menu+0x2018>
			if(dilSecim == 0) {
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <menu+0x2198>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8002788:	4a6d      	ldr	r2, [pc, #436]	; (8002940 <menu+0x21b0>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f7fd ff9e 	bl	80006ce <lcd_print>
 8002792:	e020      	b.n	80027d6 <menu+0x2046>
			} else if(dilSecim == 1){
 8002794:	4b64      	ldr	r3, [pc, #400]	; (8002928 <menu+0x2198>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d11c      	bne.n	80027d6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800279c:	4a69      	ldr	r2, [pc, #420]	; (8002944 <menu+0x21b4>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7fd ff94 	bl	80006ce <lcd_print>
 80027a6:	e016      	b.n	80027d6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <menu+0x21ac>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d112      	bne.n	80027d6 <menu+0x2046>
			if(dilSecim == 0){
 80027b0:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <menu+0x2198>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80027b8:	4a63      	ldr	r2, [pc, #396]	; (8002948 <menu+0x21b8>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	2002      	movs	r0, #2
 80027be:	f7fd ff86 	bl	80006ce <lcd_print>
 80027c2:	e008      	b.n	80027d6 <menu+0x2046>
			} else if(dilSecim == 1){
 80027c4:	4b58      	ldr	r3, [pc, #352]	; (8002928 <menu+0x2198>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d104      	bne.n	80027d6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80027cc:	4a5f      	ldr	r2, [pc, #380]	; (800294c <menu+0x21bc>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7fd ff7c 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d6:	2102      	movs	r1, #2
 80027d8:	485d      	ldr	r0, [pc, #372]	; (8002950 <menu+0x21c0>)
 80027da:	f005 ffc5 	bl	8008768 <HAL_GPIO_ReadPin>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d115      	bne.n	8002810 <menu+0x2080>
 80027e4:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <menu+0x21c4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f083 0301 	eor.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80027f2:	4b52      	ldr	r3, [pc, #328]	; (800293c <menu+0x21ac>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b50      	ldr	r3, [pc, #320]	; (800293c <menu+0x21ac>)
 80027fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <menu+0x21ac>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d902      	bls.n	800280c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8002806:	4b4d      	ldr	r3, [pc, #308]	; (800293c <menu+0x21ac>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800280c:	f002 fb34 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002810:	2104      	movs	r1, #4
 8002812:	484f      	ldr	r0, [pc, #316]	; (8002950 <menu+0x21c0>)
 8002814:	f005 ffa8 	bl	8008768 <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d115      	bne.n	800284a <menu+0x20ba>
 800281e:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <menu+0x21c4>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <menu+0x21ac>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <menu+0x21ac>)
 8002836:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <menu+0x21ac>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002840:	4b3e      	ldr	r3, [pc, #248]	; (800293c <menu+0x21ac>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002846:	f002 fb17 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800284a:	2108      	movs	r1, #8
 800284c:	4840      	ldr	r0, [pc, #256]	; (8002950 <menu+0x21c0>)
 800284e:	f005 ff8b 	bl	8008768 <HAL_GPIO_ReadPin>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10d      	bne.n	8002874 <menu+0x20e4>
 8002858:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <menu+0x21c4>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f083 0301 	eor.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <menu+0x21ac>)
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <menu+0x21c8>)
 800286c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <menu+0x21cc>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002874:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <menu+0x21d0>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b13      	cmp	r3, #19
 800287a:	f040 80d5 	bne.w	8002a28 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <menu+0x21a0>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d113      	bne.n	80028ae <menu+0x211e>
			if(dilSecim == 0) {
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <menu+0x2198>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800288e:	4a35      	ldr	r2, [pc, #212]	; (8002964 <menu+0x21d4>)
 8002890:	2101      	movs	r1, #1
 8002892:	2001      	movs	r0, #1
 8002894:	f7fd ff1b 	bl	80006ce <lcd_print>
 8002898:	e01f      	b.n	80028da <menu+0x214a>
			} else if(dilSecim == 1) {
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <menu+0x2198>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d11b      	bne.n	80028da <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80028a2:	4a31      	ldr	r2, [pc, #196]	; (8002968 <menu+0x21d8>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7fd ff11 	bl	80006ce <lcd_print>
 80028ac:	e015      	b.n	80028da <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <menu+0x21a0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d111      	bne.n	80028da <menu+0x214a>
			if(dilSecim == 0) {
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <menu+0x2198>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d104      	bne.n	80028c8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80028be:	4a2b      	ldr	r2, [pc, #172]	; (800296c <menu+0x21dc>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	2001      	movs	r0, #1
 80028c4:	f7fd ff03 	bl	80006ce <lcd_print>
			}
			if(dilSecim == 1) {
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <menu+0x2198>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d104      	bne.n	80028da <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <menu+0x21e0>)
 80028d2:	2101      	movs	r1, #1
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fd fefa 	bl	80006ce <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <menu+0x21e4>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d113      	bne.n	800290a <menu+0x217a>
			if(dilSecim == 0) {
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <menu+0x2198>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80028ea:	4a15      	ldr	r2, [pc, #84]	; (8002940 <menu+0x21b0>)
 80028ec:	2101      	movs	r1, #1
 80028ee:	2002      	movs	r0, #2
 80028f0:	f7fd feed 	bl	80006ce <lcd_print>
 80028f4:	e049      	b.n	800298a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <menu+0x2198>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d145      	bne.n	800298a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <menu+0x21b4>)
 8002900:	2101      	movs	r1, #1
 8002902:	2002      	movs	r0, #2
 8002904:	f7fd fee3 	bl	80006ce <lcd_print>
 8002908:	e03f      	b.n	800298a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <menu+0x21e4>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d13b      	bne.n	800298a <menu+0x21fa>
			if(dilSecim == 0) {
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <menu+0x2198>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d12e      	bne.n	8002978 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <menu+0x21b8>)
 800291c:	2101      	movs	r1, #1
 800291e:	2002      	movs	r0, #2
 8002920:	f7fd fed5 	bl	80006ce <lcd_print>
 8002924:	e031      	b.n	800298a <menu+0x21fa>
 8002926:	bf00      	nop
 8002928:	20000b44 	.word	0x20000b44
 800292c:	0800ca38 	.word	0x0800ca38
 8002930:	20000b33 	.word	0x20000b33
 8002934:	0800ca48 	.word	0x0800ca48
 8002938:	0800ca5c 	.word	0x0800ca5c
 800293c:	20000b34 	.word	0x20000b34
 8002940:	0800c5cc 	.word	0x0800c5cc
 8002944:	0800c5e0 	.word	0x0800c5e0
 8002948:	0800c62c 	.word	0x0800c62c
 800294c:	0800c640 	.word	0x0800c640
 8002950:	40010800 	.word	0x40010800
 8002954:	20000b52 	.word	0x20000b52
 8002958:	20000ab8 	.word	0x20000ab8
 800295c:	20000b4f 	.word	0x20000b4f
 8002960:	20000b24 	.word	0x20000b24
 8002964:	0800ca70 	.word	0x0800ca70
 8002968:	0800ca84 	.word	0x0800ca84
 800296c:	0800ca98 	.word	0x0800ca98
 8002970:	0800caac 	.word	0x0800caac
 8002974:	20000b35 	.word	0x20000b35
			} else if(dilSecim == 1) {
 8002978:	4b90      	ldr	r3, [pc, #576]	; (8002bbc <menu+0x242c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d104      	bne.n	800298a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002980:	4a8f      	ldr	r2, [pc, #572]	; (8002bc0 <menu+0x2430>)
 8002982:	2101      	movs	r1, #1
 8002984:	2002      	movs	r0, #2
 8002986:	f7fd fea2 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800298a:	2102      	movs	r1, #2
 800298c:	488d      	ldr	r0, [pc, #564]	; (8002bc4 <menu+0x2434>)
 800298e:	f005 feeb 	bl	8008768 <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d115      	bne.n	80029c4 <menu+0x2234>
 8002998:	4b8b      	ldr	r3, [pc, #556]	; (8002bc8 <menu+0x2438>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00e      	beq.n	80029c4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <menu+0x243c>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b87      	ldr	r3, [pc, #540]	; (8002bcc <menu+0x243c>)
 80029b0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80029b2:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <menu+0x243c>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d902      	bls.n	80029c0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80029ba:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <menu+0x243c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029c0:	f002 fa5a 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c4:	2104      	movs	r1, #4
 80029c6:	487f      	ldr	r0, [pc, #508]	; (8002bc4 <menu+0x2434>)
 80029c8:	f005 fece 	bl	8008768 <HAL_GPIO_ReadPin>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d115      	bne.n	80029fe <menu+0x226e>
 80029d2:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <menu+0x2438>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f083 0301 	eor.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80029e0:	4b7a      	ldr	r3, [pc, #488]	; (8002bcc <menu+0x243c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <menu+0x243c>)
 80029ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80029ec:	4b77      	ldr	r3, [pc, #476]	; (8002bcc <menu+0x243c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80029f4:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <menu+0x243c>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fa:	f002 fa3d 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fe:	2108      	movs	r1, #8
 8002a00:	4870      	ldr	r0, [pc, #448]	; (8002bc4 <menu+0x2434>)
 8002a02:	f005 feb1 	bl	8008768 <HAL_GPIO_ReadPin>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10d      	bne.n	8002a28 <menu+0x2298>
 8002a0c:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <menu+0x2438>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002a1a:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <menu+0x243c>)
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <menu+0x2440>)
 8002a20:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002a22:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <menu+0x2444>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <menu+0x2448>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b14      	cmp	r3, #20
 8002a2e:	f040 80b5 	bne.w	8002b9c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002a32:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <menu+0x244c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d113      	bne.n	8002a62 <menu+0x22d2>
			if(dilSecim == 0) {
 8002a3a:	4b60      	ldr	r3, [pc, #384]	; (8002bbc <menu+0x242c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002a42:	4a67      	ldr	r2, [pc, #412]	; (8002be0 <menu+0x2450>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7fd fe41 	bl	80006ce <lcd_print>
 8002a4c:	e020      	b.n	8002a90 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <menu+0x242c>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d11c      	bne.n	8002a90 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002a56:	4a63      	ldr	r2, [pc, #396]	; (8002be4 <menu+0x2454>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f7fd fe37 	bl	80006ce <lcd_print>
 8002a60:	e016      	b.n	8002a90 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002a62:	4b5e      	ldr	r3, [pc, #376]	; (8002bdc <menu+0x244c>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d112      	bne.n	8002a90 <menu+0x2300>
			if(dilSecim == 0) {
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <menu+0x242c>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002a72:	4a5d      	ldr	r2, [pc, #372]	; (8002be8 <menu+0x2458>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7fd fe29 	bl	80006ce <lcd_print>
 8002a7c:	e008      	b.n	8002a90 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002a7e:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <menu+0x242c>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d104      	bne.n	8002a90 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002a86:	4a59      	ldr	r2, [pc, #356]	; (8002bec <menu+0x245c>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f7fd fe1f 	bl	80006ce <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002a90:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <menu+0x2460>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d113      	bne.n	8002ac0 <menu+0x2330>
			if(dilSecim == 0) {
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <menu+0x242c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002aa0:	4a54      	ldr	r2, [pc, #336]	; (8002bf4 <menu+0x2464>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f7fd fe12 	bl	80006ce <lcd_print>
 8002aaa:	e020      	b.n	8002aee <menu+0x235e>
			} else if(dilSecim == 1) {
 8002aac:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <menu+0x242c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d11c      	bne.n	8002aee <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002ab4:	4a50      	ldr	r2, [pc, #320]	; (8002bf8 <menu+0x2468>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7fd fe08 	bl	80006ce <lcd_print>
 8002abe:	e016      	b.n	8002aee <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <menu+0x2460>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d112      	bne.n	8002aee <menu+0x235e>
			if(dilSecim == 0) {
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <menu+0x242c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <menu+0x246c>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f7fd fdfa 	bl	80006ce <lcd_print>
 8002ada:	e008      	b.n	8002aee <menu+0x235e>
			} else if(dilSecim == 1) {
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <menu+0x242c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d104      	bne.n	8002aee <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002ae4:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <menu+0x2470>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f7fd fdf0 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002aee:	2102      	movs	r1, #2
 8002af0:	4834      	ldr	r0, [pc, #208]	; (8002bc4 <menu+0x2434>)
 8002af2:	f005 fe39 	bl	8008768 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d119      	bne.n	8002b30 <menu+0x23a0>
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <menu+0x2438>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d012      	beq.n	8002b30 <menu+0x23a0>
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <menu+0x244c>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d10e      	bne.n	8002b30 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <menu+0x2460>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <menu+0x2460>)
 8002b1c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <menu+0x2460>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d902      	bls.n	8002b2c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <menu+0x2460>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b2c:	f002 f9a4 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b30:	2104      	movs	r1, #4
 8002b32:	4824      	ldr	r0, [pc, #144]	; (8002bc4 <menu+0x2434>)
 8002b34:	f005 fe18 	bl	8008768 <HAL_GPIO_ReadPin>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d119      	bne.n	8002b72 <menu+0x23e2>
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <menu+0x2438>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	f083 0301 	eor.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <menu+0x23e2>
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <menu+0x244c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d10e      	bne.n	8002b72 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <menu+0x2460>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <menu+0x2460>)
 8002b5e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <menu+0x2460>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <menu+0x2460>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b6e:	f002 f983 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b72:	2108      	movs	r1, #8
 8002b74:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <menu+0x2434>)
 8002b76:	f005 fdf7 	bl	8008768 <HAL_GPIO_ReadPin>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10d      	bne.n	8002b9c <menu+0x240c>
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <menu+0x2438>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <menu+0x2460>)
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <menu+0x2440>)
 8002b94:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <menu+0x2444>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <menu+0x2448>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b15      	cmp	r3, #21
 8002ba2:	f040 80c2 	bne.w	8002d2a <menu+0x259a>
		if(dilSecim == 0) {
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <menu+0x242c>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d12c      	bne.n	8002c08 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <menu+0x2474>)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7fd fd8b 	bl	80006ce <lcd_print>
 8002bb8:	e02f      	b.n	8002c1a <menu+0x248a>
 8002bba:	bf00      	nop
 8002bbc:	20000b44 	.word	0x20000b44
 8002bc0:	0800c640 	.word	0x0800c640
 8002bc4:	40010800 	.word	0x40010800
 8002bc8:	20000b52 	.word	0x20000b52
 8002bcc:	20000b35 	.word	0x20000b35
 8002bd0:	20000ab8 	.word	0x20000ab8
 8002bd4:	20000b4f 	.word	0x20000b4f
 8002bd8:	20000b24 	.word	0x20000b24
 8002bdc:	20000b33 	.word	0x20000b33
 8002be0:	0800cac0 	.word	0x0800cac0
 8002be4:	0800cad4 	.word	0x0800cad4
 8002be8:	0800cae8 	.word	0x0800cae8
 8002bec:	0800cafc 	.word	0x0800cafc
 8002bf0:	20000b36 	.word	0x20000b36
 8002bf4:	0800cb10 	.word	0x0800cb10
 8002bf8:	0800cb24 	.word	0x0800cb24
 8002bfc:	0800cb34 	.word	0x0800cb34
 8002c00:	0800cb48 	.word	0x0800cb48
 8002c04:	0800cb58 	.word	0x0800cb58
		} else if(dilSecim == 1) {
 8002c08:	4b9c      	ldr	r3, [pc, #624]	; (8002e7c <menu+0x26ec>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d104      	bne.n	8002c1a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002c10:	4a9b      	ldr	r2, [pc, #620]	; (8002e80 <menu+0x26f0>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7fd fd5a 	bl	80006ce <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002c1a:	4b9a      	ldr	r3, [pc, #616]	; (8002e84 <menu+0x26f4>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d112      	bne.n	8002c48 <menu+0x24b8>
			if(dilSecim == 0) {
 8002c22:	4b96      	ldr	r3, [pc, #600]	; (8002e7c <menu+0x26ec>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002c2a:	4a97      	ldr	r2, [pc, #604]	; (8002e88 <menu+0x26f8>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	2002      	movs	r0, #2
 8002c30:	f7fd fd4d 	bl	80006ce <lcd_print>
			}
			if(dilSecim == 1) {
 8002c34:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <menu+0x26ec>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d11c      	bne.n	8002c76 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002c3c:	4a93      	ldr	r2, [pc, #588]	; (8002e8c <menu+0x26fc>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2002      	movs	r0, #2
 8002c42:	f7fd fd44 	bl	80006ce <lcd_print>
 8002c46:	e016      	b.n	8002c76 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002c48:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <menu+0x26f4>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d112      	bne.n	8002c76 <menu+0x24e6>
			if(dilSecim == 0) {
 8002c50:	4b8a      	ldr	r3, [pc, #552]	; (8002e7c <menu+0x26ec>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002c58:	4a8d      	ldr	r2, [pc, #564]	; (8002e90 <menu+0x2700>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f7fd fd36 	bl	80006ce <lcd_print>
 8002c62:	e008      	b.n	8002c76 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002c64:	4b85      	ldr	r3, [pc, #532]	; (8002e7c <menu+0x26ec>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d104      	bne.n	8002c76 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002c6c:	4a89      	ldr	r2, [pc, #548]	; (8002e94 <menu+0x2704>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2002      	movs	r0, #2
 8002c72:	f7fd fd2c 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c76:	2102      	movs	r1, #2
 8002c78:	4887      	ldr	r0, [pc, #540]	; (8002e98 <menu+0x2708>)
 8002c7a:	f005 fd75 	bl	8008768 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d115      	bne.n	8002cb0 <menu+0x2520>
 8002c84:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <menu+0x270c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <menu+0x26f4>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b7a      	ldr	r3, [pc, #488]	; (8002e84 <menu+0x26f4>)
 8002c9c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002c9e:	4b79      	ldr	r3, [pc, #484]	; (8002e84 <menu+0x26f4>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d902      	bls.n	8002cac <menu+0x251c>
				platformSilindirTipi = 0;
 8002ca6:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <menu+0x26f4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cac:	f002 f8e4 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	4879      	ldr	r0, [pc, #484]	; (8002e98 <menu+0x2708>)
 8002cb4:	f005 fd58 	bl	8008768 <HAL_GPIO_ReadPin>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d115      	bne.n	8002cea <menu+0x255a>
 8002cbe:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <menu+0x270c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002ccc:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <menu+0x26f4>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <menu+0x26f4>)
 8002cd6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <menu+0x26f4>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <menu+0x26f4>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ce6:	f002 f8c7 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cea:	2108      	movs	r1, #8
 8002cec:	486a      	ldr	r0, [pc, #424]	; (8002e98 <menu+0x2708>)
 8002cee:	f005 fd3b 	bl	8008768 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d118      	bne.n	8002d2a <menu+0x259a>
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <menu+0x270c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d011      	beq.n	8002d2a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002d06:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <menu+0x26f4>)
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <menu+0x2710>)
 8002d0c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <menu+0x26f4>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <menu+0x2594>
				altLimit = 1;
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <menu+0x2714>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <menu+0x2714>)
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <menu+0x2710>)
 8002d22:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002d24:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <menu+0x2718>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002d2a:	4b60      	ldr	r3, [pc, #384]	; (8002eac <menu+0x271c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b16      	cmp	r3, #22
 8002d30:	f040 8081 	bne.w	8002e36 <menu+0x26a6>
		if(dilSecim == 0) {
 8002d34:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <menu+0x26ec>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002d3c:	4a5c      	ldr	r2, [pc, #368]	; (8002eb0 <menu+0x2720>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7fd fcc4 	bl	80006ce <lcd_print>
 8002d46:	e008      	b.n	8002d5a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002d48:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <menu+0x26ec>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d104      	bne.n	8002d5a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <menu+0x2724>)
 8002d52:	2101      	movs	r1, #1
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7fd fcba 	bl	80006ce <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <menu+0x26ec>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002d62:	4a55      	ldr	r2, [pc, #340]	; (8002eb8 <menu+0x2728>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	2002      	movs	r0, #2
 8002d68:	f7fd fcb1 	bl	80006ce <lcd_print>
 8002d6c:	e008      	b.n	8002d80 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <menu+0x26ec>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d104      	bne.n	8002d80 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002d76:	4a51      	ldr	r2, [pc, #324]	; (8002ebc <menu+0x272c>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7fd fca7 	bl	80006ce <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002d80:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <menu+0x2730>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	220a      	movs	r2, #10
 8002d86:	494f      	ldr	r1, [pc, #316]	; (8002ec4 <menu+0x2734>)
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f008 fd19 	bl	800b7c0 <itoa>
		lcd_print(2,16,snum);
 8002d8e:	4a4d      	ldr	r2, [pc, #308]	; (8002ec4 <menu+0x2734>)
 8002d90:	2110      	movs	r1, #16
 8002d92:	2002      	movs	r0, #2
 8002d94:	f7fd fc9b 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d98:	2102      	movs	r1, #2
 8002d9a:	483f      	ldr	r0, [pc, #252]	; (8002e98 <menu+0x2708>)
 8002d9c:	f005 fce4 	bl	8008768 <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d115      	bne.n	8002dd2 <menu+0x2642>
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <menu+0x270c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f083 0301 	eor.w	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002db4:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <menu+0x2730>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <menu+0x2730>)
 8002dbe:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <menu+0x2730>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d902      	bls.n	8002dce <menu+0x263e>
				yukariValfTmr = 0;
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <menu+0x2730>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dce:	f002 f853 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	4830      	ldr	r0, [pc, #192]	; (8002e98 <menu+0x2708>)
 8002dd6:	f005 fcc7 	bl	8008768 <HAL_GPIO_ReadPin>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d115      	bne.n	8002e0c <menu+0x267c>
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <menu+0x270c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00e      	beq.n	8002e0c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <menu+0x2730>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <menu+0x2730>)
 8002df8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <menu+0x2730>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <menu+0x2730>)
 8002e04:	2205      	movs	r2, #5
 8002e06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e08:	f002 f836 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	4822      	ldr	r0, [pc, #136]	; (8002e98 <menu+0x2708>)
 8002e10:	f005 fcaa 	bl	8008768 <HAL_GPIO_ReadPin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10d      	bne.n	8002e36 <menu+0x26a6>
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <menu+0x270c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <menu+0x2730>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <menu+0x2710>)
 8002e2e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <menu+0x2718>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <menu+0x271c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b17      	cmp	r3, #23
 8002e3c:	f040 80ac 	bne.w	8002f98 <menu+0x2808>
		if(dilSecim == 0) {
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <menu+0x26ec>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <menu+0x2738>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7fd fc3e 	bl	80006ce <lcd_print>
 8002e52:	e008      	b.n	8002e66 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <menu+0x26ec>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d104      	bne.n	8002e66 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <menu+0x273c>)
 8002e5e:	2101      	movs	r1, #1
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7fd fc34 	bl	80006ce <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <menu+0x26ec>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d130      	bne.n	8002ed0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <menu+0x2728>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	2002      	movs	r0, #2
 8002e74:	f7fd fc2b 	bl	80006ce <lcd_print>
 8002e78:	e033      	b.n	8002ee2 <menu+0x2752>
 8002e7a:	bf00      	nop
 8002e7c:	20000b44 	.word	0x20000b44
 8002e80:	0800cb6c 	.word	0x0800cb6c
 8002e84:	20000b37 	.word	0x20000b37
 8002e88:	0800cb10 	.word	0x0800cb10
 8002e8c:	0800cb24 	.word	0x0800cb24
 8002e90:	0800cb34 	.word	0x0800cb34
 8002e94:	0800cb48 	.word	0x0800cb48
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	20000b52 	.word	0x20000b52
 8002ea0:	20000ab8 	.word	0x20000ab8
 8002ea4:	20000b2a 	.word	0x20000b2a
 8002ea8:	20000b4f 	.word	0x20000b4f
 8002eac:	20000b24 	.word	0x20000b24
 8002eb0:	0800cb7c 	.word	0x0800cb7c
 8002eb4:	0800cb90 	.word	0x0800cb90
 8002eb8:	0800c830 	.word	0x0800c830
 8002ebc:	0800cba4 	.word	0x0800cba4
 8002ec0:	20000b38 	.word	0x20000b38
 8002ec4:	20000af8 	.word	0x20000af8
 8002ec8:	0800cbb4 	.word	0x0800cbb4
 8002ecc:	0800cbc8 	.word	0x0800cbc8
			} else if(dilSecim == 1) {
 8002ed0:	4b98      	ldr	r3, [pc, #608]	; (8003134 <menu+0x29a4>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d104      	bne.n	8002ee2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002ed8:	4a97      	ldr	r2, [pc, #604]	; (8003138 <menu+0x29a8>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	2002      	movs	r0, #2
 8002ede:	f7fd fbf6 	bl	80006ce <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002ee2:	4b96      	ldr	r3, [pc, #600]	; (800313c <menu+0x29ac>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	220a      	movs	r2, #10
 8002ee8:	4995      	ldr	r1, [pc, #596]	; (8003140 <menu+0x29b0>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f008 fc68 	bl	800b7c0 <itoa>
		lcd_print(2,16,snum);
 8002ef0:	4a93      	ldr	r2, [pc, #588]	; (8003140 <menu+0x29b0>)
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	f7fd fbea 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002efa:	2102      	movs	r1, #2
 8002efc:	4891      	ldr	r0, [pc, #580]	; (8003144 <menu+0x29b4>)
 8002efe:	f005 fc33 	bl	8008768 <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d115      	bne.n	8002f34 <menu+0x27a4>
 8002f08:	4b8f      	ldr	r3, [pc, #572]	; (8003148 <menu+0x29b8>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	f083 0301 	eor.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <menu+0x29ac>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b87      	ldr	r3, [pc, #540]	; (800313c <menu+0x29ac>)
 8002f20:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002f22:	4b86      	ldr	r3, [pc, #536]	; (800313c <menu+0x29ac>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d902      	bls.n	8002f30 <menu+0x27a0>
				asagiValfTmr = 0;
 8002f2a:	4b84      	ldr	r3, [pc, #528]	; (800313c <menu+0x29ac>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f30:	f001 ffa2 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f34:	2104      	movs	r1, #4
 8002f36:	4883      	ldr	r0, [pc, #524]	; (8003144 <menu+0x29b4>)
 8002f38:	f005 fc16 	bl	8008768 <HAL_GPIO_ReadPin>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d115      	bne.n	8002f6e <menu+0x27de>
 8002f42:	4b81      	ldr	r3, [pc, #516]	; (8003148 <menu+0x29b8>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	f083 0301 	eor.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002f50:	4b7a      	ldr	r3, [pc, #488]	; (800313c <menu+0x29ac>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b78      	ldr	r3, [pc, #480]	; (800313c <menu+0x29ac>)
 8002f5a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002f5c:	4b77      	ldr	r3, [pc, #476]	; (800313c <menu+0x29ac>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d902      	bls.n	8002f6a <menu+0x27da>
		   		asagiValfTmr = 5;
 8002f64:	4b75      	ldr	r3, [pc, #468]	; (800313c <menu+0x29ac>)
 8002f66:	2205      	movs	r2, #5
 8002f68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f6a:	f001 ff85 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f6e:	2108      	movs	r1, #8
 8002f70:	4874      	ldr	r0, [pc, #464]	; (8003144 <menu+0x29b4>)
 8002f72:	f005 fbf9 	bl	8008768 <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10d      	bne.n	8002f98 <menu+0x2808>
 8002f7c:	4b72      	ldr	r3, [pc, #456]	; (8003148 <menu+0x29b8>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f083 0301 	eor.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <menu+0x29ac>)
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	4b6f      	ldr	r3, [pc, #444]	; (800314c <menu+0x29bc>)
 8002f90:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <menu+0x29c0>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002f98:	4b6e      	ldr	r3, [pc, #440]	; (8003154 <menu+0x29c4>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b18      	cmp	r3, #24
 8002f9e:	f040 809d 	bne.w	80030dc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	; (8003158 <menu+0x29c8>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d113      	bne.n	8002fd2 <menu+0x2842>
			if(dilSecim == 0) {
 8002faa:	4b62      	ldr	r3, [pc, #392]	; (8003134 <menu+0x29a4>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002fb2:	4a6a      	ldr	r2, [pc, #424]	; (800315c <menu+0x29cc>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fd fb89 	bl	80006ce <lcd_print>
 8002fbc:	e020      	b.n	8003000 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002fbe:	4b5d      	ldr	r3, [pc, #372]	; (8003134 <menu+0x29a4>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d11c      	bne.n	8003000 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002fc6:	4a66      	ldr	r2, [pc, #408]	; (8003160 <menu+0x29d0>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fd fb7f 	bl	80006ce <lcd_print>
 8002fd0:	e016      	b.n	8003000 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002fd2:	4b61      	ldr	r3, [pc, #388]	; (8003158 <menu+0x29c8>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d112      	bne.n	8003000 <menu+0x2870>
			if(dilSecim == 0) {
 8002fda:	4b56      	ldr	r3, [pc, #344]	; (8003134 <menu+0x29a4>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002fe2:	4a60      	ldr	r2, [pc, #384]	; (8003164 <menu+0x29d4>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fd fb71 	bl	80006ce <lcd_print>
 8002fec:	e008      	b.n	8003000 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002fee:	4b51      	ldr	r3, [pc, #324]	; (8003134 <menu+0x29a4>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d104      	bne.n	8003000 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002ff6:	4a5c      	ldr	r2, [pc, #368]	; (8003168 <menu+0x29d8>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7fd fb67 	bl	80006ce <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <menu+0x29a4>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <menu+0x29dc>)
 800300a:	2101      	movs	r1, #1
 800300c:	2002      	movs	r0, #2
 800300e:	f7fd fb5e 	bl	80006ce <lcd_print>
 8003012:	e008      	b.n	8003026 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003014:	4b47      	ldr	r3, [pc, #284]	; (8003134 <menu+0x29a4>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d104      	bne.n	8003026 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 800301c:	4a46      	ldr	r2, [pc, #280]	; (8003138 <menu+0x29a8>)
 800301e:	2101      	movs	r1, #1
 8003020:	2002      	movs	r0, #2
 8003022:	f7fd fb54 	bl	80006ce <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003026:	4b52      	ldr	r3, [pc, #328]	; (8003170 <menu+0x29e0>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	220a      	movs	r2, #10
 800302c:	4944      	ldr	r1, [pc, #272]	; (8003140 <menu+0x29b0>)
 800302e:	4618      	mov	r0, r3
 8003030:	f008 fbc6 	bl	800b7c0 <itoa>
		lcd_print(2, 16, snum);
 8003034:	4a42      	ldr	r2, [pc, #264]	; (8003140 <menu+0x29b0>)
 8003036:	2110      	movs	r1, #16
 8003038:	2002      	movs	r0, #2
 800303a:	f7fd fb48 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800303e:	2102      	movs	r1, #2
 8003040:	4840      	ldr	r0, [pc, #256]	; (8003144 <menu+0x29b4>)
 8003042:	f005 fb91 	bl	8008768 <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <menu+0x28e8>
 800304c:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <menu+0x29b8>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800305a:	4b45      	ldr	r3, [pc, #276]	; (8003170 <menu+0x29e0>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b43      	ldr	r3, [pc, #268]	; (8003170 <menu+0x29e0>)
 8003064:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <menu+0x29e0>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d902      	bls.n	8003074 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 800306e:	4b40      	ldr	r3, [pc, #256]	; (8003170 <menu+0x29e0>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003074:	f001 ff00 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003078:	2104      	movs	r1, #4
 800307a:	4832      	ldr	r0, [pc, #200]	; (8003144 <menu+0x29b4>)
 800307c:	f005 fb74 	bl	8008768 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d115      	bne.n	80030b2 <menu+0x2922>
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <menu+0x29b8>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <menu+0x29e0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <menu+0x29e0>)
 800309e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <menu+0x29e0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d902      	bls.n	80030ae <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <menu+0x29e0>)
 80030aa:	2205      	movs	r2, #5
 80030ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ae:	f001 fee3 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2108      	movs	r1, #8
 80030b4:	4823      	ldr	r0, [pc, #140]	; (8003144 <menu+0x29b4>)
 80030b6:	f005 fb57 	bl	8008768 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <menu+0x294c>
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <menu+0x29b8>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <menu+0x29e0>)
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	4b1e      	ldr	r3, [pc, #120]	; (800314c <menu+0x29bc>)
 80030d4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <menu+0x29c0>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <menu+0x29c4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b19      	cmp	r3, #25
 80030e2:	f040 80c4 	bne.w	800326e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <menu+0x29c8>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d113      	bne.n	8003116 <menu+0x2986>
			if(dilSecim == 0) {
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <menu+0x29a4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <menu+0x29e4>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	2001      	movs	r0, #1
 80030fc:	f7fd fae7 	bl	80006ce <lcd_print>
 8003100:	e047      	b.n	8003192 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <menu+0x29a4>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d143      	bne.n	8003192 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <menu+0x29e8>)
 800310c:	2101      	movs	r1, #1
 800310e:	2001      	movs	r0, #1
 8003110:	f7fd fadd 	bl	80006ce <lcd_print>
 8003114:	e03d      	b.n	8003192 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <menu+0x29c8>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d139      	bne.n	8003192 <menu+0x2a02>
			if(dilSecim == 0) {
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <menu+0x29a4>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d12c      	bne.n	8003180 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <menu+0x29ec>)
 8003128:	2101      	movs	r1, #1
 800312a:	2001      	movs	r0, #1
 800312c:	f7fd facf 	bl	80006ce <lcd_print>
 8003130:	e02f      	b.n	8003192 <menu+0x2a02>
 8003132:	bf00      	nop
 8003134:	20000b44 	.word	0x20000b44
 8003138:	0800cba4 	.word	0x0800cba4
 800313c:	20000b39 	.word	0x20000b39
 8003140:	20000af8 	.word	0x20000af8
 8003144:	40010800 	.word	0x40010800
 8003148:	20000b52 	.word	0x20000b52
 800314c:	20000ab8 	.word	0x20000ab8
 8003150:	20000b4f 	.word	0x20000b4f
 8003154:	20000b24 	.word	0x20000b24
 8003158:	20000b33 	.word	0x20000b33
 800315c:	0800cbdc 	.word	0x0800cbdc
 8003160:	0800cbf0 	.word	0x0800cbf0
 8003164:	0800cc04 	.word	0x0800cc04
 8003168:	0800cc18 	.word	0x0800cc18
 800316c:	0800c830 	.word	0x0800c830
 8003170:	20000b3a 	.word	0x20000b3a
 8003174:	0800cc2c 	.word	0x0800cc2c
 8003178:	0800cc40 	.word	0x0800cc40
 800317c:	0800cc54 	.word	0x0800cc54
			} else if(dilSecim == 1) {
 8003180:	4b73      	ldr	r3, [pc, #460]	; (8003350 <menu+0x2bc0>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d104      	bne.n	8003192 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003188:	4a72      	ldr	r2, [pc, #456]	; (8003354 <menu+0x2bc4>)
 800318a:	2101      	movs	r1, #1
 800318c:	2001      	movs	r0, #1
 800318e:	f7fd fa9e 	bl	80006ce <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003192:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <menu+0x2bc0>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 800319a:	4a6f      	ldr	r2, [pc, #444]	; (8003358 <menu+0x2bc8>)
 800319c:	2101      	movs	r1, #1
 800319e:	2002      	movs	r0, #2
 80031a0:	f7fd fa95 	bl	80006ce <lcd_print>
 80031a4:	e008      	b.n	80031b8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 80031a6:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <menu+0x2bc0>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d104      	bne.n	80031b8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 80031ae:	4a6b      	ldr	r2, [pc, #428]	; (800335c <menu+0x2bcc>)
 80031b0:	2101      	movs	r1, #1
 80031b2:	2002      	movs	r0, #2
 80031b4:	f7fd fa8b 	bl	80006ce <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80031b8:	4b69      	ldr	r3, [pc, #420]	; (8003360 <menu+0x2bd0>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	220a      	movs	r2, #10
 80031be:	4969      	ldr	r1, [pc, #420]	; (8003364 <menu+0x2bd4>)
 80031c0:	4618      	mov	r0, r3
 80031c2:	f008 fafd 	bl	800b7c0 <itoa>
		lcd_print(2,16,snum);
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <menu+0x2bd4>)
 80031c8:	2110      	movs	r1, #16
 80031ca:	2002      	movs	r0, #2
 80031cc:	f7fd fa7f 	bl	80006ce <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d0:	2102      	movs	r1, #2
 80031d2:	4865      	ldr	r0, [pc, #404]	; (8003368 <menu+0x2bd8>)
 80031d4:	f005 fac8 	bl	8008768 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d115      	bne.n	800320a <menu+0x2a7a>
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <menu+0x2bdc>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80031ec:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <menu+0x2bd0>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <menu+0x2bd0>)
 80031f6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80031f8:	4b59      	ldr	r3, [pc, #356]	; (8003360 <menu+0x2bd0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d902      	bls.n	8003206 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <menu+0x2bd0>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003206:	f001 fe37 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800320a:	2104      	movs	r1, #4
 800320c:	4856      	ldr	r0, [pc, #344]	; (8003368 <menu+0x2bd8>)
 800320e:	f005 faab 	bl	8008768 <HAL_GPIO_ReadPin>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d115      	bne.n	8003244 <menu+0x2ab4>
 8003218:	4b54      	ldr	r3, [pc, #336]	; (800336c <menu+0x2bdc>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00e      	beq.n	8003244 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003226:	4b4e      	ldr	r3, [pc, #312]	; (8003360 <menu+0x2bd0>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <menu+0x2bd0>)
 8003230:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003232:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <menu+0x2bd0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <menu+0x2bd0>)
 800323c:	2205      	movs	r2, #5
 800323e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003240:	f001 fe1a 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003244:	2108      	movs	r1, #8
 8003246:	4848      	ldr	r0, [pc, #288]	; (8003368 <menu+0x2bd8>)
 8003248:	f005 fa8e 	bl	8008768 <HAL_GPIO_ReadPin>
 800324c:	4603      	mov	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10d      	bne.n	800326e <menu+0x2ade>
 8003252:	4b46      	ldr	r3, [pc, #280]	; (800336c <menu+0x2bdc>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	f083 0301 	eor.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003260:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <menu+0x2bd0>)
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <menu+0x2be0>)
 8003266:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003268:	4b42      	ldr	r3, [pc, #264]	; (8003374 <menu+0x2be4>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800326e:	4b42      	ldr	r3, [pc, #264]	; (8003378 <menu+0x2be8>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b1a      	cmp	r3, #26
 8003274:	f040 80ec 	bne.w	8003450 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003278:	4b35      	ldr	r3, [pc, #212]	; (8003350 <menu+0x2bc0>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003280:	4a3e      	ldr	r2, [pc, #248]	; (800337c <menu+0x2bec>)
 8003282:	2101      	movs	r1, #1
 8003284:	2001      	movs	r0, #1
 8003286:	f7fd fa22 	bl	80006ce <lcd_print>
 800328a:	e008      	b.n	800329e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <menu+0x2bc0>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d104      	bne.n	800329e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003294:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <menu+0x2bf0>)
 8003296:	2101      	movs	r1, #1
 8003298:	2001      	movs	r0, #1
 800329a:	f7fd fa18 	bl	80006ce <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <menu+0x2bf4>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b63      	cmp	r3, #99	; 0x63
 80032a4:	d91e      	bls.n	80032e4 <menu+0x2b54>
			if(dilSecim == 0) {
 80032a6:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <menu+0x2bc0>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80032ae:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <menu+0x2bc8>)
 80032b0:	2101      	movs	r1, #1
 80032b2:	2002      	movs	r0, #2
 80032b4:	f7fd fa0b 	bl	80006ce <lcd_print>
			}
			if(dilSecim == 1) {
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <menu+0x2bc0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d104      	bne.n	80032ca <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80032c0:	4a26      	ldr	r2, [pc, #152]	; (800335c <menu+0x2bcc>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd fa02 	bl	80006ce <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <menu+0x2bf4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	220a      	movs	r2, #10
 80032d0:	4924      	ldr	r1, [pc, #144]	; (8003364 <menu+0x2bd4>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f008 fa74 	bl	800b7c0 <itoa>
			lcd_print(2,14,snum);
 80032d8:	4a22      	ldr	r2, [pc, #136]	; (8003364 <menu+0x2bd4>)
 80032da:	210e      	movs	r1, #14
 80032dc:	2002      	movs	r0, #2
 80032de:	f7fd f9f6 	bl	80006ce <lcd_print>
 80032e2:	e066      	b.n	80033b2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <menu+0x2bf4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d923      	bls.n	8003334 <menu+0x2ba4>
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <menu+0x2bf4>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b63      	cmp	r3, #99	; 0x63
 80032f2:	d81f      	bhi.n	8003334 <menu+0x2ba4>
			if(dilSecim == 0) {
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <menu+0x2bc0>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <menu+0x2bc8>)
 80032fe:	2101      	movs	r1, #1
 8003300:	2002      	movs	r0, #2
 8003302:	f7fd f9e4 	bl	80006ce <lcd_print>
 8003306:	e008      	b.n	800331a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <menu+0x2bc0>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d104      	bne.n	800331a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003310:	4a12      	ldr	r2, [pc, #72]	; (800335c <menu+0x2bcc>)
 8003312:	2101      	movs	r1, #1
 8003314:	2002      	movs	r0, #2
 8003316:	f7fd f9da 	bl	80006ce <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800331a:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <menu+0x2bf4>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	220a      	movs	r2, #10
 8003320:	4910      	ldr	r1, [pc, #64]	; (8003364 <menu+0x2bd4>)
 8003322:	4618      	mov	r0, r3
 8003324:	f008 fa4c 	bl	800b7c0 <itoa>
			lcd_print(2, 15, snum);
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <menu+0x2bd4>)
 800332a:	210f      	movs	r1, #15
 800332c:	2002      	movs	r0, #2
 800332e:	f7fd f9ce 	bl	80006ce <lcd_print>
 8003332:	e03e      	b.n	80033b2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <menu+0x2bf4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d83a      	bhi.n	80033b2 <menu+0x2c22>
			if(dilSecim == 0) {
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <menu+0x2bc0>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d121      	bne.n	8003388 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <menu+0x2bc8>)
 8003346:	2101      	movs	r1, #1
 8003348:	2002      	movs	r0, #2
 800334a:	f7fd f9c0 	bl	80006ce <lcd_print>
 800334e:	e024      	b.n	800339a <menu+0x2c0a>
 8003350:	20000b44 	.word	0x20000b44
 8003354:	0800cc68 	.word	0x0800cc68
 8003358:	0800c830 	.word	0x0800c830
 800335c:	0800cba4 	.word	0x0800cba4
 8003360:	20000b3b 	.word	0x20000b3b
 8003364:	20000af8 	.word	0x20000af8
 8003368:	40010800 	.word	0x40010800
 800336c:	20000b52 	.word	0x20000b52
 8003370:	20000ab8 	.word	0x20000ab8
 8003374:	20000b4f 	.word	0x20000b4f
 8003378:	20000b24 	.word	0x20000b24
 800337c:	0800cc7c 	.word	0x0800cc7c
 8003380:	0800cc90 	.word	0x0800cc90
 8003384:	20000b3c 	.word	0x20000b3c
			} else if(dilSecim == 1) {
 8003388:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <menu+0x2e38>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d104      	bne.n	800339a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003390:	4a8e      	ldr	r2, [pc, #568]	; (80035cc <menu+0x2e3c>)
 8003392:	2101      	movs	r1, #1
 8003394:	2002      	movs	r0, #2
 8003396:	f7fd f99a 	bl	80006ce <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800339a:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <menu+0x2e40>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	220a      	movs	r2, #10
 80033a0:	498c      	ldr	r1, [pc, #560]	; (80035d4 <menu+0x2e44>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f008 fa0c 	bl	800b7c0 <itoa>
			lcd_print(2, 16, snum);
 80033a8:	4a8a      	ldr	r2, [pc, #552]	; (80035d4 <menu+0x2e44>)
 80033aa:	2110      	movs	r1, #16
 80033ac:	2002      	movs	r0, #2
 80033ae:	f7fd f98e 	bl	80006ce <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b2:	2102      	movs	r1, #2
 80033b4:	4888      	ldr	r0, [pc, #544]	; (80035d8 <menu+0x2e48>)
 80033b6:	f005 f9d7 	bl	8008768 <HAL_GPIO_ReadPin>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d115      	bne.n	80033ec <menu+0x2c5c>
 80033c0:	4b86      	ldr	r3, [pc, #536]	; (80035dc <menu+0x2e4c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80033ce:	4b80      	ldr	r3, [pc, #512]	; (80035d0 <menu+0x2e40>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <menu+0x2e40>)
 80033d8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80033da:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <menu+0x2e40>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2bb4      	cmp	r3, #180	; 0xb4
 80033e0:	d902      	bls.n	80033e8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80033e2:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <menu+0x2e40>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e8:	f001 fd46 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ec:	2104      	movs	r1, #4
 80033ee:	487a      	ldr	r0, [pc, #488]	; (80035d8 <menu+0x2e48>)
 80033f0:	f005 f9ba 	bl	8008768 <HAL_GPIO_ReadPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d115      	bne.n	8003426 <menu+0x2c96>
 80033fa:	4b78      	ldr	r3, [pc, #480]	; (80035dc <menu+0x2e4c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	f083 0301 	eor.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003408:	4b71      	ldr	r3, [pc, #452]	; (80035d0 <menu+0x2e40>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <menu+0x2e40>)
 8003412:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003414:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <menu+0x2e40>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2bb5      	cmp	r3, #181	; 0xb5
 800341a:	d902      	bls.n	8003422 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800341c:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <menu+0x2e40>)
 800341e:	22b4      	movs	r2, #180	; 0xb4
 8003420:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003422:	f001 fd29 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003426:	2108      	movs	r1, #8
 8003428:	486b      	ldr	r0, [pc, #428]	; (80035d8 <menu+0x2e48>)
 800342a:	f005 f99d 	bl	8008768 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10d      	bne.n	8003450 <menu+0x2cc0>
 8003434:	4b69      	ldr	r3, [pc, #420]	; (80035dc <menu+0x2e4c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <menu+0x2e40>)
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <menu+0x2e50>)
 8003448:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800344a:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <menu+0x2e54>)
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003450:	4b65      	ldr	r3, [pc, #404]	; (80035e8 <menu+0x2e58>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b1b      	cmp	r3, #27
 8003456:	f040 8083 	bne.w	8003560 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800345a:	4a64      	ldr	r2, [pc, #400]	; (80035ec <menu+0x2e5c>)
 800345c:	2101      	movs	r1, #1
 800345e:	2001      	movs	r0, #1
 8003460:	f7fd f935 	bl	80006ce <lcd_print>

		if(buzzer == 0) {
 8003464:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <menu+0x2e60>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d113      	bne.n	8003494 <menu+0x2d04>
			if(dilSecim == 0) {
 800346c:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <menu+0x2e38>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003474:	4a5f      	ldr	r2, [pc, #380]	; (80035f4 <menu+0x2e64>)
 8003476:	2101      	movs	r1, #1
 8003478:	2002      	movs	r0, #2
 800347a:	f7fd f928 	bl	80006ce <lcd_print>
 800347e:	e020      	b.n	80034c2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003480:	4b51      	ldr	r3, [pc, #324]	; (80035c8 <menu+0x2e38>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11c      	bne.n	80034c2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003488:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <menu+0x2e68>)
 800348a:	2101      	movs	r1, #1
 800348c:	2002      	movs	r0, #2
 800348e:	f7fd f91e 	bl	80006ce <lcd_print>
 8003492:	e016      	b.n	80034c2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <menu+0x2e60>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d112      	bne.n	80034c2 <menu+0x2d32>
			if(dilSecim == 0) {
 800349c:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <menu+0x2e38>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80034a4:	4a55      	ldr	r2, [pc, #340]	; (80035fc <menu+0x2e6c>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	2002      	movs	r0, #2
 80034aa:	f7fd f910 	bl	80006ce <lcd_print>
 80034ae:	e008      	b.n	80034c2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034b0:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <menu+0x2e38>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d104      	bne.n	80034c2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80034b8:	4a51      	ldr	r2, [pc, #324]	; (8003600 <menu+0x2e70>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	2002      	movs	r0, #2
 80034be:	f7fd f906 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c2:	2102      	movs	r1, #2
 80034c4:	4844      	ldr	r0, [pc, #272]	; (80035d8 <menu+0x2e48>)
 80034c6:	f005 f94f 	bl	8008768 <HAL_GPIO_ReadPin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d115      	bne.n	80034fc <menu+0x2d6c>
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <menu+0x2e4c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00e      	beq.n	80034fc <menu+0x2d6c>
			buzzer = buzzer + 1;
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <menu+0x2e60>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <menu+0x2e60>)
 80034e8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80034ea:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <menu+0x2e60>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d902      	bls.n	80034f8 <menu+0x2d68>
				buzzer = 0;
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <menu+0x2e60>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034f8:	f001 fcbe 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034fc:	2104      	movs	r1, #4
 80034fe:	4836      	ldr	r0, [pc, #216]	; (80035d8 <menu+0x2e48>)
 8003500:	f005 f932 	bl	8008768 <HAL_GPIO_ReadPin>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d115      	bne.n	8003536 <menu+0x2da6>
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <menu+0x2e4c>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	f083 0301 	eor.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <menu+0x2e60>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	3b01      	subs	r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <menu+0x2e60>)
 8003522:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <menu+0x2e60>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <menu+0x2da2>
		   		buzzer = 1;
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <menu+0x2e60>)
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003532:	f001 fca1 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003536:	2108      	movs	r1, #8
 8003538:	4827      	ldr	r0, [pc, #156]	; (80035d8 <menu+0x2e48>)
 800353a:	f005 f915 	bl	8008768 <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10d      	bne.n	8003560 <menu+0x2dd0>
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <menu+0x2e4c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <menu+0x2e60>)
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <menu+0x2e50>)
 8003558:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <menu+0x2e54>)
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003560:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <menu+0x2e58>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b1c      	cmp	r3, #28
 8003566:	f040 80ab 	bne.w	80036c0 <menu+0x2f30>
		calismaSayModu = 0;
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <menu+0x2e74>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <menu+0x2e78>)
 8003572:	2101      	movs	r1, #1
 8003574:	2001      	movs	r0, #1
 8003576:	f7fd f8aa 	bl	80006ce <lcd_print>

		if(demoMode == 0) {
 800357a:	4b24      	ldr	r3, [pc, #144]	; (800360c <menu+0x2e7c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <menu+0x2e1a>
			if(dilSecim == 0) {
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <menu+0x2e38>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800358a:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <menu+0x2e64>)
 800358c:	2101      	movs	r1, #1
 800358e:	2002      	movs	r0, #2
 8003590:	f7fd f89d 	bl	80006ce <lcd_print>
 8003594:	e045      	b.n	8003622 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <menu+0x2e38>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d141      	bne.n	8003622 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <menu+0x2e68>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	2002      	movs	r0, #2
 80035a4:	f7fd f893 	bl	80006ce <lcd_print>
 80035a8:	e03b      	b.n	8003622 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <menu+0x2e7c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d137      	bne.n	8003622 <menu+0x2e92>
			if(dilSecim == 0){
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <menu+0x2e38>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d12a      	bne.n	8003610 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <menu+0x2e6c>)
 80035bc:	2101      	movs	r1, #1
 80035be:	2002      	movs	r0, #2
 80035c0:	f7fd f885 	bl	80006ce <lcd_print>
 80035c4:	e02d      	b.n	8003622 <menu+0x2e92>
 80035c6:	bf00      	nop
 80035c8:	20000b44 	.word	0x20000b44
 80035cc:	0800cba4 	.word	0x0800cba4
 80035d0:	20000b3c 	.word	0x20000b3c
 80035d4:	20000af8 	.word	0x20000af8
 80035d8:	40010800 	.word	0x40010800
 80035dc:	20000b52 	.word	0x20000b52
 80035e0:	20000ab8 	.word	0x20000ab8
 80035e4:	20000b4f 	.word	0x20000b4f
 80035e8:	20000b24 	.word	0x20000b24
 80035ec:	0800cca4 	.word	0x0800cca4
 80035f0:	20000b40 	.word	0x20000b40
 80035f4:	0800c5cc 	.word	0x0800c5cc
 80035f8:	0800c5e0 	.word	0x0800c5e0
 80035fc:	0800c62c 	.word	0x0800c62c
 8003600:	0800c640 	.word	0x0800c640
 8003604:	20000b43 	.word	0x20000b43
 8003608:	0800ccb8 	.word	0x0800ccb8
 800360c:	20000b42 	.word	0x20000b42
			} else if(dilSecim == 1) {
 8003610:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <menu+0x3048>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d104      	bne.n	8003622 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003618:	4a70      	ldr	r2, [pc, #448]	; (80037dc <menu+0x304c>)
 800361a:	2101      	movs	r1, #1
 800361c:	2002      	movs	r0, #2
 800361e:	f7fd f856 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003622:	2102      	movs	r1, #2
 8003624:	486e      	ldr	r0, [pc, #440]	; (80037e0 <menu+0x3050>)
 8003626:	f005 f89f 	bl	8008768 <HAL_GPIO_ReadPin>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d115      	bne.n	800365c <menu+0x2ecc>
 8003630:	4b6c      	ldr	r3, [pc, #432]	; (80037e4 <menu+0x3054>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800363e:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <menu+0x3058>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <menu+0x3058>)
 8003648:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800364a:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <menu+0x3058>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d902      	bls.n	8003658 <menu+0x2ec8>
				demoMode = 0;
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <menu+0x3058>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003658:	f001 fc0e 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800365c:	2104      	movs	r1, #4
 800365e:	4860      	ldr	r0, [pc, #384]	; (80037e0 <menu+0x3050>)
 8003660:	f005 f882 	bl	8008768 <HAL_GPIO_ReadPin>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d115      	bne.n	8003696 <menu+0x2f06>
 800366a:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <menu+0x3054>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <menu+0x2f06>
			demoMode = demoMode - 1;
 8003678:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <menu+0x3058>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <menu+0x3058>)
 8003682:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <menu+0x3058>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <menu+0x2f02>
		   		demoMode = 1;
 800368c:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <menu+0x3058>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003692:	f001 fbf1 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003696:	2108      	movs	r1, #8
 8003698:	4851      	ldr	r0, [pc, #324]	; (80037e0 <menu+0x3050>)
 800369a:	f005 f865 	bl	8008768 <HAL_GPIO_ReadPin>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <menu+0x2f30>
 80036a4:	4b4f      	ldr	r3, [pc, #316]	; (80037e4 <menu+0x3054>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	f083 0301 	eor.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80036b2:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <menu+0x3058>)
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <menu+0x305c>)
 80036b8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036ba:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <menu+0x3060>)
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80036c0:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <menu+0x3064>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b1d      	cmp	r3, #29
 80036c6:	f040 8132 	bne.w	800392e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <menu+0x3068>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d113      	bne.n	80036fa <menu+0x2f6a>
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <menu+0x306c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <menu+0x2f6a>
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <menu+0x3070>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <menu+0x2f6a>
 80036e2:	4b48      	ldr	r3, [pc, #288]	; (8003804 <menu+0x3074>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <menu+0x2f6a>
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <menu+0x3078>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <menu+0x2f6a>
			calismaSayisiYar = 0;
 80036f2:	4b46      	ldr	r3, [pc, #280]	; (800380c <menu+0x307c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e002      	b.n	8003700 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80036fa:	4b44      	ldr	r3, [pc, #272]	; (800380c <menu+0x307c>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003700:	4b43      	ldr	r3, [pc, #268]	; (8003810 <menu+0x3080>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d154      	bne.n	80037b2 <menu+0x3022>
			if(dilSecim == 0) {
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <menu+0x3048>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003710:	4a40      	ldr	r2, [pc, #256]	; (8003814 <menu+0x3084>)
 8003712:	2101      	movs	r1, #1
 8003714:	2001      	movs	r0, #1
 8003716:	f7fc ffda 	bl	80006ce <lcd_print>
 800371a:	e008      	b.n	800372e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800371c:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <menu+0x3048>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d104      	bne.n	800372e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003724:	4a3c      	ldr	r2, [pc, #240]	; (8003818 <menu+0x3088>)
 8003726:	2101      	movs	r1, #1
 8003728:	2001      	movs	r0, #1
 800372a:	f7fc ffd0 	bl	80006ce <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <menu+0x3078>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	220a      	movs	r2, #10
 8003734:	4939      	ldr	r1, [pc, #228]	; (800381c <menu+0x308c>)
 8003736:	4618      	mov	r0, r3
 8003738:	f008 f842 	bl	800b7c0 <itoa>
			lcd_print(2, 12, snum);
 800373c:	4a37      	ldr	r2, [pc, #220]	; (800381c <menu+0x308c>)
 800373e:	210c      	movs	r1, #12
 8003740:	2002      	movs	r0, #2
 8003742:	f7fc ffc4 	bl	80006ce <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003746:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <menu+0x3074>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	220a      	movs	r2, #10
 800374c:	4933      	ldr	r1, [pc, #204]	; (800381c <menu+0x308c>)
 800374e:	4618      	mov	r0, r3
 8003750:	f008 f836 	bl	800b7c0 <itoa>
			lcd_print(2, 13, snum);
 8003754:	4a31      	ldr	r2, [pc, #196]	; (800381c <menu+0x308c>)
 8003756:	210d      	movs	r1, #13
 8003758:	2002      	movs	r0, #2
 800375a:	f7fc ffb8 	bl	80006ce <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <menu+0x3070>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	220a      	movs	r2, #10
 8003764:	492d      	ldr	r1, [pc, #180]	; (800381c <menu+0x308c>)
 8003766:	4618      	mov	r0, r3
 8003768:	f008 f82a 	bl	800b7c0 <itoa>
			lcd_print(2, 14, snum);
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <menu+0x308c>)
 800376e:	210e      	movs	r1, #14
 8003770:	2002      	movs	r0, #2
 8003772:	f7fc ffac 	bl	80006ce <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <menu+0x306c>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	220a      	movs	r2, #10
 800377c:	4927      	ldr	r1, [pc, #156]	; (800381c <menu+0x308c>)
 800377e:	4618      	mov	r0, r3
 8003780:	f008 f81e 	bl	800b7c0 <itoa>
			lcd_print(2, 15, snum);
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <menu+0x308c>)
 8003786:	210f      	movs	r1, #15
 8003788:	2002      	movs	r0, #2
 800378a:	f7fc ffa0 	bl	80006ce <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <menu+0x3068>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	220a      	movs	r2, #10
 8003794:	4921      	ldr	r1, [pc, #132]	; (800381c <menu+0x308c>)
 8003796:	4618      	mov	r0, r3
 8003798:	f008 f812 	bl	800b7c0 <itoa>
			lcd_print(2, 16, snum);
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <menu+0x308c>)
 800379e:	2110      	movs	r1, #16
 80037a0:	2002      	movs	r0, #2
 80037a2:	f7fc ff94 	bl	80006ce <lcd_print>

			lcd_print(2, 1, "           ");
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <menu+0x3090>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	2002      	movs	r0, #2
 80037ac:	f7fc ff8f 	bl	80006ce <lcd_print>
 80037b0:	e048      	b.n	8003844 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80037b2:	4b17      	ldr	r3, [pc, #92]	; (8003810 <menu+0x3080>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d144      	bne.n	8003844 <menu+0x30b4>
			if(dilSecim == 0) {
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <menu+0x3048>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d132      	bne.n	8003828 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <menu+0x3084>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	2001      	movs	r0, #1
 80037c8:	f7fc ff81 	bl	80006ce <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80037cc:	4a15      	ldr	r2, [pc, #84]	; (8003824 <menu+0x3094>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	2002      	movs	r0, #2
 80037d2:	f7fc ff7c 	bl	80006ce <lcd_print>
 80037d6:	e035      	b.n	8003844 <menu+0x30b4>
 80037d8:	20000b44 	.word	0x20000b44
 80037dc:	0800c640 	.word	0x0800c640
 80037e0:	40010800 	.word	0x40010800
 80037e4:	20000b52 	.word	0x20000b52
 80037e8:	20000b42 	.word	0x20000b42
 80037ec:	20000ab8 	.word	0x20000ab8
 80037f0:	20000b4f 	.word	0x20000b4f
 80037f4:	20000b24 	.word	0x20000b24
 80037f8:	20000b21 	.word	0x20000b21
 80037fc:	20000b22 	.word	0x20000b22
 8003800:	20000941 	.word	0x20000941
 8003804:	20000942 	.word	0x20000942
 8003808:	20000b23 	.word	0x20000b23
 800380c:	20000b64 	.word	0x20000b64
 8003810:	20000b43 	.word	0x20000b43
 8003814:	0800ccc8 	.word	0x0800ccc8
 8003818:	0800ccdc 	.word	0x0800ccdc
 800381c:	20000af8 	.word	0x20000af8
 8003820:	0800ccf0 	.word	0x0800ccf0
 8003824:	0800ccfc 	.word	0x0800ccfc
			} else if(dilSecim == 1) {
 8003828:	4b95      	ldr	r3, [pc, #596]	; (8003a80 <menu+0x32f0>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d109      	bne.n	8003844 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003830:	4a94      	ldr	r2, [pc, #592]	; (8003a84 <menu+0x32f4>)
 8003832:	2101      	movs	r1, #1
 8003834:	2001      	movs	r0, #1
 8003836:	f7fc ff4a 	bl	80006ce <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800383a:	4a93      	ldr	r2, [pc, #588]	; (8003a88 <menu+0x32f8>)
 800383c:	2101      	movs	r1, #1
 800383e:	2002      	movs	r0, #2
 8003840:	f7fc ff45 	bl	80006ce <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003844:	2102      	movs	r1, #2
 8003846:	4891      	ldr	r0, [pc, #580]	; (8003a8c <menu+0x32fc>)
 8003848:	f004 ff8e 	bl	8008768 <HAL_GPIO_ReadPin>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d119      	bne.n	8003886 <menu+0x30f6>
 8003852:	4b8f      	ldr	r3, [pc, #572]	; (8003a90 <menu+0x3300>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	f083 0301 	eor.w	r3, r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <menu+0x30f6>
 8003860:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <menu+0x3304>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8003868:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <menu+0x3308>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <menu+0x3308>)
 8003872:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003874:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <menu+0x3308>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d902      	bls.n	8003882 <menu+0x30f2>
				calismaSayModu = 0;
 800387c:	4b86      	ldr	r3, [pc, #536]	; (8003a98 <menu+0x3308>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003882:	f001 faf9 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003886:	2104      	movs	r1, #4
 8003888:	4880      	ldr	r0, [pc, #512]	; (8003a8c <menu+0x32fc>)
 800388a:	f004 ff6d 	bl	8008768 <HAL_GPIO_ReadPin>
 800388e:	4603      	mov	r3, r0
 8003890:	2b01      	cmp	r3, #1
 8003892:	d119      	bne.n	80038c8 <menu+0x3138>
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <menu+0x3300>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f083 0301 	eor.w	r3, r3, #1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <menu+0x3138>
 80038a2:	4b7c      	ldr	r3, [pc, #496]	; (8003a94 <menu+0x3304>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80038aa:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <menu+0x3308>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b79      	ldr	r3, [pc, #484]	; (8003a98 <menu+0x3308>)
 80038b4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80038b6:	4b78      	ldr	r3, [pc, #480]	; (8003a98 <menu+0x3308>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <menu+0x3134>
		   		calismaSayModu = 1;
 80038be:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <menu+0x3308>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038c4:	f001 fad8 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c8:	2108      	movs	r1, #8
 80038ca:	4870      	ldr	r0, [pc, #448]	; (8003a8c <menu+0x32fc>)
 80038cc:	f004 ff4c 	bl	8008768 <HAL_GPIO_ReadPin>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d12b      	bne.n	800392e <menu+0x319e>
 80038d6:	4b6e      	ldr	r3, [pc, #440]	; (8003a90 <menu+0x3300>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	f083 0301 	eor.w	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d024      	beq.n	800392e <menu+0x319e>
			eepromData[32] = 0;
 80038e4:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <menu+0x330c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80038ec:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <menu+0x330c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80038f2:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <menu+0x330c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80038f8:	4b68      	ldr	r3, [pc, #416]	; (8003a9c <menu+0x330c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80038fe:	4b67      	ldr	r3, [pc, #412]	; (8003a9c <menu+0x330c>)
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003904:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <menu+0x3310>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800390a:	4b66      	ldr	r3, [pc, #408]	; (8003aa4 <menu+0x3314>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <menu+0x3318>)
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <menu+0x331c>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800391c:	4b64      	ldr	r3, [pc, #400]	; (8003ab0 <menu+0x3320>)
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <menu+0x3308>)
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003928:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <menu+0x3324>)
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <menu+0x3328>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b1e      	cmp	r3, #30
 8003934:	d16f      	bne.n	8003a16 <menu+0x3286>
		calismaSayModu = 0;
 8003936:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <menu+0x3308>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <menu+0x32f0>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003944:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <menu+0x332c>)
 8003946:	2101      	movs	r1, #1
 8003948:	2001      	movs	r0, #1
 800394a:	f7fc fec0 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <menu+0x3330>)
 8003950:	2101      	movs	r1, #1
 8003952:	2002      	movs	r0, #2
 8003954:	f7fc febb 	bl	80006ce <lcd_print>
 8003958:	e00d      	b.n	8003976 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <menu+0x32f0>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d109      	bne.n	8003976 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003962:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <menu+0x3334>)
 8003964:	2101      	movs	r1, #1
 8003966:	2001      	movs	r0, #1
 8003968:	f7fc feb1 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800396c:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <menu+0x3338>)
 800396e:	2101      	movs	r1, #1
 8003970:	2002      	movs	r0, #2
 8003972:	f7fc feac 	bl	80006ce <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003976:	2102      	movs	r1, #2
 8003978:	4844      	ldr	r0, [pc, #272]	; (8003a8c <menu+0x32fc>)
 800397a:	f004 fef5 	bl	8008768 <HAL_GPIO_ReadPin>
 800397e:	4603      	mov	r3, r0
 8003980:	2b01      	cmp	r3, #1
 8003982:	d115      	bne.n	80039b0 <menu+0x3220>
 8003984:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <menu+0x3300>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00e      	beq.n	80039b0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <menu+0x32f0>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <menu+0x32f0>)
 800399c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800399e:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <menu+0x32f0>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d902      	bls.n	80039ac <menu+0x321c>
				dilSecim = 0;
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <menu+0x32f0>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80039ac:	f001 fa64 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b0:	2104      	movs	r1, #4
 80039b2:	4836      	ldr	r0, [pc, #216]	; (8003a8c <menu+0x32fc>)
 80039b4:	f004 fed8 	bl	8008768 <HAL_GPIO_ReadPin>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d115      	bne.n	80039ea <menu+0x325a>
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <menu+0x3300>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	f083 0301 	eor.w	r3, r3, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <menu+0x325a>
			dilSecim = dilSecim - 1;
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <menu+0x32f0>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <menu+0x32f0>)
 80039d6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <menu+0x32f0>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <menu+0x3256>
		   		dilSecim = 1;
 80039e0:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <menu+0x32f0>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80039e6:	f001 fa47 	bl	8004e78 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ea:	2108      	movs	r1, #8
 80039ec:	4827      	ldr	r0, [pc, #156]	; (8003a8c <menu+0x32fc>)
 80039ee:	f004 febb 	bl	8008768 <HAL_GPIO_ReadPin>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10e      	bne.n	8003a16 <menu+0x3286>
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <menu+0x3300>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f083 0301 	eor.w	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <menu+0x3286>
			eepromData[33] = dilSecim;
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <menu+0x32f0>)
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <menu+0x330c>)
 8003a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003a10:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <menu+0x3324>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <menu+0x3328>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b1f      	cmp	r3, #31
 8003a1c:	d12e      	bne.n	8003a7c <menu+0x32ec>
		if(dilSecim == 0) {
 8003a1e:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <menu+0x32f0>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003a26:	4a29      	ldr	r2, [pc, #164]	; (8003acc <menu+0x333c>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7fc fe4f 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <menu+0x3340>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2002      	movs	r0, #2
 8003a36:	f7fc fe4a 	bl	80006ce <lcd_print>
 8003a3a:	e00d      	b.n	8003a58 <menu+0x32c8>
		} else if(dilSecim == 1) {
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <menu+0x32f0>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d109      	bne.n	8003a58 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <menu+0x3344>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7fc fe40 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003a4e:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <menu+0x3348>)
 8003a50:	2101      	movs	r1, #1
 8003a52:	2002      	movs	r0, #2
 8003a54:	f7fc fe3b 	bl	80006ce <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003a58:	2108      	movs	r1, #8
 8003a5a:	480c      	ldr	r0, [pc, #48]	; (8003a8c <menu+0x32fc>)
 8003a5c:	f004 fe84 	bl	8008768 <HAL_GPIO_ReadPin>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10a      	bne.n	8003a7c <menu+0x32ec>
			menuGiris = 0;
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <menu+0x334c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003a6c:	f7fc fe44 	bl	80006f8 <lcd_clear>
			HAL_Delay(500);
 8003a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a74:	f004 f8a8 	bl	8007bc8 <HAL_Delay>
			NVIC_SystemReset();
 8003a78:	f7fc fe5a 	bl	8000730 <__NVIC_SystemReset>
		}
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000b44 	.word	0x20000b44
 8003a84:	0800ccdc 	.word	0x0800ccdc
 8003a88:	0800cd10 	.word	0x0800cd10
 8003a8c:	40010800 	.word	0x40010800
 8003a90:	20000b52 	.word	0x20000b52
 8003a94:	20000b64 	.word	0x20000b64
 8003a98:	20000b43 	.word	0x20000b43
 8003a9c:	20000ab8 	.word	0x20000ab8
 8003aa0:	20000b23 	.word	0x20000b23
 8003aa4:	20000942 	.word	0x20000942
 8003aa8:	20000941 	.word	0x20000941
 8003aac:	20000b22 	.word	0x20000b22
 8003ab0:	20000b21 	.word	0x20000b21
 8003ab4:	20000b4f 	.word	0x20000b4f
 8003ab8:	20000b24 	.word	0x20000b24
 8003abc:	0800cd24 	.word	0x0800cd24
 8003ac0:	0800cd38 	.word	0x0800cd38
 8003ac4:	0800cd4c 	.word	0x0800cd4c
 8003ac8:	0800cd60 	.word	0x0800cd60
 8003acc:	0800cd74 	.word	0x0800cd74
 8003ad0:	0800cd88 	.word	0x0800cd88
 8003ad4:	0800cd9c 	.word	0x0800cd9c
 8003ad8:	0800cdb0 	.word	0x0800cdb0
 8003adc:	20000b41 	.word	0x20000b41

08003ae0 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003aea:	48a9      	ldr	r0, [pc, #676]	; (8003d90 <loadMenuTexts+0x2b0>)
 8003aec:	f7fc fe36 	bl	800075c <copyText>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4aa8      	ldr	r2, [pc, #672]	; (8003d94 <loadMenuTexts+0x2b4>)
 8003af4:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003af6:	48a8      	ldr	r0, [pc, #672]	; (8003d98 <loadMenuTexts+0x2b8>)
 8003af8:	f7fc fe30 	bl	800075c <copyText>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4aa7      	ldr	r2, [pc, #668]	; (8003d9c <loadMenuTexts+0x2bc>)
 8003b00:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003b02:	48a7      	ldr	r0, [pc, #668]	; (8003da0 <loadMenuTexts+0x2c0>)
 8003b04:	f7fc fe2a 	bl	800075c <copyText>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4aa6      	ldr	r2, [pc, #664]	; (8003da4 <loadMenuTexts+0x2c4>)
 8003b0c:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003b0e:	48a6      	ldr	r0, [pc, #664]	; (8003da8 <loadMenuTexts+0x2c8>)
 8003b10:	f7fc fe24 	bl	800075c <copyText>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4aa5      	ldr	r2, [pc, #660]	; (8003dac <loadMenuTexts+0x2cc>)
 8003b18:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003b1a:	48a5      	ldr	r0, [pc, #660]	; (8003db0 <loadMenuTexts+0x2d0>)
 8003b1c:	f7fc fe1e 	bl	800075c <copyText>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4aa4      	ldr	r2, [pc, #656]	; (8003db4 <loadMenuTexts+0x2d4>)
 8003b24:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003b26:	48a4      	ldr	r0, [pc, #656]	; (8003db8 <loadMenuTexts+0x2d8>)
 8003b28:	f7fc fe18 	bl	800075c <copyText>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4aa3      	ldr	r2, [pc, #652]	; (8003dbc <loadMenuTexts+0x2dc>)
 8003b30:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003b32:	48a3      	ldr	r0, [pc, #652]	; (8003dc0 <loadMenuTexts+0x2e0>)
 8003b34:	f7fc fe12 	bl	800075c <copyText>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4aa2      	ldr	r2, [pc, #648]	; (8003dc4 <loadMenuTexts+0x2e4>)
 8003b3c:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f040 82d1 	bne.w	80040e8 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003b46:	48a0      	ldr	r0, [pc, #640]	; (8003dc8 <loadMenuTexts+0x2e8>)
 8003b48:	f7fc fe08 	bl	800075c <copyText>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a9f      	ldr	r2, [pc, #636]	; (8003dcc <loadMenuTexts+0x2ec>)
 8003b50:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003b52:	489f      	ldr	r0, [pc, #636]	; (8003dd0 <loadMenuTexts+0x2f0>)
 8003b54:	f7fc fe02 	bl	800075c <copyText>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4a9e      	ldr	r2, [pc, #632]	; (8003dd4 <loadMenuTexts+0x2f4>)
 8003b5c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003b5e:	489e      	ldr	r0, [pc, #632]	; (8003dd8 <loadMenuTexts+0x2f8>)
 8003b60:	f7fc fdfc 	bl	800075c <copyText>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4a9d      	ldr	r2, [pc, #628]	; (8003ddc <loadMenuTexts+0x2fc>)
 8003b68:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003b6a:	489d      	ldr	r0, [pc, #628]	; (8003de0 <loadMenuTexts+0x300>)
 8003b6c:	f7fc fdf6 	bl	800075c <copyText>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4a9c      	ldr	r2, [pc, #624]	; (8003de4 <loadMenuTexts+0x304>)
 8003b74:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003b76:	489c      	ldr	r0, [pc, #624]	; (8003de8 <loadMenuTexts+0x308>)
 8003b78:	f7fc fdf0 	bl	800075c <copyText>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4a9b      	ldr	r2, [pc, #620]	; (8003dec <loadMenuTexts+0x30c>)
 8003b80:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003b82:	489b      	ldr	r0, [pc, #620]	; (8003df0 <loadMenuTexts+0x310>)
 8003b84:	f7fc fdea 	bl	800075c <copyText>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4a9a      	ldr	r2, [pc, #616]	; (8003df4 <loadMenuTexts+0x314>)
 8003b8c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003b8e:	489a      	ldr	r0, [pc, #616]	; (8003df8 <loadMenuTexts+0x318>)
 8003b90:	f7fc fde4 	bl	800075c <copyText>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4a99      	ldr	r2, [pc, #612]	; (8003dfc <loadMenuTexts+0x31c>)
 8003b98:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003b9a:	4899      	ldr	r0, [pc, #612]	; (8003e00 <loadMenuTexts+0x320>)
 8003b9c:	f7fc fdde 	bl	800075c <copyText>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4a98      	ldr	r2, [pc, #608]	; (8003e04 <loadMenuTexts+0x324>)
 8003ba4:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003ba6:	4898      	ldr	r0, [pc, #608]	; (8003e08 <loadMenuTexts+0x328>)
 8003ba8:	f7fc fdd8 	bl	800075c <copyText>
 8003bac:	4603      	mov	r3, r0
 8003bae:	4a97      	ldr	r2, [pc, #604]	; (8003e0c <loadMenuTexts+0x32c>)
 8003bb0:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003bb2:	4897      	ldr	r0, [pc, #604]	; (8003e10 <loadMenuTexts+0x330>)
 8003bb4:	f7fc fdd2 	bl	800075c <copyText>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4a96      	ldr	r2, [pc, #600]	; (8003e14 <loadMenuTexts+0x334>)
 8003bbc:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003bbe:	4896      	ldr	r0, [pc, #600]	; (8003e18 <loadMenuTexts+0x338>)
 8003bc0:	f7fc fdcc 	bl	800075c <copyText>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4a95      	ldr	r2, [pc, #596]	; (8003e1c <loadMenuTexts+0x33c>)
 8003bc8:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003bca:	4895      	ldr	r0, [pc, #596]	; (8003e20 <loadMenuTexts+0x340>)
 8003bcc:	f7fc fdc6 	bl	800075c <copyText>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4a94      	ldr	r2, [pc, #592]	; (8003e24 <loadMenuTexts+0x344>)
 8003bd4:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003bd6:	4894      	ldr	r0, [pc, #592]	; (8003e28 <loadMenuTexts+0x348>)
 8003bd8:	f7fc fdc0 	bl	800075c <copyText>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4a93      	ldr	r2, [pc, #588]	; (8003e2c <loadMenuTexts+0x34c>)
 8003be0:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003be2:	4893      	ldr	r0, [pc, #588]	; (8003e30 <loadMenuTexts+0x350>)
 8003be4:	f7fc fdba 	bl	800075c <copyText>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4a92      	ldr	r2, [pc, #584]	; (8003e34 <loadMenuTexts+0x354>)
 8003bec:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003bee:	4892      	ldr	r0, [pc, #584]	; (8003e38 <loadMenuTexts+0x358>)
 8003bf0:	f7fc fdb4 	bl	800075c <copyText>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4a91      	ldr	r2, [pc, #580]	; (8003e3c <loadMenuTexts+0x35c>)
 8003bf8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003bfa:	4891      	ldr	r0, [pc, #580]	; (8003e40 <loadMenuTexts+0x360>)
 8003bfc:	f7fc fdae 	bl	800075c <copyText>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4a90      	ldr	r2, [pc, #576]	; (8003e44 <loadMenuTexts+0x364>)
 8003c04:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003c06:	4890      	ldr	r0, [pc, #576]	; (8003e48 <loadMenuTexts+0x368>)
 8003c08:	f7fc fda8 	bl	800075c <copyText>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4a8f      	ldr	r2, [pc, #572]	; (8003e4c <loadMenuTexts+0x36c>)
 8003c10:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003c12:	488f      	ldr	r0, [pc, #572]	; (8003e50 <loadMenuTexts+0x370>)
 8003c14:	f7fc fda2 	bl	800075c <copyText>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a8e      	ldr	r2, [pc, #568]	; (8003e54 <loadMenuTexts+0x374>)
 8003c1c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003c1e:	488e      	ldr	r0, [pc, #568]	; (8003e58 <loadMenuTexts+0x378>)
 8003c20:	f7fc fd9c 	bl	800075c <copyText>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4a8d      	ldr	r2, [pc, #564]	; (8003e5c <loadMenuTexts+0x37c>)
 8003c28:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003c2a:	488d      	ldr	r0, [pc, #564]	; (8003e60 <loadMenuTexts+0x380>)
 8003c2c:	f7fc fd96 	bl	800075c <copyText>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4a8c      	ldr	r2, [pc, #560]	; (8003e64 <loadMenuTexts+0x384>)
 8003c34:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003c36:	488c      	ldr	r0, [pc, #560]	; (8003e68 <loadMenuTexts+0x388>)
 8003c38:	f7fc fd90 	bl	800075c <copyText>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4a8b      	ldr	r2, [pc, #556]	; (8003e6c <loadMenuTexts+0x38c>)
 8003c40:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003c42:	488b      	ldr	r0, [pc, #556]	; (8003e70 <loadMenuTexts+0x390>)
 8003c44:	f7fc fd8a 	bl	800075c <copyText>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4a8a      	ldr	r2, [pc, #552]	; (8003e74 <loadMenuTexts+0x394>)
 8003c4c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003c4e:	488a      	ldr	r0, [pc, #552]	; (8003e78 <loadMenuTexts+0x398>)
 8003c50:	f7fc fd84 	bl	800075c <copyText>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4a89      	ldr	r2, [pc, #548]	; (8003e7c <loadMenuTexts+0x39c>)
 8003c58:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003c5a:	4889      	ldr	r0, [pc, #548]	; (8003e80 <loadMenuTexts+0x3a0>)
 8003c5c:	f7fc fd7e 	bl	800075c <copyText>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a88      	ldr	r2, [pc, #544]	; (8003e84 <loadMenuTexts+0x3a4>)
 8003c64:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003c66:	4888      	ldr	r0, [pc, #544]	; (8003e88 <loadMenuTexts+0x3a8>)
 8003c68:	f7fc fd78 	bl	800075c <copyText>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4a87      	ldr	r2, [pc, #540]	; (8003e8c <loadMenuTexts+0x3ac>)
 8003c70:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003c72:	4887      	ldr	r0, [pc, #540]	; (8003e90 <loadMenuTexts+0x3b0>)
 8003c74:	f7fc fd72 	bl	800075c <copyText>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a86      	ldr	r2, [pc, #536]	; (8003e94 <loadMenuTexts+0x3b4>)
 8003c7c:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003c7e:	4886      	ldr	r0, [pc, #536]	; (8003e98 <loadMenuTexts+0x3b8>)
 8003c80:	f7fc fd6c 	bl	800075c <copyText>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a85      	ldr	r2, [pc, #532]	; (8003e9c <loadMenuTexts+0x3bc>)
 8003c88:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003c8a:	4885      	ldr	r0, [pc, #532]	; (8003ea0 <loadMenuTexts+0x3c0>)
 8003c8c:	f7fc fd66 	bl	800075c <copyText>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4a84      	ldr	r2, [pc, #528]	; (8003ea4 <loadMenuTexts+0x3c4>)
 8003c94:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003c96:	4884      	ldr	r0, [pc, #528]	; (8003ea8 <loadMenuTexts+0x3c8>)
 8003c98:	f7fc fd60 	bl	800075c <copyText>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4a83      	ldr	r2, [pc, #524]	; (8003eac <loadMenuTexts+0x3cc>)
 8003ca0:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003ca2:	4883      	ldr	r0, [pc, #524]	; (8003eb0 <loadMenuTexts+0x3d0>)
 8003ca4:	f7fc fd5a 	bl	800075c <copyText>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a82      	ldr	r2, [pc, #520]	; (8003eb4 <loadMenuTexts+0x3d4>)
 8003cac:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003cae:	4882      	ldr	r0, [pc, #520]	; (8003eb8 <loadMenuTexts+0x3d8>)
 8003cb0:	f7fc fd54 	bl	800075c <copyText>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <loadMenuTexts+0x3dc>)
 8003cb8:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003cba:	4881      	ldr	r0, [pc, #516]	; (8003ec0 <loadMenuTexts+0x3e0>)
 8003cbc:	f7fc fd4e 	bl	800075c <copyText>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4a80      	ldr	r2, [pc, #512]	; (8003ec4 <loadMenuTexts+0x3e4>)
 8003cc4:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003cc6:	4880      	ldr	r0, [pc, #512]	; (8003ec8 <loadMenuTexts+0x3e8>)
 8003cc8:	f7fc fd48 	bl	800075c <copyText>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4a7f      	ldr	r2, [pc, #508]	; (8003ecc <loadMenuTexts+0x3ec>)
 8003cd0:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003cd2:	487f      	ldr	r0, [pc, #508]	; (8003ed0 <loadMenuTexts+0x3f0>)
 8003cd4:	f7fc fd42 	bl	800075c <copyText>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4a7e      	ldr	r2, [pc, #504]	; (8003ed4 <loadMenuTexts+0x3f4>)
 8003cdc:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003cde:	487e      	ldr	r0, [pc, #504]	; (8003ed8 <loadMenuTexts+0x3f8>)
 8003ce0:	f7fc fd3c 	bl	800075c <copyText>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <loadMenuTexts+0x3fc>)
 8003ce8:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003cea:	487d      	ldr	r0, [pc, #500]	; (8003ee0 <loadMenuTexts+0x400>)
 8003cec:	f7fc fd36 	bl	800075c <copyText>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a7c      	ldr	r2, [pc, #496]	; (8003ee4 <loadMenuTexts+0x404>)
 8003cf4:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003cf6:	487c      	ldr	r0, [pc, #496]	; (8003ee8 <loadMenuTexts+0x408>)
 8003cf8:	f7fc fd30 	bl	800075c <copyText>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4a7b      	ldr	r2, [pc, #492]	; (8003eec <loadMenuTexts+0x40c>)
 8003d00:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003d02:	487b      	ldr	r0, [pc, #492]	; (8003ef0 <loadMenuTexts+0x410>)
 8003d04:	f7fc fd2a 	bl	800075c <copyText>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a7a      	ldr	r2, [pc, #488]	; (8003ef4 <loadMenuTexts+0x414>)
 8003d0c:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003d0e:	487a      	ldr	r0, [pc, #488]	; (8003ef8 <loadMenuTexts+0x418>)
 8003d10:	f7fc fd24 	bl	800075c <copyText>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4a79      	ldr	r2, [pc, #484]	; (8003efc <loadMenuTexts+0x41c>)
 8003d18:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003d1a:	4879      	ldr	r0, [pc, #484]	; (8003f00 <loadMenuTexts+0x420>)
 8003d1c:	f7fc fd1e 	bl	800075c <copyText>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4a78      	ldr	r2, [pc, #480]	; (8003f04 <loadMenuTexts+0x424>)
 8003d24:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003d26:	4878      	ldr	r0, [pc, #480]	; (8003f08 <loadMenuTexts+0x428>)
 8003d28:	f7fc fd18 	bl	800075c <copyText>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4a77      	ldr	r2, [pc, #476]	; (8003f0c <loadMenuTexts+0x42c>)
 8003d30:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003d32:	4877      	ldr	r0, [pc, #476]	; (8003f10 <loadMenuTexts+0x430>)
 8003d34:	f7fc fd12 	bl	800075c <copyText>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4a76      	ldr	r2, [pc, #472]	; (8003f14 <loadMenuTexts+0x434>)
 8003d3c:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003d3e:	4876      	ldr	r0, [pc, #472]	; (8003f18 <loadMenuTexts+0x438>)
 8003d40:	f7fc fd0c 	bl	800075c <copyText>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4a75      	ldr	r2, [pc, #468]	; (8003f1c <loadMenuTexts+0x43c>)
 8003d48:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003d4a:	4875      	ldr	r0, [pc, #468]	; (8003f20 <loadMenuTexts+0x440>)
 8003d4c:	f7fc fd06 	bl	800075c <copyText>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4a74      	ldr	r2, [pc, #464]	; (8003f24 <loadMenuTexts+0x444>)
 8003d54:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003d56:	4874      	ldr	r0, [pc, #464]	; (8003f28 <loadMenuTexts+0x448>)
 8003d58:	f7fc fd00 	bl	800075c <copyText>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4a73      	ldr	r2, [pc, #460]	; (8003f2c <loadMenuTexts+0x44c>)
 8003d60:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003d62:	4873      	ldr	r0, [pc, #460]	; (8003f30 <loadMenuTexts+0x450>)
 8003d64:	f7fc fcfa 	bl	800075c <copyText>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a72      	ldr	r2, [pc, #456]	; (8003f34 <loadMenuTexts+0x454>)
 8003d6c:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003d6e:	4872      	ldr	r0, [pc, #456]	; (8003f38 <loadMenuTexts+0x458>)
 8003d70:	f7fc fcf4 	bl	800075c <copyText>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a71      	ldr	r2, [pc, #452]	; (8003f3c <loadMenuTexts+0x45c>)
 8003d78:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003d7a:	4871      	ldr	r0, [pc, #452]	; (8003f40 <loadMenuTexts+0x460>)
 8003d7c:	f7fc fcee 	bl	800075c <copyText>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4a70      	ldr	r2, [pc, #448]	; (8003f44 <loadMenuTexts+0x464>)
 8003d84:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003d86:	4870      	ldr	r0, [pc, #448]	; (8003f48 <loadMenuTexts+0x468>)
 8003d88:	f7fc fce8 	bl	800075c <copyText>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	e0dd      	b.n	8003f4c <loadMenuTexts+0x46c>
 8003d90:	20000000 	.word	0x20000000
 8003d94:	20000b88 	.word	0x20000b88
 8003d98:	20000010 	.word	0x20000010
 8003d9c:	20000b8c 	.word	0x20000b8c
 8003da0:	20000020 	.word	0x20000020
 8003da4:	20000be4 	.word	0x20000be4
 8003da8:	20000030 	.word	0x20000030
 8003dac:	20000c14 	.word	0x20000c14
 8003db0:	20000040 	.word	0x20000040
 8003db4:	20000c1c 	.word	0x20000c1c
 8003db8:	20000050 	.word	0x20000050
 8003dbc:	20000c94 	.word	0x20000c94
 8003dc0:	20000060 	.word	0x20000060
 8003dc4:	20000c98 	.word	0x20000c98
 8003dc8:	20000070 	.word	0x20000070
 8003dcc:	20000b90 	.word	0x20000b90
 8003dd0:	20000080 	.word	0x20000080
 8003dd4:	20000b94 	.word	0x20000b94
 8003dd8:	20000090 	.word	0x20000090
 8003ddc:	20000b98 	.word	0x20000b98
 8003de0:	200000a0 	.word	0x200000a0
 8003de4:	20000b9c 	.word	0x20000b9c
 8003de8:	200000b0 	.word	0x200000b0
 8003dec:	20000ba0 	.word	0x20000ba0
 8003df0:	200000c0 	.word	0x200000c0
 8003df4:	20000ba4 	.word	0x20000ba4
 8003df8:	200000d0 	.word	0x200000d0
 8003dfc:	20000ba8 	.word	0x20000ba8
 8003e00:	200000e0 	.word	0x200000e0
 8003e04:	20000bac 	.word	0x20000bac
 8003e08:	200000f0 	.word	0x200000f0
 8003e0c:	20000bb0 	.word	0x20000bb0
 8003e10:	20000100 	.word	0x20000100
 8003e14:	20000bb4 	.word	0x20000bb4
 8003e18:	20000110 	.word	0x20000110
 8003e1c:	20000bb8 	.word	0x20000bb8
 8003e20:	20000120 	.word	0x20000120
 8003e24:	20000bbc 	.word	0x20000bbc
 8003e28:	20000130 	.word	0x20000130
 8003e2c:	20000bc0 	.word	0x20000bc0
 8003e30:	20000140 	.word	0x20000140
 8003e34:	20000bc4 	.word	0x20000bc4
 8003e38:	20000150 	.word	0x20000150
 8003e3c:	20000bc8 	.word	0x20000bc8
 8003e40:	20000160 	.word	0x20000160
 8003e44:	20000bcc 	.word	0x20000bcc
 8003e48:	20000170 	.word	0x20000170
 8003e4c:	20000bd0 	.word	0x20000bd0
 8003e50:	20000180 	.word	0x20000180
 8003e54:	20000bd4 	.word	0x20000bd4
 8003e58:	20000190 	.word	0x20000190
 8003e5c:	20000bd8 	.word	0x20000bd8
 8003e60:	200001a0 	.word	0x200001a0
 8003e64:	20000bdc 	.word	0x20000bdc
 8003e68:	200001b0 	.word	0x200001b0
 8003e6c:	20000be0 	.word	0x20000be0
 8003e70:	200001c0 	.word	0x200001c0
 8003e74:	20000be8 	.word	0x20000be8
 8003e78:	200001d0 	.word	0x200001d0
 8003e7c:	20000bec 	.word	0x20000bec
 8003e80:	200001e0 	.word	0x200001e0
 8003e84:	20000bf0 	.word	0x20000bf0
 8003e88:	200001f0 	.word	0x200001f0
 8003e8c:	20000bf4 	.word	0x20000bf4
 8003e90:	20000200 	.word	0x20000200
 8003e94:	20000bf8 	.word	0x20000bf8
 8003e98:	20000210 	.word	0x20000210
 8003e9c:	20000bfc 	.word	0x20000bfc
 8003ea0:	20000220 	.word	0x20000220
 8003ea4:	20000c00 	.word	0x20000c00
 8003ea8:	20000230 	.word	0x20000230
 8003eac:	20000c04 	.word	0x20000c04
 8003eb0:	20000240 	.word	0x20000240
 8003eb4:	20000c08 	.word	0x20000c08
 8003eb8:	20000250 	.word	0x20000250
 8003ebc:	20000c0c 	.word	0x20000c0c
 8003ec0:	20000260 	.word	0x20000260
 8003ec4:	20000c10 	.word	0x20000c10
 8003ec8:	20000270 	.word	0x20000270
 8003ecc:	20000c18 	.word	0x20000c18
 8003ed0:	20000280 	.word	0x20000280
 8003ed4:	20000c20 	.word	0x20000c20
 8003ed8:	20000290 	.word	0x20000290
 8003edc:	20000c24 	.word	0x20000c24
 8003ee0:	200002a0 	.word	0x200002a0
 8003ee4:	20000c28 	.word	0x20000c28
 8003ee8:	200002b0 	.word	0x200002b0
 8003eec:	20000c2c 	.word	0x20000c2c
 8003ef0:	200002c0 	.word	0x200002c0
 8003ef4:	20000c30 	.word	0x20000c30
 8003ef8:	200002d0 	.word	0x200002d0
 8003efc:	20000c34 	.word	0x20000c34
 8003f00:	200002e0 	.word	0x200002e0
 8003f04:	20000c38 	.word	0x20000c38
 8003f08:	200002f0 	.word	0x200002f0
 8003f0c:	20000c3c 	.word	0x20000c3c
 8003f10:	20000300 	.word	0x20000300
 8003f14:	20000c40 	.word	0x20000c40
 8003f18:	20000310 	.word	0x20000310
 8003f1c:	20000c44 	.word	0x20000c44
 8003f20:	20000320 	.word	0x20000320
 8003f24:	20000c48 	.word	0x20000c48
 8003f28:	20000330 	.word	0x20000330
 8003f2c:	20000c4c 	.word	0x20000c4c
 8003f30:	20000340 	.word	0x20000340
 8003f34:	20000c50 	.word	0x20000c50
 8003f38:	20000350 	.word	0x20000350
 8003f3c:	20000c54 	.word	0x20000c54
 8003f40:	20000360 	.word	0x20000360
 8003f44:	20000c58 	.word	0x20000c58
 8003f48:	20000370 	.word	0x20000370
 8003f4c:	4a3d      	ldr	r2, [pc, #244]	; (8004044 <loadMenuTexts+0x564>)
 8003f4e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003f50:	483d      	ldr	r0, [pc, #244]	; (8004048 <loadMenuTexts+0x568>)
 8003f52:	f7fc fc03 	bl	800075c <copyText>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a3c      	ldr	r2, [pc, #240]	; (800404c <loadMenuTexts+0x56c>)
 8003f5a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003f5c:	483c      	ldr	r0, [pc, #240]	; (8004050 <loadMenuTexts+0x570>)
 8003f5e:	f7fc fbfd 	bl	800075c <copyText>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a3b      	ldr	r2, [pc, #236]	; (8004054 <loadMenuTexts+0x574>)
 8003f66:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003f68:	483b      	ldr	r0, [pc, #236]	; (8004058 <loadMenuTexts+0x578>)
 8003f6a:	f7fc fbf7 	bl	800075c <copyText>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a3a      	ldr	r2, [pc, #232]	; (800405c <loadMenuTexts+0x57c>)
 8003f72:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003f74:	483a      	ldr	r0, [pc, #232]	; (8004060 <loadMenuTexts+0x580>)
 8003f76:	f7fc fbf1 	bl	800075c <copyText>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a39      	ldr	r2, [pc, #228]	; (8004064 <loadMenuTexts+0x584>)
 8003f7e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003f80:	4839      	ldr	r0, [pc, #228]	; (8004068 <loadMenuTexts+0x588>)
 8003f82:	f7fc fbeb 	bl	800075c <copyText>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a38      	ldr	r2, [pc, #224]	; (800406c <loadMenuTexts+0x58c>)
 8003f8a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003f8c:	4838      	ldr	r0, [pc, #224]	; (8004070 <loadMenuTexts+0x590>)
 8003f8e:	f7fc fbe5 	bl	800075c <copyText>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a37      	ldr	r2, [pc, #220]	; (8004074 <loadMenuTexts+0x594>)
 8003f96:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003f98:	4837      	ldr	r0, [pc, #220]	; (8004078 <loadMenuTexts+0x598>)
 8003f9a:	f7fc fbdf 	bl	800075c <copyText>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a36      	ldr	r2, [pc, #216]	; (800407c <loadMenuTexts+0x59c>)
 8003fa2:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003fa4:	4836      	ldr	r0, [pc, #216]	; (8004080 <loadMenuTexts+0x5a0>)
 8003fa6:	f7fc fbd9 	bl	800075c <copyText>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a35      	ldr	r2, [pc, #212]	; (8004084 <loadMenuTexts+0x5a4>)
 8003fae:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003fb0:	4835      	ldr	r0, [pc, #212]	; (8004088 <loadMenuTexts+0x5a8>)
 8003fb2:	f7fc fbd3 	bl	800075c <copyText>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <loadMenuTexts+0x5ac>)
 8003fba:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003fbc:	4834      	ldr	r0, [pc, #208]	; (8004090 <loadMenuTexts+0x5b0>)
 8003fbe:	f7fc fbcd 	bl	800075c <copyText>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a33      	ldr	r2, [pc, #204]	; (8004094 <loadMenuTexts+0x5b4>)
 8003fc6:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003fc8:	4833      	ldr	r0, [pc, #204]	; (8004098 <loadMenuTexts+0x5b8>)
 8003fca:	f7fc fbc7 	bl	800075c <copyText>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a32      	ldr	r2, [pc, #200]	; (800409c <loadMenuTexts+0x5bc>)
 8003fd2:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003fd4:	4832      	ldr	r0, [pc, #200]	; (80040a0 <loadMenuTexts+0x5c0>)
 8003fd6:	f7fc fbc1 	bl	800075c <copyText>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a31      	ldr	r2, [pc, #196]	; (80040a4 <loadMenuTexts+0x5c4>)
 8003fde:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003fe0:	4831      	ldr	r0, [pc, #196]	; (80040a8 <loadMenuTexts+0x5c8>)
 8003fe2:	f7fc fbbb 	bl	800075c <copyText>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a30      	ldr	r2, [pc, #192]	; (80040ac <loadMenuTexts+0x5cc>)
 8003fea:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003fec:	4830      	ldr	r0, [pc, #192]	; (80040b0 <loadMenuTexts+0x5d0>)
 8003fee:	f7fc fbb5 	bl	800075c <copyText>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <loadMenuTexts+0x5d4>)
 8003ff6:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003ff8:	482f      	ldr	r0, [pc, #188]	; (80040b8 <loadMenuTexts+0x5d8>)
 8003ffa:	f7fc fbaf 	bl	800075c <copyText>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <loadMenuTexts+0x5dc>)
 8004002:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8004004:	482e      	ldr	r0, [pc, #184]	; (80040c0 <loadMenuTexts+0x5e0>)
 8004006:	f7fc fba9 	bl	800075c <copyText>
 800400a:	4603      	mov	r3, r0
 800400c:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <loadMenuTexts+0x5e4>)
 800400e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8004010:	482d      	ldr	r0, [pc, #180]	; (80040c8 <loadMenuTexts+0x5e8>)
 8004012:	f7fc fba3 	bl	800075c <copyText>
 8004016:	4603      	mov	r3, r0
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <loadMenuTexts+0x5ec>)
 800401a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 800401c:	482c      	ldr	r0, [pc, #176]	; (80040d0 <loadMenuTexts+0x5f0>)
 800401e:	f7fc fb9d 	bl	800075c <copyText>
 8004022:	4603      	mov	r3, r0
 8004024:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <loadMenuTexts+0x5f4>)
 8004026:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8004028:	482b      	ldr	r0, [pc, #172]	; (80040d8 <loadMenuTexts+0x5f8>)
 800402a:	f7fc fb97 	bl	800075c <copyText>
 800402e:	4603      	mov	r3, r0
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <loadMenuTexts+0x5fc>)
 8004032:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8004034:	482a      	ldr	r0, [pc, #168]	; (80040e0 <loadMenuTexts+0x600>)
 8004036:	f7fc fb91 	bl	800075c <copyText>
 800403a:	4603      	mov	r3, r0
 800403c:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <loadMenuTexts+0x604>)
 800403e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8004040:	e2d3      	b.n	80045ea <loadMenuTexts+0xb0a>
 8004042:	bf00      	nop
 8004044:	20000c5c 	.word	0x20000c5c
 8004048:	20000380 	.word	0x20000380
 800404c:	20000c60 	.word	0x20000c60
 8004050:	20000390 	.word	0x20000390
 8004054:	20000c64 	.word	0x20000c64
 8004058:	200003a0 	.word	0x200003a0
 800405c:	20000c68 	.word	0x20000c68
 8004060:	200003b0 	.word	0x200003b0
 8004064:	20000c6c 	.word	0x20000c6c
 8004068:	200003c0 	.word	0x200003c0
 800406c:	20000c70 	.word	0x20000c70
 8004070:	200003d0 	.word	0x200003d0
 8004074:	20000c74 	.word	0x20000c74
 8004078:	200003e0 	.word	0x200003e0
 800407c:	20000c78 	.word	0x20000c78
 8004080:	200003f0 	.word	0x200003f0
 8004084:	20000c7c 	.word	0x20000c7c
 8004088:	20000400 	.word	0x20000400
 800408c:	20000c80 	.word	0x20000c80
 8004090:	20000410 	.word	0x20000410
 8004094:	20000c84 	.word	0x20000c84
 8004098:	20000420 	.word	0x20000420
 800409c:	20000c88 	.word	0x20000c88
 80040a0:	20000430 	.word	0x20000430
 80040a4:	20000c8c 	.word	0x20000c8c
 80040a8:	20000440 	.word	0x20000440
 80040ac:	20000c90 	.word	0x20000c90
 80040b0:	20000450 	.word	0x20000450
 80040b4:	20000c9c 	.word	0x20000c9c
 80040b8:	20000460 	.word	0x20000460
 80040bc:	20000ca0 	.word	0x20000ca0
 80040c0:	20000470 	.word	0x20000470
 80040c4:	20000ca4 	.word	0x20000ca4
 80040c8:	20000480 	.word	0x20000480
 80040cc:	20000ca8 	.word	0x20000ca8
 80040d0:	20000490 	.word	0x20000490
 80040d4:	20000cac 	.word	0x20000cac
 80040d8:	200004a0 	.word	0x200004a0
 80040dc:	20000cb0 	.word	0x20000cb0
 80040e0:	200004b0 	.word	0x200004b0
 80040e4:	20000cb4 	.word	0x20000cb4
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80040e8:	48a9      	ldr	r0, [pc, #676]	; (8004390 <loadMenuTexts+0x8b0>)
 80040ea:	f7fc fb37 	bl	800075c <copyText>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4aa8      	ldr	r2, [pc, #672]	; (8004394 <loadMenuTexts+0x8b4>)
 80040f2:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80040f4:	48a8      	ldr	r0, [pc, #672]	; (8004398 <loadMenuTexts+0x8b8>)
 80040f6:	f7fc fb31 	bl	800075c <copyText>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4aa7      	ldr	r2, [pc, #668]	; (800439c <loadMenuTexts+0x8bc>)
 80040fe:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8004100:	48a7      	ldr	r0, [pc, #668]	; (80043a0 <loadMenuTexts+0x8c0>)
 8004102:	f7fc fb2b 	bl	800075c <copyText>
 8004106:	4603      	mov	r3, r0
 8004108:	4aa6      	ldr	r2, [pc, #664]	; (80043a4 <loadMenuTexts+0x8c4>)
 800410a:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 800410c:	48a6      	ldr	r0, [pc, #664]	; (80043a8 <loadMenuTexts+0x8c8>)
 800410e:	f7fc fb25 	bl	800075c <copyText>
 8004112:	4603      	mov	r3, r0
 8004114:	4aa5      	ldr	r2, [pc, #660]	; (80043ac <loadMenuTexts+0x8cc>)
 8004116:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8004118:	48a5      	ldr	r0, [pc, #660]	; (80043b0 <loadMenuTexts+0x8d0>)
 800411a:	f7fc fb1f 	bl	800075c <copyText>
 800411e:	4603      	mov	r3, r0
 8004120:	4aa4      	ldr	r2, [pc, #656]	; (80043b4 <loadMenuTexts+0x8d4>)
 8004122:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8004124:	48a4      	ldr	r0, [pc, #656]	; (80043b8 <loadMenuTexts+0x8d8>)
 8004126:	f7fc fb19 	bl	800075c <copyText>
 800412a:	4603      	mov	r3, r0
 800412c:	4aa3      	ldr	r2, [pc, #652]	; (80043bc <loadMenuTexts+0x8dc>)
 800412e:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8004130:	48a3      	ldr	r0, [pc, #652]	; (80043c0 <loadMenuTexts+0x8e0>)
 8004132:	f7fc fb13 	bl	800075c <copyText>
 8004136:	4603      	mov	r3, r0
 8004138:	4aa2      	ldr	r2, [pc, #648]	; (80043c4 <loadMenuTexts+0x8e4>)
 800413a:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 800413c:	48a2      	ldr	r0, [pc, #648]	; (80043c8 <loadMenuTexts+0x8e8>)
 800413e:	f7fc fb0d 	bl	800075c <copyText>
 8004142:	4603      	mov	r3, r0
 8004144:	4aa1      	ldr	r2, [pc, #644]	; (80043cc <loadMenuTexts+0x8ec>)
 8004146:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8004148:	48a1      	ldr	r0, [pc, #644]	; (80043d0 <loadMenuTexts+0x8f0>)
 800414a:	f7fc fb07 	bl	800075c <copyText>
 800414e:	4603      	mov	r3, r0
 8004150:	4aa0      	ldr	r2, [pc, #640]	; (80043d4 <loadMenuTexts+0x8f4>)
 8004152:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8004154:	48a0      	ldr	r0, [pc, #640]	; (80043d8 <loadMenuTexts+0x8f8>)
 8004156:	f7fc fb01 	bl	800075c <copyText>
 800415a:	4603      	mov	r3, r0
 800415c:	4a9f      	ldr	r2, [pc, #636]	; (80043dc <loadMenuTexts+0x8fc>)
 800415e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8004160:	489f      	ldr	r0, [pc, #636]	; (80043e0 <loadMenuTexts+0x900>)
 8004162:	f7fc fafb 	bl	800075c <copyText>
 8004166:	4603      	mov	r3, r0
 8004168:	4a9e      	ldr	r2, [pc, #632]	; (80043e4 <loadMenuTexts+0x904>)
 800416a:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 800416c:	489e      	ldr	r0, [pc, #632]	; (80043e8 <loadMenuTexts+0x908>)
 800416e:	f7fc faf5 	bl	800075c <copyText>
 8004172:	4603      	mov	r3, r0
 8004174:	4a9d      	ldr	r2, [pc, #628]	; (80043ec <loadMenuTexts+0x90c>)
 8004176:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8004178:	489d      	ldr	r0, [pc, #628]	; (80043f0 <loadMenuTexts+0x910>)
 800417a:	f7fc faef 	bl	800075c <copyText>
 800417e:	4603      	mov	r3, r0
 8004180:	4a9c      	ldr	r2, [pc, #624]	; (80043f4 <loadMenuTexts+0x914>)
 8004182:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8004184:	489c      	ldr	r0, [pc, #624]	; (80043f8 <loadMenuTexts+0x918>)
 8004186:	f7fc fae9 	bl	800075c <copyText>
 800418a:	4603      	mov	r3, r0
 800418c:	4a9b      	ldr	r2, [pc, #620]	; (80043fc <loadMenuTexts+0x91c>)
 800418e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8004190:	489b      	ldr	r0, [pc, #620]	; (8004400 <loadMenuTexts+0x920>)
 8004192:	f7fc fae3 	bl	800075c <copyText>
 8004196:	4603      	mov	r3, r0
 8004198:	4a9a      	ldr	r2, [pc, #616]	; (8004404 <loadMenuTexts+0x924>)
 800419a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 800419c:	489a      	ldr	r0, [pc, #616]	; (8004408 <loadMenuTexts+0x928>)
 800419e:	f7fc fadd 	bl	800075c <copyText>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4a99      	ldr	r2, [pc, #612]	; (800440c <loadMenuTexts+0x92c>)
 80041a6:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80041a8:	4899      	ldr	r0, [pc, #612]	; (8004410 <loadMenuTexts+0x930>)
 80041aa:	f7fc fad7 	bl	800075c <copyText>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4a98      	ldr	r2, [pc, #608]	; (8004414 <loadMenuTexts+0x934>)
 80041b2:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80041b4:	4898      	ldr	r0, [pc, #608]	; (8004418 <loadMenuTexts+0x938>)
 80041b6:	f7fc fad1 	bl	800075c <copyText>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4a97      	ldr	r2, [pc, #604]	; (800441c <loadMenuTexts+0x93c>)
 80041be:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80041c0:	4897      	ldr	r0, [pc, #604]	; (8004420 <loadMenuTexts+0x940>)
 80041c2:	f7fc facb 	bl	800075c <copyText>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4a96      	ldr	r2, [pc, #600]	; (8004424 <loadMenuTexts+0x944>)
 80041ca:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80041cc:	4896      	ldr	r0, [pc, #600]	; (8004428 <loadMenuTexts+0x948>)
 80041ce:	f7fc fac5 	bl	800075c <copyText>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4a95      	ldr	r2, [pc, #596]	; (800442c <loadMenuTexts+0x94c>)
 80041d6:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80041d8:	4895      	ldr	r0, [pc, #596]	; (8004430 <loadMenuTexts+0x950>)
 80041da:	f7fc fabf 	bl	800075c <copyText>
 80041de:	4603      	mov	r3, r0
 80041e0:	4a94      	ldr	r2, [pc, #592]	; (8004434 <loadMenuTexts+0x954>)
 80041e2:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80041e4:	4894      	ldr	r0, [pc, #592]	; (8004438 <loadMenuTexts+0x958>)
 80041e6:	f7fc fab9 	bl	800075c <copyText>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a93      	ldr	r2, [pc, #588]	; (800443c <loadMenuTexts+0x95c>)
 80041ee:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80041f0:	4893      	ldr	r0, [pc, #588]	; (8004440 <loadMenuTexts+0x960>)
 80041f2:	f7fc fab3 	bl	800075c <copyText>
 80041f6:	4603      	mov	r3, r0
 80041f8:	4a92      	ldr	r2, [pc, #584]	; (8004444 <loadMenuTexts+0x964>)
 80041fa:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80041fc:	4892      	ldr	r0, [pc, #584]	; (8004448 <loadMenuTexts+0x968>)
 80041fe:	f7fc faad 	bl	800075c <copyText>
 8004202:	4603      	mov	r3, r0
 8004204:	4a91      	ldr	r2, [pc, #580]	; (800444c <loadMenuTexts+0x96c>)
 8004206:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8004208:	4891      	ldr	r0, [pc, #580]	; (8004450 <loadMenuTexts+0x970>)
 800420a:	f7fc faa7 	bl	800075c <copyText>
 800420e:	4603      	mov	r3, r0
 8004210:	4a90      	ldr	r2, [pc, #576]	; (8004454 <loadMenuTexts+0x974>)
 8004212:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8004214:	4890      	ldr	r0, [pc, #576]	; (8004458 <loadMenuTexts+0x978>)
 8004216:	f7fc faa1 	bl	800075c <copyText>
 800421a:	4603      	mov	r3, r0
 800421c:	4a8f      	ldr	r2, [pc, #572]	; (800445c <loadMenuTexts+0x97c>)
 800421e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8004220:	488f      	ldr	r0, [pc, #572]	; (8004460 <loadMenuTexts+0x980>)
 8004222:	f7fc fa9b 	bl	800075c <copyText>
 8004226:	4603      	mov	r3, r0
 8004228:	4a8e      	ldr	r2, [pc, #568]	; (8004464 <loadMenuTexts+0x984>)
 800422a:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 800422c:	488e      	ldr	r0, [pc, #568]	; (8004468 <loadMenuTexts+0x988>)
 800422e:	f7fc fa95 	bl	800075c <copyText>
 8004232:	4603      	mov	r3, r0
 8004234:	4a8d      	ldr	r2, [pc, #564]	; (800446c <loadMenuTexts+0x98c>)
 8004236:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004238:	488d      	ldr	r0, [pc, #564]	; (8004470 <loadMenuTexts+0x990>)
 800423a:	f7fc fa8f 	bl	800075c <copyText>
 800423e:	4603      	mov	r3, r0
 8004240:	4a8c      	ldr	r2, [pc, #560]	; (8004474 <loadMenuTexts+0x994>)
 8004242:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8004244:	488c      	ldr	r0, [pc, #560]	; (8004478 <loadMenuTexts+0x998>)
 8004246:	f7fc fa89 	bl	800075c <copyText>
 800424a:	4603      	mov	r3, r0
 800424c:	4a8b      	ldr	r2, [pc, #556]	; (800447c <loadMenuTexts+0x99c>)
 800424e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004250:	488b      	ldr	r0, [pc, #556]	; (8004480 <loadMenuTexts+0x9a0>)
 8004252:	f7fc fa83 	bl	800075c <copyText>
 8004256:	4603      	mov	r3, r0
 8004258:	4a8a      	ldr	r2, [pc, #552]	; (8004484 <loadMenuTexts+0x9a4>)
 800425a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 800425c:	488a      	ldr	r0, [pc, #552]	; (8004488 <loadMenuTexts+0x9a8>)
 800425e:	f7fc fa7d 	bl	800075c <copyText>
 8004262:	4603      	mov	r3, r0
 8004264:	4a89      	ldr	r2, [pc, #548]	; (800448c <loadMenuTexts+0x9ac>)
 8004266:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004268:	4889      	ldr	r0, [pc, #548]	; (8004490 <loadMenuTexts+0x9b0>)
 800426a:	f7fc fa77 	bl	800075c <copyText>
 800426e:	4603      	mov	r3, r0
 8004270:	4a88      	ldr	r2, [pc, #544]	; (8004494 <loadMenuTexts+0x9b4>)
 8004272:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004274:	4888      	ldr	r0, [pc, #544]	; (8004498 <loadMenuTexts+0x9b8>)
 8004276:	f7fc fa71 	bl	800075c <copyText>
 800427a:	4603      	mov	r3, r0
 800427c:	4a87      	ldr	r2, [pc, #540]	; (800449c <loadMenuTexts+0x9bc>)
 800427e:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8004280:	4887      	ldr	r0, [pc, #540]	; (80044a0 <loadMenuTexts+0x9c0>)
 8004282:	f7fc fa6b 	bl	800075c <copyText>
 8004286:	4603      	mov	r3, r0
 8004288:	4a86      	ldr	r2, [pc, #536]	; (80044a4 <loadMenuTexts+0x9c4>)
 800428a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 800428c:	4886      	ldr	r0, [pc, #536]	; (80044a8 <loadMenuTexts+0x9c8>)
 800428e:	f7fc fa65 	bl	800075c <copyText>
 8004292:	4603      	mov	r3, r0
 8004294:	4a85      	ldr	r2, [pc, #532]	; (80044ac <loadMenuTexts+0x9cc>)
 8004296:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004298:	4885      	ldr	r0, [pc, #532]	; (80044b0 <loadMenuTexts+0x9d0>)
 800429a:	f7fc fa5f 	bl	800075c <copyText>
 800429e:	4603      	mov	r3, r0
 80042a0:	4a84      	ldr	r2, [pc, #528]	; (80044b4 <loadMenuTexts+0x9d4>)
 80042a2:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80042a4:	4884      	ldr	r0, [pc, #528]	; (80044b8 <loadMenuTexts+0x9d8>)
 80042a6:	f7fc fa59 	bl	800075c <copyText>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4a83      	ldr	r2, [pc, #524]	; (80044bc <loadMenuTexts+0x9dc>)
 80042ae:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80042b0:	4883      	ldr	r0, [pc, #524]	; (80044c0 <loadMenuTexts+0x9e0>)
 80042b2:	f7fc fa53 	bl	800075c <copyText>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4a82      	ldr	r2, [pc, #520]	; (80044c4 <loadMenuTexts+0x9e4>)
 80042ba:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80042bc:	4882      	ldr	r0, [pc, #520]	; (80044c8 <loadMenuTexts+0x9e8>)
 80042be:	f7fc fa4d 	bl	800075c <copyText>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4a81      	ldr	r2, [pc, #516]	; (80044cc <loadMenuTexts+0x9ec>)
 80042c6:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80042c8:	4881      	ldr	r0, [pc, #516]	; (80044d0 <loadMenuTexts+0x9f0>)
 80042ca:	f7fc fa47 	bl	800075c <copyText>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4a80      	ldr	r2, [pc, #512]	; (80044d4 <loadMenuTexts+0x9f4>)
 80042d2:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80042d4:	4880      	ldr	r0, [pc, #512]	; (80044d8 <loadMenuTexts+0x9f8>)
 80042d6:	f7fc fa41 	bl	800075c <copyText>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a7f      	ldr	r2, [pc, #508]	; (80044dc <loadMenuTexts+0x9fc>)
 80042de:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80042e0:	487f      	ldr	r0, [pc, #508]	; (80044e0 <loadMenuTexts+0xa00>)
 80042e2:	f7fc fa3b 	bl	800075c <copyText>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a7e      	ldr	r2, [pc, #504]	; (80044e4 <loadMenuTexts+0xa04>)
 80042ea:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80042ec:	487e      	ldr	r0, [pc, #504]	; (80044e8 <loadMenuTexts+0xa08>)
 80042ee:	f7fc fa35 	bl	800075c <copyText>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a7d      	ldr	r2, [pc, #500]	; (80044ec <loadMenuTexts+0xa0c>)
 80042f6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80042f8:	487d      	ldr	r0, [pc, #500]	; (80044f0 <loadMenuTexts+0xa10>)
 80042fa:	f7fc fa2f 	bl	800075c <copyText>
 80042fe:	4603      	mov	r3, r0
 8004300:	4a7c      	ldr	r2, [pc, #496]	; (80044f4 <loadMenuTexts+0xa14>)
 8004302:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8004304:	487c      	ldr	r0, [pc, #496]	; (80044f8 <loadMenuTexts+0xa18>)
 8004306:	f7fc fa29 	bl	800075c <copyText>
 800430a:	4603      	mov	r3, r0
 800430c:	4a7b      	ldr	r2, [pc, #492]	; (80044fc <loadMenuTexts+0xa1c>)
 800430e:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004310:	487b      	ldr	r0, [pc, #492]	; (8004500 <loadMenuTexts+0xa20>)
 8004312:	f7fc fa23 	bl	800075c <copyText>
 8004316:	4603      	mov	r3, r0
 8004318:	4a7a      	ldr	r2, [pc, #488]	; (8004504 <loadMenuTexts+0xa24>)
 800431a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800431c:	487a      	ldr	r0, [pc, #488]	; (8004508 <loadMenuTexts+0xa28>)
 800431e:	f7fc fa1d 	bl	800075c <copyText>
 8004322:	4603      	mov	r3, r0
 8004324:	4a79      	ldr	r2, [pc, #484]	; (800450c <loadMenuTexts+0xa2c>)
 8004326:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004328:	4879      	ldr	r0, [pc, #484]	; (8004510 <loadMenuTexts+0xa30>)
 800432a:	f7fc fa17 	bl	800075c <copyText>
 800432e:	4603      	mov	r3, r0
 8004330:	4a78      	ldr	r2, [pc, #480]	; (8004514 <loadMenuTexts+0xa34>)
 8004332:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004334:	4878      	ldr	r0, [pc, #480]	; (8004518 <loadMenuTexts+0xa38>)
 8004336:	f7fc fa11 	bl	800075c <copyText>
 800433a:	4603      	mov	r3, r0
 800433c:	4a77      	ldr	r2, [pc, #476]	; (800451c <loadMenuTexts+0xa3c>)
 800433e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004340:	4877      	ldr	r0, [pc, #476]	; (8004520 <loadMenuTexts+0xa40>)
 8004342:	f7fc fa0b 	bl	800075c <copyText>
 8004346:	4603      	mov	r3, r0
 8004348:	4a76      	ldr	r2, [pc, #472]	; (8004524 <loadMenuTexts+0xa44>)
 800434a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800434c:	4876      	ldr	r0, [pc, #472]	; (8004528 <loadMenuTexts+0xa48>)
 800434e:	f7fc fa05 	bl	800075c <copyText>
 8004352:	4603      	mov	r3, r0
 8004354:	4a75      	ldr	r2, [pc, #468]	; (800452c <loadMenuTexts+0xa4c>)
 8004356:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004358:	4875      	ldr	r0, [pc, #468]	; (8004530 <loadMenuTexts+0xa50>)
 800435a:	f7fc f9ff 	bl	800075c <copyText>
 800435e:	4603      	mov	r3, r0
 8004360:	4a74      	ldr	r2, [pc, #464]	; (8004534 <loadMenuTexts+0xa54>)
 8004362:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004364:	4874      	ldr	r0, [pc, #464]	; (8004538 <loadMenuTexts+0xa58>)
 8004366:	f7fc f9f9 	bl	800075c <copyText>
 800436a:	4603      	mov	r3, r0
 800436c:	4a73      	ldr	r2, [pc, #460]	; (800453c <loadMenuTexts+0xa5c>)
 800436e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004370:	4873      	ldr	r0, [pc, #460]	; (8004540 <loadMenuTexts+0xa60>)
 8004372:	f7fc f9f3 	bl	800075c <copyText>
 8004376:	4603      	mov	r3, r0
 8004378:	4a72      	ldr	r2, [pc, #456]	; (8004544 <loadMenuTexts+0xa64>)
 800437a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 800437c:	4872      	ldr	r0, [pc, #456]	; (8004548 <loadMenuTexts+0xa68>)
 800437e:	f7fc f9ed 	bl	800075c <copyText>
 8004382:	4603      	mov	r3, r0
 8004384:	4a71      	ldr	r2, [pc, #452]	; (800454c <loadMenuTexts+0xa6c>)
 8004386:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004388:	4871      	ldr	r0, [pc, #452]	; (8004550 <loadMenuTexts+0xa70>)
 800438a:	f7fc f9e7 	bl	800075c <copyText>
 800438e:	e0e1      	b.n	8004554 <loadMenuTexts+0xa74>
 8004390:	200004c0 	.word	0x200004c0
 8004394:	20000b90 	.word	0x20000b90
 8004398:	200004d0 	.word	0x200004d0
 800439c:	20000b94 	.word	0x20000b94
 80043a0:	200004e0 	.word	0x200004e0
 80043a4:	20000b98 	.word	0x20000b98
 80043a8:	200004f0 	.word	0x200004f0
 80043ac:	20000b9c 	.word	0x20000b9c
 80043b0:	20000500 	.word	0x20000500
 80043b4:	20000ba0 	.word	0x20000ba0
 80043b8:	20000510 	.word	0x20000510
 80043bc:	20000ba4 	.word	0x20000ba4
 80043c0:	20000520 	.word	0x20000520
 80043c4:	20000ba8 	.word	0x20000ba8
 80043c8:	20000530 	.word	0x20000530
 80043cc:	20000bac 	.word	0x20000bac
 80043d0:	20000540 	.word	0x20000540
 80043d4:	20000bb0 	.word	0x20000bb0
 80043d8:	20000550 	.word	0x20000550
 80043dc:	20000bb4 	.word	0x20000bb4
 80043e0:	20000560 	.word	0x20000560
 80043e4:	20000bb8 	.word	0x20000bb8
 80043e8:	20000570 	.word	0x20000570
 80043ec:	20000bbc 	.word	0x20000bbc
 80043f0:	20000580 	.word	0x20000580
 80043f4:	20000bc0 	.word	0x20000bc0
 80043f8:	20000590 	.word	0x20000590
 80043fc:	20000bc4 	.word	0x20000bc4
 8004400:	200005a0 	.word	0x200005a0
 8004404:	20000bc8 	.word	0x20000bc8
 8004408:	200005b0 	.word	0x200005b0
 800440c:	20000bcc 	.word	0x20000bcc
 8004410:	200005c0 	.word	0x200005c0
 8004414:	20000bd0 	.word	0x20000bd0
 8004418:	200005d0 	.word	0x200005d0
 800441c:	20000bd4 	.word	0x20000bd4
 8004420:	200005e0 	.word	0x200005e0
 8004424:	20000bd8 	.word	0x20000bd8
 8004428:	200005f0 	.word	0x200005f0
 800442c:	20000bdc 	.word	0x20000bdc
 8004430:	20000600 	.word	0x20000600
 8004434:	20000be0 	.word	0x20000be0
 8004438:	20000610 	.word	0x20000610
 800443c:	20000be8 	.word	0x20000be8
 8004440:	20000620 	.word	0x20000620
 8004444:	20000bec 	.word	0x20000bec
 8004448:	20000630 	.word	0x20000630
 800444c:	20000bf0 	.word	0x20000bf0
 8004450:	20000640 	.word	0x20000640
 8004454:	20000bf4 	.word	0x20000bf4
 8004458:	20000650 	.word	0x20000650
 800445c:	20000bf8 	.word	0x20000bf8
 8004460:	20000660 	.word	0x20000660
 8004464:	20000bfc 	.word	0x20000bfc
 8004468:	20000670 	.word	0x20000670
 800446c:	20000c00 	.word	0x20000c00
 8004470:	20000680 	.word	0x20000680
 8004474:	20000c04 	.word	0x20000c04
 8004478:	20000690 	.word	0x20000690
 800447c:	20000c08 	.word	0x20000c08
 8004480:	200006a0 	.word	0x200006a0
 8004484:	20000c0c 	.word	0x20000c0c
 8004488:	200006b0 	.word	0x200006b0
 800448c:	20000c10 	.word	0x20000c10
 8004490:	200006c0 	.word	0x200006c0
 8004494:	20000c18 	.word	0x20000c18
 8004498:	200006d0 	.word	0x200006d0
 800449c:	20000c20 	.word	0x20000c20
 80044a0:	200006e0 	.word	0x200006e0
 80044a4:	20000c24 	.word	0x20000c24
 80044a8:	200006f0 	.word	0x200006f0
 80044ac:	20000c28 	.word	0x20000c28
 80044b0:	20000700 	.word	0x20000700
 80044b4:	20000c2c 	.word	0x20000c2c
 80044b8:	20000710 	.word	0x20000710
 80044bc:	20000c30 	.word	0x20000c30
 80044c0:	20000720 	.word	0x20000720
 80044c4:	20000c34 	.word	0x20000c34
 80044c8:	20000730 	.word	0x20000730
 80044cc:	20000c38 	.word	0x20000c38
 80044d0:	20000740 	.word	0x20000740
 80044d4:	20000c3c 	.word	0x20000c3c
 80044d8:	20000750 	.word	0x20000750
 80044dc:	20000c40 	.word	0x20000c40
 80044e0:	20000760 	.word	0x20000760
 80044e4:	20000c44 	.word	0x20000c44
 80044e8:	20000770 	.word	0x20000770
 80044ec:	20000c48 	.word	0x20000c48
 80044f0:	20000780 	.word	0x20000780
 80044f4:	20000c4c 	.word	0x20000c4c
 80044f8:	20000790 	.word	0x20000790
 80044fc:	20000c50 	.word	0x20000c50
 8004500:	200007a0 	.word	0x200007a0
 8004504:	20000c54 	.word	0x20000c54
 8004508:	200007b0 	.word	0x200007b0
 800450c:	20000c58 	.word	0x20000c58
 8004510:	200007c0 	.word	0x200007c0
 8004514:	20000c5c 	.word	0x20000c5c
 8004518:	200007d0 	.word	0x200007d0
 800451c:	20000c60 	.word	0x20000c60
 8004520:	200007e0 	.word	0x200007e0
 8004524:	20000c64 	.word	0x20000c64
 8004528:	200007f0 	.word	0x200007f0
 800452c:	20000c68 	.word	0x20000c68
 8004530:	20000800 	.word	0x20000800
 8004534:	20000c6c 	.word	0x20000c6c
 8004538:	20000810 	.word	0x20000810
 800453c:	20000c70 	.word	0x20000c70
 8004540:	20000820 	.word	0x20000820
 8004544:	20000c74 	.word	0x20000c74
 8004548:	20000830 	.word	0x20000830
 800454c:	20000c78 	.word	0x20000c78
 8004550:	20000840 	.word	0x20000840
 8004554:	4603      	mov	r3, r0
 8004556:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <loadMenuTexts+0xb14>)
 8004558:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800455a:	4827      	ldr	r0, [pc, #156]	; (80045f8 <loadMenuTexts+0xb18>)
 800455c:	f7fc f8fe 	bl	800075c <copyText>
 8004560:	4603      	mov	r3, r0
 8004562:	4a26      	ldr	r2, [pc, #152]	; (80045fc <loadMenuTexts+0xb1c>)
 8004564:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004566:	4826      	ldr	r0, [pc, #152]	; (8004600 <loadMenuTexts+0xb20>)
 8004568:	f7fc f8f8 	bl	800075c <copyText>
 800456c:	4603      	mov	r3, r0
 800456e:	4a25      	ldr	r2, [pc, #148]	; (8004604 <loadMenuTexts+0xb24>)
 8004570:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8004572:	4825      	ldr	r0, [pc, #148]	; (8004608 <loadMenuTexts+0xb28>)
 8004574:	f7fc f8f2 	bl	800075c <copyText>
 8004578:	4603      	mov	r3, r0
 800457a:	4a24      	ldr	r2, [pc, #144]	; (800460c <loadMenuTexts+0xb2c>)
 800457c:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800457e:	4824      	ldr	r0, [pc, #144]	; (8004610 <loadMenuTexts+0xb30>)
 8004580:	f7fc f8ec 	bl	800075c <copyText>
 8004584:	4603      	mov	r3, r0
 8004586:	4a23      	ldr	r2, [pc, #140]	; (8004614 <loadMenuTexts+0xb34>)
 8004588:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800458a:	4823      	ldr	r0, [pc, #140]	; (8004618 <loadMenuTexts+0xb38>)
 800458c:	f7fc f8e6 	bl	800075c <copyText>
 8004590:	4603      	mov	r3, r0
 8004592:	4a22      	ldr	r2, [pc, #136]	; (800461c <loadMenuTexts+0xb3c>)
 8004594:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004596:	4822      	ldr	r0, [pc, #136]	; (8004620 <loadMenuTexts+0xb40>)
 8004598:	f7fc f8e0 	bl	800075c <copyText>
 800459c:	4603      	mov	r3, r0
 800459e:	4a21      	ldr	r2, [pc, #132]	; (8004624 <loadMenuTexts+0xb44>)
 80045a0:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80045a2:	4821      	ldr	r0, [pc, #132]	; (8004628 <loadMenuTexts+0xb48>)
 80045a4:	f7fc f8da 	bl	800075c <copyText>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4a20      	ldr	r2, [pc, #128]	; (800462c <loadMenuTexts+0xb4c>)
 80045ac:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80045ae:	4820      	ldr	r0, [pc, #128]	; (8004630 <loadMenuTexts+0xb50>)
 80045b0:	f7fc f8d4 	bl	800075c <copyText>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <loadMenuTexts+0xb54>)
 80045b8:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80045ba:	481f      	ldr	r0, [pc, #124]	; (8004638 <loadMenuTexts+0xb58>)
 80045bc:	f7fc f8ce 	bl	800075c <copyText>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4a1e      	ldr	r2, [pc, #120]	; (800463c <loadMenuTexts+0xb5c>)
 80045c4:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80045c6:	481e      	ldr	r0, [pc, #120]	; (8004640 <loadMenuTexts+0xb60>)
 80045c8:	f7fc f8c8 	bl	800075c <copyText>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <loadMenuTexts+0xb64>)
 80045d0:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80045d2:	481d      	ldr	r0, [pc, #116]	; (8004648 <loadMenuTexts+0xb68>)
 80045d4:	f7fc f8c2 	bl	800075c <copyText>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <loadMenuTexts+0xb6c>)
 80045dc:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80045de:	481c      	ldr	r0, [pc, #112]	; (8004650 <loadMenuTexts+0xb70>)
 80045e0:	f7fc f8bc 	bl	800075c <copyText>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <loadMenuTexts+0xb74>)
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000c7c 	.word	0x20000c7c
 80045f8:	20000850 	.word	0x20000850
 80045fc:	20000c80 	.word	0x20000c80
 8004600:	20000860 	.word	0x20000860
 8004604:	20000c84 	.word	0x20000c84
 8004608:	20000870 	.word	0x20000870
 800460c:	20000c88 	.word	0x20000c88
 8004610:	20000880 	.word	0x20000880
 8004614:	20000c8c 	.word	0x20000c8c
 8004618:	20000890 	.word	0x20000890
 800461c:	20000c90 	.word	0x20000c90
 8004620:	200008a0 	.word	0x200008a0
 8004624:	20000c9c 	.word	0x20000c9c
 8004628:	200008b0 	.word	0x200008b0
 800462c:	20000ca0 	.word	0x20000ca0
 8004630:	200008c0 	.word	0x200008c0
 8004634:	20000ca4 	.word	0x20000ca4
 8004638:	200008d0 	.word	0x200008d0
 800463c:	20000ca8 	.word	0x20000ca8
 8004640:	200008e0 	.word	0x200008e0
 8004644:	20000cac 	.word	0x20000cac
 8004648:	200008f0 	.word	0x200008f0
 800464c:	20000cb0 	.word	0x20000cb0
 8004650:	20000900 	.word	0x20000900
 8004654:	20000cb4 	.word	0x20000cb4

08004658 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004668:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <lcdUpdate+0x9c>)
 800466a:	2101      	movs	r1, #1
 800466c:	2002      	movs	r0, #2
 800466e:	f7fc f82e 	bl	80006ce <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004672:	e03b      	b.n	80046ec <lcdUpdate+0x94>
	} else if(y==2) {
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d105      	bne.n	8004686 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <lcdUpdate+0x9c>)
 800467c:	2102      	movs	r1, #2
 800467e:	2002      	movs	r0, #2
 8004680:	f7fc f825 	bl	80006ce <lcd_print>
}
 8004684:	e032      	b.n	80046ec <lcdUpdate+0x94>
	} else if(y==3) {
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d105      	bne.n	8004698 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <lcdUpdate+0x9c>)
 800468e:	2103      	movs	r1, #3
 8004690:	2002      	movs	r0, #2
 8004692:	f7fc f81c 	bl	80006ce <lcd_print>
}
 8004696:	e029      	b.n	80046ec <lcdUpdate+0x94>
	} else if(y==4) {
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d105      	bne.n	80046aa <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <lcdUpdate+0x9c>)
 80046a0:	2104      	movs	r1, #4
 80046a2:	2002      	movs	r0, #2
 80046a4:	f7fc f813 	bl	80006ce <lcd_print>
}
 80046a8:	e020      	b.n	80046ec <lcdUpdate+0x94>
	} else if(y==5) {
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d105      	bne.n	80046bc <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80046b0:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <lcdUpdate+0x9c>)
 80046b2:	2105      	movs	r1, #5
 80046b4:	2002      	movs	r0, #2
 80046b6:	f7fc f80a 	bl	80006ce <lcd_print>
}
 80046ba:	e017      	b.n	80046ec <lcdUpdate+0x94>
	} else if(y==6) {
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d105      	bne.n	80046ce <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80046c2:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <lcdUpdate+0x9c>)
 80046c4:	2106      	movs	r1, #6
 80046c6:	2002      	movs	r0, #2
 80046c8:	f7fc f801 	bl	80006ce <lcd_print>
}
 80046cc:	e00e      	b.n	80046ec <lcdUpdate+0x94>
	} else if (y==7) {
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b07      	cmp	r3, #7
 80046d2:	d10b      	bne.n	80046ec <lcdUpdate+0x94>
		lcd_clear();
 80046d4:	f7fc f810 	bl	80006f8 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80046d8:	4a07      	ldr	r2, [pc, #28]	; (80046f8 <lcdUpdate+0xa0>)
 80046da:	2101      	movs	r1, #1
 80046dc:	2001      	movs	r0, #1
 80046de:	f7fb fff6 	bl	80006ce <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80046e2:	4a06      	ldr	r2, [pc, #24]	; (80046fc <lcdUpdate+0xa4>)
 80046e4:	2101      	movs	r1, #1
 80046e6:	2002      	movs	r0, #2
 80046e8:	f7fb fff1 	bl	80006ce <lcd_print>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	0800c4e8 	.word	0x0800c4e8
 80046f8:	0800cdc4 	.word	0x0800cdc4
 80046fc:	0800cdd8 	.word	0x0800cdd8

08004700 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d11d      	bne.n	800474c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004710:	4b62      	ldr	r3, [pc, #392]	; (800489c <hataKoduLcdGoster+0x19c>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004718:	4a61      	ldr	r2, [pc, #388]	; (80048a0 <hataKoduLcdGoster+0x1a0>)
 800471a:	2101      	movs	r1, #1
 800471c:	2001      	movs	r0, #1
 800471e:	f7fb ffd6 	bl	80006ce <lcd_print>
 8004722:	e008      	b.n	8004736 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004724:	4b5d      	ldr	r3, [pc, #372]	; (800489c <hataKoduLcdGoster+0x19c>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d104      	bne.n	8004736 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 800472c:	4a5d      	ldr	r2, [pc, #372]	; (80048a4 <hataKoduLcdGoster+0x1a4>)
 800472e:	2101      	movs	r1, #1
 8004730:	2001      	movs	r0, #1
 8004732:	f7fb ffcc 	bl	80006ce <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004736:	4a5c      	ldr	r2, [pc, #368]	; (80048a8 <hataKoduLcdGoster+0x1a8>)
 8004738:	2101      	movs	r1, #1
 800473a:	2002      	movs	r0, #2
 800473c:	f7fb ffc7 	bl	80006ce <lcd_print>
		lcd_print(2, 7, "          ");
 8004740:	4a5a      	ldr	r2, [pc, #360]	; (80048ac <hataKoduLcdGoster+0x1ac>)
 8004742:	2107      	movs	r1, #7
 8004744:	2002      	movs	r0, #2
 8004746:	f7fb ffc2 	bl	80006ce <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800474a:	e0a3      	b.n	8004894 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d11d      	bne.n	800478e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004752:	4b52      	ldr	r3, [pc, #328]	; (800489c <hataKoduLcdGoster+0x19c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800475a:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <hataKoduLcdGoster+0x1a0>)
 800475c:	2101      	movs	r1, #1
 800475e:	2001      	movs	r0, #1
 8004760:	f7fb ffb5 	bl	80006ce <lcd_print>
 8004764:	e008      	b.n	8004778 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004766:	4b4d      	ldr	r3, [pc, #308]	; (800489c <hataKoduLcdGoster+0x19c>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d104      	bne.n	8004778 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 800476e:	4a4d      	ldr	r2, [pc, #308]	; (80048a4 <hataKoduLcdGoster+0x1a4>)
 8004770:	2101      	movs	r1, #1
 8004772:	2001      	movs	r0, #1
 8004774:	f7fb ffab 	bl	80006ce <lcd_print>
		lcd_print(2, 2, "2");
 8004778:	4a4d      	ldr	r2, [pc, #308]	; (80048b0 <hataKoduLcdGoster+0x1b0>)
 800477a:	2102      	movs	r1, #2
 800477c:	2002      	movs	r0, #2
 800477e:	f7fb ffa6 	bl	80006ce <lcd_print>
		lcd_print(2, 7, "          ");
 8004782:	4a4a      	ldr	r2, [pc, #296]	; (80048ac <hataKoduLcdGoster+0x1ac>)
 8004784:	2107      	movs	r1, #7
 8004786:	2002      	movs	r0, #2
 8004788:	f7fb ffa1 	bl	80006ce <lcd_print>
}
 800478c:	e082      	b.n	8004894 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d11d      	bne.n	80047d0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004794:	4b41      	ldr	r3, [pc, #260]	; (800489c <hataKoduLcdGoster+0x19c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 800479c:	4a40      	ldr	r2, [pc, #256]	; (80048a0 <hataKoduLcdGoster+0x1a0>)
 800479e:	2101      	movs	r1, #1
 80047a0:	2001      	movs	r0, #1
 80047a2:	f7fb ff94 	bl	80006ce <lcd_print>
 80047a6:	e008      	b.n	80047ba <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80047a8:	4b3c      	ldr	r3, [pc, #240]	; (800489c <hataKoduLcdGoster+0x19c>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d104      	bne.n	80047ba <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047b0:	4a3c      	ldr	r2, [pc, #240]	; (80048a4 <hataKoduLcdGoster+0x1a4>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fb ff8a 	bl	80006ce <lcd_print>
		lcd_print(2, 3, "3");
 80047ba:	4a3e      	ldr	r2, [pc, #248]	; (80048b4 <hataKoduLcdGoster+0x1b4>)
 80047bc:	2103      	movs	r1, #3
 80047be:	2002      	movs	r0, #2
 80047c0:	f7fb ff85 	bl	80006ce <lcd_print>
		lcd_print(2, 7, "          ");
 80047c4:	4a39      	ldr	r2, [pc, #228]	; (80048ac <hataKoduLcdGoster+0x1ac>)
 80047c6:	2107      	movs	r1, #7
 80047c8:	2002      	movs	r0, #2
 80047ca:	f7fb ff80 	bl	80006ce <lcd_print>
}
 80047ce:	e061      	b.n	8004894 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d11d      	bne.n	8004812 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80047d6:	4b31      	ldr	r3, [pc, #196]	; (800489c <hataKoduLcdGoster+0x19c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 80047de:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <hataKoduLcdGoster+0x1a0>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	2001      	movs	r0, #1
 80047e4:	f7fb ff73 	bl	80006ce <lcd_print>
 80047e8:	e008      	b.n	80047fc <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80047ea:	4b2c      	ldr	r3, [pc, #176]	; (800489c <hataKoduLcdGoster+0x19c>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d104      	bne.n	80047fc <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047f2:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <hataKoduLcdGoster+0x1a4>)
 80047f4:	2101      	movs	r1, #1
 80047f6:	2001      	movs	r0, #1
 80047f8:	f7fb ff69 	bl	80006ce <lcd_print>
		lcd_print(2, 4, "4");
 80047fc:	4a2e      	ldr	r2, [pc, #184]	; (80048b8 <hataKoduLcdGoster+0x1b8>)
 80047fe:	2104      	movs	r1, #4
 8004800:	2002      	movs	r0, #2
 8004802:	f7fb ff64 	bl	80006ce <lcd_print>
		lcd_print(2, 7, "          ");
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <hataKoduLcdGoster+0x1ac>)
 8004808:	2107      	movs	r1, #7
 800480a:	2002      	movs	r0, #2
 800480c:	f7fb ff5f 	bl	80006ce <lcd_print>
}
 8004810:	e040      	b.n	8004894 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d11d      	bne.n	8004854 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004818:	4b20      	ldr	r3, [pc, #128]	; (800489c <hataKoduLcdGoster+0x19c>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <hataKoduLcdGoster+0x1a0>)
 8004822:	2101      	movs	r1, #1
 8004824:	2001      	movs	r0, #1
 8004826:	f7fb ff52 	bl	80006ce <lcd_print>
 800482a:	e008      	b.n	800483e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <hataKoduLcdGoster+0x19c>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d104      	bne.n	800483e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <hataKoduLcdGoster+0x1a4>)
 8004836:	2101      	movs	r1, #1
 8004838:	2001      	movs	r0, #1
 800483a:	f7fb ff48 	bl	80006ce <lcd_print>
		lcd_print(2, 5, "5");
 800483e:	4a1f      	ldr	r2, [pc, #124]	; (80048bc <hataKoduLcdGoster+0x1bc>)
 8004840:	2105      	movs	r1, #5
 8004842:	2002      	movs	r0, #2
 8004844:	f7fb ff43 	bl	80006ce <lcd_print>
		lcd_print(2, 7, "          ");
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <hataKoduLcdGoster+0x1ac>)
 800484a:	2107      	movs	r1, #7
 800484c:	2002      	movs	r0, #2
 800484e:	f7fb ff3e 	bl	80006ce <lcd_print>
}
 8004852:	e01f      	b.n	8004894 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d11c      	bne.n	8004894 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <hataKoduLcdGoster+0x19c>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d105      	bne.n	800486e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004862:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <hataKoduLcdGoster+0x1a0>)
 8004864:	2101      	movs	r1, #1
 8004866:	2001      	movs	r0, #1
 8004868:	f7fb ff31 	bl	80006ce <lcd_print>
 800486c:	e008      	b.n	8004880 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <hataKoduLcdGoster+0x19c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d104      	bne.n	8004880 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004876:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <hataKoduLcdGoster+0x1a4>)
 8004878:	2101      	movs	r1, #1
 800487a:	2001      	movs	r0, #1
 800487c:	f7fb ff27 	bl	80006ce <lcd_print>
		lcd_print(2, 6, "6");
 8004880:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <hataKoduLcdGoster+0x1c0>)
 8004882:	2106      	movs	r1, #6
 8004884:	2002      	movs	r0, #2
 8004886:	f7fb ff22 	bl	80006ce <lcd_print>
		lcd_print(2, 7, "          ");
 800488a:	4a08      	ldr	r2, [pc, #32]	; (80048ac <hataKoduLcdGoster+0x1ac>)
 800488c:	2107      	movs	r1, #7
 800488e:	2002      	movs	r0, #2
 8004890:	f7fb ff1d 	bl	80006ce <lcd_print>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000b44 	.word	0x20000b44
 80048a0:	0800cdec 	.word	0x0800cdec
 80048a4:	0800ce00 	.word	0x0800ce00
 80048a8:	0800ce14 	.word	0x0800ce14
 80048ac:	0800ce18 	.word	0x0800ce18
 80048b0:	0800ce24 	.word	0x0800ce24
 80048b4:	0800ce28 	.word	0x0800ce28
 80048b8:	0800ce2c 	.word	0x0800ce2c
 80048bc:	0800ce30 	.word	0x0800ce30
 80048c0:	0800ce34 	.word	0x0800ce34

080048c4 <eepromKontrol>:

void eepromKontrol(void) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80048ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	233f      	movs	r3, #63	; 0x3f
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	4b9b      	ldr	r3, [pc, #620]	; (8004b44 <eepromKontrol+0x280>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	233f      	movs	r3, #63	; 0x3f
 80048da:	2200      	movs	r2, #0
 80048dc:	21a0      	movs	r1, #160	; 0xa0
 80048de:	489a      	ldr	r0, [pc, #616]	; (8004b48 <eepromKontrol+0x284>)
 80048e0:	f004 faf6 	bl	8008ed0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80048e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e8:	f003 f96e 	bl	8007bc8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80048ec:	4b95      	ldr	r3, [pc, #596]	; (8004b44 <eepromKontrol+0x280>)
 80048ee:	78da      	ldrb	r2, [r3, #3]
 80048f0:	4b96      	ldr	r3, [pc, #600]	; (8004b4c <eepromKontrol+0x288>)
 80048f2:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80048f4:	4b93      	ldr	r3, [pc, #588]	; (8004b44 <eepromKontrol+0x280>)
 80048f6:	785a      	ldrb	r2, [r3, #1]
 80048f8:	4b95      	ldr	r3, [pc, #596]	; (8004b50 <eepromKontrol+0x28c>)
 80048fa:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80048fc:	4b91      	ldr	r3, [pc, #580]	; (8004b44 <eepromKontrol+0x280>)
 80048fe:	789a      	ldrb	r2, [r3, #2]
 8004900:	4b94      	ldr	r3, [pc, #592]	; (8004b54 <eepromKontrol+0x290>)
 8004902:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004904:	4b8f      	ldr	r3, [pc, #572]	; (8004b44 <eepromKontrol+0x280>)
 8004906:	791a      	ldrb	r2, [r3, #4]
 8004908:	4b93      	ldr	r3, [pc, #588]	; (8004b58 <eepromKontrol+0x294>)
 800490a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800490c:	4b8d      	ldr	r3, [pc, #564]	; (8004b44 <eepromKontrol+0x280>)
 800490e:	795a      	ldrb	r2, [r3, #5]
 8004910:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <eepromKontrol+0x298>)
 8004912:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004914:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <eepromKontrol+0x280>)
 8004916:	799a      	ldrb	r2, [r3, #6]
 8004918:	4b91      	ldr	r3, [pc, #580]	; (8004b60 <eepromKontrol+0x29c>)
 800491a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800491c:	4b89      	ldr	r3, [pc, #548]	; (8004b44 <eepromKontrol+0x280>)
 800491e:	79da      	ldrb	r2, [r3, #7]
 8004920:	4b90      	ldr	r3, [pc, #576]	; (8004b64 <eepromKontrol+0x2a0>)
 8004922:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004924:	4b87      	ldr	r3, [pc, #540]	; (8004b44 <eepromKontrol+0x280>)
 8004926:	7a1a      	ldrb	r2, [r3, #8]
 8004928:	4b8f      	ldr	r3, [pc, #572]	; (8004b68 <eepromKontrol+0x2a4>)
 800492a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800492c:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <eepromKontrol+0x280>)
 800492e:	7a5a      	ldrb	r2, [r3, #9]
 8004930:	4b8e      	ldr	r3, [pc, #568]	; (8004b6c <eepromKontrol+0x2a8>)
 8004932:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004934:	4b83      	ldr	r3, [pc, #524]	; (8004b44 <eepromKontrol+0x280>)
 8004936:	7a9a      	ldrb	r2, [r3, #10]
 8004938:	4b8d      	ldr	r3, [pc, #564]	; (8004b70 <eepromKontrol+0x2ac>)
 800493a:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800493c:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <eepromKontrol+0x280>)
 800493e:	7ada      	ldrb	r2, [r3, #11]
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <eepromKontrol+0x2b0>)
 8004942:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004944:	4b7f      	ldr	r3, [pc, #508]	; (8004b44 <eepromKontrol+0x280>)
 8004946:	7b1a      	ldrb	r2, [r3, #12]
 8004948:	4b8b      	ldr	r3, [pc, #556]	; (8004b78 <eepromKontrol+0x2b4>)
 800494a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 800494c:	4b7d      	ldr	r3, [pc, #500]	; (8004b44 <eepromKontrol+0x280>)
 800494e:	7b5a      	ldrb	r2, [r3, #13]
 8004950:	4b8a      	ldr	r3, [pc, #552]	; (8004b7c <eepromKontrol+0x2b8>)
 8004952:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004954:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <eepromKontrol+0x280>)
 8004956:	7b9a      	ldrb	r2, [r3, #14]
 8004958:	4b89      	ldr	r3, [pc, #548]	; (8004b80 <eepromKontrol+0x2bc>)
 800495a:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 800495c:	4b79      	ldr	r3, [pc, #484]	; (8004b44 <eepromKontrol+0x280>)
 800495e:	7bda      	ldrb	r2, [r3, #15]
 8004960:	4b88      	ldr	r3, [pc, #544]	; (8004b84 <eepromKontrol+0x2c0>)
 8004962:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004964:	4b77      	ldr	r3, [pc, #476]	; (8004b44 <eepromKontrol+0x280>)
 8004966:	7c1a      	ldrb	r2, [r3, #16]
 8004968:	4b87      	ldr	r3, [pc, #540]	; (8004b88 <eepromKontrol+0x2c4>)
 800496a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800496c:	4b75      	ldr	r3, [pc, #468]	; (8004b44 <eepromKontrol+0x280>)
 800496e:	7c5a      	ldrb	r2, [r3, #17]
 8004970:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <eepromKontrol+0x2c8>)
 8004972:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004974:	4b73      	ldr	r3, [pc, #460]	; (8004b44 <eepromKontrol+0x280>)
 8004976:	7c9a      	ldrb	r2, [r3, #18]
 8004978:	4b85      	ldr	r3, [pc, #532]	; (8004b90 <eepromKontrol+0x2cc>)
 800497a:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 800497c:	4b71      	ldr	r3, [pc, #452]	; (8004b44 <eepromKontrol+0x280>)
 800497e:	7cda      	ldrb	r2, [r3, #19]
 8004980:	4b84      	ldr	r3, [pc, #528]	; (8004b94 <eepromKontrol+0x2d0>)
 8004982:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004984:	4b6f      	ldr	r3, [pc, #444]	; (8004b44 <eepromKontrol+0x280>)
 8004986:	7d1a      	ldrb	r2, [r3, #20]
 8004988:	4b83      	ldr	r3, [pc, #524]	; (8004b98 <eepromKontrol+0x2d4>)
 800498a:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800498c:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <eepromKontrol+0x280>)
 800498e:	7d5a      	ldrb	r2, [r3, #21]
 8004990:	4b82      	ldr	r3, [pc, #520]	; (8004b9c <eepromKontrol+0x2d8>)
 8004992:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <eepromKontrol+0x280>)
 8004996:	7d9a      	ldrb	r2, [r3, #22]
 8004998:	4b81      	ldr	r3, [pc, #516]	; (8004ba0 <eepromKontrol+0x2dc>)
 800499a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800499c:	4b69      	ldr	r3, [pc, #420]	; (8004b44 <eepromKontrol+0x280>)
 800499e:	7dda      	ldrb	r2, [r3, #23]
 80049a0:	4b80      	ldr	r3, [pc, #512]	; (8004ba4 <eepromKontrol+0x2e0>)
 80049a2:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80049a4:	4b67      	ldr	r3, [pc, #412]	; (8004b44 <eepromKontrol+0x280>)
 80049a6:	7e1a      	ldrb	r2, [r3, #24]
 80049a8:	4b7f      	ldr	r3, [pc, #508]	; (8004ba8 <eepromKontrol+0x2e4>)
 80049aa:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80049ac:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <eepromKontrol+0x280>)
 80049ae:	7e5a      	ldrb	r2, [r3, #25]
 80049b0:	4b7e      	ldr	r3, [pc, #504]	; (8004bac <eepromKontrol+0x2e8>)
 80049b2:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80049b4:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <eepromKontrol+0x280>)
 80049b6:	7e9a      	ldrb	r2, [r3, #26]
 80049b8:	4b7d      	ldr	r3, [pc, #500]	; (8004bb0 <eepromKontrol+0x2ec>)
 80049ba:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <eepromKontrol+0x280>)
 80049be:	7eda      	ldrb	r2, [r3, #27]
 80049c0:	4b7c      	ldr	r3, [pc, #496]	; (8004bb4 <eepromKontrol+0x2f0>)
 80049c2:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80049c4:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <eepromKontrol+0x280>)
 80049c6:	7f1a      	ldrb	r2, [r3, #28]
 80049c8:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <eepromKontrol+0x2f4>)
 80049ca:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80049cc:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <eepromKontrol+0x280>)
 80049ce:	7f5a      	ldrb	r2, [r3, #29]
 80049d0:	4b7a      	ldr	r3, [pc, #488]	; (8004bbc <eepromKontrol+0x2f8>)
 80049d2:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80049d4:	4b5b      	ldr	r3, [pc, #364]	; (8004b44 <eepromKontrol+0x280>)
 80049d6:	7f9a      	ldrb	r2, [r3, #30]
 80049d8:	4b79      	ldr	r3, [pc, #484]	; (8004bc0 <eepromKontrol+0x2fc>)
 80049da:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <eepromKontrol+0x280>)
 80049de:	7fda      	ldrb	r2, [r3, #31]
 80049e0:	4b78      	ldr	r3, [pc, #480]	; (8004bc4 <eepromKontrol+0x300>)
 80049e2:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80049e4:	4b57      	ldr	r3, [pc, #348]	; (8004b44 <eepromKontrol+0x280>)
 80049e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80049ea:	4b77      	ldr	r3, [pc, #476]	; (8004bc8 <eepromKontrol+0x304>)
 80049ec:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80049ee:	4b55      	ldr	r3, [pc, #340]	; (8004b44 <eepromKontrol+0x280>)
 80049f0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80049f4:	4b75      	ldr	r3, [pc, #468]	; (8004bcc <eepromKontrol+0x308>)
 80049f6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80049f8:	4b52      	ldr	r3, [pc, #328]	; (8004b44 <eepromKontrol+0x280>)
 80049fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80049fe:	4b74      	ldr	r3, [pc, #464]	; (8004bd0 <eepromKontrol+0x30c>)
 8004a00:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004a02:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <eepromKontrol+0x280>)
 8004a04:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004a08:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <eepromKontrol+0x310>)
 8004a0a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004a0c:	4b4d      	ldr	r3, [pc, #308]	; (8004b44 <eepromKontrol+0x280>)
 8004a0e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004a12:	4b71      	ldr	r3, [pc, #452]	; (8004bd8 <eepromKontrol+0x314>)
 8004a14:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <eepromKontrol+0x280>)
 8004a18:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	; (8004bdc <eepromKontrol+0x318>)
 8004a1e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004a20:	4b48      	ldr	r3, [pc, #288]	; (8004b44 <eepromKontrol+0x280>)
 8004a22:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004a26:	4b6e      	ldr	r3, [pc, #440]	; (8004be0 <eepromKontrol+0x31c>)
 8004a28:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004a2a:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <eepromKontrol+0x280>)
 8004a2c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004a30:	4b6c      	ldr	r3, [pc, #432]	; (8004be4 <eepromKontrol+0x320>)
 8004a32:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004a34:	4b43      	ldr	r3, [pc, #268]	; (8004b44 <eepromKontrol+0x280>)
 8004a36:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004a3a:	4b6b      	ldr	r3, [pc, #428]	; (8004be8 <eepromKontrol+0x324>)
 8004a3c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <eepromKontrol+0x280>)
 8004a40:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004a44:	4b69      	ldr	r3, [pc, #420]	; (8004bec <eepromKontrol+0x328>)
 8004a46:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004a48:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <eepromKontrol+0x280>)
 8004a4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004a4e:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <eepromKontrol+0x32c>)
 8004a50:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <eepromKontrol+0x280>)
 8004a54:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <eepromKontrol+0x330>)
 8004a5a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <eepromKontrol+0x280>)
 8004a5e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a62:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <eepromKontrol+0x334>)
 8004a64:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <eepromKontrol+0x280>)
 8004a68:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004a6c:	4b63      	ldr	r3, [pc, #396]	; (8004bfc <eepromKontrol+0x338>)
 8004a6e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004a70:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <eepromKontrol+0x280>)
 8004a72:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004a76:	4b62      	ldr	r3, [pc, #392]	; (8004c00 <eepromKontrol+0x33c>)
 8004a78:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004a7a:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <eepromKontrol+0x308>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff f82e 	bl	8003ae0 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004a84:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <eepromKontrol+0x304>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	d902      	bls.n	8004a92 <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 8004a8c:	4b4e      	ldr	r3, [pc, #312]	; (8004bc8 <eepromKontrol+0x304>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004a92:	4b4c      	ldr	r3, [pc, #304]	; (8004bc4 <eepromKontrol+0x300>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	d902      	bls.n	8004aa0 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <eepromKontrol+0x300>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004aa0:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <eepromKontrol+0x2fc>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d902      	bls.n	8004aae <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 8004aa8:	4b45      	ldr	r3, [pc, #276]	; (8004bc0 <eepromKontrol+0x2fc>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004aae:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <eepromKontrol+0x2f8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b09      	cmp	r3, #9
 8004ab4:	d902      	bls.n	8004abc <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 8004ab6:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <eepromKontrol+0x2f8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004abc:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <eepromKontrol+0x2f4>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	d902      	bls.n	8004aca <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8004ac4:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <eepromKontrol+0x2f4>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004aca:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <eepromKontrol+0x28c>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d902      	bls.n	8004ad8 <eepromKontrol+0x214>
	    calismaSekli=0;
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <eepromKontrol+0x28c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <eepromKontrol+0x290>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d902      	bls.n	8004ae6 <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <eepromKontrol+0x290>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <eepromKontrol+0x294>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d902      	bls.n	8004af4 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <eepromKontrol+0x294>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <eepromKontrol+0x298>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d902      	bls.n	8004b02 <eepromKontrol+0x23e>
	    altLimit=1;
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <eepromKontrol+0x298>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <eepromKontrol+0x29c>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d902      	bls.n	8004b10 <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <eepromKontrol+0x29c>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <eepromKontrol+0x2a0>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d902      	bls.n	8004b1e <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <eepromKontrol+0x2a0>)
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <eepromKontrol+0x314>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d902      	bls.n	8004b2c <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <eepromKontrol+0x314>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <eepromKontrol+0x2a4>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <eepromKontrol+0x2a4>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <eepromKontrol+0x2a8>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d963      	bls.n	8004c0a <eepromKontrol+0x346>
 8004b42:	e05f      	b.n	8004c04 <eepromKontrol+0x340>
 8004b44:	20000ab8 	.word	0x20000ab8
 8004b48:	20000ce0 	.word	0x20000ce0
 8004b4c:	20000af7 	.word	0x20000af7
 8004b50:	20000b25 	.word	0x20000b25
 8004b54:	20000b28 	.word	0x20000b28
 8004b58:	20000b29 	.word	0x20000b29
 8004b5c:	20000b2a 	.word	0x20000b2a
 8004b60:	20000b2b 	.word	0x20000b2b
 8004b64:	20000b2c 	.word	0x20000b2c
 8004b68:	20000b2d 	.word	0x20000b2d
 8004b6c:	20000b3d 	.word	0x20000b3d
 8004b70:	20000b2e 	.word	0x20000b2e
 8004b74:	20000b3e 	.word	0x20000b3e
 8004b78:	20000b2f 	.word	0x20000b2f
 8004b7c:	20000b3f 	.word	0x20000b3f
 8004b80:	20000b32 	.word	0x20000b32
 8004b84:	20000b33 	.word	0x20000b33
 8004b88:	20000b34 	.word	0x20000b34
 8004b8c:	20000b35 	.word	0x20000b35
 8004b90:	20000b36 	.word	0x20000b36
 8004b94:	20000b37 	.word	0x20000b37
 8004b98:	20000b38 	.word	0x20000b38
 8004b9c:	20000b39 	.word	0x20000b39
 8004ba0:	20000b3a 	.word	0x20000b3a
 8004ba4:	20000b3b 	.word	0x20000b3b
 8004ba8:	20000b3c 	.word	0x20000b3c
 8004bac:	20000b40 	.word	0x20000b40
 8004bb0:	20000b42 	.word	0x20000b42
 8004bb4:	20000b20 	.word	0x20000b20
 8004bb8:	20000b21 	.word	0x20000b21
 8004bbc:	20000b22 	.word	0x20000b22
 8004bc0:	20000941 	.word	0x20000941
 8004bc4:	20000942 	.word	0x20000942
 8004bc8:	20000b23 	.word	0x20000b23
 8004bcc:	20000b44 	.word	0x20000b44
 8004bd0:	20000b31 	.word	0x20000b31
 8004bd4:	20000b43 	.word	0x20000b43
 8004bd8:	20000b30 	.word	0x20000b30
 8004bdc:	20000b45 	.word	0x20000b45
 8004be0:	20000b46 	.word	0x20000b46
 8004be4:	20000b47 	.word	0x20000b47
 8004be8:	20000b48 	.word	0x20000b48
 8004bec:	20000b49 	.word	0x20000b49
 8004bf0:	20000b4a 	.word	0x20000b4a
 8004bf4:	20000b4b 	.word	0x20000b4b
 8004bf8:	20000b4c 	.word	0x20000b4c
 8004bfc:	20000b4d 	.word	0x20000b4d
 8004c00:	20000b4e 	.word	0x20000b4e
	    kapi1AcSure=5;
 8004c04:	4b4a      	ldr	r3, [pc, #296]	; (8004d30 <eepromKontrol+0x46c>)
 8004c06:	2205      	movs	r2, #5
 8004c08:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <eepromKontrol+0x470>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d902      	bls.n	8004c18 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004c12:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <eepromKontrol+0x470>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004c18:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <eepromKontrol+0x474>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b05      	cmp	r3, #5
 8004c1e:	d902      	bls.n	8004c26 <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004c20:	4b45      	ldr	r3, [pc, #276]	; (8004d38 <eepromKontrol+0x474>)
 8004c22:	2205      	movs	r2, #5
 8004c24:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004c26:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <eepromKontrol+0x478>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d902      	bls.n	8004c34 <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004c2e:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <eepromKontrol+0x478>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004c34:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <eepromKontrol+0x47c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d902      	bls.n	8004c42 <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004c3c:	4b40      	ldr	r3, [pc, #256]	; (8004d40 <eepromKontrol+0x47c>)
 8004c3e:	2202      	movs	r2, #2
 8004c40:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004c42:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <eepromKontrol+0x480>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d902      	bls.n	8004c50 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	; (8004d44 <eepromKontrol+0x480>)
 8004c4c:	2205      	movs	r2, #5
 8004c4e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004c50:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <eepromKontrol+0x484>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d902      	bls.n	8004c5e <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004c58:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <eepromKontrol+0x484>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <eepromKontrol+0x488>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d902      	bls.n	8004c6c <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <eepromKontrol+0x488>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004c6c:	4b38      	ldr	r3, [pc, #224]	; (8004d50 <eepromKontrol+0x48c>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d902      	bls.n	8004c7a <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004c74:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <eepromKontrol+0x48c>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004c7a:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <eepromKontrol+0x490>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d902      	bls.n	8004c88 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <eepromKontrol+0x490>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004c88:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <eepromKontrol+0x494>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d902      	bls.n	8004c96 <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004c90:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <eepromKontrol+0x494>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004c96:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <eepromKontrol+0x498>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d902      	bls.n	8004ca4 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004c9e:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <eepromKontrol+0x498>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <eepromKontrol+0x49c>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b05      	cmp	r3, #5
 8004caa:	d902      	bls.n	8004cb2 <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <eepromKontrol+0x49c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004cb2:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <eepromKontrol+0x4a0>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d902      	bls.n	8004cc0 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004cba:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <eepromKontrol+0x4a0>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004cc0:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <eepromKontrol+0x4a4>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d902      	bls.n	8004cce <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <eepromKontrol+0x4a4>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004cce:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <eepromKontrol+0x4a8>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d902      	bls.n	8004cdc <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004cd6:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <eepromKontrol+0x4a8>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <eepromKontrol+0x4ac>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2bb4      	cmp	r3, #180	; 0xb4
 8004ce2:	d902      	bls.n	8004cea <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004ce4:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <eepromKontrol+0x4ac>)
 8004ce6:	223c      	movs	r2, #60	; 0x3c
 8004ce8:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <eepromKontrol+0x4b0>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d902      	bls.n	8004cf8 <eepromKontrol+0x434>
	    buzzer=0;
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <eepromKontrol+0x4b0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004cf8:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <eepromKontrol+0x4b4>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d902      	bls.n	8004d06 <eepromKontrol+0x442>
	    demoMode=0;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <eepromKontrol+0x4b4>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <eepromKontrol+0x4b8>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d902      	bls.n	8004d14 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <eepromKontrol+0x4b8>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004d14:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <eepromKontrol+0x4bc>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d902      	bls.n	8004d22 <eepromKontrol+0x45e>
	    dilSecim=0;
 8004d1c:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <eepromKontrol+0x4bc>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d26:	f002 ff4f 	bl	8007bc8 <HAL_Delay>
}
 8004d2a:	bf00      	nop
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000b3d 	.word	0x20000b3d
 8004d34:	20000b2e 	.word	0x20000b2e
 8004d38:	20000b3e 	.word	0x20000b3e
 8004d3c:	20000b2f 	.word	0x20000b2f
 8004d40:	20000b31 	.word	0x20000b31
 8004d44:	20000b3f 	.word	0x20000b3f
 8004d48:	20000b32 	.word	0x20000b32
 8004d4c:	20000b33 	.word	0x20000b33
 8004d50:	20000b34 	.word	0x20000b34
 8004d54:	20000b35 	.word	0x20000b35
 8004d58:	20000b36 	.word	0x20000b36
 8004d5c:	20000b37 	.word	0x20000b37
 8004d60:	20000b38 	.word	0x20000b38
 8004d64:	20000b39 	.word	0x20000b39
 8004d68:	20000b3a 	.word	0x20000b3a
 8004d6c:	20000b3b 	.word	0x20000b3b
 8004d70:	20000b3c 	.word	0x20000b3c
 8004d74:	20000b40 	.word	0x20000b40
 8004d78:	20000b42 	.word	0x20000b42
 8004d7c:	20000b43 	.word	0x20000b43
 8004d80:	20000b44 	.word	0x20000b44

08004d84 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b089      	sub	sp, #36	; 0x24
 8004d88:	af04      	add	r7, sp, #16
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004d8e:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <hata2EEPROM+0xa0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	1e5a      	subs	r2, r3, #1
 8004d94:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <hata2EEPROM+0xa4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4413      	add	r3, r2
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <hata2EEPROM+0xa8>)
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004da2:	f000 f847 	bl	8004e34 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004da6:	e000      	b.n	8004daa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004da8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e012      	b.n	8004dd6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <hata2EEPROM+0xa4>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <hata2EEPROM+0xa8>)
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d107      	bne.n	8004dd0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004dc0:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <hata2EEPROM+0xa4>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4918      	ldr	r1, [pc, #96]	; (8004e2c <hata2EEPROM+0xa8>)
 8004dca:	79fa      	ldrb	r2, [r7, #7]
 8004dcc:	54ca      	strb	r2, [r1, r3]
					break;
 8004dce:	e007      	b.n	8004de0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <hata2EEPROM+0xa0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	dbe7      	blt.n	8004db0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <hata2EEPROM+0xa4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b299      	uxth	r1, r3
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <hata2EEPROM+0xa0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b298      	uxth	r0, r3
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <hata2EEPROM+0xa4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <hata2EEPROM+0xa8>)
 8004df2:	4413      	add	r3, r2
 8004df4:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <hata2EEPROM+0xa0>)
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004dfe:	9402      	str	r4, [sp, #8]
 8004e00:	9201      	str	r2, [sp, #4]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4603      	mov	r3, r0
 8004e06:	460a      	mov	r2, r1
 8004e08:	21a0      	movs	r1, #160	; 0xa0
 8004e0a:	4809      	ldr	r0, [pc, #36]	; (8004e30 <hata2EEPROM+0xac>)
 8004e0c:	f003 ff66 	bl	8008cdc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e14:	f002 fed8 	bl	8007bc8 <HAL_Delay>
	eepromKontrol();
 8004e18:	f7ff fd54 	bl	80048c4 <eepromKontrol>
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	20000938 	.word	0x20000938
 8004e28:	2000093c 	.word	0x2000093c
 8004e2c:	20000ab8 	.word	0x20000ab8
 8004e30:	20000ce0 	.word	0x20000ce0

08004e34 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	e009      	b.n	8004e54 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004e40:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <eepromDataFillWithEmpty+0x38>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <eepromDataFillWithEmpty+0x3c>)
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3301      	adds	r3, #1
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <eepromDataFillWithEmpty+0x40>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	dbf0      	blt.n	8004e40 <eepromDataFillWithEmpty+0xc>
	}
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000910 	.word	0x20000910
 8004e70:	20000ab8 	.word	0x20000ab8
 8004e74:	20000938 	.word	0x20000938

08004e78 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
	timer1=millis;
 8004e7c:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <bekle+0x124>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a47      	ldr	r2, [pc, #284]	; (8004fa0 <bekle+0x128>)
 8004e82:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004e84:	e002      	b.n	8004e8c <bekle+0x14>
    	butonKontrol = 1;
 8004e86:	4b47      	ldr	r3, [pc, #284]	; (8004fa4 <bekle+0x12c>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4846      	ldr	r0, [pc, #280]	; (8004fa8 <bekle+0x130>)
 8004e90:	f003 fc6a 	bl	8008768 <HAL_GPIO_ReadPin>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d109      	bne.n	8004eae <bekle+0x36>
 8004e9a:	4b40      	ldr	r3, [pc, #256]	; (8004f9c <bekle+0x124>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <bekle+0x128>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d0ef      	beq.n	8004e86 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ea6:	e002      	b.n	8004eae <bekle+0x36>
    	butonKontrol = 1;
 8004ea8:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <bekle+0x12c>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004eae:	2108      	movs	r1, #8
 8004eb0:	483e      	ldr	r0, [pc, #248]	; (8004fac <bekle+0x134>)
 8004eb2:	f003 fc59 	bl	8008768 <HAL_GPIO_ReadPin>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d109      	bne.n	8004ed0 <bekle+0x58>
 8004ebc:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <bekle+0x124>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b37      	ldr	r3, [pc, #220]	; (8004fa0 <bekle+0x128>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d0ef      	beq.n	8004ea8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ec8:	e002      	b.n	8004ed0 <bekle+0x58>
    	butonKontrol = 1;
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <bekle+0x12c>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4835      	ldr	r0, [pc, #212]	; (8004fa8 <bekle+0x130>)
 8004ed4:	f003 fc48 	bl	8008768 <HAL_GPIO_ReadPin>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d109      	bne.n	8004ef2 <bekle+0x7a>
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <bekle+0x124>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b2f      	ldr	r3, [pc, #188]	; (8004fa0 <bekle+0x128>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d0ef      	beq.n	8004eca <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004eea:	e002      	b.n	8004ef2 <bekle+0x7a>
    	butonKontrol = 1;
 8004eec:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <bekle+0x12c>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	482c      	ldr	r0, [pc, #176]	; (8004fa8 <bekle+0x130>)
 8004ef6:	f003 fc37 	bl	8008768 <HAL_GPIO_ReadPin>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d109      	bne.n	8004f14 <bekle+0x9c>
 8004f00:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <bekle+0x124>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b26      	ldr	r3, [pc, #152]	; (8004fa0 <bekle+0x128>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d0ef      	beq.n	8004eec <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f0c:	e002      	b.n	8004f14 <bekle+0x9c>
    	butonKontrol = 1;
 8004f0e:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <bekle+0x12c>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f14:	2108      	movs	r1, #8
 8004f16:	4824      	ldr	r0, [pc, #144]	; (8004fa8 <bekle+0x130>)
 8004f18:	f003 fc26 	bl	8008768 <HAL_GPIO_ReadPin>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d109      	bne.n	8004f36 <bekle+0xbe>
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <bekle+0x124>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <bekle+0x128>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d0ef      	beq.n	8004f0e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f2e:	e002      	b.n	8004f36 <bekle+0xbe>
    	butonKontrol = 1;
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <bekle+0x12c>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	481c      	ldr	r0, [pc, #112]	; (8004fac <bekle+0x134>)
 8004f3a:	f003 fc15 	bl	8008768 <HAL_GPIO_ReadPin>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <bekle+0xe0>
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <bekle+0x124>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <bekle+0x128>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d0ef      	beq.n	8004f30 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f50:	e002      	b.n	8004f58 <bekle+0xe0>
    	butonKontrol = 1;
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <bekle+0x12c>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f5c:	4813      	ldr	r0, [pc, #76]	; (8004fac <bekle+0x134>)
 8004f5e:	f003 fc03 	bl	8008768 <HAL_GPIO_ReadPin>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <bekle+0x104>
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <bekle+0x124>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <bekle+0x128>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d0ee      	beq.n	8004f52 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f74:	e002      	b.n	8004f7c <bekle+0x104>
    	butonKontrol = 1;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <bekle+0x12c>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f80:	480a      	ldr	r0, [pc, #40]	; (8004fac <bekle+0x134>)
 8004f82:	f003 fbf1 	bl	8008768 <HAL_GPIO_ReadPin>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <bekle+0x120>
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <bekle+0x124>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <bekle+0x128>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d0ee      	beq.n	8004f76 <bekle+0xfe>
    }

}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000b00 	.word	0x20000b00
 8004fa0:	20000b08 	.word	0x20000b08
 8004fa4:	20000b52 	.word	0x20000b52
 8004fa8:	40010800 	.word	0x40010800
 8004fac:	40011000 	.word	0x40011000

08004fb0 <i2cTest>:

void i2cTest() {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004fc2:	4b50      	ldr	r3, [pc, #320]	; (8005104 <i2cTest+0x154>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <i2cTest+0x154>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004fd2:	484c      	ldr	r0, [pc, #304]	; (8005104 <i2cTest+0x154>)
 8004fd4:	f003 fd54 	bl	8008a80 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fd8:	23c0      	movs	r3, #192	; 0xc0
 8004fda:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004fdc:	2311      	movs	r3, #17
 8004fde:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004fe8:	463b      	mov	r3, r7
 8004fea:	4619      	mov	r1, r3
 8004fec:	4846      	ldr	r0, [pc, #280]	; (8005108 <i2cTest+0x158>)
 8004fee:	f003 f95b 	bl	80082a8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2140      	movs	r1, #64	; 0x40
 8004ff6:	4844      	ldr	r0, [pc, #272]	; (8005108 <i2cTest+0x158>)
 8004ff8:	f003 fbcd 	bl	8008796 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	4841      	ldr	r0, [pc, #260]	; (8005108 <i2cTest+0x158>)
 8005002:	f003 fbc8 	bl	8008796 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005006:	200a      	movs	r0, #10
 8005008:	f002 fdde 	bl	8007bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800500c:	bf00      	nop
 800500e:	2140      	movs	r1, #64	; 0x40
 8005010:	483d      	ldr	r0, [pc, #244]	; (8005108 <i2cTest+0x158>)
 8005012:	f003 fba9 	bl	8008768 <HAL_GPIO_ReadPin>
 8005016:	4603      	mov	r3, r0
 8005018:	2b01      	cmp	r3, #1
 800501a:	d006      	beq.n	800502a <i2cTest+0x7a>
 800501c:	2180      	movs	r1, #128	; 0x80
 800501e:	483a      	ldr	r0, [pc, #232]	; (8005108 <i2cTest+0x158>)
 8005020:	f003 fba2 	bl	8008768 <HAL_GPIO_ReadPin>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d1f1      	bne.n	800500e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	4836      	ldr	r0, [pc, #216]	; (8005108 <i2cTest+0x158>)
 8005030:	f003 fbb1 	bl	8008796 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005034:	200a      	movs	r0, #10
 8005036:	f002 fdc7 	bl	8007bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800503a:	bf00      	nop
 800503c:	2180      	movs	r1, #128	; 0x80
 800503e:	4832      	ldr	r0, [pc, #200]	; (8005108 <i2cTest+0x158>)
 8005040:	f003 fb92 	bl	8008768 <HAL_GPIO_ReadPin>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d0f8      	beq.n	800503c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800504a:	2200      	movs	r2, #0
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	482e      	ldr	r0, [pc, #184]	; (8005108 <i2cTest+0x158>)
 8005050:	f003 fba1 	bl	8008796 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005054:	200a      	movs	r0, #10
 8005056:	f002 fdb7 	bl	8007bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800505a:	bf00      	nop
 800505c:	2140      	movs	r1, #64	; 0x40
 800505e:	482a      	ldr	r0, [pc, #168]	; (8005108 <i2cTest+0x158>)
 8005060:	f003 fb82 	bl	8008768 <HAL_GPIO_ReadPin>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d0f8      	beq.n	800505c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800506a:	2201      	movs	r2, #1
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	4826      	ldr	r0, [pc, #152]	; (8005108 <i2cTest+0x158>)
 8005070:	f003 fb91 	bl	8008796 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005074:	200a      	movs	r0, #10
 8005076:	f002 fda7 	bl	8007bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800507a:	bf00      	nop
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	4822      	ldr	r0, [pc, #136]	; (8005108 <i2cTest+0x158>)
 8005080:	f003 fb72 	bl	8008768 <HAL_GPIO_ReadPin>
 8005084:	4603      	mov	r3, r0
 8005086:	2b01      	cmp	r3, #1
 8005088:	d1f8      	bne.n	800507c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800508a:	2201      	movs	r2, #1
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	481e      	ldr	r0, [pc, #120]	; (8005108 <i2cTest+0x158>)
 8005090:	f003 fb81 	bl	8008796 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005094:	200a      	movs	r0, #10
 8005096:	f002 fd97 	bl	8007bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800509a:	bf00      	nop
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	481a      	ldr	r0, [pc, #104]	; (8005108 <i2cTest+0x158>)
 80050a0:	f003 fb62 	bl	8008768 <HAL_GPIO_ReadPin>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d1f8      	bne.n	800509c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050aa:	23c0      	movs	r3, #192	; 0xc0
 80050ac:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80050ae:	2312      	movs	r3, #18
 80050b0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80050b2:	2301      	movs	r3, #1
 80050b4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80050ba:	463b      	mov	r3, r7
 80050bc:	4619      	mov	r1, r3
 80050be:	4812      	ldr	r0, [pc, #72]	; (8005108 <i2cTest+0x158>)
 80050c0:	f003 f8f2 	bl	80082a8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <i2cTest+0x154>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <i2cTest+0x154>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <i2cTest+0x154>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <i2cTest+0x154>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050e2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <i2cTest+0x154>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <i2cTest+0x154>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80050f4:	4803      	ldr	r0, [pc, #12]	; (8005104 <i2cTest+0x154>)
 80050f6:	f003 fb7f 	bl	80087f8 <HAL_I2C_Init>
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000ce0 	.word	0x20000ce0
 8005108:	40010c00 	.word	0x40010c00

0800510c <checkLCDBacklight>:

void checkLCDBacklight() {
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8005110:	4b08      	ldr	r3, [pc, #32]	; (8005134 <checkLCDBacklight+0x28>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <checkLCDBacklight+0x2c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	4a08      	ldr	r2, [pc, #32]	; (800513c <checkLCDBacklight+0x30>)
 800511c:	7812      	ldrb	r2, [r2, #0]
 800511e:	4293      	cmp	r3, r2
 8005120:	d303      	bcc.n	800512a <checkLCDBacklight+0x1e>
				lcd_backlight(0);
 8005122:	2000      	movs	r0, #0
 8005124:	f7fb faf2 	bl	800070c <lcd_backlight>
			} else {
				lcd_backlight(1);
			}
}
 8005128:	e002      	b.n	8005130 <checkLCDBacklight+0x24>
				lcd_backlight(1);
 800512a:	2001      	movs	r0, #1
 800512c:	f7fb faee 	bl	800070c <lcd_backlight>
}
 8005130:	bf00      	nop
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000b00 	.word	0x20000b00
 8005138:	20000b1c 	.word	0x20000b1c
 800513c:	20000940 	.word	0x20000940

08005140 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <checkBasincSalteri+0x54>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <checkBasincSalteri+0x12>
				basincVar=1;
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <checkBasincSalteri+0x58>)
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
			}

			if(basincSalteri==1) {
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <checkBasincSalteri+0x54>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d119      	bne.n	800518e <checkBasincSalteri+0x4e>
				if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800515a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800515e:	480f      	ldr	r0, [pc, #60]	; (800519c <checkBasincSalteri+0x5c>)
 8005160:	f003 fb02 	bl	8008768 <HAL_GPIO_ReadPin>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <checkBasincSalteri+0x40>
					if(millis-timer5>=3) {
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <checkBasincSalteri+0x60>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <checkBasincSalteri+0x64>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d90a      	bls.n	800518e <checkBasincSalteri+0x4e>
						basincVar=1;
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <checkBasincSalteri+0x58>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
				} else {
					timer5=millis;
					basincVar=0;
				}
			}
}
 800517e:	e006      	b.n	800518e <checkBasincSalteri+0x4e>
					timer5=millis;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <checkBasincSalteri+0x60>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a07      	ldr	r2, [pc, #28]	; (80051a4 <checkBasincSalteri+0x64>)
 8005186:	6013      	str	r3, [r2, #0]
					basincVar=0;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <checkBasincSalteri+0x58>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000b2b 	.word	0x20000b2b
 8005198:	20000b27 	.word	0x20000b27
 800519c:	40011000 	.word	0x40011000
 80051a0:	20000b00 	.word	0x20000b00
 80051a4:	20000b18 	.word	0x20000b18

080051a8 <checkBasGonder>:

void checkBasGonder() {
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <checkBasGonder+0x74>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10b      	bne.n	80051cc <checkBasGonder+0x24>
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <checkBasGonder+0x78>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <checkBasGonder+0x24>
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <checkBasGonder+0x7c>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <checkBasGonder+0x24>
				basgondercalisyukari=1;
 80051c4:	4b18      	ldr	r3, [pc, #96]	; (8005228 <checkBasGonder+0x80>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e009      	b.n	80051e0 <checkBasGonder+0x38>
			} else if(yukarimotorcalisiyor==0) {
 80051cc:	4b14      	ldr	r3, [pc, #80]	; (8005220 <checkBasGonder+0x78>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f083 0301 	eor.w	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <checkBasGonder+0x38>
				basgondercalisyukari=0;
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <checkBasGonder+0x80>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
			}

			if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80051e0:	4b0e      	ldr	r3, [pc, #56]	; (800521c <checkBasGonder+0x74>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10b      	bne.n	8005200 <checkBasGonder+0x58>
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <checkBasGonder+0x84>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <checkBasGonder+0x58>
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <checkBasGonder+0x7c>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <checkBasGonder+0x58>
				basgondercalisasagi=1;
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <checkBasGonder+0x88>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
			} else if(asagivalfcalisiyor==0) {
				basgondercalisasagi=0;
			}
}
 80051fe:	e009      	b.n	8005214 <checkBasGonder+0x6c>
			} else if(asagivalfcalisiyor==0) {
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <checkBasGonder+0x84>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f083 0301 	eor.w	r3, r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <checkBasGonder+0x6c>
				basgondercalisasagi=0;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <checkBasGonder+0x88>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	20000b25 	.word	0x20000b25
 8005220:	20000b58 	.word	0x20000b58
 8005224:	20000b33 	.word	0x20000b33
 8005228:	20000b5f 	.word	0x20000b5f
 800522c:	20000b5b 	.word	0x20000b5b
 8005230:	20000b60 	.word	0x20000b60

08005234 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <checkKapiSecimleri+0x98>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <checkKapiSecimleri+0x12>
				kapiSivicVar=1;
 8005240:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <checkKapiSecimleri+0x9c>)
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
			}

			if(kapiSecimleri==1) {
 8005246:	4b21      	ldr	r3, [pc, #132]	; (80052cc <checkKapiSecimleri+0x98>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d10e      	bne.n	800526c <checkKapiSecimleri+0x38>
				if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800524e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005252:	4820      	ldr	r0, [pc, #128]	; (80052d4 <checkKapiSecimleri+0xa0>)
 8005254:	f003 fa88 	bl	8008768 <HAL_GPIO_ReadPin>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <checkKapiSecimleri+0x32>
					kapiSivicVar=1;
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <checkKapiSecimleri+0x9c>)
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e002      	b.n	800526c <checkKapiSecimleri+0x38>
				} else {
					kapiSivicVar=0;
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <checkKapiSecimleri+0x9c>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==2){
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <checkKapiSecimleri+0x98>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d10e      	bne.n	8005292 <checkKapiSecimleri+0x5e>
				if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005278:	4816      	ldr	r0, [pc, #88]	; (80052d4 <checkKapiSecimleri+0xa0>)
 800527a:	f003 fa75 	bl	8008768 <HAL_GPIO_ReadPin>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <checkKapiSecimleri+0x58>
					kapiSivicVar=1;
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <checkKapiSecimleri+0x9c>)
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e002      	b.n	8005292 <checkKapiSecimleri+0x5e>
				} else {
					kapiSivicVar=0;
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <checkKapiSecimleri+0x9c>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==3) {
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <checkKapiSecimleri+0x98>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d116      	bne.n	80052c8 <checkKapiSecimleri+0x94>
				if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800529a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800529e:	480d      	ldr	r0, [pc, #52]	; (80052d4 <checkKapiSecimleri+0xa0>)
 80052a0:	f003 fa62 	bl	8008768 <HAL_GPIO_ReadPin>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <checkKapiSecimleri+0x8e>
 80052aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ae:	4809      	ldr	r0, [pc, #36]	; (80052d4 <checkKapiSecimleri+0xa0>)
 80052b0:	f003 fa5a 	bl	8008768 <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d103      	bne.n	80052c2 <checkKapiSecimleri+0x8e>
					kapiSivicVar=1;
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <checkKapiSecimleri+0x9c>)
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
				} else {
					kapiSivicVar=0;
				}
			}
}
 80052c0:	e002      	b.n	80052c8 <checkKapiSecimleri+0x94>
					kapiSivicVar=0;
 80052c2:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <checkKapiSecimleri+0x9c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
}
 80052c8:	bf00      	nop
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000b2c 	.word	0x20000b2c
 80052d0:	20000b76 	.word	0x20000b76
 80052d4:	40010800 	.word	0x40010800

080052d8 <checkAktifCalisma>:

void checkAktifCalisma() {
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80052dc:	4b62      	ldr	r3, [pc, #392]	; (8005468 <checkAktifCalisma+0x190>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f041 8332 	bne.w	800694a <checkAktifCalisma+0x1672>
 80052e6:	4b61      	ldr	r3, [pc, #388]	; (800546c <checkAktifCalisma+0x194>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f041 832d 	bne.w	800694a <checkAktifCalisma+0x1672>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80052f0:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <checkAktifCalisma+0x198>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11a      	bne.n	800532e <checkAktifCalisma+0x56>
 80052f8:	4b5e      	ldr	r3, [pc, #376]	; (8005474 <checkAktifCalisma+0x19c>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <checkAktifCalisma+0x56>
 8005300:	4b5d      	ldr	r3, [pc, #372]	; (8005478 <checkAktifCalisma+0x1a0>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <checkAktifCalisma+0x46>
 8005308:	4b5c      	ldr	r3, [pc, #368]	; (800547c <checkAktifCalisma+0x1a4>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f083 0301 	eor.w	r3, r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <checkAktifCalisma+0x46>
 8005316:	4b5a      	ldr	r3, [pc, #360]	; (8005480 <checkAktifCalisma+0x1a8>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d007      	beq.n	800532e <checkAktifCalisma+0x56>
 800531e:	4b59      	ldr	r3, [pc, #356]	; (8005484 <checkAktifCalisma+0x1ac>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d018      	beq.n	8005358 <checkAktifCalisma+0x80>
 8005326:	4b58      	ldr	r3, [pc, #352]	; (8005488 <checkAktifCalisma+0x1b0>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d114      	bne.n	8005358 <checkAktifCalisma+0x80>
 800532e:	4b57      	ldr	r3, [pc, #348]	; (800548c <checkAktifCalisma+0x1b4>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d010      	beq.n	8005358 <checkAktifCalisma+0x80>
 8005336:	4b56      	ldr	r3, [pc, #344]	; (8005490 <checkAktifCalisma+0x1b8>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <checkAktifCalisma+0x80>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800533e:	2201      	movs	r2, #1
 8005340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005344:	4853      	ldr	r0, [pc, #332]	; (8005494 <checkAktifCalisma+0x1bc>)
 8005346:	f003 fa26 	bl	8008796 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800534a:	4b53      	ldr	r3, [pc, #332]	; (8005498 <checkAktifCalisma+0x1c0>)
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005350:	4b52      	ldr	r3, [pc, #328]	; (800549c <checkAktifCalisma+0x1c4>)
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e008      	b.n	800536a <checkAktifCalisma+0x92>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800535e:	484d      	ldr	r0, [pc, #308]	; (8005494 <checkAktifCalisma+0x1bc>)
 8005360:	f003 fa19 	bl	8008796 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005364:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <checkAktifCalisma+0x1c0>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 800536a:	4b40      	ldr	r3, [pc, #256]	; (800546c <checkAktifCalisma+0x194>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d160      	bne.n	8005434 <checkAktifCalisma+0x15c>
 8005372:	4b46      	ldr	r3, [pc, #280]	; (800548c <checkAktifCalisma+0x1b4>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d05c      	beq.n	8005434 <checkAktifCalisma+0x15c>
 800537a:	4b45      	ldr	r3, [pc, #276]	; (8005490 <checkAktifCalisma+0x1b8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d058      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005386:	4843      	ldr	r0, [pc, #268]	; (8005494 <checkAktifCalisma+0x1bc>)
 8005388:	f003 f9ee 	bl	8008768 <HAL_GPIO_ReadPin>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <checkAktifCalisma+0xc2>
 8005392:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <checkAktifCalisma+0x1c8>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04c      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800539a:	2102      	movs	r1, #2
 800539c:	4841      	ldr	r0, [pc, #260]	; (80054a4 <checkAktifCalisma+0x1cc>)
 800539e:	f003 f9e3 	bl	8008768 <HAL_GPIO_ReadPin>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d145      	bne.n	8005434 <checkAktifCalisma+0x15c>
							&& (basincVar)
 80053a8:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <checkAktifCalisma+0x1d0>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d041      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80053b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053b4:	4837      	ldr	r0, [pc, #220]	; (8005494 <checkAktifCalisma+0x1bc>)
 80053b6:	f003 f9d7 	bl	8008768 <HAL_GPIO_ReadPin>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10e      	bne.n	80053de <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80053c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053c4:	4833      	ldr	r0, [pc, #204]	; (8005494 <checkAktifCalisma+0x1bc>)
 80053c6:	f003 f9cf 	bl	8008768 <HAL_GPIO_ReadPin>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80053d0:	2140      	movs	r1, #64	; 0x40
 80053d2:	4834      	ldr	r0, [pc, #208]	; (80054a4 <checkAktifCalisma+0x1cc>)
 80053d4:	f003 f9c8 	bl	8008768 <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d003      	beq.n	80053e6 <checkAktifCalisma+0x10e>
 80053de:	4b24      	ldr	r3, [pc, #144]	; (8005470 <checkAktifCalisma+0x198>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d026      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&& (asagivalfcalisiyor==0)
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <checkAktifCalisma+0x1a0>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f083 0301 	eor.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01f      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&& (devmotoryukaricalisiyor==0)
 80053f4:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <checkAktifCalisma+0x19c>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f083 0301 	eor.w	r3, r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&& (devmotorasagicalisiyor==0)
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <checkAktifCalisma+0x1ac>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f083 0301 	eor.w	r3, r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&&(devyukarivalfcalisiyor==0)
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <checkAktifCalisma+0x1d4>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f083 0301 	eor.w	r3, r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <checkAktifCalisma+0x15c>
							&&(devasagivalfcalisiyor==0)) {
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <checkAktifCalisma+0x1d8>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f083 0301 	eor.w	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <checkAktifCalisma+0x15c>
					yukarimotorcalisiyor=1;
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <checkAktifCalisma+0x198>)
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e002      	b.n	800543a <checkAktifCalisma+0x162>
				} else {
					yukarimotorcalisiyor=0;
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <checkAktifCalisma+0x198>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <checkAktifCalisma+0x198>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d03a      	beq.n	80054b8 <checkAktifCalisma+0x1e0>
 8005442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005446:	4817      	ldr	r0, [pc, #92]	; (80054a4 <checkAktifCalisma+0x1cc>)
 8005448:	f003 f98e 	bl	8008768 <HAL_GPIO_ReadPin>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d132      	bne.n	80054b8 <checkAktifCalisma+0x1e0>
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <checkAktifCalisma+0x1dc>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02e      	beq.n	80054b8 <checkAktifCalisma+0x1e0>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800545a:	2201      	movs	r2, #1
 800545c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005460:	480c      	ldr	r0, [pc, #48]	; (8005494 <checkAktifCalisma+0x1bc>)
 8005462:	f003 f998 	bl	8008796 <HAL_GPIO_WritePin>
 8005466:	e02d      	b.n	80054c4 <checkAktifCalisma+0x1ec>
 8005468:	20000b42 	.word	0x20000b42
 800546c:	20000b41 	.word	0x20000b41
 8005470:	20000b58 	.word	0x20000b58
 8005474:	20000b59 	.word	0x20000b59
 8005478:	20000b5b 	.word	0x20000b5b
 800547c:	20000b53 	.word	0x20000b53
 8005480:	20000b37 	.word	0x20000b37
 8005484:	20000b5a 	.word	0x20000b5a
 8005488:	20000b36 	.word	0x20000b36
 800548c:	20000b75 	.word	0x20000b75
 8005490:	20000b76 	.word	0x20000b76
 8005494:	40010c00 	.word	0x40010c00
 8005498:	20000b77 	.word	0x20000b77
 800549c:	20000b62 	.word	0x20000b62
 80054a0:	20000b5f 	.word	0x20000b5f
 80054a4:	40011000 	.word	0x40011000
 80054a8:	20000b27 	.word	0x20000b27
 80054ac:	20000b5d 	.word	0x20000b5d
 80054b0:	20000b5e 	.word	0x20000b5e
 80054b4:	20000b32 	.word	0x20000b32
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80054b8:	2200      	movs	r2, #0
 80054ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054be:	4860      	ldr	r0, [pc, #384]	; (8005640 <checkAktifCalisma+0x368>)
 80054c0:	f003 f969 	bl	8008796 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80054c4:	4b5f      	ldr	r3, [pc, #380]	; (8005644 <checkAktifCalisma+0x36c>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <checkAktifCalisma+0x21c>
 80054cc:	4b5e      	ldr	r3, [pc, #376]	; (8005648 <checkAktifCalisma+0x370>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d007      	beq.n	80054e4 <checkAktifCalisma+0x20c>
 80054d4:	4b5c      	ldr	r3, [pc, #368]	; (8005648 <checkAktifCalisma+0x370>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d003      	beq.n	80054e4 <checkAktifCalisma+0x20c>
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <checkAktifCalisma+0x374>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d107      	bne.n	80054f4 <checkAktifCalisma+0x21c>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80054e4:	2201      	movs	r2, #1
 80054e6:	2104      	movs	r1, #4
 80054e8:	4855      	ldr	r0, [pc, #340]	; (8005640 <checkAktifCalisma+0x368>)
 80054ea:	f003 f954 	bl	8008796 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80054ee:	4b58      	ldr	r3, [pc, #352]	; (8005650 <checkAktifCalisma+0x378>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80054f4:	4b56      	ldr	r3, [pc, #344]	; (8005650 <checkAktifCalisma+0x378>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02f      	beq.n	800555c <checkAktifCalisma+0x284>
 80054fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005500:	484f      	ldr	r0, [pc, #316]	; (8005640 <checkAktifCalisma+0x368>)
 8005502:	f003 f931 	bl	8008768 <HAL_GPIO_ReadPin>
 8005506:	4603      	mov	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d106      	bne.n	800551a <checkAktifCalisma+0x242>
 800550c:	4b51      	ldr	r3, [pc, #324]	; (8005654 <checkAktifCalisma+0x37c>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <checkAktifCalisma+0x250>
 800551a:	2102      	movs	r1, #2
 800551c:	484e      	ldr	r0, [pc, #312]	; (8005658 <checkAktifCalisma+0x380>)
 800551e:	f003 f923 	bl	8008768 <HAL_GPIO_ReadPin>
 8005522:	4603      	mov	r3, r0
 8005524:	2b01      	cmp	r3, #1
 8005526:	d119      	bne.n	800555c <checkAktifCalisma+0x284>
 8005528:	4b4c      	ldr	r3, [pc, #304]	; (800565c <checkAktifCalisma+0x384>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <checkAktifCalisma+0x284>
 8005530:	4b4b      	ldr	r3, [pc, #300]	; (8005660 <checkAktifCalisma+0x388>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d011      	beq.n	800555c <checkAktifCalisma+0x284>
 8005538:	4b4a      	ldr	r3, [pc, #296]	; (8005664 <checkAktifCalisma+0x38c>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <checkAktifCalisma+0x284>
 8005540:	4b49      	ldr	r3, [pc, #292]	; (8005668 <checkAktifCalisma+0x390>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <checkAktifCalisma+0x284>
					timer2=millis;
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <checkAktifCalisma+0x394>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a47      	ldr	r2, [pc, #284]	; (8005670 <checkAktifCalisma+0x398>)
 8005554:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8005556:	4b44      	ldr	r3, [pc, #272]	; (8005668 <checkAktifCalisma+0x390>)
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800555c:	4b43      	ldr	r3, [pc, #268]	; (800566c <checkAktifCalisma+0x394>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <checkAktifCalisma+0x398>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	4a43      	ldr	r2, [pc, #268]	; (8005674 <checkAktifCalisma+0x39c>)
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	4293      	cmp	r3, r2
 800556c:	d303      	bcc.n	8005576 <checkAktifCalisma+0x29e>
 800556e:	4b3e      	ldr	r3, [pc, #248]	; (8005668 <checkAktifCalisma+0x390>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d111      	bne.n	800559a <checkAktifCalisma+0x2c2>
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <checkAktifCalisma+0x384>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <checkAktifCalisma+0x2c2>
 8005584:	4b36      	ldr	r3, [pc, #216]	; (8005660 <checkAktifCalisma+0x388>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <checkAktifCalisma+0x2c2>
 8005592:	4b34      	ldr	r3, [pc, #208]	; (8005664 <checkAktifCalisma+0x38c>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <checkAktifCalisma+0x2d8>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800559a:	2200      	movs	r2, #0
 800559c:	2104      	movs	r1, #4
 800559e:	4828      	ldr	r0, [pc, #160]	; (8005640 <checkAktifCalisma+0x368>)
 80055a0:	f003 f8f9 	bl	8008796 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80055a4:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <checkAktifCalisma+0x378>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80055aa:	4b2f      	ldr	r3, [pc, #188]	; (8005668 <checkAktifCalisma+0x390>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80055b0:	4b31      	ldr	r3, [pc, #196]	; (8005678 <checkAktifCalisma+0x3a0>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <checkAktifCalisma+0x2e6>
					cerceveVar=1;
 80055b8:	4b30      	ldr	r3, [pc, #192]	; (800567c <checkAktifCalisma+0x3a4>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80055be:	4b2e      	ldr	r3, [pc, #184]	; (8005678 <checkAktifCalisma+0x3a0>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d116      	bne.n	80055f4 <checkAktifCalisma+0x31c>
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <checkAktifCalisma+0x3a8>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d112      	bne.n	80055f4 <checkAktifCalisma+0x31c>
 80055ce:	2101      	movs	r1, #1
 80055d0:	4821      	ldr	r0, [pc, #132]	; (8005658 <checkAktifCalisma+0x380>)
 80055d2:	f003 f8c9 	bl	8008768 <HAL_GPIO_ReadPin>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <checkAktifCalisma+0x31c>
 80055dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055e0:	4817      	ldr	r0, [pc, #92]	; (8005640 <checkAktifCalisma+0x368>)
 80055e2:	f003 f8c1 	bl	8008768 <HAL_GPIO_ReadPin>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <checkAktifCalisma+0x31c>
					cerceveVar=1;
 80055ec:	4b23      	ldr	r3, [pc, #140]	; (800567c <checkAktifCalisma+0x3a4>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e011      	b.n	8005618 <checkAktifCalisma+0x340>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80055f4:	4b20      	ldr	r3, [pc, #128]	; (8005678 <checkAktifCalisma+0x3a0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d10d      	bne.n	8005618 <checkAktifCalisma+0x340>
 80055fc:	2101      	movs	r1, #1
 80055fe:	4816      	ldr	r0, [pc, #88]	; (8005658 <checkAktifCalisma+0x380>)
 8005600:	f003 f8b2 	bl	8008768 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d106      	bne.n	8005618 <checkAktifCalisma+0x340>
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <checkAktifCalisma+0x3a8>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <checkAktifCalisma+0x340>
					cerceveVar=0;
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <checkAktifCalisma+0x3a4>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005618:	4b17      	ldr	r3, [pc, #92]	; (8005678 <checkAktifCalisma+0x3a0>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d134      	bne.n	800568a <checkAktifCalisma+0x3b2>
 8005620:	4b17      	ldr	r3, [pc, #92]	; (8005680 <checkAktifCalisma+0x3a8>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d130      	bne.n	800568a <checkAktifCalisma+0x3b2>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005628:	2101      	movs	r1, #1
 800562a:	480b      	ldr	r0, [pc, #44]	; (8005658 <checkAktifCalisma+0x380>)
 800562c:	f003 f89c 	bl	8008768 <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d126      	bne.n	8005684 <checkAktifCalisma+0x3ac>
						cerceveVar=1;
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <checkAktifCalisma+0x3a4>)
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e025      	b.n	800568a <checkAktifCalisma+0x3b2>
 800563e:	bf00      	nop
 8005640:	40010c00 	.word	0x40010c00
 8005644:	20000b58 	.word	0x20000b58
 8005648:	20000b33 	.word	0x20000b33
 800564c:	20000b37 	.word	0x20000b37
 8005650:	20000b5c 	.word	0x20000b5c
 8005654:	20000b5f 	.word	0x20000b5f
 8005658:	40011000 	.word	0x40011000
 800565c:	20000b75 	.word	0x20000b75
 8005660:	20000b76 	.word	0x20000b76
 8005664:	20000b27 	.word	0x20000b27
 8005668:	20000b54 	.word	0x20000b54
 800566c:	20000b00 	.word	0x20000b00
 8005670:	20000b0c 	.word	0x20000b0c
 8005674:	20000b38 	.word	0x20000b38
 8005678:	20000b28 	.word	0x20000b28
 800567c:	20000b7a 	.word	0x20000b7a
 8005680:	20000b25 	.word	0x20000b25
					} else {
						cerceveVar=0;
 8005684:	4b7f      	ldr	r3, [pc, #508]	; (8005884 <checkAktifCalisma+0x5ac>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800568a:	4b7f      	ldr	r3, [pc, #508]	; (8005888 <checkAktifCalisma+0x5b0>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d17c      	bne.n	800578c <checkAktifCalisma+0x4b4>
 8005692:	4b7e      	ldr	r3, [pc, #504]	; (800588c <checkAktifCalisma+0x5b4>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d078      	beq.n	800578c <checkAktifCalisma+0x4b4>
 800569a:	4b7d      	ldr	r3, [pc, #500]	; (8005890 <checkAktifCalisma+0x5b8>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d074      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80056a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056a6:	487b      	ldr	r0, [pc, #492]	; (8005894 <checkAktifCalisma+0x5bc>)
 80056a8:	f003 f85e 	bl	8008768 <HAL_GPIO_ReadPin>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <checkAktifCalisma+0x3e2>
 80056b2:	4b79      	ldr	r3, [pc, #484]	; (8005898 <checkAktifCalisma+0x5c0>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d068      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80056ba:	4b72      	ldr	r3, [pc, #456]	; (8005884 <checkAktifCalisma+0x5ac>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d064      	beq.n	800578c <checkAktifCalisma+0x4b4>
 80056c2:	4b76      	ldr	r3, [pc, #472]	; (800589c <checkAktifCalisma+0x5c4>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f083 0301 	eor.w	r3, r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d05d      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80056d0:	2104      	movs	r1, #4
 80056d2:	4873      	ldr	r0, [pc, #460]	; (80058a0 <checkAktifCalisma+0x5c8>)
 80056d4:	f003 f848 	bl	8008768 <HAL_GPIO_ReadPin>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <checkAktifCalisma+0x40e>
 80056de:	4b71      	ldr	r3, [pc, #452]	; (80058a4 <checkAktifCalisma+0x5cc>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d152      	bne.n	800578c <checkAktifCalisma+0x4b4>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80056e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ea:	486a      	ldr	r0, [pc, #424]	; (8005894 <checkAktifCalisma+0x5bc>)
 80056ec:	f003 f83c 	bl	8008768 <HAL_GPIO_ReadPin>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d10e      	bne.n	8005714 <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80056f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056fa:	4866      	ldr	r0, [pc, #408]	; (8005894 <checkAktifCalisma+0x5bc>)
 80056fc:	f003 f834 	bl	8008768 <HAL_GPIO_ReadPin>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d106      	bne.n	8005714 <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	4865      	ldr	r0, [pc, #404]	; (80058a0 <checkAktifCalisma+0x5c8>)
 800570a:	f003 f82d 	bl	8008768 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d003      	beq.n	800571c <checkAktifCalisma+0x444>
 8005714:	4b64      	ldr	r3, [pc, #400]	; (80058a8 <checkAktifCalisma+0x5d0>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d037      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& (yukarimotorcalisiyor==0)
 800571c:	4b63      	ldr	r3, [pc, #396]	; (80058ac <checkAktifCalisma+0x5d4>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f083 0301 	eor.w	r3, r3, #1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d030      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& (yukarivalfcalisiyor==0)
 800572a:	4b61      	ldr	r3, [pc, #388]	; (80058b0 <checkAktifCalisma+0x5d8>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f083 0301 	eor.w	r3, r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d029      	beq.n	800578c <checkAktifCalisma+0x4b4>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005738:	4b5e      	ldr	r3, [pc, #376]	; (80058b4 <checkAktifCalisma+0x5dc>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f083 0301 	eor.w	r3, r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d022      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& (devmotorasagicalisiyor==0)
 8005746:	4b5c      	ldr	r3, [pc, #368]	; (80058b8 <checkAktifCalisma+0x5e0>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f083 0301 	eor.w	r3, r3, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01b      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& (devyukarivalfcalisiyor==0)
 8005754:	4b59      	ldr	r3, [pc, #356]	; (80058bc <checkAktifCalisma+0x5e4>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f083 0301 	eor.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <checkAktifCalisma+0x4b4>
						&& (devasagivalfcalisiyor==0)) {
 8005762:	4b57      	ldr	r3, [pc, #348]	; (80058c0 <checkAktifCalisma+0x5e8>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f083 0301 	eor.w	r3, r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <checkAktifCalisma+0x4b4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005770:	2201      	movs	r2, #1
 8005772:	2102      	movs	r1, #2
 8005774:	4847      	ldr	r0, [pc, #284]	; (8005894 <checkAktifCalisma+0x5bc>)
 8005776:	f003 f80e 	bl	8008796 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800577a:	4b4b      	ldr	r3, [pc, #300]	; (80058a8 <checkAktifCalisma+0x5d0>)
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005780:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <checkAktifCalisma+0x5ec>)
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8005786:	4b50      	ldr	r3, [pc, #320]	; (80058c8 <checkAktifCalisma+0x5f0>)
 8005788:	2201      	movs	r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800578c:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <checkAktifCalisma+0x5d0>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d033      	beq.n	80057fc <checkAktifCalisma+0x524>
 8005794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005798:	483e      	ldr	r0, [pc, #248]	; (8005894 <checkAktifCalisma+0x5bc>)
 800579a:	f002 ffe5 	bl	8008768 <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d106      	bne.n	80057b2 <checkAktifCalisma+0x4da>
 80057a4:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <checkAktifCalisma+0x5c0>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <checkAktifCalisma+0x4f0>
 80057b2:	2104      	movs	r1, #4
 80057b4:	483a      	ldr	r0, [pc, #232]	; (80058a0 <checkAktifCalisma+0x5c8>)
 80057b6:	f002 ffd7 	bl	8008768 <HAL_GPIO_ReadPin>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d11d      	bne.n	80057fc <checkAktifCalisma+0x524>
 80057c0:	4b38      	ldr	r3, [pc, #224]	; (80058a4 <checkAktifCalisma+0x5cc>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <checkAktifCalisma+0x524>
 80057c8:	4b30      	ldr	r3, [pc, #192]	; (800588c <checkAktifCalisma+0x5b4>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d015      	beq.n	80057fc <checkAktifCalisma+0x524>
 80057d0:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <checkAktifCalisma+0x5b8>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d011      	beq.n	80057fc <checkAktifCalisma+0x524>
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <checkAktifCalisma+0x5ac>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <checkAktifCalisma+0x524>
 80057e0:	4b3a      	ldr	r3, [pc, #232]	; (80058cc <checkAktifCalisma+0x5f4>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f083 0301 	eor.w	r3, r3, #1
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <checkAktifCalisma+0x524>
					timer2=millis;
 80057ee:	4b38      	ldr	r3, [pc, #224]	; (80058d0 <checkAktifCalisma+0x5f8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a38      	ldr	r2, [pc, #224]	; (80058d4 <checkAktifCalisma+0x5fc>)
 80057f4:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80057f6:	4b35      	ldr	r3, [pc, #212]	; (80058cc <checkAktifCalisma+0x5f4>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80057fc:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <checkAktifCalisma+0x5f8>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <checkAktifCalisma+0x5fc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	4a34      	ldr	r2, [pc, #208]	; (80058d8 <checkAktifCalisma+0x600>)
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	4293      	cmp	r3, r2
 800580c:	d303      	bcc.n	8005816 <checkAktifCalisma+0x53e>
 800580e:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <checkAktifCalisma+0x5f4>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d114      	bne.n	8005840 <checkAktifCalisma+0x568>
 8005816:	4b1d      	ldr	r3, [pc, #116]	; (800588c <checkAktifCalisma+0x5b4>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f083 0301 	eor.w	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <checkAktifCalisma+0x568>
 8005824:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <checkAktifCalisma+0x5b8>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f083 0301 	eor.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <checkAktifCalisma+0x568>
 8005832:	4b14      	ldr	r3, [pc, #80]	; (8005884 <checkAktifCalisma+0x5ac>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f083 0301 	eor.w	r3, r3, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <checkAktifCalisma+0x57e>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005840:	2200      	movs	r2, #0
 8005842:	2102      	movs	r1, #2
 8005844:	4813      	ldr	r0, [pc, #76]	; (8005894 <checkAktifCalisma+0x5bc>)
 8005846:	f002 ffa6 	bl	8008796 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <checkAktifCalisma+0x5d0>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005850:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <checkAktifCalisma+0x5f4>)
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <checkAktifCalisma+0x5d0>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d040      	beq.n	80058e0 <checkAktifCalisma+0x608>
 800585e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005862:	480f      	ldr	r0, [pc, #60]	; (80058a0 <checkAktifCalisma+0x5c8>)
 8005864:	f002 ff80 	bl	8008768 <HAL_GPIO_ReadPin>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d138      	bne.n	80058e0 <checkAktifCalisma+0x608>
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <checkAktifCalisma+0x604>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d034      	beq.n	80058e0 <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005876:	2201      	movs	r2, #1
 8005878:	2101      	movs	r1, #1
 800587a:	4806      	ldr	r0, [pc, #24]	; (8005894 <checkAktifCalisma+0x5bc>)
 800587c:	f002 ff8b 	bl	8008796 <HAL_GPIO_WritePin>
 8005880:	e033      	b.n	80058ea <checkAktifCalisma+0x612>
 8005882:	bf00      	nop
 8005884:	20000b7a 	.word	0x20000b7a
 8005888:	20000b41 	.word	0x20000b41
 800588c:	20000b75 	.word	0x20000b75
 8005890:	20000b76 	.word	0x20000b76
 8005894:	40010c00 	.word	0x40010c00
 8005898:	20000b60 	.word	0x20000b60
 800589c:	20000b74 	.word	0x20000b74
 80058a0:	40011000 	.word	0x40011000
 80058a4:	20000b2a 	.word	0x20000b2a
 80058a8:	20000b5b 	.word	0x20000b5b
 80058ac:	20000b58 	.word	0x20000b58
 80058b0:	20000b5c 	.word	0x20000b5c
 80058b4:	20000b59 	.word	0x20000b59
 80058b8:	20000b5a 	.word	0x20000b5a
 80058bc:	20000b5d 	.word	0x20000b5d
 80058c0:	20000b5e 	.word	0x20000b5e
 80058c4:	20000b63 	.word	0x20000b63
 80058c8:	20000b84 	.word	0x20000b84
 80058cc:	20000b53 	.word	0x20000b53
 80058d0:	20000b00 	.word	0x20000b00
 80058d4:	20000b0c 	.word	0x20000b0c
 80058d8:	20000b39 	.word	0x20000b39
 80058dc:	20000b29 	.word	0x20000b29
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80058e0:	2200      	movs	r2, #0
 80058e2:	2101      	movs	r1, #1
 80058e4:	4836      	ldr	r0, [pc, #216]	; (80059c0 <checkAktifCalisma+0x6e8>)
 80058e6:	f002 ff56 	bl	8008796 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 80058ea:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <checkAktifCalisma+0x6ec>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 8080 	bne.w	80059f4 <checkAktifCalisma+0x71c>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80058f4:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <checkAktifCalisma+0x6f0>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d003      	beq.n	8005904 <checkAktifCalisma+0x62c>
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <checkAktifCalisma+0x6f0>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d177      	bne.n	80059f4 <checkAktifCalisma+0x71c>
						&& (stopVar) && (kapiSivicVar)
 8005904:	4b31      	ldr	r3, [pc, #196]	; (80059cc <checkAktifCalisma+0x6f4>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d073      	beq.n	80059f4 <checkAktifCalisma+0x71c>
 800590c:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <checkAktifCalisma+0x6f8>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d06f      	beq.n	80059f4 <checkAktifCalisma+0x71c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005918:	4829      	ldr	r0, [pc, #164]	; (80059c0 <checkAktifCalisma+0x6e8>)
 800591a:	f002 ff25 	bl	8008768 <HAL_GPIO_ReadPin>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d167      	bne.n	80059f4 <checkAktifCalisma+0x71c>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005928:	482a      	ldr	r0, [pc, #168]	; (80059d4 <checkAktifCalisma+0x6fc>)
 800592a:	f002 ff1d 	bl	8008768 <HAL_GPIO_ReadPin>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <checkAktifCalisma+0x664>
 8005934:	4b28      	ldr	r3, [pc, #160]	; (80059d8 <checkAktifCalisma+0x700>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d15b      	bne.n	80059f4 <checkAktifCalisma+0x71c>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800593c:	2140      	movs	r1, #64	; 0x40
 800593e:	4825      	ldr	r0, [pc, #148]	; (80059d4 <checkAktifCalisma+0x6fc>)
 8005940:	f002 ff12 	bl	8008768 <HAL_GPIO_ReadPin>
 8005944:	4603      	mov	r3, r0
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10f      	bne.n	800596a <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800594a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800594e:	481c      	ldr	r0, [pc, #112]	; (80059c0 <checkAktifCalisma+0x6e8>)
 8005950:	f002 ff0a 	bl	8008768 <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800595a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800595e:	4818      	ldr	r0, [pc, #96]	; (80059c0 <checkAktifCalisma+0x6e8>)
 8005960:	f002 ff02 	bl	8008768 <HAL_GPIO_ReadPin>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d003      	beq.n	8005972 <checkAktifCalisma+0x69a>
 800596a:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <checkAktifCalisma+0x704>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d040      	beq.n	80059f4 <checkAktifCalisma+0x71c>
						&& (yukarimotorcalisiyor==0)
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <checkAktifCalisma+0x708>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	f083 0301 	eor.w	r3, r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d039      	beq.n	80059f4 <checkAktifCalisma+0x71c>
						&& (yukarivalfcalisiyor==0)
 8005980:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <checkAktifCalisma+0x70c>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f083 0301 	eor.w	r3, r3, #1
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d032      	beq.n	80059f4 <checkAktifCalisma+0x71c>
						&& (asagivalfcalisiyor==0)
 800598e:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <checkAktifCalisma+0x710>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f083 0301 	eor.w	r3, r3, #1
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02b      	beq.n	80059f4 <checkAktifCalisma+0x71c>
						&& (devmotorasagicalisiyor==0)
 800599c:	4b13      	ldr	r3, [pc, #76]	; (80059ec <checkAktifCalisma+0x714>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f083 0301 	eor.w	r3, r3, #1
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d024      	beq.n	80059f4 <checkAktifCalisma+0x71c>
						&&(devasagivalfcalisiyor==0)) {
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <checkAktifCalisma+0x718>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f083 0301 	eor.w	r3, r3, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01d      	beq.n	80059f4 <checkAktifCalisma+0x71c>

					devmotoryukaricalisiyor=1;
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <checkAktifCalisma+0x704>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e01c      	b.n	80059fa <checkAktifCalisma+0x722>
 80059c0:	40010c00 	.word	0x40010c00
 80059c4:	20000b41 	.word	0x20000b41
 80059c8:	20000b33 	.word	0x20000b33
 80059cc:	20000b75 	.word	0x20000b75
 80059d0:	20000b76 	.word	0x20000b76
 80059d4:	40011000 	.word	0x40011000
 80059d8:	20000b34 	.word	0x20000b34
 80059dc:	20000b59 	.word	0x20000b59
 80059e0:	20000b58 	.word	0x20000b58
 80059e4:	20000b5c 	.word	0x20000b5c
 80059e8:	20000b5b 	.word	0x20000b5b
 80059ec:	20000b5a 	.word	0x20000b5a
 80059f0:	20000b5e 	.word	0x20000b5e
				} else {
					devmotoryukaricalisiyor=0;
 80059f4:	4b64      	ldr	r3, [pc, #400]	; (8005b88 <checkAktifCalisma+0x8b0>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 80059fa:	4b63      	ldr	r3, [pc, #396]	; (8005b88 <checkAktifCalisma+0x8b0>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <checkAktifCalisma+0x73a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005a02:	2201      	movs	r2, #1
 8005a04:	2120      	movs	r1, #32
 8005a06:	4861      	ldr	r0, [pc, #388]	; (8005b8c <checkAktifCalisma+0x8b4>)
 8005a08:	f002 fec5 	bl	8008796 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005a0c:	4b60      	ldr	r3, [pc, #384]	; (8005b90 <checkAktifCalisma+0x8b8>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005a12:	4b5f      	ldr	r3, [pc, #380]	; (8005b90 <checkAktifCalisma+0x8b8>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d025      	beq.n	8005a66 <checkAktifCalisma+0x78e>
 8005a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a1e:	485d      	ldr	r0, [pc, #372]	; (8005b94 <checkAktifCalisma+0x8bc>)
 8005a20:	f002 fea2 	bl	8008768 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d007      	beq.n	8005a3a <checkAktifCalisma+0x762>
 8005a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a2e:	4857      	ldr	r0, [pc, #348]	; (8005b8c <checkAktifCalisma+0x8b4>)
 8005a30:	f002 fe9a 	bl	8008768 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d115      	bne.n	8005a66 <checkAktifCalisma+0x78e>
 8005a3a:	4b57      	ldr	r3, [pc, #348]	; (8005b98 <checkAktifCalisma+0x8c0>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d011      	beq.n	8005a66 <checkAktifCalisma+0x78e>
 8005a42:	4b56      	ldr	r3, [pc, #344]	; (8005b9c <checkAktifCalisma+0x8c4>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <checkAktifCalisma+0x78e>
 8005a4a:	4b55      	ldr	r3, [pc, #340]	; (8005ba0 <checkAktifCalisma+0x8c8>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <checkAktifCalisma+0x78e>
					timer2=millis;
 8005a58:	4b52      	ldr	r3, [pc, #328]	; (8005ba4 <checkAktifCalisma+0x8cc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a52      	ldr	r2, [pc, #328]	; (8005ba8 <checkAktifCalisma+0x8d0>)
 8005a5e:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005a60:	4b4f      	ldr	r3, [pc, #316]	; (8005ba0 <checkAktifCalisma+0x8c8>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005a66:	4b4f      	ldr	r3, [pc, #316]	; (8005ba4 <checkAktifCalisma+0x8cc>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ba8 <checkAktifCalisma+0x8d0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	4a4e      	ldr	r2, [pc, #312]	; (8005bac <checkAktifCalisma+0x8d4>)
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d303      	bcc.n	8005a80 <checkAktifCalisma+0x7a8>
 8005a78:	4b49      	ldr	r3, [pc, #292]	; (8005ba0 <checkAktifCalisma+0x8c8>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <checkAktifCalisma+0x7c4>
 8005a80:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <checkAktifCalisma+0x8c0>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f083 0301 	eor.w	r3, r3, #1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <checkAktifCalisma+0x7c4>
 8005a8e:	4b43      	ldr	r3, [pc, #268]	; (8005b9c <checkAktifCalisma+0x8c4>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f083 0301 	eor.w	r3, r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <checkAktifCalisma+0x7da>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2120      	movs	r1, #32
 8005aa0:	483a      	ldr	r0, [pc, #232]	; (8005b8c <checkAktifCalisma+0x8b4>)
 8005aa2:	f002 fe78 	bl	8008796 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <checkAktifCalisma+0x8b8>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005aac:	4b3c      	ldr	r3, [pc, #240]	; (8005ba0 <checkAktifCalisma+0x8c8>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <checkAktifCalisma+0x8d8>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8088 	bne.w	8005bcc <checkAktifCalisma+0x8f4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005abc:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <checkAktifCalisma+0x8dc>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d003      	beq.n	8005acc <checkAktifCalisma+0x7f4>
 8005ac4:	4b3b      	ldr	r3, [pc, #236]	; (8005bb4 <checkAktifCalisma+0x8dc>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d17f      	bne.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (stopVar) && (kapiSivicVar)
 8005acc:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <checkAktifCalisma+0x8c0>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d07b      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
 8005ad4:	4b31      	ldr	r3, [pc, #196]	; (8005b9c <checkAktifCalisma+0x8c4>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d077      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005adc:	2140      	movs	r1, #64	; 0x40
 8005ade:	482b      	ldr	r0, [pc, #172]	; (8005b8c <checkAktifCalisma+0x8b4>)
 8005ae0:	f002 fe42 	bl	8008768 <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d170      	bne.n	8005bcc <checkAktifCalisma+0x8f4>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005aee:	4827      	ldr	r0, [pc, #156]	; (8005b8c <checkAktifCalisma+0x8b4>)
 8005af0:	f002 fe3a 	bl	8008768 <HAL_GPIO_ReadPin>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <checkAktifCalisma+0x82a>
 8005afa:	4b2f      	ldr	r3, [pc, #188]	; (8005bb8 <checkAktifCalisma+0x8e0>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d164      	bne.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b06:	4823      	ldr	r0, [pc, #140]	; (8005b94 <checkAktifCalisma+0x8bc>)
 8005b08:	f002 fe2e 	bl	8008768 <HAL_GPIO_ReadPin>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10f      	bne.n	8005b32 <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b16:	481f      	ldr	r0, [pc, #124]	; (8005b94 <checkAktifCalisma+0x8bc>)
 8005b18:	f002 fe26 	bl	8008768 <HAL_GPIO_ReadPin>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d107      	bne.n	8005b32 <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b26:	481b      	ldr	r0, [pc, #108]	; (8005b94 <checkAktifCalisma+0x8bc>)
 8005b28:	f002 fe1e 	bl	8008768 <HAL_GPIO_ReadPin>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d003      	beq.n	8005b3a <checkAktifCalisma+0x862>
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <checkAktifCalisma+0x8e4>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d048      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (yukarimotorcalisiyor==0)
 8005b3a:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <checkAktifCalisma+0x8e8>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f083 0301 	eor.w	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d041      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (yukarivalfcalisiyor==0)
 8005b48:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <checkAktifCalisma+0x8ec>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d03a      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (asagivalfcalisiyor==0)
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <checkAktifCalisma+0x8f0>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d033      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (devyukarivalfcalisiyor==0)
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <checkAktifCalisma+0x8b8>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d02c      	beq.n	8005bcc <checkAktifCalisma+0x8f4>
						&& (devmotoryukaricalisiyor==0)) {
 8005b72:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <checkAktifCalisma+0x8b0>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f083 0301 	eor.w	r3, r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d025      	beq.n	8005bcc <checkAktifCalisma+0x8f4>

					devmotorasagicalisiyor=1;
 8005b80:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <checkAktifCalisma+0x8e4>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e024      	b.n	8005bd2 <checkAktifCalisma+0x8fa>
 8005b88:	20000b59 	.word	0x20000b59
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	20000b5d 	.word	0x20000b5d
 8005b94:	40010c00 	.word	0x40010c00
 8005b98:	20000b75 	.word	0x20000b75
 8005b9c:	20000b76 	.word	0x20000b76
 8005ba0:	20000b55 	.word	0x20000b55
 8005ba4:	20000b00 	.word	0x20000b00
 8005ba8:	20000b0c 	.word	0x20000b0c
 8005bac:	20000b3a 	.word	0x20000b3a
 8005bb0:	20000b41 	.word	0x20000b41
 8005bb4:	20000b33 	.word	0x20000b33
 8005bb8:	20000b35 	.word	0x20000b35
 8005bbc:	20000b5a 	.word	0x20000b5a
 8005bc0:	20000b58 	.word	0x20000b58
 8005bc4:	20000b5c 	.word	0x20000b5c
 8005bc8:	20000b5b 	.word	0x20000b5b
				} else {
					devmotorasagicalisiyor=0;
 8005bcc:	4b96      	ldr	r3, [pc, #600]	; (8005e28 <checkAktifCalisma+0xb50>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005bd2:	4b95      	ldr	r3, [pc, #596]	; (8005e28 <checkAktifCalisma+0xb50>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <checkAktifCalisma+0x912>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005bda:	2201      	movs	r2, #1
 8005bdc:	2110      	movs	r1, #16
 8005bde:	4893      	ldr	r0, [pc, #588]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005be0:	f002 fdd9 	bl	8008796 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005be4:	4b92      	ldr	r3, [pc, #584]	; (8005e30 <checkAktifCalisma+0xb58>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005bea:	4b91      	ldr	r3, [pc, #580]	; (8005e30 <checkAktifCalisma+0xb58>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d024      	beq.n	8005c3c <checkAktifCalisma+0x964>
 8005bf2:	2140      	movs	r1, #64	; 0x40
 8005bf4:	488d      	ldr	r0, [pc, #564]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005bf6:	f002 fdb7 	bl	8008768 <HAL_GPIO_ReadPin>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d007      	beq.n	8005c10 <checkAktifCalisma+0x938>
 8005c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c04:	4889      	ldr	r0, [pc, #548]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005c06:	f002 fdaf 	bl	8008768 <HAL_GPIO_ReadPin>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d115      	bne.n	8005c3c <checkAktifCalisma+0x964>
 8005c10:	4b88      	ldr	r3, [pc, #544]	; (8005e34 <checkAktifCalisma+0xb5c>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d011      	beq.n	8005c3c <checkAktifCalisma+0x964>
 8005c18:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <checkAktifCalisma+0xb60>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <checkAktifCalisma+0x964>
 8005c20:	4b86      	ldr	r3, [pc, #536]	; (8005e3c <checkAktifCalisma+0xb64>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	f083 0301 	eor.w	r3, r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d006      	beq.n	8005c3c <checkAktifCalisma+0x964>
					timer2=millis;
 8005c2e:	4b84      	ldr	r3, [pc, #528]	; (8005e40 <checkAktifCalisma+0xb68>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a84      	ldr	r2, [pc, #528]	; (8005e44 <checkAktifCalisma+0xb6c>)
 8005c34:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005c36:	4b81      	ldr	r3, [pc, #516]	; (8005e3c <checkAktifCalisma+0xb64>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005c3c:	4b80      	ldr	r3, [pc, #512]	; (8005e40 <checkAktifCalisma+0xb68>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b80      	ldr	r3, [pc, #512]	; (8005e44 <checkAktifCalisma+0xb6c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	4a80      	ldr	r2, [pc, #512]	; (8005e48 <checkAktifCalisma+0xb70>)
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d303      	bcc.n	8005c56 <checkAktifCalisma+0x97e>
 8005c4e:	4b7b      	ldr	r3, [pc, #492]	; (8005e3c <checkAktifCalisma+0xb64>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <checkAktifCalisma+0x99a>
 8005c56:	4b77      	ldr	r3, [pc, #476]	; (8005e34 <checkAktifCalisma+0xb5c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f083 0301 	eor.w	r3, r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <checkAktifCalisma+0x99a>
 8005c64:	4b74      	ldr	r3, [pc, #464]	; (8005e38 <checkAktifCalisma+0xb60>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f083 0301 	eor.w	r3, r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <checkAktifCalisma+0x9b0>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005c72:	2200      	movs	r2, #0
 8005c74:	2110      	movs	r1, #16
 8005c76:	486d      	ldr	r0, [pc, #436]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005c78:	f002 fd8d 	bl	8008796 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005c7c:	4b6c      	ldr	r3, [pc, #432]	; (8005e30 <checkAktifCalisma+0xb58>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005c82:	4b6e      	ldr	r3, [pc, #440]	; (8005e3c <checkAktifCalisma+0xb64>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c8c:	486f      	ldr	r0, [pc, #444]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005c8e:	f002 fd6b 	bl	8008768 <HAL_GPIO_ReadPin>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d120      	bne.n	8005cda <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c9c:	486b      	ldr	r0, [pc, #428]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005c9e:	f002 fd63 	bl	8008768 <HAL_GPIO_ReadPin>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d118      	bne.n	8005cda <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005ca8:	2104      	movs	r1, #4
 8005caa:	4868      	ldr	r0, [pc, #416]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005cac:	f002 fd5c 	bl	8008768 <HAL_GPIO_ReadPin>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d111      	bne.n	8005cda <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4864      	ldr	r0, [pc, #400]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005cba:	f002 fd55 	bl	8008768 <HAL_GPIO_ReadPin>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4861      	ldr	r0, [pc, #388]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005cc8:	f002 fd4e 	bl	8008768 <HAL_GPIO_ReadPin>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <checkAktifCalisma+0xa02>
					makineStop=1;
 8005cd2:	4b5f      	ldr	r3, [pc, #380]	; (8005e50 <checkAktifCalisma+0xb78>)
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	e002      	b.n	8005ce0 <checkAktifCalisma+0xa08>
				} else {
					makineStop=0;
 8005cda:	4b5d      	ldr	r3, [pc, #372]	; (8005e50 <checkAktifCalisma+0xb78>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ce0:	4b5c      	ldr	r3, [pc, #368]	; (8005e54 <checkAktifCalisma+0xb7c>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d144      	bne.n	8005d72 <checkAktifCalisma+0xa9a>
 8005ce8:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <checkAktifCalisma+0xb80>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d003      	beq.n	8005cf8 <checkAktifCalisma+0xa20>
 8005cf0:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <checkAktifCalisma+0xb80>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d13c      	bne.n	8005d72 <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005cf8:	2180      	movs	r1, #128	; 0x80
 8005cfa:	484c      	ldr	r0, [pc, #304]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005cfc:	f002 fd34 	bl	8008768 <HAL_GPIO_ReadPin>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <checkAktifCalisma+0xa36>
 8005d06:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <checkAktifCalisma+0xb84>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <checkAktifCalisma+0xa4e>
 8005d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d12:	484e      	ldr	r0, [pc, #312]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005d14:	f002 fd28 	bl	8008768 <HAL_GPIO_ReadPin>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d129      	bne.n	8005d72 <checkAktifCalisma+0xa9a>
 8005d1e:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <checkAktifCalisma+0xb84>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d125      	bne.n	8005d72 <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d26:	2104      	movs	r1, #4
 8005d28:	4840      	ldr	r0, [pc, #256]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005d2a:	f002 fd1d 	bl	8008768 <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d003      	beq.n	8005d3c <checkAktifCalisma+0xa64>
 8005d34:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <checkAktifCalisma+0xb88>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11a      	bne.n	8005d72 <checkAktifCalisma+0xa9a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	483b      	ldr	r0, [pc, #236]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005d40:	f002 fd12 	bl	8008768 <HAL_GPIO_ReadPin>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d113      	bne.n	8005d72 <checkAktifCalisma+0xa9a>
						&&(butonKontrol==0)
 8005d4a:	4b46      	ldr	r3, [pc, #280]	; (8005e64 <checkAktifCalisma+0xb8c>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f083 0301 	eor.w	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00c      	beq.n	8005d72 <checkAktifCalisma+0xa9a>
						&&(makineStop==1)) {
 8005d58:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <checkAktifCalisma+0xb78>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <checkAktifCalisma+0xa9a>

					kapi1prudhome=1;
 8005d60:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <checkAktifCalisma+0xb90>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005d66:	4b36      	ldr	r3, [pc, #216]	; (8005e40 <checkAktifCalisma+0xb68>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a40      	ldr	r2, [pc, #256]	; (8005e6c <checkAktifCalisma+0xb94>)
 8005d6c:	6013      	str	r3, [r2, #0]
					bekle();
 8005d6e:	f7ff f883 	bl	8004e78 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005d72:	4b33      	ldr	r3, [pc, #204]	; (8005e40 <checkAktifCalisma+0xb68>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <checkAktifCalisma+0xb94>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <checkAktifCalisma+0xb98>)
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d211      	bcs.n	8005da8 <checkAktifCalisma+0xad0>
 8005d84:	2104      	movs	r1, #4
 8005d86:	4829      	ldr	r0, [pc, #164]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005d88:	f002 fcee 	bl	8008768 <HAL_GPIO_ReadPin>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <checkAktifCalisma+0xad0>
 8005d92:	4b33      	ldr	r3, [pc, #204]	; (8005e60 <checkAktifCalisma+0xb88>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <checkAktifCalisma+0xad0>
 8005d9a:	4b2d      	ldr	r3, [pc, #180]	; (8005e50 <checkAktifCalisma+0xb78>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f083 0301 	eor.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <checkAktifCalisma+0xad6>
					kapi1prudhome=0;
 8005da8:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <checkAktifCalisma+0xb90>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005dae:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <checkAktifCalisma+0xb7c>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d160      	bne.n	8005e78 <checkAktifCalisma+0xba0>
 8005db6:	4b28      	ldr	r3, [pc, #160]	; (8005e58 <checkAktifCalisma+0xb80>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d003      	beq.n	8005dc6 <checkAktifCalisma+0xaee>
 8005dbe:	4b26      	ldr	r3, [pc, #152]	; (8005e58 <checkAktifCalisma+0xb80>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d158      	bne.n	8005e78 <checkAktifCalisma+0xba0>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005dc6:	2104      	movs	r1, #4
 8005dc8:	4818      	ldr	r0, [pc, #96]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005dca:	f002 fccd 	bl	8008768 <HAL_GPIO_ReadPin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d003      	beq.n	8005ddc <checkAktifCalisma+0xb04>
 8005dd4:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <checkAktifCalisma+0xb88>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d14d      	bne.n	8005e78 <checkAktifCalisma+0xba0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4813      	ldr	r0, [pc, #76]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005de0:	f002 fcc2 	bl	8008768 <HAL_GPIO_ReadPin>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d146      	bne.n	8005e78 <checkAktifCalisma+0xba0>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	480f      	ldr	r0, [pc, #60]	; (8005e2c <checkAktifCalisma+0xb54>)
 8005dee:	f002 fcbb 	bl	8008768 <HAL_GPIO_ReadPin>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <checkAktifCalisma+0xb28>
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <checkAktifCalisma+0xb84>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <checkAktifCalisma+0xb40>
 8005e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e04:	4811      	ldr	r0, [pc, #68]	; (8005e4c <checkAktifCalisma+0xb74>)
 8005e06:	f002 fcaf 	bl	8008768 <HAL_GPIO_ReadPin>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d133      	bne.n	8005e78 <checkAktifCalisma+0xba0>
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <checkAktifCalisma+0xb84>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d12f      	bne.n	8005e78 <checkAktifCalisma+0xba0>
						&&(makineStop==1)) {
 8005e18:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <checkAktifCalisma+0xb78>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02b      	beq.n	8005e78 <checkAktifCalisma+0xba0>

					kapi1butonkontrol=1;
 8005e20:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <checkAktifCalisma+0xb9c>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e02a      	b.n	8005e7e <checkAktifCalisma+0xba6>
 8005e28:	20000b5a 	.word	0x20000b5a
 8005e2c:	40011000 	.word	0x40011000
 8005e30:	20000b5e 	.word	0x20000b5e
 8005e34:	20000b75 	.word	0x20000b75
 8005e38:	20000b76 	.word	0x20000b76
 8005e3c:	20000b56 	.word	0x20000b56
 8005e40:	20000b00 	.word	0x20000b00
 8005e44:	20000b0c 	.word	0x20000b0c
 8005e48:	20000b3a 	.word	0x20000b3a
 8005e4c:	40010c00 	.word	0x40010c00
 8005e50:	20000b65 	.word	0x20000b65
 8005e54:	20000b2d 	.word	0x20000b2d
 8005e58:	20000b2c 	.word	0x20000b2c
 8005e5c:	20000b30 	.word	0x20000b30
 8005e60:	20000b2a 	.word	0x20000b2a
 8005e64:	20000b52 	.word	0x20000b52
 8005e68:	20000b66 	.word	0x20000b66
 8005e6c:	20000b04 	.word	0x20000b04
 8005e70:	20000b3d 	.word	0x20000b3d
 8005e74:	20000b67 	.word	0x20000b67
				} else {
					kapi1butonkontrol=0;
 8005e78:	4b8b      	ldr	r3, [pc, #556]	; (80060a8 <checkAktifCalisma+0xdd0>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005e7e:	4b8b      	ldr	r3, [pc, #556]	; (80060ac <checkAktifCalisma+0xdd4>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d121      	bne.n	8005eca <checkAktifCalisma+0xbf2>
 8005e86:	4b8a      	ldr	r3, [pc, #552]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d003      	beq.n	8005e96 <checkAktifCalisma+0xbbe>
 8005e8e:	4b88      	ldr	r3, [pc, #544]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d119      	bne.n	8005eca <checkAktifCalisma+0xbf2>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e96:	2104      	movs	r1, #4
 8005e98:	4886      	ldr	r0, [pc, #536]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005e9a:	f002 fc65 	bl	8008768 <HAL_GPIO_ReadPin>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d003      	beq.n	8005eac <checkAktifCalisma+0xbd4>
 8005ea4:	4b84      	ldr	r3, [pc, #528]	; (80060b8 <checkAktifCalisma+0xde0>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10e      	bne.n	8005eca <checkAktifCalisma+0xbf2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005eac:	2102      	movs	r1, #2
 8005eae:	4881      	ldr	r0, [pc, #516]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005eb0:	f002 fc5a 	bl	8008768 <HAL_GPIO_ReadPin>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <checkAktifCalisma+0xbf2>
						&&(makineStop==1)) {
 8005eba:	4b80      	ldr	r3, [pc, #512]	; (80060bc <checkAktifCalisma+0xde4>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <checkAktifCalisma+0xbf2>

					kapi1pizzato=1;
 8005ec2:	4b7f      	ldr	r3, [pc, #508]	; (80060c0 <checkAktifCalisma+0xde8>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e002      	b.n	8005ed0 <checkAktifCalisma+0xbf8>
				} else {
					kapi1pizzato=0;
 8005eca:	4b7d      	ldr	r3, [pc, #500]	; (80060c0 <checkAktifCalisma+0xde8>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005ed0:	4b75      	ldr	r3, [pc, #468]	; (80060a8 <checkAktifCalisma+0xdd0>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <checkAktifCalisma+0xc10>
 8005ed8:	4b79      	ldr	r3, [pc, #484]	; (80060c0 <checkAktifCalisma+0xde8>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <checkAktifCalisma+0xc10>
 8005ee0:	4b78      	ldr	r3, [pc, #480]	; (80060c4 <checkAktifCalisma+0xdec>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <checkAktifCalisma+0xc1c>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005ee8:	2201      	movs	r2, #1
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	4876      	ldr	r0, [pc, #472]	; (80060c8 <checkAktifCalisma+0xdf0>)
 8005eee:	f002 fc52 	bl	8008796 <HAL_GPIO_WritePin>
 8005ef2:	e004      	b.n	8005efe <checkAktifCalisma+0xc26>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	4873      	ldr	r0, [pc, #460]	; (80060c8 <checkAktifCalisma+0xdf0>)
 8005efa:	f002 fc4c 	bl	8008796 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005efe:	4b73      	ldr	r3, [pc, #460]	; (80060cc <checkAktifCalisma+0xdf4>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d141      	bne.n	8005f8a <checkAktifCalisma+0xcb2>
 8005f06:	4b6a      	ldr	r3, [pc, #424]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d003      	beq.n	8005f16 <checkAktifCalisma+0xc3e>
 8005f0e:	4b68      	ldr	r3, [pc, #416]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d139      	bne.n	8005f8a <checkAktifCalisma+0xcb2>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f1a:	4866      	ldr	r0, [pc, #408]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005f1c:	f002 fc24 	bl	8008768 <HAL_GPIO_ReadPin>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <checkAktifCalisma+0xc56>
 8005f26:	4b6a      	ldr	r3, [pc, #424]	; (80060d0 <checkAktifCalisma+0xdf8>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <checkAktifCalisma+0xc6e>
 8005f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f32:	4868      	ldr	r0, [pc, #416]	; (80060d4 <checkAktifCalisma+0xdfc>)
 8005f34:	f002 fc18 	bl	8008768 <HAL_GPIO_ReadPin>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d125      	bne.n	8005f8a <checkAktifCalisma+0xcb2>
 8005f3e:	4b64      	ldr	r3, [pc, #400]	; (80060d0 <checkAktifCalisma+0xdf8>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d121      	bne.n	8005f8a <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005f46:	2102      	movs	r1, #2
 8005f48:	485a      	ldr	r0, [pc, #360]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005f4a:	f002 fc0d 	bl	8008768 <HAL_GPIO_ReadPin>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d11a      	bne.n	8005f8a <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005f54:	2104      	movs	r1, #4
 8005f56:	4857      	ldr	r0, [pc, #348]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005f58:	f002 fc06 	bl	8008768 <HAL_GPIO_ReadPin>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d113      	bne.n	8005f8a <checkAktifCalisma+0xcb2>
						&&(makineStop==1)
 8005f62:	4b56      	ldr	r3, [pc, #344]	; (80060bc <checkAktifCalisma+0xde4>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00f      	beq.n	8005f8a <checkAktifCalisma+0xcb2>
						&&(butonKontrol==0)) {
 8005f6a:	4b5b      	ldr	r3, [pc, #364]	; (80060d8 <checkAktifCalisma+0xe00>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f083 0301 	eor.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <checkAktifCalisma+0xcb2>

					kapi2prudhome=1;
 8005f78:	4b58      	ldr	r3, [pc, #352]	; (80060dc <checkAktifCalisma+0xe04>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005f7e:	4b58      	ldr	r3, [pc, #352]	; (80060e0 <checkAktifCalisma+0xe08>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <checkAktifCalisma+0xe0c>)
 8005f84:	6013      	str	r3, [r2, #0]
					bekle();
 8005f86:	f7fe ff77 	bl	8004e78 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005f8a:	4b55      	ldr	r3, [pc, #340]	; (80060e0 <checkAktifCalisma+0xe08>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b55      	ldr	r3, [pc, #340]	; (80060e4 <checkAktifCalisma+0xe0c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <checkAktifCalisma+0xe10>)
 8005f96:	7812      	ldrb	r2, [r2, #0]
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d20d      	bcs.n	8005fb8 <checkAktifCalisma+0xce0>
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	4845      	ldr	r0, [pc, #276]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005fa0:	f002 fbe2 	bl	8008768 <HAL_GPIO_ReadPin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d006      	beq.n	8005fb8 <checkAktifCalisma+0xce0>
 8005faa:	4b44      	ldr	r3, [pc, #272]	; (80060bc <checkAktifCalisma+0xde4>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f083 0301 	eor.w	r3, r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <checkAktifCalisma+0xce6>
					kapi2prudhome=0;
 8005fb8:	4b48      	ldr	r3, [pc, #288]	; (80060dc <checkAktifCalisma+0xe04>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fbe:	4b43      	ldr	r3, [pc, #268]	; (80060cc <checkAktifCalisma+0xdf4>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d135      	bne.n	8006032 <checkAktifCalisma+0xd5a>
 8005fc6:	4b3a      	ldr	r3, [pc, #232]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d003      	beq.n	8005fd6 <checkAktifCalisma+0xcfe>
 8005fce:	4b38      	ldr	r3, [pc, #224]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d12d      	bne.n	8006032 <checkAktifCalisma+0xd5a>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fda:	4836      	ldr	r0, [pc, #216]	; (80060b4 <checkAktifCalisma+0xddc>)
 8005fdc:	f002 fbc4 	bl	8008768 <HAL_GPIO_ReadPin>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <checkAktifCalisma+0xd16>
 8005fe6:	4b3a      	ldr	r3, [pc, #232]	; (80060d0 <checkAktifCalisma+0xdf8>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <checkAktifCalisma+0xd2e>
 8005fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ff2:	4838      	ldr	r0, [pc, #224]	; (80060d4 <checkAktifCalisma+0xdfc>)
 8005ff4:	f002 fbb8 	bl	8008768 <HAL_GPIO_ReadPin>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d119      	bne.n	8006032 <checkAktifCalisma+0xd5a>
 8005ffe:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <checkAktifCalisma+0xdf8>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d115      	bne.n	8006032 <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006006:	2102      	movs	r1, #2
 8006008:	482a      	ldr	r0, [pc, #168]	; (80060b4 <checkAktifCalisma+0xddc>)
 800600a:	f002 fbad 	bl	8008768 <HAL_GPIO_ReadPin>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10e      	bne.n	8006032 <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006014:	2104      	movs	r1, #4
 8006016:	4827      	ldr	r0, [pc, #156]	; (80060b4 <checkAktifCalisma+0xddc>)
 8006018:	f002 fba6 	bl	8008768 <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d107      	bne.n	8006032 <checkAktifCalisma+0xd5a>
						&&(makineStop==1)) {
 8006022:	4b26      	ldr	r3, [pc, #152]	; (80060bc <checkAktifCalisma+0xde4>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <checkAktifCalisma+0xd5a>

					kapi2butonkontrol=1;
 800602a:	4b30      	ldr	r3, [pc, #192]	; (80060ec <checkAktifCalisma+0xe14>)
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	e002      	b.n	8006038 <checkAktifCalisma+0xd60>
				} else {
					kapi2butonkontrol=0;
 8006032:	4b2e      	ldr	r3, [pc, #184]	; (80060ec <checkAktifCalisma+0xe14>)
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006038:	4b24      	ldr	r3, [pc, #144]	; (80060cc <checkAktifCalisma+0xdf4>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d11d      	bne.n	800607c <checkAktifCalisma+0xda4>
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <checkAktifCalisma+0xdd8>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d003      	beq.n	8006050 <checkAktifCalisma+0xd78>
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <checkAktifCalisma+0xdd8>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d115      	bne.n	800607c <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006050:	2102      	movs	r1, #2
 8006052:	4818      	ldr	r0, [pc, #96]	; (80060b4 <checkAktifCalisma+0xddc>)
 8006054:	f002 fb88 	bl	8008768 <HAL_GPIO_ReadPin>
 8006058:	4603      	mov	r3, r0
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10e      	bne.n	800607c <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800605e:	2104      	movs	r1, #4
 8006060:	4814      	ldr	r0, [pc, #80]	; (80060b4 <checkAktifCalisma+0xddc>)
 8006062:	f002 fb81 	bl	8008768 <HAL_GPIO_ReadPin>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <checkAktifCalisma+0xda4>
						&&(makineStop==1)) {
 800606c:	4b13      	ldr	r3, [pc, #76]	; (80060bc <checkAktifCalisma+0xde4>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <checkAktifCalisma+0xda4>

					kapi2pizzato=1;
 8006074:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <checkAktifCalisma+0xe18>)
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e002      	b.n	8006082 <checkAktifCalisma+0xdaa>
				} else {
					kapi2pizzato=0;
 800607c:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <checkAktifCalisma+0xe18>)
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006082:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <checkAktifCalisma+0xe14>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d107      	bne.n	800609a <checkAktifCalisma+0xdc2>
 800608a:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <checkAktifCalisma+0xe18>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <checkAktifCalisma+0xdc2>
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <checkAktifCalisma+0xe04>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d02c      	beq.n	80060f4 <checkAktifCalisma+0xe1c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800609a:	2201      	movs	r2, #1
 800609c:	2140      	movs	r1, #64	; 0x40
 800609e:	480a      	ldr	r0, [pc, #40]	; (80060c8 <checkAktifCalisma+0xdf0>)
 80060a0:	f002 fb79 	bl	8008796 <HAL_GPIO_WritePin>
 80060a4:	e02b      	b.n	80060fe <checkAktifCalisma+0xe26>
 80060a6:	bf00      	nop
 80060a8:	20000b67 	.word	0x20000b67
 80060ac:	20000b2d 	.word	0x20000b2d
 80060b0:	20000b2c 	.word	0x20000b2c
 80060b4:	40011000 	.word	0x40011000
 80060b8:	20000b2a 	.word	0x20000b2a
 80060bc:	20000b65 	.word	0x20000b65
 80060c0:	20000b68 	.word	0x20000b68
 80060c4:	20000b66 	.word	0x20000b66
 80060c8:	40010800 	.word	0x40010800
 80060cc:	20000b2e 	.word	0x20000b2e
 80060d0:	20000b30 	.word	0x20000b30
 80060d4:	40010c00 	.word	0x40010c00
 80060d8:	20000b52 	.word	0x20000b52
 80060dc:	20000b69 	.word	0x20000b69
 80060e0:	20000b00 	.word	0x20000b00
 80060e4:	20000b04 	.word	0x20000b04
 80060e8:	20000b3e 	.word	0x20000b3e
 80060ec:	20000b6a 	.word	0x20000b6a
 80060f0:	20000b6b 	.word	0x20000b6b
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80060f4:	2200      	movs	r2, #0
 80060f6:	2140      	movs	r1, #64	; 0x40
 80060f8:	488d      	ldr	r0, [pc, #564]	; (8006330 <checkAktifCalisma+0x1058>)
 80060fa:	f002 fb4c 	bl	8008796 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80060fe:	4b8d      	ldr	r3, [pc, #564]	; (8006334 <checkAktifCalisma+0x105c>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <checkAktifCalisma+0xe36>
 8006106:	4b8b      	ldr	r3, [pc, #556]	; (8006334 <checkAktifCalisma+0x105c>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d115      	bne.n	800613a <checkAktifCalisma+0xe62>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800610e:	2104      	movs	r1, #4
 8006110:	4889      	ldr	r0, [pc, #548]	; (8006338 <checkAktifCalisma+0x1060>)
 8006112:	f002 fb29 	bl	8008768 <HAL_GPIO_ReadPin>
 8006116:	4603      	mov	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d003      	beq.n	8006124 <checkAktifCalisma+0xe4c>
 800611c:	4b87      	ldr	r3, [pc, #540]	; (800633c <checkAktifCalisma+0x1064>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <checkAktifCalisma+0xe62>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006124:	2102      	movs	r1, #2
 8006126:	4884      	ldr	r0, [pc, #528]	; (8006338 <checkAktifCalisma+0x1060>)
 8006128:	f002 fb1e 	bl	8008768 <HAL_GPIO_ReadPin>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <checkAktifCalisma+0xe62>

					kapiTablaAcKonumKat1=1;
 8006132:	4b83      	ldr	r3, [pc, #524]	; (8006340 <checkAktifCalisma+0x1068>)
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	e002      	b.n	8006140 <checkAktifCalisma+0xe68>
				} else {
					kapiTablaAcKonumKat1=0;
 800613a:	4b81      	ldr	r3, [pc, #516]	; (8006340 <checkAktifCalisma+0x1068>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006140:	4b7c      	ldr	r3, [pc, #496]	; (8006334 <checkAktifCalisma+0x105c>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d003      	beq.n	8006150 <checkAktifCalisma+0xe78>
 8006148:	4b7a      	ldr	r3, [pc, #488]	; (8006334 <checkAktifCalisma+0x105c>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d111      	bne.n	8006174 <checkAktifCalisma+0xe9c>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006150:	2102      	movs	r1, #2
 8006152:	4879      	ldr	r0, [pc, #484]	; (8006338 <checkAktifCalisma+0x1060>)
 8006154:	f002 fb08 	bl	8008768 <HAL_GPIO_ReadPin>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10a      	bne.n	8006174 <checkAktifCalisma+0xe9c>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800615e:	2104      	movs	r1, #4
 8006160:	4875      	ldr	r0, [pc, #468]	; (8006338 <checkAktifCalisma+0x1060>)
 8006162:	f002 fb01 	bl	8008768 <HAL_GPIO_ReadPin>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <checkAktifCalisma+0xe9c>

					kapiTablaAcKonumKat2=1;
 800616c:	4b75      	ldr	r3, [pc, #468]	; (8006344 <checkAktifCalisma+0x106c>)
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e002      	b.n	800617a <checkAktifCalisma+0xea2>
				} else {
					kapiTablaAcKonumKat2=0;
 8006174:	4b73      	ldr	r3, [pc, #460]	; (8006344 <checkAktifCalisma+0x106c>)
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800617a:	4b71      	ldr	r3, [pc, #452]	; (8006340 <checkAktifCalisma+0x1068>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00f      	beq.n	80061a2 <checkAktifCalisma+0xeca>
						&& kapiAcTipi==1
 8006182:	4b71      	ldr	r3, [pc, #452]	; (8006348 <checkAktifCalisma+0x1070>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10b      	bne.n	80061a2 <checkAktifCalisma+0xeca>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800618a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800618e:	486f      	ldr	r0, [pc, #444]	; (800634c <checkAktifCalisma+0x1074>)
 8006190:	f002 faea 	bl	8008768 <HAL_GPIO_ReadPin>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <checkAktifCalisma+0xeca>

					kapiactablaesp1=1;
 800619a:	4b6d      	ldr	r3, [pc, #436]	; (8006350 <checkAktifCalisma+0x1078>)
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e002      	b.n	80061a8 <checkAktifCalisma+0xed0>
				} else {
					kapiactablaesp1=0;
 80061a2:	4b6b      	ldr	r3, [pc, #428]	; (8006350 <checkAktifCalisma+0x1078>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80061a8:	4b66      	ldr	r3, [pc, #408]	; (8006344 <checkAktifCalisma+0x106c>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00f      	beq.n	80061d0 <checkAktifCalisma+0xef8>
						&& kapiAcTipi==1
 80061b0:	4b65      	ldr	r3, [pc, #404]	; (8006348 <checkAktifCalisma+0x1070>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d10b      	bne.n	80061d0 <checkAktifCalisma+0xef8>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80061b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061bc:	4863      	ldr	r0, [pc, #396]	; (800634c <checkAktifCalisma+0x1074>)
 80061be:	f002 fad3 	bl	8008768 <HAL_GPIO_ReadPin>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <checkAktifCalisma+0xef8>

					kapiactablaesp2=1;
 80061c8:	4b62      	ldr	r3, [pc, #392]	; (8006354 <checkAktifCalisma+0x107c>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e002      	b.n	80061d6 <checkAktifCalisma+0xefe>
				} else {
					kapiactablaesp2=0;
 80061d0:	4b60      	ldr	r3, [pc, #384]	; (8006354 <checkAktifCalisma+0x107c>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80061d6:	4b60      	ldr	r3, [pc, #384]	; (8006358 <checkAktifCalisma+0x1080>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d137      	bne.n	800624e <checkAktifCalisma+0xf76>
 80061de:	4b5f      	ldr	r3, [pc, #380]	; (800635c <checkAktifCalisma+0x1084>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d003      	beq.n	80061ee <checkAktifCalisma+0xf16>
 80061e6:	4b5d      	ldr	r3, [pc, #372]	; (800635c <checkAktifCalisma+0x1084>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d12f      	bne.n	800624e <checkAktifCalisma+0xf76>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80061ee:	4b54      	ldr	r3, [pc, #336]	; (8006340 <checkAktifCalisma+0x1068>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <checkAktifCalisma+0xf26>
 80061f6:	4b53      	ldr	r3, [pc, #332]	; (8006344 <checkAktifCalisma+0x106c>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d027      	beq.n	800624e <checkAktifCalisma+0xf76>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80061fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006202:	484d      	ldr	r0, [pc, #308]	; (8006338 <checkAktifCalisma+0x1060>)
 8006204:	f002 fab0 	bl	8008768 <HAL_GPIO_ReadPin>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <checkAktifCalisma+0xf3e>
 800620e:	4b4e      	ldr	r3, [pc, #312]	; (8006348 <checkAktifCalisma+0x1070>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <checkAktifCalisma+0xf4e>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006216:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <checkAktifCalisma+0x1078>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <checkAktifCalisma+0xf4e>
 800621e:	4b4d      	ldr	r3, [pc, #308]	; (8006354 <checkAktifCalisma+0x107c>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <checkAktifCalisma+0xf76>
						&&(makineStop==1)
 8006226:	4b4e      	ldr	r3, [pc, #312]	; (8006360 <checkAktifCalisma+0x1088>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <checkAktifCalisma+0xf76>
						&&(butonKontrol==0)) {
 800622e:	4b4d      	ldr	r3, [pc, #308]	; (8006364 <checkAktifCalisma+0x108c>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <checkAktifCalisma+0xf76>

					kapiTablaprudhome=1;
 800623c:	4b4a      	ldr	r3, [pc, #296]	; (8006368 <checkAktifCalisma+0x1090>)
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006242:	4b4a      	ldr	r3, [pc, #296]	; (800636c <checkAktifCalisma+0x1094>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a4a      	ldr	r2, [pc, #296]	; (8006370 <checkAktifCalisma+0x1098>)
 8006248:	6013      	str	r3, [r2, #0]
					bekle();
 800624a:	f7fe fe15 	bl	8004e78 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <checkAktifCalisma+0x1094>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b47      	ldr	r3, [pc, #284]	; (8006370 <checkAktifCalisma+0x1098>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	4a46      	ldr	r2, [pc, #280]	; (8006374 <checkAktifCalisma+0x109c>)
 800625a:	7812      	ldrb	r2, [r2, #0]
 800625c:	4293      	cmp	r3, r2
 800625e:	d214      	bcs.n	800628a <checkAktifCalisma+0xfb2>
 8006260:	4b37      	ldr	r3, [pc, #220]	; (8006340 <checkAktifCalisma+0x1068>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f083 0301 	eor.w	r3, r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d006      	beq.n	800627c <checkAktifCalisma+0xfa4>
 800626e:	4b35      	ldr	r3, [pc, #212]	; (8006344 <checkAktifCalisma+0x106c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f083 0301 	eor.w	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <checkAktifCalisma+0xfb2>
 800627c:	4b38      	ldr	r3, [pc, #224]	; (8006360 <checkAktifCalisma+0x1088>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f083 0301 	eor.w	r3, r3, #1
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <checkAktifCalisma+0xfb8>
					kapiTablaprudhome=0;
 800628a:	4b37      	ldr	r3, [pc, #220]	; (8006368 <checkAktifCalisma+0x1090>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006290:	4b31      	ldr	r3, [pc, #196]	; (8006358 <checkAktifCalisma+0x1080>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d12b      	bne.n	80062f0 <checkAktifCalisma+0x1018>
 8006298:	4b30      	ldr	r3, [pc, #192]	; (800635c <checkAktifCalisma+0x1084>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d003      	beq.n	80062a8 <checkAktifCalisma+0xfd0>
 80062a0:	4b2e      	ldr	r3, [pc, #184]	; (800635c <checkAktifCalisma+0x1084>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d123      	bne.n	80062f0 <checkAktifCalisma+0x1018>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <checkAktifCalisma+0x1068>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <checkAktifCalisma+0xfe0>
 80062b0:	4b24      	ldr	r3, [pc, #144]	; (8006344 <checkAktifCalisma+0x106c>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <checkAktifCalisma+0x1018>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80062b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062bc:	481e      	ldr	r0, [pc, #120]	; (8006338 <checkAktifCalisma+0x1060>)
 80062be:	f002 fa53 	bl	8008768 <HAL_GPIO_ReadPin>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <checkAktifCalisma+0xff8>
 80062c8:	4b1f      	ldr	r3, [pc, #124]	; (8006348 <checkAktifCalisma+0x1070>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <checkAktifCalisma+0x1008>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80062d0:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <checkAktifCalisma+0x1078>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <checkAktifCalisma+0x1008>
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <checkAktifCalisma+0x107c>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <checkAktifCalisma+0x1018>
						&&(makineStop==1)) {
 80062e0:	4b1f      	ldr	r3, [pc, #124]	; (8006360 <checkAktifCalisma+0x1088>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <checkAktifCalisma+0x1018>

					kapiTablabutonkontrol=1;
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <checkAktifCalisma+0x10a0>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e002      	b.n	80062f6 <checkAktifCalisma+0x101e>
				} else {
					kapiTablabutonkontrol=0;
 80062f0:	4b21      	ldr	r3, [pc, #132]	; (8006378 <checkAktifCalisma+0x10a0>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <checkAktifCalisma+0x1080>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d140      	bne.n	8006380 <checkAktifCalisma+0x10a8>
 80062fe:	4b17      	ldr	r3, [pc, #92]	; (800635c <checkAktifCalisma+0x1084>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d003      	beq.n	800630e <checkAktifCalisma+0x1036>
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <checkAktifCalisma+0x1084>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b03      	cmp	r3, #3
 800630c:	d138      	bne.n	8006380 <checkAktifCalisma+0x10a8>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <checkAktifCalisma+0x1068>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <checkAktifCalisma+0x1046>
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <checkAktifCalisma+0x106c>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d030      	beq.n	8006380 <checkAktifCalisma+0x10a8>
						&&(makineStop==1)) {
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <checkAktifCalisma+0x1088>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02c      	beq.n	8006380 <checkAktifCalisma+0x10a8>

					kapiTablapizzato=1;
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <checkAktifCalisma+0x10a4>)
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e02b      	b.n	8006386 <checkAktifCalisma+0x10ae>
 800632e:	bf00      	nop
 8006330:	40010800 	.word	0x40010800
 8006334:	20000b31 	.word	0x20000b31
 8006338:	40011000 	.word	0x40011000
 800633c:	20000b2a 	.word	0x20000b2a
 8006340:	20000b6f 	.word	0x20000b6f
 8006344:	20000b70 	.word	0x20000b70
 8006348:	20000b30 	.word	0x20000b30
 800634c:	40010c00 	.word	0x40010c00
 8006350:	20000b7f 	.word	0x20000b7f
 8006354:	20000b80 	.word	0x20000b80
 8006358:	20000b2f 	.word	0x20000b2f
 800635c:	20000b2c 	.word	0x20000b2c
 8006360:	20000b65 	.word	0x20000b65
 8006364:	20000b52 	.word	0x20000b52
 8006368:	20000b6c 	.word	0x20000b6c
 800636c:	20000b00 	.word	0x20000b00
 8006370:	20000b04 	.word	0x20000b04
 8006374:	20000b3f 	.word	0x20000b3f
 8006378:	20000b6d 	.word	0x20000b6d
 800637c:	20000b6e 	.word	0x20000b6e
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8006380:	4b89      	ldr	r3, [pc, #548]	; (80065a8 <checkAktifCalisma+0x12d0>)
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006386:	4b89      	ldr	r3, [pc, #548]	; (80065ac <checkAktifCalisma+0x12d4>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <checkAktifCalisma+0x10c6>
 800638e:	4b88      	ldr	r3, [pc, #544]	; (80065b0 <checkAktifCalisma+0x12d8>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <checkAktifCalisma+0x10c6>
 8006396:	4b84      	ldr	r3, [pc, #528]	; (80065a8 <checkAktifCalisma+0x12d0>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <checkAktifCalisma+0x10d2>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800639e:	2201      	movs	r2, #1
 80063a0:	2120      	movs	r1, #32
 80063a2:	4884      	ldr	r0, [pc, #528]	; (80065b4 <checkAktifCalisma+0x12dc>)
 80063a4:	f002 f9f7 	bl	8008796 <HAL_GPIO_WritePin>
 80063a8:	e004      	b.n	80063b4 <checkAktifCalisma+0x10dc>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80063aa:	2200      	movs	r2, #0
 80063ac:	2120      	movs	r1, #32
 80063ae:	4881      	ldr	r0, [pc, #516]	; (80065b4 <checkAktifCalisma+0x12dc>)
 80063b0:	f002 f9f1 	bl	8008796 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80063b4:	4b80      	ldr	r3, [pc, #512]	; (80065b8 <checkAktifCalisma+0x12e0>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <checkAktifCalisma+0x1102>
 80063bc:	2102      	movs	r1, #2
 80063be:	487f      	ldr	r0, [pc, #508]	; (80065bc <checkAktifCalisma+0x12e4>)
 80063c0:	f002 f9d2 	bl	8008768 <HAL_GPIO_ReadPin>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d107      	bne.n	80063da <checkAktifCalisma+0x1102>
 80063ca:	4b7d      	ldr	r3, [pc, #500]	; (80065c0 <checkAktifCalisma+0x12e8>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d103      	bne.n	80063da <checkAktifCalisma+0x1102>
 80063d2:	4b7c      	ldr	r3, [pc, #496]	; (80065c4 <checkAktifCalisma+0x12ec>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d112      	bne.n	8006400 <checkAktifCalisma+0x1128>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80063da:	4b7b      	ldr	r3, [pc, #492]	; (80065c8 <checkAktifCalisma+0x12f0>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d066      	beq.n	80064b0 <checkAktifCalisma+0x11d8>
 80063e2:	2104      	movs	r1, #4
 80063e4:	4875      	ldr	r0, [pc, #468]	; (80065bc <checkAktifCalisma+0x12e4>)
 80063e6:	f002 f9bf 	bl	8008768 <HAL_GPIO_ReadPin>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d15f      	bne.n	80064b0 <checkAktifCalisma+0x11d8>
 80063f0:	4b73      	ldr	r3, [pc, #460]	; (80065c0 <checkAktifCalisma+0x12e8>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d05b      	beq.n	80064b0 <checkAktifCalisma+0x11d8>
 80063f8:	4b72      	ldr	r3, [pc, #456]	; (80065c4 <checkAktifCalisma+0x12ec>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d057      	beq.n	80064b0 <checkAktifCalisma+0x11d8>


					calismaSayisi1=calismaSayisi1+1;
 8006400:	4b72      	ldr	r3, [pc, #456]	; (80065cc <checkAktifCalisma+0x12f4>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	4b70      	ldr	r3, [pc, #448]	; (80065cc <checkAktifCalisma+0x12f4>)
 800640a:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi1>9) {
 800640c:	4b6f      	ldr	r3, [pc, #444]	; (80065cc <checkAktifCalisma+0x12f4>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b09      	cmp	r3, #9
 8006412:	d908      	bls.n	8006426 <checkAktifCalisma+0x114e>
					  	calismaSayisi1=0;
 8006414:	4b6d      	ldr	r3, [pc, #436]	; (80065cc <checkAktifCalisma+0x12f4>)
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10=calismaSayisi10+1;
 800641a:	4b6d      	ldr	r3, [pc, #436]	; (80065d0 <checkAktifCalisma+0x12f8>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	4b6b      	ldr	r3, [pc, #428]	; (80065d0 <checkAktifCalisma+0x12f8>)
 8006424:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi10>9) {
 8006426:	4b6a      	ldr	r3, [pc, #424]	; (80065d0 <checkAktifCalisma+0x12f8>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b09      	cmp	r3, #9
 800642c:	d908      	bls.n	8006440 <checkAktifCalisma+0x1168>
					  	calismaSayisi10=0;
 800642e:	4b68      	ldr	r3, [pc, #416]	; (80065d0 <checkAktifCalisma+0x12f8>)
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi100=calismaSayisi100+1;
 8006434:	4b67      	ldr	r3, [pc, #412]	; (80065d4 <checkAktifCalisma+0x12fc>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	b2da      	uxtb	r2, r3
 800643c:	4b65      	ldr	r3, [pc, #404]	; (80065d4 <checkAktifCalisma+0x12fc>)
 800643e:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi100>9) {
 8006440:	4b64      	ldr	r3, [pc, #400]	; (80065d4 <checkAktifCalisma+0x12fc>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b09      	cmp	r3, #9
 8006446:	d908      	bls.n	800645a <checkAktifCalisma+0x1182>
					  	calismaSayisi100=0;
 8006448:	4b62      	ldr	r3, [pc, #392]	; (80065d4 <checkAktifCalisma+0x12fc>)
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi1000=calismaSayisi1000+1;
 800644e:	4b62      	ldr	r3, [pc, #392]	; (80065d8 <checkAktifCalisma+0x1300>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	b2da      	uxtb	r2, r3
 8006456:	4b60      	ldr	r3, [pc, #384]	; (80065d8 <checkAktifCalisma+0x1300>)
 8006458:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi1000>9) {
 800645a:	4b5f      	ldr	r3, [pc, #380]	; (80065d8 <checkAktifCalisma+0x1300>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b09      	cmp	r3, #9
 8006460:	d908      	bls.n	8006474 <checkAktifCalisma+0x119c>
					  	calismaSayisi1000=0;
 8006462:	4b5d      	ldr	r3, [pc, #372]	; (80065d8 <checkAktifCalisma+0x1300>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10000=calismaSayisi10000+1;
 8006468:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <checkAktifCalisma+0x1304>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	b2da      	uxtb	r2, r3
 8006470:	4b5a      	ldr	r3, [pc, #360]	; (80065dc <checkAktifCalisma+0x1304>)
 8006472:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006474:	4b59      	ldr	r3, [pc, #356]	; (80065dc <checkAktifCalisma+0x1304>)
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	4b59      	ldr	r3, [pc, #356]	; (80065e0 <checkAktifCalisma+0x1308>)
 800647a:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 800647e:	4b56      	ldr	r3, [pc, #344]	; (80065d8 <checkAktifCalisma+0x1300>)
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	4b57      	ldr	r3, [pc, #348]	; (80065e0 <checkAktifCalisma+0x1308>)
 8006484:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 8006486:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <checkAktifCalisma+0x12fc>)
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	4b55      	ldr	r3, [pc, #340]	; (80065e0 <checkAktifCalisma+0x1308>)
 800648c:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 800648e:	4b50      	ldr	r3, [pc, #320]	; (80065d0 <checkAktifCalisma+0x12f8>)
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	4b53      	ldr	r3, [pc, #332]	; (80065e0 <checkAktifCalisma+0x1308>)
 8006494:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 8006496:	4b4d      	ldr	r3, [pc, #308]	; (80065cc <checkAktifCalisma+0x12f4>)
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	4b51      	ldr	r3, [pc, #324]	; (80065e0 <checkAktifCalisma+0x1308>)
 800649c:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 800649e:	4b51      	ldr	r3, [pc, #324]	; (80065e4 <checkAktifCalisma+0x130c>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80064a4:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <checkAktifCalisma+0x12e0>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80064aa:	4b47      	ldr	r3, [pc, #284]	; (80065c8 <checkAktifCalisma+0x12f0>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80064b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064b4:	484c      	ldr	r0, [pc, #304]	; (80065e8 <checkAktifCalisma+0x1310>)
 80064b6:	f002 f957 	bl	8008768 <HAL_GPIO_ReadPin>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d016      	beq.n	80064ee <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80064c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064c4:	4848      	ldr	r0, [pc, #288]	; (80065e8 <checkAktifCalisma+0x1310>)
 80064c6:	f002 f94f 	bl	8008768 <HAL_GPIO_ReadPin>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80064d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064d4:	4844      	ldr	r0, [pc, #272]	; (80065e8 <checkAktifCalisma+0x1310>)
 80064d6:	f002 f947 	bl	8008768 <HAL_GPIO_ReadPin>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80064e0:	2140      	movs	r1, #64	; 0x40
 80064e2:	4836      	ldr	r0, [pc, #216]	; (80065bc <checkAktifCalisma+0x12e4>)
 80064e4:	f002 f940 	bl	8008768 <HAL_GPIO_ReadPin>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <checkAktifCalisma+0x121e>

					startBasili=1;
 80064ee:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <checkAktifCalisma+0x1314>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e002      	b.n	80064fc <checkAktifCalisma+0x1224>
				} else {
					startBasili=0;
 80064f6:	4b3d      	ldr	r3, [pc, #244]	; (80065ec <checkAktifCalisma+0x1314>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80064fc:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <checkAktifCalisma+0x1314>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d014      	beq.n	800652e <checkAktifCalisma+0x1256>
 8006504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006508:	4837      	ldr	r0, [pc, #220]	; (80065e8 <checkAktifCalisma+0x1310>)
 800650a:	f002 f92d 	bl	8008768 <HAL_GPIO_ReadPin>
 800650e:	4603      	mov	r3, r0
 8006510:	2b01      	cmp	r3, #1
 8006512:	d10c      	bne.n	800652e <checkAktifCalisma+0x1256>

					hataVar=1;
 8006514:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <checkAktifCalisma+0x1318>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800651a:	2001      	movs	r0, #1
 800651c:	f7fe f8f0 	bl	8004700 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006520:	2001      	movs	r0, #1
 8006522:	f7fe fc2f 	bl	8004d84 <hata2EEPROM>
					acilstophatasi=1;
 8006526:	4b33      	ldr	r3, [pc, #204]	; (80065f4 <checkAktifCalisma+0x131c>)
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e018      	b.n	8006560 <checkAktifCalisma+0x1288>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800652e:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <checkAktifCalisma+0x131c>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d014      	beq.n	8006560 <checkAktifCalisma+0x1288>
 8006536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800653a:	482b      	ldr	r0, [pc, #172]	; (80065e8 <checkAktifCalisma+0x1310>)
 800653c:	f002 f914 	bl	8008768 <HAL_GPIO_ReadPin>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10c      	bne.n	8006560 <checkAktifCalisma+0x1288>
 8006546:	4b29      	ldr	r3, [pc, #164]	; (80065ec <checkAktifCalisma+0x1314>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f083 0301 	eor.w	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <checkAktifCalisma+0x1288>
					acilstophatasi=0;
 8006554:	4b27      	ldr	r3, [pc, #156]	; (80065f4 <checkAktifCalisma+0x131c>)
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800655a:	2001      	movs	r0, #1
 800655c:	f7fe f87c 	bl	8004658 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006560:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <checkAktifCalisma+0x1320>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d04c      	beq.n	8006608 <checkAktifCalisma+0x1330>
 800656e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006572:	481d      	ldr	r0, [pc, #116]	; (80065e8 <checkAktifCalisma+0x1310>)
 8006574:	f002 f8f8 	bl	8008768 <HAL_GPIO_ReadPin>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <checkAktifCalisma+0x12ae>
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <checkAktifCalisma+0x1324>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d040      	beq.n	8006608 <checkAktifCalisma+0x1330>
 8006586:	4b1e      	ldr	r3, [pc, #120]	; (8006600 <checkAktifCalisma+0x1328>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d13c      	bne.n	8006608 <checkAktifCalisma+0x1330>
					hataVar=1;
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <checkAktifCalisma+0x1318>)
 8006590:	2201      	movs	r2, #1
 8006592:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8006594:	2002      	movs	r0, #2
 8006596:	f7fe f8b3 	bl	8004700 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800659a:	2002      	movs	r0, #2
 800659c:	f7fe fbf2 	bl	8004d84 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80065a0:	4b18      	ldr	r3, [pc, #96]	; (8006604 <checkAktifCalisma+0x132c>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	e047      	b.n	8006638 <checkAktifCalisma+0x1360>
 80065a8:	20000b6e 	.word	0x20000b6e
 80065ac:	20000b6d 	.word	0x20000b6d
 80065b0:	20000b6c 	.word	0x20000b6c
 80065b4:	40010800 	.word	0x40010800
 80065b8:	20000b62 	.word	0x20000b62
 80065bc:	40011000 	.word	0x40011000
 80065c0:	20000b2a 	.word	0x20000b2a
 80065c4:	20000b65 	.word	0x20000b65
 80065c8:	20000b63 	.word	0x20000b63
 80065cc:	20000b21 	.word	0x20000b21
 80065d0:	20000b22 	.word	0x20000b22
 80065d4:	20000941 	.word	0x20000941
 80065d8:	20000942 	.word	0x20000942
 80065dc:	20000b23 	.word	0x20000b23
 80065e0:	20000ab8 	.word	0x20000ab8
 80065e4:	20000b4f 	.word	0x20000b4f
 80065e8:	40010c00 	.word	0x40010c00
 80065ec:	20000b71 	.word	0x20000b71
 80065f0:	20000b78 	.word	0x20000b78
 80065f4:	20000b73 	.word	0x20000b73
 80065f8:	20000b7a 	.word	0x20000b7a
 80065fc:	20000b84 	.word	0x20000b84
 8006600:	20000b28 	.word	0x20000b28
 8006604:	20000b74 	.word	0x20000b74
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006608:	4b97      	ldr	r3, [pc, #604]	; (8006868 <checkAktifCalisma+0x1590>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <checkAktifCalisma+0x1360>
 8006610:	4b96      	ldr	r3, [pc, #600]	; (800686c <checkAktifCalisma+0x1594>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <checkAktifCalisma+0x1360>
 8006618:	4b95      	ldr	r3, [pc, #596]	; (8006870 <checkAktifCalisma+0x1598>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f083 0301 	eor.w	r3, r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 8006626:	4b90      	ldr	r3, [pc, #576]	; (8006868 <checkAktifCalisma+0x1590>)
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800662c:	4b91      	ldr	r3, [pc, #580]	; (8006874 <checkAktifCalisma+0x159c>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006632:	2002      	movs	r0, #2
 8006634:	f7fe f810 	bl	8004658 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006638:	4b8f      	ldr	r3, [pc, #572]	; (8006878 <checkAktifCalisma+0x15a0>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11c      	bne.n	800667a <checkAktifCalisma+0x13a2>
 8006640:	4b8e      	ldr	r3, [pc, #568]	; (800687c <checkAktifCalisma+0x15a4>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d118      	bne.n	800667a <checkAktifCalisma+0x13a2>
 8006648:	4b8d      	ldr	r3, [pc, #564]	; (8006880 <checkAktifCalisma+0x15a8>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d014      	beq.n	800667a <checkAktifCalisma+0x13a2>
 8006650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006654:	488b      	ldr	r0, [pc, #556]	; (8006884 <checkAktifCalisma+0x15ac>)
 8006656:	f002 f887 	bl	8008768 <HAL_GPIO_ReadPin>
 800665a:	4603      	mov	r3, r0
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10c      	bne.n	800667a <checkAktifCalisma+0x13a2>
					hataVar=1;
 8006660:	4b89      	ldr	r3, [pc, #548]	; (8006888 <checkAktifCalisma+0x15b0>)
 8006662:	2201      	movs	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006666:	2003      	movs	r0, #3
 8006668:	f7fe f84a 	bl	8004700 <hataKoduLcdGoster>
					hata2EEPROM(3);
 800666c:	2003      	movs	r0, #3
 800666e:	f7fe fb89 	bl	8004d84 <hata2EEPROM>
					basinchatasi=1;
 8006672:	4b86      	ldr	r3, [pc, #536]	; (800688c <checkAktifCalisma+0x15b4>)
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e015      	b.n	80066a6 <checkAktifCalisma+0x13ce>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800667a:	4b84      	ldr	r3, [pc, #528]	; (800688c <checkAktifCalisma+0x15b4>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d011      	beq.n	80066a6 <checkAktifCalisma+0x13ce>
 8006682:	4b7d      	ldr	r3, [pc, #500]	; (8006878 <checkAktifCalisma+0x15a0>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d10d      	bne.n	80066a6 <checkAktifCalisma+0x13ce>
 800668a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800668e:	4880      	ldr	r0, [pc, #512]	; (8006890 <checkAktifCalisma+0x15b8>)
 8006690:	f002 f86a 	bl	8008768 <HAL_GPIO_ReadPin>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <checkAktifCalisma+0x13ce>
					basinchatasi=0;
 800669a:	4b7c      	ldr	r3, [pc, #496]	; (800688c <checkAktifCalisma+0x15b4>)
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80066a0:	2003      	movs	r0, #3
 80066a2:	f7fd ffd9 	bl	8004658 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80066a6:	4b7b      	ldr	r3, [pc, #492]	; (8006894 <checkAktifCalisma+0x15bc>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <checkAktifCalisma+0x13de>
 80066ae:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <checkAktifCalisma+0x15c0>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01c      	beq.n	80066f0 <checkAktifCalisma+0x1418>
 80066b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066ba:	4878      	ldr	r0, [pc, #480]	; (800689c <checkAktifCalisma+0x15c4>)
 80066bc:	f002 f854 	bl	8008768 <HAL_GPIO_ReadPin>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d114      	bne.n	80066f0 <checkAktifCalisma+0x1418>
 80066c6:	4b76      	ldr	r3, [pc, #472]	; (80068a0 <checkAktifCalisma+0x15c8>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d003      	beq.n	80066d6 <checkAktifCalisma+0x13fe>
 80066ce:	4b74      	ldr	r3, [pc, #464]	; (80068a0 <checkAktifCalisma+0x15c8>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d10c      	bne.n	80066f0 <checkAktifCalisma+0x1418>
					hataVar=1;
 80066d6:	4b6c      	ldr	r3, [pc, #432]	; (8006888 <checkAktifCalisma+0x15b0>)
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80066dc:	2004      	movs	r0, #4
 80066de:	f7fe f80f 	bl	8004700 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80066e2:	2004      	movs	r0, #4
 80066e4:	f7fe fb4e 	bl	8004d84 <hata2EEPROM>
					katkapisivicihatasi=1;
 80066e8:	4b6e      	ldr	r3, [pc, #440]	; (80068a4 <checkAktifCalisma+0x15cc>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e01f      	b.n	8006730 <checkAktifCalisma+0x1458>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80066f0:	4b6c      	ldr	r3, [pc, #432]	; (80068a4 <checkAktifCalisma+0x15cc>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01b      	beq.n	8006730 <checkAktifCalisma+0x1458>
 80066f8:	4b6b      	ldr	r3, [pc, #428]	; (80068a8 <checkAktifCalisma+0x15d0>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <checkAktifCalisma+0x1458>
 8006700:	4b64      	ldr	r3, [pc, #400]	; (8006894 <checkAktifCalisma+0x15bc>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f083 0301 	eor.w	r3, r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d010      	beq.n	8006730 <checkAktifCalisma+0x1458>
 800670e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006712:	4862      	ldr	r0, [pc, #392]	; (800689c <checkAktifCalisma+0x15c4>)
 8006714:	f002 f828 	bl	8008768 <HAL_GPIO_ReadPin>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <checkAktifCalisma+0x1458>

					katkapisivicihatasi=0;
 800671e:	4b61      	ldr	r3, [pc, #388]	; (80068a4 <checkAktifCalisma+0x15cc>)
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006724:	4b5c      	ldr	r3, [pc, #368]	; (8006898 <checkAktifCalisma+0x15c0>)
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800672a:	2004      	movs	r0, #4
 800672c:	f7fd ff94 	bl	8004658 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006730:	4b58      	ldr	r3, [pc, #352]	; (8006894 <checkAktifCalisma+0x15bc>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <checkAktifCalisma+0x1468>
 8006738:	4b5c      	ldr	r3, [pc, #368]	; (80068ac <checkAktifCalisma+0x15d4>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01c      	beq.n	800677a <checkAktifCalisma+0x14a2>
 8006740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006744:	4855      	ldr	r0, [pc, #340]	; (800689c <checkAktifCalisma+0x15c4>)
 8006746:	f002 f80f 	bl	8008768 <HAL_GPIO_ReadPin>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d114      	bne.n	800677a <checkAktifCalisma+0x14a2>
 8006750:	4b53      	ldr	r3, [pc, #332]	; (80068a0 <checkAktifCalisma+0x15c8>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d003      	beq.n	8006760 <checkAktifCalisma+0x1488>
 8006758:	4b51      	ldr	r3, [pc, #324]	; (80068a0 <checkAktifCalisma+0x15c8>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d10c      	bne.n	800677a <checkAktifCalisma+0x14a2>

					hataVar=1;
 8006760:	4b49      	ldr	r3, [pc, #292]	; (8006888 <checkAktifCalisma+0x15b0>)
 8006762:	2201      	movs	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006766:	2005      	movs	r0, #5
 8006768:	f7fd ffca 	bl	8004700 <hataKoduLcdGoster>
					hata2EEPROM(5);
 800676c:	2005      	movs	r0, #5
 800676e:	f7fe fb09 	bl	8004d84 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006772:	4b4f      	ldr	r3, [pc, #316]	; (80068b0 <checkAktifCalisma+0x15d8>)
 8006774:	2201      	movs	r2, #1
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	e023      	b.n	80067c2 <checkAktifCalisma+0x14ea>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800677a:	4b4d      	ldr	r3, [pc, #308]	; (80068b0 <checkAktifCalisma+0x15d8>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01f      	beq.n	80067c2 <checkAktifCalisma+0x14ea>
 8006782:	4b49      	ldr	r3, [pc, #292]	; (80068a8 <checkAktifCalisma+0x15d0>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01b      	beq.n	80067c2 <checkAktifCalisma+0x14ea>
 800678a:	4b42      	ldr	r3, [pc, #264]	; (8006894 <checkAktifCalisma+0x15bc>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f083 0301 	eor.w	r3, r3, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d014      	beq.n	80067c2 <checkAktifCalisma+0x14ea>
 8006798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800679c:	483f      	ldr	r0, [pc, #252]	; (800689c <checkAktifCalisma+0x15c4>)
 800679e:	f001 ffe3 	bl	8008768 <HAL_GPIO_ReadPin>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10c      	bne.n	80067c2 <checkAktifCalisma+0x14ea>
 80067a8:	4b3f      	ldr	r3, [pc, #252]	; (80068a8 <checkAktifCalisma+0x15d0>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <checkAktifCalisma+0x14ea>
					tablakapisivicihatasi=0;
 80067b0:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <checkAktifCalisma+0x15d8>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80067b6:	4b3d      	ldr	r3, [pc, #244]	; (80068ac <checkAktifCalisma+0x15d4>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80067bc:	2005      	movs	r0, #5
 80067be:	f7fd ff4b 	bl	8004658 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80067c2:	4b2f      	ldr	r3, [pc, #188]	; (8006880 <checkAktifCalisma+0x15a8>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d107      	bne.n	80067da <checkAktifCalisma+0x1502>
 80067ca:	4b29      	ldr	r3, [pc, #164]	; (8006870 <checkAktifCalisma+0x1598>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d103      	bne.n	80067da <checkAktifCalisma+0x1502>
 80067d2:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <checkAktifCalisma+0x15dc>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <checkAktifCalisma+0x152c>
				    if(millis-timer4>=makineCalismaTmr) {
 80067da:	4b37      	ldr	r3, [pc, #220]	; (80068b8 <checkAktifCalisma+0x15e0>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b37      	ldr	r3, [pc, #220]	; (80068bc <checkAktifCalisma+0x15e4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	4a36      	ldr	r2, [pc, #216]	; (80068c0 <checkAktifCalisma+0x15e8>)
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d30b      	bcc.n	8006804 <checkAktifCalisma+0x152c>
					  	hataVar=1;
 80067ec:	4b26      	ldr	r3, [pc, #152]	; (8006888 <checkAktifCalisma+0x15b0>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80067f2:	2006      	movs	r0, #6
 80067f4:	f7fd ff84 	bl	8004700 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80067f8:	2006      	movs	r0, #6
 80067fa:	f7fe fac3 	bl	8004d84 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <checkAktifCalisma+0x15ec>)
 8006800:	2201      	movs	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006804:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <checkAktifCalisma+0x15ec>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <checkAktifCalisma+0x155c>
 800680c:	2108      	movs	r1, #8
 800680e:	4823      	ldr	r0, [pc, #140]	; (800689c <checkAktifCalisma+0x15c4>)
 8006810:	f001 ffaa 	bl	8008768 <HAL_GPIO_ReadPin>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <checkAktifCalisma+0x155c>
 800681a:	4b1e      	ldr	r3, [pc, #120]	; (8006894 <checkAktifCalisma+0x15bc>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	f083 0301 	eor.w	r3, r3, #1
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <checkAktifCalisma+0x155c>
					maksimumcalismahatasi=0;
 8006828:	4b26      	ldr	r3, [pc, #152]	; (80068c4 <checkAktifCalisma+0x15ec>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800682e:	2006      	movs	r0, #6
 8006830:	f7fd ff12 	bl	8004658 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <checkAktifCalisma+0x15f0>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <checkAktifCalisma+0x157c>
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <checkAktifCalisma+0x1598>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <checkAktifCalisma+0x157c>
 8006844:	4b21      	ldr	r3, [pc, #132]	; (80068cc <checkAktifCalisma+0x15f4>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <checkAktifCalisma+0x157c>
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <checkAktifCalisma+0x15dc>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d03f      	beq.n	80068d4 <checkAktifCalisma+0x15fc>
					makineCalisiyor=0;
 8006854:	4b1e      	ldr	r3, [pc, #120]	; (80068d0 <checkAktifCalisma+0x15f8>)
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <checkAktifCalisma+0x15c0>)
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006860:	4b12      	ldr	r3, [pc, #72]	; (80068ac <checkAktifCalisma+0x15d4>)
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e03c      	b.n	80068e2 <checkAktifCalisma+0x160a>
 8006868:	20000b74 	.word	0x20000b74
 800686c:	20000b7a 	.word	0x20000b7a
 8006870:	20000b5b 	.word	0x20000b5b
 8006874:	20000b84 	.word	0x20000b84
 8006878:	20000b27 	.word	0x20000b27
 800687c:	20000b2b 	.word	0x20000b2b
 8006880:	20000b77 	.word	0x20000b77
 8006884:	40011000 	.word	0x40011000
 8006888:	20000b78 	.word	0x20000b78
 800688c:	20000b81 	.word	0x20000b81
 8006890:	40010c00 	.word	0x40010c00
 8006894:	20000b71 	.word	0x20000b71
 8006898:	20000b85 	.word	0x20000b85
 800689c:	40010800 	.word	0x40010800
 80068a0:	20000b2c 	.word	0x20000b2c
 80068a4:	20000b82 	.word	0x20000b82
 80068a8:	20000b65 	.word	0x20000b65
 80068ac:	20000b86 	.word	0x20000b86
 80068b0:	20000b83 	.word	0x20000b83
 80068b4:	20000b5a 	.word	0x20000b5a
 80068b8:	20000b00 	.word	0x20000b00
 80068bc:	20000b14 	.word	0x20000b14
 80068c0:	20000b3c 	.word	0x20000b3c
 80068c4:	20000b72 	.word	0x20000b72
 80068c8:	20000b58 	.word	0x20000b58
 80068cc:	20000b59 	.word	0x20000b59
 80068d0:	20000b79 	.word	0x20000b79
				} else {
					makineCalisiyor=1;
 80068d4:	4b1e      	ldr	r3, [pc, #120]	; (8006950 <checkAktifCalisma+0x1678>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80068da:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <checkAktifCalisma+0x167c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <checkAktifCalisma+0x1680>)
 80068e0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <checkAktifCalisma+0x1684>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02f      	beq.n	800694a <checkAktifCalisma+0x1672>
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <checkAktifCalisma+0x1688>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f083 0301 	eor.w	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d028      	beq.n	800694a <checkAktifCalisma+0x1672>
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <checkAktifCalisma+0x168c>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f083 0301 	eor.w	r3, r3, #1
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <checkAktifCalisma+0x1672>
 8006906:	4b18      	ldr	r3, [pc, #96]	; (8006968 <checkAktifCalisma+0x1690>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	f083 0301 	eor.w	r3, r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01a      	beq.n	800694a <checkAktifCalisma+0x1672>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <checkAktifCalisma+0x1694>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f083 0301 	eor.w	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <checkAktifCalisma+0x1672>
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <checkAktifCalisma+0x1698>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f083 0301 	eor.w	r3, r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <checkAktifCalisma+0x1672>
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <checkAktifCalisma+0x169c>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f083 0301 	eor.w	r3, r3, #1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <checkAktifCalisma+0x1672>

					hataVar=0;
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <checkAktifCalisma+0x1684>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006944:	2007      	movs	r0, #7
 8006946:	f7fd fe87 	bl	8004658 <lcdUpdate>
				}


				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000b79 	.word	0x20000b79
 8006954:	20000b00 	.word	0x20000b00
 8006958:	20000b14 	.word	0x20000b14
 800695c:	20000b78 	.word	0x20000b78
 8006960:	20000b73 	.word	0x20000b73
 8006964:	20000b74 	.word	0x20000b74
 8006968:	20000b81 	.word	0x20000b81
 800696c:	20000b82 	.word	0x20000b82
 8006970:	20000b83 	.word	0x20000b83
 8006974:	20000b72 	.word	0x20000b72

08006978 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800697c:	4b8b      	ldr	r3, [pc, #556]	; (8006bac <checkDemoModCalisma+0x234>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	f040 8229 	bne.w	8006dd8 <checkDemoModCalisma+0x460>
 8006986:	4b8a      	ldr	r3, [pc, #552]	; (8006bb0 <checkDemoModCalisma+0x238>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8224 	beq.w	8006dd8 <checkDemoModCalisma+0x460>
 8006990:	4b88      	ldr	r3, [pc, #544]	; (8006bb4 <checkDemoModCalisma+0x23c>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 821f 	bne.w	8006dd8 <checkDemoModCalisma+0x460>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800699a:	2102      	movs	r1, #2
 800699c:	4886      	ldr	r0, [pc, #536]	; (8006bb8 <checkDemoModCalisma+0x240>)
 800699e:	f001 fee3 	bl	8008768 <HAL_GPIO_ReadPin>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d11d      	bne.n	80069e4 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 80069a8:	4b84      	ldr	r3, [pc, #528]	; (8006bbc <checkDemoModCalisma+0x244>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f083 0301 	eor.w	r3, r3, #1
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d016      	beq.n	80069e4 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 80069b6:	4b82      	ldr	r3, [pc, #520]	; (8006bc0 <checkDemoModCalisma+0x248>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f083 0301 	eor.w	r3, r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00f      	beq.n	80069e4 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 80069c4:	4b7f      	ldr	r3, [pc, #508]	; (8006bc4 <checkDemoModCalisma+0x24c>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f083 0301 	eor.w	r3, r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d008      	beq.n	80069e4 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80069d2:	2201      	movs	r2, #1
 80069d4:	2104      	movs	r1, #4
 80069d6:	487c      	ldr	r0, [pc, #496]	; (8006bc8 <checkDemoModCalisma+0x250>)
 80069d8:	f001 fedd 	bl	8008796 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 80069dc:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <checkDemoModCalisma+0x254>)
 80069de:	2201      	movs	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e00e      	b.n	8006a02 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80069e4:	2102      	movs	r1, #2
 80069e6:	4874      	ldr	r0, [pc, #464]	; (8006bb8 <checkDemoModCalisma+0x240>)
 80069e8:	f001 febe 	bl	8008768 <HAL_GPIO_ReadPin>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d107      	bne.n	8006a02 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2104      	movs	r1, #4
 80069f6:	4874      	ldr	r0, [pc, #464]	; (8006bc8 <checkDemoModCalisma+0x250>)
 80069f8:	f001 fecd 	bl	8008796 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 80069fc:	4b73      	ldr	r3, [pc, #460]	; (8006bcc <checkDemoModCalisma+0x254>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006a02:	4b72      	ldr	r3, [pc, #456]	; (8006bcc <checkDemoModCalisma+0x254>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <checkDemoModCalisma+0xaa>
 8006a0a:	4b6d      	ldr	r3, [pc, #436]	; (8006bc0 <checkDemoModCalisma+0x248>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <checkDemoModCalisma+0xaa>
 8006a12:	4b6c      	ldr	r3, [pc, #432]	; (8006bc4 <checkDemoModCalisma+0x24c>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <checkDemoModCalisma+0xaa>
 8006a1a:	4b68      	ldr	r3, [pc, #416]	; (8006bbc <checkDemoModCalisma+0x244>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006a22:	2201      	movs	r2, #1
 8006a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a28:	4867      	ldr	r0, [pc, #412]	; (8006bc8 <checkDemoModCalisma+0x250>)
 8006a2a:	f001 feb4 	bl	8008796 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a34:	4864      	ldr	r0, [pc, #400]	; (8006bc8 <checkDemoModCalisma+0x250>)
 8006a36:	f001 feae 	bl	8008796 <HAL_GPIO_WritePin>
 8006a3a:	e00b      	b.n	8006a54 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a42:	4861      	ldr	r0, [pc, #388]	; (8006bc8 <checkDemoModCalisma+0x250>)
 8006a44:	f001 fea7 	bl	8008796 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a4e:	485e      	ldr	r0, [pc, #376]	; (8006bc8 <checkDemoModCalisma+0x250>)
 8006a50:	f001 fea1 	bl	8008796 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a54:	2102      	movs	r1, #2
 8006a56:	4858      	ldr	r0, [pc, #352]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006a58:	f001 fe86 	bl	8008768 <HAL_GPIO_ReadPin>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d10d      	bne.n	8006a7e <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a66:	4854      	ldr	r0, [pc, #336]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006a68:	f001 fe7e 	bl	8008768 <HAL_GPIO_ReadPin>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8006a72:	4b56      	ldr	r3, [pc, #344]	; (8006bcc <checkDemoModCalisma+0x254>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f083 0301 	eor.w	r3, r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a7e:	2102      	movs	r1, #2
 8006a80:	484d      	ldr	r0, [pc, #308]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006a82:	f001 fe71 	bl	8008768 <HAL_GPIO_ReadPin>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d125      	bne.n	8006ad8 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a90:	4849      	ldr	r0, [pc, #292]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006a92:	f001 fe69 	bl	8008768 <HAL_GPIO_ReadPin>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11d      	bne.n	8006ad8 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8006a9c:	4b4b      	ldr	r3, [pc, #300]	; (8006bcc <checkDemoModCalisma+0x254>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f083 0301 	eor.w	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8006aaa:	4b44      	ldr	r3, [pc, #272]	; (8006bbc <checkDemoModCalisma+0x244>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f083 0301 	eor.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00f      	beq.n	8006ad8 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8006ab8:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <checkDemoModCalisma+0x24c>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f083 0301 	eor.w	r3, r3, #1
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	2120      	movs	r1, #32
 8006aca:	483b      	ldr	r0, [pc, #236]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006acc:	f001 fe63 	bl	8008796 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006ad0:	4b3b      	ldr	r3, [pc, #236]	; (8006bc0 <checkDemoModCalisma+0x248>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e007      	b.n	8006ae8 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2120      	movs	r1, #32
 8006adc:	4836      	ldr	r0, [pc, #216]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006ade:	f001 fe5a 	bl	8008796 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006ae2:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <checkDemoModCalisma+0x248>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ae8:	2102      	movs	r1, #2
 8006aea:	4833      	ldr	r0, [pc, #204]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006aec:	f001 fe3c 	bl	8008768 <HAL_GPIO_ReadPin>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d125      	bne.n	8006b42 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006afa:	482f      	ldr	r0, [pc, #188]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006afc:	f001 fe34 	bl	8008768 <HAL_GPIO_ReadPin>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11d      	bne.n	8006b42 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8006b06:	4b31      	ldr	r3, [pc, #196]	; (8006bcc <checkDemoModCalisma+0x254>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f083 0301 	eor.w	r3, r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d016      	beq.n	8006b42 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8006b14:	4b2a      	ldr	r3, [pc, #168]	; (8006bc0 <checkDemoModCalisma+0x248>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f083 0301 	eor.w	r3, r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00f      	beq.n	8006b42 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8006b22:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <checkDemoModCalisma+0x244>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	f083 0301 	eor.w	r3, r3, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006b30:	2201      	movs	r2, #1
 8006b32:	2110      	movs	r1, #16
 8006b34:	4820      	ldr	r0, [pc, #128]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006b36:	f001 fe2e 	bl	8008796 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006b3a:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <checkDemoModCalisma+0x24c>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	e007      	b.n	8006b52 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006b42:	2200      	movs	r2, #0
 8006b44:	2110      	movs	r1, #16
 8006b46:	481c      	ldr	r0, [pc, #112]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006b48:	f001 fe25 	bl	8008796 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <checkDemoModCalisma+0x24c>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006b52:	2104      	movs	r1, #4
 8006b54:	4818      	ldr	r0, [pc, #96]	; (8006bb8 <checkDemoModCalisma+0x240>)
 8006b56:	f001 fe07 	bl	8008768 <HAL_GPIO_ReadPin>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d139      	bne.n	8006bd4 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8006b60:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <checkDemoModCalisma+0x254>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f083 0301 	eor.w	r3, r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d032      	beq.n	8006bd4 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <checkDemoModCalisma+0x24c>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f083 0301 	eor.w	r3, r3, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d02b      	beq.n	8006bd4 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <checkDemoModCalisma+0x248>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f083 0301 	eor.w	r3, r3, #1
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d024      	beq.n	8006bd4 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	480e      	ldr	r0, [pc, #56]	; (8006bc8 <checkDemoModCalisma+0x250>)
 8006b90:	f001 fe01 	bl	8008796 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006b94:	2201      	movs	r2, #1
 8006b96:	2101      	movs	r1, #1
 8006b98:	480b      	ldr	r0, [pc, #44]	; (8006bc8 <checkDemoModCalisma+0x250>)
 8006b9a:	f001 fdfc 	bl	8008796 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <checkDemoModCalisma+0x244>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <checkDemoModCalisma+0x258>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	e027      	b.n	8006bfc <checkDemoModCalisma+0x284>
 8006bac:	20000b42 	.word	0x20000b42
 8006bb0:	20000b75 	.word	0x20000b75
 8006bb4:	20000b41 	.word	0x20000b41
 8006bb8:	40011000 	.word	0x40011000
 8006bbc:	20000b7c 	.word	0x20000b7c
 8006bc0:	20000b7d 	.word	0x20000b7d
 8006bc4:	20000b7e 	.word	0x20000b7e
 8006bc8:	40010c00 	.word	0x40010c00
 8006bcc:	20000b7b 	.word	0x20000b7b
 8006bd0:	20000b61 	.word	0x20000b61
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	48a0      	ldr	r0, [pc, #640]	; (8006e58 <checkDemoModCalisma+0x4e0>)
 8006bd8:	f001 fdc6 	bl	8008768 <HAL_GPIO_ReadPin>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10c      	bne.n	8006bfc <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006be2:	2200      	movs	r2, #0
 8006be4:	2102      	movs	r1, #2
 8006be6:	489d      	ldr	r0, [pc, #628]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006be8:	f001 fdd5 	bl	8008796 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006bec:	2200      	movs	r2, #0
 8006bee:	2101      	movs	r1, #1
 8006bf0:	489a      	ldr	r0, [pc, #616]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006bf2:	f001 fdd0 	bl	8008796 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006bf6:	4b9a      	ldr	r3, [pc, #616]	; (8006e60 <checkDemoModCalisma+0x4e8>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006bfc:	2104      	movs	r1, #4
 8006bfe:	4896      	ldr	r0, [pc, #600]	; (8006e58 <checkDemoModCalisma+0x4e0>)
 8006c00:	f001 fdb2 	bl	8008768 <HAL_GPIO_ReadPin>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10d      	bne.n	8006c26 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	2180      	movs	r1, #128	; 0x80
 8006c0e:	4895      	ldr	r0, [pc, #596]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006c10:	f001 fdc1 	bl	8008796 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006c14:	2201      	movs	r2, #1
 8006c16:	2120      	movs	r1, #32
 8006c18:	4892      	ldr	r0, [pc, #584]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006c1a:	f001 fdbc 	bl	8008796 <HAL_GPIO_WritePin>
					timer3 = millis;
 8006c1e:	4b92      	ldr	r3, [pc, #584]	; (8006e68 <checkDemoModCalisma+0x4f0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a92      	ldr	r2, [pc, #584]	; (8006e6c <checkDemoModCalisma+0x4f4>)
 8006c24:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006c26:	4b90      	ldr	r3, [pc, #576]	; (8006e68 <checkDemoModCalisma+0x4f0>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b90      	ldr	r3, [pc, #576]	; (8006e6c <checkDemoModCalisma+0x4f4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d909      	bls.n	8006c48 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006c34:	2200      	movs	r2, #0
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	488a      	ldr	r0, [pc, #552]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006c3a:	f001 fdac 	bl	8008796 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2120      	movs	r1, #32
 8006c42:	4888      	ldr	r0, [pc, #544]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006c44:	f001 fda7 	bl	8008796 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006c48:	2102      	movs	r1, #2
 8006c4a:	4883      	ldr	r0, [pc, #524]	; (8006e58 <checkDemoModCalisma+0x4e0>)
 8006c4c:	f001 fd8c 	bl	8008768 <HAL_GPIO_ReadPin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d108      	bne.n	8006c68 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006c56:	2201      	movs	r2, #1
 8006c58:	2140      	movs	r1, #64	; 0x40
 8006c5a:	4882      	ldr	r0, [pc, #520]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006c5c:	f001 fd9b 	bl	8008796 <HAL_GPIO_WritePin>
					timer3 = millis;
 8006c60:	4b81      	ldr	r3, [pc, #516]	; (8006e68 <checkDemoModCalisma+0x4f0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a81      	ldr	r2, [pc, #516]	; (8006e6c <checkDemoModCalisma+0x4f4>)
 8006c66:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006c68:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <checkDemoModCalisma+0x4f0>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b7f      	ldr	r3, [pc, #508]	; (8006e6c <checkDemoModCalisma+0x4f4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d904      	bls.n	8006c80 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	487a      	ldr	r0, [pc, #488]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006c7c:	f001 fd8b 	bl	8008796 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006c80:	4b7b      	ldr	r3, [pc, #492]	; (8006e70 <checkDemoModCalisma+0x4f8>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d058      	beq.n	8006d3a <checkDemoModCalisma+0x3c2>
 8006c88:	4b7a      	ldr	r3, [pc, #488]	; (8006e74 <checkDemoModCalisma+0x4fc>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d054      	beq.n	8006d3a <checkDemoModCalisma+0x3c2>
					//mesajYazildi=0;
					calismaSayisi1=calismaSayisi1+1;
 8006c90:	4b79      	ldr	r3, [pc, #484]	; (8006e78 <checkDemoModCalisma+0x500>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	4b77      	ldr	r3, [pc, #476]	; (8006e78 <checkDemoModCalisma+0x500>)
 8006c9a:	701a      	strb	r2, [r3, #0]

					if(calismaSayisi1>9) {
 8006c9c:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <checkDemoModCalisma+0x500>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	d908      	bls.n	8006cb6 <checkDemoModCalisma+0x33e>
						calismaSayisi1=0;
 8006ca4:	4b74      	ldr	r3, [pc, #464]	; (8006e78 <checkDemoModCalisma+0x500>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	701a      	strb	r2, [r3, #0]
						calismaSayisi10=calismaSayisi10+1;
 8006caa:	4b74      	ldr	r3, [pc, #464]	; (8006e7c <checkDemoModCalisma+0x504>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	4b72      	ldr	r3, [pc, #456]	; (8006e7c <checkDemoModCalisma+0x504>)
 8006cb4:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi10>9) {
 8006cb6:	4b71      	ldr	r3, [pc, #452]	; (8006e7c <checkDemoModCalisma+0x504>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	d908      	bls.n	8006cd0 <checkDemoModCalisma+0x358>
						calismaSayisi10=0;
 8006cbe:	4b6f      	ldr	r3, [pc, #444]	; (8006e7c <checkDemoModCalisma+0x504>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
						calismaSayisi100=calismaSayisi100+1;
 8006cc4:	4b6e      	ldr	r3, [pc, #440]	; (8006e80 <checkDemoModCalisma+0x508>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	4b6c      	ldr	r3, [pc, #432]	; (8006e80 <checkDemoModCalisma+0x508>)
 8006cce:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi100>9) {
 8006cd0:	4b6b      	ldr	r3, [pc, #428]	; (8006e80 <checkDemoModCalisma+0x508>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	d908      	bls.n	8006cea <checkDemoModCalisma+0x372>
						calismaSayisi100=0;
 8006cd8:	4b69      	ldr	r3, [pc, #420]	; (8006e80 <checkDemoModCalisma+0x508>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
						calismaSayisi1000=calismaSayisi1000+1;
 8006cde:	4b69      	ldr	r3, [pc, #420]	; (8006e84 <checkDemoModCalisma+0x50c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	4b67      	ldr	r3, [pc, #412]	; (8006e84 <checkDemoModCalisma+0x50c>)
 8006ce8:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi1000>9) {
 8006cea:	4b66      	ldr	r3, [pc, #408]	; (8006e84 <checkDemoModCalisma+0x50c>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	d908      	bls.n	8006d04 <checkDemoModCalisma+0x38c>
						calismaSayisi1000=0;
 8006cf2:	4b64      	ldr	r3, [pc, #400]	; (8006e84 <checkDemoModCalisma+0x50c>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
						calismaSayisi10000=calismaSayisi10000+1;
 8006cf8:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <checkDemoModCalisma+0x510>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	4b61      	ldr	r3, [pc, #388]	; (8006e88 <checkDemoModCalisma+0x510>)
 8006d02:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006d04:	4b60      	ldr	r3, [pc, #384]	; (8006e88 <checkDemoModCalisma+0x510>)
 8006d06:	781a      	ldrb	r2, [r3, #0]
 8006d08:	4b60      	ldr	r3, [pc, #384]	; (8006e8c <checkDemoModCalisma+0x514>)
 8006d0a:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8006d0e:	4b5d      	ldr	r3, [pc, #372]	; (8006e84 <checkDemoModCalisma+0x50c>)
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	4b5e      	ldr	r3, [pc, #376]	; (8006e8c <checkDemoModCalisma+0x514>)
 8006d14:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 8006d16:	4b5a      	ldr	r3, [pc, #360]	; (8006e80 <checkDemoModCalisma+0x508>)
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	4b5c      	ldr	r3, [pc, #368]	; (8006e8c <checkDemoModCalisma+0x514>)
 8006d1c:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 8006d1e:	4b57      	ldr	r3, [pc, #348]	; (8006e7c <checkDemoModCalisma+0x504>)
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	4b5a      	ldr	r3, [pc, #360]	; (8006e8c <checkDemoModCalisma+0x514>)
 8006d24:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 8006d26:	4b54      	ldr	r3, [pc, #336]	; (8006e78 <checkDemoModCalisma+0x500>)
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	4b58      	ldr	r3, [pc, #352]	; (8006e8c <checkDemoModCalisma+0x514>)
 8006d2c:	771a      	strb	r2, [r3, #28]
					hafizaYaz=1;
 8006d2e:	4b58      	ldr	r3, [pc, #352]	; (8006e90 <checkDemoModCalisma+0x518>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
			   		//mesajYazildi=0;
					demoCalismaSayisiYar=0;
 8006d34:	4b4f      	ldr	r3, [pc, #316]	; (8006e74 <checkDemoModCalisma+0x4fc>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006d3a:	4b56      	ldr	r3, [pc, #344]	; (8006e94 <checkDemoModCalisma+0x51c>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 8087 	bne.w	8006e52 <checkDemoModCalisma+0x4da>
					lcd_print(2,1,"Cycle      ");
 8006d44:	4a54      	ldr	r2, [pc, #336]	; (8006e98 <checkDemoModCalisma+0x520>)
 8006d46:	2101      	movs	r1, #1
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f7f9 fcc0 	bl	80006ce <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006d4e:	4a53      	ldr	r2, [pc, #332]	; (8006e9c <checkDemoModCalisma+0x524>)
 8006d50:	2101      	movs	r1, #1
 8006d52:	2001      	movs	r0, #1
 8006d54:	f7f9 fcbb 	bl	80006ce <lcd_print>
					itoa(calismaSayisi10000, snum, 10);
 8006d58:	4b4b      	ldr	r3, [pc, #300]	; (8006e88 <checkDemoModCalisma+0x510>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	4950      	ldr	r1, [pc, #320]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006d60:	4618      	mov	r0, r3
 8006d62:	f004 fd2d 	bl	800b7c0 <itoa>
					lcd_print(2,12,snum);
 8006d66:	4a4e      	ldr	r2, [pc, #312]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006d68:	210c      	movs	r1, #12
 8006d6a:	2002      	movs	r0, #2
 8006d6c:	f7f9 fcaf 	bl	80006ce <lcd_print>
					itoa(calismaSayisi1000, snum, 10);
 8006d70:	4b44      	ldr	r3, [pc, #272]	; (8006e84 <checkDemoModCalisma+0x50c>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	220a      	movs	r2, #10
 8006d76:	494a      	ldr	r1, [pc, #296]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f004 fd21 	bl	800b7c0 <itoa>
					lcd_print(2,13,snum);
 8006d7e:	4a48      	ldr	r2, [pc, #288]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006d80:	210d      	movs	r1, #13
 8006d82:	2002      	movs	r0, #2
 8006d84:	f7f9 fca3 	bl	80006ce <lcd_print>
					itoa(calismaSayisi100, snum, 10);
 8006d88:	4b3d      	ldr	r3, [pc, #244]	; (8006e80 <checkDemoModCalisma+0x508>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	220a      	movs	r2, #10
 8006d8e:	4944      	ldr	r1, [pc, #272]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006d90:	4618      	mov	r0, r3
 8006d92:	f004 fd15 	bl	800b7c0 <itoa>
					lcd_print(2,14,snum);
 8006d96:	4a42      	ldr	r2, [pc, #264]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006d98:	210e      	movs	r1, #14
 8006d9a:	2002      	movs	r0, #2
 8006d9c:	f7f9 fc97 	bl	80006ce <lcd_print>
					itoa(calismaSayisi10, snum, 10);
 8006da0:	4b36      	ldr	r3, [pc, #216]	; (8006e7c <checkDemoModCalisma+0x504>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	220a      	movs	r2, #10
 8006da6:	493e      	ldr	r1, [pc, #248]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006da8:	4618      	mov	r0, r3
 8006daa:	f004 fd09 	bl	800b7c0 <itoa>
					lcd_print(2,15,snum);
 8006dae:	4a3c      	ldr	r2, [pc, #240]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006db0:	210f      	movs	r1, #15
 8006db2:	2002      	movs	r0, #2
 8006db4:	f7f9 fc8b 	bl	80006ce <lcd_print>
					itoa(calismaSayisi1, snum, 10);
 8006db8:	4b2f      	ldr	r3, [pc, #188]	; (8006e78 <checkDemoModCalisma+0x500>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	220a      	movs	r2, #10
 8006dbe:	4938      	ldr	r1, [pc, #224]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f004 fcfd 	bl	800b7c0 <itoa>
					lcd_print(2,16,snum);
 8006dc6:	4a36      	ldr	r2, [pc, #216]	; (8006ea0 <checkDemoModCalisma+0x528>)
 8006dc8:	2110      	movs	r1, #16
 8006dca:	2002      	movs	r0, #2
 8006dcc:	f7f9 fc7f 	bl	80006ce <lcd_print>
					mesajYazildi=1;
 8006dd0:	4b34      	ldr	r3, [pc, #208]	; (8006ea4 <checkDemoModCalisma+0x52c>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006dd6:	e03c      	b.n	8006e52 <checkDemoModCalisma+0x4da>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8006dd8:	4b33      	ldr	r3, [pc, #204]	; (8006ea8 <checkDemoModCalisma+0x530>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d003      	beq.n	8006de8 <checkDemoModCalisma+0x470>
 8006de0:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <checkDemoModCalisma+0x51c>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d134      	bne.n	8006e52 <checkDemoModCalisma+0x4da>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006de8:	2200      	movs	r2, #0
 8006dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dee:	481b      	ldr	r0, [pc, #108]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006df0:	f001 fcd1 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006df4:	2200      	movs	r2, #0
 8006df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dfa:	4818      	ldr	r0, [pc, #96]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006dfc:	f001 fccb 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e00:	2200      	movs	r2, #0
 8006e02:	2104      	movs	r1, #4
 8006e04:	4815      	ldr	r0, [pc, #84]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006e06:	f001 fcc6 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	4813      	ldr	r0, [pc, #76]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006e10:	f001 fcc1 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006e14:	2200      	movs	r2, #0
 8006e16:	2101      	movs	r1, #1
 8006e18:	4810      	ldr	r0, [pc, #64]	; (8006e5c <checkDemoModCalisma+0x4e4>)
 8006e1a:	f001 fcbc 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2120      	movs	r1, #32
 8006e22:	480d      	ldr	r0, [pc, #52]	; (8006e58 <checkDemoModCalisma+0x4e0>)
 8006e24:	f001 fcb7 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2110      	movs	r1, #16
 8006e2c:	480a      	ldr	r0, [pc, #40]	; (8006e58 <checkDemoModCalisma+0x4e0>)
 8006e2e:	f001 fcb2 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006e32:	2200      	movs	r2, #0
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	480b      	ldr	r0, [pc, #44]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006e38:	f001 fcad 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2140      	movs	r1, #64	; 0x40
 8006e40:	4808      	ldr	r0, [pc, #32]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006e42:	f001 fca8 	bl	8008796 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006e46:	2200      	movs	r2, #0
 8006e48:	2120      	movs	r1, #32
 8006e4a:	4806      	ldr	r0, [pc, #24]	; (8006e64 <checkDemoModCalisma+0x4ec>)
 8006e4c:	f001 fca3 	bl	8008796 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006e50:	e7ff      	b.n	8006e52 <checkDemoModCalisma+0x4da>
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40010c00 	.word	0x40010c00
 8006e60:	20000b7c 	.word	0x20000b7c
 8006e64:	40010800 	.word	0x40010800
 8006e68:	20000b00 	.word	0x20000b00
 8006e6c:	20000b10 	.word	0x20000b10
 8006e70:	20000b7b 	.word	0x20000b7b
 8006e74:	20000b61 	.word	0x20000b61
 8006e78:	20000b21 	.word	0x20000b21
 8006e7c:	20000b22 	.word	0x20000b22
 8006e80:	20000941 	.word	0x20000941
 8006e84:	20000942 	.word	0x20000942
 8006e88:	20000b23 	.word	0x20000b23
 8006e8c:	20000ab8 	.word	0x20000ab8
 8006e90:	20000b4f 	.word	0x20000b4f
 8006e94:	20000b41 	.word	0x20000b41
 8006e98:	0800ce38 	.word	0x0800ce38
 8006e9c:	0800ce44 	.word	0x0800ce44
 8006ea0:	20000af8 	.word	0x20000af8
 8006ea4:	20000b57 	.word	0x20000b57
 8006ea8:	20000b42 	.word	0x20000b42

08006eac <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006eb2:	f7fe f92b 	bl	800510c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	48aa      	ldr	r0, [pc, #680]	; (8007164 <mainLoop+0x2b8>)
 8006eba:	f001 fc55 	bl	8008768 <HAL_GPIO_ReadPin>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d136      	bne.n	8006f32 <mainLoop+0x86>
 8006ec4:	2108      	movs	r1, #8
 8006ec6:	48a8      	ldr	r0, [pc, #672]	; (8007168 <mainLoop+0x2bc>)
 8006ec8:	f001 fc4e 	bl	8008768 <HAL_GPIO_ReadPin>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d12f      	bne.n	8006f32 <mainLoop+0x86>
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	48a3      	ldr	r0, [pc, #652]	; (8007164 <mainLoop+0x2b8>)
 8006ed6:	f001 fc47 	bl	8008768 <HAL_GPIO_ReadPin>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d128      	bne.n	8006f32 <mainLoop+0x86>
 8006ee0:	2104      	movs	r1, #4
 8006ee2:	48a0      	ldr	r0, [pc, #640]	; (8007164 <mainLoop+0x2b8>)
 8006ee4:	f001 fc40 	bl	8008768 <HAL_GPIO_ReadPin>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d121      	bne.n	8006f32 <mainLoop+0x86>
 8006eee:	2108      	movs	r1, #8
 8006ef0:	489c      	ldr	r0, [pc, #624]	; (8007164 <mainLoop+0x2b8>)
 8006ef2:	f001 fc39 	bl	8008768 <HAL_GPIO_ReadPin>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11a      	bne.n	8006f32 <mainLoop+0x86>
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	489a      	ldr	r0, [pc, #616]	; (8007168 <mainLoop+0x2bc>)
 8006f00:	f001 fc32 	bl	8008768 <HAL_GPIO_ReadPin>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d113      	bne.n	8006f32 <mainLoop+0x86>
 8006f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f0e:	4896      	ldr	r0, [pc, #600]	; (8007168 <mainLoop+0x2bc>)
 8006f10:	f001 fc2a 	bl	8008768 <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d10b      	bne.n	8006f32 <mainLoop+0x86>
 8006f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f1e:	4892      	ldr	r0, [pc, #584]	; (8007168 <mainLoop+0x2bc>)
 8006f20:	f001 fc22 	bl	8008768 <HAL_GPIO_ReadPin>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d103      	bne.n	8006f32 <mainLoop+0x86>
			butonKontrol=0;
 8006f2a:	4b90      	ldr	r3, [pc, #576]	; (800716c <mainLoop+0x2c0>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e003      	b.n	8006f3a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006f32:	4b8f      	ldr	r3, [pc, #572]	; (8007170 <mainLoop+0x2c4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a8f      	ldr	r2, [pc, #572]	; (8007174 <mainLoop+0x2c8>)
 8006f38:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006f3a:	4b8f      	ldr	r3, [pc, #572]	; (8007178 <mainLoop+0x2cc>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d039      	beq.n	8006fb6 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006f42:	bf00      	nop
 8006f44:	488d      	ldr	r0, [pc, #564]	; (800717c <mainLoop+0x2d0>)
 8006f46:	f002 fa38 	bl	80093ba <HAL_I2C_GetError>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d0f9      	beq.n	8006f44 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006f50:	bf00      	nop
 8006f52:	488a      	ldr	r0, [pc, #552]	; (800717c <mainLoop+0x2d0>)
 8006f54:	f002 fa24 	bl	80093a0 <HAL_I2C_GetState>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d1f9      	bne.n	8006f52 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8006f5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f62:	9302      	str	r3, [sp, #8]
 8006f64:	233f      	movs	r3, #63	; 0x3f
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	4b85      	ldr	r3, [pc, #532]	; (8007180 <mainLoop+0x2d4>)
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	233f      	movs	r3, #63	; 0x3f
 8006f6e:	2200      	movs	r2, #0
 8006f70:	21a0      	movs	r1, #160	; 0xa0
 8006f72:	4882      	ldr	r0, [pc, #520]	; (800717c <mainLoop+0x2d0>)
 8006f74:	f001 feb2 	bl	8008cdc <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8006f78:	2005      	movs	r0, #5
 8006f7a:	f000 fe25 	bl	8007bc8 <HAL_Delay>

		  hafizaYaz=0;
 8006f7e:	4b7e      	ldr	r3, [pc, #504]	; (8007178 <mainLoop+0x2cc>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006f84:	4b7f      	ldr	r3, [pc, #508]	; (8007184 <mainLoop+0x2d8>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8006f8c:	4a7e      	ldr	r2, [pc, #504]	; (8007188 <mainLoop+0x2dc>)
 8006f8e:	2101      	movs	r1, #1
 8006f90:	2002      	movs	r0, #2
 8006f92:	f7f9 fb9c 	bl	80006ce <lcd_print>
 8006f96:	e008      	b.n	8006faa <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8006f98:	4b7a      	ldr	r3, [pc, #488]	; (8007184 <mainLoop+0x2d8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d104      	bne.n	8006faa <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8006fa0:	4a7a      	ldr	r2, [pc, #488]	; (800718c <mainLoop+0x2e0>)
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	2002      	movs	r0, #2
 8006fa6:	f7f9 fb92 	bl	80006ce <lcd_print>
		  }

		  HAL_Delay(1000);
 8006faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fae:	f000 fe0b 	bl	8007bc8 <HAL_Delay>
		  lcd_clear();
 8006fb2:	f7f9 fba1 	bl	80006f8 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006fb6:	4b76      	ldr	r3, [pc, #472]	; (8007190 <mainLoop+0x2e4>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f083 0301 	eor.w	r3, r3, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d06b      	beq.n	800709c <mainLoop+0x1f0>
 8006fc4:	486d      	ldr	r0, [pc, #436]	; (800717c <mainLoop+0x2d0>)
 8006fc6:	f002 f9eb 	bl	80093a0 <HAL_I2C_GetState>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d165      	bne.n	800709c <mainLoop+0x1f0>
		  if(ilkOkuma==0) {
 8006fd0:	4b70      	ldr	r3, [pc, #448]	; (8007194 <mainLoop+0x2e8>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f083 0301 	eor.w	r3, r3, #1
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d044      	beq.n	8007068 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006fde:	4a6e      	ldr	r2, [pc, #440]	; (8007198 <mainLoop+0x2ec>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	f7f9 fb73 	bl	80006ce <lcd_print>
			  if(dilSecim==0) {
 8006fe8:	4b66      	ldr	r3, [pc, #408]	; (8007184 <mainLoop+0x2d8>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d105      	bne.n	8006ffc <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8006ff0:	4a6a      	ldr	r2, [pc, #424]	; (800719c <mainLoop+0x2f0>)
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	f7f9 fb6a 	bl	80006ce <lcd_print>
 8006ffa:	e008      	b.n	800700e <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8006ffc:	4b61      	ldr	r3, [pc, #388]	; (8007184 <mainLoop+0x2d8>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d104      	bne.n	800700e <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8007004:	4a66      	ldr	r2, [pc, #408]	; (80071a0 <mainLoop+0x2f4>)
 8007006:	2101      	movs	r1, #1
 8007008:	2002      	movs	r0, #2
 800700a:	f7f9 fb60 	bl	80006ce <lcd_print>
			  }
			  HAL_Delay(1000);
 800700e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007012:	f000 fdd9 	bl	8007bc8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007016:	bf00      	nop
 8007018:	4858      	ldr	r0, [pc, #352]	; (800717c <mainLoop+0x2d0>)
 800701a:	f002 f9ce 	bl	80093ba <HAL_I2C_GetError>
 800701e:	4603      	mov	r3, r0
 8007020:	2b04      	cmp	r3, #4
 8007022:	d0f9      	beq.n	8007018 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007024:	e003      	b.n	800702e <mainLoop+0x182>
				  HAL_Delay(1000);
 8007026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800702a:	f000 fdcd 	bl	8007bc8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800702e:	4853      	ldr	r0, [pc, #332]	; (800717c <mainLoop+0x2d0>)
 8007030:	f002 f9b6 	bl	80093a0 <HAL_I2C_GetState>
 8007034:	4603      	mov	r3, r0
 8007036:	2b20      	cmp	r3, #32
 8007038:	d1f5      	bne.n	8007026 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 800703a:	4b52      	ldr	r3, [pc, #328]	; (8007184 <mainLoop+0x2d8>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8007042:	4a58      	ldr	r2, [pc, #352]	; (80071a4 <mainLoop+0x2f8>)
 8007044:	2101      	movs	r1, #1
 8007046:	2002      	movs	r0, #2
 8007048:	f7f9 fb41 	bl	80006ce <lcd_print>
 800704c:	e008      	b.n	8007060 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 800704e:	4b4d      	ldr	r3, [pc, #308]	; (8007184 <mainLoop+0x2d8>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d104      	bne.n	8007060 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8007056:	4a54      	ldr	r2, [pc, #336]	; (80071a8 <mainLoop+0x2fc>)
 8007058:	2101      	movs	r1, #1
 800705a:	2002      	movs	r0, #2
 800705c:	f7f9 fb37 	bl	80006ce <lcd_print>
			  }

			  ilkOkuma=1;
 8007060:	4b4c      	ldr	r3, [pc, #304]	; (8007194 <mainLoop+0x2e8>)
 8007062:	2201      	movs	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e014      	b.n	8007092 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8007068:	4b46      	ldr	r3, [pc, #280]	; (8007184 <mainLoop+0x2d8>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007070:	4a4e      	ldr	r2, [pc, #312]	; (80071ac <mainLoop+0x300>)
 8007072:	2101      	movs	r1, #1
 8007074:	2002      	movs	r0, #2
 8007076:	f7f9 fb2a 	bl	80006ce <lcd_print>
 800707a:	e008      	b.n	800708e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 800707c:	4b41      	ldr	r3, [pc, #260]	; (8007184 <mainLoop+0x2d8>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d104      	bne.n	800708e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8007084:	4a4a      	ldr	r2, [pc, #296]	; (80071b0 <mainLoop+0x304>)
 8007086:	2101      	movs	r1, #1
 8007088:	2002      	movs	r0, #2
 800708a:	f7f9 fb20 	bl	80006ce <lcd_print>
			  }
			  lcd_clear();
 800708e:	f7f9 fb33 	bl	80006f8 <lcd_clear>
		  }

		  eepromKontrol();
 8007092:	f7fd fc17 	bl	80048c4 <eepromKontrol>
		  hafizaOku=1;
 8007096:	4b3e      	ldr	r3, [pc, #248]	; (8007190 <mainLoop+0x2e4>)
 8007098:	2201      	movs	r2, #1
 800709a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800709c:	4b45      	ldr	r3, [pc, #276]	; (80071b4 <mainLoop+0x308>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11c      	bne.n	80070de <mainLoop+0x232>
 80070a4:	4b44      	ldr	r3, [pc, #272]	; (80071b8 <mainLoop+0x30c>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f083 0301 	eor.w	r3, r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d015      	beq.n	80070de <mainLoop+0x232>
 80070b2:	4b42      	ldr	r3, [pc, #264]	; (80071bc <mainLoop+0x310>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d111      	bne.n	80070de <mainLoop+0x232>
			lcd_clear();
 80070ba:	f7f9 fb1d 	bl	80006f8 <lcd_clear>
			HAL_Delay(10);
 80070be:	200a      	movs	r0, #10
 80070c0:	f000 fd82 	bl	8007bc8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80070c4:	4a3e      	ldr	r2, [pc, #248]	; (80071c0 <mainLoop+0x314>)
 80070c6:	2101      	movs	r1, #1
 80070c8:	2001      	movs	r0, #1
 80070ca:	f7f9 fb00 	bl	80006ce <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80070ce:	4a3d      	ldr	r2, [pc, #244]	; (80071c4 <mainLoop+0x318>)
 80070d0:	2101      	movs	r1, #1
 80070d2:	2002      	movs	r0, #2
 80070d4:	f7f9 fafb 	bl	80006ce <lcd_print>
			mesajYazildi=1;
 80070d8:	4b37      	ldr	r3, [pc, #220]	; (80071b8 <mainLoop+0x30c>)
 80070da:	2201      	movs	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80070de:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <mainLoop+0x308>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d112      	bne.n	800710c <mainLoop+0x260>
 80070e6:	2102      	movs	r1, #2
 80070e8:	481e      	ldr	r0, [pc, #120]	; (8007164 <mainLoop+0x2b8>)
 80070ea:	f001 fb3d 	bl	8008768 <HAL_GPIO_ReadPin>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d10b      	bne.n	800710c <mainLoop+0x260>
 80070f4:	2104      	movs	r1, #4
 80070f6:	481b      	ldr	r0, [pc, #108]	; (8007164 <mainLoop+0x2b8>)
 80070f8:	f001 fb36 	bl	8008768 <HAL_GPIO_ReadPin>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d104      	bne.n	800710c <mainLoop+0x260>
			menuGiris=1;
 8007102:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <mainLoop+0x308>)
 8007104:	2201      	movs	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007108:	f7f9 faf6 	bl	80006f8 <lcd_clear>
		}

		if(menuGiris==1) {
 800710c:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <mainLoop+0x308>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <mainLoop+0x26c>
			menu();
 8007114:	f7f9 fb3c 	bl	8000790 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800711c:	4812      	ldr	r0, [pc, #72]	; (8007168 <mainLoop+0x2bc>)
 800711e:	f001 fb52 	bl	80087c6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007126:	4828      	ldr	r0, [pc, #160]	; (80071c8 <mainLoop+0x31c>)
 8007128:	f001 fb1e 	bl	8008768 <HAL_GPIO_ReadPin>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <mainLoop+0x29c>
 8007132:	4b26      	ldr	r3, [pc, #152]	; (80071cc <mainLoop+0x320>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f083 0301 	eor.w	r3, r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <mainLoop+0x29c>
			stopVar=1;
 8007140:	4b23      	ldr	r3, [pc, #140]	; (80071d0 <mainLoop+0x324>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e002      	b.n	800714e <mainLoop+0x2a2>
		} else {
			stopVar=0;
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <mainLoop+0x324>)
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 800714e:	f7fd fff7 	bl	8005140 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007152:	f7fe f829 	bl	80051a8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007156:	f7fe f86d 	bl	8005234 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800715a:	f7fe f8bd 	bl	80052d8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 800715e:	f7ff fc0b 	bl	8006978 <checkDemoModCalisma>
		checkLCDBacklight();
 8007162:	e6a6      	b.n	8006eb2 <mainLoop+0x6>
 8007164:	40010800 	.word	0x40010800
 8007168:	40011000 	.word	0x40011000
 800716c:	20000b52 	.word	0x20000b52
 8007170:	20000b00 	.word	0x20000b00
 8007174:	20000b1c 	.word	0x20000b1c
 8007178:	20000b4f 	.word	0x20000b4f
 800717c:	20000ce0 	.word	0x20000ce0
 8007180:	20000ab8 	.word	0x20000ab8
 8007184:	20000b44 	.word	0x20000b44
 8007188:	0800ce5c 	.word	0x0800ce5c
 800718c:	0800ce70 	.word	0x0800ce70
 8007190:	20000b50 	.word	0x20000b50
 8007194:	20000b51 	.word	0x20000b51
 8007198:	0800ce84 	.word	0x0800ce84
 800719c:	0800ce98 	.word	0x0800ce98
 80071a0:	0800ceac 	.word	0x0800ceac
 80071a4:	0800cec0 	.word	0x0800cec0
 80071a8:	0800ced4 	.word	0x0800ced4
 80071ac:	0800cee8 	.word	0x0800cee8
 80071b0:	0800cefc 	.word	0x0800cefc
 80071b4:	20000b41 	.word	0x20000b41
 80071b8:	20000b57 	.word	0x20000b57
 80071bc:	20000b42 	.word	0x20000b42
 80071c0:	0800cdc4 	.word	0x0800cdc4
 80071c4:	0800cdd8 	.word	0x0800cdd8
 80071c8:	40010c00 	.word	0x40010c00
 80071cc:	20000b78 	.word	0x20000b78
 80071d0:	20000b75 	.word	0x20000b75

080071d4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80071e4:	6013      	str	r3, [r2, #0]
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr
 80071f0:	20000b00 	.word	0x20000b00

080071f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071f8:	f000 fc84 	bl	8007b04 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80071fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007200:	f000 fce2 	bl	8007bc8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007204:	f000 f8b4 	bl	8007370 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007208:	f000 f9d6 	bl	80075b8 <MX_GPIO_Init>
  MX_CAN_Init();
 800720c:	f000 f8f6 	bl	80073fc <MX_CAN_Init>
  MX_I2C1_Init();
 8007210:	f000 f928 	bl	8007464 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007214:	f000 f954 	bl	80074c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007218:	f000 f9a4 	bl	8007564 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800721c:	2201      	movs	r2, #1
 800721e:	2140      	movs	r1, #64	; 0x40
 8007220:	4847      	ldr	r0, [pc, #284]	; (8007340 <main+0x14c>)
 8007222:	f001 fab8 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007226:	2201      	movs	r2, #1
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	4845      	ldr	r0, [pc, #276]	; (8007340 <main+0x14c>)
 800722c:	f001 fab3 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007230:	200a      	movs	r0, #10
 8007232:	f000 fcc9 	bl	8007bc8 <HAL_Delay>
  lcd_init();
 8007236:	f7f9 fa18 	bl	800066a <lcd_init>
  HAL_Delay(10);
 800723a:	200a      	movs	r0, #10
 800723c:	f000 fcc4 	bl	8007bc8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007240:	4840      	ldr	r0, [pc, #256]	; (8007344 <main+0x150>)
 8007242:	f003 f95b 	bl	800a4fc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007246:	bf00      	nop
 8007248:	483f      	ldr	r0, [pc, #252]	; (8007348 <main+0x154>)
 800724a:	f002 f8b6 	bl	80093ba <HAL_I2C_GetError>
 800724e:	4603      	mov	r3, r0
 8007250:	2b04      	cmp	r3, #4
 8007252:	d0f9      	beq.n	8007248 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007254:	bf00      	nop
 8007256:	483c      	ldr	r0, [pc, #240]	; (8007348 <main+0x154>)
 8007258:	f002 f8a2 	bl	80093a0 <HAL_I2C_GetState>
 800725c:	4603      	mov	r3, r0
 800725e:	2b20      	cmp	r3, #32
 8007260:	d1f9      	bne.n	8007256 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007262:	2200      	movs	r2, #0
 8007264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007268:	4835      	ldr	r0, [pc, #212]	; (8007340 <main+0x14c>)
 800726a:	f001 fa94 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007274:	4832      	ldr	r0, [pc, #200]	; (8007340 <main+0x14c>)
 8007276:	f001 fa8e 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800727a:	2200      	movs	r2, #0
 800727c:	2104      	movs	r1, #4
 800727e:	4830      	ldr	r0, [pc, #192]	; (8007340 <main+0x14c>)
 8007280:	f001 fa89 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007284:	2200      	movs	r2, #0
 8007286:	2102      	movs	r1, #2
 8007288:	482d      	ldr	r0, [pc, #180]	; (8007340 <main+0x14c>)
 800728a:	f001 fa84 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800728e:	2200      	movs	r2, #0
 8007290:	2101      	movs	r1, #1
 8007292:	482b      	ldr	r0, [pc, #172]	; (8007340 <main+0x14c>)
 8007294:	f001 fa7f 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007298:	2200      	movs	r2, #0
 800729a:	2120      	movs	r1, #32
 800729c:	482b      	ldr	r0, [pc, #172]	; (800734c <main+0x158>)
 800729e:	f001 fa7a 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80072a2:	2200      	movs	r2, #0
 80072a4:	2110      	movs	r1, #16
 80072a6:	4829      	ldr	r0, [pc, #164]	; (800734c <main+0x158>)
 80072a8:	f001 fa75 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80072ac:	2200      	movs	r2, #0
 80072ae:	2180      	movs	r1, #128	; 0x80
 80072b0:	4827      	ldr	r0, [pc, #156]	; (8007350 <main+0x15c>)
 80072b2:	f001 fa70 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80072b6:	2200      	movs	r2, #0
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	4825      	ldr	r0, [pc, #148]	; (8007350 <main+0x15c>)
 80072bc:	f001 fa6b 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80072c0:	2200      	movs	r2, #0
 80072c2:	2120      	movs	r1, #32
 80072c4:	4822      	ldr	r0, [pc, #136]	; (8007350 <main+0x15c>)
 80072c6:	f001 fa66 	bl	8008796 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80072ca:	2200      	movs	r2, #0
 80072cc:	2110      	movs	r1, #16
 80072ce:	4820      	ldr	r0, [pc, #128]	; (8007350 <main+0x15c>)
 80072d0:	f001 fa61 	bl	8008796 <HAL_GPIO_WritePin>

  i2cTest();
 80072d4:	f7fd fe6c 	bl	8004fb0 <i2cTest>
  HAL_Delay(100);
 80072d8:	2064      	movs	r0, #100	; 0x64
 80072da:	f000 fc75 	bl	8007bc8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80072de:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <main+0x160>)
 80072e0:	2101      	movs	r1, #1
 80072e2:	2001      	movs	r0, #1
 80072e4:	f7f9 f9f3 	bl	80006ce <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80072e8:	4a1b      	ldr	r2, [pc, #108]	; (8007358 <main+0x164>)
 80072ea:	2101      	movs	r1, #1
 80072ec:	2002      	movs	r0, #2
 80072ee:	f7f9 f9ee 	bl	80006ce <lcd_print>
  HAL_Delay(1000);
 80072f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072f6:	f000 fc67 	bl	8007bc8 <HAL_Delay>
  lcd_clear();
 80072fa:	f7f9 f9fd 	bl	80006f8 <lcd_clear>

  eepromKontrol();
 80072fe:	f7fd fae1 	bl	80048c4 <eepromKontrol>

  lcd_clear();
 8007302:	f7f9 f9f9 	bl	80006f8 <lcd_clear>

  ESP8266_Init(&huart1);
 8007306:	4815      	ldr	r0, [pc, #84]	; (800735c <main+0x168>)
 8007308:	f7f8 ff94 	bl	8000234 <ESP8266_Init>
  lcd_print(1, 1, "Test1");
 800730c:	4a14      	ldr	r2, [pc, #80]	; (8007360 <main+0x16c>)
 800730e:	2101      	movs	r1, #1
 8007310:	2001      	movs	r0, #1
 8007312:	f7f9 f9dc 	bl	80006ce <lcd_print>
  SendMachineData(&huart1);
 8007316:	4811      	ldr	r0, [pc, #68]	; (800735c <main+0x168>)
 8007318:	f7f9 f844 	bl	80003a4 <SendMachineData>
  lcd_print(2, 1, "Test2");
 800731c:	4a11      	ldr	r2, [pc, #68]	; (8007364 <main+0x170>)
 800731e:	2101      	movs	r1, #1
 8007320:	2002      	movs	r0, #2
 8007322:	f7f9 f9d4 	bl	80006ce <lcd_print>
  HAL_Delay(500);
 8007326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800732a:	f000 fc4d 	bl	8007bc8 <HAL_Delay>
  lcd_clear();
 800732e:	f7f9 f9e3 	bl	80006f8 <lcd_clear>

  backLightTimer = millis;
 8007332:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <main+0x174>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a0d      	ldr	r2, [pc, #52]	; (800736c <main+0x178>)
 8007338:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800733a:	f7ff fdb7 	bl	8006eac <mainLoop>
 800733e:	e7fc      	b.n	800733a <main+0x146>
 8007340:	40010c00 	.word	0x40010c00
 8007344:	20000d34 	.word	0x20000d34
 8007348:	20000ce0 	.word	0x20000ce0
 800734c:	40011000 	.word	0x40011000
 8007350:	40010800 	.word	0x40010800
 8007354:	0800cf10 	.word	0x0800cf10
 8007358:	0800cf24 	.word	0x0800cf24
 800735c:	20000d7c 	.word	0x20000d7c
 8007360:	0800cf38 	.word	0x0800cf38
 8007364:	0800cf40 	.word	0x0800cf40
 8007368:	20000b00 	.word	0x20000b00
 800736c:	20000b1c 	.word	0x20000b1c

08007370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b090      	sub	sp, #64	; 0x40
 8007374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007376:	f107 0318 	add.w	r3, r7, #24
 800737a:	2228      	movs	r2, #40	; 0x28
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f004 fb36 	bl	800b9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007384:	1d3b      	adds	r3, r7, #4
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	609a      	str	r2, [r3, #8]
 800738e:	60da      	str	r2, [r3, #12]
 8007390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007392:	2301      	movs	r3, #1
 8007394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800739a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800739c:	2300      	movs	r3, #0
 800739e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073a0:	2301      	movs	r3, #1
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073a4:	2302      	movs	r3, #2
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80073ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073b4:	f107 0318 	add.w	r3, r7, #24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f002 fc3f 	bl	8009c3c <HAL_RCC_OscConfig>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80073c4:	f000 f9a2 	bl	800770c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073c8:	230f      	movs	r3, #15
 80073ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073cc:	2302      	movs	r3, #2
 80073ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80073de:	1d3b      	adds	r3, r7, #4
 80073e0:	2102      	movs	r1, #2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 feac 	bl	800a140 <HAL_RCC_ClockConfig>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80073ee:	f000 f98d 	bl	800770c <Error_Handler>
  }
}
 80073f2:	bf00      	nop
 80073f4:	3740      	adds	r7, #64	; 0x40
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007400:	4b16      	ldr	r3, [pc, #88]	; (800745c <MX_CAN_Init+0x60>)
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <MX_CAN_Init+0x64>)
 8007404:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007406:	4b15      	ldr	r3, [pc, #84]	; (800745c <MX_CAN_Init+0x60>)
 8007408:	2210      	movs	r2, #16
 800740a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800740c:	4b13      	ldr	r3, [pc, #76]	; (800745c <MX_CAN_Init+0x60>)
 800740e:	2200      	movs	r2, #0
 8007410:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007412:	4b12      	ldr	r3, [pc, #72]	; (800745c <MX_CAN_Init+0x60>)
 8007414:	2200      	movs	r2, #0
 8007416:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <MX_CAN_Init+0x60>)
 800741a:	2200      	movs	r2, #0
 800741c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <MX_CAN_Init+0x60>)
 8007420:	2200      	movs	r2, #0
 8007422:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <MX_CAN_Init+0x60>)
 8007426:	2200      	movs	r2, #0
 8007428:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <MX_CAN_Init+0x60>)
 800742c:	2200      	movs	r2, #0
 800742e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <MX_CAN_Init+0x60>)
 8007432:	2200      	movs	r2, #0
 8007434:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <MX_CAN_Init+0x60>)
 8007438:	2200      	movs	r2, #0
 800743a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <MX_CAN_Init+0x60>)
 800743e:	2200      	movs	r2, #0
 8007440:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <MX_CAN_Init+0x60>)
 8007444:	2200      	movs	r2, #0
 8007446:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007448:	4804      	ldr	r0, [pc, #16]	; (800745c <MX_CAN_Init+0x60>)
 800744a:	f000 fbe1 	bl	8007c10 <HAL_CAN_Init>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007454:	f000 f95a 	bl	800770c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007458:	bf00      	nop
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000cb8 	.word	0x20000cb8
 8007460:	40006400 	.word	0x40006400

08007464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007468:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <MX_I2C1_Init+0x50>)
 800746a:	4a13      	ldr	r2, [pc, #76]	; (80074b8 <MX_I2C1_Init+0x54>)
 800746c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <MX_I2C1_Init+0x50>)
 8007470:	4a12      	ldr	r2, [pc, #72]	; (80074bc <MX_I2C1_Init+0x58>)
 8007472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <MX_I2C1_Init+0x50>)
 8007476:	2200      	movs	r2, #0
 8007478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800747a:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <MX_I2C1_Init+0x50>)
 800747c:	2200      	movs	r2, #0
 800747e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <MX_I2C1_Init+0x50>)
 8007482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <MX_I2C1_Init+0x50>)
 800748a:	2200      	movs	r2, #0
 800748c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <MX_I2C1_Init+0x50>)
 8007490:	2200      	movs	r2, #0
 8007492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007494:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <MX_I2C1_Init+0x50>)
 8007496:	2200      	movs	r2, #0
 8007498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800749a:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <MX_I2C1_Init+0x50>)
 800749c:	2200      	movs	r2, #0
 800749e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80074a0:	4804      	ldr	r0, [pc, #16]	; (80074b4 <MX_I2C1_Init+0x50>)
 80074a2:	f001 f9a9 	bl	80087f8 <HAL_I2C_Init>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80074ac:	f000 f92e 	bl	800770c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80074b0:	bf00      	nop
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000ce0 	.word	0x20000ce0
 80074b8:	40005400 	.word	0x40005400
 80074bc:	00061a80 	.word	0x00061a80

080074c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	605a      	str	r2, [r3, #4]
 80074d0:	609a      	str	r2, [r3, #8]
 80074d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074d4:	463b      	mov	r3, r7
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <MX_TIM1_Init+0x9c>)
 80074de:	4a20      	ldr	r2, [pc, #128]	; (8007560 <MX_TIM1_Init+0xa0>)
 80074e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80074e2:	4b1e      	ldr	r3, [pc, #120]	; (800755c <MX_TIM1_Init+0x9c>)
 80074e4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80074e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <MX_TIM1_Init+0x9c>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80074f0:	4b1a      	ldr	r3, [pc, #104]	; (800755c <MX_TIM1_Init+0x9c>)
 80074f2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80074f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074f8:	4b18      	ldr	r3, [pc, #96]	; (800755c <MX_TIM1_Init+0x9c>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80074fe:	4b17      	ldr	r3, [pc, #92]	; (800755c <MX_TIM1_Init+0x9c>)
 8007500:	2200      	movs	r2, #0
 8007502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007504:	4b15      	ldr	r3, [pc, #84]	; (800755c <MX_TIM1_Init+0x9c>)
 8007506:	2200      	movs	r2, #0
 8007508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800750a:	4814      	ldr	r0, [pc, #80]	; (800755c <MX_TIM1_Init+0x9c>)
 800750c:	f002 ffa6 	bl	800a45c <HAL_TIM_Base_Init>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007516:	f000 f8f9 	bl	800770c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800751a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800751e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007520:	f107 0308 	add.w	r3, r7, #8
 8007524:	4619      	mov	r1, r3
 8007526:	480d      	ldr	r0, [pc, #52]	; (800755c <MX_TIM1_Init+0x9c>)
 8007528:	f003 f950 	bl	800a7cc <HAL_TIM_ConfigClockSource>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007532:	f000 f8eb 	bl	800770c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007536:	2300      	movs	r3, #0
 8007538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800753e:	463b      	mov	r3, r7
 8007540:	4619      	mov	r1, r3
 8007542:	4806      	ldr	r0, [pc, #24]	; (800755c <MX_TIM1_Init+0x9c>)
 8007544:	f003 fb3e 	bl	800abc4 <HAL_TIMEx_MasterConfigSynchronization>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800754e:	f000 f8dd 	bl	800770c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007552:	bf00      	nop
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000d34 	.word	0x20000d34
 8007560:	40012c00 	.word	0x40012c00

08007564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007568:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 800756a:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <MX_USART1_UART_Init+0x50>)
 800756c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800756e:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 8007570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 8007578:	2200      	movs	r2, #0
 800757a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 800757e:	2200      	movs	r2, #0
 8007580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 8007584:	2200      	movs	r2, #0
 8007586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007588:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 800758a:	220c      	movs	r2, #12
 800758c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 8007590:	2200      	movs	r2, #0
 8007592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 8007596:	2200      	movs	r2, #0
 8007598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800759a:	4805      	ldr	r0, [pc, #20]	; (80075b0 <MX_USART1_UART_Init+0x4c>)
 800759c:	f003 fb90 	bl	800acc0 <HAL_UART_Init>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80075a6:	f000 f8b1 	bl	800770c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000d7c 	.word	0x20000d7c
 80075b4:	40013800 	.word	0x40013800

080075b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075be:	f107 0310 	add.w	r3, r7, #16
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	605a      	str	r2, [r3, #4]
 80075c8:	609a      	str	r2, [r3, #8]
 80075ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075cc:	4b4b      	ldr	r3, [pc, #300]	; (80076fc <MX_GPIO_Init+0x144>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	4a4a      	ldr	r2, [pc, #296]	; (80076fc <MX_GPIO_Init+0x144>)
 80075d2:	f043 0310 	orr.w	r3, r3, #16
 80075d6:	6193      	str	r3, [r2, #24]
 80075d8:	4b48      	ldr	r3, [pc, #288]	; (80076fc <MX_GPIO_Init+0x144>)
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80075e4:	4b45      	ldr	r3, [pc, #276]	; (80076fc <MX_GPIO_Init+0x144>)
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	4a44      	ldr	r2, [pc, #272]	; (80076fc <MX_GPIO_Init+0x144>)
 80075ea:	f043 0320 	orr.w	r3, r3, #32
 80075ee:	6193      	str	r3, [r2, #24]
 80075f0:	4b42      	ldr	r3, [pc, #264]	; (80076fc <MX_GPIO_Init+0x144>)
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fc:	4b3f      	ldr	r3, [pc, #252]	; (80076fc <MX_GPIO_Init+0x144>)
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	4a3e      	ldr	r2, [pc, #248]	; (80076fc <MX_GPIO_Init+0x144>)
 8007602:	f043 0304 	orr.w	r3, r3, #4
 8007606:	6193      	str	r3, [r2, #24]
 8007608:	4b3c      	ldr	r3, [pc, #240]	; (80076fc <MX_GPIO_Init+0x144>)
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	607b      	str	r3, [r7, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007614:	4b39      	ldr	r3, [pc, #228]	; (80076fc <MX_GPIO_Init+0x144>)
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	4a38      	ldr	r2, [pc, #224]	; (80076fc <MX_GPIO_Init+0x144>)
 800761a:	f043 0308 	orr.w	r3, r3, #8
 800761e:	6193      	str	r3, [r2, #24]
 8007620:	4b36      	ldr	r3, [pc, #216]	; (80076fc <MX_GPIO_Init+0x144>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800762c:	2200      	movs	r2, #0
 800762e:	21f0      	movs	r1, #240	; 0xf0
 8007630:	4833      	ldr	r0, [pc, #204]	; (8007700 <MX_GPIO_Init+0x148>)
 8007632:	f001 f8b0 	bl	8008796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007636:	2200      	movs	r2, #0
 8007638:	f241 0130 	movw	r1, #4144	; 0x1030
 800763c:	4831      	ldr	r0, [pc, #196]	; (8007704 <MX_GPIO_Init+0x14c>)
 800763e:	f001 f8aa 	bl	8008796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007642:	2200      	movs	r2, #0
 8007644:	f640 4107 	movw	r1, #3079	; 0xc07
 8007648:	482f      	ldr	r0, [pc, #188]	; (8007708 <MX_GPIO_Init+0x150>)
 800764a:	f001 f8a4 	bl	8008796 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800764e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007652:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	4619      	mov	r1, r3
 8007662:	4828      	ldr	r0, [pc, #160]	; (8007704 <MX_GPIO_Init+0x14c>)
 8007664:	f000 fe20 	bl	80082a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007668:	f248 130f 	movw	r3, #33039	; 0x810f
 800766c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007676:	f107 0310 	add.w	r3, r7, #16
 800767a:	4619      	mov	r1, r3
 800767c:	4820      	ldr	r0, [pc, #128]	; (8007700 <MX_GPIO_Init+0x148>)
 800767e:	f000 fe13 	bl	80082a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007682:	23f0      	movs	r3, #240	; 0xf0
 8007684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007686:	2301      	movs	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800768e:	2302      	movs	r3, #2
 8007690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007692:	f107 0310 	add.w	r3, r7, #16
 8007696:	4619      	mov	r1, r3
 8007698:	4819      	ldr	r0, [pc, #100]	; (8007700 <MX_GPIO_Init+0x148>)
 800769a:	f000 fe05 	bl	80082a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800769e:	f241 0330 	movw	r3, #4144	; 0x1030
 80076a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ac:	2302      	movs	r3, #2
 80076ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076b0:	f107 0310 	add.w	r3, r7, #16
 80076b4:	4619      	mov	r1, r3
 80076b6:	4813      	ldr	r0, [pc, #76]	; (8007704 <MX_GPIO_Init+0x14c>)
 80076b8:	f000 fdf6 	bl	80082a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80076bc:	f640 4307 	movw	r3, #3079	; 0xc07
 80076c0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ca:	2302      	movs	r3, #2
 80076cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ce:	f107 0310 	add.w	r3, r7, #16
 80076d2:	4619      	mov	r1, r3
 80076d4:	480c      	ldr	r0, [pc, #48]	; (8007708 <MX_GPIO_Init+0x150>)
 80076d6:	f000 fde7 	bl	80082a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80076da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80076de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076e8:	f107 0310 	add.w	r3, r7, #16
 80076ec:	4619      	mov	r1, r3
 80076ee:	4806      	ldr	r0, [pc, #24]	; (8007708 <MX_GPIO_Init+0x150>)
 80076f0:	f000 fdda 	bl	80082a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80076f4:	bf00      	nop
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000
 8007700:	40010800 	.word	0x40010800
 8007704:	40011000 	.word	0x40011000
 8007708:	40010c00 	.word	0x40010c00

0800770c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007710:	bf00      	nop
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <HAL_MspInit+0x5c>)
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	4a14      	ldr	r2, [pc, #80]	; (8007774 <HAL_MspInit+0x5c>)
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	6193      	str	r3, [r2, #24]
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <HAL_MspInit+0x5c>)
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007736:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <HAL_MspInit+0x5c>)
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4a0e      	ldr	r2, [pc, #56]	; (8007774 <HAL_MspInit+0x5c>)
 800773c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007740:	61d3      	str	r3, [r2, #28]
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <HAL_MspInit+0x5c>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_MspInit+0x60>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	4a04      	ldr	r2, [pc, #16]	; (8007778 <HAL_MspInit+0x60>)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr
 8007774:	40021000 	.word	0x40021000
 8007778:	40010000 	.word	0x40010000

0800777c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007784:	f107 0310 	add.w	r3, r7, #16
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <HAL_CAN_MspInit+0x8c>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d131      	bne.n	8007800 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800779c:	4b1b      	ldr	r3, [pc, #108]	; (800780c <HAL_CAN_MspInit+0x90>)
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <HAL_CAN_MspInit+0x90>)
 80077a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077a6:	61d3      	str	r3, [r2, #28]
 80077a8:	4b18      	ldr	r3, [pc, #96]	; (800780c <HAL_CAN_MspInit+0x90>)
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b4:	4b15      	ldr	r3, [pc, #84]	; (800780c <HAL_CAN_MspInit+0x90>)
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4a14      	ldr	r2, [pc, #80]	; (800780c <HAL_CAN_MspInit+0x90>)
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	6193      	str	r3, [r2, #24]
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <HAL_CAN_MspInit+0x90>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	60bb      	str	r3, [r7, #8]
 80077ca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80077cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077da:	f107 0310 	add.w	r3, r7, #16
 80077de:	4619      	mov	r1, r3
 80077e0:	480b      	ldr	r0, [pc, #44]	; (8007810 <HAL_CAN_MspInit+0x94>)
 80077e2:	f000 fd61 	bl	80082a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80077e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ec:	2302      	movs	r3, #2
 80077ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077f0:	2303      	movs	r3, #3
 80077f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f4:	f107 0310 	add.w	r3, r7, #16
 80077f8:	4619      	mov	r1, r3
 80077fa:	4805      	ldr	r0, [pc, #20]	; (8007810 <HAL_CAN_MspInit+0x94>)
 80077fc:	f000 fd54 	bl	80082a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007800:	bf00      	nop
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40006400 	.word	0x40006400
 800780c:	40021000 	.word	0x40021000
 8007810:	40010800 	.word	0x40010800

08007814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800781c:	f107 0310 	add.w	r3, r7, #16
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a15      	ldr	r2, [pc, #84]	; (8007884 <HAL_I2C_MspInit+0x70>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d123      	bne.n	800787c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007834:	4b14      	ldr	r3, [pc, #80]	; (8007888 <HAL_I2C_MspInit+0x74>)
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	4a13      	ldr	r2, [pc, #76]	; (8007888 <HAL_I2C_MspInit+0x74>)
 800783a:	f043 0308 	orr.w	r3, r3, #8
 800783e:	6193      	str	r3, [r2, #24]
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <HAL_I2C_MspInit+0x74>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800784c:	23c0      	movs	r3, #192	; 0xc0
 800784e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007850:	2312      	movs	r3, #18
 8007852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007854:	2303      	movs	r3, #3
 8007856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007858:	f107 0310 	add.w	r3, r7, #16
 800785c:	4619      	mov	r1, r3
 800785e:	480b      	ldr	r0, [pc, #44]	; (800788c <HAL_I2C_MspInit+0x78>)
 8007860:	f000 fd22 	bl	80082a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007864:	4b08      	ldr	r3, [pc, #32]	; (8007888 <HAL_I2C_MspInit+0x74>)
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	4a07      	ldr	r2, [pc, #28]	; (8007888 <HAL_I2C_MspInit+0x74>)
 800786a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800786e:	61d3      	str	r3, [r2, #28]
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <HAL_I2C_MspInit+0x74>)
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800787c:	bf00      	nop
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40005400 	.word	0x40005400
 8007888:	40021000 	.word	0x40021000
 800788c:	40010c00 	.word	0x40010c00

08007890 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <HAL_I2C_MspDeInit+0x38>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d10d      	bne.n	80078be <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80078a2:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <HAL_I2C_MspDeInit+0x3c>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	4a09      	ldr	r2, [pc, #36]	; (80078cc <HAL_I2C_MspDeInit+0x3c>)
 80078a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ac:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80078ae:	2140      	movs	r1, #64	; 0x40
 80078b0:	4807      	ldr	r0, [pc, #28]	; (80078d0 <HAL_I2C_MspDeInit+0x40>)
 80078b2:	f000 fe8d 	bl	80085d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80078b6:	2180      	movs	r1, #128	; 0x80
 80078b8:	4805      	ldr	r0, [pc, #20]	; (80078d0 <HAL_I2C_MspDeInit+0x40>)
 80078ba:	f000 fe89 	bl	80085d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40005400 	.word	0x40005400
 80078cc:	40021000 	.word	0x40021000
 80078d0:	40010c00 	.word	0x40010c00

080078d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a0d      	ldr	r2, [pc, #52]	; (8007918 <HAL_TIM_Base_MspInit+0x44>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d113      	bne.n	800790e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <HAL_TIM_Base_MspInit+0x48>)
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	4a0c      	ldr	r2, [pc, #48]	; (800791c <HAL_TIM_Base_MspInit+0x48>)
 80078ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078f0:	6193      	str	r3, [r2, #24]
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <HAL_TIM_Base_MspInit+0x48>)
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	2019      	movs	r0, #25
 8007904:	f000 fb57 	bl	8007fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007908:	2019      	movs	r0, #25
 800790a:	f000 fb70 	bl	8007fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40021000 	.word	0x40021000

08007920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007928:	f107 0310 	add.w	r3, r7, #16
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	609a      	str	r2, [r3, #8]
 8007934:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a20      	ldr	r2, [pc, #128]	; (80079bc <HAL_UART_MspInit+0x9c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d139      	bne.n	80079b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007940:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <HAL_UART_MspInit+0xa0>)
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <HAL_UART_MspInit+0xa0>)
 8007946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800794a:	6193      	str	r3, [r2, #24]
 800794c:	4b1c      	ldr	r3, [pc, #112]	; (80079c0 <HAL_UART_MspInit+0xa0>)
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007958:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <HAL_UART_MspInit+0xa0>)
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <HAL_UART_MspInit+0xa0>)
 800795e:	f043 0304 	orr.w	r3, r3, #4
 8007962:	6193      	str	r3, [r2, #24]
 8007964:	4b16      	ldr	r3, [pc, #88]	; (80079c0 <HAL_UART_MspInit+0xa0>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007976:	2302      	movs	r3, #2
 8007978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800797a:	2303      	movs	r3, #3
 800797c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800797e:	f107 0310 	add.w	r3, r7, #16
 8007982:	4619      	mov	r1, r3
 8007984:	480f      	ldr	r0, [pc, #60]	; (80079c4 <HAL_UART_MspInit+0xa4>)
 8007986:	f000 fc8f 	bl	80082a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800798a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007994:	2300      	movs	r3, #0
 8007996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007998:	f107 0310 	add.w	r3, r7, #16
 800799c:	4619      	mov	r1, r3
 800799e:	4809      	ldr	r0, [pc, #36]	; (80079c4 <HAL_UART_MspInit+0xa4>)
 80079a0:	f000 fc82 	bl	80082a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	2025      	movs	r0, #37	; 0x25
 80079aa:	f000 fb04 	bl	8007fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80079ae:	2025      	movs	r0, #37	; 0x25
 80079b0:	f000 fb1d 	bl	8007fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80079b4:	bf00      	nop
 80079b6:	3720      	adds	r7, #32
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40013800 	.word	0x40013800
 80079c0:	40021000 	.word	0x40021000
 80079c4:	40010800 	.word	0x40010800

080079c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079cc:	e7fe      	b.n	80079cc <NMI_Handler+0x4>

080079ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079d2:	e7fe      	b.n	80079d2 <HardFault_Handler+0x4>

080079d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079d8:	e7fe      	b.n	80079d8 <MemManage_Handler+0x4>

080079da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079de:	e7fe      	b.n	80079de <BusFault_Handler+0x4>

080079e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079e4:	e7fe      	b.n	80079e4 <UsageFault_Handler+0x4>

080079e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079e6:	b480      	push	{r7}
 80079e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079ea:	bf00      	nop
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr

080079f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079f6:	bf00      	nop
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079fe:	b480      	push	{r7}
 8007a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a02:	bf00      	nop
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a0e:	f000 f8bf 	bl	8007b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a1c:	4802      	ldr	r0, [pc, #8]	; (8007a28 <TIM1_UP_IRQHandler+0x10>)
 8007a1e:	f002 fdcd 	bl	800a5bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000d34 	.word	0x20000d34

08007a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007a30:	4802      	ldr	r0, [pc, #8]	; (8007a3c <USART1_IRQHandler+0x10>)
 8007a32:	f003 f9cb 	bl	800adcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007a36:	bf00      	nop
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000d7c 	.word	0x20000d7c

08007a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a48:	4a14      	ldr	r2, [pc, #80]	; (8007a9c <_sbrk+0x5c>)
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <_sbrk+0x60>)
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a54:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <_sbrk+0x64>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a5c:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <_sbrk+0x64>)
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <_sbrk+0x68>)
 8007a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <_sbrk+0x64>)
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d207      	bcs.n	8007a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a70:	f003 ffd6 	bl	800ba20 <__errno>
 8007a74:	4603      	mov	r3, r0
 8007a76:	220c      	movs	r2, #12
 8007a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7e:	e009      	b.n	8007a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a80:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <_sbrk+0x64>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <_sbrk+0x64>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <_sbrk+0x64>)
 8007a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a92:	68fb      	ldr	r3, [r7, #12]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	2000c000 	.word	0x2000c000
 8007aa0:	00000400 	.word	0x00000400
 8007aa4:	20000dc4 	.word	0x20000dc4
 8007aa8:	20000f18 	.word	0x20000f18

08007aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr

08007ab8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ab8:	480c      	ldr	r0, [pc, #48]	; (8007aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007aba:	490d      	ldr	r1, [pc, #52]	; (8007af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007abc:	4a0d      	ldr	r2, [pc, #52]	; (8007af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ac0:	e002      	b.n	8007ac8 <LoopCopyDataInit>

08007ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ac6:	3304      	adds	r3, #4

08007ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007acc:	d3f9      	bcc.n	8007ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ace:	4a0a      	ldr	r2, [pc, #40]	; (8007af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007ad0:	4c0a      	ldr	r4, [pc, #40]	; (8007afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ad4:	e001      	b.n	8007ada <LoopFillZerobss>

08007ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ad8:	3204      	adds	r2, #4

08007ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007adc:	d3fb      	bcc.n	8007ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007ade:	f7ff ffe5 	bl	8007aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ae2:	f003 ffa3 	bl	800ba2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ae6:	f7ff fb85 	bl	80071f4 <main>
  bx lr
 8007aea:	4770      	bx	lr
  ldr r0, =_sdata
 8007aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007af0:	200009a0 	.word	0x200009a0
  ldr r2, =_sidata
 8007af4:	0800cfd4 	.word	0x0800cfd4
  ldr r2, =_sbss
 8007af8:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 8007afc:	20000f14 	.word	0x20000f14

08007b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007b00:	e7fe      	b.n	8007b00 <ADC1_2_IRQHandler>
	...

08007b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <HAL_Init+0x28>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a07      	ldr	r2, [pc, #28]	; (8007b2c <HAL_Init+0x28>)
 8007b0e:	f043 0310 	orr.w	r3, r3, #16
 8007b12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b14:	2003      	movs	r0, #3
 8007b16:	f000 fa43 	bl	8007fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b1a:	200f      	movs	r0, #15
 8007b1c:	f000 f808 	bl	8007b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b20:	f7ff fdfa 	bl	8007718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40022000 	.word	0x40022000

08007b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b38:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <HAL_InitTick+0x54>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <HAL_InitTick+0x58>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	4619      	mov	r1, r3
 8007b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fa5b 	bl	800800a <HAL_SYSTICK_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e00e      	b.n	8007b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b0f      	cmp	r3, #15
 8007b62:	d80a      	bhi.n	8007b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b64:	2200      	movs	r2, #0
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	f000 fa23 	bl	8007fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b70:	4a06      	ldr	r2, [pc, #24]	; (8007b8c <HAL_InitTick+0x5c>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000944 	.word	0x20000944
 8007b88:	2000094c 	.word	0x2000094c
 8007b8c:	20000948 	.word	0x20000948

08007b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_IncTick+0x1c>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <HAL_IncTick+0x20>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	4a03      	ldr	r2, [pc, #12]	; (8007bb0 <HAL_IncTick+0x20>)
 8007ba2:	6013      	str	r3, [r2, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr
 8007bac:	2000094c 	.word	0x2000094c
 8007bb0:	20000dc8 	.word	0x20000dc8

08007bb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <HAL_GetTick+0x10>)
 8007bba:	681b      	ldr	r3, [r3, #0]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr
 8007bc4:	20000dc8 	.word	0x20000dc8

08007bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bd0:	f7ff fff0 	bl	8007bb4 <HAL_GetTick>
 8007bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d005      	beq.n	8007bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007be2:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <HAL_Delay+0x44>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bee:	bf00      	nop
 8007bf0:	f7ff ffe0 	bl	8007bb4 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d8f7      	bhi.n	8007bf0 <HAL_Delay+0x28>
  {
  }
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000094c 	.word	0x2000094c

08007c10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e0ed      	b.n	8007dfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff fda4 	bl	800777c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c44:	f7ff ffb6 	bl	8007bb4 <HAL_GetTick>
 8007c48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007c4a:	e012      	b.n	8007c72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007c4c:	f7ff ffb2 	bl	8007bb4 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b0a      	cmp	r3, #10
 8007c58:	d90b      	bls.n	8007c72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2205      	movs	r2, #5
 8007c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e0c5      	b.n	8007dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0e5      	beq.n	8007c4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0202 	bic.w	r2, r2, #2
 8007c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c90:	f7ff ff90 	bl	8007bb4 <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007c96:	e012      	b.n	8007cbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007c98:	f7ff ff8c 	bl	8007bb4 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b0a      	cmp	r3, #10
 8007ca4:	d90b      	bls.n	8007cbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2205      	movs	r2, #5
 8007cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e09f      	b.n	8007dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e5      	bne.n	8007c98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7e1b      	ldrb	r3, [r3, #24]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d108      	bne.n	8007ce6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e007      	b.n	8007cf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7e5b      	ldrb	r3, [r3, #25]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d108      	bne.n	8007d10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e007      	b.n	8007d20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7e9b      	ldrb	r3, [r3, #26]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d108      	bne.n	8007d3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0220 	orr.w	r2, r2, #32
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	e007      	b.n	8007d4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0220 	bic.w	r2, r2, #32
 8007d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	7edb      	ldrb	r3, [r3, #27]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d108      	bne.n	8007d64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0210 	bic.w	r2, r2, #16
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e007      	b.n	8007d74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0210 	orr.w	r2, r2, #16
 8007d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7f1b      	ldrb	r3, [r3, #28]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d108      	bne.n	8007d8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0208 	orr.w	r2, r2, #8
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e007      	b.n	8007d9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0208 	bic.w	r2, r2, #8
 8007d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7f5b      	ldrb	r3, [r3, #29]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d108      	bne.n	8007db8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0204 	orr.w	r2, r2, #4
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e007      	b.n	8007dc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0204 	bic.w	r2, r2, #4
 8007dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	ea42 0103 	orr.w	r1, r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <__NVIC_SetPriorityGrouping>:
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <__NVIC_SetPriorityGrouping+0x44>)
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e24:	4013      	ands	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e3a:	4a04      	ldr	r2, [pc, #16]	; (8007e4c <__NVIC_SetPriorityGrouping+0x44>)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	60d3      	str	r3, [r2, #12]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	e000ed00 	.word	0xe000ed00

08007e50 <__NVIC_GetPriorityGrouping>:
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <__NVIC_GetPriorityGrouping+0x18>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	f003 0307 	and.w	r3, r3, #7
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	e000ed00 	.word	0xe000ed00

08007e6c <__NVIC_EnableIRQ>:
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	db0b      	blt.n	8007e96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	f003 021f 	and.w	r2, r3, #31
 8007e84:	4906      	ldr	r1, [pc, #24]	; (8007ea0 <__NVIC_EnableIRQ+0x34>)
 8007e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr
 8007ea0:	e000e100 	.word	0xe000e100

08007ea4 <__NVIC_SetPriority>:
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	db0a      	blt.n	8007ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	490c      	ldr	r1, [pc, #48]	; (8007ef0 <__NVIC_SetPriority+0x4c>)
 8007ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec2:	0112      	lsls	r2, r2, #4
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ecc:	e00a      	b.n	8007ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	4908      	ldr	r1, [pc, #32]	; (8007ef4 <__NVIC_SetPriority+0x50>)
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	3b04      	subs	r3, #4
 8007edc:	0112      	lsls	r2, r2, #4
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	761a      	strb	r2, [r3, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	e000e100 	.word	0xe000e100
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <NVIC_EncodePriority>:
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f1c3 0307 	rsb	r3, r3, #7
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	bf28      	it	cs
 8007f16:	2304      	movcs	r3, #4
 8007f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	2b06      	cmp	r3, #6
 8007f20:	d902      	bls.n	8007f28 <NVIC_EncodePriority+0x30>
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3b03      	subs	r3, #3
 8007f26:	e000      	b.n	8007f2a <NVIC_EncodePriority+0x32>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	43da      	mvns	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	401a      	ands	r2, r3
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f40:	f04f 31ff 	mov.w	r1, #4294967295
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4a:	43d9      	mvns	r1, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f50:	4313      	orrs	r3, r2
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3724      	adds	r7, #36	; 0x24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr

08007f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f6c:	d301      	bcc.n	8007f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e00f      	b.n	8007f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f72:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <SysTick_Config+0x40>)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f7a:	210f      	movs	r1, #15
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	f7ff ff90 	bl	8007ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f84:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <SysTick_Config+0x40>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f8a:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <SysTick_Config+0x40>)
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	e000e010 	.word	0xe000e010

08007fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ff2d 	bl	8007e08 <__NVIC_SetPriorityGrouping>
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
 8007fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fc8:	f7ff ff42 	bl	8007e50 <__NVIC_GetPriorityGrouping>
 8007fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	6978      	ldr	r0, [r7, #20]
 8007fd4:	f7ff ff90 	bl	8007ef8 <NVIC_EncodePriority>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff ff5f 	bl	8007ea4 <__NVIC_SetPriority>
}
 8007fe6:	bf00      	nop
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff ff35 	bl	8007e6c <__NVIC_EnableIRQ>
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff ffa2 	bl	8007f5c <SysTick_Config>
 8008018:	4603      	mov	r3, r0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d008      	beq.n	800804c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2204      	movs	r2, #4
 800803e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e020      	b.n	800808e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 020e 	bic.w	r2, r2, #14
 800805a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008074:	2101      	movs	r1, #1
 8008076:	fa01 f202 	lsl.w	r2, r1, r2
 800807a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d005      	beq.n	80080bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2204      	movs	r2, #4
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
 80080ba:	e0d6      	b.n	800826a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 020e 	bic.w	r2, r2, #14
 80080ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	4b64      	ldr	r3, [pc, #400]	; (8008274 <HAL_DMA_Abort_IT+0x1dc>)
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d958      	bls.n	800819a <HAL_DMA_Abort_IT+0x102>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a62      	ldr	r2, [pc, #392]	; (8008278 <HAL_DMA_Abort_IT+0x1e0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d04f      	beq.n	8008192 <HAL_DMA_Abort_IT+0xfa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a61      	ldr	r2, [pc, #388]	; (800827c <HAL_DMA_Abort_IT+0x1e4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d048      	beq.n	800818e <HAL_DMA_Abort_IT+0xf6>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a5f      	ldr	r2, [pc, #380]	; (8008280 <HAL_DMA_Abort_IT+0x1e8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d040      	beq.n	8008188 <HAL_DMA_Abort_IT+0xf0>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a5e      	ldr	r2, [pc, #376]	; (8008284 <HAL_DMA_Abort_IT+0x1ec>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d038      	beq.n	8008182 <HAL_DMA_Abort_IT+0xea>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a5c      	ldr	r2, [pc, #368]	; (8008288 <HAL_DMA_Abort_IT+0x1f0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d030      	beq.n	800817c <HAL_DMA_Abort_IT+0xe4>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a5b      	ldr	r2, [pc, #364]	; (800828c <HAL_DMA_Abort_IT+0x1f4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d028      	beq.n	8008176 <HAL_DMA_Abort_IT+0xde>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a52      	ldr	r2, [pc, #328]	; (8008274 <HAL_DMA_Abort_IT+0x1dc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d020      	beq.n	8008170 <HAL_DMA_Abort_IT+0xd8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a57      	ldr	r2, [pc, #348]	; (8008290 <HAL_DMA_Abort_IT+0x1f8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d019      	beq.n	800816c <HAL_DMA_Abort_IT+0xd4>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a55      	ldr	r2, [pc, #340]	; (8008294 <HAL_DMA_Abort_IT+0x1fc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d012      	beq.n	8008168 <HAL_DMA_Abort_IT+0xd0>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a54      	ldr	r2, [pc, #336]	; (8008298 <HAL_DMA_Abort_IT+0x200>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00a      	beq.n	8008162 <HAL_DMA_Abort_IT+0xca>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a52      	ldr	r2, [pc, #328]	; (800829c <HAL_DMA_Abort_IT+0x204>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d102      	bne.n	800815c <HAL_DMA_Abort_IT+0xc4>
 8008156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800815a:	e01b      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 800815c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008160:	e018      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008166:	e015      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008168:	2310      	movs	r3, #16
 800816a:	e013      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 800816c:	2301      	movs	r3, #1
 800816e:	e011      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008174:	e00e      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800817a:	e00b      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 800817c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008180:	e008      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008186:	e005      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800818c:	e002      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 800818e:	2310      	movs	r3, #16
 8008190:	e000      	b.n	8008194 <HAL_DMA_Abort_IT+0xfc>
 8008192:	2301      	movs	r3, #1
 8008194:	4a42      	ldr	r2, [pc, #264]	; (80082a0 <HAL_DMA_Abort_IT+0x208>)
 8008196:	6053      	str	r3, [r2, #4]
 8008198:	e057      	b.n	800824a <HAL_DMA_Abort_IT+0x1b2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a36      	ldr	r2, [pc, #216]	; (8008278 <HAL_DMA_Abort_IT+0x1e0>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d04f      	beq.n	8008244 <HAL_DMA_Abort_IT+0x1ac>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a34      	ldr	r2, [pc, #208]	; (800827c <HAL_DMA_Abort_IT+0x1e4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d048      	beq.n	8008240 <HAL_DMA_Abort_IT+0x1a8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a33      	ldr	r2, [pc, #204]	; (8008280 <HAL_DMA_Abort_IT+0x1e8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d040      	beq.n	800823a <HAL_DMA_Abort_IT+0x1a2>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a31      	ldr	r2, [pc, #196]	; (8008284 <HAL_DMA_Abort_IT+0x1ec>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d038      	beq.n	8008234 <HAL_DMA_Abort_IT+0x19c>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a30      	ldr	r2, [pc, #192]	; (8008288 <HAL_DMA_Abort_IT+0x1f0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d030      	beq.n	800822e <HAL_DMA_Abort_IT+0x196>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a2e      	ldr	r2, [pc, #184]	; (800828c <HAL_DMA_Abort_IT+0x1f4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d028      	beq.n	8008228 <HAL_DMA_Abort_IT+0x190>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a26      	ldr	r2, [pc, #152]	; (8008274 <HAL_DMA_Abort_IT+0x1dc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d020      	beq.n	8008222 <HAL_DMA_Abort_IT+0x18a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a2a      	ldr	r2, [pc, #168]	; (8008290 <HAL_DMA_Abort_IT+0x1f8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d019      	beq.n	800821e <HAL_DMA_Abort_IT+0x186>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a29      	ldr	r2, [pc, #164]	; (8008294 <HAL_DMA_Abort_IT+0x1fc>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d012      	beq.n	800821a <HAL_DMA_Abort_IT+0x182>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a27      	ldr	r2, [pc, #156]	; (8008298 <HAL_DMA_Abort_IT+0x200>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00a      	beq.n	8008214 <HAL_DMA_Abort_IT+0x17c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a26      	ldr	r2, [pc, #152]	; (800829c <HAL_DMA_Abort_IT+0x204>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d102      	bne.n	800820e <HAL_DMA_Abort_IT+0x176>
 8008208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800820c:	e01b      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 800820e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008212:	e018      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 8008214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008218:	e015      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 800821a:	2310      	movs	r3, #16
 800821c:	e013      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 800821e:	2301      	movs	r3, #1
 8008220:	e011      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 8008222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008226:	e00e      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 8008228:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800822c:	e00b      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 800822e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008232:	e008      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 8008234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008238:	e005      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 800823a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823e:	e002      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 8008240:	2310      	movs	r3, #16
 8008242:	e000      	b.n	8008246 <HAL_DMA_Abort_IT+0x1ae>
 8008244:	2301      	movs	r3, #1
 8008246:	4a17      	ldr	r2, [pc, #92]	; (80082a4 <HAL_DMA_Abort_IT+0x20c>)
 8008248:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
    } 
  }
  return status;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40020080 	.word	0x40020080
 8008278:	40020008 	.word	0x40020008
 800827c:	4002001c 	.word	0x4002001c
 8008280:	40020030 	.word	0x40020030
 8008284:	40020044 	.word	0x40020044
 8008288:	40020058 	.word	0x40020058
 800828c:	4002006c 	.word	0x4002006c
 8008290:	40020408 	.word	0x40020408
 8008294:	4002041c 	.word	0x4002041c
 8008298:	40020430 	.word	0x40020430
 800829c:	40020444 	.word	0x40020444
 80082a0:	40020400 	.word	0x40020400
 80082a4:	40020000 	.word	0x40020000

080082a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b08b      	sub	sp, #44	; 0x2c
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80082b6:	2300      	movs	r3, #0
 80082b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082ba:	e179      	b.n	80085b0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80082bc:	2201      	movs	r2, #1
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	fa02 f303 	lsl.w	r3, r2, r3
 80082c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	4013      	ands	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	f040 8168 	bne.w	80085aa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	4a96      	ldr	r2, [pc, #600]	; (8008538 <HAL_GPIO_Init+0x290>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d05e      	beq.n	80083a2 <HAL_GPIO_Init+0xfa>
 80082e4:	4a94      	ldr	r2, [pc, #592]	; (8008538 <HAL_GPIO_Init+0x290>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d875      	bhi.n	80083d6 <HAL_GPIO_Init+0x12e>
 80082ea:	4a94      	ldr	r2, [pc, #592]	; (800853c <HAL_GPIO_Init+0x294>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d058      	beq.n	80083a2 <HAL_GPIO_Init+0xfa>
 80082f0:	4a92      	ldr	r2, [pc, #584]	; (800853c <HAL_GPIO_Init+0x294>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d86f      	bhi.n	80083d6 <HAL_GPIO_Init+0x12e>
 80082f6:	4a92      	ldr	r2, [pc, #584]	; (8008540 <HAL_GPIO_Init+0x298>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d052      	beq.n	80083a2 <HAL_GPIO_Init+0xfa>
 80082fc:	4a90      	ldr	r2, [pc, #576]	; (8008540 <HAL_GPIO_Init+0x298>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d869      	bhi.n	80083d6 <HAL_GPIO_Init+0x12e>
 8008302:	4a90      	ldr	r2, [pc, #576]	; (8008544 <HAL_GPIO_Init+0x29c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d04c      	beq.n	80083a2 <HAL_GPIO_Init+0xfa>
 8008308:	4a8e      	ldr	r2, [pc, #568]	; (8008544 <HAL_GPIO_Init+0x29c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d863      	bhi.n	80083d6 <HAL_GPIO_Init+0x12e>
 800830e:	4a8e      	ldr	r2, [pc, #568]	; (8008548 <HAL_GPIO_Init+0x2a0>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d046      	beq.n	80083a2 <HAL_GPIO_Init+0xfa>
 8008314:	4a8c      	ldr	r2, [pc, #560]	; (8008548 <HAL_GPIO_Init+0x2a0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d85d      	bhi.n	80083d6 <HAL_GPIO_Init+0x12e>
 800831a:	2b12      	cmp	r3, #18
 800831c:	d82a      	bhi.n	8008374 <HAL_GPIO_Init+0xcc>
 800831e:	2b12      	cmp	r3, #18
 8008320:	d859      	bhi.n	80083d6 <HAL_GPIO_Init+0x12e>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <HAL_GPIO_Init+0x80>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	080083a3 	.word	0x080083a3
 800832c:	0800837d 	.word	0x0800837d
 8008330:	0800838f 	.word	0x0800838f
 8008334:	080083d1 	.word	0x080083d1
 8008338:	080083d7 	.word	0x080083d7
 800833c:	080083d7 	.word	0x080083d7
 8008340:	080083d7 	.word	0x080083d7
 8008344:	080083d7 	.word	0x080083d7
 8008348:	080083d7 	.word	0x080083d7
 800834c:	080083d7 	.word	0x080083d7
 8008350:	080083d7 	.word	0x080083d7
 8008354:	080083d7 	.word	0x080083d7
 8008358:	080083d7 	.word	0x080083d7
 800835c:	080083d7 	.word	0x080083d7
 8008360:	080083d7 	.word	0x080083d7
 8008364:	080083d7 	.word	0x080083d7
 8008368:	080083d7 	.word	0x080083d7
 800836c:	08008385 	.word	0x08008385
 8008370:	08008399 	.word	0x08008399
 8008374:	4a75      	ldr	r2, [pc, #468]	; (800854c <HAL_GPIO_Init+0x2a4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800837a:	e02c      	b.n	80083d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	623b      	str	r3, [r7, #32]
          break;
 8008382:	e029      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	3304      	adds	r3, #4
 800838a:	623b      	str	r3, [r7, #32]
          break;
 800838c:	e024      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	3308      	adds	r3, #8
 8008394:	623b      	str	r3, [r7, #32]
          break;
 8008396:	e01f      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	330c      	adds	r3, #12
 800839e:	623b      	str	r3, [r7, #32]
          break;
 80083a0:	e01a      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80083aa:	2304      	movs	r3, #4
 80083ac:	623b      	str	r3, [r7, #32]
          break;
 80083ae:	e013      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d105      	bne.n	80083c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083b8:	2308      	movs	r3, #8
 80083ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	611a      	str	r2, [r3, #16]
          break;
 80083c2:	e009      	b.n	80083d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083c4:	2308      	movs	r3, #8
 80083c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	615a      	str	r2, [r3, #20]
          break;
 80083ce:	e003      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80083d0:	2300      	movs	r3, #0
 80083d2:	623b      	str	r3, [r7, #32]
          break;
 80083d4:	e000      	b.n	80083d8 <HAL_GPIO_Init+0x130>
          break;
 80083d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	2bff      	cmp	r3, #255	; 0xff
 80083dc:	d801      	bhi.n	80083e2 <HAL_GPIO_Init+0x13a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	e001      	b.n	80083e6 <HAL_GPIO_Init+0x13e>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3304      	adds	r3, #4
 80083e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2bff      	cmp	r3, #255	; 0xff
 80083ec:	d802      	bhi.n	80083f4 <HAL_GPIO_Init+0x14c>
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	e002      	b.n	80083fa <HAL_GPIO_Init+0x152>
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	3b08      	subs	r3, #8
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	210f      	movs	r1, #15
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	fa01 f303 	lsl.w	r3, r1, r3
 8008408:	43db      	mvns	r3, r3
 800840a:	401a      	ands	r2, r3
 800840c:	6a39      	ldr	r1, [r7, #32]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	fa01 f303 	lsl.w	r3, r1, r3
 8008414:	431a      	orrs	r2, r3
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80c1 	beq.w	80085aa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008428:	4b49      	ldr	r3, [pc, #292]	; (8008550 <HAL_GPIO_Init+0x2a8>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	4a48      	ldr	r2, [pc, #288]	; (8008550 <HAL_GPIO_Init+0x2a8>)
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	6193      	str	r3, [r2, #24]
 8008434:	4b46      	ldr	r3, [pc, #280]	; (8008550 <HAL_GPIO_Init+0x2a8>)
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	60bb      	str	r3, [r7, #8]
 800843e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008440:	4a44      	ldr	r2, [pc, #272]	; (8008554 <HAL_GPIO_Init+0x2ac>)
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	089b      	lsrs	r3, r3, #2
 8008446:	3302      	adds	r3, #2
 8008448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	f003 0303 	and.w	r3, r3, #3
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	220f      	movs	r2, #15
 8008458:	fa02 f303 	lsl.w	r3, r2, r3
 800845c:	43db      	mvns	r3, r3
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a3c      	ldr	r2, [pc, #240]	; (8008558 <HAL_GPIO_Init+0x2b0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d01f      	beq.n	80084ac <HAL_GPIO_Init+0x204>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3b      	ldr	r2, [pc, #236]	; (800855c <HAL_GPIO_Init+0x2b4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d019      	beq.n	80084a8 <HAL_GPIO_Init+0x200>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a3a      	ldr	r2, [pc, #232]	; (8008560 <HAL_GPIO_Init+0x2b8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d013      	beq.n	80084a4 <HAL_GPIO_Init+0x1fc>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a39      	ldr	r2, [pc, #228]	; (8008564 <HAL_GPIO_Init+0x2bc>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00d      	beq.n	80084a0 <HAL_GPIO_Init+0x1f8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a38      	ldr	r2, [pc, #224]	; (8008568 <HAL_GPIO_Init+0x2c0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d007      	beq.n	800849c <HAL_GPIO_Init+0x1f4>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a37      	ldr	r2, [pc, #220]	; (800856c <HAL_GPIO_Init+0x2c4>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d101      	bne.n	8008498 <HAL_GPIO_Init+0x1f0>
 8008494:	2305      	movs	r3, #5
 8008496:	e00a      	b.n	80084ae <HAL_GPIO_Init+0x206>
 8008498:	2306      	movs	r3, #6
 800849a:	e008      	b.n	80084ae <HAL_GPIO_Init+0x206>
 800849c:	2304      	movs	r3, #4
 800849e:	e006      	b.n	80084ae <HAL_GPIO_Init+0x206>
 80084a0:	2303      	movs	r3, #3
 80084a2:	e004      	b.n	80084ae <HAL_GPIO_Init+0x206>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e002      	b.n	80084ae <HAL_GPIO_Init+0x206>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <HAL_GPIO_Init+0x206>
 80084ac:	2300      	movs	r3, #0
 80084ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b0:	f002 0203 	and.w	r2, r2, #3
 80084b4:	0092      	lsls	r2, r2, #2
 80084b6:	4093      	lsls	r3, r2
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80084be:	4925      	ldr	r1, [pc, #148]	; (8008554 <HAL_GPIO_Init+0x2ac>)
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	089b      	lsrs	r3, r3, #2
 80084c4:	3302      	adds	r3, #2
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80084d8:	4b25      	ldr	r3, [pc, #148]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	4924      	ldr	r1, [pc, #144]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	608b      	str	r3, [r1, #8]
 80084e4:	e006      	b.n	80084f4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80084e6:	4b22      	ldr	r3, [pc, #136]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	43db      	mvns	r3, r3
 80084ee:	4920      	ldr	r1, [pc, #128]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d006      	beq.n	800850e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008500:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	491a      	ldr	r1, [pc, #104]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	4313      	orrs	r3, r2
 800850a:	60cb      	str	r3, [r1, #12]
 800850c:	e006      	b.n	800851c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800850e:	4b18      	ldr	r3, [pc, #96]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	43db      	mvns	r3, r3
 8008516:	4916      	ldr	r1, [pc, #88]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 8008518:	4013      	ands	r3, r2
 800851a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d025      	beq.n	8008574 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008528:	4b11      	ldr	r3, [pc, #68]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	4910      	ldr	r1, [pc, #64]	; (8008570 <HAL_GPIO_Init+0x2c8>)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	4313      	orrs	r3, r2
 8008532:	604b      	str	r3, [r1, #4]
 8008534:	e025      	b.n	8008582 <HAL_GPIO_Init+0x2da>
 8008536:	bf00      	nop
 8008538:	10320000 	.word	0x10320000
 800853c:	10310000 	.word	0x10310000
 8008540:	10220000 	.word	0x10220000
 8008544:	10210000 	.word	0x10210000
 8008548:	10120000 	.word	0x10120000
 800854c:	10110000 	.word	0x10110000
 8008550:	40021000 	.word	0x40021000
 8008554:	40010000 	.word	0x40010000
 8008558:	40010800 	.word	0x40010800
 800855c:	40010c00 	.word	0x40010c00
 8008560:	40011000 	.word	0x40011000
 8008564:	40011400 	.word	0x40011400
 8008568:	40011800 	.word	0x40011800
 800856c:	40011c00 	.word	0x40011c00
 8008570:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008574:	4b15      	ldr	r3, [pc, #84]	; (80085cc <HAL_GPIO_Init+0x324>)
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	43db      	mvns	r3, r3
 800857c:	4913      	ldr	r1, [pc, #76]	; (80085cc <HAL_GPIO_Init+0x324>)
 800857e:	4013      	ands	r3, r2
 8008580:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d006      	beq.n	800859c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <HAL_GPIO_Init+0x324>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	490e      	ldr	r1, [pc, #56]	; (80085cc <HAL_GPIO_Init+0x324>)
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	4313      	orrs	r3, r2
 8008598:	600b      	str	r3, [r1, #0]
 800859a:	e006      	b.n	80085aa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800859c:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <HAL_GPIO_Init+0x324>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	43db      	mvns	r3, r3
 80085a4:	4909      	ldr	r1, [pc, #36]	; (80085cc <HAL_GPIO_Init+0x324>)
 80085a6:	4013      	ands	r3, r2
 80085a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	3301      	adds	r3, #1
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f47f ae7e 	bne.w	80082bc <HAL_GPIO_Init+0x14>
  }
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	372c      	adds	r7, #44	; 0x2c
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	40010400 	.word	0x40010400

080085d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80085de:	e0a6      	b.n	800872e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80085e0:	2201      	movs	r2, #1
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	fa02 f303 	lsl.w	r3, r2, r3
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	4013      	ands	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8099 	beq.w	8008728 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80085f6:	4a54      	ldr	r2, [pc, #336]	; (8008748 <HAL_GPIO_DeInit+0x178>)
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	089b      	lsrs	r3, r3, #2
 80085fc:	3302      	adds	r3, #2
 80085fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008602:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	220f      	movs	r2, #15
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4013      	ands	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a4c      	ldr	r2, [pc, #304]	; (800874c <HAL_GPIO_DeInit+0x17c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d01f      	beq.n	8008660 <HAL_GPIO_DeInit+0x90>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a4b      	ldr	r2, [pc, #300]	; (8008750 <HAL_GPIO_DeInit+0x180>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d019      	beq.n	800865c <HAL_GPIO_DeInit+0x8c>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a4a      	ldr	r2, [pc, #296]	; (8008754 <HAL_GPIO_DeInit+0x184>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <HAL_GPIO_DeInit+0x88>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a49      	ldr	r2, [pc, #292]	; (8008758 <HAL_GPIO_DeInit+0x188>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00d      	beq.n	8008654 <HAL_GPIO_DeInit+0x84>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a48      	ldr	r2, [pc, #288]	; (800875c <HAL_GPIO_DeInit+0x18c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d007      	beq.n	8008650 <HAL_GPIO_DeInit+0x80>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a47      	ldr	r2, [pc, #284]	; (8008760 <HAL_GPIO_DeInit+0x190>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d101      	bne.n	800864c <HAL_GPIO_DeInit+0x7c>
 8008648:	2305      	movs	r3, #5
 800864a:	e00a      	b.n	8008662 <HAL_GPIO_DeInit+0x92>
 800864c:	2306      	movs	r3, #6
 800864e:	e008      	b.n	8008662 <HAL_GPIO_DeInit+0x92>
 8008650:	2304      	movs	r3, #4
 8008652:	e006      	b.n	8008662 <HAL_GPIO_DeInit+0x92>
 8008654:	2303      	movs	r3, #3
 8008656:	e004      	b.n	8008662 <HAL_GPIO_DeInit+0x92>
 8008658:	2302      	movs	r3, #2
 800865a:	e002      	b.n	8008662 <HAL_GPIO_DeInit+0x92>
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <HAL_GPIO_DeInit+0x92>
 8008660:	2300      	movs	r3, #0
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	f002 0203 	and.w	r2, r2, #3
 8008668:	0092      	lsls	r2, r2, #2
 800866a:	4093      	lsls	r3, r2
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	429a      	cmp	r2, r3
 8008670:	d132      	bne.n	80086d8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008672:	4b3c      	ldr	r3, [pc, #240]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	43db      	mvns	r3, r3
 800867a:	493a      	ldr	r1, [pc, #232]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 800867c:	4013      	ands	r3, r2
 800867e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008680:	4b38      	ldr	r3, [pc, #224]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	43db      	mvns	r3, r3
 8008688:	4936      	ldr	r1, [pc, #216]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 800868a:	4013      	ands	r3, r2
 800868c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800868e:	4b35      	ldr	r3, [pc, #212]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	43db      	mvns	r3, r3
 8008696:	4933      	ldr	r1, [pc, #204]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 8008698:	4013      	ands	r3, r2
 800869a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800869c:	4b31      	ldr	r3, [pc, #196]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	43db      	mvns	r3, r3
 80086a4:	492f      	ldr	r1, [pc, #188]	; (8008764 <HAL_GPIO_DeInit+0x194>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	220f      	movs	r2, #15
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80086ba:	4a23      	ldr	r2, [pc, #140]	; (8008748 <HAL_GPIO_DeInit+0x178>)
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	089b      	lsrs	r3, r3, #2
 80086c0:	3302      	adds	r3, #2
 80086c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	43da      	mvns	r2, r3
 80086ca:	481f      	ldr	r0, [pc, #124]	; (8008748 <HAL_GPIO_DeInit+0x178>)
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	400a      	ands	r2, r1
 80086d2:	3302      	adds	r3, #2
 80086d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2bff      	cmp	r3, #255	; 0xff
 80086dc:	d801      	bhi.n	80086e2 <HAL_GPIO_DeInit+0x112>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	e001      	b.n	80086e6 <HAL_GPIO_DeInit+0x116>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3304      	adds	r3, #4
 80086e6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2bff      	cmp	r3, #255	; 0xff
 80086ec:	d802      	bhi.n	80086f4 <HAL_GPIO_DeInit+0x124>
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	e002      	b.n	80086fa <HAL_GPIO_DeInit+0x12a>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	3b08      	subs	r3, #8
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	210f      	movs	r1, #15
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	fa01 f303 	lsl.w	r3, r1, r3
 8008708:	43db      	mvns	r3, r3
 800870a:	401a      	ands	r2, r3
 800870c:	2104      	movs	r1, #4
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	fa01 f303 	lsl.w	r3, r1, r3
 8008714:	431a      	orrs	r2, r3
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	43db      	mvns	r3, r3
 8008722:	401a      	ands	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	3301      	adds	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	fa22 f303 	lsr.w	r3, r2, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	f47f af52 	bne.w	80085e0 <HAL_GPIO_DeInit+0x10>
  }
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	3724      	adds	r7, #36	; 0x24
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	40010000 	.word	0x40010000
 800874c:	40010800 	.word	0x40010800
 8008750:	40010c00 	.word	0x40010c00
 8008754:	40011000 	.word	0x40011000
 8008758:	40011400 	.word	0x40011400
 800875c:	40011800 	.word	0x40011800
 8008760:	40011c00 	.word	0x40011c00
 8008764:	40010400 	.word	0x40010400

08008768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	887b      	ldrh	r3, [r7, #2]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
 8008784:	e001      	b.n	800878a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr

08008796 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	807b      	strh	r3, [r7, #2]
 80087a2:	4613      	mov	r3, r2
 80087a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087a6:	787b      	ldrb	r3, [r7, #1]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087ac:	887a      	ldrh	r2, [r7, #2]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80087b2:	e003      	b.n	80087bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80087b4:	887b      	ldrh	r3, [r7, #2]
 80087b6:	041a      	lsls	r2, r3, #16
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	611a      	str	r2, [r3, #16]
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr

080087c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80087d8:	887a      	ldrh	r2, [r7, #2]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4013      	ands	r3, r2
 80087de:	041a      	lsls	r2, r3, #16
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	43d9      	mvns	r1, r3
 80087e4:	887b      	ldrh	r3, [r7, #2]
 80087e6:	400b      	ands	r3, r1
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	611a      	str	r2, [r3, #16]
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr

080087f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e12b      	b.n	8008a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fe fff8 	bl	8007814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2224      	movs	r2, #36	; 0x24
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0201 	bic.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800884a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800885a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800885c:	f001 fdb8 	bl	800a3d0 <HAL_RCC_GetPCLK1Freq>
 8008860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4a81      	ldr	r2, [pc, #516]	; (8008a6c <HAL_I2C_Init+0x274>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d807      	bhi.n	800887c <HAL_I2C_Init+0x84>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a80      	ldr	r2, [pc, #512]	; (8008a70 <HAL_I2C_Init+0x278>)
 8008870:	4293      	cmp	r3, r2
 8008872:	bf94      	ite	ls
 8008874:	2301      	movls	r3, #1
 8008876:	2300      	movhi	r3, #0
 8008878:	b2db      	uxtb	r3, r3
 800887a:	e006      	b.n	800888a <HAL_I2C_Init+0x92>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a7d      	ldr	r2, [pc, #500]	; (8008a74 <HAL_I2C_Init+0x27c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	bf94      	ite	ls
 8008884:	2301      	movls	r3, #1
 8008886:	2300      	movhi	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e0e7      	b.n	8008a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a78      	ldr	r2, [pc, #480]	; (8008a78 <HAL_I2C_Init+0x280>)
 8008896:	fba2 2303 	umull	r2, r3, r2, r3
 800889a:	0c9b      	lsrs	r3, r3, #18
 800889c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4a6a      	ldr	r2, [pc, #424]	; (8008a6c <HAL_I2C_Init+0x274>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d802      	bhi.n	80088cc <HAL_I2C_Init+0xd4>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	3301      	adds	r3, #1
 80088ca:	e009      	b.n	80088e0 <HAL_I2C_Init+0xe8>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088d2:	fb02 f303 	mul.w	r3, r2, r3
 80088d6:	4a69      	ldr	r2, [pc, #420]	; (8008a7c <HAL_I2C_Init+0x284>)
 80088d8:	fba2 2303 	umull	r2, r3, r2, r3
 80088dc:	099b      	lsrs	r3, r3, #6
 80088de:	3301      	adds	r3, #1
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6812      	ldr	r2, [r2, #0]
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80088f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	495c      	ldr	r1, [pc, #368]	; (8008a6c <HAL_I2C_Init+0x274>)
 80088fc:	428b      	cmp	r3, r1
 80088fe:	d819      	bhi.n	8008934 <HAL_I2C_Init+0x13c>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	1e59      	subs	r1, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	fbb1 f3f3 	udiv	r3, r1, r3
 800890e:	1c59      	adds	r1, r3, #1
 8008910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008914:	400b      	ands	r3, r1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <HAL_I2C_Init+0x138>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1e59      	subs	r1, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	fbb1 f3f3 	udiv	r3, r1, r3
 8008928:	3301      	adds	r3, #1
 800892a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800892e:	e051      	b.n	80089d4 <HAL_I2C_Init+0x1dc>
 8008930:	2304      	movs	r3, #4
 8008932:	e04f      	b.n	80089d4 <HAL_I2C_Init+0x1dc>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d111      	bne.n	8008960 <HAL_I2C_Init+0x168>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	1e58      	subs	r0, r3, #1
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6859      	ldr	r1, [r3, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	440b      	add	r3, r1
 800894a:	fbb0 f3f3 	udiv	r3, r0, r3
 800894e:	3301      	adds	r3, #1
 8008950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008954:	2b00      	cmp	r3, #0
 8008956:	bf0c      	ite	eq
 8008958:	2301      	moveq	r3, #1
 800895a:	2300      	movne	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	e012      	b.n	8008986 <HAL_I2C_Init+0x18e>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1e58      	subs	r0, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6859      	ldr	r1, [r3, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	0099      	lsls	r1, r3, #2
 8008970:	440b      	add	r3, r1
 8008972:	fbb0 f3f3 	udiv	r3, r0, r3
 8008976:	3301      	adds	r3, #1
 8008978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800897c:	2b00      	cmp	r3, #0
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <HAL_I2C_Init+0x196>
 800898a:	2301      	movs	r3, #1
 800898c:	e022      	b.n	80089d4 <HAL_I2C_Init+0x1dc>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10e      	bne.n	80089b4 <HAL_I2C_Init+0x1bc>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1e58      	subs	r0, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6859      	ldr	r1, [r3, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	440b      	add	r3, r1
 80089a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80089a8:	3301      	adds	r3, #1
 80089aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b2:	e00f      	b.n	80089d4 <HAL_I2C_Init+0x1dc>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1e58      	subs	r0, r3, #1
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6859      	ldr	r1, [r3, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	0099      	lsls	r1, r3, #2
 80089c4:	440b      	add	r3, r1
 80089c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ca:	3301      	adds	r3, #1
 80089cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	6809      	ldr	r1, [r1, #0]
 80089d8:	4313      	orrs	r3, r2
 80089da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69da      	ldr	r2, [r3, #28]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6911      	ldr	r1, [r2, #16]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	68d2      	ldr	r2, [r2, #12]
 8008a0e:	4311      	orrs	r1, r2
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	430b      	orrs	r3, r1
 8008a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695a      	ldr	r2, [r3, #20]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0201 	orr.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	000186a0 	.word	0x000186a0
 8008a70:	001e847f 	.word	0x001e847f
 8008a74:	003d08ff 	.word	0x003d08ff
 8008a78:	431bde83 	.word	0x431bde83
 8008a7c:	10624dd3 	.word	0x10624dd3

08008a80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e021      	b.n	8008ad6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2224      	movs	r2, #36	; 0x24
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fe fef0 	bl	8007890 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	461a      	mov	r2, r3
 8008aec:	460b      	mov	r3, r1
 8008aee:	817b      	strh	r3, [r7, #10]
 8008af0:	4613      	mov	r3, r2
 8008af2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008af4:	f7ff f85e 	bl	8007bb4 <HAL_GetTick>
 8008af8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b20      	cmp	r3, #32
 8008b04:	f040 80e0 	bne.w	8008cc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2319      	movs	r3, #25
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4970      	ldr	r1, [pc, #448]	; (8008cd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fe5c 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	e0d3      	b.n	8008cca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_I2C_Master_Transmit+0x50>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e0cc      	b.n	8008cca <HAL_I2C_Master_Transmit+0x1ea>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d007      	beq.n	8008b56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0201 	orr.w	r2, r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2221      	movs	r2, #33	; 0x21
 8008b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2210      	movs	r2, #16
 8008b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	893a      	ldrh	r2, [r7, #8]
 8008b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4a50      	ldr	r2, [pc, #320]	; (8008cd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b98:	8979      	ldrh	r1, [r7, #10]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fc16 	bl	80093d0 <I2C_MasterRequestWrite>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e08d      	b.n	8008cca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bae:	2300      	movs	r3, #0
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008bc4:	e066      	b.n	8008c94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	6a39      	ldr	r1, [r7, #32]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 ff1a 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00d      	beq.n	8008bf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d107      	bne.n	8008bee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e06b      	b.n	8008cca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	781a      	ldrb	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d11b      	bne.n	8008c68 <HAL_I2C_Master_Transmit+0x188>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d017      	beq.n	8008c68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	6a39      	ldr	r1, [r7, #32]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 ff11 	bl	8009a94 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00d      	beq.n	8008c94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d107      	bne.n	8008c90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e01a      	b.n	8008cca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d194      	bne.n	8008bc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e000      	b.n	8008cca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	00100002 	.word	0x00100002
 8008cd8:	ffff0000 	.word	0xffff0000

08008cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	817b      	strh	r3, [r7, #10]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	813b      	strh	r3, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cf6:	f7fe ff5d 	bl	8007bb4 <HAL_GetTick>
 8008cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	f040 80d9 	bne.w	8008ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2319      	movs	r3, #25
 8008d10:	2201      	movs	r2, #1
 8008d12:	496d      	ldr	r1, [pc, #436]	; (8008ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fd5b 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008d20:	2302      	movs	r3, #2
 8008d22:	e0cc      	b.n	8008ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d101      	bne.n	8008d32 <HAL_I2C_Mem_Write+0x56>
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e0c5      	b.n	8008ebe <HAL_I2C_Mem_Write+0x1e2>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d007      	beq.n	8008d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0201 	orr.w	r2, r2, #1
 8008d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2221      	movs	r2, #33	; 0x21
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2240      	movs	r2, #64	; 0x40
 8008d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a3a      	ldr	r2, [r7, #32]
 8008d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4a4d      	ldr	r2, [pc, #308]	; (8008ecc <HAL_I2C_Mem_Write+0x1f0>)
 8008d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d9a:	88f8      	ldrh	r0, [r7, #6]
 8008d9c:	893a      	ldrh	r2, [r7, #8]
 8008d9e:	8979      	ldrh	r1, [r7, #10]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4603      	mov	r3, r0
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fb92 	bl	80094d4 <I2C_RequestMemoryWrite>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d052      	beq.n	8008e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e081      	b.n	8008ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fe20 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00d      	beq.n	8008de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d107      	bne.n	8008de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e06b      	b.n	8008ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d11b      	bne.n	8008e5c <HAL_I2C_Mem_Write+0x180>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d017      	beq.n	8008e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1aa      	bne.n	8008dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fe13 	bl	8009a94 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d107      	bne.n	8008e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e016      	b.n	8008ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e000      	b.n	8008ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
  }
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	00100002 	.word	0x00100002
 8008ecc:	ffff0000 	.word	0xffff0000

08008ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08c      	sub	sp, #48	; 0x30
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4611      	mov	r1, r2
 8008edc:	461a      	mov	r2, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	817b      	strh	r3, [r7, #10]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	813b      	strh	r3, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008eee:	f7fe fe61 	bl	8007bb4 <HAL_GetTick>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	f040 8244 	bne.w	800938a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	2319      	movs	r3, #25
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4982      	ldr	r1, [pc, #520]	; (8009114 <HAL_I2C_Mem_Read+0x244>)
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fc5f 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e237      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d101      	bne.n	8008f2a <HAL_I2C_Mem_Read+0x5a>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e230      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d007      	beq.n	8008f50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2222      	movs	r2, #34	; 0x22
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2240      	movs	r2, #64	; 0x40
 8008f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a62      	ldr	r2, [pc, #392]	; (8009118 <HAL_I2C_Mem_Read+0x248>)
 8008f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f92:	88f8      	ldrh	r0, [r7, #6]
 8008f94:	893a      	ldrh	r2, [r7, #8]
 8008f96:	8979      	ldrh	r1, [r7, #10]
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fb2c 	bl	8009600 <I2C_RequestMemoryRead>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e1ec      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d113      	bne.n	8008fe2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	e1c0      	b.n	8009364 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d11e      	bne.n	8009028 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ffa:	b672      	cpsid	i
}
 8008ffc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ffe:	2300      	movs	r3, #0
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009022:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009024:	b662      	cpsie	i
}
 8009026:	e035      	b.n	8009094 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902c:	2b02      	cmp	r3, #2
 800902e:	d11e      	bne.n	800906e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800903e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009040:	b672      	cpsid	i
}
 8009042:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009068:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800906a:	b662      	cpsie	i
}
 800906c:	e012      	b.n	8009094 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800907c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	613b      	str	r3, [r7, #16]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	613b      	str	r3, [r7, #16]
 8009092:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009094:	e166      	b.n	8009364 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909a:	2b03      	cmp	r3, #3
 800909c:	f200 811f 	bhi.w	80092de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d123      	bne.n	80090f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fd39 	bl	8009b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e167      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090ee:	e139      	b.n	8009364 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d152      	bne.n	800919e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	2200      	movs	r2, #0
 8009100:	4906      	ldr	r1, [pc, #24]	; (800911c <HAL_I2C_Mem_Read+0x24c>)
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fb64 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d008      	beq.n	8009120 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e13c      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
 8009112:	bf00      	nop
 8009114:	00100002 	.word	0x00100002
 8009118:	ffff0000 	.word	0xffff0000
 800911c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009120:	b672      	cpsid	i
}
 8009122:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	b2d2      	uxtb	r2, r2
 8009140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009150:	3b01      	subs	r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009166:	b662      	cpsie	i
}
 8009168:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691a      	ldr	r2, [r3, #16]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	b2d2      	uxtb	r2, r2
 8009176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009192:	b29b      	uxth	r3, r3
 8009194:	3b01      	subs	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800919c:	e0e2      	b.n	8009364 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	2200      	movs	r2, #0
 80091a6:	497b      	ldr	r1, [pc, #492]	; (8009394 <HAL_I2C_Mem_Read+0x4c4>)
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 fb11 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e0e9      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80091c8:	b672      	cpsid	i
}
 80091ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691a      	ldr	r2, [r3, #16]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80091fe:	4b66      	ldr	r3, [pc, #408]	; (8009398 <HAL_I2C_Mem_Read+0x4c8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	08db      	lsrs	r3, r3, #3
 8009204:	4a65      	ldr	r2, [pc, #404]	; (800939c <HAL_I2C_Mem_Read+0x4cc>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	0a1a      	lsrs	r2, r3, #8
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	00da      	lsls	r2, r3, #3
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	3b01      	subs	r3, #1
 800921c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d118      	bne.n	8009256 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	f043 0220 	orr.w	r2, r3, #32
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009246:	b662      	cpsie	i
}
 8009248:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e09a      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b04      	cmp	r3, #4
 8009262:	d1d9      	bne.n	8009218 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009290:	3b01      	subs	r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80092a6:	b662      	cpsie	i
}
 80092a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	691a      	ldr	r2, [r3, #16]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	b2d2      	uxtb	r2, r2
 80092b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092dc:	e042      	b.n	8009364 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 fc1e 	bl	8009b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e04c      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fc:	b2d2      	uxtb	r2, r2
 80092fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800931a:	b29b      	uxth	r3, r3
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b04      	cmp	r3, #4
 8009330:	d118      	bne.n	8009364 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934e:	3b01      	subs	r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009368:	2b00      	cmp	r3, #0
 800936a:	f47f ae94 	bne.w	8009096 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2220      	movs	r2, #32
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	e000      	b.n	800938c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800938a:	2302      	movs	r3, #2
  }
}
 800938c:	4618      	mov	r0, r3
 800938e:	3728      	adds	r7, #40	; 0x28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	00010004 	.word	0x00010004
 8009398:	20000944 	.word	0x20000944
 800939c:	14f8b589 	.word	0x14f8b589

080093a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ae:	b2db      	uxtb	r3, r3
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr

080093ba <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af02      	add	r7, sp, #8
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	460b      	mov	r3, r1
 80093de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d006      	beq.n	80093fa <I2C_MasterRequestWrite+0x2a>
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d003      	beq.n	80093fa <I2C_MasterRequestWrite+0x2a>
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093f8:	d108      	bne.n	800940c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	e00b      	b.n	8009424 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	2b12      	cmp	r3, #18
 8009412:	d107      	bne.n	8009424 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009422:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f9cd 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00d      	beq.n	8009458 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800944a:	d103      	bne.n	8009454 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e035      	b.n	80094c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009460:	d108      	bne.n	8009474 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009462:	897b      	ldrh	r3, [r7, #10]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009470:	611a      	str	r2, [r3, #16]
 8009472:	e01b      	b.n	80094ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009474:	897b      	ldrh	r3, [r7, #10]
 8009476:	11db      	asrs	r3, r3, #7
 8009478:	b2db      	uxtb	r3, r3
 800947a:	f003 0306 	and.w	r3, r3, #6
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f063 030f 	orn	r3, r3, #15
 8009484:	b2da      	uxtb	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	490e      	ldr	r1, [pc, #56]	; (80094cc <I2C_MasterRequestWrite+0xfc>)
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 fa16 	bl	80098c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e010      	b.n	80094c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80094a2:	897b      	ldrh	r3, [r7, #10]
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	4907      	ldr	r1, [pc, #28]	; (80094d0 <I2C_MasterRequestWrite+0x100>)
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fa06 	bl	80098c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	00010008 	.word	0x00010008
 80094d0:	00010002 	.word	0x00010002

080094d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	4608      	mov	r0, r1
 80094de:	4611      	mov	r1, r2
 80094e0:	461a      	mov	r2, r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	817b      	strh	r3, [r7, #10]
 80094e6:	460b      	mov	r3, r1
 80094e8:	813b      	strh	r3, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	2200      	movs	r2, #0
 8009506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f960 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00d      	beq.n	8009532 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009524:	d103      	bne.n	800952e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800952c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e05f      	b.n	80095f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009532:	897b      	ldrh	r3, [r7, #10]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009540:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	6a3a      	ldr	r2, [r7, #32]
 8009546:	492d      	ldr	r1, [pc, #180]	; (80095fc <I2C_RequestMemoryWrite+0x128>)
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f9bb 	bl	80098c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e04c      	b.n	80095f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800956e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009570:	6a39      	ldr	r1, [r7, #32]
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fa46 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00d      	beq.n	800959a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	2b04      	cmp	r3, #4
 8009584:	d107      	bne.n	8009596 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009594:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e02b      	b.n	80095f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d105      	bne.n	80095ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095a0:	893b      	ldrh	r3, [r7, #8]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	611a      	str	r2, [r3, #16]
 80095aa:	e021      	b.n	80095f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095ac:	893b      	ldrh	r3, [r7, #8]
 80095ae:	0a1b      	lsrs	r3, r3, #8
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095bc:	6a39      	ldr	r1, [r7, #32]
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fa20 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00d      	beq.n	80095e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d107      	bne.n	80095e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e005      	b.n	80095f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095e6:	893b      	ldrh	r3, [r7, #8]
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	00010002 	.word	0x00010002

08009600 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af02      	add	r7, sp, #8
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	4608      	mov	r0, r1
 800960a:	4611      	mov	r1, r2
 800960c:	461a      	mov	r2, r3
 800960e:	4603      	mov	r3, r0
 8009610:	817b      	strh	r3, [r7, #10]
 8009612:	460b      	mov	r3, r1
 8009614:	813b      	strh	r3, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009628:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	2200      	movs	r2, #0
 8009642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 f8c2 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00d      	beq.n	800966e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009660:	d103      	bne.n	800966a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e0aa      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800966e:	897b      	ldrh	r3, [r7, #10]
 8009670:	b2db      	uxtb	r3, r3
 8009672:	461a      	mov	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800967c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	6a3a      	ldr	r2, [r7, #32]
 8009682:	4952      	ldr	r1, [pc, #328]	; (80097cc <I2C_RequestMemoryRead+0x1cc>)
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 f91d 	bl	80098c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e097      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ac:	6a39      	ldr	r1, [r7, #32]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 f9a8 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00d      	beq.n	80096d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d107      	bne.n	80096d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e076      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096d6:	88fb      	ldrh	r3, [r7, #6]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d105      	bne.n	80096e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096dc:	893b      	ldrh	r3, [r7, #8]
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	611a      	str	r2, [r3, #16]
 80096e6:	e021      	b.n	800972c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096e8:	893b      	ldrh	r3, [r7, #8]
 80096ea:	0a1b      	lsrs	r3, r3, #8
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f8:	6a39      	ldr	r1, [r7, #32]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f982 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00d      	beq.n	8009722 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	2b04      	cmp	r3, #4
 800970c:	d107      	bne.n	800971e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800971c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e050      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009722:	893b      	ldrh	r3, [r7, #8]
 8009724:	b2da      	uxtb	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800972c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972e:	6a39      	ldr	r1, [r7, #32]
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f967 	bl	8009a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00d      	beq.n	8009758 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009740:	2b04      	cmp	r3, #4
 8009742:	d107      	bne.n	8009754 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009752:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e035      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009766:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	2200      	movs	r2, #0
 8009770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f82b 	bl	80097d0 <I2C_WaitOnFlagUntilTimeout>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00d      	beq.n	800979c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978e:	d103      	bne.n	8009798 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e013      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800979c:	897b      	ldrh	r3, [r7, #10]
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	6a3a      	ldr	r2, [r7, #32]
 80097b0:	4906      	ldr	r1, [pc, #24]	; (80097cc <I2C_RequestMemoryRead+0x1cc>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 f886 	bl	80098c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	00010002 	.word	0x00010002

080097d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	4613      	mov	r3, r2
 80097de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097e0:	e048      	b.n	8009874 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e8:	d044      	beq.n	8009874 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ea:	f7fe f9e3 	bl	8007bb4 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d302      	bcc.n	8009800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d139      	bne.n	8009874 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b01      	cmp	r3, #1
 8009808:	d10d      	bne.n	8009826 <I2C_WaitOnFlagUntilTimeout+0x56>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	43da      	mvns	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4013      	ands	r3, r2
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	bf0c      	ite	eq
 800981c:	2301      	moveq	r3, #1
 800981e:	2300      	movne	r3, #0
 8009820:	b2db      	uxtb	r3, r3
 8009822:	461a      	mov	r2, r3
 8009824:	e00c      	b.n	8009840 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	43da      	mvns	r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	4013      	ands	r3, r2
 8009832:	b29b      	uxth	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	429a      	cmp	r2, r3
 8009844:	d116      	bne.n	8009874 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009860:	f043 0220 	orr.w	r2, r3, #32
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e023      	b.n	80098bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	0c1b      	lsrs	r3, r3, #16
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b01      	cmp	r3, #1
 800987c:	d10d      	bne.n	800989a <I2C_WaitOnFlagUntilTimeout+0xca>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	43da      	mvns	r2, r3
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	4013      	ands	r3, r2
 800988a:	b29b      	uxth	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	bf0c      	ite	eq
 8009890:	2301      	moveq	r3, #1
 8009892:	2300      	movne	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	e00c      	b.n	80098b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	43da      	mvns	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	4013      	ands	r3, r2
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bf0c      	ite	eq
 80098ac:	2301      	moveq	r3, #1
 80098ae:	2300      	movne	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	461a      	mov	r2, r3
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d093      	beq.n	80097e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098d2:	e071      	b.n	80099b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098e2:	d123      	bne.n	800992c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2220      	movs	r2, #32
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009918:	f043 0204 	orr.w	r2, r3, #4
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e067      	b.n	80099fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009932:	d041      	beq.n	80099b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009934:	f7fe f93e 	bl	8007bb4 <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	429a      	cmp	r2, r3
 8009942:	d302      	bcc.n	800994a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d136      	bne.n	80099b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	0c1b      	lsrs	r3, r3, #16
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b01      	cmp	r3, #1
 8009952:	d10c      	bne.n	800996e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	43da      	mvns	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4013      	ands	r3, r2
 8009960:	b29b      	uxth	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	bf14      	ite	ne
 8009966:	2301      	movne	r3, #1
 8009968:	2300      	moveq	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	e00b      	b.n	8009986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	43da      	mvns	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4013      	ands	r3, r2
 800997a:	b29b      	uxth	r3, r3
 800997c:	2b00      	cmp	r3, #0
 800997e:	bf14      	ite	ne
 8009980:	2301      	movne	r3, #1
 8009982:	2300      	moveq	r3, #0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d016      	beq.n	80099b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2220      	movs	r2, #32
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a4:	f043 0220 	orr.w	r2, r3, #32
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e021      	b.n	80099fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	0c1b      	lsrs	r3, r3, #16
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d10c      	bne.n	80099dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	43da      	mvns	r2, r3
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	4013      	ands	r3, r2
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf14      	ite	ne
 80099d4:	2301      	movne	r3, #1
 80099d6:	2300      	moveq	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	e00b      	b.n	80099f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	43da      	mvns	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4013      	ands	r3, r2
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bf14      	ite	ne
 80099ee:	2301      	movne	r3, #1
 80099f0:	2300      	moveq	r3, #0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f47f af6d 	bne.w	80098d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a10:	e034      	b.n	8009a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f8e3 	bl	8009bde <I2C_IsAcknowledgeFailed>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e034      	b.n	8009a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a28:	d028      	beq.n	8009a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a2a:	f7fe f8c3 	bl	8007bb4 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d302      	bcc.n	8009a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11d      	bne.n	8009a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4a:	2b80      	cmp	r3, #128	; 0x80
 8009a4c:	d016      	beq.n	8009a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e007      	b.n	8009a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a86:	2b80      	cmp	r3, #128	; 0x80
 8009a88:	d1c3      	bne.n	8009a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009aa0:	e034      	b.n	8009b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 f89b 	bl	8009bde <I2C_IsAcknowledgeFailed>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e034      	b.n	8009b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d028      	beq.n	8009b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aba:	f7fe f87b 	bl	8007bb4 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d302      	bcc.n	8009ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11d      	bne.n	8009b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0304 	and.w	r3, r3, #4
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d016      	beq.n	8009b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	f043 0220 	orr.w	r2, r3, #32
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e007      	b.n	8009b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	f003 0304 	and.w	r3, r3, #4
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d1c3      	bne.n	8009aa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b30:	e049      	b.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d119      	bne.n	8009b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0210 	mvn.w	r2, #16
 8009b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e030      	b.n	8009bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b74:	f7fe f81e 	bl	8007bb4 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d302      	bcc.n	8009b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d11d      	bne.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b94:	2b40      	cmp	r3, #64	; 0x40
 8009b96:	d016      	beq.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	f043 0220 	orr.w	r2, r3, #32
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e007      	b.n	8009bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd0:	2b40      	cmp	r3, #64	; 0x40
 8009bd2:	d1ae      	bne.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf4:	d11b      	bne.n	8009c2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009bfe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	f043 0204 	orr.w	r2, r3, #4
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
	...

08009c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e272      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8087 	beq.w	8009d6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c5c:	4b92      	ldr	r3, [pc, #584]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f003 030c 	and.w	r3, r3, #12
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d00c      	beq.n	8009c82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009c68:	4b8f      	ldr	r3, [pc, #572]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f003 030c 	and.w	r3, r3, #12
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d112      	bne.n	8009c9a <HAL_RCC_OscConfig+0x5e>
 8009c74:	4b8c      	ldr	r3, [pc, #560]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c80:	d10b      	bne.n	8009c9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c82:	4b89      	ldr	r3, [pc, #548]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d06c      	beq.n	8009d68 <HAL_RCC_OscConfig+0x12c>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d168      	bne.n	8009d68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e24c      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ca2:	d106      	bne.n	8009cb2 <HAL_RCC_OscConfig+0x76>
 8009ca4:	4b80      	ldr	r3, [pc, #512]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a7f      	ldr	r2, [pc, #508]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	e02e      	b.n	8009d10 <HAL_RCC_OscConfig+0xd4>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10c      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x98>
 8009cba:	4b7b      	ldr	r3, [pc, #492]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a7a      	ldr	r2, [pc, #488]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	4b78      	ldr	r3, [pc, #480]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a77      	ldr	r2, [pc, #476]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	e01d      	b.n	8009d10 <HAL_RCC_OscConfig+0xd4>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cdc:	d10c      	bne.n	8009cf8 <HAL_RCC_OscConfig+0xbc>
 8009cde:	4b72      	ldr	r3, [pc, #456]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a71      	ldr	r2, [pc, #452]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	4b6f      	ldr	r3, [pc, #444]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a6e      	ldr	r2, [pc, #440]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	e00b      	b.n	8009d10 <HAL_RCC_OscConfig+0xd4>
 8009cf8:	4b6b      	ldr	r3, [pc, #428]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a6a      	ldr	r2, [pc, #424]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	4b68      	ldr	r3, [pc, #416]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a67      	ldr	r2, [pc, #412]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d013      	beq.n	8009d40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d18:	f7fd ff4c 	bl	8007bb4 <HAL_GetTick>
 8009d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d1e:	e008      	b.n	8009d32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d20:	f7fd ff48 	bl	8007bb4 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	2b64      	cmp	r3, #100	; 0x64
 8009d2c:	d901      	bls.n	8009d32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e200      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d32:	4b5d      	ldr	r3, [pc, #372]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0f0      	beq.n	8009d20 <HAL_RCC_OscConfig+0xe4>
 8009d3e:	e014      	b.n	8009d6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d40:	f7fd ff38 	bl	8007bb4 <HAL_GetTick>
 8009d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d46:	e008      	b.n	8009d5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d48:	f7fd ff34 	bl	8007bb4 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	2b64      	cmp	r3, #100	; 0x64
 8009d54:	d901      	bls.n	8009d5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e1ec      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d5a:	4b53      	ldr	r3, [pc, #332]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1f0      	bne.n	8009d48 <HAL_RCC_OscConfig+0x10c>
 8009d66:	e000      	b.n	8009d6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d063      	beq.n	8009e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d76:	4b4c      	ldr	r3, [pc, #304]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f003 030c 	and.w	r3, r3, #12
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00b      	beq.n	8009d9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009d82:	4b49      	ldr	r3, [pc, #292]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f003 030c 	and.w	r3, r3, #12
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d11c      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x18c>
 8009d8e:	4b46      	ldr	r3, [pc, #280]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d116      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d9a:	4b43      	ldr	r3, [pc, #268]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <HAL_RCC_OscConfig+0x176>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e1c0      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009db2:	4b3d      	ldr	r3, [pc, #244]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	4939      	ldr	r1, [pc, #228]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dc6:	e03a      	b.n	8009e3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d020      	beq.n	8009e12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009dd0:	4b36      	ldr	r3, [pc, #216]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dd6:	f7fd feed 	bl	8007bb4 <HAL_GetTick>
 8009dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ddc:	e008      	b.n	8009df0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dde:	f7fd fee9 	bl	8007bb4 <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d901      	bls.n	8009df0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e1a1      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df0:	4b2d      	ldr	r3, [pc, #180]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0f0      	beq.n	8009dde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dfc:	4b2a      	ldr	r3, [pc, #168]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	00db      	lsls	r3, r3, #3
 8009e0a:	4927      	ldr	r1, [pc, #156]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	600b      	str	r3, [r1, #0]
 8009e10:	e015      	b.n	8009e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e12:	4b26      	ldr	r3, [pc, #152]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e18:	f7fd fecc 	bl	8007bb4 <HAL_GetTick>
 8009e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e1e:	e008      	b.n	8009e32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e20:	f7fd fec8 	bl	8007bb4 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e180      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e32:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1f0      	bne.n	8009e20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d03a      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d019      	beq.n	8009e86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e52:	4b17      	ldr	r3, [pc, #92]	; (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e54:	2201      	movs	r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e58:	f7fd feac 	bl	8007bb4 <HAL_GetTick>
 8009e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e5e:	e008      	b.n	8009e72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e60:	f7fd fea8 	bl	8007bb4 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e160      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e72:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <HAL_RCC_OscConfig+0x26c>)
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0f0      	beq.n	8009e60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009e7e:	2001      	movs	r0, #1
 8009e80:	f000 face 	bl	800a420 <RCC_Delay>
 8009e84:	e01c      	b.n	8009ec0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e86:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e8c:	f7fd fe92 	bl	8007bb4 <HAL_GetTick>
 8009e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e92:	e00f      	b.n	8009eb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e94:	f7fd fe8e 	bl	8007bb4 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d908      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e146      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
 8009ea6:	bf00      	nop
 8009ea8:	40021000 	.word	0x40021000
 8009eac:	42420000 	.word	0x42420000
 8009eb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb4:	4b92      	ldr	r3, [pc, #584]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e9      	bne.n	8009e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80a6 	beq.w	800a01a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ed2:	4b8b      	ldr	r3, [pc, #556]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10d      	bne.n	8009efa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ede:	4b88      	ldr	r3, [pc, #544]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	4a87      	ldr	r2, [pc, #540]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ee8:	61d3      	str	r3, [r2, #28]
 8009eea:	4b85      	ldr	r3, [pc, #532]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ef2:	60bb      	str	r3, [r7, #8]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009efa:	4b82      	ldr	r3, [pc, #520]	; (800a104 <HAL_RCC_OscConfig+0x4c8>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d118      	bne.n	8009f38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f06:	4b7f      	ldr	r3, [pc, #508]	; (800a104 <HAL_RCC_OscConfig+0x4c8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a7e      	ldr	r2, [pc, #504]	; (800a104 <HAL_RCC_OscConfig+0x4c8>)
 8009f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f12:	f7fd fe4f 	bl	8007bb4 <HAL_GetTick>
 8009f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f18:	e008      	b.n	8009f2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f1a:	f7fd fe4b 	bl	8007bb4 <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2b64      	cmp	r3, #100	; 0x64
 8009f26:	d901      	bls.n	8009f2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e103      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f2c:	4b75      	ldr	r3, [pc, #468]	; (800a104 <HAL_RCC_OscConfig+0x4c8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d0f0      	beq.n	8009f1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d106      	bne.n	8009f4e <HAL_RCC_OscConfig+0x312>
 8009f40:	4b6f      	ldr	r3, [pc, #444]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	4a6e      	ldr	r2, [pc, #440]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	6213      	str	r3, [r2, #32]
 8009f4c:	e02d      	b.n	8009faa <HAL_RCC_OscConfig+0x36e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <HAL_RCC_OscConfig+0x334>
 8009f56:	4b6a      	ldr	r3, [pc, #424]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	4a69      	ldr	r2, [pc, #420]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	6213      	str	r3, [r2, #32]
 8009f62:	4b67      	ldr	r3, [pc, #412]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	4a66      	ldr	r2, [pc, #408]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f68:	f023 0304 	bic.w	r3, r3, #4
 8009f6c:	6213      	str	r3, [r2, #32]
 8009f6e:	e01c      	b.n	8009faa <HAL_RCC_OscConfig+0x36e>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b05      	cmp	r3, #5
 8009f76:	d10c      	bne.n	8009f92 <HAL_RCC_OscConfig+0x356>
 8009f78:	4b61      	ldr	r3, [pc, #388]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	4a60      	ldr	r2, [pc, #384]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f7e:	f043 0304 	orr.w	r3, r3, #4
 8009f82:	6213      	str	r3, [r2, #32]
 8009f84:	4b5e      	ldr	r3, [pc, #376]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	4a5d      	ldr	r2, [pc, #372]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	6213      	str	r3, [r2, #32]
 8009f90:	e00b      	b.n	8009faa <HAL_RCC_OscConfig+0x36e>
 8009f92:	4b5b      	ldr	r3, [pc, #364]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	4a5a      	ldr	r2, [pc, #360]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009f98:	f023 0301 	bic.w	r3, r3, #1
 8009f9c:	6213      	str	r3, [r2, #32]
 8009f9e:	4b58      	ldr	r3, [pc, #352]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	4a57      	ldr	r2, [pc, #348]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009fa4:	f023 0304 	bic.w	r3, r3, #4
 8009fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d015      	beq.n	8009fde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fb2:	f7fd fdff 	bl	8007bb4 <HAL_GetTick>
 8009fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fb8:	e00a      	b.n	8009fd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fba:	f7fd fdfb 	bl	8007bb4 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d901      	bls.n	8009fd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e0b1      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fd0:	4b4b      	ldr	r3, [pc, #300]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0ee      	beq.n	8009fba <HAL_RCC_OscConfig+0x37e>
 8009fdc:	e014      	b.n	800a008 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fde:	f7fd fde9 	bl	8007bb4 <HAL_GetTick>
 8009fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fe4:	e00a      	b.n	8009ffc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fe6:	f7fd fde5 	bl	8007bb4 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d901      	bls.n	8009ffc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e09b      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ffc:	4b40      	ldr	r3, [pc, #256]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1ee      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d105      	bne.n	800a01a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a00e:	4b3c      	ldr	r3, [pc, #240]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	4a3b      	ldr	r2, [pc, #236]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a018:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 8087 	beq.w	800a132 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a024:	4b36      	ldr	r3, [pc, #216]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f003 030c 	and.w	r3, r3, #12
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d061      	beq.n	800a0f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d146      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a038:	4b33      	ldr	r3, [pc, #204]	; (800a108 <HAL_RCC_OscConfig+0x4cc>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a03e:	f7fd fdb9 	bl	8007bb4 <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a046:	f7fd fdb5 	bl	8007bb4 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e06d      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a058:	4b29      	ldr	r3, [pc, #164]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f0      	bne.n	800a046 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a06c:	d108      	bne.n	800a080 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a06e:	4b24      	ldr	r3, [pc, #144]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	4921      	ldr	r1, [pc, #132]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a080:	4b1f      	ldr	r3, [pc, #124]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a19      	ldr	r1, [r3, #32]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	430b      	orrs	r3, r1
 800a092:	491b      	ldr	r1, [pc, #108]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a094:	4313      	orrs	r3, r2
 800a096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a098:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <HAL_RCC_OscConfig+0x4cc>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a09e:	f7fd fd89 	bl	8007bb4 <HAL_GetTick>
 800a0a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0a4:	e008      	b.n	800a0b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0a6:	f7fd fd85 	bl	8007bb4 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d901      	bls.n	800a0b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e03d      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0b8:	4b11      	ldr	r3, [pc, #68]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0f0      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x46a>
 800a0c4:	e035      	b.n	800a132 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0c6:	4b10      	ldr	r3, [pc, #64]	; (800a108 <HAL_RCC_OscConfig+0x4cc>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0cc:	f7fd fd72 	bl	8007bb4 <HAL_GetTick>
 800a0d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a0d2:	e008      	b.n	800a0e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0d4:	f7fd fd6e 	bl	8007bb4 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d901      	bls.n	800a0e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e026      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a0e6:	4b06      	ldr	r3, [pc, #24]	; (800a100 <HAL_RCC_OscConfig+0x4c4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f0      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x498>
 800a0f2:	e01e      	b.n	800a132 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d107      	bne.n	800a10c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e019      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
 800a100:	40021000 	.word	0x40021000
 800a104:	40007000 	.word	0x40007000
 800a108:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <HAL_RCC_OscConfig+0x500>)
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d106      	bne.n	800a12e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d001      	beq.n	800a132 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40021000 	.word	0x40021000

0800a140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e0d0      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a154:	4b6a      	ldr	r3, [pc, #424]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0307 	and.w	r3, r3, #7
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d910      	bls.n	800a184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a162:	4b67      	ldr	r3, [pc, #412]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f023 0207 	bic.w	r2, r3, #7
 800a16a:	4965      	ldr	r1, [pc, #404]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	4313      	orrs	r3, r2
 800a170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a172:	4b63      	ldr	r3, [pc, #396]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d001      	beq.n	800a184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e0b8      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d020      	beq.n	800a1d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a19c:	4b59      	ldr	r3, [pc, #356]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a58      	ldr	r2, [pc, #352]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a1a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a1a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1b4:	4b53      	ldr	r3, [pc, #332]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4a52      	ldr	r2, [pc, #328]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a1ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a1be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1c0:	4b50      	ldr	r3, [pc, #320]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	494d      	ldr	r1, [pc, #308]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d040      	beq.n	800a260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d107      	bne.n	800a1f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1e6:	4b47      	ldr	r3, [pc, #284]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d115      	bne.n	800a21e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e07f      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d107      	bne.n	800a20e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1fe:	4b41      	ldr	r3, [pc, #260]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d109      	bne.n	800a21e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e073      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a20e:	4b3d      	ldr	r3, [pc, #244]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e06b      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a21e:	4b39      	ldr	r3, [pc, #228]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f023 0203 	bic.w	r2, r3, #3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	4936      	ldr	r1, [pc, #216]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a230:	f7fd fcc0 	bl	8007bb4 <HAL_GetTick>
 800a234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a236:	e00a      	b.n	800a24e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a238:	f7fd fcbc 	bl	8007bb4 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	f241 3288 	movw	r2, #5000	; 0x1388
 800a246:	4293      	cmp	r3, r2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e053      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a24e:	4b2d      	ldr	r3, [pc, #180]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f003 020c 	and.w	r2, r3, #12
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d1eb      	bne.n	800a238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a260:	4b27      	ldr	r3, [pc, #156]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d210      	bcs.n	800a290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a26e:	4b24      	ldr	r3, [pc, #144]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f023 0207 	bic.w	r2, r3, #7
 800a276:	4922      	ldr	r1, [pc, #136]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a27e:	4b20      	ldr	r3, [pc, #128]	; (800a300 <HAL_RCC_ClockConfig+0x1c0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d001      	beq.n	800a290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e032      	b.n	800a2f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d008      	beq.n	800a2ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a29c:	4b19      	ldr	r3, [pc, #100]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	4916      	ldr	r1, [pc, #88]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	490e      	ldr	r1, [pc, #56]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a2ce:	f000 f821 	bl	800a314 <HAL_RCC_GetSysClockFreq>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <HAL_RCC_ClockConfig+0x1c4>)
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	091b      	lsrs	r3, r3, #4
 800a2da:	f003 030f 	and.w	r3, r3, #15
 800a2de:	490a      	ldr	r1, [pc, #40]	; (800a308 <HAL_RCC_ClockConfig+0x1c8>)
 800a2e0:	5ccb      	ldrb	r3, [r1, r3]
 800a2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e6:	4a09      	ldr	r2, [pc, #36]	; (800a30c <HAL_RCC_ClockConfig+0x1cc>)
 800a2e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <HAL_RCC_ClockConfig+0x1d0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fd fc1e 	bl	8007b30 <HAL_InitTick>

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	40022000 	.word	0x40022000
 800a304:	40021000 	.word	0x40021000
 800a308:	0800cf48 	.word	0x0800cf48
 800a30c:	20000944 	.word	0x20000944
 800a310:	20000948 	.word	0x20000948

0800a314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	2300      	movs	r3, #0
 800a320:	60bb      	str	r3, [r7, #8]
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]
 800a326:	2300      	movs	r3, #0
 800a328:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a32e:	4b1e      	ldr	r3, [pc, #120]	; (800a3a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 030c 	and.w	r3, r3, #12
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d002      	beq.n	800a344 <HAL_RCC_GetSysClockFreq+0x30>
 800a33e:	2b08      	cmp	r3, #8
 800a340:	d003      	beq.n	800a34a <HAL_RCC_GetSysClockFreq+0x36>
 800a342:	e027      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a344:	4b19      	ldr	r3, [pc, #100]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x98>)
 800a346:	613b      	str	r3, [r7, #16]
      break;
 800a348:	e027      	b.n	800a39a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	0c9b      	lsrs	r3, r3, #18
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	4a17      	ldr	r2, [pc, #92]	; (800a3b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a354:	5cd3      	ldrb	r3, [r2, r3]
 800a356:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d010      	beq.n	800a384 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a362:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	0c5b      	lsrs	r3, r3, #17
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	4a11      	ldr	r2, [pc, #68]	; (800a3b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a36e:	5cd3      	ldrb	r3, [r2, r3]
 800a370:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a0d      	ldr	r2, [pc, #52]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x98>)
 800a376:	fb03 f202 	mul.w	r2, r3, r2
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e004      	b.n	800a38e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a0c      	ldr	r2, [pc, #48]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	613b      	str	r3, [r7, #16]
      break;
 800a392:	e002      	b.n	800a39a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x98>)
 800a396:	613b      	str	r3, [r7, #16]
      break;
 800a398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a39a:	693b      	ldr	r3, [r7, #16]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40021000 	.word	0x40021000
 800a3ac:	007a1200 	.word	0x007a1200
 800a3b0:	0800cf60 	.word	0x0800cf60
 800a3b4:	0800cf70 	.word	0x0800cf70
 800a3b8:	003d0900 	.word	0x003d0900

0800a3bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3c0:	4b02      	ldr	r3, [pc, #8]	; (800a3cc <HAL_RCC_GetHCLKFreq+0x10>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bc80      	pop	{r7}
 800a3ca:	4770      	bx	lr
 800a3cc:	20000944 	.word	0x20000944

0800a3d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a3d4:	f7ff fff2 	bl	800a3bc <HAL_RCC_GetHCLKFreq>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	4903      	ldr	r1, [pc, #12]	; (800a3f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3e6:	5ccb      	ldrb	r3, [r1, r3]
 800a3e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	40021000 	.word	0x40021000
 800a3f4:	0800cf58 	.word	0x0800cf58

0800a3f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a3fc:	f7ff ffde 	bl	800a3bc <HAL_RCC_GetHCLKFreq>
 800a400:	4602      	mov	r2, r0
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	0adb      	lsrs	r3, r3, #11
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	4903      	ldr	r1, [pc, #12]	; (800a41c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a40e:	5ccb      	ldrb	r3, [r1, r3]
 800a410:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40021000 	.word	0x40021000
 800a41c:	0800cf58 	.word	0x0800cf58

0800a420 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <RCC_Delay+0x34>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a0a      	ldr	r2, [pc, #40]	; (800a458 <RCC_Delay+0x38>)
 800a42e:	fba2 2303 	umull	r2, r3, r2, r3
 800a432:	0a5b      	lsrs	r3, r3, #9
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	fb02 f303 	mul.w	r3, r2, r3
 800a43a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a43c:	bf00      	nop
  }
  while (Delay --);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	1e5a      	subs	r2, r3, #1
 800a442:	60fa      	str	r2, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f9      	bne.n	800a43c <RCC_Delay+0x1c>
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	bc80      	pop	{r7}
 800a452:	4770      	bx	lr
 800a454:	20000944 	.word	0x20000944
 800a458:	10624dd3 	.word	0x10624dd3

0800a45c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e041      	b.n	800a4f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fd fa26 	bl	80078d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f000 fa82 	bl	800a9a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d001      	beq.n	800a514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e044      	b.n	800a59e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0201 	orr.w	r2, r2, #1
 800a52a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <HAL_TIM_Base_Start_IT+0xac>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d018      	beq.n	800a568 <HAL_TIM_Base_Start_IT+0x6c>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a1c      	ldr	r2, [pc, #112]	; (800a5ac <HAL_TIM_Base_Start_IT+0xb0>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d013      	beq.n	800a568 <HAL_TIM_Base_Start_IT+0x6c>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a548:	d00e      	beq.n	800a568 <HAL_TIM_Base_Start_IT+0x6c>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a18      	ldr	r2, [pc, #96]	; (800a5b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d009      	beq.n	800a568 <HAL_TIM_Base_Start_IT+0x6c>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a16      	ldr	r2, [pc, #88]	; (800a5b4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d004      	beq.n	800a568 <HAL_TIM_Base_Start_IT+0x6c>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a15      	ldr	r2, [pc, #84]	; (800a5b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d111      	bne.n	800a58c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b06      	cmp	r3, #6
 800a578:	d010      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f042 0201 	orr.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58a:	e007      	b.n	800a59c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f042 0201 	orr.w	r2, r2, #1
 800a59a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bc80      	pop	{r7}
 800a5a6:	4770      	bx	lr
 800a5a8:	40012c00 	.word	0x40012c00
 800a5ac:	40013400 	.word	0x40013400
 800a5b0:	40000400 	.word	0x40000400
 800a5b4:	40000800 	.word	0x40000800
 800a5b8:	40000c00 	.word	0x40000c00

0800a5bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d122      	bne.n	800a618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d11b      	bne.n	800a618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f06f 0202 	mvn.w	r2, #2
 800a5e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f9b4 	bl	800a96c <HAL_TIM_IC_CaptureCallback>
 800a604:	e005      	b.n	800a612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f9a7 	bl	800a95a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f9b6 	bl	800a97e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b04      	cmp	r3, #4
 800a624:	d122      	bne.n	800a66c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b04      	cmp	r3, #4
 800a632:	d11b      	bne.n	800a66c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f06f 0204 	mvn.w	r2, #4
 800a63c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2202      	movs	r2, #2
 800a642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f98a 	bl	800a96c <HAL_TIM_IC_CaptureCallback>
 800a658:	e005      	b.n	800a666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f97d 	bl	800a95a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f98c 	bl	800a97e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b08      	cmp	r3, #8
 800a678:	d122      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	2b08      	cmp	r3, #8
 800a686:	d11b      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f06f 0208 	mvn.w	r2, #8
 800a690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2204      	movs	r2, #4
 800a696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f960 	bl	800a96c <HAL_TIM_IC_CaptureCallback>
 800a6ac:	e005      	b.n	800a6ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f953 	bl	800a95a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f962 	bl	800a97e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	2b10      	cmp	r3, #16
 800a6cc:	d122      	bne.n	800a714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f003 0310 	and.w	r3, r3, #16
 800a6d8:	2b10      	cmp	r3, #16
 800a6da:	d11b      	bne.n	800a714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f06f 0210 	mvn.w	r2, #16
 800a6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f936 	bl	800a96c <HAL_TIM_IC_CaptureCallback>
 800a700:	e005      	b.n	800a70e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f929 	bl	800a95a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f938 	bl	800a97e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d10e      	bne.n	800a740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d107      	bne.n	800a740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f06f 0201 	mvn.w	r2, #1
 800a738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7fc fd4a 	bl	80071d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74a:	2b80      	cmp	r3, #128	; 0x80
 800a74c:	d10e      	bne.n	800a76c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a758:	2b80      	cmp	r3, #128	; 0x80
 800a75a:	d107      	bne.n	800a76c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 faa1 	bl	800acae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b40      	cmp	r3, #64	; 0x40
 800a778:	d10e      	bne.n	800a798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a784:	2b40      	cmp	r3, #64	; 0x40
 800a786:	d107      	bne.n	800a798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f8fc 	bl	800a990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b20      	cmp	r3, #32
 800a7a4:	d10e      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b20      	cmp	r3, #32
 800a7b2:	d107      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f06f 0220 	mvn.w	r2, #32
 800a7bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fa6c 	bl	800ac9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_TIM_ConfigClockSource+0x1c>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e0b4      	b.n	800a952 <HAL_TIM_ConfigClockSource+0x186>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a80e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a820:	d03e      	beq.n	800a8a0 <HAL_TIM_ConfigClockSource+0xd4>
 800a822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a826:	f200 8087 	bhi.w	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a82e:	f000 8086 	beq.w	800a93e <HAL_TIM_ConfigClockSource+0x172>
 800a832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a836:	d87f      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a838:	2b70      	cmp	r3, #112	; 0x70
 800a83a:	d01a      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0xa6>
 800a83c:	2b70      	cmp	r3, #112	; 0x70
 800a83e:	d87b      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a840:	2b60      	cmp	r3, #96	; 0x60
 800a842:	d050      	beq.n	800a8e6 <HAL_TIM_ConfigClockSource+0x11a>
 800a844:	2b60      	cmp	r3, #96	; 0x60
 800a846:	d877      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a848:	2b50      	cmp	r3, #80	; 0x50
 800a84a:	d03c      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0xfa>
 800a84c:	2b50      	cmp	r3, #80	; 0x50
 800a84e:	d873      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a850:	2b40      	cmp	r3, #64	; 0x40
 800a852:	d058      	beq.n	800a906 <HAL_TIM_ConfigClockSource+0x13a>
 800a854:	2b40      	cmp	r3, #64	; 0x40
 800a856:	d86f      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a858:	2b30      	cmp	r3, #48	; 0x30
 800a85a:	d064      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x15a>
 800a85c:	2b30      	cmp	r3, #48	; 0x30
 800a85e:	d86b      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a860:	2b20      	cmp	r3, #32
 800a862:	d060      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x15a>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d867      	bhi.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d05c      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x15a>
 800a86c:	2b10      	cmp	r3, #16
 800a86e:	d05a      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x15a>
 800a870:	e062      	b.n	800a938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a882:	f000 f980 	bl	800ab86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	609a      	str	r2, [r3, #8]
      break;
 800a89e:	e04f      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8b0:	f000 f969 	bl	800ab86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689a      	ldr	r2, [r3, #8]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8c2:	609a      	str	r2, [r3, #8]
      break;
 800a8c4:	e03c      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f000 f8e0 	bl	800aa98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2150      	movs	r1, #80	; 0x50
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 f937 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a8e4:	e02c      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f000 f8fe 	bl	800aaf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2160      	movs	r1, #96	; 0x60
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f927 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a904:	e01c      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a912:	461a      	mov	r2, r3
 800a914:	f000 f8c0 	bl	800aa98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2140      	movs	r1, #64	; 0x40
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f917 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a924:	e00c      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f000 f90e 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a936:	e003      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	73fb      	strb	r3, [r7, #15]
      break;
 800a93c:	e000      	b.n	800a940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a93e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a950:	7bfb      	ldrb	r3, [r7, #15]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b083      	sub	sp, #12
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	bc80      	pop	{r7}
 800a96a:	4770      	bx	lr

0800a96c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr

0800a97e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bc80      	pop	{r7}
 800a98e:	4770      	bx	lr

0800a990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bc80      	pop	{r7}
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a33      	ldr	r2, [pc, #204]	; (800aa84 <TIM_Base_SetConfig+0xe0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d013      	beq.n	800a9e4 <TIM_Base_SetConfig+0x40>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a32      	ldr	r2, [pc, #200]	; (800aa88 <TIM_Base_SetConfig+0xe4>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00f      	beq.n	800a9e4 <TIM_Base_SetConfig+0x40>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ca:	d00b      	beq.n	800a9e4 <TIM_Base_SetConfig+0x40>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a2f      	ldr	r2, [pc, #188]	; (800aa8c <TIM_Base_SetConfig+0xe8>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d007      	beq.n	800a9e4 <TIM_Base_SetConfig+0x40>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a2e      	ldr	r2, [pc, #184]	; (800aa90 <TIM_Base_SetConfig+0xec>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d003      	beq.n	800a9e4 <TIM_Base_SetConfig+0x40>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a2d      	ldr	r2, [pc, #180]	; (800aa94 <TIM_Base_SetConfig+0xf0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d108      	bne.n	800a9f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a22      	ldr	r2, [pc, #136]	; (800aa84 <TIM_Base_SetConfig+0xe0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d013      	beq.n	800aa26 <TIM_Base_SetConfig+0x82>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a21      	ldr	r2, [pc, #132]	; (800aa88 <TIM_Base_SetConfig+0xe4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00f      	beq.n	800aa26 <TIM_Base_SetConfig+0x82>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa0c:	d00b      	beq.n	800aa26 <TIM_Base_SetConfig+0x82>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a1e      	ldr	r2, [pc, #120]	; (800aa8c <TIM_Base_SetConfig+0xe8>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d007      	beq.n	800aa26 <TIM_Base_SetConfig+0x82>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a1d      	ldr	r2, [pc, #116]	; (800aa90 <TIM_Base_SetConfig+0xec>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d003      	beq.n	800aa26 <TIM_Base_SetConfig+0x82>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a1c      	ldr	r2, [pc, #112]	; (800aa94 <TIM_Base_SetConfig+0xf0>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d108      	bne.n	800aa38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <TIM_Base_SetConfig+0xe0>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d003      	beq.n	800aa6c <TIM_Base_SetConfig+0xc8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <TIM_Base_SetConfig+0xe4>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d103      	bne.n	800aa74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	691a      	ldr	r2, [r3, #16]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	615a      	str	r2, [r3, #20]
}
 800aa7a:	bf00      	nop
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bc80      	pop	{r7}
 800aa82:	4770      	bx	lr
 800aa84:	40012c00 	.word	0x40012c00
 800aa88:	40013400 	.word	0x40013400
 800aa8c:	40000400 	.word	0x40000400
 800aa90:	40000800 	.word	0x40000800
 800aa94:	40000c00 	.word	0x40000c00

0800aa98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	f023 0201 	bic.w	r2, r3, #1
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	011b      	lsls	r3, r3, #4
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f023 030a 	bic.w	r3, r3, #10
 800aad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	4313      	orrs	r3, r2
 800aadc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	621a      	str	r2, [r3, #32]
}
 800aaea:	bf00      	nop
 800aaec:	371c      	adds	r7, #28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bc80      	pop	{r7}
 800aaf2:	4770      	bx	lr

0800aaf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	f023 0210 	bic.w	r2, r3, #16
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	031b      	lsls	r3, r3, #12
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	621a      	str	r2, [r3, #32]
}
 800ab48:	bf00      	nop
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bc80      	pop	{r7}
 800ab50:	4770      	bx	lr

0800ab52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	f043 0307 	orr.w	r3, r3, #7
 800ab74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	609a      	str	r2, [r3, #8]
}
 800ab7c:	bf00      	nop
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr

0800ab86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b087      	sub	sp, #28
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	60b9      	str	r1, [r7, #8]
 800ab90:	607a      	str	r2, [r7, #4]
 800ab92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aba0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	021a      	lsls	r2, r3, #8
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	431a      	orrs	r2, r3
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4313      	orrs	r3, r2
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	609a      	str	r2, [r3, #8]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bc80      	pop	{r7}
 800abc2:	4770      	bx	lr

0800abc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d101      	bne.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abd8:	2302      	movs	r3, #2
 800abda:	e050      	b.n	800ac7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a1b      	ldr	r2, [pc, #108]	; (800ac88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d018      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a19      	ldr	r2, [pc, #100]	; (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d013      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac32:	d00e      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d009      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d004      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a12      	ldr	r2, [pc, #72]	; (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d10c      	bne.n	800ac6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr
 800ac88:	40012c00 	.word	0x40012c00
 800ac8c:	40013400 	.word	0x40013400
 800ac90:	40000400 	.word	0x40000400
 800ac94:	40000800 	.word	0x40000800
 800ac98:	40000c00 	.word	0x40000c00

0800ac9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bc80      	pop	{r7}
 800acac:	4770      	bx	lr

0800acae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	bc80      	pop	{r7}
 800acbe:	4770      	bx	lr

0800acc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e042      	b.n	800ad58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d106      	bne.n	800acec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7fc fe1a 	bl	8007920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2224      	movs	r2, #36	; 0x24
 800acf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fcb5 	bl	800b674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	691a      	ldr	r2, [r3, #16]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	695a      	ldr	r2, [r3, #20]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68da      	ldr	r2, [r3, #12]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	4613      	mov	r3, r2
 800ad6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	d121      	bne.n	800adbe <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <HAL_UART_Transmit_IT+0x26>
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e01a      	b.n	800adc0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	88fa      	ldrh	r2, [r7, #6]
 800ad94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	88fa      	ldrh	r2, [r7, #6]
 800ad9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2221      	movs	r2, #33	; 0x21
 800ada6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adb8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	e000      	b.n	800adc0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800adbe:	2302      	movs	r3, #2
  }
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bc80      	pop	{r7}
 800adc8:	4770      	bx	lr
	...

0800adcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b0ba      	sub	sp, #232	; 0xe8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10f      	bne.n	800ae32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae16:	f003 0320 	and.w	r3, r3, #32
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <HAL_UART_IRQHandler+0x66>
 800ae1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae22:	f003 0320 	and.w	r3, r3, #32
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fb63 	bl	800b4f6 <UART_Receive_IT>
      return;
 800ae30:	e25b      	b.n	800b2ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 80de 	beq.w	800aff8 <HAL_UART_IRQHandler+0x22c>
 800ae3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d106      	bne.n	800ae56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 80d1 	beq.w	800aff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <HAL_UART_IRQHandler+0xae>
 800ae62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d005      	beq.n	800ae7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	f043 0201 	orr.w	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae7e:	f003 0304 	and.w	r3, r3, #4
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00b      	beq.n	800ae9e <HAL_UART_IRQHandler+0xd2>
 800ae86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	f043 0202 	orr.w	r2, r3, #2
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00b      	beq.n	800aec2 <HAL_UART_IRQHandler+0xf6>
 800aeaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	f043 0204 	orr.w	r2, r3, #4
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec6:	f003 0308 	and.w	r3, r3, #8
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d011      	beq.n	800aef2 <HAL_UART_IRQHandler+0x126>
 800aece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d105      	bne.n	800aee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aeda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeea:	f043 0208 	orr.w	r2, r3, #8
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 81f2 	beq.w	800b2e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b00      	cmp	r3, #0
 800af06:	d008      	beq.n	800af1a <HAL_UART_IRQHandler+0x14e>
 800af08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af0c:	f003 0320 	and.w	r3, r3, #32
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 faee 	bl	800b4f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af24:	2b00      	cmp	r3, #0
 800af26:	bf14      	ite	ne
 800af28:	2301      	movne	r3, #1
 800af2a:	2300      	moveq	r3, #0
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d103      	bne.n	800af46 <HAL_UART_IRQHandler+0x17a>
 800af3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af42:	2b00      	cmp	r3, #0
 800af44:	d04f      	beq.n	800afe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f9f8 	bl	800b33c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d041      	beq.n	800afde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3314      	adds	r3, #20
 800af60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3314      	adds	r3, #20
 800af82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1d9      	bne.n	800af5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d013      	beq.n	800afd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb2:	4a7e      	ldr	r2, [pc, #504]	; (800b1ac <HAL_UART_IRQHandler+0x3e0>)
 800afb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fd f86c 	bl	8008098 <HAL_DMA_Abort_IT>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d016      	beq.n	800aff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd4:	e00e      	b.n	800aff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f99c 	bl	800b314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afdc:	e00a      	b.n	800aff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f998 	bl	800b314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe4:	e006      	b.n	800aff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f994 	bl	800b314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800aff2:	e175      	b.n	800b2e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff4:	bf00      	nop
    return;
 800aff6:	e173      	b.n	800b2e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	2b01      	cmp	r3, #1
 800affe:	f040 814f 	bne.w	800b2a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b006:	f003 0310 	and.w	r3, r3, #16
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 8148 	beq.w	800b2a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 8141 	beq.w	800b2a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b01e:	2300      	movs	r3, #0
 800b020:	60bb      	str	r3, [r7, #8]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60bb      	str	r3, [r7, #8]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	60bb      	str	r3, [r7, #8]
 800b032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 80b6 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8145 	beq.w	800b2e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b05e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b062:	429a      	cmp	r2, r3
 800b064:	f080 813e 	bcs.w	800b2e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b06e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	2b20      	cmp	r3, #32
 800b078:	f000 8088 	beq.w	800b18c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	330c      	adds	r3, #12
 800b082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b09a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	330c      	adds	r3, #12
 800b0a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b0a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1d9      	bne.n	800b07c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3314      	adds	r3, #20
 800b0ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0da:	f023 0301 	bic.w	r3, r3, #1
 800b0de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3314      	adds	r3, #20
 800b0e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e1      	bne.n	800b0c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3314      	adds	r3, #20
 800b10a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b10e:	e853 3f00 	ldrex	r3, [r3]
 800b112:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b11a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3314      	adds	r3, #20
 800b124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b128:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b12a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b12e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b130:	e841 2300 	strex	r3, r2, [r1]
 800b134:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e3      	bne.n	800b104 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2220      	movs	r2, #32
 800b140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	330c      	adds	r3, #12
 800b150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b15a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b15c:	f023 0310 	bic.w	r3, r3, #16
 800b160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	330c      	adds	r3, #12
 800b16a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b16e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b170:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e3      	bne.n	800b14a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b186:	4618      	mov	r0, r3
 800b188:	f7fc ff4b 	bl	8008022 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f8bf 	bl	800b326 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1a8:	e09c      	b.n	800b2e4 <HAL_UART_IRQHandler+0x518>
 800b1aa:	bf00      	nop
 800b1ac:	0800b401 	.word	0x0800b401
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 808e 	beq.w	800b2e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b1cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 8089 	beq.w	800b2e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	330c      	adds	r3, #12
 800b1dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b1fa:	647a      	str	r2, [r7, #68]	; 0x44
 800b1fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e3      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3314      	adds	r3, #20
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	623b      	str	r3, [r7, #32]
   return(result);
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	f023 0301 	bic.w	r3, r3, #1
 800b224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3314      	adds	r3, #20
 800b22e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b232:	633a      	str	r2, [r7, #48]	; 0x30
 800b234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23a:	e841 2300 	strex	r3, r2, [r1]
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1e3      	bne.n	800b20e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2220      	movs	r2, #32
 800b24a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	330c      	adds	r3, #12
 800b25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	60fb      	str	r3, [r7, #12]
   return(result);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0310 	bic.w	r3, r3, #16
 800b26a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	330c      	adds	r3, #12
 800b274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b278:	61fa      	str	r2, [r7, #28]
 800b27a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	69b9      	ldr	r1, [r7, #24]
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	617b      	str	r3, [r7, #20]
   return(result);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e3      	bne.n	800b254 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2202      	movs	r2, #2
 800b290:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f844 	bl	800b326 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b29e:	e023      	b.n	800b2e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d009      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x4f4>
 800b2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d003      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f8b5 	bl	800b428 <UART_Transmit_IT>
    return;
 800b2be:	e014      	b.n	800b2ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00e      	beq.n	800b2ea <HAL_UART_IRQHandler+0x51e>
 800b2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f8f4 	bl	800b4c6 <UART_EndTransmit_IT>
    return;
 800b2de:	e004      	b.n	800b2ea <HAL_UART_IRQHandler+0x51e>
    return;
 800b2e0:	bf00      	nop
 800b2e2:	e002      	b.n	800b2ea <HAL_UART_IRQHandler+0x51e>
      return;
 800b2e4:	bf00      	nop
 800b2e6:	e000      	b.n	800b2ea <HAL_UART_IRQHandler+0x51e>
      return;
 800b2e8:	bf00      	nop
  }
}
 800b2ea:	37e8      	adds	r7, #232	; 0xe8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bc80      	pop	{r7}
 800b300:	4770      	bx	lr

0800b302 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	bc80      	pop	{r7}
 800b312:	4770      	bx	lr

0800b314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	bc80      	pop	{r7}
 800b324:	4770      	bx	lr

0800b326 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	bc80      	pop	{r7}
 800b33a:	4770      	bx	lr

0800b33c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b095      	sub	sp, #84	; 0x54
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34e:	e853 3f00 	ldrex	r3, [r3]
 800b352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b35a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	330c      	adds	r3, #12
 800b362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b364:	643a      	str	r2, [r7, #64]	; 0x40
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b36a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e5      	bne.n	800b344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3314      	adds	r3, #20
 800b37e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	61fb      	str	r3, [r7, #28]
   return(result);
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	f023 0301 	bic.w	r3, r3, #1
 800b38e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3314      	adds	r3, #20
 800b396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b39a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3a0:	e841 2300 	strex	r3, r2, [r1]
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e5      	bne.n	800b378 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d119      	bne.n	800b3e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	e853 3f00 	ldrex	r3, [r3]
 800b3c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f023 0310 	bic.w	r3, r3, #16
 800b3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	330c      	adds	r3, #12
 800b3d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3d4:	61ba      	str	r2, [r7, #24]
 800b3d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d8:	6979      	ldr	r1, [r7, #20]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	e841 2300 	strex	r3, r2, [r1]
 800b3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e5      	bne.n	800b3b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2220      	movs	r2, #32
 800b3ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3f6:	bf00      	nop
 800b3f8:	3754      	adds	r7, #84	; 0x54
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bc80      	pop	{r7}
 800b3fe:	4770      	bx	lr

0800b400 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff ff7a 	bl	800b314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b21      	cmp	r3, #33	; 0x21
 800b43a:	d13e      	bne.n	800b4ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b444:	d114      	bne.n	800b470 <UART_Transmit_IT+0x48>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d110      	bne.n	800b470 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	461a      	mov	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b462:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	1c9a      	adds	r2, r3, #2
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	621a      	str	r2, [r3, #32]
 800b46e:	e008      	b.n	800b482 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	1c59      	adds	r1, r3, #1
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6211      	str	r1, [r2, #32]
 800b47a:	781a      	ldrb	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b486:	b29b      	uxth	r3, r3
 800b488:	3b01      	subs	r3, #1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4619      	mov	r1, r3
 800b490:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10f      	bne.n	800b4b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68da      	ldr	r2, [r3, #12]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e000      	b.n	800b4bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4ba:	2302      	movs	r3, #2
  }
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bc80      	pop	{r7}
 800b4c4:	4770      	bx	lr

0800b4c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68da      	ldr	r2, [r3, #12]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff ff02 	bl	800b2f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b08c      	sub	sp, #48	; 0x30
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b22      	cmp	r3, #34	; 0x22
 800b508:	f040 80ae 	bne.w	800b668 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b514:	d117      	bne.n	800b546 <UART_Receive_IT+0x50>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d113      	bne.n	800b546 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b534:	b29a      	uxth	r2, r3
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53e:	1c9a      	adds	r2, r3, #2
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	629a      	str	r2, [r3, #40]	; 0x28
 800b544:	e026      	b.n	800b594 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b54c:	2300      	movs	r3, #0
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b558:	d007      	beq.n	800b56a <UART_Receive_IT+0x74>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <UART_Receive_IT+0x82>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	b2da      	uxtb	r2, r3
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	e008      	b.n	800b58a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b584:	b2da      	uxtb	r2, r3
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b598:	b29b      	uxth	r3, r3
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d15d      	bne.n	800b664 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f022 0220 	bic.w	r2, r2, #32
 800b5b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695a      	ldr	r2, [r3, #20]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 0201 	bic.w	r2, r2, #1
 800b5d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d135      	bne.n	800b65a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	330c      	adds	r3, #12
 800b5fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	e853 3f00 	ldrex	r3, [r3]
 800b602:	613b      	str	r3, [r7, #16]
   return(result);
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f023 0310 	bic.w	r3, r3, #16
 800b60a:	627b      	str	r3, [r7, #36]	; 0x24
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	330c      	adds	r3, #12
 800b612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b614:	623a      	str	r2, [r7, #32]
 800b616:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b618:	69f9      	ldr	r1, [r7, #28]
 800b61a:	6a3a      	ldr	r2, [r7, #32]
 800b61c:	e841 2300 	strex	r3, r2, [r1]
 800b620:	61bb      	str	r3, [r7, #24]
   return(result);
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e5      	bne.n	800b5f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0310 	and.w	r3, r3, #16
 800b632:	2b10      	cmp	r3, #16
 800b634:	d10a      	bne.n	800b64c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff fe67 	bl	800b326 <HAL_UARTEx_RxEventCallback>
 800b658:	e002      	b.n	800b660 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fe51 	bl	800b302 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	e002      	b.n	800b66a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	e000      	b.n	800b66a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b668:	2302      	movs	r3, #2
  }
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3730      	adds	r7, #48	; 0x30
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68da      	ldr	r2, [r3, #12]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	430a      	orrs	r2, r1
 800b690:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b6ae:	f023 030c 	bic.w	r3, r3, #12
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6812      	ldr	r2, [r2, #0]
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	430b      	orrs	r3, r1
 800b6ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a2c      	ldr	r2, [pc, #176]	; (800b788 <UART_SetConfig+0x114>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d103      	bne.n	800b6e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b6dc:	f7fe fe8c 	bl	800a3f8 <HAL_RCC_GetPCLK2Freq>
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	e002      	b.n	800b6ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b6e4:	f7fe fe74 	bl	800a3d0 <HAL_RCC_GetPCLK1Freq>
 800b6e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009a      	lsls	r2, r3, #2
 800b6f4:	441a      	add	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b700:	4a22      	ldr	r2, [pc, #136]	; (800b78c <UART_SetConfig+0x118>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	095b      	lsrs	r3, r3, #5
 800b708:	0119      	lsls	r1, r3, #4
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	009a      	lsls	r2, r3, #2
 800b714:	441a      	add	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b720:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <UART_SetConfig+0x118>)
 800b722:	fba3 0302 	umull	r0, r3, r3, r2
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	2064      	movs	r0, #100	; 0x64
 800b72a:	fb00 f303 	mul.w	r3, r0, r3
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	3332      	adds	r3, #50	; 0x32
 800b734:	4a15      	ldr	r2, [pc, #84]	; (800b78c <UART_SetConfig+0x118>)
 800b736:	fba2 2303 	umull	r2, r3, r2, r3
 800b73a:	095b      	lsrs	r3, r3, #5
 800b73c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b740:	4419      	add	r1, r3
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009a      	lsls	r2, r3, #2
 800b74c:	441a      	add	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	fbb2 f2f3 	udiv	r2, r2, r3
 800b758:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <UART_SetConfig+0x118>)
 800b75a:	fba3 0302 	umull	r0, r3, r3, r2
 800b75e:	095b      	lsrs	r3, r3, #5
 800b760:	2064      	movs	r0, #100	; 0x64
 800b762:	fb00 f303 	mul.w	r3, r0, r3
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	011b      	lsls	r3, r3, #4
 800b76a:	3332      	adds	r3, #50	; 0x32
 800b76c:	4a07      	ldr	r2, [pc, #28]	; (800b78c <UART_SetConfig+0x118>)
 800b76e:	fba2 2303 	umull	r2, r3, r2, r3
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	f003 020f 	and.w	r2, r3, #15
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	440a      	add	r2, r1
 800b77e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	40013800 	.word	0x40013800
 800b78c:	51eb851f 	.word	0x51eb851f

0800b790 <__itoa>:
 800b790:	1e93      	subs	r3, r2, #2
 800b792:	2b22      	cmp	r3, #34	; 0x22
 800b794:	b510      	push	{r4, lr}
 800b796:	460c      	mov	r4, r1
 800b798:	d904      	bls.n	800b7a4 <__itoa+0x14>
 800b79a:	2300      	movs	r3, #0
 800b79c:	461c      	mov	r4, r3
 800b79e:	700b      	strb	r3, [r1, #0]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	bd10      	pop	{r4, pc}
 800b7a4:	2a0a      	cmp	r2, #10
 800b7a6:	d109      	bne.n	800b7bc <__itoa+0x2c>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	da07      	bge.n	800b7bc <__itoa+0x2c>
 800b7ac:	232d      	movs	r3, #45	; 0x2d
 800b7ae:	700b      	strb	r3, [r1, #0]
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	4240      	negs	r0, r0
 800b7b4:	4421      	add	r1, r4
 800b7b6:	f000 f8b9 	bl	800b92c <__utoa>
 800b7ba:	e7f1      	b.n	800b7a0 <__itoa+0x10>
 800b7bc:	2100      	movs	r1, #0
 800b7be:	e7f9      	b.n	800b7b4 <__itoa+0x24>

0800b7c0 <itoa>:
 800b7c0:	f7ff bfe6 	b.w	800b790 <__itoa>

0800b7c4 <malloc>:
 800b7c4:	4b02      	ldr	r3, [pc, #8]	; (800b7d0 <malloc+0xc>)
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	6818      	ldr	r0, [r3, #0]
 800b7ca:	f000 b823 	b.w	800b814 <_malloc_r>
 800b7ce:	bf00      	nop
 800b7d0:	2000099c 	.word	0x2000099c

0800b7d4 <sbrk_aligned>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	4e0e      	ldr	r6, [pc, #56]	; (800b810 <sbrk_aligned+0x3c>)
 800b7d8:	460c      	mov	r4, r1
 800b7da:	6831      	ldr	r1, [r6, #0]
 800b7dc:	4605      	mov	r5, r0
 800b7de:	b911      	cbnz	r1, 800b7e6 <sbrk_aligned+0x12>
 800b7e0:	f000 f90e 	bl	800ba00 <_sbrk_r>
 800b7e4:	6030      	str	r0, [r6, #0]
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f000 f909 	bl	800ba00 <_sbrk_r>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	d00a      	beq.n	800b808 <sbrk_aligned+0x34>
 800b7f2:	1cc4      	adds	r4, r0, #3
 800b7f4:	f024 0403 	bic.w	r4, r4, #3
 800b7f8:	42a0      	cmp	r0, r4
 800b7fa:	d007      	beq.n	800b80c <sbrk_aligned+0x38>
 800b7fc:	1a21      	subs	r1, r4, r0
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 f8fe 	bl	800ba00 <_sbrk_r>
 800b804:	3001      	adds	r0, #1
 800b806:	d101      	bne.n	800b80c <sbrk_aligned+0x38>
 800b808:	f04f 34ff 	mov.w	r4, #4294967295
 800b80c:	4620      	mov	r0, r4
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	20000dd0 	.word	0x20000dd0

0800b814 <_malloc_r>:
 800b814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b818:	1ccd      	adds	r5, r1, #3
 800b81a:	f025 0503 	bic.w	r5, r5, #3
 800b81e:	3508      	adds	r5, #8
 800b820:	2d0c      	cmp	r5, #12
 800b822:	bf38      	it	cc
 800b824:	250c      	movcc	r5, #12
 800b826:	2d00      	cmp	r5, #0
 800b828:	4607      	mov	r7, r0
 800b82a:	db01      	blt.n	800b830 <_malloc_r+0x1c>
 800b82c:	42a9      	cmp	r1, r5
 800b82e:	d905      	bls.n	800b83c <_malloc_r+0x28>
 800b830:	230c      	movs	r3, #12
 800b832:	2600      	movs	r6, #0
 800b834:	603b      	str	r3, [r7, #0]
 800b836:	4630      	mov	r0, r6
 800b838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b910 <_malloc_r+0xfc>
 800b840:	f000 f868 	bl	800b914 <__malloc_lock>
 800b844:	f8d8 3000 	ldr.w	r3, [r8]
 800b848:	461c      	mov	r4, r3
 800b84a:	bb5c      	cbnz	r4, 800b8a4 <_malloc_r+0x90>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff ffc0 	bl	800b7d4 <sbrk_aligned>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	4604      	mov	r4, r0
 800b858:	d155      	bne.n	800b906 <_malloc_r+0xf2>
 800b85a:	f8d8 4000 	ldr.w	r4, [r8]
 800b85e:	4626      	mov	r6, r4
 800b860:	2e00      	cmp	r6, #0
 800b862:	d145      	bne.n	800b8f0 <_malloc_r+0xdc>
 800b864:	2c00      	cmp	r4, #0
 800b866:	d048      	beq.n	800b8fa <_malloc_r+0xe6>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	4631      	mov	r1, r6
 800b86c:	4638      	mov	r0, r7
 800b86e:	eb04 0903 	add.w	r9, r4, r3
 800b872:	f000 f8c5 	bl	800ba00 <_sbrk_r>
 800b876:	4581      	cmp	r9, r0
 800b878:	d13f      	bne.n	800b8fa <_malloc_r+0xe6>
 800b87a:	6821      	ldr	r1, [r4, #0]
 800b87c:	4638      	mov	r0, r7
 800b87e:	1a6d      	subs	r5, r5, r1
 800b880:	4629      	mov	r1, r5
 800b882:	f7ff ffa7 	bl	800b7d4 <sbrk_aligned>
 800b886:	3001      	adds	r0, #1
 800b888:	d037      	beq.n	800b8fa <_malloc_r+0xe6>
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	442b      	add	r3, r5
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	f8d8 3000 	ldr.w	r3, [r8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d038      	beq.n	800b90a <_malloc_r+0xf6>
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	42a2      	cmp	r2, r4
 800b89c:	d12b      	bne.n	800b8f6 <_malloc_r+0xe2>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	605a      	str	r2, [r3, #4]
 800b8a2:	e00f      	b.n	800b8c4 <_malloc_r+0xb0>
 800b8a4:	6822      	ldr	r2, [r4, #0]
 800b8a6:	1b52      	subs	r2, r2, r5
 800b8a8:	d41f      	bmi.n	800b8ea <_malloc_r+0xd6>
 800b8aa:	2a0b      	cmp	r2, #11
 800b8ac:	d917      	bls.n	800b8de <_malloc_r+0xca>
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	6025      	str	r5, [r4, #0]
 800b8b4:	bf18      	it	ne
 800b8b6:	6059      	strne	r1, [r3, #4]
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	bf08      	it	eq
 800b8bc:	f8c8 1000 	streq.w	r1, [r8]
 800b8c0:	5162      	str	r2, [r4, r5]
 800b8c2:	604b      	str	r3, [r1, #4]
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f104 060b 	add.w	r6, r4, #11
 800b8ca:	f000 f829 	bl	800b920 <__malloc_unlock>
 800b8ce:	f026 0607 	bic.w	r6, r6, #7
 800b8d2:	1d23      	adds	r3, r4, #4
 800b8d4:	1af2      	subs	r2, r6, r3
 800b8d6:	d0ae      	beq.n	800b836 <_malloc_r+0x22>
 800b8d8:	1b9b      	subs	r3, r3, r6
 800b8da:	50a3      	str	r3, [r4, r2]
 800b8dc:	e7ab      	b.n	800b836 <_malloc_r+0x22>
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	6862      	ldr	r2, [r4, #4]
 800b8e2:	d1dd      	bne.n	800b8a0 <_malloc_r+0x8c>
 800b8e4:	f8c8 2000 	str.w	r2, [r8]
 800b8e8:	e7ec      	b.n	800b8c4 <_malloc_r+0xb0>
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	6864      	ldr	r4, [r4, #4]
 800b8ee:	e7ac      	b.n	800b84a <_malloc_r+0x36>
 800b8f0:	4634      	mov	r4, r6
 800b8f2:	6876      	ldr	r6, [r6, #4]
 800b8f4:	e7b4      	b.n	800b860 <_malloc_r+0x4c>
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	e7cc      	b.n	800b894 <_malloc_r+0x80>
 800b8fa:	230c      	movs	r3, #12
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	f000 f80e 	bl	800b920 <__malloc_unlock>
 800b904:	e797      	b.n	800b836 <_malloc_r+0x22>
 800b906:	6025      	str	r5, [r4, #0]
 800b908:	e7dc      	b.n	800b8c4 <_malloc_r+0xb0>
 800b90a:	605b      	str	r3, [r3, #4]
 800b90c:	deff      	udf	#255	; 0xff
 800b90e:	bf00      	nop
 800b910:	20000dcc 	.word	0x20000dcc

0800b914 <__malloc_lock>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__malloc_lock+0x8>)
 800b916:	f000 b8ad 	b.w	800ba74 <__retarget_lock_acquire_recursive>
 800b91a:	bf00      	nop
 800b91c:	20000f10 	.word	0x20000f10

0800b920 <__malloc_unlock>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__malloc_unlock+0x8>)
 800b922:	f000 b8a8 	b.w	800ba76 <__retarget_lock_release_recursive>
 800b926:	bf00      	nop
 800b928:	20000f10 	.word	0x20000f10

0800b92c <__utoa>:
 800b92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b92e:	b08b      	sub	sp, #44	; 0x2c
 800b930:	4605      	mov	r5, r0
 800b932:	460b      	mov	r3, r1
 800b934:	466e      	mov	r6, sp
 800b936:	4c1d      	ldr	r4, [pc, #116]	; (800b9ac <__utoa+0x80>)
 800b938:	f104 0c20 	add.w	ip, r4, #32
 800b93c:	4637      	mov	r7, r6
 800b93e:	6820      	ldr	r0, [r4, #0]
 800b940:	6861      	ldr	r1, [r4, #4]
 800b942:	3408      	adds	r4, #8
 800b944:	c703      	stmia	r7!, {r0, r1}
 800b946:	4564      	cmp	r4, ip
 800b948:	463e      	mov	r6, r7
 800b94a:	d1f7      	bne.n	800b93c <__utoa+0x10>
 800b94c:	7921      	ldrb	r1, [r4, #4]
 800b94e:	6820      	ldr	r0, [r4, #0]
 800b950:	7139      	strb	r1, [r7, #4]
 800b952:	1e91      	subs	r1, r2, #2
 800b954:	2922      	cmp	r1, #34	; 0x22
 800b956:	6038      	str	r0, [r7, #0]
 800b958:	f04f 0100 	mov.w	r1, #0
 800b95c:	d904      	bls.n	800b968 <__utoa+0x3c>
 800b95e:	7019      	strb	r1, [r3, #0]
 800b960:	460b      	mov	r3, r1
 800b962:	4618      	mov	r0, r3
 800b964:	b00b      	add	sp, #44	; 0x2c
 800b966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b968:	1e58      	subs	r0, r3, #1
 800b96a:	4684      	mov	ip, r0
 800b96c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b970:	fb02 5617 	mls	r6, r2, r7, r5
 800b974:	3628      	adds	r6, #40	; 0x28
 800b976:	446e      	add	r6, sp
 800b978:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b97c:	460c      	mov	r4, r1
 800b97e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b982:	462e      	mov	r6, r5
 800b984:	42b2      	cmp	r2, r6
 800b986:	463d      	mov	r5, r7
 800b988:	f101 0101 	add.w	r1, r1, #1
 800b98c:	d9ee      	bls.n	800b96c <__utoa+0x40>
 800b98e:	2200      	movs	r2, #0
 800b990:	545a      	strb	r2, [r3, r1]
 800b992:	1919      	adds	r1, r3, r4
 800b994:	1aa5      	subs	r5, r4, r2
 800b996:	42aa      	cmp	r2, r5
 800b998:	dae3      	bge.n	800b962 <__utoa+0x36>
 800b99a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b99e:	780e      	ldrb	r6, [r1, #0]
 800b9a0:	3201      	adds	r2, #1
 800b9a2:	7006      	strb	r6, [r0, #0]
 800b9a4:	f801 5901 	strb.w	r5, [r1], #-1
 800b9a8:	e7f4      	b.n	800b994 <__utoa+0x68>
 800b9aa:	bf00      	nop
 800b9ac:	0800cf72 	.word	0x0800cf72

0800b9b0 <siprintf>:
 800b9b0:	b40e      	push	{r1, r2, r3}
 800b9b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9b6:	b500      	push	{lr}
 800b9b8:	b09c      	sub	sp, #112	; 0x70
 800b9ba:	ab1d      	add	r3, sp, #116	; 0x74
 800b9bc:	9002      	str	r0, [sp, #8]
 800b9be:	9006      	str	r0, [sp, #24]
 800b9c0:	9107      	str	r1, [sp, #28]
 800b9c2:	9104      	str	r1, [sp, #16]
 800b9c4:	4808      	ldr	r0, [pc, #32]	; (800b9e8 <siprintf+0x38>)
 800b9c6:	4909      	ldr	r1, [pc, #36]	; (800b9ec <siprintf+0x3c>)
 800b9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9cc:	9105      	str	r1, [sp, #20]
 800b9ce:	6800      	ldr	r0, [r0, #0]
 800b9d0:	a902      	add	r1, sp, #8
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	f000 f8fa 	bl	800bbcc <_svfiprintf_r>
 800b9d8:	2200      	movs	r2, #0
 800b9da:	9b02      	ldr	r3, [sp, #8]
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	b01c      	add	sp, #112	; 0x70
 800b9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e4:	b003      	add	sp, #12
 800b9e6:	4770      	bx	lr
 800b9e8:	2000099c 	.word	0x2000099c
 800b9ec:	ffff0208 	.word	0xffff0208

0800b9f0 <memset>:
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4402      	add	r2, r0
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d100      	bne.n	800b9fa <memset+0xa>
 800b9f8:	4770      	bx	lr
 800b9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b9fe:	e7f9      	b.n	800b9f4 <memset+0x4>

0800ba00 <_sbrk_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	2300      	movs	r3, #0
 800ba04:	4d05      	ldr	r5, [pc, #20]	; (800ba1c <_sbrk_r+0x1c>)
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	f7fc f818 	bl	8007a40 <_sbrk>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_sbrk_r+0x1a>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_sbrk_r+0x1a>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	20000f0c 	.word	0x20000f0c

0800ba20 <__errno>:
 800ba20:	4b01      	ldr	r3, [pc, #4]	; (800ba28 <__errno+0x8>)
 800ba22:	6818      	ldr	r0, [r3, #0]
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	2000099c 	.word	0x2000099c

0800ba2c <__libc_init_array>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	2600      	movs	r6, #0
 800ba30:	4d0c      	ldr	r5, [pc, #48]	; (800ba64 <__libc_init_array+0x38>)
 800ba32:	4c0d      	ldr	r4, [pc, #52]	; (800ba68 <__libc_init_array+0x3c>)
 800ba34:	1b64      	subs	r4, r4, r5
 800ba36:	10a4      	asrs	r4, r4, #2
 800ba38:	42a6      	cmp	r6, r4
 800ba3a:	d109      	bne.n	800ba50 <__libc_init_array+0x24>
 800ba3c:	f000 fbc6 	bl	800c1cc <_init>
 800ba40:	2600      	movs	r6, #0
 800ba42:	4d0a      	ldr	r5, [pc, #40]	; (800ba6c <__libc_init_array+0x40>)
 800ba44:	4c0a      	ldr	r4, [pc, #40]	; (800ba70 <__libc_init_array+0x44>)
 800ba46:	1b64      	subs	r4, r4, r5
 800ba48:	10a4      	asrs	r4, r4, #2
 800ba4a:	42a6      	cmp	r6, r4
 800ba4c:	d105      	bne.n	800ba5a <__libc_init_array+0x2e>
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}
 800ba50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba54:	4798      	blx	r3
 800ba56:	3601      	adds	r6, #1
 800ba58:	e7ee      	b.n	800ba38 <__libc_init_array+0xc>
 800ba5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba5e:	4798      	blx	r3
 800ba60:	3601      	adds	r6, #1
 800ba62:	e7f2      	b.n	800ba4a <__libc_init_array+0x1e>
 800ba64:	0800cfcc 	.word	0x0800cfcc
 800ba68:	0800cfcc 	.word	0x0800cfcc
 800ba6c:	0800cfcc 	.word	0x0800cfcc
 800ba70:	0800cfd0 	.word	0x0800cfd0

0800ba74 <__retarget_lock_acquire_recursive>:
 800ba74:	4770      	bx	lr

0800ba76 <__retarget_lock_release_recursive>:
 800ba76:	4770      	bx	lr

0800ba78 <strcpy>:
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba7e:	f803 2b01 	strb.w	r2, [r3], #1
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	d1f9      	bne.n	800ba7a <strcpy+0x2>
 800ba86:	4770      	bx	lr

0800ba88 <_free_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	d040      	beq.n	800bb12 <_free_r+0x8a>
 800ba90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba94:	1f0c      	subs	r4, r1, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	bfb8      	it	lt
 800ba9a:	18e4      	addlt	r4, r4, r3
 800ba9c:	f7ff ff3a 	bl	800b914 <__malloc_lock>
 800baa0:	4a1c      	ldr	r2, [pc, #112]	; (800bb14 <_free_r+0x8c>)
 800baa2:	6813      	ldr	r3, [r2, #0]
 800baa4:	b933      	cbnz	r3, 800bab4 <_free_r+0x2c>
 800baa6:	6063      	str	r3, [r4, #4]
 800baa8:	6014      	str	r4, [r2, #0]
 800baaa:	4628      	mov	r0, r5
 800baac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab0:	f7ff bf36 	b.w	800b920 <__malloc_unlock>
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	d908      	bls.n	800baca <_free_r+0x42>
 800bab8:	6820      	ldr	r0, [r4, #0]
 800baba:	1821      	adds	r1, r4, r0
 800babc:	428b      	cmp	r3, r1
 800babe:	bf01      	itttt	eq
 800bac0:	6819      	ldreq	r1, [r3, #0]
 800bac2:	685b      	ldreq	r3, [r3, #4]
 800bac4:	1809      	addeq	r1, r1, r0
 800bac6:	6021      	streq	r1, [r4, #0]
 800bac8:	e7ed      	b.n	800baa6 <_free_r+0x1e>
 800baca:	461a      	mov	r2, r3
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	b10b      	cbz	r3, 800bad4 <_free_r+0x4c>
 800bad0:	42a3      	cmp	r3, r4
 800bad2:	d9fa      	bls.n	800baca <_free_r+0x42>
 800bad4:	6811      	ldr	r1, [r2, #0]
 800bad6:	1850      	adds	r0, r2, r1
 800bad8:	42a0      	cmp	r0, r4
 800bada:	d10b      	bne.n	800baf4 <_free_r+0x6c>
 800badc:	6820      	ldr	r0, [r4, #0]
 800bade:	4401      	add	r1, r0
 800bae0:	1850      	adds	r0, r2, r1
 800bae2:	4283      	cmp	r3, r0
 800bae4:	6011      	str	r1, [r2, #0]
 800bae6:	d1e0      	bne.n	800baaa <_free_r+0x22>
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	4408      	add	r0, r1
 800baee:	6010      	str	r0, [r2, #0]
 800baf0:	6053      	str	r3, [r2, #4]
 800baf2:	e7da      	b.n	800baaa <_free_r+0x22>
 800baf4:	d902      	bls.n	800bafc <_free_r+0x74>
 800baf6:	230c      	movs	r3, #12
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	e7d6      	b.n	800baaa <_free_r+0x22>
 800bafc:	6820      	ldr	r0, [r4, #0]
 800bafe:	1821      	adds	r1, r4, r0
 800bb00:	428b      	cmp	r3, r1
 800bb02:	bf01      	itttt	eq
 800bb04:	6819      	ldreq	r1, [r3, #0]
 800bb06:	685b      	ldreq	r3, [r3, #4]
 800bb08:	1809      	addeq	r1, r1, r0
 800bb0a:	6021      	streq	r1, [r4, #0]
 800bb0c:	6063      	str	r3, [r4, #4]
 800bb0e:	6054      	str	r4, [r2, #4]
 800bb10:	e7cb      	b.n	800baaa <_free_r+0x22>
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	20000dcc 	.word	0x20000dcc

0800bb18 <__ssputs_r>:
 800bb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb1c:	461f      	mov	r7, r3
 800bb1e:	688e      	ldr	r6, [r1, #8]
 800bb20:	4682      	mov	sl, r0
 800bb22:	42be      	cmp	r6, r7
 800bb24:	460c      	mov	r4, r1
 800bb26:	4690      	mov	r8, r2
 800bb28:	680b      	ldr	r3, [r1, #0]
 800bb2a:	d82c      	bhi.n	800bb86 <__ssputs_r+0x6e>
 800bb2c:	898a      	ldrh	r2, [r1, #12]
 800bb2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb32:	d026      	beq.n	800bb82 <__ssputs_r+0x6a>
 800bb34:	6965      	ldr	r5, [r4, #20]
 800bb36:	6909      	ldr	r1, [r1, #16]
 800bb38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb3c:	eba3 0901 	sub.w	r9, r3, r1
 800bb40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb44:	1c7b      	adds	r3, r7, #1
 800bb46:	444b      	add	r3, r9
 800bb48:	106d      	asrs	r5, r5, #1
 800bb4a:	429d      	cmp	r5, r3
 800bb4c:	bf38      	it	cc
 800bb4e:	461d      	movcc	r5, r3
 800bb50:	0553      	lsls	r3, r2, #21
 800bb52:	d527      	bpl.n	800bba4 <__ssputs_r+0x8c>
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7ff fe5d 	bl	800b814 <_malloc_r>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	b360      	cbz	r0, 800bbb8 <__ssputs_r+0xa0>
 800bb5e:	464a      	mov	r2, r9
 800bb60:	6921      	ldr	r1, [r4, #16]
 800bb62:	f000 faed 	bl	800c140 <memcpy>
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	6126      	str	r6, [r4, #16]
 800bb74:	444e      	add	r6, r9
 800bb76:	6026      	str	r6, [r4, #0]
 800bb78:	463e      	mov	r6, r7
 800bb7a:	6165      	str	r5, [r4, #20]
 800bb7c:	eba5 0509 	sub.w	r5, r5, r9
 800bb80:	60a5      	str	r5, [r4, #8]
 800bb82:	42be      	cmp	r6, r7
 800bb84:	d900      	bls.n	800bb88 <__ssputs_r+0x70>
 800bb86:	463e      	mov	r6, r7
 800bb88:	4632      	mov	r2, r6
 800bb8a:	4641      	mov	r1, r8
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	f000 faaf 	bl	800c0f0 <memmove>
 800bb92:	2000      	movs	r0, #0
 800bb94:	68a3      	ldr	r3, [r4, #8]
 800bb96:	1b9b      	subs	r3, r3, r6
 800bb98:	60a3      	str	r3, [r4, #8]
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	4433      	add	r3, r6
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba4:	462a      	mov	r2, r5
 800bba6:	f000 fad9 	bl	800c15c <_realloc_r>
 800bbaa:	4606      	mov	r6, r0
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d1e0      	bne.n	800bb72 <__ssputs_r+0x5a>
 800bbb0:	4650      	mov	r0, sl
 800bbb2:	6921      	ldr	r1, [r4, #16]
 800bbb4:	f7ff ff68 	bl	800ba88 <_free_r>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	f8ca 3000 	str.w	r3, [sl]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7e9      	b.n	800bba0 <__ssputs_r+0x88>

0800bbcc <_svfiprintf_r>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	4698      	mov	r8, r3
 800bbd2:	898b      	ldrh	r3, [r1, #12]
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	061b      	lsls	r3, r3, #24
 800bbd8:	460d      	mov	r5, r1
 800bbda:	4614      	mov	r4, r2
 800bbdc:	b09d      	sub	sp, #116	; 0x74
 800bbde:	d50e      	bpl.n	800bbfe <_svfiprintf_r+0x32>
 800bbe0:	690b      	ldr	r3, [r1, #16]
 800bbe2:	b963      	cbnz	r3, 800bbfe <_svfiprintf_r+0x32>
 800bbe4:	2140      	movs	r1, #64	; 0x40
 800bbe6:	f7ff fe15 	bl	800b814 <_malloc_r>
 800bbea:	6028      	str	r0, [r5, #0]
 800bbec:	6128      	str	r0, [r5, #16]
 800bbee:	b920      	cbnz	r0, 800bbfa <_svfiprintf_r+0x2e>
 800bbf0:	230c      	movs	r3, #12
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e0d0      	b.n	800bd9c <_svfiprintf_r+0x1d0>
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	616b      	str	r3, [r5, #20]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9309      	str	r3, [sp, #36]	; 0x24
 800bc02:	2320      	movs	r3, #32
 800bc04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc08:	2330      	movs	r3, #48	; 0x30
 800bc0a:	f04f 0901 	mov.w	r9, #1
 800bc0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc12:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bdb4 <_svfiprintf_r+0x1e8>
 800bc16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc1a:	4623      	mov	r3, r4
 800bc1c:	469a      	mov	sl, r3
 800bc1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc22:	b10a      	cbz	r2, 800bc28 <_svfiprintf_r+0x5c>
 800bc24:	2a25      	cmp	r2, #37	; 0x25
 800bc26:	d1f9      	bne.n	800bc1c <_svfiprintf_r+0x50>
 800bc28:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2c:	d00b      	beq.n	800bc46 <_svfiprintf_r+0x7a>
 800bc2e:	465b      	mov	r3, fp
 800bc30:	4622      	mov	r2, r4
 800bc32:	4629      	mov	r1, r5
 800bc34:	4638      	mov	r0, r7
 800bc36:	f7ff ff6f 	bl	800bb18 <__ssputs_r>
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f000 80a9 	beq.w	800bd92 <_svfiprintf_r+0x1c6>
 800bc40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc42:	445a      	add	r2, fp
 800bc44:	9209      	str	r2, [sp, #36]	; 0x24
 800bc46:	f89a 3000 	ldrb.w	r3, [sl]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 80a1 	beq.w	800bd92 <_svfiprintf_r+0x1c6>
 800bc50:	2300      	movs	r3, #0
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc5a:	f10a 0a01 	add.w	sl, sl, #1
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	9307      	str	r3, [sp, #28]
 800bc62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc66:	931a      	str	r3, [sp, #104]	; 0x68
 800bc68:	4654      	mov	r4, sl
 800bc6a:	2205      	movs	r2, #5
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	4850      	ldr	r0, [pc, #320]	; (800bdb4 <_svfiprintf_r+0x1e8>)
 800bc72:	f000 fa57 	bl	800c124 <memchr>
 800bc76:	9a04      	ldr	r2, [sp, #16]
 800bc78:	b9d8      	cbnz	r0, 800bcb2 <_svfiprintf_r+0xe6>
 800bc7a:	06d0      	lsls	r0, r2, #27
 800bc7c:	bf44      	itt	mi
 800bc7e:	2320      	movmi	r3, #32
 800bc80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc84:	0711      	lsls	r1, r2, #28
 800bc86:	bf44      	itt	mi
 800bc88:	232b      	movmi	r3, #43	; 0x2b
 800bc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc92:	2b2a      	cmp	r3, #42	; 0x2a
 800bc94:	d015      	beq.n	800bcc2 <_svfiprintf_r+0xf6>
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	9a07      	ldr	r2, [sp, #28]
 800bca0:	4621      	mov	r1, r4
 800bca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca6:	3b30      	subs	r3, #48	; 0x30
 800bca8:	2b09      	cmp	r3, #9
 800bcaa:	d94d      	bls.n	800bd48 <_svfiprintf_r+0x17c>
 800bcac:	b1b0      	cbz	r0, 800bcdc <_svfiprintf_r+0x110>
 800bcae:	9207      	str	r2, [sp, #28]
 800bcb0:	e014      	b.n	800bcdc <_svfiprintf_r+0x110>
 800bcb2:	eba0 0308 	sub.w	r3, r0, r8
 800bcb6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	e7d2      	b.n	800bc68 <_svfiprintf_r+0x9c>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	1d19      	adds	r1, r3, #4
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	9103      	str	r1, [sp, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfbb      	ittet	lt
 800bcce:	425b      	neglt	r3, r3
 800bcd0:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd4:	9307      	strge	r3, [sp, #28]
 800bcd6:	9307      	strlt	r3, [sp, #28]
 800bcd8:	bfb8      	it	lt
 800bcda:	9204      	strlt	r2, [sp, #16]
 800bcdc:	7823      	ldrb	r3, [r4, #0]
 800bcde:	2b2e      	cmp	r3, #46	; 0x2e
 800bce0:	d10c      	bne.n	800bcfc <_svfiprintf_r+0x130>
 800bce2:	7863      	ldrb	r3, [r4, #1]
 800bce4:	2b2a      	cmp	r3, #42	; 0x2a
 800bce6:	d134      	bne.n	800bd52 <_svfiprintf_r+0x186>
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	3402      	adds	r4, #2
 800bcec:	1d1a      	adds	r2, r3, #4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	9203      	str	r2, [sp, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfb8      	it	lt
 800bcf6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcfa:	9305      	str	r3, [sp, #20]
 800bcfc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bdb8 <_svfiprintf_r+0x1ec>
 800bd00:	2203      	movs	r2, #3
 800bd02:	4650      	mov	r0, sl
 800bd04:	7821      	ldrb	r1, [r4, #0]
 800bd06:	f000 fa0d 	bl	800c124 <memchr>
 800bd0a:	b138      	cbz	r0, 800bd1c <_svfiprintf_r+0x150>
 800bd0c:	2240      	movs	r2, #64	; 0x40
 800bd0e:	9b04      	ldr	r3, [sp, #16]
 800bd10:	eba0 000a 	sub.w	r0, r0, sl
 800bd14:	4082      	lsls	r2, r0
 800bd16:	4313      	orrs	r3, r2
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd20:	2206      	movs	r2, #6
 800bd22:	4826      	ldr	r0, [pc, #152]	; (800bdbc <_svfiprintf_r+0x1f0>)
 800bd24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd28:	f000 f9fc 	bl	800c124 <memchr>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d038      	beq.n	800bda2 <_svfiprintf_r+0x1d6>
 800bd30:	4b23      	ldr	r3, [pc, #140]	; (800bdc0 <_svfiprintf_r+0x1f4>)
 800bd32:	bb1b      	cbnz	r3, 800bd7c <_svfiprintf_r+0x1b0>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3307      	adds	r3, #7
 800bd38:	f023 0307 	bic.w	r3, r3, #7
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	4433      	add	r3, r6
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	e768      	b.n	800bc1a <_svfiprintf_r+0x4e>
 800bd48:	460c      	mov	r4, r1
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd50:	e7a6      	b.n	800bca0 <_svfiprintf_r+0xd4>
 800bd52:	2300      	movs	r3, #0
 800bd54:	f04f 0c0a 	mov.w	ip, #10
 800bd58:	4619      	mov	r1, r3
 800bd5a:	3401      	adds	r4, #1
 800bd5c:	9305      	str	r3, [sp, #20]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	3a30      	subs	r2, #48	; 0x30
 800bd66:	2a09      	cmp	r2, #9
 800bd68:	d903      	bls.n	800bd72 <_svfiprintf_r+0x1a6>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c6      	beq.n	800bcfc <_svfiprintf_r+0x130>
 800bd6e:	9105      	str	r1, [sp, #20]
 800bd70:	e7c4      	b.n	800bcfc <_svfiprintf_r+0x130>
 800bd72:	4604      	mov	r4, r0
 800bd74:	2301      	movs	r3, #1
 800bd76:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7a:	e7f0      	b.n	800bd5e <_svfiprintf_r+0x192>
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	462a      	mov	r2, r5
 800bd82:	4638      	mov	r0, r7
 800bd84:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <_svfiprintf_r+0x1f8>)
 800bd86:	a904      	add	r1, sp, #16
 800bd88:	f3af 8000 	nop.w
 800bd8c:	1c42      	adds	r2, r0, #1
 800bd8e:	4606      	mov	r6, r0
 800bd90:	d1d6      	bne.n	800bd40 <_svfiprintf_r+0x174>
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	065b      	lsls	r3, r3, #25
 800bd96:	f53f af2d 	bmi.w	800bbf4 <_svfiprintf_r+0x28>
 800bd9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9c:	b01d      	add	sp, #116	; 0x74
 800bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4638      	mov	r0, r7
 800bdaa:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <_svfiprintf_r+0x1f8>)
 800bdac:	a904      	add	r1, sp, #16
 800bdae:	f000 f87d 	bl	800beac <_printf_i>
 800bdb2:	e7eb      	b.n	800bd8c <_svfiprintf_r+0x1c0>
 800bdb4:	0800cf97 	.word	0x0800cf97
 800bdb8:	0800cf9d 	.word	0x0800cf9d
 800bdbc:	0800cfa1 	.word	0x0800cfa1
 800bdc0:	00000000 	.word	0x00000000
 800bdc4:	0800bb19 	.word	0x0800bb19

0800bdc8 <_printf_common>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	4616      	mov	r6, r2
 800bdce:	4699      	mov	r9, r3
 800bdd0:	688a      	ldr	r2, [r1, #8]
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	4607      	mov	r7, r0
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bfb8      	it	lt
 800bdda:	4613      	movlt	r3, r2
 800bddc:	6033      	str	r3, [r6, #0]
 800bdde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bde2:	460c      	mov	r4, r1
 800bde4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bde8:	b10a      	cbz	r2, 800bdee <_printf_common+0x26>
 800bdea:	3301      	adds	r3, #1
 800bdec:	6033      	str	r3, [r6, #0]
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	0699      	lsls	r1, r3, #26
 800bdf2:	bf42      	ittt	mi
 800bdf4:	6833      	ldrmi	r3, [r6, #0]
 800bdf6:	3302      	addmi	r3, #2
 800bdf8:	6033      	strmi	r3, [r6, #0]
 800bdfa:	6825      	ldr	r5, [r4, #0]
 800bdfc:	f015 0506 	ands.w	r5, r5, #6
 800be00:	d106      	bne.n	800be10 <_printf_common+0x48>
 800be02:	f104 0a19 	add.w	sl, r4, #25
 800be06:	68e3      	ldr	r3, [r4, #12]
 800be08:	6832      	ldr	r2, [r6, #0]
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	42ab      	cmp	r3, r5
 800be0e:	dc2b      	bgt.n	800be68 <_printf_common+0xa0>
 800be10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be14:	1e13      	subs	r3, r2, #0
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	bf18      	it	ne
 800be1a:	2301      	movne	r3, #1
 800be1c:	0692      	lsls	r2, r2, #26
 800be1e:	d430      	bmi.n	800be82 <_printf_common+0xba>
 800be20:	4649      	mov	r1, r9
 800be22:	4638      	mov	r0, r7
 800be24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be28:	47c0      	blx	r8
 800be2a:	3001      	adds	r0, #1
 800be2c:	d023      	beq.n	800be76 <_printf_common+0xae>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	6922      	ldr	r2, [r4, #16]
 800be32:	f003 0306 	and.w	r3, r3, #6
 800be36:	2b04      	cmp	r3, #4
 800be38:	bf14      	ite	ne
 800be3a:	2500      	movne	r5, #0
 800be3c:	6833      	ldreq	r3, [r6, #0]
 800be3e:	f04f 0600 	mov.w	r6, #0
 800be42:	bf08      	it	eq
 800be44:	68e5      	ldreq	r5, [r4, #12]
 800be46:	f104 041a 	add.w	r4, r4, #26
 800be4a:	bf08      	it	eq
 800be4c:	1aed      	subeq	r5, r5, r3
 800be4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800be52:	bf08      	it	eq
 800be54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be58:	4293      	cmp	r3, r2
 800be5a:	bfc4      	itt	gt
 800be5c:	1a9b      	subgt	r3, r3, r2
 800be5e:	18ed      	addgt	r5, r5, r3
 800be60:	42b5      	cmp	r5, r6
 800be62:	d11a      	bne.n	800be9a <_printf_common+0xd2>
 800be64:	2000      	movs	r0, #0
 800be66:	e008      	b.n	800be7a <_printf_common+0xb2>
 800be68:	2301      	movs	r3, #1
 800be6a:	4652      	mov	r2, sl
 800be6c:	4649      	mov	r1, r9
 800be6e:	4638      	mov	r0, r7
 800be70:	47c0      	blx	r8
 800be72:	3001      	adds	r0, #1
 800be74:	d103      	bne.n	800be7e <_printf_common+0xb6>
 800be76:	f04f 30ff 	mov.w	r0, #4294967295
 800be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7e:	3501      	adds	r5, #1
 800be80:	e7c1      	b.n	800be06 <_printf_common+0x3e>
 800be82:	2030      	movs	r0, #48	; 0x30
 800be84:	18e1      	adds	r1, r4, r3
 800be86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be90:	4422      	add	r2, r4
 800be92:	3302      	adds	r3, #2
 800be94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be98:	e7c2      	b.n	800be20 <_printf_common+0x58>
 800be9a:	2301      	movs	r3, #1
 800be9c:	4622      	mov	r2, r4
 800be9e:	4649      	mov	r1, r9
 800bea0:	4638      	mov	r0, r7
 800bea2:	47c0      	blx	r8
 800bea4:	3001      	adds	r0, #1
 800bea6:	d0e6      	beq.n	800be76 <_printf_common+0xae>
 800bea8:	3601      	adds	r6, #1
 800beaa:	e7d9      	b.n	800be60 <_printf_common+0x98>

0800beac <_printf_i>:
 800beac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beb0:	7e0f      	ldrb	r7, [r1, #24]
 800beb2:	4691      	mov	r9, r2
 800beb4:	2f78      	cmp	r7, #120	; 0x78
 800beb6:	4680      	mov	r8, r0
 800beb8:	460c      	mov	r4, r1
 800beba:	469a      	mov	sl, r3
 800bebc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bec2:	d807      	bhi.n	800bed4 <_printf_i+0x28>
 800bec4:	2f62      	cmp	r7, #98	; 0x62
 800bec6:	d80a      	bhi.n	800bede <_printf_i+0x32>
 800bec8:	2f00      	cmp	r7, #0
 800beca:	f000 80d5 	beq.w	800c078 <_printf_i+0x1cc>
 800bece:	2f58      	cmp	r7, #88	; 0x58
 800bed0:	f000 80c1 	beq.w	800c056 <_printf_i+0x1aa>
 800bed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bedc:	e03a      	b.n	800bf54 <_printf_i+0xa8>
 800bede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bee2:	2b15      	cmp	r3, #21
 800bee4:	d8f6      	bhi.n	800bed4 <_printf_i+0x28>
 800bee6:	a101      	add	r1, pc, #4	; (adr r1, 800beec <_printf_i+0x40>)
 800bee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800beec:	0800bf45 	.word	0x0800bf45
 800bef0:	0800bf59 	.word	0x0800bf59
 800bef4:	0800bed5 	.word	0x0800bed5
 800bef8:	0800bed5 	.word	0x0800bed5
 800befc:	0800bed5 	.word	0x0800bed5
 800bf00:	0800bed5 	.word	0x0800bed5
 800bf04:	0800bf59 	.word	0x0800bf59
 800bf08:	0800bed5 	.word	0x0800bed5
 800bf0c:	0800bed5 	.word	0x0800bed5
 800bf10:	0800bed5 	.word	0x0800bed5
 800bf14:	0800bed5 	.word	0x0800bed5
 800bf18:	0800c05f 	.word	0x0800c05f
 800bf1c:	0800bf85 	.word	0x0800bf85
 800bf20:	0800c019 	.word	0x0800c019
 800bf24:	0800bed5 	.word	0x0800bed5
 800bf28:	0800bed5 	.word	0x0800bed5
 800bf2c:	0800c081 	.word	0x0800c081
 800bf30:	0800bed5 	.word	0x0800bed5
 800bf34:	0800bf85 	.word	0x0800bf85
 800bf38:	0800bed5 	.word	0x0800bed5
 800bf3c:	0800bed5 	.word	0x0800bed5
 800bf40:	0800c021 	.word	0x0800c021
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	1d1a      	adds	r2, r3, #4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	602a      	str	r2, [r5, #0]
 800bf4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf54:	2301      	movs	r3, #1
 800bf56:	e0a0      	b.n	800c09a <_printf_i+0x1ee>
 800bf58:	6820      	ldr	r0, [r4, #0]
 800bf5a:	682b      	ldr	r3, [r5, #0]
 800bf5c:	0607      	lsls	r7, r0, #24
 800bf5e:	f103 0104 	add.w	r1, r3, #4
 800bf62:	6029      	str	r1, [r5, #0]
 800bf64:	d501      	bpl.n	800bf6a <_printf_i+0xbe>
 800bf66:	681e      	ldr	r6, [r3, #0]
 800bf68:	e003      	b.n	800bf72 <_printf_i+0xc6>
 800bf6a:	0646      	lsls	r6, r0, #25
 800bf6c:	d5fb      	bpl.n	800bf66 <_printf_i+0xba>
 800bf6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	da03      	bge.n	800bf7e <_printf_i+0xd2>
 800bf76:	232d      	movs	r3, #45	; 0x2d
 800bf78:	4276      	negs	r6, r6
 800bf7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf7e:	230a      	movs	r3, #10
 800bf80:	4859      	ldr	r0, [pc, #356]	; (800c0e8 <_printf_i+0x23c>)
 800bf82:	e012      	b.n	800bfaa <_printf_i+0xfe>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	6820      	ldr	r0, [r4, #0]
 800bf88:	1d19      	adds	r1, r3, #4
 800bf8a:	6029      	str	r1, [r5, #0]
 800bf8c:	0605      	lsls	r5, r0, #24
 800bf8e:	d501      	bpl.n	800bf94 <_printf_i+0xe8>
 800bf90:	681e      	ldr	r6, [r3, #0]
 800bf92:	e002      	b.n	800bf9a <_printf_i+0xee>
 800bf94:	0641      	lsls	r1, r0, #25
 800bf96:	d5fb      	bpl.n	800bf90 <_printf_i+0xe4>
 800bf98:	881e      	ldrh	r6, [r3, #0]
 800bf9a:	2f6f      	cmp	r7, #111	; 0x6f
 800bf9c:	bf0c      	ite	eq
 800bf9e:	2308      	moveq	r3, #8
 800bfa0:	230a      	movne	r3, #10
 800bfa2:	4851      	ldr	r0, [pc, #324]	; (800c0e8 <_printf_i+0x23c>)
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfaa:	6865      	ldr	r5, [r4, #4]
 800bfac:	2d00      	cmp	r5, #0
 800bfae:	bfa8      	it	ge
 800bfb0:	6821      	ldrge	r1, [r4, #0]
 800bfb2:	60a5      	str	r5, [r4, #8]
 800bfb4:	bfa4      	itt	ge
 800bfb6:	f021 0104 	bicge.w	r1, r1, #4
 800bfba:	6021      	strge	r1, [r4, #0]
 800bfbc:	b90e      	cbnz	r6, 800bfc2 <_printf_i+0x116>
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	d04b      	beq.n	800c05a <_printf_i+0x1ae>
 800bfc2:	4615      	mov	r5, r2
 800bfc4:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfc8:	fb03 6711 	mls	r7, r3, r1, r6
 800bfcc:	5dc7      	ldrb	r7, [r0, r7]
 800bfce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfd2:	4637      	mov	r7, r6
 800bfd4:	42bb      	cmp	r3, r7
 800bfd6:	460e      	mov	r6, r1
 800bfd8:	d9f4      	bls.n	800bfc4 <_printf_i+0x118>
 800bfda:	2b08      	cmp	r3, #8
 800bfdc:	d10b      	bne.n	800bff6 <_printf_i+0x14a>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	07de      	lsls	r6, r3, #31
 800bfe2:	d508      	bpl.n	800bff6 <_printf_i+0x14a>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	6861      	ldr	r1, [r4, #4]
 800bfe8:	4299      	cmp	r1, r3
 800bfea:	bfde      	ittt	le
 800bfec:	2330      	movle	r3, #48	; 0x30
 800bfee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bff2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bff6:	1b52      	subs	r2, r2, r5
 800bff8:	6122      	str	r2, [r4, #16]
 800bffa:	464b      	mov	r3, r9
 800bffc:	4621      	mov	r1, r4
 800bffe:	4640      	mov	r0, r8
 800c000:	f8cd a000 	str.w	sl, [sp]
 800c004:	aa03      	add	r2, sp, #12
 800c006:	f7ff fedf 	bl	800bdc8 <_printf_common>
 800c00a:	3001      	adds	r0, #1
 800c00c:	d14a      	bne.n	800c0a4 <_printf_i+0x1f8>
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295
 800c012:	b004      	add	sp, #16
 800c014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	f043 0320 	orr.w	r3, r3, #32
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	2778      	movs	r7, #120	; 0x78
 800c022:	4832      	ldr	r0, [pc, #200]	; (800c0ec <_printf_i+0x240>)
 800c024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	6829      	ldr	r1, [r5, #0]
 800c02c:	061f      	lsls	r7, r3, #24
 800c02e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c032:	d402      	bmi.n	800c03a <_printf_i+0x18e>
 800c034:	065f      	lsls	r7, r3, #25
 800c036:	bf48      	it	mi
 800c038:	b2b6      	uxthmi	r6, r6
 800c03a:	07df      	lsls	r7, r3, #31
 800c03c:	bf48      	it	mi
 800c03e:	f043 0320 	orrmi.w	r3, r3, #32
 800c042:	6029      	str	r1, [r5, #0]
 800c044:	bf48      	it	mi
 800c046:	6023      	strmi	r3, [r4, #0]
 800c048:	b91e      	cbnz	r6, 800c052 <_printf_i+0x1a6>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	f023 0320 	bic.w	r3, r3, #32
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	2310      	movs	r3, #16
 800c054:	e7a6      	b.n	800bfa4 <_printf_i+0xf8>
 800c056:	4824      	ldr	r0, [pc, #144]	; (800c0e8 <_printf_i+0x23c>)
 800c058:	e7e4      	b.n	800c024 <_printf_i+0x178>
 800c05a:	4615      	mov	r5, r2
 800c05c:	e7bd      	b.n	800bfda <_printf_i+0x12e>
 800c05e:	682b      	ldr	r3, [r5, #0]
 800c060:	6826      	ldr	r6, [r4, #0]
 800c062:	1d18      	adds	r0, r3, #4
 800c064:	6961      	ldr	r1, [r4, #20]
 800c066:	6028      	str	r0, [r5, #0]
 800c068:	0635      	lsls	r5, r6, #24
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	d501      	bpl.n	800c072 <_printf_i+0x1c6>
 800c06e:	6019      	str	r1, [r3, #0]
 800c070:	e002      	b.n	800c078 <_printf_i+0x1cc>
 800c072:	0670      	lsls	r0, r6, #25
 800c074:	d5fb      	bpl.n	800c06e <_printf_i+0x1c2>
 800c076:	8019      	strh	r1, [r3, #0]
 800c078:	2300      	movs	r3, #0
 800c07a:	4615      	mov	r5, r2
 800c07c:	6123      	str	r3, [r4, #16]
 800c07e:	e7bc      	b.n	800bffa <_printf_i+0x14e>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	2100      	movs	r1, #0
 800c084:	1d1a      	adds	r2, r3, #4
 800c086:	602a      	str	r2, [r5, #0]
 800c088:	681d      	ldr	r5, [r3, #0]
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	4628      	mov	r0, r5
 800c08e:	f000 f849 	bl	800c124 <memchr>
 800c092:	b108      	cbz	r0, 800c098 <_printf_i+0x1ec>
 800c094:	1b40      	subs	r0, r0, r5
 800c096:	6060      	str	r0, [r4, #4]
 800c098:	6863      	ldr	r3, [r4, #4]
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	2300      	movs	r3, #0
 800c09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0a2:	e7aa      	b.n	800bffa <_printf_i+0x14e>
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	47d0      	blx	sl
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	d0ad      	beq.n	800c00e <_printf_i+0x162>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	079b      	lsls	r3, r3, #30
 800c0b6:	d413      	bmi.n	800c0e0 <_printf_i+0x234>
 800c0b8:	68e0      	ldr	r0, [r4, #12]
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	4298      	cmp	r0, r3
 800c0be:	bfb8      	it	lt
 800c0c0:	4618      	movlt	r0, r3
 800c0c2:	e7a6      	b.n	800c012 <_printf_i+0x166>
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	4632      	mov	r2, r6
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	47d0      	blx	sl
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	d09d      	beq.n	800c00e <_printf_i+0x162>
 800c0d2:	3501      	adds	r5, #1
 800c0d4:	68e3      	ldr	r3, [r4, #12]
 800c0d6:	9903      	ldr	r1, [sp, #12]
 800c0d8:	1a5b      	subs	r3, r3, r1
 800c0da:	42ab      	cmp	r3, r5
 800c0dc:	dcf2      	bgt.n	800c0c4 <_printf_i+0x218>
 800c0de:	e7eb      	b.n	800c0b8 <_printf_i+0x20c>
 800c0e0:	2500      	movs	r5, #0
 800c0e2:	f104 0619 	add.w	r6, r4, #25
 800c0e6:	e7f5      	b.n	800c0d4 <_printf_i+0x228>
 800c0e8:	0800cfa8 	.word	0x0800cfa8
 800c0ec:	0800cfb9 	.word	0x0800cfb9

0800c0f0 <memmove>:
 800c0f0:	4288      	cmp	r0, r1
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	eb01 0402 	add.w	r4, r1, r2
 800c0f8:	d902      	bls.n	800c100 <memmove+0x10>
 800c0fa:	4284      	cmp	r4, r0
 800c0fc:	4623      	mov	r3, r4
 800c0fe:	d807      	bhi.n	800c110 <memmove+0x20>
 800c100:	1e43      	subs	r3, r0, #1
 800c102:	42a1      	cmp	r1, r4
 800c104:	d008      	beq.n	800c118 <memmove+0x28>
 800c106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c10a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c10e:	e7f8      	b.n	800c102 <memmove+0x12>
 800c110:	4601      	mov	r1, r0
 800c112:	4402      	add	r2, r0
 800c114:	428a      	cmp	r2, r1
 800c116:	d100      	bne.n	800c11a <memmove+0x2a>
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c122:	e7f7      	b.n	800c114 <memmove+0x24>

0800c124 <memchr>:
 800c124:	4603      	mov	r3, r0
 800c126:	b510      	push	{r4, lr}
 800c128:	b2c9      	uxtb	r1, r1
 800c12a:	4402      	add	r2, r0
 800c12c:	4293      	cmp	r3, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	d101      	bne.n	800c136 <memchr+0x12>
 800c132:	2000      	movs	r0, #0
 800c134:	e003      	b.n	800c13e <memchr+0x1a>
 800c136:	7804      	ldrb	r4, [r0, #0]
 800c138:	3301      	adds	r3, #1
 800c13a:	428c      	cmp	r4, r1
 800c13c:	d1f6      	bne.n	800c12c <memchr+0x8>
 800c13e:	bd10      	pop	{r4, pc}

0800c140 <memcpy>:
 800c140:	440a      	add	r2, r1
 800c142:	4291      	cmp	r1, r2
 800c144:	f100 33ff 	add.w	r3, r0, #4294967295
 800c148:	d100      	bne.n	800c14c <memcpy+0xc>
 800c14a:	4770      	bx	lr
 800c14c:	b510      	push	{r4, lr}
 800c14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c152:	4291      	cmp	r1, r2
 800c154:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c158:	d1f9      	bne.n	800c14e <memcpy+0xe>
 800c15a:	bd10      	pop	{r4, pc}

0800c15c <_realloc_r>:
 800c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	4680      	mov	r8, r0
 800c162:	4614      	mov	r4, r2
 800c164:	460e      	mov	r6, r1
 800c166:	b921      	cbnz	r1, 800c172 <_realloc_r+0x16>
 800c168:	4611      	mov	r1, r2
 800c16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c16e:	f7ff bb51 	b.w	800b814 <_malloc_r>
 800c172:	b92a      	cbnz	r2, 800c180 <_realloc_r+0x24>
 800c174:	f7ff fc88 	bl	800ba88 <_free_r>
 800c178:	4625      	mov	r5, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	f000 f81b 	bl	800c1ba <_malloc_usable_size_r>
 800c184:	4284      	cmp	r4, r0
 800c186:	4607      	mov	r7, r0
 800c188:	d802      	bhi.n	800c190 <_realloc_r+0x34>
 800c18a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c18e:	d812      	bhi.n	800c1b6 <_realloc_r+0x5a>
 800c190:	4621      	mov	r1, r4
 800c192:	4640      	mov	r0, r8
 800c194:	f7ff fb3e 	bl	800b814 <_malloc_r>
 800c198:	4605      	mov	r5, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d0ed      	beq.n	800c17a <_realloc_r+0x1e>
 800c19e:	42bc      	cmp	r4, r7
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	bf28      	it	cs
 800c1a6:	463a      	movcs	r2, r7
 800c1a8:	f7ff ffca 	bl	800c140 <memcpy>
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	f7ff fc6a 	bl	800ba88 <_free_r>
 800c1b4:	e7e1      	b.n	800c17a <_realloc_r+0x1e>
 800c1b6:	4635      	mov	r5, r6
 800c1b8:	e7df      	b.n	800c17a <_realloc_r+0x1e>

0800c1ba <_malloc_usable_size_r>:
 800c1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1be:	1f18      	subs	r0, r3, #4
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bfbc      	itt	lt
 800c1c4:	580b      	ldrlt	r3, [r1, r0]
 800c1c6:	18c0      	addlt	r0, r0, r3
 800c1c8:	4770      	bx	lr
	...

0800c1cc <_init>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	bf00      	nop
 800c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	469e      	mov	lr, r3
 800c1d6:	4770      	bx	lr

0800c1d8 <_fini>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	bf00      	nop
 800c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1de:	bc08      	pop	{r3}
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	4770      	bx	lr
