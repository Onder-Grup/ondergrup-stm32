
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc68  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800ce4c  0800ce4c  0001ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de88  0800de88  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800de88  0800de88  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de88  0800de88  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de88  0800de88  0001de88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de8c  0800de8c  0001de8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800de90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000010c  0800df9c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800df9c  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178b1  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000354d  00000000  00000000  00037a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0003c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c64f  00000000  00000000  0003d05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0ad  00000000  00000000  000596ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee51  00000000  00000000  00075758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005210  00000000  00000000  001145ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001197bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce34 	.word	0x0800ce34

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800ce34 	.word	0x0800ce34

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc62 	bl	8009b18 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fada 	bl	8008810 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	200003ac 	.word	0x200003ac
 80004c0:	200001fd 	.word	0x200001fd
 80004c4:	20000225 	.word	0x20000225
 80004c8:	20000228 	.word	0x20000228
 80004cc:	20000229 	.word	0x20000229
 80004d0:	2000022a 	.word	0x2000022a
 80004d4:	2000022b 	.word	0x2000022b
 80004d8:	2000022c 	.word	0x2000022c
 80004dc:	2000022d 	.word	0x2000022d
 80004e0:	2000023d 	.word	0x2000023d
 80004e4:	2000022e 	.word	0x2000022e
 80004e8:	2000023e 	.word	0x2000023e
 80004ec:	2000022f 	.word	0x2000022f
 80004f0:	2000023f 	.word	0x2000023f
 80004f4:	20000232 	.word	0x20000232
 80004f8:	20000233 	.word	0x20000233
 80004fc:	20000234 	.word	0x20000234
 8000500:	20000235 	.word	0x20000235
 8000504:	20000236 	.word	0x20000236
 8000508:	20000237 	.word	0x20000237
 800050c:	20000238 	.word	0x20000238
 8000510:	20000239 	.word	0x20000239
 8000514:	2000023a 	.word	0x2000023a
 8000518:	2000023b 	.word	0x2000023b
 800051c:	2000023c 	.word	0x2000023c
 8000520:	20000240 	.word	0x20000240
 8000524:	20000242 	.word	0x20000242
 8000528:	20000220 	.word	0x20000220
 800052c:	20000221 	.word	0x20000221
 8000530:	20000222 	.word	0x20000222
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	20000223 	.word	0x20000223
 8000540:	20000245 	.word	0x20000245
 8000544:	20000243 	.word	0x20000243
 8000548:	20000231 	.word	0x20000231
 800054c:	20000244 	.word	0x20000244
 8000550:	20000230 	.word	0x20000230
 8000554:	20000246 	.word	0x20000246
 8000558:	20000247 	.word	0x20000247
 800055c:	20000248 	.word	0x20000248
 8000560:	20000249 	.word	0x20000249
 8000564:	2000024a 	.word	0x2000024a
 8000568:	2000024b 	.word	0x2000024b
 800056c:	2000024c 	.word	0x2000024c
 8000570:	2000024d 	.word	0x2000024d
 8000574:	2000024e 	.word	0x2000024e
 8000578:	2000024f 	.word	0x2000024f
 800057c:	200001fc 	.word	0x200001fc
	}

	if(kapi1AcSure>5) {
 8000580:	4b6f      	ldr	r3, [pc, #444]	; (8000740 <eepromKontrol+0x50c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6d      	ldr	r3, [pc, #436]	; (8000740 <eepromKontrol+0x50c>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6d      	ldr	r3, [pc, #436]	; (8000744 <eepromKontrol+0x510>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b6b      	ldr	r3, [pc, #428]	; (8000744 <eepromKontrol+0x510>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b6a      	ldr	r3, [pc, #424]	; (8000748 <eepromKontrol+0x514>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b68      	ldr	r3, [pc, #416]	; (8000748 <eepromKontrol+0x514>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b68      	ldr	r3, [pc, #416]	; (800074c <eepromKontrol+0x518>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b66      	ldr	r3, [pc, #408]	; (800074c <eepromKontrol+0x518>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b65      	ldr	r3, [pc, #404]	; (8000750 <eepromKontrol+0x51c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b63      	ldr	r3, [pc, #396]	; (8000750 <eepromKontrol+0x51c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b63      	ldr	r3, [pc, #396]	; (8000754 <eepromKontrol+0x520>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b61      	ldr	r3, [pc, #388]	; (8000754 <eepromKontrol+0x520>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <eepromKontrol+0x524>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5e      	ldr	r3, [pc, #376]	; (8000758 <eepromKontrol+0x524>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <eepromKontrol+0x528>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5c      	ldr	r3, [pc, #368]	; (800075c <eepromKontrol+0x528>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <eepromKontrol+0x52c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <eepromKontrol+0x52c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b59      	ldr	r3, [pc, #356]	; (8000764 <eepromKontrol+0x530>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b57      	ldr	r3, [pc, #348]	; (8000764 <eepromKontrol+0x530>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b56      	ldr	r3, [pc, #344]	; (8000768 <eepromKontrol+0x534>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <eepromKontrol+0x534>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b54      	ldr	r3, [pc, #336]	; (800076c <eepromKontrol+0x538>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <eepromKontrol+0x538>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <eepromKontrol+0x53c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <eepromKontrol+0x53c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <eepromKontrol+0x540>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <eepromKontrol+0x540>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <eepromKontrol+0x544>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <eepromKontrol+0x544>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b4a      	ldr	r3, [pc, #296]	; (800077c <eepromKontrol+0x548>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <eepromKontrol+0x548>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b47      	ldr	r3, [pc, #284]	; (8000780 <eepromKontrol+0x54c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <eepromKontrol+0x54c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b45      	ldr	r3, [pc, #276]	; (8000784 <eepromKontrol+0x550>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b43      	ldr	r3, [pc, #268]	; (8000784 <eepromKontrol+0x550>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <eepromKontrol+0x554>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b40      	ldr	r3, [pc, #256]	; (8000788 <eepromKontrol+0x554>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b40      	ldr	r3, [pc, #256]	; (800078c <eepromKontrol+0x558>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3e      	ldr	r3, [pc, #248]	; (800078c <eepromKontrol+0x558>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <eepromKontrol+0x55c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <eepromKontrol+0x55c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <eepromKontrol+0x560>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <eepromKontrol+0x560>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <eepromKontrol+0x564>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a38      	ldr	r2, [pc, #224]	; (800079c <eepromKontrol+0x568>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <eepromKontrol+0x56c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f89f 	bl	8008810 <HAL_Delay>
	memcpy(wifiSSIDLoc, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <eepromKontrol+0x570>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a31      	ldr	r2, [pc, #196]	; (800079c <eepromKontrol+0x568>)
 80006d8:	441a      	add	r2, r3
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <eepromKontrol+0x574>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	6855      	ldr	r5, [r2, #4]
 80006e0:	6894      	ldr	r4, [r2, #8]
 80006e2:	68d0      	ldr	r0, [r2, #12]
 80006e4:	6019      	str	r1, [r3, #0]
 80006e6:	605d      	str	r5, [r3, #4]
 80006e8:	609c      	str	r4, [r3, #8]
 80006ea:	60d8      	str	r0, [r3, #12]
 80006ec:	6911      	ldr	r1, [r2, #16]
 80006ee:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f008 f88c 	bl	8008810 <HAL_Delay>
	memcpy(wifiPassLocArr, &eepromData[passStartPos], wifiCharacterLimit);
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <eepromKontrol+0x578>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <eepromKontrol+0x568>)
 80006fe:	441a      	add	r2, r3
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <eepromKontrol+0x57c>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6855      	ldr	r5, [r2, #4]
 8000706:	6894      	ldr	r4, [r2, #8]
 8000708:	68d0      	ldr	r0, [r2, #12]
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	605d      	str	r5, [r3, #4]
 800070e:	609c      	str	r4, [r3, #8]
 8000710:	60d8      	str	r0, [r3, #12]
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f008 f879 	bl	8008810 <HAL_Delay>
	readFromEEPROM(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f858 	bl	80007d4 <readFromEEPROM>
	HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f008 f872 	bl	8008810 <HAL_Delay>
	readFromEEPROM(2);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 f851 	bl	80007d4 <readFromEEPROM>
	HAL_Delay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f008 f86b 	bl	8008810 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bdb0      	pop	{r4, r5, r7, pc}
 8000740:	2000023d 	.word	0x2000023d
 8000744:	2000022e 	.word	0x2000022e
 8000748:	2000023e 	.word	0x2000023e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000231 	.word	0x20000231
 8000754:	2000023f 	.word	0x2000023f
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	20000239 	.word	0x20000239
 8000778:	2000023a 	.word	0x2000023a
 800077c:	2000023b 	.word	0x2000023b
 8000780:	2000023c 	.word	0x2000023c
 8000784:	20000240 	.word	0x20000240
 8000788:	20000242 	.word	0x20000242
 800078c:	20000244 	.word	0x20000244
 8000790:	20000245 	.word	0x20000245
 8000794:	20000243 	.word	0x20000243
 8000798:	2000000c 	.word	0x2000000c
 800079c:	20000128 	.word	0x20000128
 80007a0:	200001a0 	.word	0x200001a0
 80007a4:	20000010 	.word	0x20000010
 80007a8:	200001d4 	.word	0x200001d4
 80007ac:	20000014 	.word	0x20000014
 80007b0:	200001e8 	.word	0x200001e8

080007b4 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <getCharFromCursorPosition+0x1c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d11c      	bne.n	800081c <readFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <readFromEEPROM+0x88>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	e012      	b.n	8000814 <readFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDLoc[tempSSIDStartPos]);
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <readFromEEPROM+0x8c>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffdd 	bl	80007b4 <getCharFromCursorPosition>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <readFromEEPROM+0x90>)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]

			tempSSIDStartPos++;
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	3301      	adds	r3, #1
 800080c:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3301      	adds	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	2b13      	cmp	r3, #19
 8000818:	dde9      	ble.n	80007ee <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(wifiPassLocArr[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 800081a:	e01b      	b.n	8000854 <readFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <readFromEEPROM+0x94>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e012      	b.n	800084e <readFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(wifiPassLocArr[tempPassStartPos]);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <readFromEEPROM+0x98>)
 800082c:	5cd3      	ldrb	r3, [r2, r3]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffc0 	bl	80007b4 <getCharFromCursorPosition>
 8000834:	4603      	mov	r3, r0
 8000836:	4619      	mov	r1, r3
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <readFromEEPROM+0x9c>)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3301      	adds	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b13      	cmp	r3, #19
 8000852:	dde9      	ble.n	8000828 <readFromEEPROM+0x54>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000010 	.word	0x20000010
 8000860:	200001d4 	.word	0x200001d4
 8000864:	200001ac 	.word	0x200001ac
 8000868:	20000014 	.word	0x20000014
 800086c:	200001e8 	.word	0x200001e8
 8000870:	200001c0 	.word	0x200001c0

08000874 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b09f      	sub	sp, #124	; 0x7c
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000880:	4948      	ldr	r1, [pc, #288]	; (80009a4 <ESP8266_Init+0x130>)
 8000882:	4849      	ldr	r0, [pc, #292]	; (80009a8 <ESP8266_Init+0x134>)
 8000884:	f00b fe76 	bl	800c574 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <ESP8266_Init+0x134>)
 800088a:	f7ff fccb 	bl	8000224 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4944      	ldr	r1, [pc, #272]	; (80009a8 <ESP8266_Init+0x134>)
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f00b f886 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f007 ffb6 	bl	8008810 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80008a4:	4941      	ldr	r1, [pc, #260]	; (80009ac <ESP8266_Init+0x138>)
 80008a6:	4840      	ldr	r0, [pc, #256]	; (80009a8 <ESP8266_Init+0x134>)
 80008a8:	f00b fe64 	bl	800c574 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008ac:	483e      	ldr	r0, [pc, #248]	; (80009a8 <ESP8266_Init+0x134>)
 80008ae:	f7ff fcb9 	bl	8000224 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	493b      	ldr	r1, [pc, #236]	; (80009a8 <ESP8266_Init+0x134>)
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f00b f874 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f007 ffa4 	bl	8008810 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80008c8:	4939      	ldr	r1, [pc, #228]	; (80009b0 <ESP8266_Init+0x13c>)
 80008ca:	4837      	ldr	r0, [pc, #220]	; (80009a8 <ESP8266_Init+0x134>)
 80008cc:	f00b fe52 	bl	800c574 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008d0:	4835      	ldr	r0, [pc, #212]	; (80009a8 <ESP8266_Init+0x134>)
 80008d2:	f7ff fca7 	bl	8000224 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29b      	uxth	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4932      	ldr	r1, [pc, #200]	; (80009a8 <ESP8266_Init+0x134>)
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f00b f862 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e8:	f007 ff92 	bl	8008810 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008ec:	4931      	ldr	r1, [pc, #196]	; (80009b4 <ESP8266_Init+0x140>)
 80008ee:	482e      	ldr	r0, [pc, #184]	; (80009a8 <ESP8266_Init+0x134>)
 80008f0:	f00b fe40 	bl	800c574 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <ESP8266_Init+0x134>)
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4929      	ldr	r1, [pc, #164]	; (80009a8 <ESP8266_Init+0x134>)
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f00b f850 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090c:	f007 ff80 	bl	8008810 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <ESP8266_Init+0x144>)
 8000916:	461c      	mov	r4, r3
 8000918:	4613      	mov	r3, r2
 800091a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091c:	c407      	stmia	r4!, {r0, r1, r2}
 800091e:	8023      	strh	r3, [r4, #0]
 8000920:	3402      	adds	r4, #2
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f00b fe83 	bl	800c638 <strcat>
	strcat(str, "\",\"");
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc74 	bl	8000224 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4413      	add	r3, r2
 8000946:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <ESP8266_Init+0x148>)
 8000948:	6810      	ldr	r0, [r2, #0]
 800094a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	f00b fe70 	bl	800c638 <strcat>
	strcat(str, "\"\r\n");
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc61 	bl	8000224 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4413      	add	r3, r2
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <ESP8266_Init+0x14c>)
 800096e:	6810      	ldr	r0, [r2, #0]
 8000970:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	461a      	mov	r2, r3
 8000978:	4912      	ldr	r1, [pc, #72]	; (80009c4 <ESP8266_Init+0x150>)
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ESP8266_Init+0x134>)
 800097c:	f00b fdfa 	bl	800c574 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <ESP8266_Init+0x134>)
 8000982:	f7ff fc4f 	bl	8000224 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29b      	uxth	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <ESP8266_Init+0x134>)
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00b f80a 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000998:	f007 ff3a 	bl	8008810 <HAL_Delay>
}
 800099c:	bf00      	nop
 800099e:	377c      	adds	r7, #124	; 0x7c
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	0800ce4c 	.word	0x0800ce4c
 80009a8:	20000288 	.word	0x20000288
 80009ac:	0800ce5c 	.word	0x0800ce5c
 80009b0:	0800ce68 	.word	0x0800ce68
 80009b4:	0800ce70 	.word	0x0800ce70
 80009b8:	0800ce80 	.word	0x0800ce80
 80009bc:	0800ce90 	.word	0x0800ce90
 80009c0:	0800ce94 	.word	0x0800ce94
 80009c4:	0800ce98 	.word	0x0800ce98

080009c8 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0c6      	sub	sp, #280	; 0x118
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009e0:	6019      	str	r1, [r3, #0]
 80009e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ea:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <sendMachineData+0xec>)
 80009ee:	4932      	ldr	r1, [pc, #200]	; (8000ab8 <sendMachineData+0xf0>)
 80009f0:	4832      	ldr	r0, [pc, #200]	; (8000abc <sendMachineData+0xf4>)
 80009f2:	f00b fdbf 	bl	800c574 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f6:	4831      	ldr	r0, [pc, #196]	; (8000abc <sendMachineData+0xf4>)
 80009f8:	f7ff fc14 	bl	8000224 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a08:	492c      	ldr	r1, [pc, #176]	; (8000abc <sendMachineData+0xf4>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f00a ffcc 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a14:	f007 fefc 	bl	8008810 <HAL_Delay>

	sprintf(local_txA,
 8000a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a24:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000a28:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a2c:	4924      	ldr	r1, [pc, #144]	; (8000ac0 <sendMachineData+0xf8>)
 8000a2e:	9100      	str	r1, [sp, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	4923      	ldr	r1, [pc, #140]	; (8000ac4 <sendMachineData+0xfc>)
 8000a36:	f00b fd9d 	bl	800c574 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a52:	491d      	ldr	r1, [pc, #116]	; (8000ac8 <sendMachineData+0x100>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b fd8d 	bl	800c574 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbe0 	bl	8000224 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f00a ff97 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7e:	f007 fec7 	bl	8008810 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fbcc 	bl	8000224 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f00a ff83 	bl	800b9a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000aa2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa6:	f007 feb3 	bl	8008810 <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800ce9c 	.word	0x0800ce9c
 8000ab8:	0800ceac 	.word	0x0800ceac
 8000abc:	20000288 	.word	0x20000288
 8000ac0:	0800cf28 	.word	0x0800cf28
 8000ac4:	0800cecc 	.word	0x0800cecc
 8000ac8:	0800cf3c 	.word	0x0800cf3c

08000acc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <hata2EEPROM+0xa4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <hata2EEPROM+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <hata2EEPROM+0xac>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aea:	f000 f92b 	bl	8000d44 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000aee:	e000      	b.n	8000af2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e012      	b.n	8000b1e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <hata2EEPROM+0xa8>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <hata2EEPROM+0xac>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4919      	ldr	r1, [pc, #100]	; (8000b78 <hata2EEPROM+0xac>)
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	54ca      	strb	r2, [r1, r3]
					break;
 8000b16:	e007      	b.n	8000b28 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbe7      	blt.n	8000af8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	b298      	uxth	r0, r3
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <hata2EEPROM+0xac>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	b292      	uxth	r2, r2
 8000b42:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b46:	9402      	str	r4, [sp, #8]
 8000b48:	9201      	str	r2, [sp, #4]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	21a0      	movs	r1, #160	; 0xa0
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <hata2EEPROM+0xb0>)
 8000b54:	f008 fee6 	bl	8009924 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f007 fe58 	bl	8008810 <HAL_Delay>
	eepromKontrol(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fb67 	bl	8000234 <eepromKontrol>
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a8 	.word	0x200000a8
 8000b74:	200000ac 	.word	0x200000ac
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	200003ac 	.word	0x200003ac

08000b80 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d11d      	bne.n	8000bcc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b98:	4a61      	ldr	r2, [pc, #388]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f007 f8e1 	bl	8007d64 <lcd_print>
 8000ba2:	e008      	b.n	8000bb6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bac:	4a5d      	ldr	r2, [pc, #372]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f007 f8d7 	bl	8007d64 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bb6:	4a5c      	ldr	r2, [pc, #368]	; (8000d28 <hataKoduLcdGoster+0x1a8>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f007 f8d2 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc0:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f007 f8cd 	bl	8007d64 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bca:	e0a3      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d11d      	bne.n	8000c0e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bd2:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2001      	movs	r0, #1
 8000be0:	f007 f8c0 	bl	8007d64 <lcd_print>
 8000be4:	e008      	b.n	8000bf8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000be6:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f007 f8b6 	bl	8007d64 <lcd_print>
		lcd_print(2, 2, "2");
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <hataKoduLcdGoster+0x1b0>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f007 f8b1 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c02:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c04:	2107      	movs	r1, #7
 8000c06:	2002      	movs	r0, #2
 8000c08:	f007 f8ac 	bl	8007d64 <lcd_print>
}
 8000c0c:	e082      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d11d      	bne.n	8000c50 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2001      	movs	r0, #1
 8000c22:	f007 f89f 	bl	8007d64 <lcd_print>
 8000c26:	e008      	b.n	8000c3a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d104      	bne.n	8000c3a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f007 f895 	bl	8007d64 <lcd_print>
		lcd_print(2, 3, "3");
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <hataKoduLcdGoster+0x1b4>)
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f007 f890 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c46:	2107      	movs	r1, #7
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f007 f88b 	bl	8007d64 <lcd_print>
}
 8000c4e:	e061      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d11d      	bne.n	8000c92 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d105      	bne.n	8000c6a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c5e:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	2001      	movs	r0, #1
 8000c64:	f007 f87e 	bl	8007d64 <lcd_print>
 8000c68:	e008      	b.n	8000c7c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f007 f874 	bl	8007d64 <lcd_print>
		lcd_print(2, 4, "4");
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <hataKoduLcdGoster+0x1b8>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	2002      	movs	r0, #2
 8000c82:	f007 f86f 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c88:	2107      	movs	r1, #7
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f007 f86a 	bl	8007d64 <lcd_print>
}
 8000c90:	e040      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11d      	bne.n	8000cd4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f007 f85d 	bl	8007d64 <lcd_print>
 8000caa:	e008      	b.n	8000cbe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f007 f853 	bl	8007d64 <lcd_print>
		lcd_print(2, 5, "5");
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <hataKoduLcdGoster+0x1bc>)
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f007 f84e 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000cca:	2107      	movs	r1, #7
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f007 f849 	bl	8007d64 <lcd_print>
}
 8000cd2:	e01f      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d11c      	bne.n	8000d14 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f007 f83c 	bl	8007d64 <lcd_print>
 8000cec:	e008      	b.n	8000d00 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f007 f832 	bl	8007d64 <lcd_print>
		lcd_print(2, 6, "6");
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <hataKoduLcdGoster+0x1c0>)
 8000d02:	2106      	movs	r1, #6
 8000d04:	2002      	movs	r0, #2
 8000d06:	f007 f82d 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f007 f828 	bl	8007d64 <lcd_print>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000245 	.word	0x20000245
 8000d20:	0800cfc8 	.word	0x0800cfc8
 8000d24:	0800cfd8 	.word	0x0800cfd8
 8000d28:	0800cfe8 	.word	0x0800cfe8
 8000d2c:	0800cfec 	.word	0x0800cfec
 8000d30:	0800cff8 	.word	0x0800cff8
 8000d34:	0800cffc 	.word	0x0800cffc
 8000d38:	0800d000 	.word	0x0800d000
 8000d3c:	0800d004 	.word	0x0800d004
 8000d40:	0800d008 	.word	0x0800d008

08000d44 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	e009      	b.n	8000d64 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <eepromDataFillWithEmpty+0x38>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <eepromDataFillWithEmpty+0x3c>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3301      	adds	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <eepromDataFillWithEmpty+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf0      	blt.n	8000d50 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000080 	.word	0x20000080
 8000d80:	20000128 	.word	0x20000128
 8000d84:	200000a8 	.word	0x200000a8

08000d88 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <i2cTest+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <i2cTest+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <i2cTest+0x154>)
 8000dac:	f008 fc8c 	bl	80096c8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000db4:	2311      	movs	r3, #17
 8000db6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4846      	ldr	r0, [pc, #280]	; (8000ee0 <i2cTest+0x158>)
 8000dc6:	f008 f893 	bl	8008ef0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4844      	ldr	r0, [pc, #272]	; (8000ee0 <i2cTest+0x158>)
 8000dd0:	f008 fb05 	bl	80093de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <i2cTest+0x158>)
 8000dda:	f008 fb00 	bl	80093de <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f007 fd16 	bl	8008810 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de4:	bf00      	nop
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <i2cTest+0x158>)
 8000dea:	f008 fae1 	bl	80093b0 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d006      	beq.n	8000e02 <i2cTest+0x7a>
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <i2cTest+0x158>)
 8000df8:	f008 fada 	bl	80093b0 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1f1      	bne.n	8000de6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <i2cTest+0x158>)
 8000e08:	f008 fae9 	bl	80093de <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f007 fcff 	bl	8008810 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e12:	bf00      	nop
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <i2cTest+0x158>)
 8000e18:	f008 faca 	bl	80093b0 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d0f8      	beq.n	8000e14 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	482e      	ldr	r0, [pc, #184]	; (8000ee0 <i2cTest+0x158>)
 8000e28:	f008 fad9 	bl	80093de <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f007 fcef 	bl	8008810 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e32:	bf00      	nop
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <i2cTest+0x158>)
 8000e38:	f008 faba 	bl	80093b0 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0f8      	beq.n	8000e34 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <i2cTest+0x158>)
 8000e48:	f008 fac9 	bl	80093de <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f007 fcdf 	bl	8008810 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e52:	bf00      	nop
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <i2cTest+0x158>)
 8000e58:	f008 faaa 	bl	80093b0 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d1f8      	bne.n	8000e54 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <i2cTest+0x158>)
 8000e68:	f008 fab9 	bl	80093de <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f007 fccf 	bl	8008810 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e72:	bf00      	nop
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <i2cTest+0x158>)
 8000e78:	f008 fa9a 	bl	80093b0 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f8      	bne.n	8000e74 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <i2cTest+0x158>)
 8000e98:	f008 f82a 	bl	8008ef0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <i2cTest+0x154>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <i2cTest+0x154>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eaa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <i2cTest+0x154>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <i2cTest+0x154>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <i2cTest+0x154>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <i2cTest+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <i2cTest+0x154>)
 8000ece:	f008 fab7 	bl	8009440 <HAL_I2C_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200003ac 	.word	0x200003ac
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000eee:	20c8      	movs	r0, #200	; 0xc8
 8000ef0:	f007 fc8e 	bl	8008810 <HAL_Delay>
	lcd_clear();
 8000ef4:	f006 ff62 	bl	8007dbc <lcd_clear>
	if(type == 1 && page == 0) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d143      	bne.n	8000f86 <printTemplate+0xa2>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d140      	bne.n	8000f86 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f04:	4a9d      	ldr	r2, [pc, #628]	; (800117c <printTemplate+0x298>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 ff2b 	bl	8007d64 <lcd_print>
		lcd_print(2, 3, "0");
 8000f0e:	4a9c      	ldr	r2, [pc, #624]	; (8001180 <printTemplate+0x29c>)
 8000f10:	2103      	movs	r1, #3
 8000f12:	2002      	movs	r0, #2
 8000f14:	f006 ff26 	bl	8007d64 <lcd_print>
		lcd_print(2, 4, "1");
 8000f18:	4a9a      	ldr	r2, [pc, #616]	; (8001184 <printTemplate+0x2a0>)
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f006 ff21 	bl	8007d64 <lcd_print>
		lcd_print(2, 5, "2");
 8000f22:	4a99      	ldr	r2, [pc, #612]	; (8001188 <printTemplate+0x2a4>)
 8000f24:	2105      	movs	r1, #5
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 ff1c 	bl	8007d64 <lcd_print>
		lcd_print(2, 6, "3");
 8000f2c:	4a97      	ldr	r2, [pc, #604]	; (800118c <printTemplate+0x2a8>)
 8000f2e:	2106      	movs	r1, #6
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 ff17 	bl	8007d64 <lcd_print>
		lcd_print(2, 7, "4");
 8000f36:	4a96      	ldr	r2, [pc, #600]	; (8001190 <printTemplate+0x2ac>)
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f006 ff12 	bl	8007d64 <lcd_print>
		lcd_print(2, 10, "5");
 8000f40:	4a94      	ldr	r2, [pc, #592]	; (8001194 <printTemplate+0x2b0>)
 8000f42:	210a      	movs	r1, #10
 8000f44:	2002      	movs	r0, #2
 8000f46:	f006 ff0d 	bl	8007d64 <lcd_print>
		lcd_print(2, 11, "6");
 8000f4a:	4a93      	ldr	r2, [pc, #588]	; (8001198 <printTemplate+0x2b4>)
 8000f4c:	210b      	movs	r1, #11
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f006 ff08 	bl	8007d64 <lcd_print>
		lcd_print(2, 12, "7");
 8000f54:	4a91      	ldr	r2, [pc, #580]	; (800119c <printTemplate+0x2b8>)
 8000f56:	210c      	movs	r1, #12
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f006 ff03 	bl	8007d64 <lcd_print>
		lcd_print(2, 13, "8");
 8000f5e:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <printTemplate+0x2bc>)
 8000f60:	210d      	movs	r1, #13
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 fefe 	bl	8007d64 <lcd_print>
		lcd_print(2, 14, "9");
 8000f68:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <printTemplate+0x2c0>)
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 fef9 	bl	8007d64 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <printTemplate+0x2c4>)
 8000f74:	2105      	movs	r1, #5
 8000f76:	2001      	movs	r0, #1
 8000f78:	f006 fef4 	bl	8007d64 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f006 fed1 	bl	8007d26 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f84:	e0f5      	b.n	8001172 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d178      	bne.n	800107e <printTemplate+0x19a>
		if(page == 1) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0xd8>
			lcd_clear();
 8000f92:	f006 ff13 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fc3a 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f9c:	4a83      	ldr	r2, [pc, #524]	; (80011ac <printTemplate+0x2c8>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fedf 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa6:	4a82      	ldr	r2, [pc, #520]	; (80011b0 <printTemplate+0x2cc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 feda 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fb0:	4a80      	ldr	r2, [pc, #512]	; (80011b4 <printTemplate+0x2d0>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fed5 	bl	8007d64 <lcd_print>
}
 8000fba:	e0da      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x108>
			lcd_clear();
 8000fc2:	f006 fefb 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 fc22 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fcc:	4a77      	ldr	r2, [pc, #476]	; (80011ac <printTemplate+0x2c8>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 fec7 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd6:	4a76      	ldr	r2, [pc, #472]	; (80011b0 <printTemplate+0x2cc>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 fec2 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fe0:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <printTemplate+0x2d4>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 febd 	bl	8007d64 <lcd_print>
}
 8000fea:	e0c2      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 3) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d114      	bne.n	800101c <printTemplate+0x138>
			lcd_clear();
 8000ff2:	f006 fee3 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f007 fc0a 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ffc:	4a6b      	ldr	r2, [pc, #428]	; (80011ac <printTemplate+0x2c8>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2001      	movs	r0, #1
 8001002:	f006 feaf 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001006:	4a6a      	ldr	r2, [pc, #424]	; (80011b0 <printTemplate+0x2cc>)
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f006 feaa 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001010:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <printTemplate+0x2d8>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f006 fea5 	bl	8007d64 <lcd_print>
}
 800101a:	e0aa      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 4) {
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d114      	bne.n	800104c <printTemplate+0x168>
			lcd_clear();
 8001022:	f006 fecb 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f007 fbf2 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800102c:	4a5f      	ldr	r2, [pc, #380]	; (80011ac <printTemplate+0x2c8>)
 800102e:	2101      	movs	r1, #1
 8001030:	2001      	movs	r0, #1
 8001032:	f006 fe97 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001036:	4a5e      	ldr	r2, [pc, #376]	; (80011b0 <printTemplate+0x2cc>)
 8001038:	2107      	movs	r1, #7
 800103a:	2001      	movs	r0, #1
 800103c:	f006 fe92 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001040:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <printTemplate+0x2dc>)
 8001042:	2101      	movs	r1, #1
 8001044:	2002      	movs	r0, #2
 8001046:	f006 fe8d 	bl	8007d64 <lcd_print>
}
 800104a:	e092      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 5) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b05      	cmp	r3, #5
 8001050:	f040 808f 	bne.w	8001172 <printTemplate+0x28e>
			lcd_clear();
 8001054:	f006 feb2 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	; 0x64
 800105a:	f007 fbd9 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800105e:	4a53      	ldr	r2, [pc, #332]	; (80011ac <printTemplate+0x2c8>)
 8001060:	2101      	movs	r1, #1
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fe7e 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <printTemplate+0x2cc>)
 800106a:	2107      	movs	r1, #7
 800106c:	2001      	movs	r0, #1
 800106e:	f006 fe79 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001072:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <printTemplate+0x2e0>)
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f006 fe74 	bl	8007d64 <lcd_print>
}
 800107c:	e079      	b.n	8001172 <printTemplate+0x28e>
	} else if(type == 3) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d176      	bne.n	8001172 <printTemplate+0x28e>
		if(page == 1) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d114      	bne.n	80010b4 <printTemplate+0x1d0>
			lcd_clear();
 800108a:	f006 fe97 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f007 fbbe 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <printTemplate+0x2e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fe63 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <printTemplate+0x2e8>)
 80010a0:	2107      	movs	r1, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	f006 fe5e 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <printTemplate+0x2d0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f006 fe59 	bl	8007d64 <lcd_print>
}
 80010b2:	e05e      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 2) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d114      	bne.n	80010e4 <printTemplate+0x200>
			lcd_clear();
 80010ba:	f006 fe7f 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f007 fba6 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <printTemplate+0x2e4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f006 fe4b 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <printTemplate+0x2e8>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 fe46 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010d8:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <printTemplate+0x2d4>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f006 fe41 	bl	8007d64 <lcd_print>
}
 80010e2:	e046      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 3) {
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d114      	bne.n	8001114 <printTemplate+0x230>
			lcd_clear();
 80010ea:	f006 fe67 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f007 fb8e 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <printTemplate+0x2e4>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	2001      	movs	r0, #1
 80010fa:	f006 fe33 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <printTemplate+0x2e8>)
 8001100:	2107      	movs	r1, #7
 8001102:	2001      	movs	r0, #1
 8001104:	f006 fe2e 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <printTemplate+0x2d8>)
 800110a:	2101      	movs	r1, #1
 800110c:	2002      	movs	r0, #2
 800110e:	f006 fe29 	bl	8007d64 <lcd_print>
}
 8001112:	e02e      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 4) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d114      	bne.n	8001144 <printTemplate+0x260>
			lcd_clear();
 800111a:	f006 fe4f 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f007 fb76 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <printTemplate+0x2e4>)
 8001126:	2101      	movs	r1, #1
 8001128:	2001      	movs	r0, #1
 800112a:	f006 fe1b 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <printTemplate+0x2e8>)
 8001130:	2107      	movs	r1, #7
 8001132:	2001      	movs	r0, #1
 8001134:	f006 fe16 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <printTemplate+0x2dc>)
 800113a:	2101      	movs	r1, #1
 800113c:	2002      	movs	r0, #2
 800113e:	f006 fe11 	bl	8007d64 <lcd_print>
}
 8001142:	e016      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 5) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d113      	bne.n	8001172 <printTemplate+0x28e>
			lcd_clear();
 800114a:	f006 fe37 	bl	8007dbc <lcd_clear>
			HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f007 fb5e 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <printTemplate+0x2e4>)
 8001156:	2101      	movs	r1, #1
 8001158:	2001      	movs	r0, #1
 800115a:	f006 fe03 	bl	8007d64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <printTemplate+0x2e8>)
 8001160:	2107      	movs	r1, #7
 8001162:	2001      	movs	r0, #1
 8001164:	f006 fdfe 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <printTemplate+0x2e0>)
 800116a:	2101      	movs	r1, #1
 800116c:	2002      	movs	r0, #2
 800116e:	f006 fdf9 	bl	8007d64 <lcd_print>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	0800d00c 	.word	0x0800d00c
 8001180:	0800d014 	.word	0x0800d014
 8001184:	0800d018 	.word	0x0800d018
 8001188:	0800d01c 	.word	0x0800d01c
 800118c:	0800d020 	.word	0x0800d020
 8001190:	0800d024 	.word	0x0800d024
 8001194:	0800d028 	.word	0x0800d028
 8001198:	0800d02c 	.word	0x0800d02c
 800119c:	0800d030 	.word	0x0800d030
 80011a0:	0800d034 	.word	0x0800d034
 80011a4:	0800d038 	.word	0x0800d038
 80011a8:	200001a0 	.word	0x200001a0
 80011ac:	0800d03c 	.word	0x0800d03c
 80011b0:	200001ac 	.word	0x200001ac
 80011b4:	0800d044 	.word	0x0800d044
 80011b8:	0800d058 	.word	0x0800d058
 80011bc:	0800d06c 	.word	0x0800d06c
 80011c0:	0800d080 	.word	0x0800d080
 80011c4:	0800d094 	.word	0x0800d094
 80011c8:	0800d0a8 	.word	0x0800d0a8
 80011cc:	200001c0 	.word	0x200001c0

080011d0 <checkSlideVal>:

int checkSlideVal(int state) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d111      	bne.n	8001202 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011de:	2101      	movs	r1, #1
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <checkSlideVal+0x60>)
 80011e2:	f008 f8e5 	bl	80093b0 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <checkSlideVal+0x20>
			return 34;
 80011ec:	2322      	movs	r3, #34	; 0x22
 80011ee:	e01b      	b.n	8001228 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011f0:	2108      	movs	r1, #8
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <checkSlideVal+0x64>)
 80011f4:	f008 f8dc 	bl	80093b0 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d113      	bne.n	8001226 <checkSlideVal+0x56>
			return 32;
 80011fe:	2320      	movs	r3, #32
 8001200:	e012      	b.n	8001228 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001202:	2101      	movs	r1, #1
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <checkSlideVal+0x60>)
 8001206:	f008 f8d3 	bl	80093b0 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <checkSlideVal+0x44>
			return 35;
 8001210:	2323      	movs	r3, #35	; 0x23
 8001212:	e009      	b.n	8001228 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001214:	2108      	movs	r1, #8
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <checkSlideVal+0x64>)
 8001218:	f008 f8ca 	bl	80093b0 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <checkSlideVal+0x56>
			return 33;
 8001222:	2321      	movs	r3, #33	; 0x21
 8001224:	e000      	b.n	8001228 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010800 	.word	0x40010800
 8001234:	40011000 	.word	0x40011000

08001238 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7fe ffec 	bl	8000224 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001254:	e08a      	b.n	800136c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f7ff ffba 	bl	80011d0 <checkSlideVal>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd07      	ble.n	8001272 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7ff ffb4 	bl	80011d0 <checkSlideVal>
 8001268:	4603      	mov	r3, r0
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <slideText+0x148>)
 800126e:	701a      	strb	r2, [r3, #0]
			break;
 8001270:	e081      	b.n	8001376 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	e075      	b.n	8001364 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f7ff ffa9 	bl	80011d0 <checkSlideVal>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd09      	ble.n	8001298 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f7ff ffa3 	bl	80011d0 <checkSlideVal>
 800128a:	4603      	mov	r3, r0
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <slideText+0x148>)
 8001290:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001296:	e069      	b.n	800136c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	4413      	add	r3, r2
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e029      	b.n	80012f6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ff94 	bl	80011d0 <checkSlideVal>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dd0b      	ble.n	80012c6 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff ff8e 	bl	80011d0 <checkSlideVal>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <slideText+0x148>)
 80012ba:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012c4:	e01d      	b.n	8001302 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2d9      	uxtb	r1, r3
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f006 fd52 	bl	8007d8e <lcd_print_char>
				HAL_Delay(30);
 80012ea:	201e      	movs	r0, #30
 80012ec:	f007 fa90 	bl	8008810 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	7dfa      	ldrb	r2, [r7, #23]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbcf      	blt.n	80012a2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	3b01      	subs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e023      	b.n	8001352 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7ff ff60 	bl	80011d0 <checkSlideVal>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	dd0b      	ble.n	800132e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f7ff ff5a 	bl	80011d0 <checkSlideVal>
 800131c:	4603      	mov	r3, r0
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <slideText+0x148>)
 8001322:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800132c:	e017      	b.n	800135e <slideText+0x126>
				}
			     if(j >= startPos) {
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	db0a      	blt.n	800134c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	b2d1      	uxtb	r1, r2
 800133e:	2220      	movs	r2, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fd24 	bl	8007d8e <lcd_print_char>
			    	 HAL_Delay(30);
 8001346:	201e      	movs	r0, #30
 8001348:	f007 fa62 	bl	8008810 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3b01      	subs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	429a      	cmp	r2, r3
 800135c:	dad5      	bge.n	800130a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	3301      	adds	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	db85      	blt.n	8001278 <slideText+0x40>
	while(mainLoopVal == 1) {
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	2b01      	cmp	r3, #1
 8001370:	f43f af71 	beq.w	8001256 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000224 	.word	0x20000224

08001384 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
}
 800138c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001396:	4904      	ldr	r1, [pc, #16]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_SystemReset+0x28>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <__NVIC_SystemReset+0x20>
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0004 	.word	0x05fa0004

080013b0 <menu>:
#include "Menu.h"
#include "main.h"
#include "GlobalVariables.h"
#include "EEPROMProcess.h"

void menu() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013b4:	2101      	movs	r1, #1
 80013b6:	488f      	ldr	r0, [pc, #572]	; (80015f4 <menu+0x244>)
 80013b8:	f007 fffa 	bl	80093b0 <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f040 808e 	bne.w	80014e0 <menu+0x130>
 80013c4:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <menu+0x248>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8086 	beq.w	80014e0 <menu+0x130>
		menuSayac = menuSayac+1;
 80013d4:	4b89      	ldr	r3, [pc, #548]	; (80015fc <menu+0x24c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b87      	ldr	r3, [pc, #540]	; (80015fc <menu+0x24c>)
 80013de:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013e0:	4b86      	ldr	r3, [pc, #536]	; (80015fc <menu+0x24c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b24      	cmp	r3, #36	; 0x24
 80013e6:	d102      	bne.n	80013ee <menu+0x3e>
			menuSayac = 1;
 80013e8:	4b84      	ldr	r3, [pc, #528]	; (80015fc <menu+0x24c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013ee:	4b83      	ldr	r3, [pc, #524]	; (80015fc <menu+0x24c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d106      	bne.n	8001404 <menu+0x54>
 80013f6:	4b82      	ldr	r3, [pc, #520]	; (8001600 <menu+0x250>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <menu+0x54>
			menuSayac = 21;
 80013fe:	4b7f      	ldr	r3, [pc, #508]	; (80015fc <menu+0x24c>)
 8001400:	2215      	movs	r2, #21
 8001402:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001404:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <menu+0x24c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d106      	bne.n	800141a <menu+0x6a>
 800140c:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <menu+0x254>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <menu+0x6a>
			menuSayac = 16;
 8001414:	4b79      	ldr	r3, [pc, #484]	; (80015fc <menu+0x24c>)
 8001416:	2210      	movs	r2, #16
 8001418:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800141a:	4b78      	ldr	r3, [pc, #480]	; (80015fc <menu+0x24c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b0d      	cmp	r3, #13
 8001420:	d106      	bne.n	8001430 <menu+0x80>
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <menu+0x254>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d102      	bne.n	8001430 <menu+0x80>
			menuSayac = 16;
 800142a:	4b74      	ldr	r3, [pc, #464]	; (80015fc <menu+0x24c>)
 800142c:	2210      	movs	r2, #16
 800142e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001430:	4b72      	ldr	r3, [pc, #456]	; (80015fc <menu+0x24c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d106      	bne.n	8001446 <menu+0x96>
 8001438:	4b72      	ldr	r3, [pc, #456]	; (8001604 <menu+0x254>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d102      	bne.n	8001446 <menu+0x96>
			menuSayac = 13;
 8001440:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <menu+0x24c>)
 8001442:	220d      	movs	r2, #13
 8001444:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <menu+0x24c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d10a      	bne.n	8001464 <menu+0xb4>
 800144e:	4b6e      	ldr	r3, [pc, #440]	; (8001608 <menu+0x258>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d003      	beq.n	800145e <menu+0xae>
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <menu+0x258>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d102      	bne.n	8001464 <menu+0xb4>
			menuSayac = 11;
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <menu+0x24c>)
 8001460:	220b      	movs	r2, #11
 8001462:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001464:	4b65      	ldr	r3, [pc, #404]	; (80015fc <menu+0x24c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d10e      	bne.n	800148a <menu+0xda>
 800146c:	4b67      	ldr	r3, [pc, #412]	; (800160c <menu+0x25c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d003      	beq.n	800147c <menu+0xcc>
 8001474:	4b65      	ldr	r3, [pc, #404]	; (800160c <menu+0x25c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d106      	bne.n	800148a <menu+0xda>
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <menu+0x254>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <menu+0xda>
			menuSayac = 16;
 8001484:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <menu+0x24c>)
 8001486:	2210      	movs	r2, #16
 8001488:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <menu+0x24c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d10e      	bne.n	80014b0 <menu+0x100>
 8001492:	4b5e      	ldr	r3, [pc, #376]	; (800160c <menu+0x25c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d003      	beq.n	80014a2 <menu+0xf2>
 800149a:	4b5c      	ldr	r3, [pc, #368]	; (800160c <menu+0x25c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d106      	bne.n	80014b0 <menu+0x100>
 80014a2:	4b58      	ldr	r3, [pc, #352]	; (8001604 <menu+0x254>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d102      	bne.n	80014b0 <menu+0x100>
			menuSayac = 13;
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <menu+0x24c>)
 80014ac:	220d      	movs	r2, #13
 80014ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014b0:	4b52      	ldr	r3, [pc, #328]	; (80015fc <menu+0x24c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d106      	bne.n	80014c6 <menu+0x116>
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <menu+0x260>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <menu+0x116>
			menuSayac = 16;
 80014c0:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <menu+0x24c>)
 80014c2:	2210      	movs	r2, #16
 80014c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80014c6:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <menu+0x24c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b18      	cmp	r3, #24
 80014cc:	d106      	bne.n	80014dc <menu+0x12c>
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <menu+0x250>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <menu+0x12c>
			menuSayac = 26;
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <menu+0x24c>)
 80014d8:	221a      	movs	r2, #26
 80014da:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014dc:	f003 faea 	bl	8004ab4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014e0:	2108      	movs	r1, #8
 80014e2:	484c      	ldr	r0, [pc, #304]	; (8001614 <menu+0x264>)
 80014e4:	f007 ff64 	bl	80093b0 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d175      	bne.n	80015da <menu+0x22a>
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <menu+0x248>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f083 0301 	eor.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d06e      	beq.n	80015da <menu+0x22a>
		if (menuSayac <= 1) {
 80014fc:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <menu+0x24c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d802      	bhi.n	800150a <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001504:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <menu+0x24c>)
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800150a:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <menu+0x24c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <menu+0x24c>)
 8001514:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <menu+0x24c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b14      	cmp	r3, #20
 800151c:	d106      	bne.n	800152c <menu+0x17c>
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <menu+0x250>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <menu+0x17c>
			menuSayac = 17;
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <menu+0x24c>)
 8001528:	2211      	movs	r2, #17
 800152a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800152c:	4b33      	ldr	r3, [pc, #204]	; (80015fc <menu+0x24c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d106      	bne.n	8001542 <menu+0x192>
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <menu+0x254>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <menu+0x192>
			menuSayac = 7;
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <menu+0x24c>)
 800153e:	2207      	movs	r2, #7
 8001540:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <menu+0x24c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d106      	bne.n	8001558 <menu+0x1a8>
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <menu+0x254>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d102      	bne.n	8001558 <menu+0x1a8>
			menuSayac = 12;
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <menu+0x24c>)
 8001554:	220c      	movs	r2, #12
 8001556:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <menu+0x24c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d106      	bne.n	800156e <menu+0x1be>
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <menu+0x254>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d102      	bne.n	800156e <menu+0x1be>
			menuSayac = 8;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <menu+0x24c>)
 800156a:	2208      	movs	r2, #8
 800156c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <menu+0x24c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b0a      	cmp	r3, #10
 8001574:	d10a      	bne.n	800158c <menu+0x1dc>
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <menu+0x258>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d003      	beq.n	8001586 <menu+0x1d6>
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <menu+0x258>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d102      	bne.n	800158c <menu+0x1dc>
			menuSayac = 9;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <menu+0x24c>)
 8001588:	2209      	movs	r2, #9
 800158a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <menu+0x24c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d10a      	bne.n	80015aa <menu+0x1fa>
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <menu+0x25c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <menu+0x1f4>
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <menu+0x25c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d102      	bne.n	80015aa <menu+0x1fa>
			menuSayac = 11;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <menu+0x24c>)
 80015a6:	220b      	movs	r2, #11
 80015a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <menu+0x24c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d106      	bne.n	80015c0 <menu+0x210>
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <menu+0x260>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d102      	bne.n	80015c0 <menu+0x210>
			menuSayac = 14;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <menu+0x24c>)
 80015bc:	220e      	movs	r2, #14
 80015be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <menu+0x24c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b19      	cmp	r3, #25
 80015c6:	d106      	bne.n	80015d6 <menu+0x226>
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <menu+0x250>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <menu+0x226>
			menuSayac = 23;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <menu+0x24c>)
 80015d2:	2217      	movs	r2, #23
 80015d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015d6:	f003 fa6d 	bl	8004ab4 <bekle>
	}

	if (menuSayac == 0) {
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <menu+0x24c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d134      	bne.n	800164c <menu+0x29c>
		if(dilSecim == 0) {
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <menu+0x268>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d122      	bne.n	8001630 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015ea:	4a0c      	ldr	r2, [pc, #48]	; (800161c <menu+0x26c>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	e016      	b.n	8001620 <menu+0x270>
 80015f2:	bf00      	nop
 80015f4:	40010800 	.word	0x40010800
 80015f8:	20000253 	.word	0x20000253
 80015fc:	20000224 	.word	0x20000224
 8001600:	20000233 	.word	0x20000233
 8001604:	2000022c 	.word	0x2000022c
 8001608:	2000022d 	.word	0x2000022d
 800160c:	2000022e 	.word	0x2000022e
 8001610:	2000022f 	.word	0x2000022f
 8001614:	40011000 	.word	0x40011000
 8001618:	20000245 	.word	0x20000245
 800161c:	0800d0b0 	.word	0x0800d0b0
 8001620:	f006 fba0 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001624:	4a94      	ldr	r2, [pc, #592]	; (8001878 <menu+0x4c8>)
 8001626:	2101      	movs	r1, #1
 8001628:	2002      	movs	r0, #2
 800162a:	f006 fb9b 	bl	8007d64 <lcd_print>
 800162e:	e00d      	b.n	800164c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001630:	4b92      	ldr	r3, [pc, #584]	; (800187c <menu+0x4cc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d109      	bne.n	800164c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001638:	4a91      	ldr	r2, [pc, #580]	; (8001880 <menu+0x4d0>)
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f006 fb91 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001642:	4a90      	ldr	r2, [pc, #576]	; (8001884 <menu+0x4d4>)
 8001644:	2101      	movs	r1, #1
 8001646:	2002      	movs	r0, #2
 8001648:	f006 fb8c 	bl	8007d64 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800164c:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <menu+0x4d8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	f040 82b5 	bne.w	8001bc0 <menu+0x810>
		if(dilSecim == 0) {
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <menu+0x4cc>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800165e:	4a8b      	ldr	r2, [pc, #556]	; (800188c <menu+0x4dc>)
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f006 fb7e 	bl	8007d64 <lcd_print>
 8001668:	e008      	b.n	800167c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800166a:	4b84      	ldr	r3, [pc, #528]	; (800187c <menu+0x4cc>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d104      	bne.n	800167c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001672:	4a87      	ldr	r2, [pc, #540]	; (8001890 <menu+0x4e0>)
 8001674:	2101      	movs	r1, #1
 8001676:	2001      	movs	r0, #1
 8001678:	f006 fb74 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800167c:	4b85      	ldr	r3, [pc, #532]	; (8001894 <menu+0x4e4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d123      	bne.n	80016cc <menu+0x31c>
			if(dilSecim == 0) {
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <menu+0x4cc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800168c:	4a82      	ldr	r2, [pc, #520]	; (8001898 <menu+0x4e8>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 fb67 	bl	8007d64 <lcd_print>
 8001696:	e008      	b.n	80016aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <menu+0x4cc>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80016a0:	4a7e      	ldr	r2, [pc, #504]	; (800189c <menu+0x4ec>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	2002      	movs	r0, #2
 80016a6:	f006 fb5d 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80016aa:	4a7d      	ldr	r2, [pc, #500]	; (80018a0 <menu+0x4f0>)
 80016ac:	210f      	movs	r1, #15
 80016ae:	2002      	movs	r0, #2
 80016b0:	f006 fb58 	bl	8007d64 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <menu+0x4f4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	220a      	movs	r2, #10
 80016ba:	497b      	ldr	r1, [pc, #492]	; (80018a8 <menu+0x4f8>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f00a fea3 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 80016c2:	4a79      	ldr	r2, [pc, #484]	; (80018a8 <menu+0x4f8>)
 80016c4:	210e      	movs	r1, #14
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fb4c 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016cc:	4b71      	ldr	r3, [pc, #452]	; (8001894 <menu+0x4e4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d123      	bne.n	800171c <menu+0x36c>
			if(dilSecim == 0) {
 80016d4:	4b69      	ldr	r3, [pc, #420]	; (800187c <menu+0x4cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80016dc:	4a73      	ldr	r2, [pc, #460]	; (80018ac <menu+0x4fc>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 fb3f 	bl	8007d64 <lcd_print>
 80016e6:	e008      	b.n	80016fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <menu+0x4cc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d104      	bne.n	80016fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <menu+0x500>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	2002      	movs	r0, #2
 80016f6:	f006 fb35 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <menu+0x504>)
 80016fc:	210f      	movs	r1, #15
 80016fe:	2002      	movs	r0, #2
 8001700:	f006 fb30 	bl	8007d64 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001704:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <menu+0x508>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	220a      	movs	r2, #10
 800170a:	4967      	ldr	r1, [pc, #412]	; (80018a8 <menu+0x4f8>)
 800170c:	4618      	mov	r0, r3
 800170e:	f00a fe7b 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 8001712:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <menu+0x4f8>)
 8001714:	210e      	movs	r1, #14
 8001716:	2002      	movs	r0, #2
 8001718:	f006 fb24 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800171c:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <menu+0x4e4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <menu+0x3bc>
			if(dilSecim == 0) {
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <menu+0x4cc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <menu+0x50c>)
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f006 fb17 	bl	8007d64 <lcd_print>
 8001736:	e008      	b.n	800174a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <menu+0x4cc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d104      	bne.n	800174a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001740:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <menu+0x510>)
 8001742:	2101      	movs	r1, #1
 8001744:	2002      	movs	r0, #2
 8001746:	f006 fb0d 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <menu+0x504>)
 800174c:	210f      	movs	r1, #15
 800174e:	2002      	movs	r0, #2
 8001750:	f006 fb08 	bl	8007d64 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001754:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <menu+0x514>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	220a      	movs	r2, #10
 800175a:	4953      	ldr	r1, [pc, #332]	; (80018a8 <menu+0x4f8>)
 800175c:	4618      	mov	r0, r3
 800175e:	f00a fe53 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 8001762:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <menu+0x4f8>)
 8001764:	210e      	movs	r1, #14
 8001766:	2002      	movs	r0, #2
 8001768:	f006 fafc 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <menu+0x4e4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d123      	bne.n	80017bc <menu+0x40c>
			if(dilSecim == 0) {
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <menu+0x4cc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <menu+0x518>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f006 faef 	bl	8007d64 <lcd_print>
 8001786:	e008      	b.n	800179a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001788:	4b3c      	ldr	r3, [pc, #240]	; (800187c <menu+0x4cc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d104      	bne.n	800179a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <menu+0x51c>)
 8001792:	2101      	movs	r1, #1
 8001794:	2002      	movs	r0, #2
 8001796:	f006 fae5 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800179a:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <menu+0x504>)
 800179c:	210f      	movs	r1, #15
 800179e:	2002      	movs	r0, #2
 80017a0:	f006 fae0 	bl	8007d64 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <menu+0x520>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	220a      	movs	r2, #10
 80017aa:	493f      	ldr	r1, [pc, #252]	; (80018a8 <menu+0x4f8>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00a fe2b 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <menu+0x4f8>)
 80017b4:	210e      	movs	r1, #14
 80017b6:	2002      	movs	r0, #2
 80017b8:	f006 fad4 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <menu+0x4e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d123      	bne.n	800180c <menu+0x45c>
			if(dilSecim == 0) {
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <menu+0x4cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80017cc:	4a41      	ldr	r2, [pc, #260]	; (80018d4 <menu+0x524>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f006 fac7 	bl	8007d64 <lcd_print>
 80017d6:	e008      	b.n	80017ea <menu+0x43a>
			} else if(dilSecim == 1) {
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <menu+0x4cc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80017e0:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <menu+0x528>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 fabd 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <menu+0x504>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 fab8 	bl	8007d64 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <menu+0x52c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	492b      	ldr	r1, [pc, #172]	; (80018a8 <menu+0x4f8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fe03 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <menu+0x4f8>)
 8001804:	210e      	movs	r1, #14
 8001806:	2002      	movs	r0, #2
 8001808:	f006 faac 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <menu+0x4e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d123      	bne.n	800185c <menu+0x4ac>
			if(dilSecim == 0) {
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <menu+0x4cc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800181c:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <menu+0x530>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 fa9f 	bl	8007d64 <lcd_print>
 8001826:	e008      	b.n	800183a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <menu+0x4cc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d104      	bne.n	800183a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001830:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <menu+0x534>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f006 fa95 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <menu+0x504>)
 800183c:	210f      	movs	r1, #15
 800183e:	2002      	movs	r0, #2
 8001840:	f006 fa90 	bl	8007d64 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <menu+0x538>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	220a      	movs	r2, #10
 800184a:	4917      	ldr	r1, [pc, #92]	; (80018a8 <menu+0x4f8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fddb 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <menu+0x4f8>)
 8001854:	210e      	movs	r1, #14
 8001856:	2002      	movs	r0, #2
 8001858:	f006 fa84 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <menu+0x4e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b06      	cmp	r3, #6
 8001862:	d15f      	bne.n	8001924 <menu+0x574>
			if(dilSecim == 0) {
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <menu+0x4cc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d141      	bne.n	80018f0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <menu+0x53c>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f006 fa77 	bl	8007d64 <lcd_print>
 8001876:	e044      	b.n	8001902 <menu+0x552>
 8001878:	0800d0c4 	.word	0x0800d0c4
 800187c:	20000245 	.word	0x20000245
 8001880:	0800d0d8 	.word	0x0800d0d8
 8001884:	0800d0ec 	.word	0x0800d0ec
 8001888:	20000224 	.word	0x20000224
 800188c:	0800d100 	.word	0x0800d100
 8001890:	0800d114 	.word	0x0800d114
 8001894:	20000226 	.word	0x20000226
 8001898:	0800d128 	.word	0x0800d128
 800189c:	0800d138 	.word	0x0800d138
 80018a0:	0800d148 	.word	0x0800d148
 80018a4:	20000246 	.word	0x20000246
 80018a8:	20000198 	.word	0x20000198
 80018ac:	0800d14c 	.word	0x0800d14c
 80018b0:	0800d15c 	.word	0x0800d15c
 80018b4:	0800d16c 	.word	0x0800d16c
 80018b8:	20000247 	.word	0x20000247
 80018bc:	0800d170 	.word	0x0800d170
 80018c0:	0800d180 	.word	0x0800d180
 80018c4:	20000248 	.word	0x20000248
 80018c8:	0800d190 	.word	0x0800d190
 80018cc:	0800d1a0 	.word	0x0800d1a0
 80018d0:	20000249 	.word	0x20000249
 80018d4:	0800d1b0 	.word	0x0800d1b0
 80018d8:	0800d1c0 	.word	0x0800d1c0
 80018dc:	2000024a 	.word	0x2000024a
 80018e0:	0800d1d0 	.word	0x0800d1d0
 80018e4:	0800d1e0 	.word	0x0800d1e0
 80018e8:	2000024b 	.word	0x2000024b
 80018ec:	0800d1f0 	.word	0x0800d1f0
			} else if(dilSecim == 1) {
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <menu+0x680>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d104      	bne.n	8001902 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <menu+0x684>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f006 fa31 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001902:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <menu+0x688>)
 8001904:	210f      	movs	r1, #15
 8001906:	2002      	movs	r0, #2
 8001908:	f006 fa2c 	bl	8007d64 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <menu+0x68c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	220a      	movs	r2, #10
 8001912:	494b      	ldr	r1, [pc, #300]	; (8001a40 <menu+0x690>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00a fd77 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 800191a:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <menu+0x690>)
 800191c:	210e      	movs	r1, #14
 800191e:	2002      	movs	r0, #2
 8001920:	f006 fa20 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <menu+0x694>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b07      	cmp	r3, #7
 800192a:	d123      	bne.n	8001974 <menu+0x5c4>
			if(dilSecim == 0) {
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <menu+0x680>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <menu+0x698>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f006 fa13 	bl	8007d64 <lcd_print>
 800193e:	e008      	b.n	8001952 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <menu+0x680>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d104      	bne.n	8001952 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <menu+0x69c>)
 800194a:	2101      	movs	r1, #1
 800194c:	2002      	movs	r0, #2
 800194e:	f006 fa09 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <menu+0x688>)
 8001954:	210f      	movs	r1, #15
 8001956:	2002      	movs	r0, #2
 8001958:	f006 fa04 	bl	8007d64 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <menu+0x6a0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	220a      	movs	r2, #10
 8001962:	4937      	ldr	r1, [pc, #220]	; (8001a40 <menu+0x690>)
 8001964:	4618      	mov	r0, r3
 8001966:	f00a fd4f 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 800196a:	4a35      	ldr	r2, [pc, #212]	; (8001a40 <menu+0x690>)
 800196c:	210e      	movs	r1, #14
 800196e:	2002      	movs	r0, #2
 8001970:	f006 f9f8 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <menu+0x694>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d123      	bne.n	80019c4 <menu+0x614>
			if(dilSecim == 0) {
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <menu+0x680>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <menu+0x6a4>)
 8001986:	2101      	movs	r1, #1
 8001988:	2002      	movs	r0, #2
 800198a:	f006 f9eb 	bl	8007d64 <lcd_print>
 800198e:	e008      	b.n	80019a2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <menu+0x680>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d104      	bne.n	80019a2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <menu+0x6a8>)
 800199a:	2101      	movs	r1, #1
 800199c:	2002      	movs	r0, #2
 800199e:	f006 f9e1 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019a2:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <menu+0x688>)
 80019a4:	210f      	movs	r1, #15
 80019a6:	2002      	movs	r0, #2
 80019a8:	f006 f9dc 	bl	8007d64 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <menu+0x6ac>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	220a      	movs	r2, #10
 80019b2:	4923      	ldr	r1, [pc, #140]	; (8001a40 <menu+0x690>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a fd27 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <menu+0x690>)
 80019bc:	210e      	movs	r1, #14
 80019be:	2002      	movs	r0, #2
 80019c0:	f006 f9d0 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <menu+0x694>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d123      	bne.n	8001a14 <menu+0x664>
			if(dilSecim == 0) {
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <menu+0x680>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80019d4:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <menu+0x6b0>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f006 f9c3 	bl	8007d64 <lcd_print>
 80019de:	e008      	b.n	80019f2 <menu+0x642>
			} else if(dilSecim == 1) {
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <menu+0x680>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019e8:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <menu+0x6b4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 f9b9 	bl	8007d64 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <menu+0x6b8>)
 80019f4:	2110      	movs	r1, #16
 80019f6:	2002      	movs	r0, #2
 80019f8:	f006 f9b4 	bl	8007d64 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <menu+0x6bc>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	220a      	movs	r2, #10
 8001a02:	490f      	ldr	r1, [pc, #60]	; (8001a40 <menu+0x690>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00a fcff 	bl	800c408 <itoa>
			lcd_print(2, 15, snum);
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <menu+0x690>)
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f006 f9a8 	bl	8007d64 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <menu+0x694>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b0a      	cmp	r3, #10
 8001a1a:	d134      	bne.n	8001a86 <menu+0x6d6>
			if(dilSecim == 0) {
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <menu+0x680>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <menu+0x6c0>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f006 f99b 	bl	8007d64 <lcd_print>
 8001a2e:	e02a      	b.n	8001a86 <menu+0x6d6>
 8001a30:	20000245 	.word	0x20000245
 8001a34:	0800d200 	.word	0x0800d200
 8001a38:	0800d16c 	.word	0x0800d16c
 8001a3c:	2000024c 	.word	0x2000024c
 8001a40:	20000198 	.word	0x20000198
 8001a44:	20000226 	.word	0x20000226
 8001a48:	0800d210 	.word	0x0800d210
 8001a4c:	0800d220 	.word	0x0800d220
 8001a50:	2000024d 	.word	0x2000024d
 8001a54:	0800d230 	.word	0x0800d230
 8001a58:	0800d240 	.word	0x0800d240
 8001a5c:	2000024e 	.word	0x2000024e
 8001a60:	0800d250 	.word	0x0800d250
 8001a64:	0800d260 	.word	0x0800d260
 8001a68:	0800d270 	.word	0x0800d270
 8001a6c:	2000024f 	.word	0x2000024f
 8001a70:	0800d274 	.word	0x0800d274
			} else if(dilSecim == 1) {
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <menu+0x8d0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d104      	bne.n	8001a86 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a7c:	4a81      	ldr	r2, [pc, #516]	; (8001c84 <menu+0x8d4>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f006 f96f 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a86:	2102      	movs	r1, #2
 8001a88:	487f      	ldr	r0, [pc, #508]	; (8001c88 <menu+0x8d8>)
 8001a8a:	f007 fc91 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d119      	bne.n	8001ac8 <menu+0x718>
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <menu+0x8dc>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d012      	beq.n	8001ac8 <menu+0x718>
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <menu+0x8e0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10e      	bne.n	8001ac8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001aaa:	4b7a      	ldr	r3, [pc, #488]	; (8001c94 <menu+0x8e4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <menu+0x8e4>)
 8001ab4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001ab6:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <menu+0x8e4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d902      	bls.n	8001ac4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <menu+0x8e4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac4:	f002 fff6 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ac8:	2104      	movs	r1, #4
 8001aca:	486f      	ldr	r0, [pc, #444]	; (8001c88 <menu+0x8d8>)
 8001acc:	f007 fc70 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d119      	bne.n	8001b0a <menu+0x75a>
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <menu+0x8dc>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f083 0301 	eor.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <menu+0x75a>
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <menu+0x8e0>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <menu+0x8e4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <menu+0x8e4>)
 8001af6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001af8:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <menu+0x8e4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	d902      	bls.n	8001b06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b00:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <menu+0x8e4>)
 8001b02:	220a      	movs	r2, #10
 8001b04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b06:	f002 ffd5 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	485e      	ldr	r0, [pc, #376]	; (8001c88 <menu+0x8d8>)
 8001b0e:	f007 fc4f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d153      	bne.n	8001bc0 <menu+0x810>
 8001b18:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <menu+0x8dc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04c      	beq.n	8001bc0 <menu+0x810>
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <menu+0x8e4>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b0a      	cmp	r3, #10
 8001b2c:	d148      	bne.n	8001bc0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <menu+0x8e8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <menu+0x8ec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b3c:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <menu+0x8f0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <menu+0x8ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <menu+0x8f4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <menu+0x8ec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <menu+0x8f8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <menu+0x8ec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <menu+0x8fc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <menu+0x8ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <menu+0x900>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <menu+0x8ec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b82:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <menu+0x904>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <menu+0x8ec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <menu+0x908>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <menu+0x8ec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <menu+0x90c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <menu+0x8ec>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <menu+0x910>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <menu+0x8ec>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <menu+0x914>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <menu+0x918>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 80fc 	bne.w	8001dc2 <menu+0xa12>
		if(dilSecim == 0) {
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <menu+0x8d0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <menu+0x91c>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f006 f8c4 	bl	8007d64 <lcd_print>
 8001bdc:	e008      	b.n	8001bf0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <menu+0x8d0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d104      	bne.n	8001bf0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <menu+0x920>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2001      	movs	r0, #1
 8001bec:	f006 f8ba 	bl	8007d64 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <menu+0x8e0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d003      	beq.n	8001c00 <menu+0x850>
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <menu+0x8e0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d112      	bne.n	8001c26 <menu+0x876>
			if(dilSecim == 0) {
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <menu+0x8d0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c08:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <menu+0x924>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f006 f8a9 	bl	8007d64 <lcd_print>
 8001c12:	e008      	b.n	8001c26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <menu+0x8d0>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d104      	bne.n	8001c26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c1c:	4a2e      	ldr	r2, [pc, #184]	; (8001cd8 <menu+0x928>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2002      	movs	r0, #2
 8001c22:	f006 f89f 	bl	8007d64 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <menu+0x92c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <menu+0x8ac>
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <menu+0x8e0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <menu+0x8d0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c3e:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <menu+0x930>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	2002      	movs	r0, #2
 8001c44:	f006 f88e 	bl	8007d64 <lcd_print>
 8001c48:	e008      	b.n	8001c5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <menu+0x8d0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d104      	bne.n	8001c5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <menu+0x934>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f006 f884 	bl	8007d64 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <menu+0x92c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d14c      	bne.n	8001cfe <menu+0x94e>
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <menu+0x8e0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d148      	bne.n	8001cfe <menu+0x94e>
			if(dilSecim == 0) {
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <menu+0x8d0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d13b      	bne.n	8001cec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <menu+0x938>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f006 f873 	bl	8007d64 <lcd_print>
 8001c7e:	e03e      	b.n	8001cfe <menu+0x94e>
 8001c80:	20000245 	.word	0x20000245
 8001c84:	0800d288 	.word	0x0800d288
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	20000253 	.word	0x20000253
 8001c90:	20000233 	.word	0x20000233
 8001c94:	20000226 	.word	0x20000226
 8001c98:	20000246 	.word	0x20000246
 8001c9c:	20000128 	.word	0x20000128
 8001ca0:	20000247 	.word	0x20000247
 8001ca4:	20000248 	.word	0x20000248
 8001ca8:	20000249 	.word	0x20000249
 8001cac:	2000024a 	.word	0x2000024a
 8001cb0:	2000024b 	.word	0x2000024b
 8001cb4:	2000024c 	.word	0x2000024c
 8001cb8:	2000024d 	.word	0x2000024d
 8001cbc:	2000024e 	.word	0x2000024e
 8001cc0:	2000024f 	.word	0x2000024f
 8001cc4:	20000250 	.word	0x20000250
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	0800d29c 	.word	0x0800d29c
 8001cd0:	0800d2b0 	.word	0x0800d2b0
 8001cd4:	0800d2c4 	.word	0x0800d2c4
 8001cd8:	0800d2d8 	.word	0x0800d2d8
 8001cdc:	20000225 	.word	0x20000225
 8001ce0:	0800d2ec 	.word	0x0800d2ec
 8001ce4:	0800d2fc 	.word	0x0800d2fc
 8001ce8:	0800d30c 	.word	0x0800d30c
			} else if(dilSecim == 1) {
 8001cec:	4b98      	ldr	r3, [pc, #608]	; (8001f50 <menu+0xba0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d104      	bne.n	8001cfe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001cf4:	4a97      	ldr	r2, [pc, #604]	; (8001f54 <menu+0xba4>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f006 f833 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4895      	ldr	r0, [pc, #596]	; (8001f58 <menu+0xba8>)
 8001d02:	f007 fb55 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d119      	bne.n	8001d40 <menu+0x990>
 8001d0c:	4b93      	ldr	r3, [pc, #588]	; (8001f5c <menu+0xbac>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <menu+0x990>
 8001d1a:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <menu+0xbb0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d22:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <menu+0xbb4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <menu+0xbb4>)
 8001d2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <menu+0xbb4>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d902      	bls.n	8001d3c <menu+0x98c>
				calismaSekli = 0;
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <menu+0xbb4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d3c:	f002 feba 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d40:	2104      	movs	r1, #4
 8001d42:	4885      	ldr	r0, [pc, #532]	; (8001f58 <menu+0xba8>)
 8001d44:	f007 fb34 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d119      	bne.n	8001d82 <menu+0x9d2>
 8001d4e:	4b83      	ldr	r3, [pc, #524]	; (8001f5c <menu+0xbac>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <menu+0x9d2>
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <menu+0xbb0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d64:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <menu+0xbb4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <menu+0xbb4>)
 8001d6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d70:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <menu+0xbb4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <menu+0x9ce>
	    		calismaSekli = 1;
 8001d78:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <menu+0xbb4>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d7e:	f002 fe99 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d82:	2108      	movs	r1, #8
 8001d84:	4874      	ldr	r0, [pc, #464]	; (8001f58 <menu+0xba8>)
 8001d86:	f007 fb13 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d118      	bne.n	8001dc2 <menu+0xa12>
 8001d90:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <menu+0xbac>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f083 0301 	eor.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d011      	beq.n	8001dc2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <menu+0xbb4>)
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <menu+0xbb8>)
 8001da4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <menu+0xbb4>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <menu+0xa0c>
				altLimit = 1;
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <menu+0xbbc>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <menu+0xbbc>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <menu+0xbb8>)
 8001dba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <menu+0xbc0>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <menu+0xbc4>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	f040 8083 	bne.w	8001ed2 <menu+0xb22>
		if(dilSecim == 0) {
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <menu+0xba0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001dd4:	4a68      	ldr	r2, [pc, #416]	; (8001f78 <menu+0xbc8>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f005 ffc3 	bl	8007d64 <lcd_print>
 8001dde:	e008      	b.n	8001df2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001de0:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <menu+0xba0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d104      	bne.n	8001df2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001de8:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <menu+0xbcc>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	2001      	movs	r0, #1
 8001dee:	f005 ffb9 	bl	8007d64 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <menu+0xbd0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <menu+0xa72>
			if(dilSecim == 0) {
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <menu+0xba0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e02:	4a60      	ldr	r2, [pc, #384]	; (8001f84 <menu+0xbd4>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2002      	movs	r0, #2
 8001e08:	f005 ffac 	bl	8007d64 <lcd_print>
 8001e0c:	e012      	b.n	8001e34 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <menu+0xba0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10e      	bne.n	8001e34 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e16:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <menu+0xbd8>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f005 ffa2 	bl	8007d64 <lcd_print>
 8001e20:	e008      	b.n	8001e34 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <menu+0xbd0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d104      	bne.n	8001e34 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <menu+0xbdc>)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f005 ff98 	bl	8007d64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e34:	2102      	movs	r1, #2
 8001e36:	4848      	ldr	r0, [pc, #288]	; (8001f58 <menu+0xba8>)
 8001e38:	f007 faba 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d115      	bne.n	8001e6e <menu+0xabe>
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <menu+0xbac>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <menu+0xbd0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <menu+0xbd0>)
 8001e5a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <menu+0xbd0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d902      	bls.n	8001e6a <menu+0xaba>
				emniyetCercevesi = 0;
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <menu+0xbd0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e6a:	f002 fe23 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4839      	ldr	r0, [pc, #228]	; (8001f58 <menu+0xba8>)
 8001e72:	f007 fa9d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d115      	bne.n	8001ea8 <menu+0xaf8>
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <menu+0xbac>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00e      	beq.n	8001ea8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <menu+0xbd0>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <menu+0xbd0>)
 8001e94:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <menu+0xbd0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <menu+0xbd0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ea4:	f002 fe06 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	482b      	ldr	r0, [pc, #172]	; (8001f58 <menu+0xba8>)
 8001eac:	f007 fa80 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <menu+0xb22>
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <menu+0xbac>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <menu+0xbd0>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <menu+0xbb8>)
 8001eca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <menu+0xbc0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <menu+0xbc4>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	f040 80ba 	bne.w	8002050 <menu+0xca0>
		if(dilSecim == 0) {
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <menu+0xba0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <menu+0xbe0>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f005 ff3b 	bl	8007d64 <lcd_print>
 8001eee:	e008      	b.n	8001f02 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <menu+0xba0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d104      	bne.n	8001f02 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <menu+0xbe4>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2001      	movs	r0, #1
 8001efe:	f005 ff31 	bl	8007d64 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <menu+0xbe8>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d113      	bne.n	8001f32 <menu+0xb82>
			if(dilSecim == 0) {
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <menu+0xba0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <menu+0xbd4>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f005 ff24 	bl	8007d64 <lcd_print>
 8001f1c:	e049      	b.n	8001fb2 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <menu+0xba0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d145      	bne.n	8001fb2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <menu+0xbd8>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f005 ff1a 	bl	8007d64 <lcd_print>
 8001f30:	e03f      	b.n	8001fb2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <menu+0xbe8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d13b      	bne.n	8001fb2 <menu+0xc02>
			if(dilSecim == 0) {
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <menu+0xba0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12e      	bne.n	8001fa0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <menu+0xbec>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 ff0c 	bl	8007d64 <lcd_print>
 8001f4c:	e031      	b.n	8001fb2 <menu+0xc02>
 8001f4e:	bf00      	nop
 8001f50:	20000245 	.word	0x20000245
 8001f54:	0800d31c 	.word	0x0800d31c
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	20000253 	.word	0x20000253
 8001f60:	20000233 	.word	0x20000233
 8001f64:	20000225 	.word	0x20000225
 8001f68:	20000128 	.word	0x20000128
 8001f6c:	2000022a 	.word	0x2000022a
 8001f70:	20000250 	.word	0x20000250
 8001f74:	20000224 	.word	0x20000224
 8001f78:	0800d32c 	.word	0x0800d32c
 8001f7c:	0800d340 	.word	0x0800d340
 8001f80:	20000228 	.word	0x20000228
 8001f84:	0800d354 	.word	0x0800d354
 8001f88:	0800d368 	.word	0x0800d368
 8001f8c:	0800d37c 	.word	0x0800d37c
 8001f90:	0800d38c 	.word	0x0800d38c
 8001f94:	0800d3a0 	.word	0x0800d3a0
 8001f98:	20000229 	.word	0x20000229
 8001f9c:	0800d3b4 	.word	0x0800d3b4
			} else if(dilSecim == 1) {
 8001fa0:	4b92      	ldr	r3, [pc, #584]	; (80021ec <menu+0xe3c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d104      	bne.n	8001fb2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001fa8:	4a91      	ldr	r2, [pc, #580]	; (80021f0 <menu+0xe40>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	2002      	movs	r0, #2
 8001fae:	f005 fed9 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	488f      	ldr	r0, [pc, #572]	; (80021f4 <menu+0xe44>)
 8001fb6:	f007 f9fb 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d115      	bne.n	8001fec <menu+0xc3c>
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	; (80021f8 <menu+0xe48>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00e      	beq.n	8001fec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <menu+0xe4c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b89      	ldr	r3, [pc, #548]	; (80021fc <menu+0xe4c>)
 8001fd8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <menu+0xe4c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d902      	bls.n	8001fe8 <menu+0xc38>
				yavaslamaLimit = 0;
 8001fe2:	4b86      	ldr	r3, [pc, #536]	; (80021fc <menu+0xe4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe8:	f002 fd64 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fec:	2104      	movs	r1, #4
 8001fee:	4881      	ldr	r0, [pc, #516]	; (80021f4 <menu+0xe44>)
 8001ff0:	f007 f9de 	bl	80093b0 <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d115      	bne.n	8002026 <menu+0xc76>
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <menu+0xe48>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002008:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <menu+0xe4c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <menu+0xe4c>)
 8002012:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <menu+0xe4c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <menu+0xe4c>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002022:	f002 fd47 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2108      	movs	r1, #8
 8002028:	4872      	ldr	r0, [pc, #456]	; (80021f4 <menu+0xe44>)
 800202a:	f007 f9c1 	bl	80093b0 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10d      	bne.n	8002050 <menu+0xca0>
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <menu+0xe48>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <menu+0xe4c>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <menu+0xe50>)
 8002048:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <menu+0xe54>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <menu+0xe58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b05      	cmp	r3, #5
 8002056:	f040 80b9 	bne.w	80021cc <menu+0xe1c>
		if(dilSecim == 0) {
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <menu+0xe3c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002062:	4a6a      	ldr	r2, [pc, #424]	; (800220c <menu+0xe5c>)
 8002064:	2101      	movs	r1, #1
 8002066:	2001      	movs	r0, #1
 8002068:	f005 fe7c 	bl	8007d64 <lcd_print>
 800206c:	e008      	b.n	8002080 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <menu+0xe3c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002076:	4a66      	ldr	r2, [pc, #408]	; (8002210 <menu+0xe60>)
 8002078:	2101      	movs	r1, #1
 800207a:	2001      	movs	r0, #1
 800207c:	f005 fe72 	bl	8007d64 <lcd_print>
		}

		if(altLimit == 0) {
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <menu+0xe64>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <menu+0xd00>
			if(dilSecim == 0) {
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <menu+0xe3c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002090:	4a61      	ldr	r2, [pc, #388]	; (8002218 <menu+0xe68>)
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f005 fe65 	bl	8007d64 <lcd_print>
 800209a:	e020      	b.n	80020de <menu+0xd2e>
			} else if(dilSecim == 1) {
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <menu+0xe3c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11c      	bne.n	80020de <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80020a4:	4a5d      	ldr	r2, [pc, #372]	; (800221c <menu+0xe6c>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	2002      	movs	r0, #2
 80020aa:	f005 fe5b 	bl	8007d64 <lcd_print>
 80020ae:	e016      	b.n	80020de <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80020b0:	4b58      	ldr	r3, [pc, #352]	; (8002214 <menu+0xe64>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d112      	bne.n	80020de <menu+0xd2e>
			if(dilSecim == 0){
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <menu+0xe3c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <menu+0xe70>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f005 fe4d 	bl	8007d64 <lcd_print>
 80020ca:	e008      	b.n	80020de <menu+0xd2e>
			} else if(dilSecim == 1){
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <menu+0xe3c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d104      	bne.n	80020de <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <menu+0xe40>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2002      	movs	r0, #2
 80020da:	f005 fe43 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020de:	2102      	movs	r1, #2
 80020e0:	4844      	ldr	r0, [pc, #272]	; (80021f4 <menu+0xe44>)
 80020e2:	f007 f965 	bl	80093b0 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d119      	bne.n	8002120 <menu+0xd70>
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <menu+0xe48>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <menu+0xd70>
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <menu+0xe74>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <menu+0xd70>
			altLimit = altLimit + 1;
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <menu+0xe64>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <menu+0xe64>)
 800210c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <menu+0xe64>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d902      	bls.n	800211c <menu+0xd6c>
				altLimit = 0;
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <menu+0xe64>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800211c:	f002 fcca 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002120:	2104      	movs	r1, #4
 8002122:	4834      	ldr	r0, [pc, #208]	; (80021f4 <menu+0xe44>)
 8002124:	f007 f944 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d119      	bne.n	8002162 <menu+0xdb2>
 800212e:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <menu+0xe48>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <menu+0xdb2>
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <menu+0xe74>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10e      	bne.n	8002162 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <menu+0xe64>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	3b01      	subs	r3, #1
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <menu+0xe64>)
 800214e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <menu+0xe64>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <menu+0xdae>
		   		altLimit = 1;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <menu+0xe64>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800215e:	f002 fca9 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002162:	2108      	movs	r1, #8
 8002164:	4823      	ldr	r0, [pc, #140]	; (80021f4 <menu+0xe44>)
 8002166:	f007 f923 	bl	80093b0 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d12d      	bne.n	80021cc <menu+0xe1c>
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <menu+0xe48>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f083 0301 	eor.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d026      	beq.n	80021cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <menu+0xe64>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <menu+0xe50>)
 8002184:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <menu+0xe64>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d110      	bne.n	80021b0 <menu+0xe00>
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <menu+0xe78>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <menu+0xdee>
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <menu+0xe78>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d108      	bne.n	80021b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <menu+0xe78>)
 80021a0:	2203      	movs	r2, #3
 80021a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <menu+0xe78>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <menu+0xe50>)
 80021aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021ae:	e00a      	b.n	80021c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <menu+0xe64>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <menu+0xe7c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <menu+0xe7c>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <menu+0xe50>)
 80021c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <menu+0xe54>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <menu+0xe58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	f040 80b6 	bne.w	8002342 <menu+0xf92>
		if(dilSecim == 0) {
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <menu+0xe3c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12a      	bne.n	8002234 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <menu+0xe80>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f005 fdbe 	bl	8007d64 <lcd_print>
 80021e8:	e02d      	b.n	8002246 <menu+0xe96>
 80021ea:	bf00      	nop
 80021ec:	20000245 	.word	0x20000245
 80021f0:	0800d3c8 	.word	0x0800d3c8
 80021f4:	40010800 	.word	0x40010800
 80021f8:	20000253 	.word	0x20000253
 80021fc:	20000229 	.word	0x20000229
 8002200:	20000128 	.word	0x20000128
 8002204:	20000250 	.word	0x20000250
 8002208:	20000224 	.word	0x20000224
 800220c:	0800d3dc 	.word	0x0800d3dc
 8002210:	0800d3f0 	.word	0x0800d3f0
 8002214:	2000022a 	.word	0x2000022a
 8002218:	0800d354 	.word	0x0800d354
 800221c:	0800d368 	.word	0x0800d368
 8002220:	0800d3b4 	.word	0x0800d3b4
 8002224:	20000225 	.word	0x20000225
 8002228:	20000231 	.word	0x20000231
 800222c:	20000237 	.word	0x20000237
 8002230:	0800d404 	.word	0x0800d404
		} else if(dilSecim == 1){
 8002234:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <menu+0x1070>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d104      	bne.n	8002246 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800223c:	4a79      	ldr	r2, [pc, #484]	; (8002424 <menu+0x1074>)
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f005 fd8f 	bl	8007d64 <lcd_print>
		}
		if(basincSalteri == 0){
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <menu+0x1078>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d113      	bne.n	8002276 <menu+0xec6>
			if(dilSecim == 0) {
 800224e:	4b74      	ldr	r3, [pc, #464]	; (8002420 <menu+0x1070>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <menu+0x107c>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f005 fd82 	bl	8007d64 <lcd_print>
 8002260:	e020      	b.n	80022a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <menu+0x1070>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d11c      	bne.n	80022a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800226a:	4a71      	ldr	r2, [pc, #452]	; (8002430 <menu+0x1080>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f005 fd78 	bl	8007d64 <lcd_print>
 8002274:	e016      	b.n	80022a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <menu+0x1078>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d112      	bne.n	80022a4 <menu+0xef4>
			if(dilSecim == 0) {
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <menu+0x1070>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002286:	4a6b      	ldr	r2, [pc, #428]	; (8002434 <menu+0x1084>)
 8002288:	2101      	movs	r1, #1
 800228a:	2002      	movs	r0, #2
 800228c:	f005 fd6a 	bl	8007d64 <lcd_print>
 8002290:	e008      	b.n	80022a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <menu+0x1070>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d104      	bne.n	80022a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800229a:	4a67      	ldr	r2, [pc, #412]	; (8002438 <menu+0x1088>)
 800229c:	2101      	movs	r1, #1
 800229e:	2002      	movs	r0, #2
 80022a0:	f005 fd60 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2102      	movs	r1, #2
 80022a6:	4865      	ldr	r0, [pc, #404]	; (800243c <menu+0x108c>)
 80022a8:	f007 f882 	bl	80093b0 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0xf2e>
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <menu+0x1090>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <menu+0x1078>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <menu+0x1078>)
 80022ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <menu+0x1078>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d902      	bls.n	80022da <menu+0xf2a>
				basincSalteri = 0;
 80022d4:	4b54      	ldr	r3, [pc, #336]	; (8002428 <menu+0x1078>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022da:	f002 fbeb 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2104      	movs	r1, #4
 80022e0:	4856      	ldr	r0, [pc, #344]	; (800243c <menu+0x108c>)
 80022e2:	f007 f865 	bl	80093b0 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d115      	bne.n	8002318 <menu+0xf68>
 80022ec:	4b54      	ldr	r3, [pc, #336]	; (8002440 <menu+0x1090>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00e      	beq.n	8002318 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <menu+0x1078>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <menu+0x1078>)
 8002304:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002306:	4b48      	ldr	r3, [pc, #288]	; (8002428 <menu+0x1078>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <menu+0xf64>
		   		basincSalteri = 1;
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <menu+0x1078>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002314:	f002 fbce 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002318:	2108      	movs	r1, #8
 800231a:	4848      	ldr	r0, [pc, #288]	; (800243c <menu+0x108c>)
 800231c:	f007 f848 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10d      	bne.n	8002342 <menu+0xf92>
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <menu+0x1090>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <menu+0x1078>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <menu+0x1094>)
 800233a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <menu+0x1098>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <menu+0x109c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b07      	cmp	r3, #7
 8002348:	f040 80f5 	bne.w	8002536 <menu+0x1186>
		if(dilSecim == 0) {
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <menu+0x1070>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002354:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <menu+0x10a0>)
 8002356:	2101      	movs	r1, #1
 8002358:	2001      	movs	r0, #1
 800235a:	f005 fd03 	bl	8007d64 <lcd_print>
 800235e:	e008      	b.n	8002372 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <menu+0x1070>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d104      	bne.n	8002372 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <menu+0x10a4>)
 800236a:	2101      	movs	r1, #1
 800236c:	2001      	movs	r0, #1
 800236e:	f005 fcf9 	bl	8007d64 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <menu+0x10a8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <menu+0xff2>
			if(dilSecim == 0) {
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002382:	4a2a      	ldr	r2, [pc, #168]	; (800242c <menu+0x107c>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f005 fcec 	bl	8007d64 <lcd_print>
 800238c:	e079      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1){
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <menu+0x1070>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d175      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <menu+0x1080>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f005 fce2 	bl	8007d64 <lcd_print>
 80023a0:	e06f      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <menu+0x10a8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d113      	bne.n	80023d2 <menu+0x1022>
			if(dilSecim == 0) {
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <menu+0x1070>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80023b2:	4a2a      	ldr	r2, [pc, #168]	; (800245c <menu+0x10ac>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	2002      	movs	r0, #2
 80023b8:	f005 fcd4 	bl	8007d64 <lcd_print>
 80023bc:	e061      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <menu+0x1070>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d15d      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <menu+0x10b0>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2002      	movs	r0, #2
 80023cc:	f005 fcca 	bl	8007d64 <lcd_print>
 80023d0:	e057      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <menu+0x10a8>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d113      	bne.n	8002402 <menu+0x1052>
			if(dilSecim == 0) {
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <menu+0x1070>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <menu+0x10b4>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f005 fcbc 	bl	8007d64 <lcd_print>
 80023ec:	e049      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <menu+0x1070>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d145      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <menu+0x10b8>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2002      	movs	r0, #2
 80023fc:	f005 fcb2 	bl	8007d64 <lcd_print>
 8002400:	e03f      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <menu+0x10a8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d13b      	bne.n	8002482 <menu+0x10d2>
			if(dilSecim == 0) {
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <menu+0x1070>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12e      	bne.n	8002470 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <menu+0x10bc>)
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f005 fca4 	bl	8007d64 <lcd_print>
 800241c:	e031      	b.n	8002482 <menu+0x10d2>
 800241e:	bf00      	nop
 8002420:	20000245 	.word	0x20000245
 8002424:	0800d414 	.word	0x0800d414
 8002428:	2000022b 	.word	0x2000022b
 800242c:	0800d354 	.word	0x0800d354
 8002430:	0800d368 	.word	0x0800d368
 8002434:	0800d3b4 	.word	0x0800d3b4
 8002438:	0800d3c8 	.word	0x0800d3c8
 800243c:	40010800 	.word	0x40010800
 8002440:	20000253 	.word	0x20000253
 8002444:	20000128 	.word	0x20000128
 8002448:	20000250 	.word	0x20000250
 800244c:	20000224 	.word	0x20000224
 8002450:	0800d424 	.word	0x0800d424
 8002454:	0800d438 	.word	0x0800d438
 8002458:	2000022c 	.word	0x2000022c
 800245c:	0800d44c 	.word	0x0800d44c
 8002460:	0800d460 	.word	0x0800d460
 8002464:	0800d474 	.word	0x0800d474
 8002468:	0800d488 	.word	0x0800d488
 800246c:	0800d49c 	.word	0x0800d49c
			} else if(dilSecim == 1){
 8002470:	4b99      	ldr	r3, [pc, #612]	; (80026d8 <menu+0x1328>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d104      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002478:	4a98      	ldr	r2, [pc, #608]	; (80026dc <menu+0x132c>)
 800247a:	2101      	movs	r1, #1
 800247c:	2002      	movs	r0, #2
 800247e:	f005 fc71 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002482:	2102      	movs	r1, #2
 8002484:	4896      	ldr	r0, [pc, #600]	; (80026e0 <menu+0x1330>)
 8002486:	f006 ff93 	bl	80093b0 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d115      	bne.n	80024bc <menu+0x110c>
 8002490:	4b94      	ldr	r3, [pc, #592]	; (80026e4 <menu+0x1334>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00e      	beq.n	80024bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800249e:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <menu+0x1338>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <menu+0x1338>)
 80024a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80024aa:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <menu+0x1338>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d902      	bls.n	80024b8 <menu+0x1108>
				kapiSecimleri = 0;
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <menu+0x1338>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024b8:	f002 fafc 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024bc:	2104      	movs	r1, #4
 80024be:	4888      	ldr	r0, [pc, #544]	; (80026e0 <menu+0x1330>)
 80024c0:	f006 ff76 	bl	80093b0 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <menu+0x1146>
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <menu+0x1334>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80024d8:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <menu+0x1338>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b81      	ldr	r3, [pc, #516]	; (80026e8 <menu+0x1338>)
 80024e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <menu+0x1338>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d902      	bls.n	80024f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <menu+0x1338>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024f2:	f002 fadf 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f6:	2108      	movs	r1, #8
 80024f8:	4879      	ldr	r0, [pc, #484]	; (80026e0 <menu+0x1330>)
 80024fa:	f006 ff59 	bl	80093b0 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d118      	bne.n	8002536 <menu+0x1186>
 8002504:	4b77      	ldr	r3, [pc, #476]	; (80026e4 <menu+0x1334>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002512:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <menu+0x1338>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <menu+0x133c>)
 8002518:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <menu+0x1338>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <menu+0x1180>
				altLimit = 1;
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <menu+0x1340>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002528:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <menu+0x1340>)
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <menu+0x133c>)
 800252e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002530:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <menu+0x1344>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <menu+0x1348>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b08      	cmp	r3, #8
 800253c:	f040 8092 	bne.w	8002664 <menu+0x12b4>
		if(dilSecim == 0) {
 8002540:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <menu+0x1328>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002548:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <menu+0x134c>)
 800254a:	2101      	movs	r1, #1
 800254c:	2001      	movs	r0, #1
 800254e:	f005 fc09 	bl	8007d64 <lcd_print>
 8002552:	e008      	b.n	8002566 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <menu+0x1328>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d104      	bne.n	8002566 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800255c:	4a68      	ldr	r2, [pc, #416]	; (8002700 <menu+0x1350>)
 800255e:	2101      	movs	r1, #1
 8002560:	2001      	movs	r0, #1
 8002562:	f005 fbff 	bl	8007d64 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <menu+0x1354>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <menu+0x11e6>
			if(dilSecim == 0) {
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <menu+0x1328>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002576:	4a64      	ldr	r2, [pc, #400]	; (8002708 <menu+0x1358>)
 8002578:	2101      	movs	r1, #1
 800257a:	2002      	movs	r0, #2
 800257c:	f005 fbf2 	bl	8007d64 <lcd_print>
 8002580:	e020      	b.n	80025c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002582:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <menu+0x1328>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11c      	bne.n	80025c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800258a:	4a60      	ldr	r2, [pc, #384]	; (800270c <menu+0x135c>)
 800258c:	2101      	movs	r1, #1
 800258e:	2002      	movs	r0, #2
 8002590:	f005 fbe8 	bl	8007d64 <lcd_print>
 8002594:	e016      	b.n	80025c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <menu+0x1354>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d112      	bne.n	80025c4 <menu+0x1214>
			if(dilSecim == 0){
 800259e:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <menu+0x1328>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80025a6:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <menu+0x1360>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	2002      	movs	r0, #2
 80025ac:	f005 fbda 	bl	8007d64 <lcd_print>
 80025b0:	e008      	b.n	80025c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <menu+0x1328>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d104      	bne.n	80025c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <menu+0x1364>)
 80025bc:	2101      	movs	r1, #1
 80025be:	2002      	movs	r0, #2
 80025c0:	f005 fbd0 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c4:	2102      	movs	r1, #2
 80025c6:	4846      	ldr	r0, [pc, #280]	; (80026e0 <menu+0x1330>)
 80025c8:	f006 fef2 	bl	80093b0 <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <menu+0x124e>
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <menu+0x1334>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <menu+0x1354>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b46      	ldr	r3, [pc, #280]	; (8002704 <menu+0x1354>)
 80025ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <menu+0x1354>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d902      	bls.n	80025fa <menu+0x124a>
				kapiAcTipi = 0;
 80025f4:	4b43      	ldr	r3, [pc, #268]	; (8002704 <menu+0x1354>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fa:	f002 fa5b 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2104      	movs	r1, #4
 8002600:	4837      	ldr	r0, [pc, #220]	; (80026e0 <menu+0x1330>)
 8002602:	f006 fed5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d115      	bne.n	8002638 <menu+0x1288>
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <menu+0x1334>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <menu+0x1354>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <menu+0x1354>)
 8002624:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <menu+0x1354>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <menu+0x1284>
		   		kapiAcTipi = 1;
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <menu+0x1354>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002634:	f002 fa3e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002638:	2108      	movs	r1, #8
 800263a:	4829      	ldr	r0, [pc, #164]	; (80026e0 <menu+0x1330>)
 800263c:	f006 feb8 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10e      	bne.n	8002664 <menu+0x12b4>
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <menu+0x1334>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <menu+0x1354>)
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <menu+0x133c>)
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <menu+0x1344>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <menu+0x1348>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	f040 80b9 	bne.w	80027e0 <menu+0x1430>
		if(dilSecim == 0){
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <menu+0x1328>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002676:	4a28      	ldr	r2, [pc, #160]	; (8002718 <menu+0x1368>)
 8002678:	2101      	movs	r1, #1
 800267a:	2001      	movs	r0, #1
 800267c:	f005 fb72 	bl	8007d64 <lcd_print>
 8002680:	e008      	b.n	8002694 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <menu+0x1328>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800268a:	4a24      	ldr	r2, [pc, #144]	; (800271c <menu+0x136c>)
 800268c:	2101      	movs	r1, #1
 800268e:	2001      	movs	r0, #1
 8002690:	f005 fb68 	bl	8007d64 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <menu+0x1370>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <menu+0x1374>)
 800269e:	2101      	movs	r1, #1
 80026a0:	2002      	movs	r0, #2
 80026a2:	f005 fb5f 	bl	8007d64 <lcd_print>
 80026a6:	e04c      	b.n	8002742 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <menu+0x1370>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d13f      	bne.n	8002730 <menu+0x1380>
			if(dilSecim == 0){
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <menu+0x1328>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <menu+0x1378>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	2002      	movs	r0, #2
 80026be:	f005 fb51 	bl	8007d64 <lcd_print>
 80026c2:	e03e      	b.n	8002742 <menu+0x1392>
			} else if(dilSecim == 1) {
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <menu+0x1328>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d13a      	bne.n	8002742 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <menu+0x137c>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	2002      	movs	r0, #2
 80026d2:	f005 fb47 	bl	8007d64 <lcd_print>
 80026d6:	e034      	b.n	8002742 <menu+0x1392>
 80026d8:	20000245 	.word	0x20000245
 80026dc:	0800d4b0 	.word	0x0800d4b0
 80026e0:	40010800 	.word	0x40010800
 80026e4:	20000253 	.word	0x20000253
 80026e8:	2000022c 	.word	0x2000022c
 80026ec:	20000128 	.word	0x20000128
 80026f0:	2000022a 	.word	0x2000022a
 80026f4:	20000250 	.word	0x20000250
 80026f8:	20000224 	.word	0x20000224
 80026fc:	0800d4c4 	.word	0x0800d4c4
 8002700:	0800d4d8 	.word	0x0800d4d8
 8002704:	20000230 	.word	0x20000230
 8002708:	0800d4ec 	.word	0x0800d4ec
 800270c:	0800d4fc 	.word	0x0800d4fc
 8002710:	0800d50c 	.word	0x0800d50c
 8002714:	0800d520 	.word	0x0800d520
 8002718:	0800d534 	.word	0x0800d534
 800271c:	0800d548 	.word	0x0800d548
 8002720:	2000022d 	.word	0x2000022d
 8002724:	0800d55c 	.word	0x0800d55c
 8002728:	0800d570 	.word	0x0800d570
 800272c:	0800d580 	.word	0x0800d580
			}
		} else if(kapi1Tip == 2) {
 8002730:	4b8a      	ldr	r3, [pc, #552]	; (800295c <menu+0x15ac>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d104      	bne.n	8002742 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002738:	4a89      	ldr	r2, [pc, #548]	; (8002960 <menu+0x15b0>)
 800273a:	2101      	movs	r1, #1
 800273c:	2002      	movs	r0, #2
 800273e:	f005 fb11 	bl	8007d64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002742:	2102      	movs	r1, #2
 8002744:	4887      	ldr	r0, [pc, #540]	; (8002964 <menu+0x15b4>)
 8002746:	f006 fe33 	bl	80093b0 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d115      	bne.n	800277c <menu+0x13cc>
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <menu+0x15b8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f083 0301 	eor.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800275e:	4b7f      	ldr	r3, [pc, #508]	; (800295c <menu+0x15ac>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <menu+0x15ac>)
 8002768:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800276a:	4b7c      	ldr	r3, [pc, #496]	; (800295c <menu+0x15ac>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <menu+0x13c8>
				kapi1Tip = 0;
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <menu+0x15ac>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002778:	f002 f99c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800277c:	2104      	movs	r1, #4
 800277e:	4879      	ldr	r0, [pc, #484]	; (8002964 <menu+0x15b4>)
 8002780:	f006 fe16 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d115      	bne.n	80027b6 <menu+0x1406>
 800278a:	4b77      	ldr	r3, [pc, #476]	; (8002968 <menu+0x15b8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <menu+0x15ac>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b6e      	ldr	r3, [pc, #440]	; (800295c <menu+0x15ac>)
 80027a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <menu+0x15ac>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d902      	bls.n	80027b2 <menu+0x1402>
		   		kapi1Tip = 2;
 80027ac:	4b6b      	ldr	r3, [pc, #428]	; (800295c <menu+0x15ac>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b2:	f002 f97f 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b6:	2108      	movs	r1, #8
 80027b8:	486a      	ldr	r0, [pc, #424]	; (8002964 <menu+0x15b4>)
 80027ba:	f006 fdf9 	bl	80093b0 <HAL_GPIO_ReadPin>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10d      	bne.n	80027e0 <menu+0x1430>
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <menu+0x15b8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80027d2:	4b62      	ldr	r3, [pc, #392]	; (800295c <menu+0x15ac>)
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <menu+0x15bc>)
 80027d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <menu+0x15c0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <menu+0x15c4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b0a      	cmp	r3, #10
 80027e6:	d17f      	bne.n	80028e8 <menu+0x1538>
		if(dilSecim == 0) {
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <menu+0x15c8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <menu+0x15cc>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	2001      	movs	r0, #1
 80027f6:	f005 fab5 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <menu+0x15d0>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2002      	movs	r0, #2
 8002800:	f005 fab0 	bl	8007d64 <lcd_print>
 8002804:	e00d      	b.n	8002822 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <menu+0x15c8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d109      	bne.n	8002822 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800280e:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <menu+0x15d4>)
 8002810:	2101      	movs	r1, #1
 8002812:	2001      	movs	r0, #1
 8002814:	f005 faa6 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002818:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <menu+0x15d8>)
 800281a:	2101      	movs	r1, #1
 800281c:	2002      	movs	r0, #2
 800281e:	f005 faa1 	bl	8007d64 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002822:	4b5a      	ldr	r3, [pc, #360]	; (800298c <menu+0x15dc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	220a      	movs	r2, #10
 8002828:	4959      	ldr	r1, [pc, #356]	; (8002990 <menu+0x15e0>)
 800282a:	4618      	mov	r0, r3
 800282c:	f009 fdec 	bl	800c408 <itoa>
		lcd_print(2,16,snum);
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <menu+0x15e0>)
 8002832:	2110      	movs	r1, #16
 8002834:	2002      	movs	r0, #2
 8002836:	f005 fa95 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800283a:	2102      	movs	r1, #2
 800283c:	4849      	ldr	r0, [pc, #292]	; (8002964 <menu+0x15b4>)
 800283e:	f006 fdb7 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	d119      	bne.n	800287c <menu+0x14cc>
 8002848:	4b47      	ldr	r3, [pc, #284]	; (8002968 <menu+0x15b8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <menu+0x14cc>
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <menu+0x15ac>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10e      	bne.n	800287c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <menu+0x15dc>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <menu+0x15dc>)
 8002868:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800286a:	4b48      	ldr	r3, [pc, #288]	; (800298c <menu+0x15dc>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d902      	bls.n	8002878 <menu+0x14c8>
				kapi1AcSure = 0;
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <menu+0x15dc>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002878:	f002 f91c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800287c:	2104      	movs	r1, #4
 800287e:	4839      	ldr	r0, [pc, #228]	; (8002964 <menu+0x15b4>)
 8002880:	f006 fd96 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d119      	bne.n	80028be <menu+0x150e>
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <menu+0x15b8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <menu+0x150e>
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <menu+0x15ac>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10e      	bne.n	80028be <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <menu+0x15dc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <menu+0x15dc>)
 80028aa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <menu+0x15dc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d902      	bls.n	80028ba <menu+0x150a>
		   		kapi1AcSure = 5;
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <menu+0x15dc>)
 80028b6:	2205      	movs	r2, #5
 80028b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ba:	f002 f8fb 	bl	8004ab4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028be:	2108      	movs	r1, #8
 80028c0:	4828      	ldr	r0, [pc, #160]	; (8002964 <menu+0x15b4>)
 80028c2:	f006 fd75 	bl	80093b0 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10d      	bne.n	80028e8 <menu+0x1538>
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <menu+0x15b8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <menu+0x15dc>)
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <menu+0x15bc>)
 80028e0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <menu+0x15c0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <menu+0x15c4>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b0b      	cmp	r3, #11
 80028ee:	f040 80b5 	bne.w	8002a5c <menu+0x16ac>
		if(dilSecim == 0) {
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <menu+0x15c8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <menu+0x15e4>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2001      	movs	r0, #1
 8002900:	f005 fa30 	bl	8007d64 <lcd_print>
 8002904:	e008      	b.n	8002918 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <menu+0x15c8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <menu+0x15e8>)
 8002910:	2101      	movs	r1, #1
 8002912:	2001      	movs	r0, #1
 8002914:	f005 fa26 	bl	8007d64 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <menu+0x15ec>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <menu+0x15f0>)
 8002922:	2101      	movs	r1, #1
 8002924:	2002      	movs	r0, #2
 8002926:	f005 fa1d 	bl	8007d64 <lcd_print>
 800292a:	e048      	b.n	80029be <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <menu+0x15ec>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13b      	bne.n	80029ac <menu+0x15fc>
			if(dilSecim == 0) {
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <menu+0x15c8>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <menu+0x15f4>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f005 fa0f 	bl	8007d64 <lcd_print>
 8002946:	e03a      	b.n	80029be <menu+0x160e>
			} else if(dilSecim == 1) {
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <menu+0x15c8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d136      	bne.n	80029be <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <menu+0x15f8>)
 8002952:	2101      	movs	r1, #1
 8002954:	2002      	movs	r0, #2
 8002956:	f005 fa05 	bl	8007d64 <lcd_print>
 800295a:	e030      	b.n	80029be <menu+0x160e>
 800295c:	2000022d 	.word	0x2000022d
 8002960:	0800d594 	.word	0x0800d594
 8002964:	40010800 	.word	0x40010800
 8002968:	20000253 	.word	0x20000253
 800296c:	20000128 	.word	0x20000128
 8002970:	20000250 	.word	0x20000250
 8002974:	20000224 	.word	0x20000224
 8002978:	20000245 	.word	0x20000245
 800297c:	0800d5a4 	.word	0x0800d5a4
 8002980:	0800d5b8 	.word	0x0800d5b8
 8002984:	0800d5c8 	.word	0x0800d5c8
 8002988:	0800d5dc 	.word	0x0800d5dc
 800298c:	2000023d 	.word	0x2000023d
 8002990:	20000198 	.word	0x20000198
 8002994:	0800d5ec 	.word	0x0800d5ec
 8002998:	0800d600 	.word	0x0800d600
 800299c:	2000022e 	.word	0x2000022e
 80029a0:	0800d55c 	.word	0x0800d55c
 80029a4:	0800d570 	.word	0x0800d570
 80029a8:	0800d580 	.word	0x0800d580
			}
		} else if(kapi2Tip == 2) {
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <menu+0x1828>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80029b4:	4a89      	ldr	r2, [pc, #548]	; (8002bdc <menu+0x182c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f005 f9d3 	bl	8007d64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029be:	2102      	movs	r1, #2
 80029c0:	4887      	ldr	r0, [pc, #540]	; (8002be0 <menu+0x1830>)
 80029c2:	f006 fcf5 	bl	80093b0 <HAL_GPIO_ReadPin>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d115      	bne.n	80029f8 <menu+0x1648>
 80029cc:	4b85      	ldr	r3, [pc, #532]	; (8002be4 <menu+0x1834>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <menu+0x1828>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <menu+0x1828>)
 80029e4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <menu+0x1828>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <menu+0x1644>
				kapi2Tip = 0;
 80029ee:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <menu+0x1828>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f4:	f002 f85e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f8:	2104      	movs	r1, #4
 80029fa:	4879      	ldr	r0, [pc, #484]	; (8002be0 <menu+0x1830>)
 80029fc:	f006 fcd8 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d115      	bne.n	8002a32 <menu+0x1682>
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <menu+0x1834>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a14:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <menu+0x1828>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <menu+0x1828>)
 8002a1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a20:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <menu+0x1828>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d902      	bls.n	8002a2e <menu+0x167e>
		   		kapi2Tip = 2;
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <menu+0x1828>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2e:	f002 f841 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a32:	2108      	movs	r1, #8
 8002a34:	486a      	ldr	r0, [pc, #424]	; (8002be0 <menu+0x1830>)
 8002a36:	f006 fcbb 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10d      	bne.n	8002a5c <menu+0x16ac>
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <menu+0x1834>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <menu+0x1828>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <menu+0x1838>)
 8002a54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <menu+0x183c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <menu+0x1840>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d17f      	bne.n	8002b64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <menu+0x1844>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a6c:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <menu+0x1848>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	2001      	movs	r0, #1
 8002a72:	f005 f977 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a76:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <menu+0x184c>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f005 f972 	bl	8007d64 <lcd_print>
 8002a80:	e00d      	b.n	8002a9e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <menu+0x1844>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d109      	bne.n	8002a9e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a8a:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <menu+0x1850>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f005 f968 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a94:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <menu+0x1854>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	2002      	movs	r0, #2
 8002a9a:	f005 f963 	bl	8007d64 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <menu+0x1858>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	220a      	movs	r2, #10
 8002aa4:	4959      	ldr	r1, [pc, #356]	; (8002c0c <menu+0x185c>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f009 fcae 	bl	800c408 <itoa>
		lcd_print(2,16,snum);
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <menu+0x185c>)
 8002aae:	2110      	movs	r1, #16
 8002ab0:	2002      	movs	r0, #2
 8002ab2:	f005 f957 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4849      	ldr	r0, [pc, #292]	; (8002be0 <menu+0x1830>)
 8002aba:	f006 fc79 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d119      	bne.n	8002af8 <menu+0x1748>
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <menu+0x1834>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <menu+0x1748>
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <menu+0x1828>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002ada:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <menu+0x1858>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <menu+0x1858>)
 8002ae4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <menu+0x1858>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d902      	bls.n	8002af4 <menu+0x1744>
				kapi2AcSure = 0;
 8002aee:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <menu+0x1858>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af4:	f001 ffde 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002af8:	2104      	movs	r1, #4
 8002afa:	4839      	ldr	r0, [pc, #228]	; (8002be0 <menu+0x1830>)
 8002afc:	f006 fc58 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d119      	bne.n	8002b3a <menu+0x178a>
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <menu+0x1834>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <menu+0x178a>
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <menu+0x1828>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <menu+0x1858>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <menu+0x1858>)
 8002b26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <menu+0x1858>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d902      	bls.n	8002b36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <menu+0x1858>)
 8002b32:	2205      	movs	r2, #5
 8002b34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b36:	f001 ffbd 	bl	8004ab4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	4828      	ldr	r0, [pc, #160]	; (8002be0 <menu+0x1830>)
 8002b3e:	f006 fc37 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10d      	bne.n	8002b64 <menu+0x17b4>
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <menu+0x1834>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <menu+0x1858>)
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <menu+0x1838>)
 8002b5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <menu+0x183c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <menu+0x1840>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b0d      	cmp	r3, #13
 8002b6a:	f040 80b5 	bne.w	8002cd8 <menu+0x1928>
		if(dilSecim == 0) {
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <menu+0x1844>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <menu+0x1860>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f005 f8f2 	bl	8007d64 <lcd_print>
 8002b80:	e008      	b.n	8002b94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <menu+0x1844>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d104      	bne.n	8002b94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <menu+0x1864>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f005 f8e8 	bl	8007d64 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <menu+0x1868>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <menu+0x186c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f005 f8df 	bl	8007d64 <lcd_print>
 8002ba6:	e048      	b.n	8002c3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <menu+0x1868>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d13b      	bne.n	8002c28 <menu+0x1878>
			if(dilSecim == 0) {
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <menu+0x1844>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <menu+0x1870>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f005 f8d1 	bl	8007d64 <lcd_print>
 8002bc2:	e03a      	b.n	8002c3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <menu+0x1844>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d136      	bne.n	8002c3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <menu+0x1874>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f005 f8c7 	bl	8007d64 <lcd_print>
 8002bd6:	e030      	b.n	8002c3a <menu+0x188a>
 8002bd8:	2000022e 	.word	0x2000022e
 8002bdc:	0800d594 	.word	0x0800d594
 8002be0:	40010800 	.word	0x40010800
 8002be4:	20000253 	.word	0x20000253
 8002be8:	20000128 	.word	0x20000128
 8002bec:	20000250 	.word	0x20000250
 8002bf0:	20000224 	.word	0x20000224
 8002bf4:	20000245 	.word	0x20000245
 8002bf8:	0800d614 	.word	0x0800d614
 8002bfc:	0800d5b8 	.word	0x0800d5b8
 8002c00:	0800d628 	.word	0x0800d628
 8002c04:	0800d5dc 	.word	0x0800d5dc
 8002c08:	2000023e 	.word	0x2000023e
 8002c0c:	20000198 	.word	0x20000198
 8002c10:	0800d63c 	.word	0x0800d63c
 8002c14:	0800d650 	.word	0x0800d650
 8002c18:	2000022f 	.word	0x2000022f
 8002c1c:	0800d55c 	.word	0x0800d55c
 8002c20:	0800d570 	.word	0x0800d570
 8002c24:	0800d580 	.word	0x0800d580
			}
		} else if(kapitablaTip == 2) {
 8002c28:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <menu+0x19e8>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d104      	bne.n	8002c3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002c30:	4a5a      	ldr	r2, [pc, #360]	; (8002d9c <menu+0x19ec>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f005 f895 	bl	8007d64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4858      	ldr	r0, [pc, #352]	; (8002da0 <menu+0x19f0>)
 8002c3e:	f006 fbb7 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d115      	bne.n	8002c74 <menu+0x18c4>
 8002c48:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <menu+0x19f4>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c56:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <menu+0x19e8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <menu+0x19e8>)
 8002c60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c62:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <menu+0x19e8>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <menu+0x18c0>
				kapitablaTip = 0;
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <menu+0x19e8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c70:	f001 ff20 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c74:	2104      	movs	r1, #4
 8002c76:	484a      	ldr	r0, [pc, #296]	; (8002da0 <menu+0x19f0>)
 8002c78:	f006 fb9a 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d115      	bne.n	8002cae <menu+0x18fe>
 8002c82:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <menu+0x19f4>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <menu+0x19e8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <menu+0x19e8>)
 8002c9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <menu+0x19e8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d902      	bls.n	8002caa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <menu+0x19e8>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002caa:	f001 ff03 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cae:	2108      	movs	r1, #8
 8002cb0:	483b      	ldr	r0, [pc, #236]	; (8002da0 <menu+0x19f0>)
 8002cb2:	f006 fb7d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10d      	bne.n	8002cd8 <menu+0x1928>
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <menu+0x19f4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f083 0301 	eor.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002cca:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <menu+0x19e8>)
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <menu+0x19f8>)
 8002cd0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <menu+0x19fc>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <menu+0x1a00>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b0e      	cmp	r3, #14
 8002cde:	f040 80f2 	bne.w	8002ec6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <menu+0x1a04>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <menu+0x1a08>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f005 f838 	bl	8007d64 <lcd_print>
 8002cf4:	e008      	b.n	8002d08 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <menu+0x1a04>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <menu+0x1a0c>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	2001      	movs	r0, #1
 8002d04:	f005 f82e 	bl	8007d64 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <menu+0x1a10>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <menu+0x1988>
			if(dilSecim == 0){
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <menu+0x1a04>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <menu+0x1a14>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f005 f821 	bl	8007d64 <lcd_print>
 8002d22:	e071      	b.n	8002e08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <menu+0x1a04>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d16d      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <menu+0x1a18>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2002      	movs	r0, #2
 8002d32:	f005 f817 	bl	8007d64 <lcd_print>
 8002d36:	e067      	b.n	8002e08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <menu+0x1a10>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d112      	bne.n	8002d66 <menu+0x19b6>
			if(dilSecim == 0){
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <menu+0x1a04>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <menu+0x1a1c>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f005 f809 	bl	8007d64 <lcd_print>
			}
			if(dilSecim == 1){
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <menu+0x1a04>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d156      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <menu+0x1a20>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2002      	movs	r0, #2
 8002d60:	f005 f800 	bl	8007d64 <lcd_print>
 8002d64:	e050      	b.n	8002e08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <menu+0x1a10>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d136      	bne.n	8002ddc <menu+0x1a2c>
			if(dilSecim == 0){
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <menu+0x1a04>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <menu+0x1a24>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f004 fff2 	bl	8007d64 <lcd_print>
 8002d80:	e042      	b.n	8002e08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <menu+0x1a04>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d13e      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <menu+0x1a28>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f004 ffe8 	bl	8007d64 <lcd_print>
 8002d94:	e038      	b.n	8002e08 <menu+0x1a58>
 8002d96:	bf00      	nop
 8002d98:	2000022f 	.word	0x2000022f
 8002d9c:	0800d594 	.word	0x0800d594
 8002da0:	40010800 	.word	0x40010800
 8002da4:	20000253 	.word	0x20000253
 8002da8:	20000128 	.word	0x20000128
 8002dac:	20000250 	.word	0x20000250
 8002db0:	20000224 	.word	0x20000224
 8002db4:	20000245 	.word	0x20000245
 8002db8:	0800d664 	.word	0x0800d664
 8002dbc:	0800d678 	.word	0x0800d678
 8002dc0:	20000231 	.word	0x20000231
 8002dc4:	0800d68c 	.word	0x0800d68c
 8002dc8:	0800d69c 	.word	0x0800d69c
 8002dcc:	0800d6ac 	.word	0x0800d6ac
 8002dd0:	0800d6bc 	.word	0x0800d6bc
 8002dd4:	0800d6cc 	.word	0x0800d6cc
 8002dd8:	0800d6e0 	.word	0x0800d6e0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ddc:	4b9b      	ldr	r3, [pc, #620]	; (800304c <menu+0x1c9c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d111      	bne.n	8002e08 <menu+0x1a58>
			if(dilSecim == 0) {
 8002de4:	4b9a      	ldr	r3, [pc, #616]	; (8003050 <menu+0x1ca0>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002dec:	4a99      	ldr	r2, [pc, #612]	; (8003054 <menu+0x1ca4>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2002      	movs	r0, #2
 8002df2:	f004 ffb7 	bl	8007d64 <lcd_print>
			}
			if(dilSecim == 1) {
 8002df6:	4b96      	ldr	r3, [pc, #600]	; (8003050 <menu+0x1ca0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d104      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002dfe:	4a96      	ldr	r2, [pc, #600]	; (8003058 <menu+0x1ca8>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2002      	movs	r0, #2
 8002e04:	f004 ffae 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4894      	ldr	r0, [pc, #592]	; (800305c <menu+0x1cac>)
 8002e0c:	f006 fad0 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d115      	bne.n	8002e42 <menu+0x1a92>
 8002e16:	4b92      	ldr	r3, [pc, #584]	; (8003060 <menu+0x1cb0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e24:	4b89      	ldr	r3, [pc, #548]	; (800304c <menu+0x1c9c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b87      	ldr	r3, [pc, #540]	; (800304c <menu+0x1c9c>)
 8002e2e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002e30:	4b86      	ldr	r3, [pc, #536]	; (800304c <menu+0x1c9c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <menu+0x1c9c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e3e:	f001 fe39 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e42:	2104      	movs	r1, #4
 8002e44:	4885      	ldr	r0, [pc, #532]	; (800305c <menu+0x1cac>)
 8002e46:	f006 fab3 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d115      	bne.n	8002e7c <menu+0x1acc>
 8002e50:	4b83      	ldr	r3, [pc, #524]	; (8003060 <menu+0x1cb0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	f083 0301 	eor.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e5e:	4b7b      	ldr	r3, [pc, #492]	; (800304c <menu+0x1c9c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <menu+0x1c9c>)
 8002e68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e6a:	4b78      	ldr	r3, [pc, #480]	; (800304c <menu+0x1c9c>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d902      	bls.n	8002e78 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <menu+0x1c9c>)
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e78:	f001 fe1c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	4877      	ldr	r0, [pc, #476]	; (800305c <menu+0x1cac>)
 8002e80:	f006 fa96 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11d      	bne.n	8002ec6 <menu+0x1b16>
 8002e8a:	4b75      	ldr	r3, [pc, #468]	; (8003060 <menu+0x1cb0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f083 0301 	eor.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <menu+0x1c9c>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b71      	ldr	r3, [pc, #452]	; (8003064 <menu+0x1cb4>)
 8002e9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	; (800304c <menu+0x1c9c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <menu+0x1b02>
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <menu+0x1c9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d106      	bne.n	8002ec0 <menu+0x1b10>
				altLimit = 1;
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <menu+0x1cb8>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <menu+0x1cb8>)
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <menu+0x1cb4>)
 8002ebe:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <menu+0x1cbc>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <menu+0x1cc0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d17f      	bne.n	8002fce <menu+0x1c1e>
		if(dilSecim == 0) {
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <menu+0x1ca0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <menu+0x1cc4>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2001      	movs	r0, #1
 8002edc:	f004 ff42 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ee0:	4a65      	ldr	r2, [pc, #404]	; (8003078 <menu+0x1cc8>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	f004 ff3d 	bl	8007d64 <lcd_print>
 8002eea:	e00d      	b.n	8002f08 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <menu+0x1ca0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d109      	bne.n	8002f08 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ef4:	4a61      	ldr	r2, [pc, #388]	; (800307c <menu+0x1ccc>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f004 ff33 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002efe:	4a60      	ldr	r2, [pc, #384]	; (8003080 <menu+0x1cd0>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2002      	movs	r0, #2
 8002f04:	f004 ff2e 	bl	8007d64 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f08:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <menu+0x1cd4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	495e      	ldr	r1, [pc, #376]	; (8003088 <menu+0x1cd8>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f009 fa79 	bl	800c408 <itoa>
		lcd_print(2,16,snum);
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <menu+0x1cd8>)
 8002f18:	2110      	movs	r1, #16
 8002f1a:	2002      	movs	r0, #2
 8002f1c:	f004 ff22 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f20:	2102      	movs	r1, #2
 8002f22:	484e      	ldr	r0, [pc, #312]	; (800305c <menu+0x1cac>)
 8002f24:	f006 fa44 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d119      	bne.n	8002f62 <menu+0x1bb2>
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <menu+0x1cb0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <menu+0x1bb2>
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <menu+0x1cdc>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10e      	bne.n	8002f62 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <menu+0x1cd4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <menu+0x1cd4>)
 8002f4e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <menu+0x1cd4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d902      	bls.n	8002f5e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <menu+0x1cd4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f5e:	f001 fda9 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f62:	2104      	movs	r1, #4
 8002f64:	483d      	ldr	r0, [pc, #244]	; (800305c <menu+0x1cac>)
 8002f66:	f006 fa23 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d119      	bne.n	8002fa4 <menu+0x1bf4>
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <menu+0x1cb0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f083 0301 	eor.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <menu+0x1bf4>
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <menu+0x1cdc>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <menu+0x1cd4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <menu+0x1cd4>)
 8002f90:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <menu+0x1cd4>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <menu+0x1cd4>)
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002fa0:	f001 fd88 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	482d      	ldr	r0, [pc, #180]	; (800305c <menu+0x1cac>)
 8002fa8:	f006 fa02 	bl	80093b0 <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <menu+0x1c1e>
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <menu+0x1cb0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <menu+0x1cd4>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <menu+0x1cb4>)
 8002fc6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <menu+0x1cbc>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <menu+0x1cc0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	f040 80bc 	bne.w	8003150 <menu+0x1da0>
		if(dilSecim == 0) {
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <menu+0x1ca0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <menu+0x1ce0>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f004 febd 	bl	8007d64 <lcd_print>
 8002fea:	e008      	b.n	8002ffe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <menu+0x1ca0>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d104      	bne.n	8002ffe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <menu+0x1ce4>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f004 feb3 	bl	8007d64 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <menu+0x1ce8>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <menu+0x1ca0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800300e:	4a11      	ldr	r2, [pc, #68]	; (8003054 <menu+0x1ca4>)
 8003010:	2101      	movs	r1, #1
 8003012:	2002      	movs	r0, #2
 8003014:	f004 fea6 	bl	8007d64 <lcd_print>
 8003018:	e04b      	b.n	80030b2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <menu+0x1ca0>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d147      	bne.n	80030b2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <menu+0x1ca8>)
 8003024:	2101      	movs	r1, #1
 8003026:	2002      	movs	r0, #2
 8003028:	f004 fe9c 	bl	8007d64 <lcd_print>
 800302c:	e041      	b.n	80030b2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <menu+0x1ce8>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d13d      	bne.n	80030b2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <menu+0x1ca0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d130      	bne.n	80030a0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <menu+0x1cec>)
 8003040:	2101      	movs	r1, #1
 8003042:	2002      	movs	r0, #2
 8003044:	f004 fe8e 	bl	8007d64 <lcd_print>
 8003048:	e033      	b.n	80030b2 <menu+0x1d02>
 800304a:	bf00      	nop
 800304c:	20000231 	.word	0x20000231
 8003050:	20000245 	.word	0x20000245
 8003054:	0800d354 	.word	0x0800d354
 8003058:	0800d368 	.word	0x0800d368
 800305c:	40010800 	.word	0x40010800
 8003060:	20000253 	.word	0x20000253
 8003064:	20000128 	.word	0x20000128
 8003068:	2000022a 	.word	0x2000022a
 800306c:	20000250 	.word	0x20000250
 8003070:	20000224 	.word	0x20000224
 8003074:	0800d6f4 	.word	0x0800d6f4
 8003078:	0800d5b8 	.word	0x0800d5b8
 800307c:	0800d708 	.word	0x0800d708
 8003080:	0800d5dc 	.word	0x0800d5dc
 8003084:	2000023f 	.word	0x2000023f
 8003088:	20000198 	.word	0x20000198
 800308c:	2000022f 	.word	0x2000022f
 8003090:	0800d71c 	.word	0x0800d71c
 8003094:	0800d730 	.word	0x0800d730
 8003098:	20000232 	.word	0x20000232
 800309c:	0800d3b4 	.word	0x0800d3b4
			} else if(dilSecim == 1) {
 80030a0:	4b99      	ldr	r3, [pc, #612]	; (8003308 <menu+0x1f58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d104      	bne.n	80030b2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80030a8:	4a98      	ldr	r2, [pc, #608]	; (800330c <menu+0x1f5c>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	2002      	movs	r0, #2
 80030ae:	f004 fe59 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2102      	movs	r1, #2
 80030b4:	4896      	ldr	r0, [pc, #600]	; (8003310 <menu+0x1f60>)
 80030b6:	f006 f97b 	bl	80093b0 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d115      	bne.n	80030ec <menu+0x1d3c>
 80030c0:	4b94      	ldr	r3, [pc, #592]	; (8003314 <menu+0x1f64>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80030ce:	4b92      	ldr	r3, [pc, #584]	; (8003318 <menu+0x1f68>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b90      	ldr	r3, [pc, #576]	; (8003318 <menu+0x1f68>)
 80030d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80030da:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <menu+0x1f68>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d902      	bls.n	80030e8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80030e2:	4b8d      	ldr	r3, [pc, #564]	; (8003318 <menu+0x1f68>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030e8:	f001 fce4 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ec:	2104      	movs	r1, #4
 80030ee:	4888      	ldr	r0, [pc, #544]	; (8003310 <menu+0x1f60>)
 80030f0:	f006 f95e 	bl	80093b0 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d115      	bne.n	8003126 <menu+0x1d76>
 80030fa:	4b86      	ldr	r3, [pc, #536]	; (8003314 <menu+0x1f64>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003108:	4b83      	ldr	r3, [pc, #524]	; (8003318 <menu+0x1f68>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b81      	ldr	r3, [pc, #516]	; (8003318 <menu+0x1f68>)
 8003112:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003114:	4b80      	ldr	r3, [pc, #512]	; (8003318 <menu+0x1f68>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800311c:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <menu+0x1f68>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003122:	f001 fcc7 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003126:	2108      	movs	r1, #8
 8003128:	4879      	ldr	r0, [pc, #484]	; (8003310 <menu+0x1f60>)
 800312a:	f006 f941 	bl	80093b0 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10d      	bne.n	8003150 <menu+0x1da0>
 8003134:	4b77      	ldr	r3, [pc, #476]	; (8003314 <menu+0x1f64>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003142:	4b75      	ldr	r3, [pc, #468]	; (8003318 <menu+0x1f68>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b75      	ldr	r3, [pc, #468]	; (800331c <menu+0x1f6c>)
 8003148:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <menu+0x1f70>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003150:	4b74      	ldr	r3, [pc, #464]	; (8003324 <menu+0x1f74>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b11      	cmp	r3, #17
 8003156:	f040 80c3 	bne.w	80032e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800315a:	4b6b      	ldr	r3, [pc, #428]	; (8003308 <menu+0x1f58>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003162:	4a71      	ldr	r2, [pc, #452]	; (8003328 <menu+0x1f78>)
 8003164:	2101      	movs	r1, #1
 8003166:	2001      	movs	r0, #1
 8003168:	f004 fdfc 	bl	8007d64 <lcd_print>
 800316c:	e008      	b.n	8003180 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800316e:	4b66      	ldr	r3, [pc, #408]	; (8003308 <menu+0x1f58>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003176:	4a6d      	ldr	r2, [pc, #436]	; (800332c <menu+0x1f7c>)
 8003178:	2101      	movs	r1, #1
 800317a:	2001      	movs	r0, #1
 800317c:	f004 fdf2 	bl	8007d64 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003180:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <menu+0x1f80>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d113      	bne.n	80031b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003188:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <menu+0x1f58>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003190:	4a68      	ldr	r2, [pc, #416]	; (8003334 <menu+0x1f84>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f004 fde5 	bl	8007d64 <lcd_print>
 800319a:	e038      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800319c:	4b5a      	ldr	r3, [pc, #360]	; (8003308 <menu+0x1f58>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d134      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80031a4:	4a64      	ldr	r2, [pc, #400]	; (8003338 <menu+0x1f88>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f004 fddb 	bl	8007d64 <lcd_print>
 80031ae:	e02e      	b.n	800320e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031b0:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <menu+0x1f80>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d113      	bne.n	80031e0 <menu+0x1e30>
			if(dilSecim == 0){
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <menu+0x1f58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80031c0:	4a5e      	ldr	r2, [pc, #376]	; (800333c <menu+0x1f8c>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f004 fdcd 	bl	8007d64 <lcd_print>
 80031ca:	e020      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031cc:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <menu+0x1f58>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11c      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80031d4:	4a5a      	ldr	r2, [pc, #360]	; (8003340 <menu+0x1f90>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	2002      	movs	r0, #2
 80031da:	f004 fdc3 	bl	8007d64 <lcd_print>
 80031de:	e016      	b.n	800320e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80031e0:	4b53      	ldr	r3, [pc, #332]	; (8003330 <menu+0x1f80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d112      	bne.n	800320e <menu+0x1e5e>
			if(dilSecim == 0) {
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <menu+0x1f58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <menu+0x1f94>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f004 fdb5 	bl	8007d64 <lcd_print>
 80031fa:	e008      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <menu+0x1f58>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d104      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003204:	4a50      	ldr	r2, [pc, #320]	; (8003348 <menu+0x1f98>)
 8003206:	2101      	movs	r1, #1
 8003208:	2002      	movs	r0, #2
 800320a:	f004 fdab 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800320e:	2102      	movs	r1, #2
 8003210:	483f      	ldr	r0, [pc, #252]	; (8003310 <menu+0x1f60>)
 8003212:	f006 f8cd 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d115      	bne.n	8003248 <menu+0x1e98>
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <menu+0x1f64>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <menu+0x1f80>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <menu+0x1f80>)
 8003234:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003236:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <menu+0x1f80>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800323e:	4b3c      	ldr	r3, [pc, #240]	; (8003330 <menu+0x1f80>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003244:	f001 fc36 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003248:	2104      	movs	r1, #4
 800324a:	4831      	ldr	r0, [pc, #196]	; (8003310 <menu+0x1f60>)
 800324c:	f006 f8b0 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d115      	bne.n	8003282 <menu+0x1ed2>
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <menu+0x1f64>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <menu+0x1f80>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b01      	subs	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <menu+0x1f80>)
 800326e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <menu+0x1f80>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d902      	bls.n	800327e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <menu+0x1f80>)
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800327e:	f001 fc19 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003282:	2108      	movs	r1, #8
 8003284:	4822      	ldr	r0, [pc, #136]	; (8003310 <menu+0x1f60>)
 8003286:	f006 f893 	bl	80093b0 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d127      	bne.n	80032e0 <menu+0x1f30>
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <menu+0x1f64>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <menu+0x1f80>)
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <menu+0x1f6c>)
 80032a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <menu+0x1f80>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <menu+0x1f06>
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <menu+0x1f80>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d106      	bne.n	80032c4 <menu+0x1f14>
				calismaSekli = 0;
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <menu+0x1f9c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <menu+0x1f9c>)
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <menu+0x1f6c>)
 80032c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <menu+0x1f80>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <menu+0x1fa0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <menu+0x1fa0>)
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <menu+0x1f6c>)
 80032d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <menu+0x1f70>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <menu+0x1f74>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b12      	cmp	r3, #18
 80032e6:	f040 80d5 	bne.w	8003494 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <menu+0x1f80>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d13c      	bne.n	800336c <menu+0x1fbc>
			if(dilSecim == 0) {
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <menu+0x1f58>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12e      	bne.n	8003358 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <menu+0x1fa4>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	2001      	movs	r0, #1
 8003300:	f004 fd30 	bl	8007d64 <lcd_print>
 8003304:	e048      	b.n	8003398 <menu+0x1fe8>
 8003306:	bf00      	nop
 8003308:	20000245 	.word	0x20000245
 800330c:	0800d3c8 	.word	0x0800d3c8
 8003310:	40010800 	.word	0x40010800
 8003314:	20000253 	.word	0x20000253
 8003318:	20000232 	.word	0x20000232
 800331c:	20000128 	.word	0x20000128
 8003320:	20000250 	.word	0x20000250
 8003324:	20000224 	.word	0x20000224
 8003328:	0800d744 	.word	0x0800d744
 800332c:	0800d758 	.word	0x0800d758
 8003330:	20000233 	.word	0x20000233
 8003334:	0800d76c 	.word	0x0800d76c
 8003338:	0800d77c 	.word	0x0800d77c
 800333c:	0800d78c 	.word	0x0800d78c
 8003340:	0800d79c 	.word	0x0800d79c
 8003344:	0800d354 	.word	0x0800d354
 8003348:	0800d368 	.word	0x0800d368
 800334c:	20000225 	.word	0x20000225
 8003350:	20000236 	.word	0x20000236
 8003354:	0800d7ac 	.word	0x0800d7ac
			} else if(dilSecim == 1) {
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <menu+0x2198>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d11b      	bne.n	8003398 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003360:	4a7a      	ldr	r2, [pc, #488]	; (800354c <menu+0x219c>)
 8003362:	2101      	movs	r1, #1
 8003364:	2001      	movs	r0, #1
 8003366:	f004 fcfd 	bl	8007d64 <lcd_print>
 800336a:	e015      	b.n	8003398 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <menu+0x21a0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d111      	bne.n	8003398 <menu+0x1fe8>
			if(dilSecim == 0){
 8003374:	4b74      	ldr	r3, [pc, #464]	; (8003548 <menu+0x2198>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800337c:	4a75      	ldr	r2, [pc, #468]	; (8003554 <menu+0x21a4>)
 800337e:	2101      	movs	r1, #1
 8003380:	2001      	movs	r0, #1
 8003382:	f004 fcef 	bl	8007d64 <lcd_print>
			}
			if(dilSecim == 1){
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <menu+0x2198>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d104      	bne.n	8003398 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800338e:	4a72      	ldr	r2, [pc, #456]	; (8003558 <menu+0x21a8>)
 8003390:	2101      	movs	r1, #1
 8003392:	2001      	movs	r0, #1
 8003394:	f004 fce6 	bl	8007d64 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003398:	4b70      	ldr	r3, [pc, #448]	; (800355c <menu+0x21ac>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <menu+0x2018>
			if(dilSecim == 0) {
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <menu+0x2198>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80033a8:	4a6d      	ldr	r2, [pc, #436]	; (8003560 <menu+0x21b0>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2002      	movs	r0, #2
 80033ae:	f004 fcd9 	bl	8007d64 <lcd_print>
 80033b2:	e020      	b.n	80033f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <menu+0x2198>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d11c      	bne.n	80033f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80033bc:	4a69      	ldr	r2, [pc, #420]	; (8003564 <menu+0x21b4>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2002      	movs	r0, #2
 80033c2:	f004 fccf 	bl	8007d64 <lcd_print>
 80033c6:	e016      	b.n	80033f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <menu+0x21ac>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d112      	bne.n	80033f6 <menu+0x2046>
			if(dilSecim == 0){
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <menu+0x2198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80033d8:	4a63      	ldr	r2, [pc, #396]	; (8003568 <menu+0x21b8>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2002      	movs	r0, #2
 80033de:	f004 fcc1 	bl	8007d64 <lcd_print>
 80033e2:	e008      	b.n	80033f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80033e4:	4b58      	ldr	r3, [pc, #352]	; (8003548 <menu+0x2198>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d104      	bne.n	80033f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033ec:	4a5f      	ldr	r2, [pc, #380]	; (800356c <menu+0x21bc>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2002      	movs	r0, #2
 80033f2:	f004 fcb7 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f6:	2102      	movs	r1, #2
 80033f8:	485d      	ldr	r0, [pc, #372]	; (8003570 <menu+0x21c0>)
 80033fa:	f005 ffd9 	bl	80093b0 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <menu+0x2080>
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <menu+0x21c4>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003412:	4b52      	ldr	r3, [pc, #328]	; (800355c <menu+0x21ac>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <menu+0x21ac>)
 800341c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800341e:	4b4f      	ldr	r3, [pc, #316]	; (800355c <menu+0x21ac>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d902      	bls.n	800342c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <menu+0x21ac>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800342c:	f001 fb42 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003430:	2104      	movs	r1, #4
 8003432:	484f      	ldr	r0, [pc, #316]	; (8003570 <menu+0x21c0>)
 8003434:	f005 ffbc 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d115      	bne.n	800346a <menu+0x20ba>
 800343e:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <menu+0x21c4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <menu+0x21ac>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <menu+0x21ac>)
 8003456:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <menu+0x21ac>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <menu+0x21ac>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003466:	f001 fb25 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346a:	2108      	movs	r1, #8
 800346c:	4840      	ldr	r0, [pc, #256]	; (8003570 <menu+0x21c0>)
 800346e:	f005 ff9f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10d      	bne.n	8003494 <menu+0x20e4>
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <menu+0x21c4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003486:	4b35      	ldr	r3, [pc, #212]	; (800355c <menu+0x21ac>)
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <menu+0x21c8>)
 800348c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <menu+0x21cc>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <menu+0x21d0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b13      	cmp	r3, #19
 800349a:	f040 80d5 	bne.w	8003648 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <menu+0x21a0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d113      	bne.n	80034ce <menu+0x211e>
			if(dilSecim == 0) {
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <menu+0x2198>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80034ae:	4a35      	ldr	r2, [pc, #212]	; (8003584 <menu+0x21d4>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	2001      	movs	r0, #1
 80034b4:	f004 fc56 	bl	8007d64 <lcd_print>
 80034b8:	e01f      	b.n	80034fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <menu+0x2198>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d11b      	bne.n	80034fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <menu+0x21d8>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f004 fc4c 	bl	8007d64 <lcd_print>
 80034cc:	e015      	b.n	80034fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <menu+0x21a0>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d111      	bne.n	80034fa <menu+0x214a>
			if(dilSecim == 0) {
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <menu+0x2198>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <menu+0x21dc>)
 80034e0:	2101      	movs	r1, #1
 80034e2:	2001      	movs	r0, #1
 80034e4:	f004 fc3e 	bl	8007d64 <lcd_print>
			}
			if(dilSecim == 1) {
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <menu+0x2198>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d104      	bne.n	80034fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <menu+0x21e0>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2001      	movs	r0, #1
 80034f6:	f004 fc35 	bl	8007d64 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <menu+0x21e4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <menu+0x217a>
			if(dilSecim == 0) {
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <menu+0x2198>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <menu+0x21b0>)
 800350c:	2101      	movs	r1, #1
 800350e:	2002      	movs	r0, #2
 8003510:	f004 fc28 	bl	8007d64 <lcd_print>
 8003514:	e049      	b.n	80035aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <menu+0x2198>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d145      	bne.n	80035aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <menu+0x21b4>)
 8003520:	2101      	movs	r1, #1
 8003522:	2002      	movs	r0, #2
 8003524:	f004 fc1e 	bl	8007d64 <lcd_print>
 8003528:	e03f      	b.n	80035aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <menu+0x21e4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d13b      	bne.n	80035aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <menu+0x2198>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12e      	bne.n	8003598 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <menu+0x21b8>)
 800353c:	2101      	movs	r1, #1
 800353e:	2002      	movs	r0, #2
 8003540:	f004 fc10 	bl	8007d64 <lcd_print>
 8003544:	e031      	b.n	80035aa <menu+0x21fa>
 8003546:	bf00      	nop
 8003548:	20000245 	.word	0x20000245
 800354c:	0800d7c0 	.word	0x0800d7c0
 8003550:	20000233 	.word	0x20000233
 8003554:	0800d7d0 	.word	0x0800d7d0
 8003558:	0800d7e4 	.word	0x0800d7e4
 800355c:	20000234 	.word	0x20000234
 8003560:	0800d354 	.word	0x0800d354
 8003564:	0800d368 	.word	0x0800d368
 8003568:	0800d3b4 	.word	0x0800d3b4
 800356c:	0800d3c8 	.word	0x0800d3c8
 8003570:	40010800 	.word	0x40010800
 8003574:	20000253 	.word	0x20000253
 8003578:	20000128 	.word	0x20000128
 800357c:	20000250 	.word	0x20000250
 8003580:	20000224 	.word	0x20000224
 8003584:	0800d7f8 	.word	0x0800d7f8
 8003588:	0800d80c 	.word	0x0800d80c
 800358c:	0800d820 	.word	0x0800d820
 8003590:	0800d834 	.word	0x0800d834
 8003594:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8003598:	4b90      	ldr	r3, [pc, #576]	; (80037dc <menu+0x242c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d104      	bne.n	80035aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80035a0:	4a8f      	ldr	r2, [pc, #572]	; (80037e0 <menu+0x2430>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	2002      	movs	r0, #2
 80035a6:	f004 fbdd 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035aa:	2102      	movs	r1, #2
 80035ac:	488d      	ldr	r0, [pc, #564]	; (80037e4 <menu+0x2434>)
 80035ae:	f005 feff 	bl	80093b0 <HAL_GPIO_ReadPin>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d115      	bne.n	80035e4 <menu+0x2234>
 80035b8:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <menu+0x2438>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <menu+0x243c>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b87      	ldr	r3, [pc, #540]	; (80037ec <menu+0x243c>)
 80035d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80035d2:	4b86      	ldr	r3, [pc, #536]	; (80037ec <menu+0x243c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d902      	bls.n	80035e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80035da:	4b84      	ldr	r3, [pc, #528]	; (80037ec <menu+0x243c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035e0:	f001 fa68 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e4:	2104      	movs	r1, #4
 80035e6:	487f      	ldr	r0, [pc, #508]	; (80037e4 <menu+0x2434>)
 80035e8:	f005 fee2 	bl	80093b0 <HAL_GPIO_ReadPin>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d115      	bne.n	800361e <menu+0x226e>
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <menu+0x2438>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f083 0301 	eor.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003600:	4b7a      	ldr	r3, [pc, #488]	; (80037ec <menu+0x243c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b78      	ldr	r3, [pc, #480]	; (80037ec <menu+0x243c>)
 800360a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800360c:	4b77      	ldr	r3, [pc, #476]	; (80037ec <menu+0x243c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003614:	4b75      	ldr	r3, [pc, #468]	; (80037ec <menu+0x243c>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361a:	f001 fa4b 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2108      	movs	r1, #8
 8003620:	4870      	ldr	r0, [pc, #448]	; (80037e4 <menu+0x2434>)
 8003622:	f005 fec5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10d      	bne.n	8003648 <menu+0x2298>
 800362c:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <menu+0x2438>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800363a:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <menu+0x243c>)
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <menu+0x2440>)
 8003640:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003642:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <menu+0x2444>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003648:	4b6b      	ldr	r3, [pc, #428]	; (80037f8 <menu+0x2448>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b14      	cmp	r3, #20
 800364e:	f040 80b5 	bne.w	80037bc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <menu+0x244c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d113      	bne.n	8003682 <menu+0x22d2>
			if(dilSecim == 0) {
 800365a:	4b60      	ldr	r3, [pc, #384]	; (80037dc <menu+0x242c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003662:	4a67      	ldr	r2, [pc, #412]	; (8003800 <menu+0x2450>)
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f004 fb7c 	bl	8007d64 <lcd_print>
 800366c:	e020      	b.n	80036b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800366e:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <menu+0x242c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11c      	bne.n	80036b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003676:	4a63      	ldr	r2, [pc, #396]	; (8003804 <menu+0x2454>)
 8003678:	2101      	movs	r1, #1
 800367a:	2001      	movs	r0, #1
 800367c:	f004 fb72 	bl	8007d64 <lcd_print>
 8003680:	e016      	b.n	80036b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003682:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <menu+0x244c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d112      	bne.n	80036b0 <menu+0x2300>
			if(dilSecim == 0) {
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <menu+0x242c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <menu+0x2458>)
 8003694:	2101      	movs	r1, #1
 8003696:	2001      	movs	r0, #1
 8003698:	f004 fb64 	bl	8007d64 <lcd_print>
 800369c:	e008      	b.n	80036b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800369e:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <menu+0x242c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d104      	bne.n	80036b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80036a6:	4a59      	ldr	r2, [pc, #356]	; (800380c <menu+0x245c>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	2001      	movs	r0, #1
 80036ac:	f004 fb5a 	bl	8007d64 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80036b0:	4b57      	ldr	r3, [pc, #348]	; (8003810 <menu+0x2460>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <menu+0x2330>
			if(dilSecim == 0) {
 80036b8:	4b48      	ldr	r3, [pc, #288]	; (80037dc <menu+0x242c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80036c0:	4a54      	ldr	r2, [pc, #336]	; (8003814 <menu+0x2464>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2002      	movs	r0, #2
 80036c6:	f004 fb4d 	bl	8007d64 <lcd_print>
 80036ca:	e020      	b.n	800370e <menu+0x235e>
			} else if(dilSecim == 1) {
 80036cc:	4b43      	ldr	r3, [pc, #268]	; (80037dc <menu+0x242c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d11c      	bne.n	800370e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <menu+0x2468>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	2002      	movs	r0, #2
 80036da:	f004 fb43 	bl	8007d64 <lcd_print>
 80036de:	e016      	b.n	800370e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80036e0:	4b4b      	ldr	r3, [pc, #300]	; (8003810 <menu+0x2460>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d112      	bne.n	800370e <menu+0x235e>
			if(dilSecim == 0) {
 80036e8:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <menu+0x242c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036f0:	4a4a      	ldr	r2, [pc, #296]	; (800381c <menu+0x246c>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2002      	movs	r0, #2
 80036f6:	f004 fb35 	bl	8007d64 <lcd_print>
 80036fa:	e008      	b.n	800370e <menu+0x235e>
			} else if(dilSecim == 1) {
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <menu+0x242c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d104      	bne.n	800370e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <menu+0x2470>)
 8003706:	2101      	movs	r1, #1
 8003708:	2002      	movs	r0, #2
 800370a:	f004 fb2b 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800370e:	2102      	movs	r1, #2
 8003710:	4834      	ldr	r0, [pc, #208]	; (80037e4 <menu+0x2434>)
 8003712:	f005 fe4d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d119      	bne.n	8003750 <menu+0x23a0>
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <menu+0x2438>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <menu+0x23a0>
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <menu+0x244c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d10e      	bne.n	8003750 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <menu+0x2460>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4b35      	ldr	r3, [pc, #212]	; (8003810 <menu+0x2460>)
 800373c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <menu+0x2460>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d902      	bls.n	800374c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <menu+0x2460>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800374c:	f001 f9b2 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003750:	2104      	movs	r1, #4
 8003752:	4824      	ldr	r0, [pc, #144]	; (80037e4 <menu+0x2434>)
 8003754:	f005 fe2c 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d119      	bne.n	8003792 <menu+0x23e2>
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <menu+0x2438>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <menu+0x23e2>
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <menu+0x244c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d10e      	bne.n	8003792 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <menu+0x2460>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <menu+0x2460>)
 800377e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <menu+0x2460>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <menu+0x2460>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800378e:	f001 f991 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003792:	2108      	movs	r1, #8
 8003794:	4813      	ldr	r0, [pc, #76]	; (80037e4 <menu+0x2434>)
 8003796:	f005 fe0b 	bl	80093b0 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d10d      	bne.n	80037bc <menu+0x240c>
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <menu+0x2438>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <menu+0x2460>)
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <menu+0x2440>)
 80037b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <menu+0x2444>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <menu+0x2448>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b15      	cmp	r3, #21
 80037c2:	f040 80c2 	bne.w	800394a <menu+0x259a>
		if(dilSecim == 0) {
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <menu+0x242c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d12c      	bne.n	8003828 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <menu+0x2474>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	2001      	movs	r0, #1
 80037d4:	f004 fac6 	bl	8007d64 <lcd_print>
 80037d8:	e02f      	b.n	800383a <menu+0x248a>
 80037da:	bf00      	nop
 80037dc:	20000245 	.word	0x20000245
 80037e0:	0800d3c8 	.word	0x0800d3c8
 80037e4:	40010800 	.word	0x40010800
 80037e8:	20000253 	.word	0x20000253
 80037ec:	20000235 	.word	0x20000235
 80037f0:	20000128 	.word	0x20000128
 80037f4:	20000250 	.word	0x20000250
 80037f8:	20000224 	.word	0x20000224
 80037fc:	20000233 	.word	0x20000233
 8003800:	0800d848 	.word	0x0800d848
 8003804:	0800d85c 	.word	0x0800d85c
 8003808:	0800d870 	.word	0x0800d870
 800380c:	0800d884 	.word	0x0800d884
 8003810:	20000236 	.word	0x20000236
 8003814:	0800d898 	.word	0x0800d898
 8003818:	0800d8ac 	.word	0x0800d8ac
 800381c:	0800d8bc 	.word	0x0800d8bc
 8003820:	0800d8d0 	.word	0x0800d8d0
 8003824:	0800d8e0 	.word	0x0800d8e0
		} else if(dilSecim == 1) {
 8003828:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <menu+0x26ec>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d104      	bne.n	800383a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003830:	4a9b      	ldr	r2, [pc, #620]	; (8003aa0 <menu+0x26f0>)
 8003832:	2101      	movs	r1, #1
 8003834:	2001      	movs	r0, #1
 8003836:	f004 fa95 	bl	8007d64 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800383a:	4b9a      	ldr	r3, [pc, #616]	; (8003aa4 <menu+0x26f4>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d112      	bne.n	8003868 <menu+0x24b8>
			if(dilSecim == 0) {
 8003842:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <menu+0x26ec>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800384a:	4a97      	ldr	r2, [pc, #604]	; (8003aa8 <menu+0x26f8>)
 800384c:	2101      	movs	r1, #1
 800384e:	2002      	movs	r0, #2
 8003850:	f004 fa88 	bl	8007d64 <lcd_print>
			}
			if(dilSecim == 1) {
 8003854:	4b91      	ldr	r3, [pc, #580]	; (8003a9c <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11c      	bne.n	8003896 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800385c:	4a93      	ldr	r2, [pc, #588]	; (8003aac <menu+0x26fc>)
 800385e:	2101      	movs	r1, #1
 8003860:	2002      	movs	r0, #2
 8003862:	f004 fa7f 	bl	8007d64 <lcd_print>
 8003866:	e016      	b.n	8003896 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <menu+0x26f4>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d112      	bne.n	8003896 <menu+0x24e6>
			if(dilSecim == 0) {
 8003870:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <menu+0x26ec>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003878:	4a8d      	ldr	r2, [pc, #564]	; (8003ab0 <menu+0x2700>)
 800387a:	2101      	movs	r1, #1
 800387c:	2002      	movs	r0, #2
 800387e:	f004 fa71 	bl	8007d64 <lcd_print>
 8003882:	e008      	b.n	8003896 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003884:	4b85      	ldr	r3, [pc, #532]	; (8003a9c <menu+0x26ec>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d104      	bne.n	8003896 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800388c:	4a89      	ldr	r2, [pc, #548]	; (8003ab4 <menu+0x2704>)
 800388e:	2101      	movs	r1, #1
 8003890:	2002      	movs	r0, #2
 8003892:	f004 fa67 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003896:	2102      	movs	r1, #2
 8003898:	4887      	ldr	r0, [pc, #540]	; (8003ab8 <menu+0x2708>)
 800389a:	f005 fd89 	bl	80093b0 <HAL_GPIO_ReadPin>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d115      	bne.n	80038d0 <menu+0x2520>
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <menu+0x270c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80038b2:	4b7c      	ldr	r3, [pc, #496]	; (8003aa4 <menu+0x26f4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <menu+0x26f4>)
 80038bc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80038be:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <menu+0x26f4>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d902      	bls.n	80038cc <menu+0x251c>
				platformSilindirTipi = 0;
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <menu+0x26f4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038cc:	f001 f8f2 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d0:	2104      	movs	r1, #4
 80038d2:	4879      	ldr	r0, [pc, #484]	; (8003ab8 <menu+0x2708>)
 80038d4:	f005 fd6c 	bl	80093b0 <HAL_GPIO_ReadPin>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d115      	bne.n	800390a <menu+0x255a>
 80038de:	4b77      	ldr	r3, [pc, #476]	; (8003abc <menu+0x270c>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038ec:	4b6d      	ldr	r3, [pc, #436]	; (8003aa4 <menu+0x26f4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <menu+0x26f4>)
 80038f6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <menu+0x26f4>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <menu+0x26f4>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003906:	f001 f8d5 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390a:	2108      	movs	r1, #8
 800390c:	486a      	ldr	r0, [pc, #424]	; (8003ab8 <menu+0x2708>)
 800390e:	f005 fd4f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <menu+0x259a>
 8003918:	4b68      	ldr	r3, [pc, #416]	; (8003abc <menu+0x270c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	f083 0301 	eor.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d011      	beq.n	800394a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003926:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <menu+0x26f4>)
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <menu+0x2710>)
 800392c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <menu+0x26f4>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d106      	bne.n	8003944 <menu+0x2594>
				altLimit = 1;
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <menu+0x2714>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <menu+0x2714>)
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <menu+0x2710>)
 8003942:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003944:	4b60      	ldr	r3, [pc, #384]	; (8003ac8 <menu+0x2718>)
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800394a:	4b60      	ldr	r3, [pc, #384]	; (8003acc <menu+0x271c>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b16      	cmp	r3, #22
 8003950:	f040 8081 	bne.w	8003a56 <menu+0x26a6>
		if(dilSecim == 0) {
 8003954:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <menu+0x26ec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 800395c:	4a5c      	ldr	r2, [pc, #368]	; (8003ad0 <menu+0x2720>)
 800395e:	2101      	movs	r1, #1
 8003960:	2001      	movs	r0, #1
 8003962:	f004 f9ff 	bl	8007d64 <lcd_print>
 8003966:	e008      	b.n	800397a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <menu+0x26ec>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <menu+0x2724>)
 8003972:	2101      	movs	r1, #1
 8003974:	2001      	movs	r0, #1
 8003976:	f004 f9f5 	bl	8007d64 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <menu+0x26ec>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003982:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <menu+0x2728>)
 8003984:	2101      	movs	r1, #1
 8003986:	2002      	movs	r0, #2
 8003988:	f004 f9ec 	bl	8007d64 <lcd_print>
 800398c:	e008      	b.n	80039a0 <menu+0x25f0>
			} else if(dilSecim == 1){
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <menu+0x26ec>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d104      	bne.n	80039a0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003996:	4a51      	ldr	r2, [pc, #324]	; (8003adc <menu+0x272c>)
 8003998:	2101      	movs	r1, #1
 800399a:	2002      	movs	r0, #2
 800399c:	f004 f9e2 	bl	8007d64 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <menu+0x2730>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	220a      	movs	r2, #10
 80039a6:	494f      	ldr	r1, [pc, #316]	; (8003ae4 <menu+0x2734>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f008 fd2d 	bl	800c408 <itoa>
		lcd_print(2,16,snum);
 80039ae:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <menu+0x2734>)
 80039b0:	2110      	movs	r1, #16
 80039b2:	2002      	movs	r0, #2
 80039b4:	f004 f9d6 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b8:	2102      	movs	r1, #2
 80039ba:	483f      	ldr	r0, [pc, #252]	; (8003ab8 <menu+0x2708>)
 80039bc:	f005 fcf8 	bl	80093b0 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d115      	bne.n	80039f2 <menu+0x2642>
 80039c6:	4b3d      	ldr	r3, [pc, #244]	; (8003abc <menu+0x270c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <menu+0x2730>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <menu+0x2730>)
 80039de:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80039e0:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <menu+0x2730>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d902      	bls.n	80039ee <menu+0x263e>
				yukariValfTmr = 0;
 80039e8:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <menu+0x2730>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039ee:	f001 f861 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f2:	2104      	movs	r1, #4
 80039f4:	4830      	ldr	r0, [pc, #192]	; (8003ab8 <menu+0x2708>)
 80039f6:	f005 fcdb 	bl	80093b0 <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d115      	bne.n	8003a2c <menu+0x267c>
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <menu+0x270c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <menu+0x2730>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <menu+0x2730>)
 8003a18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <menu+0x2730>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <menu+0x2730>)
 8003a24:	2205      	movs	r2, #5
 8003a26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a28:	f001 f844 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2c:	2108      	movs	r1, #8
 8003a2e:	4822      	ldr	r0, [pc, #136]	; (8003ab8 <menu+0x2708>)
 8003a30:	f005 fcbe 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10d      	bne.n	8003a56 <menu+0x26a6>
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <menu+0x270c>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	f083 0301 	eor.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <menu+0x2730>)
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <menu+0x2710>)
 8003a4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <menu+0x2718>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <menu+0x271c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b17      	cmp	r3, #23
 8003a5c:	f040 80ac 	bne.w	8003bb8 <menu+0x2808>
		if(dilSecim == 0) {
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <menu+0x26ec>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <menu+0x2738>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f004 f979 	bl	8007d64 <lcd_print>
 8003a72:	e008      	b.n	8003a86 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <menu+0x26ec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <menu+0x273c>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f004 f96f 	bl	8007d64 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <menu+0x26ec>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d130      	bne.n	8003af0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <menu+0x2728>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	2002      	movs	r0, #2
 8003a94:	f004 f966 	bl	8007d64 <lcd_print>
 8003a98:	e033      	b.n	8003b02 <menu+0x2752>
 8003a9a:	bf00      	nop
 8003a9c:	20000245 	.word	0x20000245
 8003aa0:	0800d8f4 	.word	0x0800d8f4
 8003aa4:	20000237 	.word	0x20000237
 8003aa8:	0800d898 	.word	0x0800d898
 8003aac:	0800d8ac 	.word	0x0800d8ac
 8003ab0:	0800d8bc 	.word	0x0800d8bc
 8003ab4:	0800d8d0 	.word	0x0800d8d0
 8003ab8:	40010800 	.word	0x40010800
 8003abc:	20000253 	.word	0x20000253
 8003ac0:	20000128 	.word	0x20000128
 8003ac4:	2000022a 	.word	0x2000022a
 8003ac8:	20000250 	.word	0x20000250
 8003acc:	20000224 	.word	0x20000224
 8003ad0:	0800d904 	.word	0x0800d904
 8003ad4:	0800d918 	.word	0x0800d918
 8003ad8:	0800d5b8 	.word	0x0800d5b8
 8003adc:	0800d92c 	.word	0x0800d92c
 8003ae0:	20000238 	.word	0x20000238
 8003ae4:	20000198 	.word	0x20000198
 8003ae8:	0800d93c 	.word	0x0800d93c
 8003aec:	0800d950 	.word	0x0800d950
			} else if(dilSecim == 1) {
 8003af0:	4b98      	ldr	r3, [pc, #608]	; (8003d54 <menu+0x29a4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d104      	bne.n	8003b02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003af8:	4a97      	ldr	r2, [pc, #604]	; (8003d58 <menu+0x29a8>)
 8003afa:	2101      	movs	r1, #1
 8003afc:	2002      	movs	r0, #2
 8003afe:	f004 f931 	bl	8007d64 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b02:	4b96      	ldr	r3, [pc, #600]	; (8003d5c <menu+0x29ac>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	220a      	movs	r2, #10
 8003b08:	4995      	ldr	r1, [pc, #596]	; (8003d60 <menu+0x29b0>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 fc7c 	bl	800c408 <itoa>
		lcd_print(2,16,snum);
 8003b10:	4a93      	ldr	r2, [pc, #588]	; (8003d60 <menu+0x29b0>)
 8003b12:	2110      	movs	r1, #16
 8003b14:	2002      	movs	r0, #2
 8003b16:	f004 f925 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4891      	ldr	r0, [pc, #580]	; (8003d64 <menu+0x29b4>)
 8003b1e:	f005 fc47 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d115      	bne.n	8003b54 <menu+0x27a4>
 8003b28:	4b8f      	ldr	r3, [pc, #572]	; (8003d68 <menu+0x29b8>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <menu+0x29ac>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b87      	ldr	r3, [pc, #540]	; (8003d5c <menu+0x29ac>)
 8003b40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b42:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <menu+0x29ac>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d902      	bls.n	8003b50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003b4a:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <menu+0x29ac>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b50:	f000 ffb0 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b54:	2104      	movs	r1, #4
 8003b56:	4883      	ldr	r0, [pc, #524]	; (8003d64 <menu+0x29b4>)
 8003b58:	f005 fc2a 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d115      	bne.n	8003b8e <menu+0x27de>
 8003b62:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <menu+0x29b8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b70:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <menu+0x29ac>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b78      	ldr	r3, [pc, #480]	; (8003d5c <menu+0x29ac>)
 8003b7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b7c:	4b77      	ldr	r3, [pc, #476]	; (8003d5c <menu+0x29ac>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d902      	bls.n	8003b8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b84:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <menu+0x29ac>)
 8003b86:	2205      	movs	r2, #5
 8003b88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b8a:	f000 ff93 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b8e:	2108      	movs	r1, #8
 8003b90:	4874      	ldr	r0, [pc, #464]	; (8003d64 <menu+0x29b4>)
 8003b92:	f005 fc0d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10d      	bne.n	8003bb8 <menu+0x2808>
 8003b9c:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <menu+0x29b8>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <menu+0x29ac>)
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <menu+0x29bc>)
 8003bb0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <menu+0x29c0>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003bb8:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <menu+0x29c4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b18      	cmp	r3, #24
 8003bbe:	f040 809d 	bne.w	8003cfc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <menu+0x29c8>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d113      	bne.n	8003bf2 <menu+0x2842>
			if(dilSecim == 0) {
 8003bca:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <menu+0x29a4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003bd2:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <menu+0x29cc>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f004 f8c4 	bl	8007d64 <lcd_print>
 8003bdc:	e020      	b.n	8003c20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <menu+0x29a4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d11c      	bne.n	8003c20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003be6:	4a66      	ldr	r2, [pc, #408]	; (8003d80 <menu+0x29d0>)
 8003be8:	2101      	movs	r1, #1
 8003bea:	2001      	movs	r0, #1
 8003bec:	f004 f8ba 	bl	8007d64 <lcd_print>
 8003bf0:	e016      	b.n	8003c20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <menu+0x29c8>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d112      	bne.n	8003c20 <menu+0x2870>
			if(dilSecim == 0) {
 8003bfa:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <menu+0x29a4>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c02:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <menu+0x29d4>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	2001      	movs	r0, #1
 8003c08:	f004 f8ac 	bl	8007d64 <lcd_print>
 8003c0c:	e008      	b.n	8003c20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <menu+0x29a4>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d104      	bne.n	8003c20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <menu+0x29d8>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f004 f8a2 	bl	8007d64 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <menu+0x29a4>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <menu+0x29dc>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f004 f899 	bl	8007d64 <lcd_print>
 8003c32:	e008      	b.n	8003c46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003c34:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <menu+0x29a4>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d104      	bne.n	8003c46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c3c:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <menu+0x29a8>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2002      	movs	r0, #2
 8003c42:	f004 f88f 	bl	8007d64 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c46:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <menu+0x29e0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4944      	ldr	r1, [pc, #272]	; (8003d60 <menu+0x29b0>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f008 fbda 	bl	800c408 <itoa>
		lcd_print(2, 16, snum);
 8003c54:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <menu+0x29b0>)
 8003c56:	2110      	movs	r1, #16
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f004 f883 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4840      	ldr	r0, [pc, #256]	; (8003d64 <menu+0x29b4>)
 8003c62:	f005 fba5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d115      	bne.n	8003c98 <menu+0x28e8>
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <menu+0x29b8>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c7a:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <menu+0x29e0>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <menu+0x29e0>)
 8003c84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c86:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <menu+0x29e0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d902      	bls.n	8003c94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <menu+0x29e0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c94:	f000 ff0e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4832      	ldr	r0, [pc, #200]	; (8003d64 <menu+0x29b4>)
 8003c9c:	f005 fb88 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <menu+0x2922>
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <menu+0x29b8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	f083 0301 	eor.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <menu+0x29e0>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <menu+0x29e0>)
 8003cbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003cc0:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <menu+0x29e0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d902      	bls.n	8003cce <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003cc8:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <menu+0x29e0>)
 8003cca:	2205      	movs	r2, #5
 8003ccc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cce:	f000 fef1 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	4823      	ldr	r0, [pc, #140]	; (8003d64 <menu+0x29b4>)
 8003cd6:	f005 fb6b 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10d      	bne.n	8003cfc <menu+0x294c>
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <menu+0x29b8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <menu+0x29e0>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <menu+0x29bc>)
 8003cf4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <menu+0x29c0>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <menu+0x29c4>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b19      	cmp	r3, #25
 8003d02:	f040 80c4 	bne.w	8003e8e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <menu+0x29c8>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d113      	bne.n	8003d36 <menu+0x2986>
			if(dilSecim == 0) {
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <menu+0x29a4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <menu+0x29e4>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f004 f822 	bl	8007d64 <lcd_print>
 8003d20:	e047      	b.n	8003db2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <menu+0x29a4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d143      	bne.n	8003db2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <menu+0x29e8>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f004 f818 	bl	8007d64 <lcd_print>
 8003d34:	e03d      	b.n	8003db2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <menu+0x29c8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d139      	bne.n	8003db2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <menu+0x29a4>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12c      	bne.n	8003da0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <menu+0x29ec>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f004 f80a 	bl	8007d64 <lcd_print>
 8003d50:	e02f      	b.n	8003db2 <menu+0x2a02>
 8003d52:	bf00      	nop
 8003d54:	20000245 	.word	0x20000245
 8003d58:	0800d92c 	.word	0x0800d92c
 8003d5c:	20000239 	.word	0x20000239
 8003d60:	20000198 	.word	0x20000198
 8003d64:	40010800 	.word	0x40010800
 8003d68:	20000253 	.word	0x20000253
 8003d6c:	20000128 	.word	0x20000128
 8003d70:	20000250 	.word	0x20000250
 8003d74:	20000224 	.word	0x20000224
 8003d78:	20000233 	.word	0x20000233
 8003d7c:	0800d964 	.word	0x0800d964
 8003d80:	0800d978 	.word	0x0800d978
 8003d84:	0800d98c 	.word	0x0800d98c
 8003d88:	0800d9a0 	.word	0x0800d9a0
 8003d8c:	0800d5b8 	.word	0x0800d5b8
 8003d90:	2000023a 	.word	0x2000023a
 8003d94:	0800d9b4 	.word	0x0800d9b4
 8003d98:	0800d9c8 	.word	0x0800d9c8
 8003d9c:	0800d9dc 	.word	0x0800d9dc
			} else if(dilSecim == 1) {
 8003da0:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <menu+0x2bc0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d104      	bne.n	8003db2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <menu+0x2bc4>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	2001      	movs	r0, #1
 8003dae:	f003 ffd9 	bl	8007d64 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003db2:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <menu+0x2bc0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <menu+0x2bc8>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f003 ffd0 	bl	8007d64 <lcd_print>
 8003dc4:	e008      	b.n	8003dd8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <menu+0x2bc0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d104      	bne.n	8003dd8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003dce:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <menu+0x2bcc>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f003 ffc6 	bl	8007d64 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <menu+0x2bd0>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	220a      	movs	r2, #10
 8003dde:	4969      	ldr	r1, [pc, #420]	; (8003f84 <menu+0x2bd4>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f008 fb11 	bl	800c408 <itoa>
		lcd_print(2,16,snum);
 8003de6:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <menu+0x2bd4>)
 8003de8:	2110      	movs	r1, #16
 8003dea:	2002      	movs	r0, #2
 8003dec:	f003 ffba 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df0:	2102      	movs	r1, #2
 8003df2:	4865      	ldr	r0, [pc, #404]	; (8003f88 <menu+0x2bd8>)
 8003df4:	f005 fadc 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d115      	bne.n	8003e2a <menu+0x2a7a>
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <menu+0x2bdc>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e0c:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <menu+0x2bd0>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <menu+0x2bd0>)
 8003e16:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <menu+0x2bd0>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d902      	bls.n	8003e26 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e20:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <menu+0x2bd0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e26:	f000 fe45 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4856      	ldr	r0, [pc, #344]	; (8003f88 <menu+0x2bd8>)
 8003e2e:	f005 fabf 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d115      	bne.n	8003e64 <menu+0x2ab4>
 8003e38:	4b54      	ldr	r3, [pc, #336]	; (8003f8c <menu+0x2bdc>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <menu+0x2bd0>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <menu+0x2bd0>)
 8003e50:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <menu+0x2bd0>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <menu+0x2bd0>)
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e60:	f000 fe28 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e64:	2108      	movs	r1, #8
 8003e66:	4848      	ldr	r0, [pc, #288]	; (8003f88 <menu+0x2bd8>)
 8003e68:	f005 faa2 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10d      	bne.n	8003e8e <menu+0x2ade>
 8003e72:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <menu+0x2bdc>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e80:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <menu+0x2bd0>)
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <menu+0x2be0>)
 8003e86:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <menu+0x2be4>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <menu+0x2be8>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b1a      	cmp	r3, #26
 8003e94:	f040 80ec 	bne.w	8004070 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <menu+0x2bc0>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003ea0:	4a3e      	ldr	r2, [pc, #248]	; (8003f9c <menu+0x2bec>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f003 ff5d 	bl	8007d64 <lcd_print>
 8003eaa:	e008      	b.n	8003ebe <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003eac:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <menu+0x2bc0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d104      	bne.n	8003ebe <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003eb4:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <menu+0x2bf0>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f003 ff53 	bl	8007d64 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <menu+0x2bf4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b63      	cmp	r3, #99	; 0x63
 8003ec4:	d91e      	bls.n	8003f04 <menu+0x2b54>
			if(dilSecim == 0) {
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <menu+0x2bc0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ece:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <menu+0x2bc8>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f003 ff46 	bl	8007d64 <lcd_print>
			}
			if(dilSecim == 1) {
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <menu+0x2bc0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d104      	bne.n	8003eea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <menu+0x2bcc>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f003 ff3d 	bl	8007d64 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <menu+0x2bf4>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	220a      	movs	r2, #10
 8003ef0:	4924      	ldr	r1, [pc, #144]	; (8003f84 <menu+0x2bd4>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f008 fa88 	bl	800c408 <itoa>
			lcd_print(2,14,snum);
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <menu+0x2bd4>)
 8003efa:	210e      	movs	r1, #14
 8003efc:	2002      	movs	r0, #2
 8003efe:	f003 ff31 	bl	8007d64 <lcd_print>
 8003f02:	e066      	b.n	8003fd2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <menu+0x2bf4>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b09      	cmp	r3, #9
 8003f0a:	d923      	bls.n	8003f54 <menu+0x2ba4>
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <menu+0x2bf4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b63      	cmp	r3, #99	; 0x63
 8003f12:	d81f      	bhi.n	8003f54 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <menu+0x2bc0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <menu+0x2bc8>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f003 ff1f 	bl	8007d64 <lcd_print>
 8003f26:	e008      	b.n	8003f3a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <menu+0x2bc0>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d104      	bne.n	8003f3a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <menu+0x2bcc>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	2002      	movs	r0, #2
 8003f36:	f003 ff15 	bl	8007d64 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <menu+0x2bf4>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	220a      	movs	r2, #10
 8003f40:	4910      	ldr	r1, [pc, #64]	; (8003f84 <menu+0x2bd4>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f008 fa60 	bl	800c408 <itoa>
			lcd_print(2, 15, snum);
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <menu+0x2bd4>)
 8003f4a:	210f      	movs	r1, #15
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f003 ff09 	bl	8007d64 <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f52:	e03e      	b.n	8003fd2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <menu+0x2bf4>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d83a      	bhi.n	8003fd2 <menu+0x2c22>
			if(dilSecim == 0) {
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <menu+0x2bc0>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f64:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <menu+0x2bc8>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f003 fefb 	bl	8007d64 <lcd_print>
 8003f6e:	e024      	b.n	8003fba <menu+0x2c0a>
 8003f70:	20000245 	.word	0x20000245
 8003f74:	0800d9f0 	.word	0x0800d9f0
 8003f78:	0800d5b8 	.word	0x0800d5b8
 8003f7c:	0800d92c 	.word	0x0800d92c
 8003f80:	2000023b 	.word	0x2000023b
 8003f84:	20000198 	.word	0x20000198
 8003f88:	40010800 	.word	0x40010800
 8003f8c:	20000253 	.word	0x20000253
 8003f90:	20000128 	.word	0x20000128
 8003f94:	20000250 	.word	0x20000250
 8003f98:	20000224 	.word	0x20000224
 8003f9c:	0800da04 	.word	0x0800da04
 8003fa0:	0800da18 	.word	0x0800da18
 8003fa4:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8003fa8:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <menu+0x2e38>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d104      	bne.n	8003fba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003fb0:	4a8e      	ldr	r2, [pc, #568]	; (80041ec <menu+0x2e3c>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f003 fed5 	bl	8007d64 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fba:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <menu+0x2e40>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	498c      	ldr	r1, [pc, #560]	; (80041f4 <menu+0x2e44>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f008 fa20 	bl	800c408 <itoa>
			lcd_print(2, 16, snum);
 8003fc8:	4a8a      	ldr	r2, [pc, #552]	; (80041f4 <menu+0x2e44>)
 8003fca:	2110      	movs	r1, #16
 8003fcc:	2002      	movs	r0, #2
 8003fce:	f003 fec9 	bl	8007d64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4888      	ldr	r0, [pc, #544]	; (80041f8 <menu+0x2e48>)
 8003fd6:	f005 f9eb 	bl	80093b0 <HAL_GPIO_ReadPin>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d115      	bne.n	800400c <menu+0x2c5c>
 8003fe0:	4b86      	ldr	r3, [pc, #536]	; (80041fc <menu+0x2e4c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f083 0301 	eor.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003fee:	4b80      	ldr	r3, [pc, #512]	; (80041f0 <menu+0x2e40>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <menu+0x2e40>)
 8003ff8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <menu+0x2e40>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2bb4      	cmp	r3, #180	; 0xb4
 8004000:	d902      	bls.n	8004008 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <menu+0x2e40>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004008:	f000 fd54 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800400c:	2104      	movs	r1, #4
 800400e:	487a      	ldr	r0, [pc, #488]	; (80041f8 <menu+0x2e48>)
 8004010:	f005 f9ce 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d115      	bne.n	8004046 <menu+0x2c96>
 800401a:	4b78      	ldr	r3, [pc, #480]	; (80041fc <menu+0x2e4c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f083 0301 	eor.w	r3, r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <menu+0x2e40>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	b2da      	uxtb	r2, r3
 8004030:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <menu+0x2e40>)
 8004032:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004034:	4b6e      	ldr	r3, [pc, #440]	; (80041f0 <menu+0x2e40>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2bb5      	cmp	r3, #181	; 0xb5
 800403a:	d902      	bls.n	8004042 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800403c:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <menu+0x2e40>)
 800403e:	22b4      	movs	r2, #180	; 0xb4
 8004040:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004042:	f000 fd37 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004046:	2108      	movs	r1, #8
 8004048:	486b      	ldr	r0, [pc, #428]	; (80041f8 <menu+0x2e48>)
 800404a:	f005 f9b1 	bl	80093b0 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10d      	bne.n	8004070 <menu+0x2cc0>
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <menu+0x2e4c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f083 0301 	eor.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004062:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <menu+0x2e40>)
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	4b66      	ldr	r3, [pc, #408]	; (8004200 <menu+0x2e50>)
 8004068:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800406a:	4b66      	ldr	r3, [pc, #408]	; (8004204 <menu+0x2e54>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004070:	4b65      	ldr	r3, [pc, #404]	; (8004208 <menu+0x2e58>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b1b      	cmp	r3, #27
 8004076:	f040 8083 	bne.w	8004180 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800407a:	4a64      	ldr	r2, [pc, #400]	; (800420c <menu+0x2e5c>)
 800407c:	2101      	movs	r1, #1
 800407e:	2001      	movs	r0, #1
 8004080:	f003 fe70 	bl	8007d64 <lcd_print>

		if(buzzer == 0) {
 8004084:	4b62      	ldr	r3, [pc, #392]	; (8004210 <menu+0x2e60>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <menu+0x2d04>
			if(dilSecim == 0) {
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <menu+0x2e38>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004094:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <menu+0x2e64>)
 8004096:	2101      	movs	r1, #1
 8004098:	2002      	movs	r0, #2
 800409a:	f003 fe63 	bl	8007d64 <lcd_print>
 800409e:	e020      	b.n	80040e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040a0:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <menu+0x2e38>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d11c      	bne.n	80040e2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80040a8:	4a5b      	ldr	r2, [pc, #364]	; (8004218 <menu+0x2e68>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	2002      	movs	r0, #2
 80040ae:	f003 fe59 	bl	8007d64 <lcd_print>
 80040b2:	e016      	b.n	80040e2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <menu+0x2e60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d112      	bne.n	80040e2 <menu+0x2d32>
			if(dilSecim == 0) {
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <menu+0x2e38>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80040c4:	4a55      	ldr	r2, [pc, #340]	; (800421c <menu+0x2e6c>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	2002      	movs	r0, #2
 80040ca:	f003 fe4b 	bl	8007d64 <lcd_print>
 80040ce:	e008      	b.n	80040e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <menu+0x2e38>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d104      	bne.n	80040e2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <menu+0x2e70>)
 80040da:	2101      	movs	r1, #1
 80040dc:	2002      	movs	r0, #2
 80040de:	f003 fe41 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e2:	2102      	movs	r1, #2
 80040e4:	4844      	ldr	r0, [pc, #272]	; (80041f8 <menu+0x2e48>)
 80040e6:	f005 f963 	bl	80093b0 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <menu+0x2d6c>
 80040f0:	4b42      	ldr	r3, [pc, #264]	; (80041fc <menu+0x2e4c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80040fe:	4b44      	ldr	r3, [pc, #272]	; (8004210 <menu+0x2e60>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b42      	ldr	r3, [pc, #264]	; (8004210 <menu+0x2e60>)
 8004108:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800410a:	4b41      	ldr	r3, [pc, #260]	; (8004210 <menu+0x2e60>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d902      	bls.n	8004118 <menu+0x2d68>
				buzzer = 0;
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <menu+0x2e60>)
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004118:	f000 fccc 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800411c:	2104      	movs	r1, #4
 800411e:	4836      	ldr	r0, [pc, #216]	; (80041f8 <menu+0x2e48>)
 8004120:	f005 f946 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d115      	bne.n	8004156 <menu+0x2da6>
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <menu+0x2e4c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <menu+0x2e60>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	4b33      	ldr	r3, [pc, #204]	; (8004210 <menu+0x2e60>)
 8004142:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <menu+0x2e60>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <menu+0x2da2>
		   		buzzer = 1;
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <menu+0x2e60>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004152:	f000 fcaf 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004156:	2108      	movs	r1, #8
 8004158:	4827      	ldr	r0, [pc, #156]	; (80041f8 <menu+0x2e48>)
 800415a:	f005 f929 	bl	80093b0 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10d      	bne.n	8004180 <menu+0x2dd0>
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <menu+0x2e4c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <menu+0x2e60>)
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	4b22      	ldr	r3, [pc, #136]	; (8004200 <menu+0x2e50>)
 8004178:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <menu+0x2e54>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <menu+0x2e58>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b1c      	cmp	r3, #28
 8004186:	f040 80ab 	bne.w	80042e0 <menu+0x2f30>
		calismaSayModu = 0;
 800418a:	4b26      	ldr	r3, [pc, #152]	; (8004224 <menu+0x2e74>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <menu+0x2e78>)
 8004192:	2101      	movs	r1, #1
 8004194:	2001      	movs	r0, #1
 8004196:	f003 fde5 	bl	8007d64 <lcd_print>

		if(demoMode == 0) {
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <menu+0x2e7c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <menu+0x2e38>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <menu+0x2e64>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	2002      	movs	r0, #2
 80041b0:	f003 fdd8 	bl	8007d64 <lcd_print>
 80041b4:	e045      	b.n	8004242 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <menu+0x2e38>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d141      	bne.n	8004242 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80041be:	4a16      	ldr	r2, [pc, #88]	; (8004218 <menu+0x2e68>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	2002      	movs	r0, #2
 80041c4:	f003 fdce 	bl	8007d64 <lcd_print>
 80041c8:	e03b      	b.n	8004242 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <menu+0x2e7c>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d137      	bne.n	8004242 <menu+0x2e92>
			if(dilSecim == 0){
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <menu+0x2e38>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12a      	bne.n	8004230 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80041da:	4a10      	ldr	r2, [pc, #64]	; (800421c <menu+0x2e6c>)
 80041dc:	2101      	movs	r1, #1
 80041de:	2002      	movs	r0, #2
 80041e0:	f003 fdc0 	bl	8007d64 <lcd_print>
 80041e4:	e02d      	b.n	8004242 <menu+0x2e92>
 80041e6:	bf00      	nop
 80041e8:	20000245 	.word	0x20000245
 80041ec:	0800d92c 	.word	0x0800d92c
 80041f0:	2000023c 	.word	0x2000023c
 80041f4:	20000198 	.word	0x20000198
 80041f8:	40010800 	.word	0x40010800
 80041fc:	20000253 	.word	0x20000253
 8004200:	20000128 	.word	0x20000128
 8004204:	20000250 	.word	0x20000250
 8004208:	20000224 	.word	0x20000224
 800420c:	0800da2c 	.word	0x0800da2c
 8004210:	20000240 	.word	0x20000240
 8004214:	0800d354 	.word	0x0800d354
 8004218:	0800d368 	.word	0x0800d368
 800421c:	0800d3b4 	.word	0x0800d3b4
 8004220:	0800d3c8 	.word	0x0800d3c8
 8004224:	20000244 	.word	0x20000244
 8004228:	0800da40 	.word	0x0800da40
 800422c:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 8004230:	4b71      	ldr	r3, [pc, #452]	; (80043f8 <menu+0x3048>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d104      	bne.n	8004242 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004238:	4a70      	ldr	r2, [pc, #448]	; (80043fc <menu+0x304c>)
 800423a:	2101      	movs	r1, #1
 800423c:	2002      	movs	r0, #2
 800423e:	f003 fd91 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004242:	2102      	movs	r1, #2
 8004244:	486e      	ldr	r0, [pc, #440]	; (8004400 <menu+0x3050>)
 8004246:	f005 f8b3 	bl	80093b0 <HAL_GPIO_ReadPin>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d115      	bne.n	800427c <menu+0x2ecc>
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <menu+0x3054>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	f083 0301 	eor.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <menu+0x3058>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4b68      	ldr	r3, [pc, #416]	; (8004408 <menu+0x3058>)
 8004268:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <menu+0x3058>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d902      	bls.n	8004278 <menu+0x2ec8>
				demoMode = 0;
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <menu+0x3058>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004278:	f000 fc1c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800427c:	2104      	movs	r1, #4
 800427e:	4860      	ldr	r0, [pc, #384]	; (8004400 <menu+0x3050>)
 8004280:	f005 f896 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d115      	bne.n	80042b6 <menu+0x2f06>
 800428a:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <menu+0x3054>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <menu+0x3058>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <menu+0x3058>)
 80042a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80042a4:	4b58      	ldr	r3, [pc, #352]	; (8004408 <menu+0x3058>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <menu+0x2f02>
		   		demoMode = 1;
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <menu+0x3058>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042b2:	f000 fbff 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042b6:	2108      	movs	r1, #8
 80042b8:	4851      	ldr	r0, [pc, #324]	; (8004400 <menu+0x3050>)
 80042ba:	f005 f879 	bl	80093b0 <HAL_GPIO_ReadPin>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10d      	bne.n	80042e0 <menu+0x2f30>
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <menu+0x3054>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f083 0301 	eor.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <menu+0x3058>)
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <menu+0x305c>)
 80042d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <menu+0x3060>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <menu+0x3064>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b1d      	cmp	r3, #29
 80042e6:	f040 8132 	bne.w	800454e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <menu+0x3068>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d113      	bne.n	800431a <menu+0x2f6a>
 80042f2:	4b4a      	ldr	r3, [pc, #296]	; (800441c <menu+0x306c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <menu+0x2f6a>
 80042fa:	4b49      	ldr	r3, [pc, #292]	; (8004420 <menu+0x3070>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <menu+0x2f6a>
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <menu+0x3074>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <menu+0x2f6a>
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <menu+0x3078>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004312:	4b46      	ldr	r3, [pc, #280]	; (800442c <menu+0x307c>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e002      	b.n	8004320 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <menu+0x307c>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <menu+0x3080>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d154      	bne.n	80043d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <menu+0x3048>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <menu+0x3084>)
 8004332:	2101      	movs	r1, #1
 8004334:	2001      	movs	r0, #1
 8004336:	f003 fd15 	bl	8007d64 <lcd_print>
 800433a:	e008      	b.n	800434e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <menu+0x3048>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d104      	bne.n	800434e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <menu+0x3088>)
 8004346:	2101      	movs	r1, #1
 8004348:	2001      	movs	r0, #1
 800434a:	f003 fd0b 	bl	8007d64 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <menu+0x3078>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	220a      	movs	r2, #10
 8004354:	4939      	ldr	r1, [pc, #228]	; (800443c <menu+0x308c>)
 8004356:	4618      	mov	r0, r3
 8004358:	f008 f856 	bl	800c408 <itoa>
			lcd_print(2, 12, snum);
 800435c:	4a37      	ldr	r2, [pc, #220]	; (800443c <menu+0x308c>)
 800435e:	210c      	movs	r1, #12
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fcff 	bl	8007d64 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004366:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <menu+0x3074>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	220a      	movs	r2, #10
 800436c:	4933      	ldr	r1, [pc, #204]	; (800443c <menu+0x308c>)
 800436e:	4618      	mov	r0, r3
 8004370:	f008 f84a 	bl	800c408 <itoa>
			lcd_print(2, 13, snum);
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <menu+0x308c>)
 8004376:	210d      	movs	r1, #13
 8004378:	2002      	movs	r0, #2
 800437a:	f003 fcf3 	bl	8007d64 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800437e:	4b28      	ldr	r3, [pc, #160]	; (8004420 <menu+0x3070>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	220a      	movs	r2, #10
 8004384:	492d      	ldr	r1, [pc, #180]	; (800443c <menu+0x308c>)
 8004386:	4618      	mov	r0, r3
 8004388:	f008 f83e 	bl	800c408 <itoa>
			lcd_print(2, 14, snum);
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <menu+0x308c>)
 800438e:	210e      	movs	r1, #14
 8004390:	2002      	movs	r0, #2
 8004392:	f003 fce7 	bl	8007d64 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <menu+0x306c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	220a      	movs	r2, #10
 800439c:	4927      	ldr	r1, [pc, #156]	; (800443c <menu+0x308c>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f008 f832 	bl	800c408 <itoa>
			lcd_print(2, 15, snum);
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <menu+0x308c>)
 80043a6:	210f      	movs	r1, #15
 80043a8:	2002      	movs	r0, #2
 80043aa:	f003 fcdb 	bl	8007d64 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <menu+0x3068>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	220a      	movs	r2, #10
 80043b4:	4921      	ldr	r1, [pc, #132]	; (800443c <menu+0x308c>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f008 f826 	bl	800c408 <itoa>
			lcd_print(2, 16, snum);
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <menu+0x308c>)
 80043be:	2110      	movs	r1, #16
 80043c0:	2002      	movs	r0, #2
 80043c2:	f003 fccf 	bl	8007d64 <lcd_print>

			lcd_print(2, 1, "           ");
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <menu+0x3090>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	2002      	movs	r0, #2
 80043cc:	f003 fcca 	bl	8007d64 <lcd_print>
 80043d0:	e048      	b.n	8004464 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <menu+0x3080>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d144      	bne.n	8004464 <menu+0x30b4>
			if(dilSecim == 0) {
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <menu+0x3048>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d132      	bne.n	8004448 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043e2:	4a14      	ldr	r2, [pc, #80]	; (8004434 <menu+0x3084>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	2001      	movs	r0, #1
 80043e8:	f003 fcbc 	bl	8007d64 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <menu+0x3094>)
 80043ee:	2101      	movs	r1, #1
 80043f0:	2002      	movs	r0, #2
 80043f2:	f003 fcb7 	bl	8007d64 <lcd_print>
 80043f6:	e035      	b.n	8004464 <menu+0x30b4>
 80043f8:	20000245 	.word	0x20000245
 80043fc:	0800d3c8 	.word	0x0800d3c8
 8004400:	40010800 	.word	0x40010800
 8004404:	20000253 	.word	0x20000253
 8004408:	20000242 	.word	0x20000242
 800440c:	20000128 	.word	0x20000128
 8004410:	20000250 	.word	0x20000250
 8004414:	20000224 	.word	0x20000224
 8004418:	20000221 	.word	0x20000221
 800441c:	20000222 	.word	0x20000222
 8004420:	20000008 	.word	0x20000008
 8004424:	20000009 	.word	0x20000009
 8004428:	20000223 	.word	0x20000223
 800442c:	20000265 	.word	0x20000265
 8004430:	20000244 	.word	0x20000244
 8004434:	0800da50 	.word	0x0800da50
 8004438:	0800da64 	.word	0x0800da64
 800443c:	20000198 	.word	0x20000198
 8004440:	0800da78 	.word	0x0800da78
 8004444:	0800da84 	.word	0x0800da84
			} else if(dilSecim == 1) {
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <menu+0x32ec>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d109      	bne.n	8004464 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004450:	4a93      	ldr	r2, [pc, #588]	; (80046a0 <menu+0x32f0>)
 8004452:	2101      	movs	r1, #1
 8004454:	2001      	movs	r0, #1
 8004456:	f003 fc85 	bl	8007d64 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800445a:	4a92      	ldr	r2, [pc, #584]	; (80046a4 <menu+0x32f4>)
 800445c:	2101      	movs	r1, #1
 800445e:	2002      	movs	r0, #2
 8004460:	f003 fc80 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004464:	2102      	movs	r1, #2
 8004466:	4890      	ldr	r0, [pc, #576]	; (80046a8 <menu+0x32f8>)
 8004468:	f004 ffa2 	bl	80093b0 <HAL_GPIO_ReadPin>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d119      	bne.n	80044a6 <menu+0x30f6>
 8004472:	4b8e      	ldr	r3, [pc, #568]	; (80046ac <menu+0x32fc>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f083 0301 	eor.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <menu+0x30f6>
 8004480:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <menu+0x3300>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <menu+0x3304>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <menu+0x3304>)
 8004492:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004494:	4b87      	ldr	r3, [pc, #540]	; (80046b4 <menu+0x3304>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d902      	bls.n	80044a2 <menu+0x30f2>
				calismaSayModu = 0;
 800449c:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <menu+0x3304>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044a2:	f000 fb07 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044a6:	2104      	movs	r1, #4
 80044a8:	487f      	ldr	r0, [pc, #508]	; (80046a8 <menu+0x32f8>)
 80044aa:	f004 ff81 	bl	80093b0 <HAL_GPIO_ReadPin>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d119      	bne.n	80044e8 <menu+0x3138>
 80044b4:	4b7d      	ldr	r3, [pc, #500]	; (80046ac <menu+0x32fc>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <menu+0x3138>
 80044c2:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <menu+0x3300>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80044ca:	4b7a      	ldr	r3, [pc, #488]	; (80046b4 <menu+0x3304>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <menu+0x3304>)
 80044d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80044d6:	4b77      	ldr	r3, [pc, #476]	; (80046b4 <menu+0x3304>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80044de:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <menu+0x3304>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044e4:	f000 fae6 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e8:	2108      	movs	r1, #8
 80044ea:	486f      	ldr	r0, [pc, #444]	; (80046a8 <menu+0x32f8>)
 80044ec:	f004 ff60 	bl	80093b0 <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12b      	bne.n	800454e <menu+0x319e>
 80044f6:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <menu+0x32fc>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d024      	beq.n	800454e <menu+0x319e>
			eepromData[32] = 0;
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <menu+0x3308>)
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800450c:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <menu+0x3308>)
 800450e:	2200      	movs	r2, #0
 8004510:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004512:	4b69      	ldr	r3, [pc, #420]	; (80046b8 <menu+0x3308>)
 8004514:	2200      	movs	r2, #0
 8004516:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004518:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <menu+0x3308>)
 800451a:	2200      	movs	r2, #0
 800451c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800451e:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <menu+0x3308>)
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004524:	4b65      	ldr	r3, [pc, #404]	; (80046bc <menu+0x330c>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <menu+0x3310>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004530:	4b64      	ldr	r3, [pc, #400]	; (80046c4 <menu+0x3314>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004536:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <menu+0x3318>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800453c:	4b63      	ldr	r3, [pc, #396]	; (80046cc <menu+0x331c>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004542:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <menu+0x3304>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004548:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <menu+0x3320>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800454e:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <menu+0x3324>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b1e      	cmp	r3, #30
 8004554:	d16f      	bne.n	8004636 <menu+0x3286>
		calismaSayModu = 0;
 8004556:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <menu+0x3304>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <menu+0x32ec>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <menu+0x3328>)
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f003 fbfb 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800456e:	4a5b      	ldr	r2, [pc, #364]	; (80046dc <menu+0x332c>)
 8004570:	2101      	movs	r1, #1
 8004572:	2002      	movs	r0, #2
 8004574:	f003 fbf6 	bl	8007d64 <lcd_print>
 8004578:	e00d      	b.n	8004596 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800457a:	4b48      	ldr	r3, [pc, #288]	; (800469c <menu+0x32ec>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d109      	bne.n	8004596 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004582:	4a57      	ldr	r2, [pc, #348]	; (80046e0 <menu+0x3330>)
 8004584:	2101      	movs	r1, #1
 8004586:	2001      	movs	r0, #1
 8004588:	f003 fbec 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800458c:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <menu+0x3334>)
 800458e:	2101      	movs	r1, #1
 8004590:	2002      	movs	r0, #2
 8004592:	f003 fbe7 	bl	8007d64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004596:	2102      	movs	r1, #2
 8004598:	4843      	ldr	r0, [pc, #268]	; (80046a8 <menu+0x32f8>)
 800459a:	f004 ff09 	bl	80093b0 <HAL_GPIO_ReadPin>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d115      	bne.n	80045d0 <menu+0x3220>
 80045a4:	4b41      	ldr	r3, [pc, #260]	; (80046ac <menu+0x32fc>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f083 0301 	eor.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <menu+0x32ec>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b38      	ldr	r3, [pc, #224]	; (800469c <menu+0x32ec>)
 80045bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <menu+0x32ec>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d902      	bls.n	80045cc <menu+0x321c>
				dilSecim = 0;
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <menu+0x32ec>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045cc:	f000 fa72 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d0:	2104      	movs	r1, #4
 80045d2:	4835      	ldr	r0, [pc, #212]	; (80046a8 <menu+0x32f8>)
 80045d4:	f004 feec 	bl	80093b0 <HAL_GPIO_ReadPin>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d115      	bne.n	800460a <menu+0x325a>
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <menu+0x32fc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f083 0301 	eor.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <menu+0x32ec>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b29      	ldr	r3, [pc, #164]	; (800469c <menu+0x32ec>)
 80045f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045f8:	4b28      	ldr	r3, [pc, #160]	; (800469c <menu+0x32ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <menu+0x3256>
		   		dilSecim = 1;
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <menu+0x32ec>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004606:	f000 fa55 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800460a:	2108      	movs	r1, #8
 800460c:	4826      	ldr	r0, [pc, #152]	; (80046a8 <menu+0x32f8>)
 800460e:	f004 fecf 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10e      	bne.n	8004636 <menu+0x3286>
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <menu+0x32fc>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <menu+0x32ec>)
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <menu+0x3308>)
 800462c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <menu+0x3320>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004636:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <menu+0x3324>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b1f      	cmp	r3, #31
 800463c:	f040 80b7 	bne.w	80047ae <menu+0x33fe>
		calismaSayModu = 0;
 8004640:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <menu+0x3304>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004646:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <menu+0x3338>)
 8004648:	2101      	movs	r1, #1
 800464a:	2001      	movs	r0, #1
 800464c:	f003 fb8a 	bl	8007d64 <lcd_print>

		if(iotMode == 0) {
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <menu+0x333c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <menu+0x32d0>
			if(dilSecim == 0) {
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <menu+0x32ec>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <menu+0x3340>)
 8004662:	2101      	movs	r1, #1
 8004664:	2002      	movs	r0, #2
 8004666:	f003 fb7d 	bl	8007d64 <lcd_print>
 800466a:	e050      	b.n	800470e <menu+0x335e>
			} else if(dilSecim == 1) {
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <menu+0x32ec>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d14c      	bne.n	800470e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <menu+0x3344>)
 8004676:	2101      	movs	r1, #1
 8004678:	2002      	movs	r0, #2
 800467a:	f003 fb73 	bl	8007d64 <lcd_print>
 800467e:	e046      	b.n	800470e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <menu+0x333c>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d142      	bne.n	800470e <menu+0x335e>
			if(dilSecim == 0) {
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <menu+0x32ec>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d135      	bne.n	80046fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <menu+0x3348>)
 8004692:	2101      	movs	r1, #1
 8004694:	2002      	movs	r0, #2
 8004696:	f003 fb65 	bl	8007d64 <lcd_print>
 800469a:	e038      	b.n	800470e <menu+0x335e>
 800469c:	20000245 	.word	0x20000245
 80046a0:	0800da64 	.word	0x0800da64
 80046a4:	0800da98 	.word	0x0800da98
 80046a8:	40010800 	.word	0x40010800
 80046ac:	20000253 	.word	0x20000253
 80046b0:	20000265 	.word	0x20000265
 80046b4:	20000244 	.word	0x20000244
 80046b8:	20000128 	.word	0x20000128
 80046bc:	20000223 	.word	0x20000223
 80046c0:	20000009 	.word	0x20000009
 80046c4:	20000008 	.word	0x20000008
 80046c8:	20000222 	.word	0x20000222
 80046cc:	20000221 	.word	0x20000221
 80046d0:	20000250 	.word	0x20000250
 80046d4:	20000224 	.word	0x20000224
 80046d8:	0800daac 	.word	0x0800daac
 80046dc:	0800dac0 	.word	0x0800dac0
 80046e0:	0800dad4 	.word	0x0800dad4
 80046e4:	0800dae8 	.word	0x0800dae8
 80046e8:	0800dafc 	.word	0x0800dafc
 80046ec:	20000243 	.word	0x20000243
 80046f0:	0800d354 	.word	0x0800d354
 80046f4:	0800d368 	.word	0x0800d368
 80046f8:	0800d3b4 	.word	0x0800d3b4
			} else if(dilSecim == 1) {
 80046fc:	4bac      	ldr	r3, [pc, #688]	; (80049b0 <menu+0x3600>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d104      	bne.n	800470e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004704:	4aab      	ldr	r2, [pc, #684]	; (80049b4 <menu+0x3604>)
 8004706:	2101      	movs	r1, #1
 8004708:	2002      	movs	r0, #2
 800470a:	f003 fb2b 	bl	8007d64 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800470e:	2102      	movs	r1, #2
 8004710:	48a9      	ldr	r0, [pc, #676]	; (80049b8 <menu+0x3608>)
 8004712:	f004 fe4d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d115      	bne.n	8004748 <menu+0x3398>
 800471c:	4ba7      	ldr	r3, [pc, #668]	; (80049bc <menu+0x360c>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f083 0301 	eor.w	r3, r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <menu+0x3398>
			iotMode = iotMode + 1;
 800472a:	4ba5      	ldr	r3, [pc, #660]	; (80049c0 <menu+0x3610>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4ba3      	ldr	r3, [pc, #652]	; (80049c0 <menu+0x3610>)
 8004734:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004736:	4ba2      	ldr	r3, [pc, #648]	; (80049c0 <menu+0x3610>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d902      	bls.n	8004744 <menu+0x3394>
				iotMode = 0;
 800473e:	4ba0      	ldr	r3, [pc, #640]	; (80049c0 <menu+0x3610>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004744:	f000 f9b6 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004748:	2104      	movs	r1, #4
 800474a:	489b      	ldr	r0, [pc, #620]	; (80049b8 <menu+0x3608>)
 800474c:	f004 fe30 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d115      	bne.n	8004782 <menu+0x33d2>
 8004756:	4b99      	ldr	r3, [pc, #612]	; (80049bc <menu+0x360c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	f083 0301 	eor.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00e      	beq.n	8004782 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004764:	4b96      	ldr	r3, [pc, #600]	; (80049c0 <menu+0x3610>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	4b94      	ldr	r3, [pc, #592]	; (80049c0 <menu+0x3610>)
 800476e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004770:	4b93      	ldr	r3, [pc, #588]	; (80049c0 <menu+0x3610>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <menu+0x33ce>
		   		iotMode = 1;
 8004778:	4b91      	ldr	r3, [pc, #580]	; (80049c0 <menu+0x3610>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800477e:	f000 f999 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004782:	2108      	movs	r1, #8
 8004784:	488c      	ldr	r0, [pc, #560]	; (80049b8 <menu+0x3608>)
 8004786:	f004 fe13 	bl	80093b0 <HAL_GPIO_ReadPin>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10e      	bne.n	80047ae <menu+0x33fe>
 8004790:	4b8a      	ldr	r3, [pc, #552]	; (80049bc <menu+0x360c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <menu+0x33fe>
			eepromData[48] = iotMode;
 800479e:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <menu+0x3610>)
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <menu+0x3614>)
 80047a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80047a8:	4b87      	ldr	r3, [pc, #540]	; (80049c8 <menu+0x3618>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80047ae:	4b87      	ldr	r3, [pc, #540]	; (80049cc <menu+0x361c>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d142      	bne.n	800483c <menu+0x348c>
		calismaSayModu = 0;
 80047b6:	4b86      	ldr	r3, [pc, #536]	; (80049d0 <menu+0x3620>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80047bc:	4b7c      	ldr	r3, [pc, #496]	; (80049b0 <menu+0x3600>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80047c4:	4a83      	ldr	r2, [pc, #524]	; (80049d4 <menu+0x3624>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2001      	movs	r0, #1
 80047ca:	f003 facb 	bl	8007d64 <lcd_print>
 80047ce:	e004      	b.n	80047da <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80047d0:	4a81      	ldr	r2, [pc, #516]	; (80049d8 <menu+0x3628>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	2001      	movs	r0, #1
 80047d6:	f003 fac5 	bl	8007d64 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80047da:	4a80      	ldr	r2, [pc, #512]	; (80049dc <menu+0x362c>)
 80047dc:	2101      	movs	r1, #1
 80047de:	2002      	movs	r0, #2
 80047e0:	f003 fac0 	bl	8007d64 <lcd_print>
		lcd_print(2, 13, "    ");
 80047e4:	4a7e      	ldr	r2, [pc, #504]	; (80049e0 <menu+0x3630>)
 80047e6:	210d      	movs	r1, #13
 80047e8:	2002      	movs	r0, #2
 80047ea:	f003 fabb 	bl	8007d64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ee:	2102      	movs	r1, #2
 80047f0:	4871      	ldr	r0, [pc, #452]	; (80049b8 <menu+0x3608>)
 80047f2:	f004 fddd 	bl	80093b0 <HAL_GPIO_ReadPin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d11f      	bne.n	800483c <menu+0x348c>
 80047fc:	2104      	movs	r1, #4
 80047fe:	486e      	ldr	r0, [pc, #440]	; (80049b8 <menu+0x3608>)
 8004800:	f004 fdd6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d118      	bne.n	800483c <menu+0x348c>
 800480a:	4b6c      	ldr	r3, [pc, #432]	; (80049bc <menu+0x360c>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f083 0301 	eor.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <menu+0x348c>
			takeMachineID(0);
 8004818:	2000      	movs	r0, #0
 800481a:	f002 fa57 	bl	8006ccc <takeMachineID>

			HAL_Delay(50);
 800481e:	2032      	movs	r0, #50	; 0x32
 8004820:	f003 fff6 	bl	8008810 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004824:	4a6d      	ldr	r2, [pc, #436]	; (80049dc <menu+0x362c>)
 8004826:	2101      	movs	r1, #1
 8004828:	2002      	movs	r0, #2
 800482a:	f003 fa9b 	bl	8007d64 <lcd_print>
			lcd_print(2, 13, "    ");
 800482e:	4a6c      	ldr	r2, [pc, #432]	; (80049e0 <menu+0x3630>)
 8004830:	210d      	movs	r1, #13
 8004832:	2002      	movs	r0, #2
 8004834:	f003 fa96 	bl	8007d64 <lcd_print>

			bekle();
 8004838:	f000 f93c 	bl	8004ab4 <bekle>
		}
	}

	if (menuSayac == 33) {
 800483c:	4b63      	ldr	r3, [pc, #396]	; (80049cc <menu+0x361c>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b21      	cmp	r3, #33	; 0x21
 8004842:	d13d      	bne.n	80048c0 <menu+0x3510>
		calismaSayModu = 0;
 8004844:	4b62      	ldr	r3, [pc, #392]	; (80049d0 <menu+0x3620>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 800484a:	4a66      	ldr	r2, [pc, #408]	; (80049e4 <menu+0x3634>)
 800484c:	2101      	movs	r1, #1
 800484e:	2001      	movs	r0, #1
 8004850:	f003 fa88 	bl	8007d64 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004854:	4864      	ldr	r0, [pc, #400]	; (80049e8 <menu+0x3638>)
 8004856:	f7fb fce5 	bl	8000224 <strlen>
 800485a:	4603      	mov	r3, r0
 800485c:	2b10      	cmp	r3, #16
 800485e:	d80f      	bhi.n	8004880 <menu+0x34d0>
			lcd_print(2, 1, wifiSSID);
 8004860:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <menu+0x3638>)
 8004862:	2101      	movs	r1, #1
 8004864:	2002      	movs	r0, #2
 8004866:	f003 fa7d 	bl	8007d64 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800486a:	485f      	ldr	r0, [pc, #380]	; (80049e8 <menu+0x3638>)
 800486c:	f7fb fcda 	bl	8000224 <strlen>
 8004870:	4603      	mov	r3, r0
 8004872:	3301      	adds	r3, #1
 8004874:	4a5d      	ldr	r2, [pc, #372]	; (80049ec <menu+0x363c>)
 8004876:	4619      	mov	r1, r3
 8004878:	2002      	movs	r0, #2
 800487a:	f003 fa73 	bl	8007d64 <lcd_print>
 800487e:	e005      	b.n	800488c <menu+0x34dc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004880:	2300      	movs	r3, #0
 8004882:	2202      	movs	r2, #2
 8004884:	2101      	movs	r1, #1
 8004886:	4858      	ldr	r0, [pc, #352]	; (80049e8 <menu+0x3638>)
 8004888:	f7fc fcd6 	bl	8001238 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800488c:	2102      	movs	r1, #2
 800488e:	484a      	ldr	r0, [pc, #296]	; (80049b8 <menu+0x3608>)
 8004890:	f004 fd8e 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d112      	bne.n	80048c0 <menu+0x3510>
 800489a:	2104      	movs	r1, #4
 800489c:	4846      	ldr	r0, [pc, #280]	; (80049b8 <menu+0x3608>)
 800489e:	f004 fd87 	bl	80093b0 <HAL_GPIO_ReadPin>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10b      	bne.n	80048c0 <menu+0x3510>
 80048a8:	4b44      	ldr	r3, [pc, #272]	; (80049bc <menu+0x360c>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f083 0301 	eor.w	r3, r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <menu+0x3510>
			takeWifiSSID(0);
 80048b6:	2000      	movs	r0, #0
 80048b8:	f002 fb72 	bl	8006fa0 <takeWifiSSID>
			/*HAL_Delay(100);

			lcd_print(2, 1, wifiSSID);
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);*/

			bekle();
 80048bc:	f000 f8fa 	bl	8004ab4 <bekle>
		}
	}

	if (menuSayac == 34) {
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <menu+0x361c>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b22      	cmp	r3, #34	; 0x22
 80048c6:	d13d      	bne.n	8004944 <menu+0x3594>
		calismaSayModu = 0;
 80048c8:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <menu+0x3620>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048ce:	4a48      	ldr	r2, [pc, #288]	; (80049f0 <menu+0x3640>)
 80048d0:	2101      	movs	r1, #1
 80048d2:	2001      	movs	r0, #1
 80048d4:	f003 fa46 	bl	8007d64 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80048d8:	4846      	ldr	r0, [pc, #280]	; (80049f4 <menu+0x3644>)
 80048da:	f7fb fca3 	bl	8000224 <strlen>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d80f      	bhi.n	8004904 <menu+0x3554>
			lcd_print(2, 1, wifiPass);
 80048e4:	4a43      	ldr	r2, [pc, #268]	; (80049f4 <menu+0x3644>)
 80048e6:	2101      	movs	r1, #1
 80048e8:	2002      	movs	r0, #2
 80048ea:	f003 fa3b 	bl	8007d64 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048ee:	4841      	ldr	r0, [pc, #260]	; (80049f4 <menu+0x3644>)
 80048f0:	f7fb fc98 	bl	8000224 <strlen>
 80048f4:	4603      	mov	r3, r0
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a3c      	ldr	r2, [pc, #240]	; (80049ec <menu+0x363c>)
 80048fa:	4619      	mov	r1, r3
 80048fc:	2002      	movs	r0, #2
 80048fe:	f003 fa31 	bl	8007d64 <lcd_print>
 8004902:	e005      	b.n	8004910 <menu+0x3560>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004904:	2301      	movs	r3, #1
 8004906:	2202      	movs	r2, #2
 8004908:	2101      	movs	r1, #1
 800490a:	483a      	ldr	r0, [pc, #232]	; (80049f4 <menu+0x3644>)
 800490c:	f7fc fc94 	bl	8001238 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004910:	2102      	movs	r1, #2
 8004912:	4829      	ldr	r0, [pc, #164]	; (80049b8 <menu+0x3608>)
 8004914:	f004 fd4c 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d112      	bne.n	8004944 <menu+0x3594>
 800491e:	2104      	movs	r1, #4
 8004920:	4825      	ldr	r0, [pc, #148]	; (80049b8 <menu+0x3608>)
 8004922:	f004 fd45 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10b      	bne.n	8004944 <menu+0x3594>
 800492c:	4b23      	ldr	r3, [pc, #140]	; (80049bc <menu+0x360c>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f083 0301 	eor.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <menu+0x3594>
			takeWifiPass(0);
 800493a:	2000      	movs	r0, #0
 800493c:	f002 fd04 	bl	8007348 <takeWifiPass>
			/*HAL_Delay(50);

			lcd_print(2, 1, wifiPass);
			lcd_print(2, 1+strlen(wifiPass), emptyArray);*/

			bekle();
 8004940:	f000 f8b8 	bl	8004ab4 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004944:	4b21      	ldr	r3, [pc, #132]	; (80049cc <menu+0x361c>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b23      	cmp	r3, #35	; 0x23
 800494a:	d12e      	bne.n	80049aa <menu+0x35fa>
		if(dilSecim == 0) {
 800494c:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <menu+0x3600>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <menu+0x35ba>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <menu+0x3648>)
 8004956:	2101      	movs	r1, #1
 8004958:	2001      	movs	r0, #1
 800495a:	f003 fa03 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <menu+0x364c>)
 8004960:	2101      	movs	r1, #1
 8004962:	2002      	movs	r0, #2
 8004964:	f003 f9fe 	bl	8007d64 <lcd_print>
 8004968:	e00d      	b.n	8004986 <menu+0x35d6>
		} else if(dilSecim == 1) {
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <menu+0x3600>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d109      	bne.n	8004986 <menu+0x35d6>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004972:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <menu+0x3650>)
 8004974:	2101      	movs	r1, #1
 8004976:	2001      	movs	r0, #1
 8004978:	f003 f9f4 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <menu+0x3654>)
 800497e:	2101      	movs	r1, #1
 8004980:	2002      	movs	r0, #2
 8004982:	f003 f9ef 	bl	8007d64 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004986:	2108      	movs	r1, #8
 8004988:	480b      	ldr	r0, [pc, #44]	; (80049b8 <menu+0x3608>)
 800498a:	f004 fd11 	bl	80093b0 <HAL_GPIO_ReadPin>
 800498e:	4603      	mov	r3, r0
 8004990:	2b01      	cmp	r3, #1
 8004992:	d10a      	bne.n	80049aa <menu+0x35fa>
			menuGiris = 0;
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <menu+0x3658>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 800499a:	f003 fa0f 	bl	8007dbc <lcd_clear>
			HAL_Delay(500);
 800499e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049a2:	f003 ff35 	bl	8008810 <HAL_Delay>
			NVIC_SystemReset();
 80049a6:	f7fc fced 	bl	8001384 <__NVIC_SystemReset>
		}
	}
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000245 	.word	0x20000245
 80049b4:	0800d3c8 	.word	0x0800d3c8
 80049b8:	40010800 	.word	0x40010800
 80049bc:	20000253 	.word	0x20000253
 80049c0:	20000243 	.word	0x20000243
 80049c4:	20000128 	.word	0x20000128
 80049c8:	20000250 	.word	0x20000250
 80049cc:	20000224 	.word	0x20000224
 80049d0:	20000244 	.word	0x20000244
 80049d4:	0800db10 	.word	0x0800db10
 80049d8:	0800db24 	.word	0x0800db24
 80049dc:	200001a0 	.word	0x200001a0
 80049e0:	0800db38 	.word	0x0800db38
 80049e4:	0800db40 	.word	0x0800db40
 80049e8:	200001ac 	.word	0x200001ac
 80049ec:	20000018 	.word	0x20000018
 80049f0:	0800db54 	.word	0x0800db54
 80049f4:	200001c0 	.word	0x200001c0
 80049f8:	0800db68 	.word	0x0800db68
 80049fc:	0800db7c 	.word	0x0800db7c
 8004a00:	0800db90 	.word	0x0800db90
 8004a04:	0800dba4 	.word	0x0800dba4
 8004a08:	20000241 	.word	0x20000241

08004a0c <lcdUpdate>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void lcdUpdate(uint8_t y) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a1c:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a1e:	2101      	movs	r1, #1
 8004a20:	2002      	movs	r0, #2
 8004a22:	f003 f99f 	bl	8007d64 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a26:	e03b      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d105      	bne.n	8004a3a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a30:	2102      	movs	r1, #2
 8004a32:	2002      	movs	r0, #2
 8004a34:	f003 f996 	bl	8007d64 <lcd_print>
}
 8004a38:	e032      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d105      	bne.n	8004a4c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a42:	2103      	movs	r1, #3
 8004a44:	2002      	movs	r0, #2
 8004a46:	f003 f98d 	bl	8007d64 <lcd_print>
}
 8004a4a:	e029      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d105      	bne.n	8004a5e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a54:	2104      	movs	r1, #4
 8004a56:	2002      	movs	r0, #2
 8004a58:	f003 f984 	bl	8007d64 <lcd_print>
}
 8004a5c:	e020      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d105      	bne.n	8004a70 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a64:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a66:	2105      	movs	r1, #5
 8004a68:	2002      	movs	r0, #2
 8004a6a:	f003 f97b 	bl	8007d64 <lcd_print>
}
 8004a6e:	e017      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d105      	bne.n	8004a82 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a78:	2106      	movs	r1, #6
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	f003 f972 	bl	8007d64 <lcd_print>
}
 8004a80:	e00e      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	d10b      	bne.n	8004aa0 <lcdUpdate+0x94>
		lcd_clear();
 8004a88:	f003 f998 	bl	8007dbc <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a8c:	4a07      	ldr	r2, [pc, #28]	; (8004aac <lcdUpdate+0xa0>)
 8004a8e:	2104      	movs	r1, #4
 8004a90:	2001      	movs	r0, #1
 8004a92:	f003 f967 	bl	8007d64 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a96:	4a06      	ldr	r2, [pc, #24]	; (8004ab0 <lcdUpdate+0xa4>)
 8004a98:	2106      	movs	r1, #6
 8004a9a:	2002      	movs	r0, #2
 8004a9c:	f003 f962 	bl	8007d64 <lcd_print>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0800dbb8 	.word	0x0800dbb8
 8004aac:	0800dbbc 	.word	0x0800dbbc
 8004ab0:	0800dbc4 	.word	0x0800dbc4

08004ab4 <bekle>:

void bekle() {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
	timer1=millis;
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <bekle+0x124>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a47      	ldr	r2, [pc, #284]	; (8004bdc <bekle+0x128>)
 8004abe:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac0:	e002      	b.n	8004ac8 <bekle+0x14>
    	butonKontrol = 1;
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <bekle+0x12c>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4846      	ldr	r0, [pc, #280]	; (8004be4 <bekle+0x130>)
 8004acc:	f004 fc70 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d109      	bne.n	8004aea <bekle+0x36>
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <bekle+0x124>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <bekle+0x128>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d0ef      	beq.n	8004ac2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ae2:	e002      	b.n	8004aea <bekle+0x36>
    	butonKontrol = 1;
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <bekle+0x12c>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aea:	2108      	movs	r1, #8
 8004aec:	483e      	ldr	r0, [pc, #248]	; (8004be8 <bekle+0x134>)
 8004aee:	f004 fc5f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d109      	bne.n	8004b0c <bekle+0x58>
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <bekle+0x124>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <bekle+0x128>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d0ef      	beq.n	8004ae4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b04:	e002      	b.n	8004b0c <bekle+0x58>
    	butonKontrol = 1;
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <bekle+0x12c>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4835      	ldr	r0, [pc, #212]	; (8004be4 <bekle+0x130>)
 8004b10:	f004 fc4e 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d109      	bne.n	8004b2e <bekle+0x7a>
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <bekle+0x124>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <bekle+0x128>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d0ef      	beq.n	8004b06 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b26:	e002      	b.n	8004b2e <bekle+0x7a>
    	butonKontrol = 1;
 8004b28:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <bekle+0x12c>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b2e:	2104      	movs	r1, #4
 8004b30:	482c      	ldr	r0, [pc, #176]	; (8004be4 <bekle+0x130>)
 8004b32:	f004 fc3d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d109      	bne.n	8004b50 <bekle+0x9c>
 8004b3c:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <bekle+0x124>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <bekle+0x128>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d0ef      	beq.n	8004b28 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b48:	e002      	b.n	8004b50 <bekle+0x9c>
    	butonKontrol = 1;
 8004b4a:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <bekle+0x12c>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b50:	2108      	movs	r1, #8
 8004b52:	4824      	ldr	r0, [pc, #144]	; (8004be4 <bekle+0x130>)
 8004b54:	f004 fc2c 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d109      	bne.n	8004b72 <bekle+0xbe>
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <bekle+0x124>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <bekle+0x128>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d0ef      	beq.n	8004b4a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b6a:	e002      	b.n	8004b72 <bekle+0xbe>
    	butonKontrol = 1;
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <bekle+0x12c>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	481c      	ldr	r0, [pc, #112]	; (8004be8 <bekle+0x134>)
 8004b76:	f004 fc1b 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <bekle+0xe0>
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <bekle+0x124>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <bekle+0x128>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d0ef      	beq.n	8004b6c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b8c:	e002      	b.n	8004b94 <bekle+0xe0>
    	butonKontrol = 1;
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <bekle+0x12c>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b98:	4813      	ldr	r0, [pc, #76]	; (8004be8 <bekle+0x134>)
 8004b9a:	f004 fc09 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <bekle+0x104>
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <bekle+0x124>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <bekle+0x128>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d0ee      	beq.n	8004b8e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb0:	e002      	b.n	8004bb8 <bekle+0x104>
    	butonKontrol = 1;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <bekle+0x12c>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bbc:	480a      	ldr	r0, [pc, #40]	; (8004be8 <bekle+0x134>)
 8004bbe:	f004 fbf7 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <bekle+0x120>
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <bekle+0x124>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <bekle+0x128>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0ee      	beq.n	8004bb2 <bekle+0xfe>
    }

}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000200 	.word	0x20000200
 8004bdc:	20000208 	.word	0x20000208
 8004be0:	20000253 	.word	0x20000253
 8004be4:	40010800 	.word	0x40010800
 8004be8:	40011000 	.word	0x40011000

08004bec <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <checkLCDBacklight+0x24>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <checkLCDBacklight+0x28>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b3b      	cmp	r3, #59	; 0x3b
 8004bfc:	d903      	bls.n	8004c06 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f003 f8fc 	bl	8007dfc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c04:	e002      	b.n	8004c0c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c06:	2001      	movs	r0, #1
 8004c08:	f003 f8f8 	bl	8007dfc <lcd_backlight>
}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000200 	.word	0x20000200
 8004c14:	2000021c 	.word	0x2000021c

08004c18 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <checkBasincSalteri+0x54>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <checkBasincSalteri+0x12>
		basincVar=1;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <checkBasincSalteri+0x58>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <checkBasincSalteri+0x54>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d119      	bne.n	8004c66 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c36:	480f      	ldr	r0, [pc, #60]	; (8004c74 <checkBasincSalteri+0x5c>)
 8004c38:	f004 fbba 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <checkBasincSalteri+0x60>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <checkBasincSalteri+0x64>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d90a      	bls.n	8004c66 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <checkBasincSalteri+0x58>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c56:	e006      	b.n	8004c66 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <checkBasincSalteri+0x60>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a07      	ldr	r2, [pc, #28]	; (8004c7c <checkBasincSalteri+0x64>)
 8004c5e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <checkBasincSalteri+0x58>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2000022b 	.word	0x2000022b
 8004c70:	20000227 	.word	0x20000227
 8004c74:	40011000 	.word	0x40011000
 8004c78:	20000200 	.word	0x20000200
 8004c7c:	20000218 	.word	0x20000218

08004c80 <checkBasGonder>:

void checkBasGonder() {
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <checkBasGonder+0x74>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10b      	bne.n	8004ca4 <checkBasGonder+0x24>
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <checkBasGonder+0x78>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <checkBasGonder+0x24>
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <checkBasGonder+0x7c>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <checkBasGonder+0x80>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e009      	b.n	8004cb8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <checkBasGonder+0x78>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f083 0301 	eor.w	r3, r3, #1
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cb2:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <checkBasGonder+0x80>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <checkBasGonder+0x74>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10b      	bne.n	8004cd8 <checkBasGonder+0x58>
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <checkBasGonder+0x84>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <checkBasGonder+0x58>
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <checkBasGonder+0x7c>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <checkBasGonder+0x88>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004cd6:	e009      	b.n	8004cec <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <checkBasGonder+0x84>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f083 0301 	eor.w	r3, r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <checkBasGonder+0x88>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000225 	.word	0x20000225
 8004cf8:	20000259 	.word	0x20000259
 8004cfc:	20000233 	.word	0x20000233
 8004d00:	20000260 	.word	0x20000260
 8004d04:	2000025c 	.word	0x2000025c
 8004d08:	20000261 	.word	0x20000261

08004d0c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d18:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d1e:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10e      	bne.n	8004d44 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2a:	4820      	ldr	r0, [pc, #128]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d2c:	f004 fb40 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e002      	b.n	8004d44 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d10e      	bne.n	8004d6a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d50:	4816      	ldr	r0, [pc, #88]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d52:	f004 fb2d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d5c:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d64:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d116      	bne.n	8004da0 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d76:	480d      	ldr	r0, [pc, #52]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d78:	f004 fb1a 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <checkKapiSecimleri+0x8e>
 8004d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d86:	4809      	ldr	r0, [pc, #36]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d88:	f004 fb12 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d98:	e002      	b.n	8004da0 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	2000022c 	.word	0x2000022c
 8004da8:	20000277 	.word	0x20000277
 8004dac:	40010800 	.word	0x40010800

08004db0 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004db4:	4b62      	ldr	r3, [pc, #392]	; (8004f40 <checkAktifCalisma+0x190>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f041 833e 	bne.w	800643a <checkAktifCalisma+0x168a>
 8004dbe:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <checkAktifCalisma+0x194>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f041 8339 	bne.w	800643a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004dc8:	4b5f      	ldr	r3, [pc, #380]	; (8004f48 <checkAktifCalisma+0x198>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11a      	bne.n	8004e06 <checkAktifCalisma+0x56>
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <checkAktifCalisma+0x19c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d116      	bne.n	8004e06 <checkAktifCalisma+0x56>
 8004dd8:	4b5d      	ldr	r3, [pc, #372]	; (8004f50 <checkAktifCalisma+0x1a0>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <checkAktifCalisma+0x46>
 8004de0:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <checkAktifCalisma+0x1a4>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	f083 0301 	eor.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <checkAktifCalisma+0x46>
 8004dee:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <checkAktifCalisma+0x1a8>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d007      	beq.n	8004e06 <checkAktifCalisma+0x56>
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <checkAktifCalisma+0x1ac>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <checkAktifCalisma+0x80>
 8004dfe:	4b58      	ldr	r3, [pc, #352]	; (8004f60 <checkAktifCalisma+0x1b0>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d114      	bne.n	8004e30 <checkAktifCalisma+0x80>
 8004e06:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <checkAktifCalisma+0x1b4>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <checkAktifCalisma+0x80>
 8004e0e:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <checkAktifCalisma+0x1b8>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00c      	beq.n	8004e30 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e16:	2201      	movs	r2, #1
 8004e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e1c:	4853      	ldr	r0, [pc, #332]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e1e:	f004 fade 	bl	80093de <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e22:	4b53      	ldr	r3, [pc, #332]	; (8004f70 <checkAktifCalisma+0x1c0>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e28:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <checkAktifCalisma+0x1c4>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e008      	b.n	8004e42 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e36:	484d      	ldr	r0, [pc, #308]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e38:	f004 fad1 	bl	80093de <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	; (8004f70 <checkAktifCalisma+0x1c0>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e42:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <checkAktifCalisma+0x194>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d160      	bne.n	8004f0c <checkAktifCalisma+0x15c>
 8004e4a:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <checkAktifCalisma+0x1b4>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d05c      	beq.n	8004f0c <checkAktifCalisma+0x15c>
 8004e52:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <checkAktifCalisma+0x1b8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d058      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e5e:	4843      	ldr	r0, [pc, #268]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e60:	f004 faa6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <checkAktifCalisma+0xc2>
 8004e6a:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <checkAktifCalisma+0x1c8>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04c      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e72:	2102      	movs	r1, #2
 8004e74:	4841      	ldr	r0, [pc, #260]	; (8004f7c <checkAktifCalisma+0x1cc>)
 8004e76:	f004 fa9b 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d145      	bne.n	8004f0c <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <checkAktifCalisma+0x1d0>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d041      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e8c:	4837      	ldr	r0, [pc, #220]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e8e:	f004 fa8f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10e      	bne.n	8004eb6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e9c:	4833      	ldr	r0, [pc, #204]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e9e:	f004 fa87 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d106      	bne.n	8004eb6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ea8:	2140      	movs	r1, #64	; 0x40
 8004eaa:	4834      	ldr	r0, [pc, #208]	; (8004f7c <checkAktifCalisma+0x1cc>)
 8004eac:	f004 fa80 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d003      	beq.n	8004ebe <checkAktifCalisma+0x10e>
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <checkAktifCalisma+0x198>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d026      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <checkAktifCalisma+0x1a0>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01f      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	; (8004f4c <checkAktifCalisma+0x19c>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f083 0301 	eor.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <checkAktifCalisma+0x1ac>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d011      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004ee8:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <checkAktifCalisma+0x1d4>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f083 0301 	eor.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <checkAktifCalisma+0x1d8>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	f083 0301 	eor.w	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <checkAktifCalisma+0x198>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <checkAktifCalisma+0x198>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <checkAktifCalisma+0x198>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d03a      	beq.n	8004f90 <checkAktifCalisma+0x1e0>
 8004f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1e:	4817      	ldr	r0, [pc, #92]	; (8004f7c <checkAktifCalisma+0x1cc>)
 8004f20:	f004 fa46 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d132      	bne.n	8004f90 <checkAktifCalisma+0x1e0>
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <checkAktifCalisma+0x1dc>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02e      	beq.n	8004f90 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f32:	2201      	movs	r2, #1
 8004f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f38:	480c      	ldr	r0, [pc, #48]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004f3a:	f004 fa50 	bl	80093de <HAL_GPIO_WritePin>
 8004f3e:	e02d      	b.n	8004f9c <checkAktifCalisma+0x1ec>
 8004f40:	20000242 	.word	0x20000242
 8004f44:	20000241 	.word	0x20000241
 8004f48:	20000259 	.word	0x20000259
 8004f4c:	2000025a 	.word	0x2000025a
 8004f50:	2000025c 	.word	0x2000025c
 8004f54:	20000254 	.word	0x20000254
 8004f58:	20000237 	.word	0x20000237
 8004f5c:	2000025b 	.word	0x2000025b
 8004f60:	20000236 	.word	0x20000236
 8004f64:	20000276 	.word	0x20000276
 8004f68:	20000277 	.word	0x20000277
 8004f6c:	40010c00 	.word	0x40010c00
 8004f70:	20000278 	.word	0x20000278
 8004f74:	20000263 	.word	0x20000263
 8004f78:	20000260 	.word	0x20000260
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	20000227 	.word	0x20000227
 8004f84:	2000025e 	.word	0x2000025e
 8004f88:	2000025f 	.word	0x2000025f
 8004f8c:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f96:	4860      	ldr	r0, [pc, #384]	; (8005118 <checkAktifCalisma+0x368>)
 8004f98:	f004 fa21 	bl	80093de <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f9c:	4b5f      	ldr	r3, [pc, #380]	; (800511c <checkAktifCalisma+0x36c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <checkAktifCalisma+0x21c>
 8004fa4:	4b5e      	ldr	r3, [pc, #376]	; (8005120 <checkAktifCalisma+0x370>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d007      	beq.n	8004fbc <checkAktifCalisma+0x20c>
 8004fac:	4b5c      	ldr	r3, [pc, #368]	; (8005120 <checkAktifCalisma+0x370>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d003      	beq.n	8004fbc <checkAktifCalisma+0x20c>
 8004fb4:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <checkAktifCalisma+0x374>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d107      	bne.n	8004fcc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	4855      	ldr	r0, [pc, #340]	; (8005118 <checkAktifCalisma+0x368>)
 8004fc2:	f004 fa0c 	bl	80093de <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004fc6:	4b58      	ldr	r3, [pc, #352]	; (8005128 <checkAktifCalisma+0x378>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004fcc:	4b56      	ldr	r3, [pc, #344]	; (8005128 <checkAktifCalisma+0x378>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d02f      	beq.n	8005034 <checkAktifCalisma+0x284>
 8004fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fd8:	484f      	ldr	r0, [pc, #316]	; (8005118 <checkAktifCalisma+0x368>)
 8004fda:	f004 f9e9 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <checkAktifCalisma+0x242>
 8004fe4:	4b51      	ldr	r3, [pc, #324]	; (800512c <checkAktifCalisma+0x37c>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f083 0301 	eor.w	r3, r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <checkAktifCalisma+0x250>
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	484e      	ldr	r0, [pc, #312]	; (8005130 <checkAktifCalisma+0x380>)
 8004ff6:	f004 f9db 	bl	80093b0 <HAL_GPIO_ReadPin>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d119      	bne.n	8005034 <checkAktifCalisma+0x284>
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <checkAktifCalisma+0x384>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <checkAktifCalisma+0x284>
 8005008:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <checkAktifCalisma+0x388>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <checkAktifCalisma+0x284>
 8005010:	4b4a      	ldr	r3, [pc, #296]	; (800513c <checkAktifCalisma+0x38c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <checkAktifCalisma+0x284>
 8005018:	4b49      	ldr	r3, [pc, #292]	; (8005140 <checkAktifCalisma+0x390>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f083 0301 	eor.w	r3, r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d006      	beq.n	8005034 <checkAktifCalisma+0x284>
			timer2=millis;
 8005026:	4b47      	ldr	r3, [pc, #284]	; (8005144 <checkAktifCalisma+0x394>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a47      	ldr	r2, [pc, #284]	; (8005148 <checkAktifCalisma+0x398>)
 800502c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800502e:	4b44      	ldr	r3, [pc, #272]	; (8005140 <checkAktifCalisma+0x390>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <checkAktifCalisma+0x394>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b43      	ldr	r3, [pc, #268]	; (8005148 <checkAktifCalisma+0x398>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	4a43      	ldr	r2, [pc, #268]	; (800514c <checkAktifCalisma+0x39c>)
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	4293      	cmp	r3, r2
 8005044:	d303      	bcc.n	800504e <checkAktifCalisma+0x29e>
 8005046:	4b3e      	ldr	r3, [pc, #248]	; (8005140 <checkAktifCalisma+0x390>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <checkAktifCalisma+0x2c2>
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <checkAktifCalisma+0x384>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f083 0301 	eor.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <checkAktifCalisma+0x2c2>
 800505c:	4b36      	ldr	r3, [pc, #216]	; (8005138 <checkAktifCalisma+0x388>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f083 0301 	eor.w	r3, r3, #1
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <checkAktifCalisma+0x2c2>
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <checkAktifCalisma+0x38c>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005072:	2200      	movs	r2, #0
 8005074:	2104      	movs	r1, #4
 8005076:	4828      	ldr	r0, [pc, #160]	; (8005118 <checkAktifCalisma+0x368>)
 8005078:	f004 f9b1 	bl	80093de <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <checkAktifCalisma+0x378>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <checkAktifCalisma+0x390>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005088:	4b31      	ldr	r3, [pc, #196]	; (8005150 <checkAktifCalisma+0x3a0>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005090:	4b30      	ldr	r3, [pc, #192]	; (8005154 <checkAktifCalisma+0x3a4>)
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005096:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <checkAktifCalisma+0x3a0>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d116      	bne.n	80050cc <checkAktifCalisma+0x31c>
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <checkAktifCalisma+0x3a8>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <checkAktifCalisma+0x31c>
 80050a6:	2101      	movs	r1, #1
 80050a8:	4821      	ldr	r0, [pc, #132]	; (8005130 <checkAktifCalisma+0x380>)
 80050aa:	f004 f981 	bl	80093b0 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <checkAktifCalisma+0x31c>
 80050b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050b8:	4817      	ldr	r0, [pc, #92]	; (8005118 <checkAktifCalisma+0x368>)
 80050ba:	f004 f979 	bl	80093b0 <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050c4:	4b23      	ldr	r3, [pc, #140]	; (8005154 <checkAktifCalisma+0x3a4>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e011      	b.n	80050f0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <checkAktifCalisma+0x3a0>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10d      	bne.n	80050f0 <checkAktifCalisma+0x340>
 80050d4:	2101      	movs	r1, #1
 80050d6:	4816      	ldr	r0, [pc, #88]	; (8005130 <checkAktifCalisma+0x380>)
 80050d8:	f004 f96a 	bl	80093b0 <HAL_GPIO_ReadPin>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d106      	bne.n	80050f0 <checkAktifCalisma+0x340>
 80050e2:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <checkAktifCalisma+0x3a8>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <checkAktifCalisma+0x3a4>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <checkAktifCalisma+0x3a0>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d134      	bne.n	8005162 <checkAktifCalisma+0x3b2>
 80050f8:	4b17      	ldr	r3, [pc, #92]	; (8005158 <checkAktifCalisma+0x3a8>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d130      	bne.n	8005162 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005100:	2101      	movs	r1, #1
 8005102:	480b      	ldr	r0, [pc, #44]	; (8005130 <checkAktifCalisma+0x380>)
 8005104:	f004 f954 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d126      	bne.n	800515c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <checkAktifCalisma+0x3a4>)
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e025      	b.n	8005162 <checkAktifCalisma+0x3b2>
 8005116:	bf00      	nop
 8005118:	40010c00 	.word	0x40010c00
 800511c:	20000259 	.word	0x20000259
 8005120:	20000233 	.word	0x20000233
 8005124:	20000237 	.word	0x20000237
 8005128:	2000025d 	.word	0x2000025d
 800512c:	20000260 	.word	0x20000260
 8005130:	40011000 	.word	0x40011000
 8005134:	20000276 	.word	0x20000276
 8005138:	20000277 	.word	0x20000277
 800513c:	20000227 	.word	0x20000227
 8005140:	20000255 	.word	0x20000255
 8005144:	20000200 	.word	0x20000200
 8005148:	2000020c 	.word	0x2000020c
 800514c:	20000238 	.word	0x20000238
 8005150:	20000228 	.word	0x20000228
 8005154:	2000027b 	.word	0x2000027b
 8005158:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 800515c:	4b7f      	ldr	r3, [pc, #508]	; (800535c <checkAktifCalisma+0x5ac>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005162:	4b7f      	ldr	r3, [pc, #508]	; (8005360 <checkAktifCalisma+0x5b0>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d17c      	bne.n	8005264 <checkAktifCalisma+0x4b4>
 800516a:	4b7e      	ldr	r3, [pc, #504]	; (8005364 <checkAktifCalisma+0x5b4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d078      	beq.n	8005264 <checkAktifCalisma+0x4b4>
 8005172:	4b7d      	ldr	r3, [pc, #500]	; (8005368 <checkAktifCalisma+0x5b8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d074      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800517a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800517e:	487b      	ldr	r0, [pc, #492]	; (800536c <checkAktifCalisma+0x5bc>)
 8005180:	f004 f916 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <checkAktifCalisma+0x3e2>
 800518a:	4b79      	ldr	r3, [pc, #484]	; (8005370 <checkAktifCalisma+0x5c0>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d068      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005192:	4b72      	ldr	r3, [pc, #456]	; (800535c <checkAktifCalisma+0x5ac>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d064      	beq.n	8005264 <checkAktifCalisma+0x4b4>
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <checkAktifCalisma+0x5c4>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d05d      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051a8:	2104      	movs	r1, #4
 80051aa:	4873      	ldr	r0, [pc, #460]	; (8005378 <checkAktifCalisma+0x5c8>)
 80051ac:	f004 f900 	bl	80093b0 <HAL_GPIO_ReadPin>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <checkAktifCalisma+0x40e>
 80051b6:	4b71      	ldr	r3, [pc, #452]	; (800537c <checkAktifCalisma+0x5cc>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d152      	bne.n	8005264 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051c2:	486a      	ldr	r0, [pc, #424]	; (800536c <checkAktifCalisma+0x5bc>)
 80051c4:	f004 f8f4 	bl	80093b0 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10e      	bne.n	80051ec <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051d2:	4866      	ldr	r0, [pc, #408]	; (800536c <checkAktifCalisma+0x5bc>)
 80051d4:	f004 f8ec 	bl	80093b0 <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d106      	bne.n	80051ec <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80051de:	2140      	movs	r1, #64	; 0x40
 80051e0:	4865      	ldr	r0, [pc, #404]	; (8005378 <checkAktifCalisma+0x5c8>)
 80051e2:	f004 f8e5 	bl	80093b0 <HAL_GPIO_ReadPin>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d003      	beq.n	80051f4 <checkAktifCalisma+0x444>
 80051ec:	4b64      	ldr	r3, [pc, #400]	; (8005380 <checkAktifCalisma+0x5d0>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d037      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80051f4:	4b63      	ldr	r3, [pc, #396]	; (8005384 <checkAktifCalisma+0x5d4>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f083 0301 	eor.w	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d030      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005202:	4b61      	ldr	r3, [pc, #388]	; (8005388 <checkAktifCalisma+0x5d8>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d029      	beq.n	8005264 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005210:	4b5e      	ldr	r3, [pc, #376]	; (800538c <checkAktifCalisma+0x5dc>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d022      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800521e:	4b5c      	ldr	r3, [pc, #368]	; (8005390 <checkAktifCalisma+0x5e0>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	f083 0301 	eor.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800522c:	4b59      	ldr	r3, [pc, #356]	; (8005394 <checkAktifCalisma+0x5e4>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d014      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800523a:	4b57      	ldr	r3, [pc, #348]	; (8005398 <checkAktifCalisma+0x5e8>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005248:	2201      	movs	r2, #1
 800524a:	2102      	movs	r1, #2
 800524c:	4847      	ldr	r0, [pc, #284]	; (800536c <checkAktifCalisma+0x5bc>)
 800524e:	f004 f8c6 	bl	80093de <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005252:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <checkAktifCalisma+0x5ec>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800525e:	4b50      	ldr	r3, [pc, #320]	; (80053a0 <checkAktifCalisma+0x5f0>)
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005264:	4b46      	ldr	r3, [pc, #280]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d033      	beq.n	80052d4 <checkAktifCalisma+0x524>
 800526c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005270:	483e      	ldr	r0, [pc, #248]	; (800536c <checkAktifCalisma+0x5bc>)
 8005272:	f004 f89d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005276:	4603      	mov	r3, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <checkAktifCalisma+0x4da>
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <checkAktifCalisma+0x5c0>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f083 0301 	eor.w	r3, r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <checkAktifCalisma+0x4f0>
 800528a:	2104      	movs	r1, #4
 800528c:	483a      	ldr	r0, [pc, #232]	; (8005378 <checkAktifCalisma+0x5c8>)
 800528e:	f004 f88f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d11d      	bne.n	80052d4 <checkAktifCalisma+0x524>
 8005298:	4b38      	ldr	r3, [pc, #224]	; (800537c <checkAktifCalisma+0x5cc>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d019      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <checkAktifCalisma+0x5b4>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d015      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052a8:	4b2f      	ldr	r3, [pc, #188]	; (8005368 <checkAktifCalisma+0x5b8>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d011      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052b0:	4b2a      	ldr	r3, [pc, #168]	; (800535c <checkAktifCalisma+0x5ac>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052b8:	4b3a      	ldr	r3, [pc, #232]	; (80053a4 <checkAktifCalisma+0x5f4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f083 0301 	eor.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <checkAktifCalisma+0x524>
			timer2=millis;
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <checkAktifCalisma+0x5f8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a38      	ldr	r2, [pc, #224]	; (80053ac <checkAktifCalisma+0x5fc>)
 80052cc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052ce:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <checkAktifCalisma+0x5f4>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80052d4:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <checkAktifCalisma+0x5f8>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b34      	ldr	r3, [pc, #208]	; (80053ac <checkAktifCalisma+0x5fc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <checkAktifCalisma+0x600>)
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d303      	bcc.n	80052ee <checkAktifCalisma+0x53e>
 80052e6:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <checkAktifCalisma+0x5f4>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d114      	bne.n	8005318 <checkAktifCalisma+0x568>
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <checkAktifCalisma+0x5b4>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f083 0301 	eor.w	r3, r3, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <checkAktifCalisma+0x568>
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <checkAktifCalisma+0x5b8>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <checkAktifCalisma+0x568>
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <checkAktifCalisma+0x5ac>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f083 0301 	eor.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005318:	2200      	movs	r2, #0
 800531a:	2102      	movs	r1, #2
 800531c:	4813      	ldr	r0, [pc, #76]	; (800536c <checkAktifCalisma+0x5bc>)
 800531e:	f004 f85e 	bl	80093de <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005322:	4b17      	ldr	r3, [pc, #92]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <checkAktifCalisma+0x5f4>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d040      	beq.n	80053b8 <checkAktifCalisma+0x608>
 8005336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800533a:	480f      	ldr	r0, [pc, #60]	; (8005378 <checkAktifCalisma+0x5c8>)
 800533c:	f004 f838 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d138      	bne.n	80053b8 <checkAktifCalisma+0x608>
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <checkAktifCalisma+0x604>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d034      	beq.n	80053b8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800534e:	2201      	movs	r2, #1
 8005350:	2101      	movs	r1, #1
 8005352:	4806      	ldr	r0, [pc, #24]	; (800536c <checkAktifCalisma+0x5bc>)
 8005354:	f004 f843 	bl	80093de <HAL_GPIO_WritePin>
 8005358:	e033      	b.n	80053c2 <checkAktifCalisma+0x612>
 800535a:	bf00      	nop
 800535c:	2000027b 	.word	0x2000027b
 8005360:	20000241 	.word	0x20000241
 8005364:	20000276 	.word	0x20000276
 8005368:	20000277 	.word	0x20000277
 800536c:	40010c00 	.word	0x40010c00
 8005370:	20000261 	.word	0x20000261
 8005374:	20000275 	.word	0x20000275
 8005378:	40011000 	.word	0x40011000
 800537c:	2000022a 	.word	0x2000022a
 8005380:	2000025c 	.word	0x2000025c
 8005384:	20000259 	.word	0x20000259
 8005388:	2000025d 	.word	0x2000025d
 800538c:	2000025a 	.word	0x2000025a
 8005390:	2000025b 	.word	0x2000025b
 8005394:	2000025e 	.word	0x2000025e
 8005398:	2000025f 	.word	0x2000025f
 800539c:	20000264 	.word	0x20000264
 80053a0:	20000285 	.word	0x20000285
 80053a4:	20000254 	.word	0x20000254
 80053a8:	20000200 	.word	0x20000200
 80053ac:	2000020c 	.word	0x2000020c
 80053b0:	20000239 	.word	0x20000239
 80053b4:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2101      	movs	r1, #1
 80053bc:	4836      	ldr	r0, [pc, #216]	; (8005498 <checkAktifCalisma+0x6e8>)
 80053be:	f004 f80e 	bl	80093de <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053c2:	4b36      	ldr	r3, [pc, #216]	; (800549c <checkAktifCalisma+0x6ec>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 8080 	bne.w	80054cc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <checkAktifCalisma+0x6f0>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d003      	beq.n	80053dc <checkAktifCalisma+0x62c>
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <checkAktifCalisma+0x6f0>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d177      	bne.n	80054cc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80053dc:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <checkAktifCalisma+0x6f4>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d073      	beq.n	80054cc <checkAktifCalisma+0x71c>
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <checkAktifCalisma+0x6f8>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d06f      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80053ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f0:	4829      	ldr	r0, [pc, #164]	; (8005498 <checkAktifCalisma+0x6e8>)
 80053f2:	f003 ffdd 	bl	80093b0 <HAL_GPIO_ReadPin>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d167      	bne.n	80054cc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80053fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005400:	482a      	ldr	r0, [pc, #168]	; (80054ac <checkAktifCalisma+0x6fc>)
 8005402:	f003 ffd5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <checkAktifCalisma+0x664>
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <checkAktifCalisma+0x700>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d15b      	bne.n	80054cc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	4825      	ldr	r0, [pc, #148]	; (80054ac <checkAktifCalisma+0x6fc>)
 8005418:	f003 ffca 	bl	80093b0 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d10f      	bne.n	8005442 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005426:	481c      	ldr	r0, [pc, #112]	; (8005498 <checkAktifCalisma+0x6e8>)
 8005428:	f003 ffc2 	bl	80093b0 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d107      	bne.n	8005442 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005436:	4818      	ldr	r0, [pc, #96]	; (8005498 <checkAktifCalisma+0x6e8>)
 8005438:	f003 ffba 	bl	80093b0 <HAL_GPIO_ReadPin>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d003      	beq.n	800544a <checkAktifCalisma+0x69a>
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <checkAktifCalisma+0x704>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d040      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <checkAktifCalisma+0x708>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f083 0301 	eor.w	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d039      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <checkAktifCalisma+0x70c>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f083 0301 	eor.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d032      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <checkAktifCalisma+0x710>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f083 0301 	eor.w	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02b      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <checkAktifCalisma+0x714>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f083 0301 	eor.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d024      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <checkAktifCalisma+0x718>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f083 0301 	eor.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01d      	beq.n	80054cc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <checkAktifCalisma+0x704>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e01c      	b.n	80054d2 <checkAktifCalisma+0x722>
 8005498:	40010c00 	.word	0x40010c00
 800549c:	20000241 	.word	0x20000241
 80054a0:	20000233 	.word	0x20000233
 80054a4:	20000276 	.word	0x20000276
 80054a8:	20000277 	.word	0x20000277
 80054ac:	40011000 	.word	0x40011000
 80054b0:	20000234 	.word	0x20000234
 80054b4:	2000025a 	.word	0x2000025a
 80054b8:	20000259 	.word	0x20000259
 80054bc:	2000025d 	.word	0x2000025d
 80054c0:	2000025c 	.word	0x2000025c
 80054c4:	2000025b 	.word	0x2000025b
 80054c8:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 80054cc:	4b64      	ldr	r3, [pc, #400]	; (8005660 <checkAktifCalisma+0x8b0>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054d2:	4b63      	ldr	r3, [pc, #396]	; (8005660 <checkAktifCalisma+0x8b0>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80054da:	2201      	movs	r2, #1
 80054dc:	2120      	movs	r1, #32
 80054de:	4861      	ldr	r0, [pc, #388]	; (8005664 <checkAktifCalisma+0x8b4>)
 80054e0:	f003 ff7d 	bl	80093de <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80054e4:	4b60      	ldr	r3, [pc, #384]	; (8005668 <checkAktifCalisma+0x8b8>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <checkAktifCalisma+0x8b8>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d025      	beq.n	800553e <checkAktifCalisma+0x78e>
 80054f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f6:	485d      	ldr	r0, [pc, #372]	; (800566c <checkAktifCalisma+0x8bc>)
 80054f8:	f003 ff5a 	bl	80093b0 <HAL_GPIO_ReadPin>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d007      	beq.n	8005512 <checkAktifCalisma+0x762>
 8005502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005506:	4857      	ldr	r0, [pc, #348]	; (8005664 <checkAktifCalisma+0x8b4>)
 8005508:	f003 ff52 	bl	80093b0 <HAL_GPIO_ReadPin>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d115      	bne.n	800553e <checkAktifCalisma+0x78e>
 8005512:	4b57      	ldr	r3, [pc, #348]	; (8005670 <checkAktifCalisma+0x8c0>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d011      	beq.n	800553e <checkAktifCalisma+0x78e>
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <checkAktifCalisma+0x8c4>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <checkAktifCalisma+0x78e>
 8005522:	4b55      	ldr	r3, [pc, #340]	; (8005678 <checkAktifCalisma+0x8c8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <checkAktifCalisma+0x78e>
			timer2=millis;
 8005530:	4b52      	ldr	r3, [pc, #328]	; (800567c <checkAktifCalisma+0x8cc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a52      	ldr	r2, [pc, #328]	; (8005680 <checkAktifCalisma+0x8d0>)
 8005536:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <checkAktifCalisma+0x8c8>)
 800553a:	2201      	movs	r2, #1
 800553c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800553e:	4b4f      	ldr	r3, [pc, #316]	; (800567c <checkAktifCalisma+0x8cc>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b4f      	ldr	r3, [pc, #316]	; (8005680 <checkAktifCalisma+0x8d0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	4a4e      	ldr	r2, [pc, #312]	; (8005684 <checkAktifCalisma+0x8d4>)
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	4293      	cmp	r3, r2
 800554e:	d303      	bcc.n	8005558 <checkAktifCalisma+0x7a8>
 8005550:	4b49      	ldr	r3, [pc, #292]	; (8005678 <checkAktifCalisma+0x8c8>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10d      	bne.n	8005574 <checkAktifCalisma+0x7c4>
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <checkAktifCalisma+0x8c0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <checkAktifCalisma+0x7c4>
 8005566:	4b43      	ldr	r3, [pc, #268]	; (8005674 <checkAktifCalisma+0x8c4>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f083 0301 	eor.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005574:	2200      	movs	r2, #0
 8005576:	2120      	movs	r1, #32
 8005578:	483a      	ldr	r0, [pc, #232]	; (8005664 <checkAktifCalisma+0x8b4>)
 800557a:	f003 ff30 	bl	80093de <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800557e:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <checkAktifCalisma+0x8b8>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005584:	4b3c      	ldr	r3, [pc, #240]	; (8005678 <checkAktifCalisma+0x8c8>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800558a:	4b3f      	ldr	r3, [pc, #252]	; (8005688 <checkAktifCalisma+0x8d8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 8088 	bne.w	80056a4 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005594:	4b3d      	ldr	r3, [pc, #244]	; (800568c <checkAktifCalisma+0x8dc>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d003      	beq.n	80055a4 <checkAktifCalisma+0x7f4>
 800559c:	4b3b      	ldr	r3, [pc, #236]	; (800568c <checkAktifCalisma+0x8dc>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d17f      	bne.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <checkAktifCalisma+0x8c0>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d07b      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <checkAktifCalisma+0x8c4>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d077      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055b4:	2140      	movs	r1, #64	; 0x40
 80055b6:	482b      	ldr	r0, [pc, #172]	; (8005664 <checkAktifCalisma+0x8b4>)
 80055b8:	f003 fefa 	bl	80093b0 <HAL_GPIO_ReadPin>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d170      	bne.n	80056a4 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055c6:	4827      	ldr	r0, [pc, #156]	; (8005664 <checkAktifCalisma+0x8b4>)
 80055c8:	f003 fef2 	bl	80093b0 <HAL_GPIO_ReadPin>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <checkAktifCalisma+0x82a>
 80055d2:	4b2f      	ldr	r3, [pc, #188]	; (8005690 <checkAktifCalisma+0x8e0>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d164      	bne.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055de:	4823      	ldr	r0, [pc, #140]	; (800566c <checkAktifCalisma+0x8bc>)
 80055e0:	f003 fee6 	bl	80093b0 <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10f      	bne.n	800560a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055ee:	481f      	ldr	r0, [pc, #124]	; (800566c <checkAktifCalisma+0x8bc>)
 80055f0:	f003 fede 	bl	80093b0 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80055fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055fe:	481b      	ldr	r0, [pc, #108]	; (800566c <checkAktifCalisma+0x8bc>)
 8005600:	f003 fed6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d003      	beq.n	8005612 <checkAktifCalisma+0x862>
 800560a:	4b22      	ldr	r3, [pc, #136]	; (8005694 <checkAktifCalisma+0x8e4>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d048      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005612:	4b21      	ldr	r3, [pc, #132]	; (8005698 <checkAktifCalisma+0x8e8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d041      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <checkAktifCalisma+0x8ec>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f083 0301 	eor.w	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03a      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800562e:	4b1c      	ldr	r3, [pc, #112]	; (80056a0 <checkAktifCalisma+0x8f0>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	f083 0301 	eor.w	r3, r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d033      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <checkAktifCalisma+0x8b8>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d02c      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <checkAktifCalisma+0x8b0>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f083 0301 	eor.w	r3, r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d025      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <checkAktifCalisma+0x8e4>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e024      	b.n	80056aa <checkAktifCalisma+0x8fa>
 8005660:	2000025a 	.word	0x2000025a
 8005664:	40011000 	.word	0x40011000
 8005668:	2000025e 	.word	0x2000025e
 800566c:	40010c00 	.word	0x40010c00
 8005670:	20000276 	.word	0x20000276
 8005674:	20000277 	.word	0x20000277
 8005678:	20000256 	.word	0x20000256
 800567c:	20000200 	.word	0x20000200
 8005680:	2000020c 	.word	0x2000020c
 8005684:	2000023a 	.word	0x2000023a
 8005688:	20000241 	.word	0x20000241
 800568c:	20000233 	.word	0x20000233
 8005690:	20000235 	.word	0x20000235
 8005694:	2000025b 	.word	0x2000025b
 8005698:	20000259 	.word	0x20000259
 800569c:	2000025d 	.word	0x2000025d
 80056a0:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 80056a4:	4b96      	ldr	r3, [pc, #600]	; (8005900 <checkAktifCalisma+0xb50>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056aa:	4b95      	ldr	r3, [pc, #596]	; (8005900 <checkAktifCalisma+0xb50>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056b2:	2201      	movs	r2, #1
 80056b4:	2110      	movs	r1, #16
 80056b6:	4893      	ldr	r0, [pc, #588]	; (8005904 <checkAktifCalisma+0xb54>)
 80056b8:	f003 fe91 	bl	80093de <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056bc:	4b92      	ldr	r3, [pc, #584]	; (8005908 <checkAktifCalisma+0xb58>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056c2:	4b91      	ldr	r3, [pc, #580]	; (8005908 <checkAktifCalisma+0xb58>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d024      	beq.n	8005714 <checkAktifCalisma+0x964>
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	488d      	ldr	r0, [pc, #564]	; (8005904 <checkAktifCalisma+0xb54>)
 80056ce:	f003 fe6f 	bl	80093b0 <HAL_GPIO_ReadPin>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d007      	beq.n	80056e8 <checkAktifCalisma+0x938>
 80056d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056dc:	4889      	ldr	r0, [pc, #548]	; (8005904 <checkAktifCalisma+0xb54>)
 80056de:	f003 fe67 	bl	80093b0 <HAL_GPIO_ReadPin>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d115      	bne.n	8005714 <checkAktifCalisma+0x964>
 80056e8:	4b88      	ldr	r3, [pc, #544]	; (800590c <checkAktifCalisma+0xb5c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d011      	beq.n	8005714 <checkAktifCalisma+0x964>
 80056f0:	4b87      	ldr	r3, [pc, #540]	; (8005910 <checkAktifCalisma+0xb60>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <checkAktifCalisma+0x964>
 80056f8:	4b86      	ldr	r3, [pc, #536]	; (8005914 <checkAktifCalisma+0xb64>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f083 0301 	eor.w	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d006      	beq.n	8005714 <checkAktifCalisma+0x964>
			timer2=millis;
 8005706:	4b84      	ldr	r3, [pc, #528]	; (8005918 <checkAktifCalisma+0xb68>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a84      	ldr	r2, [pc, #528]	; (800591c <checkAktifCalisma+0xb6c>)
 800570c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800570e:	4b81      	ldr	r3, [pc, #516]	; (8005914 <checkAktifCalisma+0xb64>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005714:	4b80      	ldr	r3, [pc, #512]	; (8005918 <checkAktifCalisma+0xb68>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b80      	ldr	r3, [pc, #512]	; (800591c <checkAktifCalisma+0xb6c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	4a80      	ldr	r2, [pc, #512]	; (8005920 <checkAktifCalisma+0xb70>)
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	4293      	cmp	r3, r2
 8005724:	d303      	bcc.n	800572e <checkAktifCalisma+0x97e>
 8005726:	4b7b      	ldr	r3, [pc, #492]	; (8005914 <checkAktifCalisma+0xb64>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <checkAktifCalisma+0x99a>
 800572e:	4b77      	ldr	r3, [pc, #476]	; (800590c <checkAktifCalisma+0xb5c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <checkAktifCalisma+0x99a>
 800573c:	4b74      	ldr	r3, [pc, #464]	; (8005910 <checkAktifCalisma+0xb60>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800574a:	2200      	movs	r2, #0
 800574c:	2110      	movs	r1, #16
 800574e:	486d      	ldr	r0, [pc, #436]	; (8005904 <checkAktifCalisma+0xb54>)
 8005750:	f003 fe45 	bl	80093de <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005754:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <checkAktifCalisma+0xb58>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800575a:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <checkAktifCalisma+0xb64>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005764:	486f      	ldr	r0, [pc, #444]	; (8005924 <checkAktifCalisma+0xb74>)
 8005766:	f003 fe23 	bl	80093b0 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d120      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005774:	486b      	ldr	r0, [pc, #428]	; (8005924 <checkAktifCalisma+0xb74>)
 8005776:	f003 fe1b 	bl	80093b0 <HAL_GPIO_ReadPin>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d118      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005780:	2104      	movs	r1, #4
 8005782:	4868      	ldr	r0, [pc, #416]	; (8005924 <checkAktifCalisma+0xb74>)
 8005784:	f003 fe14 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d111      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800578e:	2102      	movs	r1, #2
 8005790:	4864      	ldr	r0, [pc, #400]	; (8005924 <checkAktifCalisma+0xb74>)
 8005792:	f003 fe0d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800579c:	2101      	movs	r1, #1
 800579e:	4861      	ldr	r0, [pc, #388]	; (8005924 <checkAktifCalisma+0xb74>)
 80057a0:	f003 fe06 	bl	80093b0 <HAL_GPIO_ReadPin>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <checkAktifCalisma+0xa02>
			makineStop=1;
 80057aa:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <checkAktifCalisma+0xb78>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e002      	b.n	80057b8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057b2:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <checkAktifCalisma+0xb78>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057b8:	4b5c      	ldr	r3, [pc, #368]	; (800592c <checkAktifCalisma+0xb7c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d144      	bne.n	800584a <checkAktifCalisma+0xa9a>
 80057c0:	4b5b      	ldr	r3, [pc, #364]	; (8005930 <checkAktifCalisma+0xb80>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d003      	beq.n	80057d0 <checkAktifCalisma+0xa20>
 80057c8:	4b59      	ldr	r3, [pc, #356]	; (8005930 <checkAktifCalisma+0xb80>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d13c      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	484c      	ldr	r0, [pc, #304]	; (8005904 <checkAktifCalisma+0xb54>)
 80057d4:	f003 fdec 	bl	80093b0 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <checkAktifCalisma+0xa36>
 80057de:	4b55      	ldr	r3, [pc, #340]	; (8005934 <checkAktifCalisma+0xb84>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <checkAktifCalisma+0xa4e>
 80057e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ea:	484e      	ldr	r0, [pc, #312]	; (8005924 <checkAktifCalisma+0xb74>)
 80057ec:	f003 fde0 	bl	80093b0 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d129      	bne.n	800584a <checkAktifCalisma+0xa9a>
 80057f6:	4b4f      	ldr	r3, [pc, #316]	; (8005934 <checkAktifCalisma+0xb84>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d125      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057fe:	2104      	movs	r1, #4
 8005800:	4840      	ldr	r0, [pc, #256]	; (8005904 <checkAktifCalisma+0xb54>)
 8005802:	f003 fdd5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d003      	beq.n	8005814 <checkAktifCalisma+0xa64>
 800580c:	4b4a      	ldr	r3, [pc, #296]	; (8005938 <checkAktifCalisma+0xb88>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11a      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005814:	2102      	movs	r1, #2
 8005816:	483b      	ldr	r0, [pc, #236]	; (8005904 <checkAktifCalisma+0xb54>)
 8005818:	f003 fdca 	bl	80093b0 <HAL_GPIO_ReadPin>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d113      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005822:	4b46      	ldr	r3, [pc, #280]	; (800593c <checkAktifCalisma+0xb8c>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005830:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <checkAktifCalisma+0xb78>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005838:	4b41      	ldr	r3, [pc, #260]	; (8005940 <checkAktifCalisma+0xb90>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <checkAktifCalisma+0xb68>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <checkAktifCalisma+0xb94>)
 8005844:	6013      	str	r3, [r2, #0]
			bekle();
 8005846:	f7ff f935 	bl	8004ab4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800584a:	4b33      	ldr	r3, [pc, #204]	; (8005918 <checkAktifCalisma+0xb68>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b3d      	ldr	r3, [pc, #244]	; (8005944 <checkAktifCalisma+0xb94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <checkAktifCalisma+0xb98>)
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	4293      	cmp	r3, r2
 800585a:	d211      	bcs.n	8005880 <checkAktifCalisma+0xad0>
 800585c:	2104      	movs	r1, #4
 800585e:	4829      	ldr	r0, [pc, #164]	; (8005904 <checkAktifCalisma+0xb54>)
 8005860:	f003 fda6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <checkAktifCalisma+0xad0>
 800586a:	4b33      	ldr	r3, [pc, #204]	; (8005938 <checkAktifCalisma+0xb88>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d006      	beq.n	8005880 <checkAktifCalisma+0xad0>
 8005872:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <checkAktifCalisma+0xb78>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f083 0301 	eor.w	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005880:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <checkAktifCalisma+0xb90>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <checkAktifCalisma+0xb7c>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d160      	bne.n	8005950 <checkAktifCalisma+0xba0>
 800588e:	4b28      	ldr	r3, [pc, #160]	; (8005930 <checkAktifCalisma+0xb80>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d003      	beq.n	800589e <checkAktifCalisma+0xaee>
 8005896:	4b26      	ldr	r3, [pc, #152]	; (8005930 <checkAktifCalisma+0xb80>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d158      	bne.n	8005950 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800589e:	2104      	movs	r1, #4
 80058a0:	4818      	ldr	r0, [pc, #96]	; (8005904 <checkAktifCalisma+0xb54>)
 80058a2:	f003 fd85 	bl	80093b0 <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d003      	beq.n	80058b4 <checkAktifCalisma+0xb04>
 80058ac:	4b22      	ldr	r3, [pc, #136]	; (8005938 <checkAktifCalisma+0xb88>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d14d      	bne.n	8005950 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058b4:	2102      	movs	r1, #2
 80058b6:	4813      	ldr	r0, [pc, #76]	; (8005904 <checkAktifCalisma+0xb54>)
 80058b8:	f003 fd7a 	bl	80093b0 <HAL_GPIO_ReadPin>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d146      	bne.n	8005950 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	480f      	ldr	r0, [pc, #60]	; (8005904 <checkAktifCalisma+0xb54>)
 80058c6:	f003 fd73 	bl	80093b0 <HAL_GPIO_ReadPin>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <checkAktifCalisma+0xb28>
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <checkAktifCalisma+0xb84>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <checkAktifCalisma+0xb40>
 80058d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058dc:	4811      	ldr	r0, [pc, #68]	; (8005924 <checkAktifCalisma+0xb74>)
 80058de:	f003 fd67 	bl	80093b0 <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d133      	bne.n	8005950 <checkAktifCalisma+0xba0>
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <checkAktifCalisma+0xb84>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d12f      	bne.n	8005950 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <checkAktifCalisma+0xb78>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02b      	beq.n	8005950 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <checkAktifCalisma+0xb9c>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e02a      	b.n	8005956 <checkAktifCalisma+0xba6>
 8005900:	2000025b 	.word	0x2000025b
 8005904:	40011000 	.word	0x40011000
 8005908:	2000025f 	.word	0x2000025f
 800590c:	20000276 	.word	0x20000276
 8005910:	20000277 	.word	0x20000277
 8005914:	20000257 	.word	0x20000257
 8005918:	20000200 	.word	0x20000200
 800591c:	2000020c 	.word	0x2000020c
 8005920:	2000023a 	.word	0x2000023a
 8005924:	40010c00 	.word	0x40010c00
 8005928:	20000266 	.word	0x20000266
 800592c:	2000022d 	.word	0x2000022d
 8005930:	2000022c 	.word	0x2000022c
 8005934:	20000230 	.word	0x20000230
 8005938:	2000022a 	.word	0x2000022a
 800593c:	20000253 	.word	0x20000253
 8005940:	20000267 	.word	0x20000267
 8005944:	20000204 	.word	0x20000204
 8005948:	2000023d 	.word	0x2000023d
 800594c:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 8005950:	4b8b      	ldr	r3, [pc, #556]	; (8005b80 <checkAktifCalisma+0xdd0>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005956:	4b8b      	ldr	r3, [pc, #556]	; (8005b84 <checkAktifCalisma+0xdd4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d121      	bne.n	80059a2 <checkAktifCalisma+0xbf2>
 800595e:	4b8a      	ldr	r3, [pc, #552]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d003      	beq.n	800596e <checkAktifCalisma+0xbbe>
 8005966:	4b88      	ldr	r3, [pc, #544]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d119      	bne.n	80059a2 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800596e:	2104      	movs	r1, #4
 8005970:	4886      	ldr	r0, [pc, #536]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005972:	f003 fd1d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005976:	4603      	mov	r3, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	d003      	beq.n	8005984 <checkAktifCalisma+0xbd4>
 800597c:	4b84      	ldr	r3, [pc, #528]	; (8005b90 <checkAktifCalisma+0xde0>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10e      	bne.n	80059a2 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005984:	2102      	movs	r1, #2
 8005986:	4881      	ldr	r0, [pc, #516]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005988:	f003 fd12 	bl	80093b0 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005992:	4b80      	ldr	r3, [pc, #512]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800599a:	4b7f      	ldr	r3, [pc, #508]	; (8005b98 <checkAktifCalisma+0xde8>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e002      	b.n	80059a8 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059a2:	4b7d      	ldr	r3, [pc, #500]	; (8005b98 <checkAktifCalisma+0xde8>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059a8:	4b75      	ldr	r3, [pc, #468]	; (8005b80 <checkAktifCalisma+0xdd0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <checkAktifCalisma+0xc10>
 80059b0:	4b79      	ldr	r3, [pc, #484]	; (8005b98 <checkAktifCalisma+0xde8>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <checkAktifCalisma+0xc10>
 80059b8:	4b78      	ldr	r3, [pc, #480]	; (8005b9c <checkAktifCalisma+0xdec>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059c0:	2201      	movs	r2, #1
 80059c2:	2180      	movs	r1, #128	; 0x80
 80059c4:	4876      	ldr	r0, [pc, #472]	; (8005ba0 <checkAktifCalisma+0xdf0>)
 80059c6:	f003 fd0a 	bl	80093de <HAL_GPIO_WritePin>
 80059ca:	e004      	b.n	80059d6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059cc:	2200      	movs	r2, #0
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	4873      	ldr	r0, [pc, #460]	; (8005ba0 <checkAktifCalisma+0xdf0>)
 80059d2:	f003 fd04 	bl	80093de <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059d6:	4b73      	ldr	r3, [pc, #460]	; (8005ba4 <checkAktifCalisma+0xdf4>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d141      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
 80059de:	4b6a      	ldr	r3, [pc, #424]	; (8005b88 <checkAktifCalisma+0xdd8>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d003      	beq.n	80059ee <checkAktifCalisma+0xc3e>
 80059e6:	4b68      	ldr	r3, [pc, #416]	; (8005b88 <checkAktifCalisma+0xdd8>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d139      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059f2:	4866      	ldr	r0, [pc, #408]	; (8005b8c <checkAktifCalisma+0xddc>)
 80059f4:	f003 fcdc 	bl	80093b0 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <checkAktifCalisma+0xc56>
 80059fe:	4b6a      	ldr	r3, [pc, #424]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <checkAktifCalisma+0xc6e>
 8005a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a0a:	4868      	ldr	r0, [pc, #416]	; (8005bac <checkAktifCalisma+0xdfc>)
 8005a0c:	f003 fcd0 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d125      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
 8005a16:	4b64      	ldr	r3, [pc, #400]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d121      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a1e:	2102      	movs	r1, #2
 8005a20:	485a      	ldr	r0, [pc, #360]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005a22:	f003 fcc5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d11a      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	4857      	ldr	r0, [pc, #348]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005a30:	f003 fcbe 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d113      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a3a:	4b56      	ldr	r3, [pc, #344]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00f      	beq.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a42:	4b5b      	ldr	r3, [pc, #364]	; (8005bb0 <checkAktifCalisma+0xe00>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f083 0301 	eor.w	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a50:	4b58      	ldr	r3, [pc, #352]	; (8005bb4 <checkAktifCalisma+0xe04>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a56:	4b58      	ldr	r3, [pc, #352]	; (8005bb8 <checkAktifCalisma+0xe08>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <checkAktifCalisma+0xe0c>)
 8005a5c:	6013      	str	r3, [r2, #0]
			bekle();
 8005a5e:	f7ff f829 	bl	8004ab4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a62:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <checkAktifCalisma+0xe08>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b55      	ldr	r3, [pc, #340]	; (8005bbc <checkAktifCalisma+0xe0c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	4a54      	ldr	r2, [pc, #336]	; (8005bc0 <checkAktifCalisma+0xe10>)
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d20d      	bcs.n	8005a90 <checkAktifCalisma+0xce0>
 8005a74:	2102      	movs	r1, #2
 8005a76:	4845      	ldr	r0, [pc, #276]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005a78:	f003 fc9a 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <checkAktifCalisma+0xce0>
 8005a82:	4b44      	ldr	r3, [pc, #272]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f083 0301 	eor.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a90:	4b48      	ldr	r3, [pc, #288]	; (8005bb4 <checkAktifCalisma+0xe04>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a96:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <checkAktifCalisma+0xdf4>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d135      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
 8005a9e:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <checkAktifCalisma+0xcfe>
 8005aa6:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d12d      	bne.n	8005b0a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab2:	4836      	ldr	r0, [pc, #216]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005ab4:	f003 fc7c 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <checkAktifCalisma+0xd16>
 8005abe:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <checkAktifCalisma+0xd2e>
 8005ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aca:	4838      	ldr	r0, [pc, #224]	; (8005bac <checkAktifCalisma+0xdfc>)
 8005acc:	f003 fc70 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d119      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d115      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ade:	2102      	movs	r1, #2
 8005ae0:	482a      	ldr	r0, [pc, #168]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005ae2:	f003 fc65 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10e      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005aec:	2104      	movs	r1, #4
 8005aee:	4827      	ldr	r0, [pc, #156]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005af0:	f003 fc5e 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b02:	4b30      	ldr	r3, [pc, #192]	; (8005bc4 <checkAktifCalisma+0xe14>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e002      	b.n	8005b10 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <checkAktifCalisma+0xe14>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <checkAktifCalisma+0xdf4>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d11d      	bne.n	8005b54 <checkAktifCalisma+0xda4>
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d003      	beq.n	8005b28 <checkAktifCalisma+0xd78>
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d115      	bne.n	8005b54 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4818      	ldr	r0, [pc, #96]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005b2c:	f003 fc40 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10e      	bne.n	8005b54 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b36:	2104      	movs	r1, #4
 8005b38:	4814      	ldr	r0, [pc, #80]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005b3a:	f003 fc39 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d107      	bne.n	8005b54 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <checkAktifCalisma+0xe18>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <checkAktifCalisma+0xe18>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <checkAktifCalisma+0xe14>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <checkAktifCalisma+0xdc2>
 8005b62:	4b19      	ldr	r3, [pc, #100]	; (8005bc8 <checkAktifCalisma+0xe18>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <checkAktifCalisma+0xdc2>
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <checkAktifCalisma+0xe04>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d02c      	beq.n	8005bcc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b72:	2201      	movs	r2, #1
 8005b74:	2140      	movs	r1, #64	; 0x40
 8005b76:	480a      	ldr	r0, [pc, #40]	; (8005ba0 <checkAktifCalisma+0xdf0>)
 8005b78:	f003 fc31 	bl	80093de <HAL_GPIO_WritePin>
 8005b7c:	e02b      	b.n	8005bd6 <checkAktifCalisma+0xe26>
 8005b7e:	bf00      	nop
 8005b80:	20000268 	.word	0x20000268
 8005b84:	2000022d 	.word	0x2000022d
 8005b88:	2000022c 	.word	0x2000022c
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	2000022a 	.word	0x2000022a
 8005b94:	20000266 	.word	0x20000266
 8005b98:	20000269 	.word	0x20000269
 8005b9c:	20000267 	.word	0x20000267
 8005ba0:	40010800 	.word	0x40010800
 8005ba4:	2000022e 	.word	0x2000022e
 8005ba8:	20000230 	.word	0x20000230
 8005bac:	40010c00 	.word	0x40010c00
 8005bb0:	20000253 	.word	0x20000253
 8005bb4:	2000026a 	.word	0x2000026a
 8005bb8:	20000200 	.word	0x20000200
 8005bbc:	20000204 	.word	0x20000204
 8005bc0:	2000023e 	.word	0x2000023e
 8005bc4:	2000026b 	.word	0x2000026b
 8005bc8:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2140      	movs	r1, #64	; 0x40
 8005bd0:	488d      	ldr	r0, [pc, #564]	; (8005e08 <checkAktifCalisma+0x1058>)
 8005bd2:	f003 fc04 	bl	80093de <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005bd6:	4b8d      	ldr	r3, [pc, #564]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <checkAktifCalisma+0xe36>
 8005bde:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d115      	bne.n	8005c12 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005be6:	2104      	movs	r1, #4
 8005be8:	4889      	ldr	r0, [pc, #548]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005bea:	f003 fbe1 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d003      	beq.n	8005bfc <checkAktifCalisma+0xe4c>
 8005bf4:	4b87      	ldr	r3, [pc, #540]	; (8005e14 <checkAktifCalisma+0x1064>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	4884      	ldr	r0, [pc, #528]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005c00:	f003 fbd6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c0a:	4b83      	ldr	r3, [pc, #524]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e002      	b.n	8005c18 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c12:	4b81      	ldr	r3, [pc, #516]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c18:	4b7c      	ldr	r3, [pc, #496]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d003      	beq.n	8005c28 <checkAktifCalisma+0xe78>
 8005c20:	4b7a      	ldr	r3, [pc, #488]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d111      	bne.n	8005c4c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4879      	ldr	r0, [pc, #484]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005c2c:	f003 fbc0 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10a      	bne.n	8005c4c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c36:	2104      	movs	r1, #4
 8005c38:	4875      	ldr	r0, [pc, #468]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005c3a:	f003 fbb9 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c44:	4b75      	ldr	r3, [pc, #468]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c4c:	4b73      	ldr	r3, [pc, #460]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c52:	4b71      	ldr	r3, [pc, #452]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c5a:	4b71      	ldr	r3, [pc, #452]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d10b      	bne.n	8005c7a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c66:	486f      	ldr	r0, [pc, #444]	; (8005e24 <checkAktifCalisma+0x1074>)
 8005c68:	f003 fba2 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c72:	4b6d      	ldr	r3, [pc, #436]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e002      	b.n	8005c80 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c80:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c88:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10b      	bne.n	8005ca8 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c94:	4863      	ldr	r0, [pc, #396]	; (8005e24 <checkAktifCalisma+0x1074>)
 8005c96:	f003 fb8b 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ca0:	4b62      	ldr	r3, [pc, #392]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005ca8:	4b60      	ldr	r3, [pc, #384]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cae:	4b60      	ldr	r3, [pc, #384]	; (8005e30 <checkAktifCalisma+0x1080>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d137      	bne.n	8005d26 <checkAktifCalisma+0xf76>
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d003      	beq.n	8005cc6 <checkAktifCalisma+0xf16>
 8005cbe:	4b5d      	ldr	r3, [pc, #372]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d12f      	bne.n	8005d26 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cc6:	4b54      	ldr	r3, [pc, #336]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <checkAktifCalisma+0xf26>
 8005cce:	4b53      	ldr	r3, [pc, #332]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d027      	beq.n	8005d26 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cda:	484d      	ldr	r0, [pc, #308]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005cdc:	f003 fb68 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <checkAktifCalisma+0xf3e>
 8005ce6:	4b4e      	ldr	r3, [pc, #312]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <checkAktifCalisma+0xf4e>
 8005cf6:	4b4d      	ldr	r3, [pc, #308]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d013      	beq.n	8005d26 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005cfe:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d06:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <checkAktifCalisma+0x108c>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f083 0301 	eor.w	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d14:	4b4a      	ldr	r3, [pc, #296]	; (8005e40 <checkAktifCalisma+0x1090>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d1a:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <checkAktifCalisma+0x1094>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a4a      	ldr	r2, [pc, #296]	; (8005e48 <checkAktifCalisma+0x1098>)
 8005d20:	6013      	str	r3, [r2, #0]
			bekle();
 8005d22:	f7fe fec7 	bl	8004ab4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d26:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <checkAktifCalisma+0x1094>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <checkAktifCalisma+0x1098>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	4a46      	ldr	r2, [pc, #280]	; (8005e4c <checkAktifCalisma+0x109c>)
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d214      	bcs.n	8005d62 <checkAktifCalisma+0xfb2>
 8005d38:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f083 0301 	eor.w	r3, r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d006      	beq.n	8005d54 <checkAktifCalisma+0xfa4>
 8005d46:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <checkAktifCalisma+0xfb2>
 8005d54:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d62:	4b37      	ldr	r3, [pc, #220]	; (8005e40 <checkAktifCalisma+0x1090>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d68:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <checkAktifCalisma+0x1080>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d12b      	bne.n	8005dc8 <checkAktifCalisma+0x1018>
 8005d70:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d003      	beq.n	8005d80 <checkAktifCalisma+0xfd0>
 8005d78:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d123      	bne.n	8005dc8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <checkAktifCalisma+0xfe0>
 8005d88:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d94:	481e      	ldr	r0, [pc, #120]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005d96:	f003 fb0b 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <checkAktifCalisma+0xff8>
 8005da0:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005da8:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <checkAktifCalisma+0x1008>
 8005db0:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005db8:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005dc0:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <checkAktifCalisma+0x10a0>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005dc8:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <checkAktifCalisma+0x10a0>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dce:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <checkAktifCalisma+0x1080>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d140      	bne.n	8005e58 <checkAktifCalisma+0x10a8>
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <checkAktifCalisma+0x1036>
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d138      	bne.n	8005e58 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <checkAktifCalisma+0x1046>
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d030      	beq.n	8005e58 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d02c      	beq.n	8005e58 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <checkAktifCalisma+0x10a4>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e02b      	b.n	8005e5e <checkAktifCalisma+0x10ae>
 8005e06:	bf00      	nop
 8005e08:	40010800 	.word	0x40010800
 8005e0c:	20000231 	.word	0x20000231
 8005e10:	40011000 	.word	0x40011000
 8005e14:	2000022a 	.word	0x2000022a
 8005e18:	20000270 	.word	0x20000270
 8005e1c:	20000271 	.word	0x20000271
 8005e20:	20000230 	.word	0x20000230
 8005e24:	40010c00 	.word	0x40010c00
 8005e28:	20000280 	.word	0x20000280
 8005e2c:	20000281 	.word	0x20000281
 8005e30:	2000022f 	.word	0x2000022f
 8005e34:	2000022c 	.word	0x2000022c
 8005e38:	20000266 	.word	0x20000266
 8005e3c:	20000253 	.word	0x20000253
 8005e40:	2000026d 	.word	0x2000026d
 8005e44:	20000200 	.word	0x20000200
 8005e48:	20000204 	.word	0x20000204
 8005e4c:	2000023f 	.word	0x2000023f
 8005e50:	2000026e 	.word	0x2000026e
 8005e54:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e58:	4b8b      	ldr	r3, [pc, #556]	; (8006088 <checkAktifCalisma+0x12d8>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e5e:	4b8b      	ldr	r3, [pc, #556]	; (800608c <checkAktifCalisma+0x12dc>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <checkAktifCalisma+0x10c6>
 8005e66:	4b8a      	ldr	r3, [pc, #552]	; (8006090 <checkAktifCalisma+0x12e0>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <checkAktifCalisma+0x10c6>
 8005e6e:	4b86      	ldr	r3, [pc, #536]	; (8006088 <checkAktifCalisma+0x12d8>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e76:	2201      	movs	r2, #1
 8005e78:	2120      	movs	r1, #32
 8005e7a:	4886      	ldr	r0, [pc, #536]	; (8006094 <checkAktifCalisma+0x12e4>)
 8005e7c:	f003 faaf 	bl	80093de <HAL_GPIO_WritePin>
 8005e80:	e004      	b.n	8005e8c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e82:	2200      	movs	r2, #0
 8005e84:	2120      	movs	r1, #32
 8005e86:	4883      	ldr	r0, [pc, #524]	; (8006094 <checkAktifCalisma+0x12e4>)
 8005e88:	f003 faa9 	bl	80093de <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e8c:	4b82      	ldr	r3, [pc, #520]	; (8006098 <checkAktifCalisma+0x12e8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <checkAktifCalisma+0x1102>
 8005e94:	2102      	movs	r1, #2
 8005e96:	4881      	ldr	r0, [pc, #516]	; (800609c <checkAktifCalisma+0x12ec>)
 8005e98:	f003 fa8a 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <checkAktifCalisma+0x1102>
 8005ea2:	4b7f      	ldr	r3, [pc, #508]	; (80060a0 <checkAktifCalisma+0x12f0>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <checkAktifCalisma+0x1102>
 8005eaa:	4b7e      	ldr	r3, [pc, #504]	; (80060a4 <checkAktifCalisma+0x12f4>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d112      	bne.n	8005ed8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005eb2:	4b7d      	ldr	r3, [pc, #500]	; (80060a8 <checkAktifCalisma+0x12f8>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d066      	beq.n	8005f88 <checkAktifCalisma+0x11d8>
 8005eba:	2104      	movs	r1, #4
 8005ebc:	4877      	ldr	r0, [pc, #476]	; (800609c <checkAktifCalisma+0x12ec>)
 8005ebe:	f003 fa77 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d15f      	bne.n	8005f88 <checkAktifCalisma+0x11d8>
 8005ec8:	4b75      	ldr	r3, [pc, #468]	; (80060a0 <checkAktifCalisma+0x12f0>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d05b      	beq.n	8005f88 <checkAktifCalisma+0x11d8>
 8005ed0:	4b74      	ldr	r3, [pc, #464]	; (80060a4 <checkAktifCalisma+0x12f4>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d057      	beq.n	8005f88 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005ed8:	4b74      	ldr	r3, [pc, #464]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b72      	ldr	r3, [pc, #456]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005ee2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005ee4:	4b71      	ldr	r3, [pc, #452]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b09      	cmp	r3, #9
 8005eea:	d908      	bls.n	8005efe <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005eec:	4b6f      	ldr	r3, [pc, #444]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005ef2:	4b6f      	ldr	r3, [pc, #444]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4b6d      	ldr	r3, [pc, #436]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005efc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005efe:	4b6c      	ldr	r3, [pc, #432]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b09      	cmp	r3, #9
 8005f04:	d908      	bls.n	8005f18 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f06:	4b6a      	ldr	r3, [pc, #424]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	4b67      	ldr	r3, [pc, #412]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f16:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f18:	4b66      	ldr	r3, [pc, #408]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d908      	bls.n	8005f32 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f20:	4b64      	ldr	r3, [pc, #400]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f26:	4b64      	ldr	r3, [pc, #400]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	4b62      	ldr	r3, [pc, #392]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f30:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f32:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b09      	cmp	r3, #9
 8005f38:	d908      	bls.n	8005f4c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f3a:	4b5f      	ldr	r3, [pc, #380]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f40:	4b5e      	ldr	r3, [pc, #376]	; (80060bc <checkAktifCalisma+0x130c>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	4b5c      	ldr	r3, [pc, #368]	; (80060bc <checkAktifCalisma+0x130c>)
 8005f4a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f4c:	4b5b      	ldr	r3, [pc, #364]	; (80060bc <checkAktifCalisma+0x130c>)
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	4b5b      	ldr	r3, [pc, #364]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f52:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f56:	4b58      	ldr	r3, [pc, #352]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f5c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f5e:	4b55      	ldr	r3, [pc, #340]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f64:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f66:	4b52      	ldr	r3, [pc, #328]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	4b55      	ldr	r3, [pc, #340]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f6c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f74:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f76:	4b53      	ldr	r3, [pc, #332]	; (80060c4 <checkAktifCalisma+0x1314>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f7c:	4b46      	ldr	r3, [pc, #280]	; (8006098 <checkAktifCalisma+0x12e8>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f82:	4b49      	ldr	r3, [pc, #292]	; (80060a8 <checkAktifCalisma+0x12f8>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f8c:	484e      	ldr	r0, [pc, #312]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005f8e:	f003 fa0f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d016      	beq.n	8005fc6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f9c:	484a      	ldr	r0, [pc, #296]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005f9e:	f003 fa07 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fac:	4846      	ldr	r0, [pc, #280]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005fae:	f003 f9ff 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d006      	beq.n	8005fc6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4838      	ldr	r0, [pc, #224]	; (800609c <checkAktifCalisma+0x12ec>)
 8005fbc:	f003 f9f8 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <checkAktifCalisma+0x121e>
			startBasili=1;
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <checkAktifCalisma+0x131c>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	e002      	b.n	8005fd4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005fce:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <checkAktifCalisma+0x131c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005fd4:	4b3d      	ldr	r3, [pc, #244]	; (80060cc <checkAktifCalisma+0x131c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <checkAktifCalisma+0x125a>
 8005fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fe0:	4839      	ldr	r0, [pc, #228]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005fe2:	f003 f9e5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10e      	bne.n	800600a <checkAktifCalisma+0x125a>
			hataVar=1;
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <checkAktifCalisma+0x1320>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	f7fa fdc4 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fa fd67 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8005ffe:	f001 fc99 	bl	8007934 <convertAndSendData>
			acilstophatasi=1;
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <checkAktifCalisma+0x1324>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006008:	e018      	b.n	800603c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800600a:	4b32      	ldr	r3, [pc, #200]	; (80060d4 <checkAktifCalisma+0x1324>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d014      	beq.n	800603c <checkAktifCalisma+0x128c>
 8006012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006016:	482c      	ldr	r0, [pc, #176]	; (80060c8 <checkAktifCalisma+0x1318>)
 8006018:	f003 f9ca 	bl	80093b0 <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10c      	bne.n	800603c <checkAktifCalisma+0x128c>
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <checkAktifCalisma+0x131c>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006030:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <checkAktifCalisma+0x1324>)
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006036:	2001      	movs	r0, #1
 8006038:	f7fe fce8 	bl	8004a0c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800603c:	4b26      	ldr	r3, [pc, #152]	; (80060d8 <checkAktifCalisma+0x1328>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f083 0301 	eor.w	r3, r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d04e      	beq.n	80060e8 <checkAktifCalisma+0x1338>
 800604a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800604e:	481e      	ldr	r0, [pc, #120]	; (80060c8 <checkAktifCalisma+0x1318>)
 8006050:	f003 f9ae 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <checkAktifCalisma+0x12b2>
 800605a:	4b20      	ldr	r3, [pc, #128]	; (80060dc <checkAktifCalisma+0x132c>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d042      	beq.n	80060e8 <checkAktifCalisma+0x1338>
 8006062:	4b1f      	ldr	r3, [pc, #124]	; (80060e0 <checkAktifCalisma+0x1330>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d13e      	bne.n	80060e8 <checkAktifCalisma+0x1338>
			hataVar=1;
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <checkAktifCalisma+0x1320>)
 800606c:	2201      	movs	r2, #1
 800606e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006070:	2002      	movs	r0, #2
 8006072:	f7fa fd85 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006076:	2002      	movs	r0, #2
 8006078:	f7fa fd28 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800607c:	f001 fc5a 	bl	8007934 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006080:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <checkAktifCalisma+0x1334>)
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006086:	e047      	b.n	8006118 <checkAktifCalisma+0x1368>
 8006088:	2000026f 	.word	0x2000026f
 800608c:	2000026e 	.word	0x2000026e
 8006090:	2000026d 	.word	0x2000026d
 8006094:	40010800 	.word	0x40010800
 8006098:	20000263 	.word	0x20000263
 800609c:	40011000 	.word	0x40011000
 80060a0:	2000022a 	.word	0x2000022a
 80060a4:	20000266 	.word	0x20000266
 80060a8:	20000264 	.word	0x20000264
 80060ac:	20000221 	.word	0x20000221
 80060b0:	20000222 	.word	0x20000222
 80060b4:	20000008 	.word	0x20000008
 80060b8:	20000009 	.word	0x20000009
 80060bc:	20000223 	.word	0x20000223
 80060c0:	20000128 	.word	0x20000128
 80060c4:	20000250 	.word	0x20000250
 80060c8:	40010c00 	.word	0x40010c00
 80060cc:	20000272 	.word	0x20000272
 80060d0:	20000279 	.word	0x20000279
 80060d4:	20000274 	.word	0x20000274
 80060d8:	2000027b 	.word	0x2000027b
 80060dc:	20000285 	.word	0x20000285
 80060e0:	20000228 	.word	0x20000228
 80060e4:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80060e8:	4b9b      	ldr	r3, [pc, #620]	; (8006358 <checkAktifCalisma+0x15a8>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d013      	beq.n	8006118 <checkAktifCalisma+0x1368>
 80060f0:	4b9a      	ldr	r3, [pc, #616]	; (800635c <checkAktifCalisma+0x15ac>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00f      	beq.n	8006118 <checkAktifCalisma+0x1368>
 80060f8:	4b99      	ldr	r3, [pc, #612]	; (8006360 <checkAktifCalisma+0x15b0>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006106:	4b94      	ldr	r3, [pc, #592]	; (8006358 <checkAktifCalisma+0x15a8>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800610c:	4b95      	ldr	r3, [pc, #596]	; (8006364 <checkAktifCalisma+0x15b4>)
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006112:	2002      	movs	r0, #2
 8006114:	f7fe fc7a 	bl	8004a0c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006118:	4b93      	ldr	r3, [pc, #588]	; (8006368 <checkAktifCalisma+0x15b8>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11e      	bne.n	800615e <checkAktifCalisma+0x13ae>
 8006120:	4b92      	ldr	r3, [pc, #584]	; (800636c <checkAktifCalisma+0x15bc>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d11a      	bne.n	800615e <checkAktifCalisma+0x13ae>
 8006128:	4b91      	ldr	r3, [pc, #580]	; (8006370 <checkAktifCalisma+0x15c0>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <checkAktifCalisma+0x13ae>
 8006130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006134:	488f      	ldr	r0, [pc, #572]	; (8006374 <checkAktifCalisma+0x15c4>)
 8006136:	f003 f93b 	bl	80093b0 <HAL_GPIO_ReadPin>
 800613a:	4603      	mov	r3, r0
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10e      	bne.n	800615e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006140:	4b8d      	ldr	r3, [pc, #564]	; (8006378 <checkAktifCalisma+0x15c8>)
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006146:	2003      	movs	r0, #3
 8006148:	f7fa fd1a 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800614c:	2003      	movs	r0, #3
 800614e:	f7fa fcbd 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8006152:	f001 fbef 	bl	8007934 <convertAndSendData>
			basinchatasi=1;
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <checkAktifCalisma+0x15cc>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800615c:	e015      	b.n	800618a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800615e:	4b87      	ldr	r3, [pc, #540]	; (800637c <checkAktifCalisma+0x15cc>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d011      	beq.n	800618a <checkAktifCalisma+0x13da>
 8006166:	4b80      	ldr	r3, [pc, #512]	; (8006368 <checkAktifCalisma+0x15b8>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10d      	bne.n	800618a <checkAktifCalisma+0x13da>
 800616e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006172:	4883      	ldr	r0, [pc, #524]	; (8006380 <checkAktifCalisma+0x15d0>)
 8006174:	f003 f91c 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800617e:	4b7f      	ldr	r3, [pc, #508]	; (800637c <checkAktifCalisma+0x15cc>)
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006184:	2003      	movs	r0, #3
 8006186:	f7fe fc41 	bl	8004a0c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800618a:	4b7e      	ldr	r3, [pc, #504]	; (8006384 <checkAktifCalisma+0x15d4>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <checkAktifCalisma+0x13ea>
 8006192:	4b7d      	ldr	r3, [pc, #500]	; (8006388 <checkAktifCalisma+0x15d8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01e      	beq.n	80061d8 <checkAktifCalisma+0x1428>
 800619a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800619e:	487b      	ldr	r0, [pc, #492]	; (800638c <checkAktifCalisma+0x15dc>)
 80061a0:	f003 f906 	bl	80093b0 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d116      	bne.n	80061d8 <checkAktifCalisma+0x1428>
 80061aa:	4b79      	ldr	r3, [pc, #484]	; (8006390 <checkAktifCalisma+0x15e0>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d003      	beq.n	80061ba <checkAktifCalisma+0x140a>
 80061b2:	4b77      	ldr	r3, [pc, #476]	; (8006390 <checkAktifCalisma+0x15e0>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d10e      	bne.n	80061d8 <checkAktifCalisma+0x1428>
			hataVar=1;
 80061ba:	4b6f      	ldr	r3, [pc, #444]	; (8006378 <checkAktifCalisma+0x15c8>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061c0:	2004      	movs	r0, #4
 80061c2:	f7fa fcdd 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061c6:	2004      	movs	r0, #4
 80061c8:	f7fa fc80 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 80061cc:	f001 fbb2 	bl	8007934 <convertAndSendData>
			katkapisivicihatasi=1;
 80061d0:	4b70      	ldr	r3, [pc, #448]	; (8006394 <checkAktifCalisma+0x15e4>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061d6:	e01f      	b.n	8006218 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061d8:	4b6e      	ldr	r3, [pc, #440]	; (8006394 <checkAktifCalisma+0x15e4>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01b      	beq.n	8006218 <checkAktifCalisma+0x1468>
 80061e0:	4b6d      	ldr	r3, [pc, #436]	; (8006398 <checkAktifCalisma+0x15e8>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d017      	beq.n	8006218 <checkAktifCalisma+0x1468>
 80061e8:	4b66      	ldr	r3, [pc, #408]	; (8006384 <checkAktifCalisma+0x15d4>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f083 0301 	eor.w	r3, r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <checkAktifCalisma+0x1468>
 80061f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061fa:	4864      	ldr	r0, [pc, #400]	; (800638c <checkAktifCalisma+0x15dc>)
 80061fc:	f003 f8d8 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006206:	4b63      	ldr	r3, [pc, #396]	; (8006394 <checkAktifCalisma+0x15e4>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800620c:	4b5e      	ldr	r3, [pc, #376]	; (8006388 <checkAktifCalisma+0x15d8>)
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006212:	2004      	movs	r0, #4
 8006214:	f7fe fbfa 	bl	8004a0c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <checkAktifCalisma+0x15d4>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <checkAktifCalisma+0x1478>
 8006220:	4b5e      	ldr	r3, [pc, #376]	; (800639c <checkAktifCalisma+0x15ec>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <checkAktifCalisma+0x14b6>
 8006228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800622c:	4857      	ldr	r0, [pc, #348]	; (800638c <checkAktifCalisma+0x15dc>)
 800622e:	f003 f8bf 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d116      	bne.n	8006266 <checkAktifCalisma+0x14b6>
 8006238:	4b55      	ldr	r3, [pc, #340]	; (8006390 <checkAktifCalisma+0x15e0>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d003      	beq.n	8006248 <checkAktifCalisma+0x1498>
 8006240:	4b53      	ldr	r3, [pc, #332]	; (8006390 <checkAktifCalisma+0x15e0>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d10e      	bne.n	8006266 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006248:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <checkAktifCalisma+0x15c8>)
 800624a:	2201      	movs	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800624e:	2005      	movs	r0, #5
 8006250:	f7fa fc96 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006254:	2005      	movs	r0, #5
 8006256:	f7fa fc39 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800625a:	f001 fb6b 	bl	8007934 <convertAndSendData>
			tablakapisivicihatasi=1;
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <checkAktifCalisma+0x15f0>)
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006264:	e023      	b.n	80062ae <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006266:	4b4e      	ldr	r3, [pc, #312]	; (80063a0 <checkAktifCalisma+0x15f0>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01f      	beq.n	80062ae <checkAktifCalisma+0x14fe>
 800626e:	4b4a      	ldr	r3, [pc, #296]	; (8006398 <checkAktifCalisma+0x15e8>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <checkAktifCalisma+0x14fe>
 8006276:	4b43      	ldr	r3, [pc, #268]	; (8006384 <checkAktifCalisma+0x15d4>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f083 0301 	eor.w	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d014      	beq.n	80062ae <checkAktifCalisma+0x14fe>
 8006284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006288:	4840      	ldr	r0, [pc, #256]	; (800638c <checkAktifCalisma+0x15dc>)
 800628a:	f003 f891 	bl	80093b0 <HAL_GPIO_ReadPin>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10c      	bne.n	80062ae <checkAktifCalisma+0x14fe>
 8006294:	4b40      	ldr	r3, [pc, #256]	; (8006398 <checkAktifCalisma+0x15e8>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800629c:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <checkAktifCalisma+0x15f0>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062a2:	4b3e      	ldr	r3, [pc, #248]	; (800639c <checkAktifCalisma+0x15ec>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062a8:	2005      	movs	r0, #5
 80062aa:	f7fe fbaf 	bl	8004a0c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062ae:	4b30      	ldr	r3, [pc, #192]	; (8006370 <checkAktifCalisma+0x15c0>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <checkAktifCalisma+0x1516>
 80062b6:	4b2a      	ldr	r3, [pc, #168]	; (8006360 <checkAktifCalisma+0x15b0>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <checkAktifCalisma+0x1516>
 80062be:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <checkAktifCalisma+0x15f4>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062c6:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <checkAktifCalisma+0x15f8>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b38      	ldr	r3, [pc, #224]	; (80063ac <checkAktifCalisma+0x15fc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	4a37      	ldr	r2, [pc, #220]	; (80063b0 <checkAktifCalisma+0x1600>)
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d30d      	bcc.n	80062f4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80062d8:	4b27      	ldr	r3, [pc, #156]	; (8006378 <checkAktifCalisma+0x15c8>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80062de:	2006      	movs	r0, #6
 80062e0:	f7fa fc4e 	bl	8000b80 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80062e4:	2006      	movs	r0, #6
 80062e6:	f7fa fbf1 	bl	8000acc <hata2EEPROM>
			  	convertAndSendData();
 80062ea:	f001 fb23 	bl	8007934 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80062ee:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <checkAktifCalisma+0x1604>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80062f4:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <checkAktifCalisma+0x1604>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d013      	beq.n	8006324 <checkAktifCalisma+0x1574>
 80062fc:	2108      	movs	r1, #8
 80062fe:	4823      	ldr	r0, [pc, #140]	; (800638c <checkAktifCalisma+0x15dc>)
 8006300:	f003 f856 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00c      	beq.n	8006324 <checkAktifCalisma+0x1574>
 800630a:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <checkAktifCalisma+0x15d4>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006318:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <checkAktifCalisma+0x1604>)
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800631e:	2006      	movs	r0, #6
 8006320:	f7fe fb74 	bl	8004a0c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <checkAktifCalisma+0x1608>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <checkAktifCalisma+0x1594>
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <checkAktifCalisma+0x15b0>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <checkAktifCalisma+0x1594>
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <checkAktifCalisma+0x160c>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <checkAktifCalisma+0x1594>
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <checkAktifCalisma+0x15f4>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d03f      	beq.n	80063c4 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006344:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <checkAktifCalisma+0x1610>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800634a:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <checkAktifCalisma+0x15d8>)
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006350:	4b12      	ldr	r3, [pc, #72]	; (800639c <checkAktifCalisma+0x15ec>)
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e03c      	b.n	80063d2 <checkAktifCalisma+0x1622>
 8006358:	20000275 	.word	0x20000275
 800635c:	2000027b 	.word	0x2000027b
 8006360:	2000025c 	.word	0x2000025c
 8006364:	20000285 	.word	0x20000285
 8006368:	20000227 	.word	0x20000227
 800636c:	2000022b 	.word	0x2000022b
 8006370:	20000278 	.word	0x20000278
 8006374:	40011000 	.word	0x40011000
 8006378:	20000279 	.word	0x20000279
 800637c:	20000282 	.word	0x20000282
 8006380:	40010c00 	.word	0x40010c00
 8006384:	20000272 	.word	0x20000272
 8006388:	20000286 	.word	0x20000286
 800638c:	40010800 	.word	0x40010800
 8006390:	2000022c 	.word	0x2000022c
 8006394:	20000283 	.word	0x20000283
 8006398:	20000266 	.word	0x20000266
 800639c:	20000287 	.word	0x20000287
 80063a0:	20000284 	.word	0x20000284
 80063a4:	2000025b 	.word	0x2000025b
 80063a8:	20000200 	.word	0x20000200
 80063ac:	20000214 	.word	0x20000214
 80063b0:	2000023c 	.word	0x2000023c
 80063b4:	20000273 	.word	0x20000273
 80063b8:	20000259 	.word	0x20000259
 80063bc:	2000025a 	.word	0x2000025a
 80063c0:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 80063c4:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <checkAktifCalisma+0x1690>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063ca:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <checkAktifCalisma+0x1694>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <checkAktifCalisma+0x1698>)
 80063d0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063d2:	4b1e      	ldr	r3, [pc, #120]	; (800644c <checkAktifCalisma+0x169c>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d02f      	beq.n	800643a <checkAktifCalisma+0x168a>
 80063da:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <checkAktifCalisma+0x16a0>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f083 0301 	eor.w	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d028      	beq.n	800643a <checkAktifCalisma+0x168a>
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <checkAktifCalisma+0x16a4>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f083 0301 	eor.w	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d021      	beq.n	800643a <checkAktifCalisma+0x168a>
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <checkAktifCalisma+0x16a8>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f083 0301 	eor.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01a      	beq.n	800643a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <checkAktifCalisma+0x16ac>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f083 0301 	eor.w	r3, r3, #1
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <checkAktifCalisma+0x168a>
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <checkAktifCalisma+0x16b0>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f083 0301 	eor.w	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <checkAktifCalisma+0x168a>
 8006420:	4b10      	ldr	r3, [pc, #64]	; (8006464 <checkAktifCalisma+0x16b4>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f083 0301 	eor.w	r3, r3, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <checkAktifCalisma+0x168a>
			hataVar=0;
 800642e:	4b07      	ldr	r3, [pc, #28]	; (800644c <checkAktifCalisma+0x169c>)
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006434:	2007      	movs	r0, #7
 8006436:	f7fe fae9 	bl	8004a0c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	2000027a 	.word	0x2000027a
 8006444:	20000200 	.word	0x20000200
 8006448:	20000214 	.word	0x20000214
 800644c:	20000279 	.word	0x20000279
 8006450:	20000274 	.word	0x20000274
 8006454:	20000275 	.word	0x20000275
 8006458:	20000282 	.word	0x20000282
 800645c:	20000283 	.word	0x20000283
 8006460:	20000284 	.word	0x20000284
 8006464:	20000273 	.word	0x20000273

08006468 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800646c:	4b8b      	ldr	r3, [pc, #556]	; (800669c <checkDemoModCalisma+0x234>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 8229 	bne.w	80068c8 <checkDemoModCalisma+0x460>
 8006476:	4b8a      	ldr	r3, [pc, #552]	; (80066a0 <checkDemoModCalisma+0x238>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8224 	beq.w	80068c8 <checkDemoModCalisma+0x460>
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <checkDemoModCalisma+0x23c>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 821f 	bne.w	80068c8 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800648a:	2102      	movs	r1, #2
 800648c:	4886      	ldr	r0, [pc, #536]	; (80066a8 <checkDemoModCalisma+0x240>)
 800648e:	f002 ff8f 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11d      	bne.n	80064d4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006498:	4b84      	ldr	r3, [pc, #528]	; (80066ac <checkDemoModCalisma+0x244>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f083 0301 	eor.w	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064a6:	4b82      	ldr	r3, [pc, #520]	; (80066b0 <checkDemoModCalisma+0x248>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f083 0301 	eor.w	r3, r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00f      	beq.n	80064d4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064b4:	4b7f      	ldr	r3, [pc, #508]	; (80066b4 <checkDemoModCalisma+0x24c>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064c2:	2201      	movs	r2, #1
 80064c4:	2104      	movs	r1, #4
 80064c6:	487c      	ldr	r0, [pc, #496]	; (80066b8 <checkDemoModCalisma+0x250>)
 80064c8:	f002 ff89 	bl	80093de <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064cc:	4b7b      	ldr	r3, [pc, #492]	; (80066bc <checkDemoModCalisma+0x254>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e00e      	b.n	80064f2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064d4:	2102      	movs	r1, #2
 80064d6:	4874      	ldr	r0, [pc, #464]	; (80066a8 <checkDemoModCalisma+0x240>)
 80064d8:	f002 ff6a 	bl	80093b0 <HAL_GPIO_ReadPin>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80064e2:	2200      	movs	r2, #0
 80064e4:	2104      	movs	r1, #4
 80064e6:	4874      	ldr	r0, [pc, #464]	; (80066b8 <checkDemoModCalisma+0x250>)
 80064e8:	f002 ff79 	bl	80093de <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80064ec:	4b73      	ldr	r3, [pc, #460]	; (80066bc <checkDemoModCalisma+0x254>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80064f2:	4b72      	ldr	r3, [pc, #456]	; (80066bc <checkDemoModCalisma+0x254>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <checkDemoModCalisma+0xaa>
 80064fa:	4b6d      	ldr	r3, [pc, #436]	; (80066b0 <checkDemoModCalisma+0x248>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <checkDemoModCalisma+0xaa>
 8006502:	4b6c      	ldr	r3, [pc, #432]	; (80066b4 <checkDemoModCalisma+0x24c>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <checkDemoModCalisma+0xaa>
 800650a:	4b68      	ldr	r3, [pc, #416]	; (80066ac <checkDemoModCalisma+0x244>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006512:	2201      	movs	r2, #1
 8006514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006518:	4867      	ldr	r0, [pc, #412]	; (80066b8 <checkDemoModCalisma+0x250>)
 800651a:	f002 ff60 	bl	80093de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800651e:	2201      	movs	r2, #1
 8006520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006524:	4864      	ldr	r0, [pc, #400]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006526:	f002 ff5a 	bl	80093de <HAL_GPIO_WritePin>
 800652a:	e00b      	b.n	8006544 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800652c:	2200      	movs	r2, #0
 800652e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006532:	4861      	ldr	r0, [pc, #388]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006534:	f002 ff53 	bl	80093de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006538:	2200      	movs	r2, #0
 800653a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800653e:	485e      	ldr	r0, [pc, #376]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006540:	f002 ff4d 	bl	80093de <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006544:	2102      	movs	r1, #2
 8006546:	4858      	ldr	r0, [pc, #352]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006548:	f002 ff32 	bl	80093b0 <HAL_GPIO_ReadPin>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10d      	bne.n	800656e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006556:	4854      	ldr	r0, [pc, #336]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006558:	f002 ff2a 	bl	80093b0 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006562:	4b56      	ldr	r3, [pc, #344]	; (80066bc <checkDemoModCalisma+0x254>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800656e:	2102      	movs	r1, #2
 8006570:	484d      	ldr	r0, [pc, #308]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006572:	f002 ff1d 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006576:	4603      	mov	r3, r0
 8006578:	2b01      	cmp	r3, #1
 800657a:	d125      	bne.n	80065c8 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800657c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006580:	4849      	ldr	r0, [pc, #292]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006582:	f002 ff15 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11d      	bne.n	80065c8 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <checkDemoModCalisma+0x254>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f083 0301 	eor.w	r3, r3, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800659a:	4b44      	ldr	r3, [pc, #272]	; (80066ac <checkDemoModCalisma+0x244>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f083 0301 	eor.w	r3, r3, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00f      	beq.n	80065c8 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065a8:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <checkDemoModCalisma+0x24c>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f083 0301 	eor.w	r3, r3, #1
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065b6:	2201      	movs	r2, #1
 80065b8:	2120      	movs	r1, #32
 80065ba:	483b      	ldr	r0, [pc, #236]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065bc:	f002 ff0f 	bl	80093de <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065c0:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <checkDemoModCalisma+0x248>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	e007      	b.n	80065d8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2120      	movs	r1, #32
 80065cc:	4836      	ldr	r0, [pc, #216]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065ce:	f002 ff06 	bl	80093de <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065d2:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <checkDemoModCalisma+0x248>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065d8:	2102      	movs	r1, #2
 80065da:	4833      	ldr	r0, [pc, #204]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065dc:	f002 fee8 	bl	80093b0 <HAL_GPIO_ReadPin>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d125      	bne.n	8006632 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80065e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065ea:	482f      	ldr	r0, [pc, #188]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065ec:	f002 fee0 	bl	80093b0 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11d      	bne.n	8006632 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80065f6:	4b31      	ldr	r3, [pc, #196]	; (80066bc <checkDemoModCalisma+0x254>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f083 0301 	eor.w	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d016      	beq.n	8006632 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <checkDemoModCalisma+0x248>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f083 0301 	eor.w	r3, r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00f      	beq.n	8006632 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <checkDemoModCalisma+0x244>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006620:	2201      	movs	r2, #1
 8006622:	2110      	movs	r1, #16
 8006624:	4820      	ldr	r0, [pc, #128]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006626:	f002 feda 	bl	80093de <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800662a:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <checkDemoModCalisma+0x24c>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e007      	b.n	8006642 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006632:	2200      	movs	r2, #0
 8006634:	2110      	movs	r1, #16
 8006636:	481c      	ldr	r0, [pc, #112]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006638:	f002 fed1 	bl	80093de <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <checkDemoModCalisma+0x24c>)
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006642:	2104      	movs	r1, #4
 8006644:	4818      	ldr	r0, [pc, #96]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006646:	f002 feb3 	bl	80093b0 <HAL_GPIO_ReadPin>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d139      	bne.n	80066c4 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006650:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <checkDemoModCalisma+0x254>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f083 0301 	eor.w	r3, r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d032      	beq.n	80066c4 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800665e:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <checkDemoModCalisma+0x24c>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f083 0301 	eor.w	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02b      	beq.n	80066c4 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <checkDemoModCalisma+0x248>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f083 0301 	eor.w	r3, r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d024      	beq.n	80066c4 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800667a:	2201      	movs	r2, #1
 800667c:	2102      	movs	r1, #2
 800667e:	480e      	ldr	r0, [pc, #56]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006680:	f002 fead 	bl	80093de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006684:	2201      	movs	r2, #1
 8006686:	2101      	movs	r1, #1
 8006688:	480b      	ldr	r0, [pc, #44]	; (80066b8 <checkDemoModCalisma+0x250>)
 800668a:	f002 fea8 	bl	80093de <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <checkDemoModCalisma+0x244>)
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <checkDemoModCalisma+0x258>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e027      	b.n	80066ec <checkDemoModCalisma+0x284>
 800669c:	20000242 	.word	0x20000242
 80066a0:	20000276 	.word	0x20000276
 80066a4:	20000241 	.word	0x20000241
 80066a8:	40011000 	.word	0x40011000
 80066ac:	2000027d 	.word	0x2000027d
 80066b0:	2000027e 	.word	0x2000027e
 80066b4:	2000027f 	.word	0x2000027f
 80066b8:	40010c00 	.word	0x40010c00
 80066bc:	2000027c 	.word	0x2000027c
 80066c0:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066c4:	2104      	movs	r1, #4
 80066c6:	48a0      	ldr	r0, [pc, #640]	; (8006948 <checkDemoModCalisma+0x4e0>)
 80066c8:	f002 fe72 	bl	80093b0 <HAL_GPIO_ReadPin>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d10c      	bne.n	80066ec <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2102      	movs	r1, #2
 80066d6:	489d      	ldr	r0, [pc, #628]	; (800694c <checkDemoModCalisma+0x4e4>)
 80066d8:	f002 fe81 	bl	80093de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066dc:	2200      	movs	r2, #0
 80066de:	2101      	movs	r1, #1
 80066e0:	489a      	ldr	r0, [pc, #616]	; (800694c <checkDemoModCalisma+0x4e4>)
 80066e2:	f002 fe7c 	bl	80093de <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80066e6:	4b9a      	ldr	r3, [pc, #616]	; (8006950 <checkDemoModCalisma+0x4e8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80066ec:	2104      	movs	r1, #4
 80066ee:	4896      	ldr	r0, [pc, #600]	; (8006948 <checkDemoModCalisma+0x4e0>)
 80066f0:	f002 fe5e 	bl	80093b0 <HAL_GPIO_ReadPin>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d10d      	bne.n	8006716 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80066fa:	2201      	movs	r2, #1
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	4895      	ldr	r0, [pc, #596]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006700:	f002 fe6d 	bl	80093de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006704:	2201      	movs	r2, #1
 8006706:	2120      	movs	r1, #32
 8006708:	4892      	ldr	r0, [pc, #584]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800670a:	f002 fe68 	bl	80093de <HAL_GPIO_WritePin>
			timer3 = millis;
 800670e:	4b92      	ldr	r3, [pc, #584]	; (8006958 <checkDemoModCalisma+0x4f0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a92      	ldr	r2, [pc, #584]	; (800695c <checkDemoModCalisma+0x4f4>)
 8006714:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006716:	4b90      	ldr	r3, [pc, #576]	; (8006958 <checkDemoModCalisma+0x4f0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b90      	ldr	r3, [pc, #576]	; (800695c <checkDemoModCalisma+0x4f4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b04      	cmp	r3, #4
 8006722:	d909      	bls.n	8006738 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006724:	2200      	movs	r2, #0
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	488a      	ldr	r0, [pc, #552]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800672a:	f002 fe58 	bl	80093de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800672e:	2200      	movs	r2, #0
 8006730:	2120      	movs	r1, #32
 8006732:	4888      	ldr	r0, [pc, #544]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006734:	f002 fe53 	bl	80093de <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006738:	2102      	movs	r1, #2
 800673a:	4883      	ldr	r0, [pc, #524]	; (8006948 <checkDemoModCalisma+0x4e0>)
 800673c:	f002 fe38 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006740:	4603      	mov	r3, r0
 8006742:	2b01      	cmp	r3, #1
 8006744:	d108      	bne.n	8006758 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006746:	2201      	movs	r2, #1
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	4882      	ldr	r0, [pc, #520]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800674c:	f002 fe47 	bl	80093de <HAL_GPIO_WritePin>
			timer3 = millis;
 8006750:	4b81      	ldr	r3, [pc, #516]	; (8006958 <checkDemoModCalisma+0x4f0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a81      	ldr	r2, [pc, #516]	; (800695c <checkDemoModCalisma+0x4f4>)
 8006756:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006758:	4b7f      	ldr	r3, [pc, #508]	; (8006958 <checkDemoModCalisma+0x4f0>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	4b7f      	ldr	r3, [pc, #508]	; (800695c <checkDemoModCalisma+0x4f4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b04      	cmp	r3, #4
 8006764:	d904      	bls.n	8006770 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	487a      	ldr	r0, [pc, #488]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800676c:	f002 fe37 	bl	80093de <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006770:	4b7b      	ldr	r3, [pc, #492]	; (8006960 <checkDemoModCalisma+0x4f8>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d058      	beq.n	800682a <checkDemoModCalisma+0x3c2>
 8006778:	4b7a      	ldr	r3, [pc, #488]	; (8006964 <checkDemoModCalisma+0x4fc>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d054      	beq.n	800682a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006780:	4b79      	ldr	r3, [pc, #484]	; (8006968 <checkDemoModCalisma+0x500>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	4b77      	ldr	r3, [pc, #476]	; (8006968 <checkDemoModCalisma+0x500>)
 800678a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800678c:	4b76      	ldr	r3, [pc, #472]	; (8006968 <checkDemoModCalisma+0x500>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b09      	cmp	r3, #9
 8006792:	d908      	bls.n	80067a6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006794:	4b74      	ldr	r3, [pc, #464]	; (8006968 <checkDemoModCalisma+0x500>)
 8006796:	2200      	movs	r2, #0
 8006798:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800679a:	4b74      	ldr	r3, [pc, #464]	; (800696c <checkDemoModCalisma+0x504>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	4b72      	ldr	r3, [pc, #456]	; (800696c <checkDemoModCalisma+0x504>)
 80067a4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067a6:	4b71      	ldr	r3, [pc, #452]	; (800696c <checkDemoModCalisma+0x504>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b09      	cmp	r3, #9
 80067ac:	d908      	bls.n	80067c0 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067ae:	4b6f      	ldr	r3, [pc, #444]	; (800696c <checkDemoModCalisma+0x504>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067b4:	4b6e      	ldr	r3, [pc, #440]	; (8006970 <checkDemoModCalisma+0x508>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	4b6c      	ldr	r3, [pc, #432]	; (8006970 <checkDemoModCalisma+0x508>)
 80067be:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <checkDemoModCalisma+0x508>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d908      	bls.n	80067da <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067c8:	4b69      	ldr	r3, [pc, #420]	; (8006970 <checkDemoModCalisma+0x508>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067ce:	4b69      	ldr	r3, [pc, #420]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	4b67      	ldr	r3, [pc, #412]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067d8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80067da:	4b66      	ldr	r3, [pc, #408]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d908      	bls.n	80067f4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80067e2:	4b64      	ldr	r3, [pc, #400]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80067e8:	4b63      	ldr	r3, [pc, #396]	; (8006978 <checkDemoModCalisma+0x510>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	4b61      	ldr	r3, [pc, #388]	; (8006978 <checkDemoModCalisma+0x510>)
 80067f2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80067f4:	4b60      	ldr	r3, [pc, #384]	; (8006978 <checkDemoModCalisma+0x510>)
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	4b60      	ldr	r3, [pc, #384]	; (800697c <checkDemoModCalisma+0x514>)
 80067fa:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80067fe:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <checkDemoModCalisma+0x50c>)
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	4b5e      	ldr	r3, [pc, #376]	; (800697c <checkDemoModCalisma+0x514>)
 8006804:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006806:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <checkDemoModCalisma+0x508>)
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	4b5c      	ldr	r3, [pc, #368]	; (800697c <checkDemoModCalisma+0x514>)
 800680c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800680e:	4b57      	ldr	r3, [pc, #348]	; (800696c <checkDemoModCalisma+0x504>)
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	4b5a      	ldr	r3, [pc, #360]	; (800697c <checkDemoModCalisma+0x514>)
 8006814:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006816:	4b54      	ldr	r3, [pc, #336]	; (8006968 <checkDemoModCalisma+0x500>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b58      	ldr	r3, [pc, #352]	; (800697c <checkDemoModCalisma+0x514>)
 800681c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800681e:	4b58      	ldr	r3, [pc, #352]	; (8006980 <checkDemoModCalisma+0x518>)
 8006820:	2201      	movs	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006824:	4b4f      	ldr	r3, [pc, #316]	; (8006964 <checkDemoModCalisma+0x4fc>)
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800682a:	4b56      	ldr	r3, [pc, #344]	; (8006984 <checkDemoModCalisma+0x51c>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 8087 	bne.w	8006942 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006834:	4a54      	ldr	r2, [pc, #336]	; (8006988 <checkDemoModCalisma+0x520>)
 8006836:	2101      	movs	r1, #1
 8006838:	2002      	movs	r0, #2
 800683a:	f001 fa93 	bl	8007d64 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800683e:	4a53      	ldr	r2, [pc, #332]	; (800698c <checkDemoModCalisma+0x524>)
 8006840:	2101      	movs	r1, #1
 8006842:	2001      	movs	r0, #1
 8006844:	f001 fa8e 	bl	8007d64 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <checkDemoModCalisma+0x510>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	220a      	movs	r2, #10
 800684e:	4950      	ldr	r1, [pc, #320]	; (8006990 <checkDemoModCalisma+0x528>)
 8006850:	4618      	mov	r0, r3
 8006852:	f005 fdd9 	bl	800c408 <itoa>
			lcd_print(2,12,snum);
 8006856:	4a4e      	ldr	r2, [pc, #312]	; (8006990 <checkDemoModCalisma+0x528>)
 8006858:	210c      	movs	r1, #12
 800685a:	2002      	movs	r0, #2
 800685c:	f001 fa82 	bl	8007d64 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006860:	4b44      	ldr	r3, [pc, #272]	; (8006974 <checkDemoModCalisma+0x50c>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	220a      	movs	r2, #10
 8006866:	494a      	ldr	r1, [pc, #296]	; (8006990 <checkDemoModCalisma+0x528>)
 8006868:	4618      	mov	r0, r3
 800686a:	f005 fdcd 	bl	800c408 <itoa>
			lcd_print(2,13,snum);
 800686e:	4a48      	ldr	r2, [pc, #288]	; (8006990 <checkDemoModCalisma+0x528>)
 8006870:	210d      	movs	r1, #13
 8006872:	2002      	movs	r0, #2
 8006874:	f001 fa76 	bl	8007d64 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006878:	4b3d      	ldr	r3, [pc, #244]	; (8006970 <checkDemoModCalisma+0x508>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	220a      	movs	r2, #10
 800687e:	4944      	ldr	r1, [pc, #272]	; (8006990 <checkDemoModCalisma+0x528>)
 8006880:	4618      	mov	r0, r3
 8006882:	f005 fdc1 	bl	800c408 <itoa>
			lcd_print(2,14,snum);
 8006886:	4a42      	ldr	r2, [pc, #264]	; (8006990 <checkDemoModCalisma+0x528>)
 8006888:	210e      	movs	r1, #14
 800688a:	2002      	movs	r0, #2
 800688c:	f001 fa6a 	bl	8007d64 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006890:	4b36      	ldr	r3, [pc, #216]	; (800696c <checkDemoModCalisma+0x504>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	220a      	movs	r2, #10
 8006896:	493e      	ldr	r1, [pc, #248]	; (8006990 <checkDemoModCalisma+0x528>)
 8006898:	4618      	mov	r0, r3
 800689a:	f005 fdb5 	bl	800c408 <itoa>
			lcd_print(2,15,snum);
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <checkDemoModCalisma+0x528>)
 80068a0:	210f      	movs	r1, #15
 80068a2:	2002      	movs	r0, #2
 80068a4:	f001 fa5e 	bl	8007d64 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068a8:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <checkDemoModCalisma+0x500>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	220a      	movs	r2, #10
 80068ae:	4938      	ldr	r1, [pc, #224]	; (8006990 <checkDemoModCalisma+0x528>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f005 fda9 	bl	800c408 <itoa>
			lcd_print(2,16,snum);
 80068b6:	4a36      	ldr	r2, [pc, #216]	; (8006990 <checkDemoModCalisma+0x528>)
 80068b8:	2110      	movs	r1, #16
 80068ba:	2002      	movs	r0, #2
 80068bc:	f001 fa52 	bl	8007d64 <lcd_print>
			mesajYazildi=1;
 80068c0:	4b34      	ldr	r3, [pc, #208]	; (8006994 <checkDemoModCalisma+0x52c>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068c6:	e03c      	b.n	8006942 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068c8:	4b33      	ldr	r3, [pc, #204]	; (8006998 <checkDemoModCalisma+0x530>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d003      	beq.n	80068d8 <checkDemoModCalisma+0x470>
 80068d0:	4b2c      	ldr	r3, [pc, #176]	; (8006984 <checkDemoModCalisma+0x51c>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d134      	bne.n	8006942 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068d8:	2200      	movs	r2, #0
 80068da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068de:	481b      	ldr	r0, [pc, #108]	; (800694c <checkDemoModCalisma+0x4e4>)
 80068e0:	f002 fd7d 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068ea:	4818      	ldr	r0, [pc, #96]	; (800694c <checkDemoModCalisma+0x4e4>)
 80068ec:	f002 fd77 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80068f0:	2200      	movs	r2, #0
 80068f2:	2104      	movs	r1, #4
 80068f4:	4815      	ldr	r0, [pc, #84]	; (800694c <checkDemoModCalisma+0x4e4>)
 80068f6:	f002 fd72 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2102      	movs	r1, #2
 80068fe:	4813      	ldr	r0, [pc, #76]	; (800694c <checkDemoModCalisma+0x4e4>)
 8006900:	f002 fd6d 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006904:	2200      	movs	r2, #0
 8006906:	2101      	movs	r1, #1
 8006908:	4810      	ldr	r0, [pc, #64]	; (800694c <checkDemoModCalisma+0x4e4>)
 800690a:	f002 fd68 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800690e:	2200      	movs	r2, #0
 8006910:	2120      	movs	r1, #32
 8006912:	480d      	ldr	r0, [pc, #52]	; (8006948 <checkDemoModCalisma+0x4e0>)
 8006914:	f002 fd63 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006918:	2200      	movs	r2, #0
 800691a:	2110      	movs	r1, #16
 800691c:	480a      	ldr	r0, [pc, #40]	; (8006948 <checkDemoModCalisma+0x4e0>)
 800691e:	f002 fd5e 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006922:	2200      	movs	r2, #0
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	480b      	ldr	r0, [pc, #44]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006928:	f002 fd59 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800692c:	2200      	movs	r2, #0
 800692e:	2140      	movs	r1, #64	; 0x40
 8006930:	4808      	ldr	r0, [pc, #32]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006932:	f002 fd54 	bl	80093de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006936:	2200      	movs	r2, #0
 8006938:	2120      	movs	r1, #32
 800693a:	4806      	ldr	r0, [pc, #24]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800693c:	f002 fd4f 	bl	80093de <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006940:	e7ff      	b.n	8006942 <checkDemoModCalisma+0x4da>
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	40011000 	.word	0x40011000
 800694c:	40010c00 	.word	0x40010c00
 8006950:	2000027d 	.word	0x2000027d
 8006954:	40010800 	.word	0x40010800
 8006958:	20000200 	.word	0x20000200
 800695c:	20000210 	.word	0x20000210
 8006960:	2000027c 	.word	0x2000027c
 8006964:	20000262 	.word	0x20000262
 8006968:	20000221 	.word	0x20000221
 800696c:	20000222 	.word	0x20000222
 8006970:	20000008 	.word	0x20000008
 8006974:	20000009 	.word	0x20000009
 8006978:	20000223 	.word	0x20000223
 800697c:	20000128 	.word	0x20000128
 8006980:	20000250 	.word	0x20000250
 8006984:	20000241 	.word	0x20000241
 8006988:	0800dbc8 	.word	0x0800dbc8
 800698c:	0800dbd4 	.word	0x0800dbd4
 8006990:	20000198 	.word	0x20000198
 8006994:	20000258 	.word	0x20000258
 8006998:	20000242 	.word	0x20000242

0800699c <mainLoop>:

void mainLoop() {
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069a2:	f7fe f923 	bl	8004bec <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069a6:	2101      	movs	r1, #1
 80069a8:	48ac      	ldr	r0, [pc, #688]	; (8006c5c <mainLoop+0x2c0>)
 80069aa:	f002 fd01 	bl	80093b0 <HAL_GPIO_ReadPin>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d136      	bne.n	8006a22 <mainLoop+0x86>
 80069b4:	2108      	movs	r1, #8
 80069b6:	48aa      	ldr	r0, [pc, #680]	; (8006c60 <mainLoop+0x2c4>)
 80069b8:	f002 fcfa 	bl	80093b0 <HAL_GPIO_ReadPin>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d12f      	bne.n	8006a22 <mainLoop+0x86>
 80069c2:	2102      	movs	r1, #2
 80069c4:	48a5      	ldr	r0, [pc, #660]	; (8006c5c <mainLoop+0x2c0>)
 80069c6:	f002 fcf3 	bl	80093b0 <HAL_GPIO_ReadPin>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d128      	bne.n	8006a22 <mainLoop+0x86>
 80069d0:	2104      	movs	r1, #4
 80069d2:	48a2      	ldr	r0, [pc, #648]	; (8006c5c <mainLoop+0x2c0>)
 80069d4:	f002 fcec 	bl	80093b0 <HAL_GPIO_ReadPin>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d121      	bne.n	8006a22 <mainLoop+0x86>
 80069de:	2108      	movs	r1, #8
 80069e0:	489e      	ldr	r0, [pc, #632]	; (8006c5c <mainLoop+0x2c0>)
 80069e2:	f002 fce5 	bl	80093b0 <HAL_GPIO_ReadPin>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11a      	bne.n	8006a22 <mainLoop+0x86>
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	489c      	ldr	r0, [pc, #624]	; (8006c60 <mainLoop+0x2c4>)
 80069f0:	f002 fcde 	bl	80093b0 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d113      	bne.n	8006a22 <mainLoop+0x86>
 80069fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069fe:	4898      	ldr	r0, [pc, #608]	; (8006c60 <mainLoop+0x2c4>)
 8006a00:	f002 fcd6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10b      	bne.n	8006a22 <mainLoop+0x86>
 8006a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a0e:	4894      	ldr	r0, [pc, #592]	; (8006c60 <mainLoop+0x2c4>)
 8006a10:	f002 fcce 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d103      	bne.n	8006a22 <mainLoop+0x86>
			butonKontrol=0;
 8006a1a:	4b92      	ldr	r3, [pc, #584]	; (8006c64 <mainLoop+0x2c8>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	e003      	b.n	8006a2a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a22:	4b91      	ldr	r3, [pc, #580]	; (8006c68 <mainLoop+0x2cc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a91      	ldr	r2, [pc, #580]	; (8006c6c <mainLoop+0x2d0>)
 8006a28:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a2a:	4b91      	ldr	r3, [pc, #580]	; (8006c70 <mainLoop+0x2d4>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d03a      	beq.n	8006aa8 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a32:	bf00      	nop
 8006a34:	488f      	ldr	r0, [pc, #572]	; (8006c74 <mainLoop+0x2d8>)
 8006a36:	f003 fae4 	bl	800a002 <HAL_I2C_GetError>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d0f9      	beq.n	8006a34 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a40:	bf00      	nop
 8006a42:	488c      	ldr	r0, [pc, #560]	; (8006c74 <mainLoop+0x2d8>)
 8006a44:	f003 fad0 	bl	8009fe8 <HAL_I2C_GetState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d1f9      	bne.n	8006a42 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a52:	9302      	str	r3, [sp, #8]
 8006a54:	236e      	movs	r3, #110	; 0x6e
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	4b87      	ldr	r3, [pc, #540]	; (8006c78 <mainLoop+0x2dc>)
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	236e      	movs	r3, #110	; 0x6e
 8006a5e:	2200      	movs	r2, #0
 8006a60:	21a0      	movs	r1, #160	; 0xa0
 8006a62:	4884      	ldr	r0, [pc, #528]	; (8006c74 <mainLoop+0x2d8>)
 8006a64:	f002 ff5e 	bl	8009924 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a6c:	f001 fed0 	bl	8008810 <HAL_Delay>

		  hafizaYaz=0;
 8006a70:	4b7f      	ldr	r3, [pc, #508]	; (8006c70 <mainLoop+0x2d4>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a76:	4b81      	ldr	r3, [pc, #516]	; (8006c7c <mainLoop+0x2e0>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a7e:	4a80      	ldr	r2, [pc, #512]	; (8006c80 <mainLoop+0x2e4>)
 8006a80:	2101      	movs	r1, #1
 8006a82:	2002      	movs	r0, #2
 8006a84:	f001 f96e 	bl	8007d64 <lcd_print>
 8006a88:	e008      	b.n	8006a9c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a8a:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <mainLoop+0x2e0>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d104      	bne.n	8006a9c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a92:	4a7c      	ldr	r2, [pc, #496]	; (8006c84 <mainLoop+0x2e8>)
 8006a94:	2101      	movs	r1, #1
 8006a96:	2002      	movs	r0, #2
 8006a98:	f001 f964 	bl	8007d64 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006aa0:	f001 feb6 	bl	8008810 <HAL_Delay>
		  lcd_clear();
 8006aa4:	f001 f98a 	bl	8007dbc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006aa8:	4b77      	ldr	r3, [pc, #476]	; (8006c88 <mainLoop+0x2ec>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f083 0301 	eor.w	r3, r3, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d06e      	beq.n	8006b94 <mainLoop+0x1f8>
 8006ab6:	486f      	ldr	r0, [pc, #444]	; (8006c74 <mainLoop+0x2d8>)
 8006ab8:	f003 fa96 	bl	8009fe8 <HAL_I2C_GetState>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d168      	bne.n	8006b94 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8006ac2:	4b72      	ldr	r3, [pc, #456]	; (8006c8c <mainLoop+0x2f0>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f083 0301 	eor.w	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d044      	beq.n	8006b5a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ad0:	4a6f      	ldr	r2, [pc, #444]	; (8006c90 <mainLoop+0x2f4>)
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f001 f945 	bl	8007d64 <lcd_print>
			  if(dilSecim==0) {
 8006ada:	4b68      	ldr	r3, [pc, #416]	; (8006c7c <mainLoop+0x2e0>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006ae2:	4a6c      	ldr	r2, [pc, #432]	; (8006c94 <mainLoop+0x2f8>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	2002      	movs	r0, #2
 8006ae8:	f001 f93c 	bl	8007d64 <lcd_print>
 8006aec:	e008      	b.n	8006b00 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006aee:	4b63      	ldr	r3, [pc, #396]	; (8006c7c <mainLoop+0x2e0>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d104      	bne.n	8006b00 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006af6:	4a68      	ldr	r2, [pc, #416]	; (8006c98 <mainLoop+0x2fc>)
 8006af8:	2101      	movs	r1, #1
 8006afa:	2002      	movs	r0, #2
 8006afc:	f001 f932 	bl	8007d64 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b04:	f001 fe84 	bl	8008810 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b08:	bf00      	nop
 8006b0a:	485a      	ldr	r0, [pc, #360]	; (8006c74 <mainLoop+0x2d8>)
 8006b0c:	f003 fa79 	bl	800a002 <HAL_I2C_GetError>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d0f9      	beq.n	8006b0a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b16:	e003      	b.n	8006b20 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b1c:	f001 fe78 	bl	8008810 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b20:	4854      	ldr	r0, [pc, #336]	; (8006c74 <mainLoop+0x2d8>)
 8006b22:	f003 fa61 	bl	8009fe8 <HAL_I2C_GetState>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d1f5      	bne.n	8006b18 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b2c:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <mainLoop+0x2e0>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b34:	4a59      	ldr	r2, [pc, #356]	; (8006c9c <mainLoop+0x300>)
 8006b36:	2101      	movs	r1, #1
 8006b38:	2002      	movs	r0, #2
 8006b3a:	f001 f913 	bl	8007d64 <lcd_print>
 8006b3e:	e008      	b.n	8006b52 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b40:	4b4e      	ldr	r3, [pc, #312]	; (8006c7c <mainLoop+0x2e0>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d104      	bne.n	8006b52 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b48:	4a55      	ldr	r2, [pc, #340]	; (8006ca0 <mainLoop+0x304>)
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	2002      	movs	r0, #2
 8006b4e:	f001 f909 	bl	8007d64 <lcd_print>
			  }

			  ilkOkuma=1;
 8006b52:	4b4e      	ldr	r3, [pc, #312]	; (8006c8c <mainLoop+0x2f0>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e014      	b.n	8006b84 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b5a:	4b48      	ldr	r3, [pc, #288]	; (8006c7c <mainLoop+0x2e0>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b62:	4a50      	ldr	r2, [pc, #320]	; (8006ca4 <mainLoop+0x308>)
 8006b64:	2101      	movs	r1, #1
 8006b66:	2002      	movs	r0, #2
 8006b68:	f001 f8fc 	bl	8007d64 <lcd_print>
 8006b6c:	e008      	b.n	8006b80 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b6e:	4b43      	ldr	r3, [pc, #268]	; (8006c7c <mainLoop+0x2e0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d104      	bne.n	8006b80 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b76:	4a4c      	ldr	r2, [pc, #304]	; (8006ca8 <mainLoop+0x30c>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f001 f8f2 	bl	8007d64 <lcd_print>
			  }
			  lcd_clear();
 8006b80:	f001 f91c 	bl	8007dbc <lcd_clear>
		  }

		  lcd_clear();
 8006b84:	f001 f91a 	bl	8007dbc <lcd_clear>

		  eepromKontrol(1);
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f7f9 fb53 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <mainLoop+0x2ec>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b94:	4b45      	ldr	r3, [pc, #276]	; (8006cac <mainLoop+0x310>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11c      	bne.n	8006bd6 <mainLoop+0x23a>
 8006b9c:	4b44      	ldr	r3, [pc, #272]	; (8006cb0 <mainLoop+0x314>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f083 0301 	eor.w	r3, r3, #1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d015      	beq.n	8006bd6 <mainLoop+0x23a>
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <mainLoop+0x318>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d111      	bne.n	8006bd6 <mainLoop+0x23a>
			lcd_clear();
 8006bb2:	f001 f903 	bl	8007dbc <lcd_clear>
			HAL_Delay(10);
 8006bb6:	200a      	movs	r0, #10
 8006bb8:	f001 fe2a 	bl	8008810 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006bbc:	4a3e      	ldr	r2, [pc, #248]	; (8006cb8 <mainLoop+0x31c>)
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f001 f8cf 	bl	8007d64 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bc6:	4a3d      	ldr	r2, [pc, #244]	; (8006cbc <mainLoop+0x320>)
 8006bc8:	2101      	movs	r1, #1
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f001 f8ca 	bl	8007d64 <lcd_print>
			mesajYazildi=1;
 8006bd0:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <mainLoop+0x314>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006bd6:	4b35      	ldr	r3, [pc, #212]	; (8006cac <mainLoop+0x310>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d112      	bne.n	8006c04 <mainLoop+0x268>
 8006bde:	2102      	movs	r1, #2
 8006be0:	481e      	ldr	r0, [pc, #120]	; (8006c5c <mainLoop+0x2c0>)
 8006be2:	f002 fbe5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10b      	bne.n	8006c04 <mainLoop+0x268>
 8006bec:	2104      	movs	r1, #4
 8006bee:	481b      	ldr	r0, [pc, #108]	; (8006c5c <mainLoop+0x2c0>)
 8006bf0:	f002 fbde 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d104      	bne.n	8006c04 <mainLoop+0x268>
			menuGiris=1;
 8006bfa:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <mainLoop+0x310>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c00:	f001 f8dc 	bl	8007dbc <lcd_clear>
		}

		if(menuGiris==1) {
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <mainLoop+0x310>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <mainLoop+0x274>
			menu();
 8006c0c:	f7fa fbd0 	bl	80013b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c14:	4812      	ldr	r0, [pc, #72]	; (8006c60 <mainLoop+0x2c4>)
 8006c16:	f002 fbfa 	bl	800940e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c1e:	4828      	ldr	r0, [pc, #160]	; (8006cc0 <mainLoop+0x324>)
 8006c20:	f002 fbc6 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <mainLoop+0x2a4>
 8006c2a:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <mainLoop+0x328>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f083 0301 	eor.w	r3, r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <mainLoop+0x2a4>
			stopVar=1;
 8006c38:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <mainLoop+0x32c>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e002      	b.n	8006c46 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8006c40:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <mainLoop+0x32c>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c46:	f7fd ffe7 	bl	8004c18 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c4a:	f7fe f819 	bl	8004c80 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c4e:	f7fe f85d 	bl	8004d0c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c52:	f7fe f8ad 	bl	8004db0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c56:	f7ff fc07 	bl	8006468 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c5a:	e6a2      	b.n	80069a2 <mainLoop+0x6>
 8006c5c:	40010800 	.word	0x40010800
 8006c60:	40011000 	.word	0x40011000
 8006c64:	20000253 	.word	0x20000253
 8006c68:	20000200 	.word	0x20000200
 8006c6c:	2000021c 	.word	0x2000021c
 8006c70:	20000250 	.word	0x20000250
 8006c74:	200003ac 	.word	0x200003ac
 8006c78:	20000128 	.word	0x20000128
 8006c7c:	20000245 	.word	0x20000245
 8006c80:	0800dbe8 	.word	0x0800dbe8
 8006c84:	0800dbfc 	.word	0x0800dbfc
 8006c88:	20000251 	.word	0x20000251
 8006c8c:	20000252 	.word	0x20000252
 8006c90:	0800dc10 	.word	0x0800dc10
 8006c94:	0800dc24 	.word	0x0800dc24
 8006c98:	0800dc38 	.word	0x0800dc38
 8006c9c:	0800dc4c 	.word	0x0800dc4c
 8006ca0:	0800dc60 	.word	0x0800dc60
 8006ca4:	0800dc74 	.word	0x0800dc74
 8006ca8:	0800dc88 	.word	0x0800dc88
 8006cac:	20000241 	.word	0x20000241
 8006cb0:	20000258 	.word	0x20000258
 8006cb4:	20000242 	.word	0x20000242
 8006cb8:	0800dc9c 	.word	0x0800dc9c
 8006cbc:	0800dcb0 	.word	0x0800dcb0
 8006cc0:	40010c00 	.word	0x40010c00
 8006cc4:	20000279 	.word	0x20000279
 8006cc8:	20000276 	.word	0x20000276

08006ccc <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID(int state) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af04      	add	r7, sp, #16
 8006cd2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	f001 f8a3 	bl	8007e20 <lcd_cursor>

    int cursorPosition = 3;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8006ce2:	2305      	movs	r3, #5
 8006ce4:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d104      	bne.n	8006cf6 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8006cec:	220c      	movs	r2, #12
 8006cee:	2100      	movs	r1, #0
 8006cf0:	48a0      	ldr	r0, [pc, #640]	; (8006f74 <takeMachineID+0x2a8>)
 8006cf2:	f005 fcb0 	bl	800c656 <memset>
    }
    HAL_Delay(100);
 8006cf6:	2064      	movs	r0, #100	; 0x64
 8006cf8:	f001 fd8a 	bl	8008810 <HAL_Delay>

    printTemplate(1, 0);
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f7fa f8f0 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d04:	2108      	movs	r1, #8
 8006d06:	489c      	ldr	r0, [pc, #624]	; (8006f78 <takeMachineID+0x2ac>)
 8006d08:	f002 fb52 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d146      	bne.n	8006da0 <takeMachineID+0xd4>
        	lcd_cursor(0);
 8006d12:	2000      	movs	r0, #0
 8006d14:	f001 f884 	bl	8007e20 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006d18:	4b96      	ldr	r3, [pc, #600]	; (8006f74 <takeMachineID+0x2a8>)
 8006d1a:	7adb      	ldrb	r3, [r3, #11]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11f      	bne.n	8006d60 <takeMachineID+0x94>
        		lcd_clear();
 8006d20:	f001 f84c 	bl	8007dbc <lcd_clear>
        		if(dilSecim == 0) {
 8006d24:	4b95      	ldr	r3, [pc, #596]	; (8006f7c <takeMachineID+0x2b0>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <takeMachineID+0x76>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d2c:	4a94      	ldr	r2, [pc, #592]	; (8006f80 <takeMachineID+0x2b4>)
 8006d2e:	2101      	movs	r1, #1
 8006d30:	2001      	movs	r0, #1
 8006d32:	f001 f817 	bl	8007d64 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d36:	4a93      	ldr	r2, [pc, #588]	; (8006f84 <takeMachineID+0x2b8>)
 8006d38:	2101      	movs	r1, #1
 8006d3a:	2002      	movs	r0, #2
 8006d3c:	f001 f812 	bl	8007d64 <lcd_print>
 8006d40:	e009      	b.n	8006d56 <takeMachineID+0x8a>
        		} else {
        			lcd_print(1, 1, "MACHINE ID MUST");
 8006d42:	4a91      	ldr	r2, [pc, #580]	; (8006f88 <takeMachineID+0x2bc>)
 8006d44:	2101      	movs	r1, #1
 8006d46:	2001      	movs	r0, #1
 8006d48:	f001 f80c 	bl	8007d64 <lcd_print>
        			lcd_print(2, 1, "BE 12 CHARACTERS");
 8006d4c:	4a8f      	ldr	r2, [pc, #572]	; (8006f8c <takeMachineID+0x2c0>)
 8006d4e:	2101      	movs	r1, #1
 8006d50:	2002      	movs	r0, #2
 8006d52:	f001 f807 	bl	8007d64 <lcd_print>
        		}
        		HAL_Delay(1200);
 8006d56:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d5a:	f001 fd59 	bl	8008810 <HAL_Delay>
        		goto mainSection;
 8006d5e:	e7b9      	b.n	8006cd4 <takeMachineID+0x8>
        		} else {
        			setupCompleted = 1;
        		}
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, machineIDCharacterLimit);
 8006d60:	4b8b      	ldr	r3, [pc, #556]	; (8006f90 <takeMachineID+0x2c4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a8b      	ldr	r2, [pc, #556]	; (8006f94 <takeMachineID+0x2c8>)
 8006d66:	4413      	add	r3, r2
 8006d68:	4a82      	ldr	r2, [pc, #520]	; (8006f74 <takeMachineID+0x2a8>)
 8006d6a:	6810      	ldr	r0, [r2, #0]
 8006d6c:	6851      	ldr	r1, [r2, #4]
 8006d6e:	6892      	ldr	r2, [r2, #8]
 8006d70:	6018      	str	r0, [r3, #0]
 8006d72:	6059      	str	r1, [r3, #4]
 8006d74:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006d76:	20c8      	movs	r0, #200	; 0xc8
 8006d78:	f001 fd4a 	bl	8008810 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d80:	9302      	str	r3, [sp, #8]
 8006d82:	236e      	movs	r3, #110	; 0x6e
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	4b83      	ldr	r3, [pc, #524]	; (8006f94 <takeMachineID+0x2c8>)
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	236e      	movs	r3, #110	; 0x6e
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	21a0      	movs	r1, #160	; 0xa0
 8006d90:	4881      	ldr	r0, [pc, #516]	; (8006f98 <takeMachineID+0x2cc>)
 8006d92:	f002 fdc7 	bl	8009924 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d9a:	f001 fd39 	bl	8008810 <HAL_Delay>

            break;
 8006d9e:	e0e5      	b.n	8006f6c <takeMachineID+0x2a0>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006da0:	2101      	movs	r1, #1
 8006da2:	4875      	ldr	r0, [pc, #468]	; (8006f78 <takeMachineID+0x2ac>)
 8006da4:	f002 fb04 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d112      	bne.n	8006dd4 <takeMachineID+0x108>
        	if(cursorPosition == 7) {
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b07      	cmp	r3, #7
 8006db2:	d102      	bne.n	8006dba <takeMachineID+0xee>
        		cursorPosition = 10;
 8006db4:	230a      	movs	r3, #10
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e008      	b.n	8006dcc <takeMachineID+0x100>
        	} else if (cursorPosition == 14) {
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b0e      	cmp	r3, #14
 8006dbe:	d102      	bne.n	8006dc6 <takeMachineID+0xfa>
                cursorPosition = 3;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e002      	b.n	8006dcc <takeMachineID+0x100>
            } else {
            	cursorPosition++;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8006dcc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006dd0:	f001 fd1e 	bl	8008810 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006dd4:	2108      	movs	r1, #8
 8006dd6:	4871      	ldr	r0, [pc, #452]	; (8006f9c <takeMachineID+0x2d0>)
 8006dd8:	f002 faea 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d112      	bne.n	8006e08 <takeMachineID+0x13c>
            if (cursorPosition == 3) {
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d102      	bne.n	8006dee <takeMachineID+0x122>
                cursorPosition = 14;
 8006de8:	230e      	movs	r3, #14
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e008      	b.n	8006e00 <takeMachineID+0x134>
            } else if(cursorPosition == 10) {
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b0a      	cmp	r3, #10
 8006df2:	d102      	bne.n	8006dfa <takeMachineID+0x12e>
            	cursorPosition = 7;
 8006df4:	2307      	movs	r3, #7
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e002      	b.n	8006e00 <takeMachineID+0x134>
            } else {
            	cursorPosition--;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8006e00:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006e04:	f001 fd04 	bl	8008810 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e08:	2102      	movs	r1, #2
 8006e0a:	485b      	ldr	r0, [pc, #364]	; (8006f78 <takeMachineID+0x2ac>)
 8006e0c:	f002 fad0 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d16c      	bne.n	8006ef0 <takeMachineID+0x224>
        	if(cursorPosition == 3) {
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d105      	bne.n	8006e28 <takeMachineID+0x15c>
        		machineID[machineIDLoc] = '0';
 8006e1c:	4a55      	ldr	r2, [pc, #340]	; (8006f74 <takeMachineID+0x2a8>)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	4413      	add	r3, r2
 8006e22:	2230      	movs	r2, #48	; 0x30
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e04f      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 4) {
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d105      	bne.n	8006e3a <takeMachineID+0x16e>
        		machineID[machineIDLoc] = '1';
 8006e2e:	4a51      	ldr	r2, [pc, #324]	; (8006f74 <takeMachineID+0x2a8>)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	4413      	add	r3, r2
 8006e34:	2231      	movs	r2, #49	; 0x31
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e046      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 5) {
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d105      	bne.n	8006e4c <takeMachineID+0x180>
        		machineID[machineIDLoc] = '2';
 8006e40:	4a4c      	ldr	r2, [pc, #304]	; (8006f74 <takeMachineID+0x2a8>)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	2232      	movs	r2, #50	; 0x32
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e03d      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 6) {
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d105      	bne.n	8006e5e <takeMachineID+0x192>
        		machineID[machineIDLoc] = '3';
 8006e52:	4a48      	ldr	r2, [pc, #288]	; (8006f74 <takeMachineID+0x2a8>)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4413      	add	r3, r2
 8006e58:	2233      	movs	r2, #51	; 0x33
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e034      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 7) {
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b07      	cmp	r3, #7
 8006e62:	d105      	bne.n	8006e70 <takeMachineID+0x1a4>
        		machineID[machineIDLoc] = '4';
 8006e64:	4a43      	ldr	r2, [pc, #268]	; (8006f74 <takeMachineID+0x2a8>)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4413      	add	r3, r2
 8006e6a:	2234      	movs	r2, #52	; 0x34
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e02b      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 10) {
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b0a      	cmp	r3, #10
 8006e74:	d105      	bne.n	8006e82 <takeMachineID+0x1b6>
        		machineID[machineIDLoc] = '5';
 8006e76:	4a3f      	ldr	r2, [pc, #252]	; (8006f74 <takeMachineID+0x2a8>)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	2235      	movs	r2, #53	; 0x35
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	e022      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 11) {
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b0b      	cmp	r3, #11
 8006e86:	d105      	bne.n	8006e94 <takeMachineID+0x1c8>
        		machineID[machineIDLoc] = '6';
 8006e88:	4a3a      	ldr	r2, [pc, #232]	; (8006f74 <takeMachineID+0x2a8>)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	2236      	movs	r2, #54	; 0x36
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e019      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 12) {
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d105      	bne.n	8006ea6 <takeMachineID+0x1da>
        		machineID[machineIDLoc] = '7';
 8006e9a:	4a36      	ldr	r2, [pc, #216]	; (8006f74 <takeMachineID+0x2a8>)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2237      	movs	r2, #55	; 0x37
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e010      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 13) {
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b0d      	cmp	r3, #13
 8006eaa:	d105      	bne.n	8006eb8 <takeMachineID+0x1ec>
        		machineID[machineIDLoc] = '8';
 8006eac:	4a31      	ldr	r2, [pc, #196]	; (8006f74 <takeMachineID+0x2a8>)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	2238      	movs	r2, #56	; 0x38
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	e007      	b.n	8006ec8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 14) {
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b0e      	cmp	r3, #14
 8006ebc:	d104      	bne.n	8006ec8 <takeMachineID+0x1fc>
        		machineID[machineIDLoc] = '9';
 8006ebe:	4a2d      	ldr	r2, [pc, #180]	; (8006f74 <takeMachineID+0x2a8>)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	2239      	movs	r2, #57	; 0x39
 8006ec6:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	b2d9      	uxtb	r1, r3
 8006ecc:	4a29      	ldr	r2, [pc, #164]	; (8006f74 <takeMachineID+0x2a8>)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f000 ff59 	bl	8007d8e <lcd_print_char>

        	writeLoc++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8006ee8:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006eec:	f001 fc90 	bl	8008810 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ef0:	2104      	movs	r1, #4
 8006ef2:	4821      	ldr	r0, [pc, #132]	; (8006f78 <takeMachineID+0x2ac>)
 8006ef4:	f002 fa5c 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d12f      	bne.n	8006f5e <takeMachineID+0x292>
            if(strlen(machineID) >= 1) {
 8006efe:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <takeMachineID+0x2a8>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d027      	beq.n	8006f56 <takeMachineID+0x28a>

                machineID[machineIDLoc] = '\0';
 8006f06:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <takeMachineID+0x2a8>)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	3304      	adds	r3, #4
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	f000 ff58 	bl	8007dd0 <lcd_delete_char>
                HAL_Delay(50);
 8006f20:	2032      	movs	r0, #50	; 0x32
 8006f22:	f001 fc75 	bl	8008810 <HAL_Delay>

                if(writeLoc > 5) {
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	dd03      	ble.n	8006f34 <takeMachineID+0x268>
                	writeLoc--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e004      	b.n	8006f3e <takeMachineID+0x272>
                } else if(writeLoc < 5) {
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	dc01      	bgt.n	8006f3e <takeMachineID+0x272>
                	writeLoc = 5;
 8006f3a:	2305      	movs	r3, #5
 8006f3c:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd03      	ble.n	8006f4c <takeMachineID+0x280>
                	machineIDLoc--;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	e004      	b.n	8006f56 <takeMachineID+0x28a>
                } else if(machineIDLoc < 0) {
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da01      	bge.n	8006f56 <takeMachineID+0x28a>
                	machineIDLoc = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8006f56:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006f5a:	f001 fc59 	bl	8008810 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	2002      	movs	r0, #2
 8006f66:	f000 fede 	bl	8007d26 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f6a:	e6cb      	b.n	8006d04 <takeMachineID+0x38>
    }
}
 8006f6c:	bf00      	nop
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200001a0 	.word	0x200001a0
 8006f78:	40010800 	.word	0x40010800
 8006f7c:	20000245 	.word	0x20000245
 8006f80:	0800dcc4 	.word	0x0800dcc4
 8006f84:	0800dcd8 	.word	0x0800dcd8
 8006f88:	0800dcec 	.word	0x0800dcec
 8006f8c:	0800dcfc 	.word	0x0800dcfc
 8006f90:	2000000c 	.word	0x2000000c
 8006f94:	20000128 	.word	0x20000128
 8006f98:	200003ac 	.word	0x200003ac
 8006f9c:	40011000 	.word	0x40011000

08006fa0 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f000 ff39 	bl	8007e20 <lcd_cursor>

    if(state == 0) {
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8006fb4:	2214      	movs	r2, #20
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4892      	ldr	r0, [pc, #584]	; (8007204 <takeWifiSSID+0x264>)
 8006fba:	f005 fb4c 	bl	800c656 <memset>
    }

    int realCharPos = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8006fc2:	4b91      	ldr	r3, [pc, #580]	; (8007208 <takeWifiSSID+0x268>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
    page = 1;
 8006fc8:	4b90      	ldr	r3, [pc, #576]	; (800720c <takeWifiSSID+0x26c>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8006fd2:	2307      	movs	r3, #7
 8006fd4:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	2002      	movs	r0, #2
 8006fda:	f7f9 ff83 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fde:	2108      	movs	r1, #8
 8006fe0:	488b      	ldr	r0, [pc, #556]	; (8007210 <takeWifiSSID+0x270>)
 8006fe2:	f002 f9e5 	bl	80093b0 <HAL_GPIO_ReadPin>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d13f      	bne.n	800706c <takeWifiSSID+0xcc>
            lcd_cursor(0);
 8006fec:	2000      	movs	r0, #0
 8006fee:	f000 ff17 	bl	8007e20 <lcd_cursor>

            if(strlen(wifiSSID) > wifiCharacterLimit) {
 8006ff2:	4884      	ldr	r0, [pc, #528]	; (8007204 <takeWifiSSID+0x264>)
 8006ff4:	f7f9 f916 	bl	8000224 <strlen>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b14      	cmp	r3, #20
 8006ffc:	d91f      	bls.n	800703e <takeWifiSSID+0x9e>
                lcd_clear();
 8006ffe:	f000 fedd 	bl	8007dbc <lcd_clear>
                if(dilSecim == 0) {
 8007002:	4b84      	ldr	r3, [pc, #528]	; (8007214 <takeWifiSSID+0x274>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <takeWifiSSID+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 800700a:	4a83      	ldr	r2, [pc, #524]	; (8007218 <takeWifiSSID+0x278>)
 800700c:	2101      	movs	r1, #1
 800700e:	2001      	movs	r0, #1
 8007010:	f000 fea8 	bl	8007d64 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007014:	4a81      	ldr	r2, [pc, #516]	; (800721c <takeWifiSSID+0x27c>)
 8007016:	2101      	movs	r1, #1
 8007018:	2002      	movs	r0, #2
 800701a:	f000 fea3 	bl	8007d64 <lcd_print>
 800701e:	e009      	b.n	8007034 <takeWifiSSID+0x94>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007020:	4a7f      	ldr	r2, [pc, #508]	; (8007220 <takeWifiSSID+0x280>)
 8007022:	2101      	movs	r1, #1
 8007024:	2001      	movs	r0, #1
 8007026:	f000 fe9d 	bl	8007d64 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800702a:	4a7e      	ldr	r2, [pc, #504]	; (8007224 <takeWifiSSID+0x284>)
 800702c:	2101      	movs	r1, #1
 800702e:	2002      	movs	r0, #2
 8007030:	f000 fe98 	bl	8007d64 <lcd_print>
                }
                HAL_Delay(1200);
 8007034:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007038:	f001 fbea 	bl	8008810 <HAL_Delay>
                goto mainSSIDSection;
 800703c:	e7b4      	b.n	8006fa8 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, wifiCharacterLimit);
 800703e:	4b7a      	ldr	r3, [pc, #488]	; (8007228 <takeWifiSSID+0x288>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7a      	ldr	r2, [pc, #488]	; (800722c <takeWifiSSID+0x28c>)
 8007044:	4413      	add	r3, r2
 8007046:	4a7a      	ldr	r2, [pc, #488]	; (8007230 <takeWifiSSID+0x290>)
 8007048:	6811      	ldr	r1, [r2, #0]
 800704a:	6855      	ldr	r5, [r2, #4]
 800704c:	6894      	ldr	r4, [r2, #8]
 800704e:	68d0      	ldr	r0, [r2, #12]
 8007050:	6019      	str	r1, [r3, #0]
 8007052:	605d      	str	r5, [r3, #4]
 8007054:	609c      	str	r4, [r3, #8]
 8007056:	60d8      	str	r0, [r3, #12]
 8007058:	6911      	ldr	r1, [r2, #16]
 800705a:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 800705c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007060:	f001 fbd6 	bl	8008810 <HAL_Delay>

            hafizaYaz = 1;
 8007064:	4b73      	ldr	r3, [pc, #460]	; (8007234 <takeWifiSSID+0x294>)
 8007066:	2201      	movs	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]

            //HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            //HAL_Delay(1000);

            break;
 800706a:	e161      	b.n	8007330 <takeWifiSSID+0x390>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800706c:	2101      	movs	r1, #1
 800706e:	4868      	ldr	r0, [pc, #416]	; (8007210 <takeWifiSSID+0x270>)
 8007070:	f002 f99e 	bl	80093b0 <HAL_GPIO_ReadPin>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d166      	bne.n	8007148 <takeWifiSSID+0x1a8>
        	realCharPos++;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	3301      	adds	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b50      	cmp	r3, #80	; 0x50
 8007084:	dd01      	ble.n	800708a <takeWifiSSID+0xea>
        		realCharPos = 1;
 8007086:	2301      	movs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800708a:	4b5f      	ldr	r3, [pc, #380]	; (8007208 <takeWifiSSID+0x268>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b10      	cmp	r3, #16
 8007090:	d152      	bne.n	8007138 <takeWifiSSID+0x198>
            	if(page == 1) {
 8007092:	4b5e      	ldr	r3, [pc, #376]	; (800720c <takeWifiSSID+0x26c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10c      	bne.n	80070b4 <takeWifiSSID+0x114>
            		cursorPosition = 1;
 800709a:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <takeWifiSSID+0x268>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
            		page++;
 80070a0:	4b5a      	ldr	r3, [pc, #360]	; (800720c <takeWifiSSID+0x26c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	4a59      	ldr	r2, [pc, #356]	; (800720c <takeWifiSSID+0x26c>)
 80070a8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 80070aa:	2102      	movs	r1, #2
 80070ac:	2002      	movs	r0, #2
 80070ae:	f7f9 ff19 	bl	8000ee4 <printTemplate>
 80070b2:	e046      	b.n	8007142 <takeWifiSSID+0x1a2>
            	} else if(page == 2) {
 80070b4:	4b55      	ldr	r3, [pc, #340]	; (800720c <takeWifiSSID+0x26c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d10c      	bne.n	80070d6 <takeWifiSSID+0x136>
            		cursorPosition = 1;
 80070bc:	4b52      	ldr	r3, [pc, #328]	; (8007208 <takeWifiSSID+0x268>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
            		page++;
 80070c2:	4b52      	ldr	r3, [pc, #328]	; (800720c <takeWifiSSID+0x26c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a50      	ldr	r2, [pc, #320]	; (800720c <takeWifiSSID+0x26c>)
 80070ca:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80070cc:	2103      	movs	r1, #3
 80070ce:	2002      	movs	r0, #2
 80070d0:	f7f9 ff08 	bl	8000ee4 <printTemplate>
 80070d4:	e035      	b.n	8007142 <takeWifiSSID+0x1a2>
            	} else if(page == 3) {
 80070d6:	4b4d      	ldr	r3, [pc, #308]	; (800720c <takeWifiSSID+0x26c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d10c      	bne.n	80070f8 <takeWifiSSID+0x158>
            		cursorPosition = 1;
 80070de:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <takeWifiSSID+0x268>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
            		page++;
 80070e4:	4b49      	ldr	r3, [pc, #292]	; (800720c <takeWifiSSID+0x26c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a48      	ldr	r2, [pc, #288]	; (800720c <takeWifiSSID+0x26c>)
 80070ec:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80070ee:	2104      	movs	r1, #4
 80070f0:	2002      	movs	r0, #2
 80070f2:	f7f9 fef7 	bl	8000ee4 <printTemplate>
 80070f6:	e024      	b.n	8007142 <takeWifiSSID+0x1a2>
            	} else if(page == 4) {
 80070f8:	4b44      	ldr	r3, [pc, #272]	; (800720c <takeWifiSSID+0x26c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d10c      	bne.n	800711a <takeWifiSSID+0x17a>
            		cursorPosition = 1;
 8007100:	4b41      	ldr	r3, [pc, #260]	; (8007208 <takeWifiSSID+0x268>)
 8007102:	2201      	movs	r2, #1
 8007104:	601a      	str	r2, [r3, #0]
            		page++;
 8007106:	4b41      	ldr	r3, [pc, #260]	; (800720c <takeWifiSSID+0x26c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	4a3f      	ldr	r2, [pc, #252]	; (800720c <takeWifiSSID+0x26c>)
 800710e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8007110:	2105      	movs	r1, #5
 8007112:	2002      	movs	r0, #2
 8007114:	f7f9 fee6 	bl	8000ee4 <printTemplate>
 8007118:	e013      	b.n	8007142 <takeWifiSSID+0x1a2>
            	} else if(page == 5) {
 800711a:	4b3c      	ldr	r3, [pc, #240]	; (800720c <takeWifiSSID+0x26c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b05      	cmp	r3, #5
 8007120:	d10f      	bne.n	8007142 <takeWifiSSID+0x1a2>
            		cursorPosition = 1;
 8007122:	4b39      	ldr	r3, [pc, #228]	; (8007208 <takeWifiSSID+0x268>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007128:	4b38      	ldr	r3, [pc, #224]	; (800720c <takeWifiSSID+0x26c>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800712e:	2101      	movs	r1, #1
 8007130:	2002      	movs	r0, #2
 8007132:	f7f9 fed7 	bl	8000ee4 <printTemplate>
 8007136:	e004      	b.n	8007142 <takeWifiSSID+0x1a2>
            	}
            } else {
            	cursorPosition++;
 8007138:	4b33      	ldr	r3, [pc, #204]	; (8007208 <takeWifiSSID+0x268>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3301      	adds	r3, #1
 800713e:	4a32      	ldr	r2, [pc, #200]	; (8007208 <takeWifiSSID+0x268>)
 8007140:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007142:	20fa      	movs	r0, #250	; 0xfa
 8007144:	f001 fb64 	bl	8008810 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007148:	2108      	movs	r1, #8
 800714a:	483b      	ldr	r0, [pc, #236]	; (8007238 <takeWifiSSID+0x298>)
 800714c:	f002 f930 	bl	80093b0 <HAL_GPIO_ReadPin>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d17a      	bne.n	800724c <takeWifiSSID+0x2ac>
        	realCharPos--;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	3b01      	subs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	dc01      	bgt.n	8007166 <takeWifiSSID+0x1c6>
        		realCharPos = 80;
 8007162:	2350      	movs	r3, #80	; 0x50
 8007164:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007166:	4b28      	ldr	r3, [pc, #160]	; (8007208 <takeWifiSSID+0x268>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d166      	bne.n	800723c <takeWifiSSID+0x29c>
            	if(page == 1) {
 800716e:	4b27      	ldr	r3, [pc, #156]	; (800720c <takeWifiSSID+0x26c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10a      	bne.n	800718c <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 8007176:	4b24      	ldr	r3, [pc, #144]	; (8007208 <takeWifiSSID+0x268>)
 8007178:	2210      	movs	r2, #16
 800717a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800717c:	4b23      	ldr	r3, [pc, #140]	; (800720c <takeWifiSSID+0x26c>)
 800717e:	2205      	movs	r2, #5
 8007180:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8007182:	2105      	movs	r1, #5
 8007184:	2002      	movs	r0, #2
 8007186:	f7f9 fead 	bl	8000ee4 <printTemplate>
 800718a:	e05c      	b.n	8007246 <takeWifiSSID+0x2a6>
            	} else if(page == 2) {
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <takeWifiSSID+0x26c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d10a      	bne.n	80071aa <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 8007194:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <takeWifiSSID+0x268>)
 8007196:	2210      	movs	r2, #16
 8007198:	601a      	str	r2, [r3, #0]
            		page = 1;
 800719a:	4b1c      	ldr	r3, [pc, #112]	; (800720c <takeWifiSSID+0x26c>)
 800719c:	2201      	movs	r2, #1
 800719e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80071a0:	2101      	movs	r1, #1
 80071a2:	2002      	movs	r0, #2
 80071a4:	f7f9 fe9e 	bl	8000ee4 <printTemplate>
 80071a8:	e04d      	b.n	8007246 <takeWifiSSID+0x2a6>
            	} else if(page == 3) {
 80071aa:	4b18      	ldr	r3, [pc, #96]	; (800720c <takeWifiSSID+0x26c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d10a      	bne.n	80071c8 <takeWifiSSID+0x228>
            		cursorPosition = 16;
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <takeWifiSSID+0x268>)
 80071b4:	2210      	movs	r2, #16
 80071b6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80071b8:	4b14      	ldr	r3, [pc, #80]	; (800720c <takeWifiSSID+0x26c>)
 80071ba:	2202      	movs	r2, #2
 80071bc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80071be:	2102      	movs	r1, #2
 80071c0:	2002      	movs	r0, #2
 80071c2:	f7f9 fe8f 	bl	8000ee4 <printTemplate>
 80071c6:	e03e      	b.n	8007246 <takeWifiSSID+0x2a6>
            	} else if(page == 4) {
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <takeWifiSSID+0x26c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d10a      	bne.n	80071e6 <takeWifiSSID+0x246>
            		cursorPosition = 16;
 80071d0:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <takeWifiSSID+0x268>)
 80071d2:	2210      	movs	r2, #16
 80071d4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80071d6:	4b0d      	ldr	r3, [pc, #52]	; (800720c <takeWifiSSID+0x26c>)
 80071d8:	2203      	movs	r2, #3
 80071da:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80071dc:	2103      	movs	r1, #3
 80071de:	2002      	movs	r0, #2
 80071e0:	f7f9 fe80 	bl	8000ee4 <printTemplate>
 80071e4:	e02f      	b.n	8007246 <takeWifiSSID+0x2a6>
            	} else if(page == 5) {
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <takeWifiSSID+0x26c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d12b      	bne.n	8007246 <takeWifiSSID+0x2a6>
            		cursorPosition = 16;
 80071ee:	4b06      	ldr	r3, [pc, #24]	; (8007208 <takeWifiSSID+0x268>)
 80071f0:	2210      	movs	r2, #16
 80071f2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <takeWifiSSID+0x26c>)
 80071f6:	2204      	movs	r2, #4
 80071f8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80071fa:	2104      	movs	r1, #4
 80071fc:	2002      	movs	r0, #2
 80071fe:	f7f9 fe71 	bl	8000ee4 <printTemplate>
 8007202:	e020      	b.n	8007246 <takeWifiSSID+0x2a6>
 8007204:	200001ac 	.word	0x200001ac
 8007208:	20000000 	.word	0x20000000
 800720c:	20000004 	.word	0x20000004
 8007210:	40010800 	.word	0x40010800
 8007214:	20000245 	.word	0x20000245
 8007218:	0800dd10 	.word	0x0800dd10
 800721c:	0800dd24 	.word	0x0800dd24
 8007220:	0800dd38 	.word	0x0800dd38
 8007224:	0800dd4c 	.word	0x0800dd4c
 8007228:	20000010 	.word	0x20000010
 800722c:	20000128 	.word	0x20000128
 8007230:	200001d4 	.word	0x200001d4
 8007234:	20000250 	.word	0x20000250
 8007238:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800723c:	4b3e      	ldr	r3, [pc, #248]	; (8007338 <takeWifiSSID+0x398>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	4a3d      	ldr	r2, [pc, #244]	; (8007338 <takeWifiSSID+0x398>)
 8007244:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007246:	20fa      	movs	r0, #250	; 0xfa
 8007248:	f001 fae2 	bl	8008810 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800724c:	2102      	movs	r1, #2
 800724e:	483b      	ldr	r0, [pc, #236]	; (800733c <takeWifiSSID+0x39c>)
 8007250:	f002 f8ae 	bl	80093b0 <HAL_GPIO_ReadPin>
 8007254:	4603      	mov	r3, r0
 8007256:	2b01      	cmp	r3, #1
 8007258:	d127      	bne.n	80072aa <takeWifiSSID+0x30a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	3b01      	subs	r3, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f7f9 faa8 	bl	80007b4 <getCharFromCursorPosition>
 8007264:	4603      	mov	r3, r0
 8007266:	4619      	mov	r1, r3
 8007268:	4a35      	ldr	r2, [pc, #212]	; (8007340 <takeWifiSSID+0x3a0>)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	460a      	mov	r2, r1
 8007270:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[wifiNameLoc] = realCharPos - 1;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b2d9      	uxtb	r1, r3
 800727a:	4a32      	ldr	r2, [pc, #200]	; (8007344 <takeWifiSSID+0x3a4>)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	460a      	mov	r2, r1
 8007282:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	b2d9      	uxtb	r1, r3
 8007288:	4a2d      	ldr	r2, [pc, #180]	; (8007340 <takeWifiSSID+0x3a0>)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	4413      	add	r3, r2
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	2001      	movs	r0, #1
 8007294:	f000 fd7b 	bl	8007d8e <lcd_print_char>

            writeLoc++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3301      	adds	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80072a4:	20fa      	movs	r0, #250	; 0xfa
 80072a6:	f001 fab3 	bl	8008810 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072aa:	2104      	movs	r1, #4
 80072ac:	4823      	ldr	r0, [pc, #140]	; (800733c <takeWifiSSID+0x39c>)
 80072ae:	f002 f87f 	bl	80093b0 <HAL_GPIO_ReadPin>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d133      	bne.n	8007320 <takeWifiSSID+0x380>
        	if(strlen(wifiSSID) >= 1) {
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <takeWifiSSID+0x3a0>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02c      	beq.n	800731a <takeWifiSSID+0x37a>
        		wifiSSID[wifiNameLoc] = '\0';
 80072c0:	4a1f      	ldr	r2, [pc, #124]	; (8007340 <takeWifiSSID+0x3a0>)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
        		wifiSSIDLoc[wifiNameLoc] = '\0';
 80072ca:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <takeWifiSSID+0x3a4>)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	3306      	adds	r3, #6
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	4619      	mov	r1, r3
 80072de:	2001      	movs	r0, #1
 80072e0:	f000 fd76 	bl	8007dd0 <lcd_delete_char>
        		HAL_Delay(50);
 80072e4:	2032      	movs	r0, #50	; 0x32
 80072e6:	f001 fa93 	bl	8008810 <HAL_Delay>
        		if(writeLoc > 7) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b07      	cmp	r3, #7
 80072ee:	dd03      	ble.n	80072f8 <takeWifiSSID+0x358>
        			writeLoc--;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e004      	b.n	8007302 <takeWifiSSID+0x362>
        		} else if(writeLoc < 7) {
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	dc01      	bgt.n	8007302 <takeWifiSSID+0x362>
        			writeLoc = 7;
 80072fe:	2307      	movs	r3, #7
 8007300:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd03      	ble.n	8007310 <takeWifiSSID+0x370>
        			wifiNameLoc--;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	3b01      	subs	r3, #1
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	e004      	b.n	800731a <takeWifiSSID+0x37a>
        		} else if(wifiNameLoc < 0) {
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da01      	bge.n	800731a <takeWifiSSID+0x37a>
        			wifiNameLoc = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 800731a:	20fa      	movs	r0, #250	; 0xfa
 800731c:	f001 fa78 	bl	8008810 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <takeWifiSSID+0x398>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	4619      	mov	r1, r3
 8007328:	2002      	movs	r0, #2
 800732a:	f000 fcfc 	bl	8007d26 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800732e:	e656      	b.n	8006fde <takeWifiSSID+0x3e>
    }
}
 8007330:	bf00      	nop
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bdb0      	pop	{r4, r5, r7, pc}
 8007338:	20000000 	.word	0x20000000
 800733c:	40010800 	.word	0x40010800
 8007340:	200001ac 	.word	0x200001ac
 8007344:	200001d4 	.word	0x200001d4

08007348 <takeWifiPass>:

void takeWifiPass(int state) {
 8007348:	b5b0      	push	{r4, r5, r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8007350:	2001      	movs	r0, #1
 8007352:	f000 fd65 	bl	8007e20 <lcd_cursor>

    if(state == 0) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 800735c:	2214      	movs	r2, #20
 800735e:	2100      	movs	r1, #0
 8007360:	4892      	ldr	r0, [pc, #584]	; (80075ac <takeWifiPass+0x264>)
 8007362:	f005 f978 	bl	800c656 <memset>
    }

    int realCharPos = 1;
 8007366:	2301      	movs	r3, #1
 8007368:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800736a:	4b91      	ldr	r3, [pc, #580]	; (80075b0 <takeWifiPass+0x268>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
    page = 1;
 8007370:	4b90      	ldr	r3, [pc, #576]	; (80075b4 <takeWifiPass+0x26c>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800737a:	2307      	movs	r3, #7
 800737c:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 800737e:	2101      	movs	r1, #1
 8007380:	2003      	movs	r0, #3
 8007382:	f7f9 fdaf 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007386:	2108      	movs	r1, #8
 8007388:	488b      	ldr	r0, [pc, #556]	; (80075b8 <takeWifiPass+0x270>)
 800738a:	f002 f811 	bl	80093b0 <HAL_GPIO_ReadPin>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d13f      	bne.n	8007414 <takeWifiPass+0xcc>
            lcd_cursor(0);
 8007394:	2000      	movs	r0, #0
 8007396:	f000 fd43 	bl	8007e20 <lcd_cursor>

            if(strlen(wifiPass) > wifiCharacterLimit) {
 800739a:	4884      	ldr	r0, [pc, #528]	; (80075ac <takeWifiPass+0x264>)
 800739c:	f7f8 ff42 	bl	8000224 <strlen>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b14      	cmp	r3, #20
 80073a4:	d91f      	bls.n	80073e6 <takeWifiPass+0x9e>
                lcd_clear();
 80073a6:	f000 fd09 	bl	8007dbc <lcd_clear>
                if(dilSecim == 0) {
 80073aa:	4b84      	ldr	r3, [pc, #528]	; (80075bc <takeWifiPass+0x274>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <takeWifiPass+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073b2:	4a83      	ldr	r2, [pc, #524]	; (80075c0 <takeWifiPass+0x278>)
 80073b4:	2101      	movs	r1, #1
 80073b6:	2001      	movs	r0, #1
 80073b8:	f000 fcd4 	bl	8007d64 <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80073bc:	4a81      	ldr	r2, [pc, #516]	; (80075c4 <takeWifiPass+0x27c>)
 80073be:	2101      	movs	r1, #1
 80073c0:	2002      	movs	r0, #2
 80073c2:	f000 fccf 	bl	8007d64 <lcd_print>
 80073c6:	e009      	b.n	80073dc <takeWifiPass+0x94>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80073c8:	4a7f      	ldr	r2, [pc, #508]	; (80075c8 <takeWifiPass+0x280>)
 80073ca:	2101      	movs	r1, #1
 80073cc:	2001      	movs	r0, #1
 80073ce:	f000 fcc9 	bl	8007d64 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80073d2:	4a7e      	ldr	r2, [pc, #504]	; (80075cc <takeWifiPass+0x284>)
 80073d4:	2101      	movs	r1, #1
 80073d6:	2002      	movs	r0, #2
 80073d8:	f000 fcc4 	bl	8007d64 <lcd_print>
                }
                HAL_Delay(1200);
 80073dc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80073e0:	f001 fa16 	bl	8008810 <HAL_Delay>
                goto mainPASSSection;
 80073e4:	e7b4      	b.n	8007350 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, wifiCharacterLimit);
 80073e6:	4b7a      	ldr	r3, [pc, #488]	; (80075d0 <takeWifiPass+0x288>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a7a      	ldr	r2, [pc, #488]	; (80075d4 <takeWifiPass+0x28c>)
 80073ec:	4413      	add	r3, r2
 80073ee:	4a7a      	ldr	r2, [pc, #488]	; (80075d8 <takeWifiPass+0x290>)
 80073f0:	6811      	ldr	r1, [r2, #0]
 80073f2:	6855      	ldr	r5, [r2, #4]
 80073f4:	6894      	ldr	r4, [r2, #8]
 80073f6:	68d0      	ldr	r0, [r2, #12]
 80073f8:	6019      	str	r1, [r3, #0]
 80073fa:	605d      	str	r5, [r3, #4]
 80073fc:	609c      	str	r4, [r3, #8]
 80073fe:	60d8      	str	r0, [r3, #12]
 8007400:	6911      	ldr	r1, [r2, #16]
 8007402:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 8007404:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007408:	f001 fa02 	bl	8008810 <HAL_Delay>

            hafizaYaz = 1;
 800740c:	4b73      	ldr	r3, [pc, #460]	; (80075dc <takeWifiPass+0x294>)
 800740e:	2201      	movs	r2, #1
 8007410:	701a      	strb	r2, [r3, #0]

            //HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            //HAL_Delay(1000);

            break;
 8007412:	e161      	b.n	80076d8 <takeWifiPass+0x390>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007414:	2101      	movs	r1, #1
 8007416:	4868      	ldr	r0, [pc, #416]	; (80075b8 <takeWifiPass+0x270>)
 8007418:	f001 ffca 	bl	80093b0 <HAL_GPIO_ReadPin>
 800741c:	4603      	mov	r3, r0
 800741e:	2b01      	cmp	r3, #1
 8007420:	d166      	bne.n	80074f0 <takeWifiPass+0x1a8>
        	realCharPos++;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	3301      	adds	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b50      	cmp	r3, #80	; 0x50
 800742c:	dd01      	ble.n	8007432 <takeWifiPass+0xea>
        	    realCharPos = 1;
 800742e:	2301      	movs	r3, #1
 8007430:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8007432:	4b5f      	ldr	r3, [pc, #380]	; (80075b0 <takeWifiPass+0x268>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b10      	cmp	r3, #16
 8007438:	d152      	bne.n	80074e0 <takeWifiPass+0x198>
            	if(page == 1) {
 800743a:	4b5e      	ldr	r3, [pc, #376]	; (80075b4 <takeWifiPass+0x26c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d10c      	bne.n	800745c <takeWifiPass+0x114>
            		cursorPosition = 1;
 8007442:	4b5b      	ldr	r3, [pc, #364]	; (80075b0 <takeWifiPass+0x268>)
 8007444:	2201      	movs	r2, #1
 8007446:	601a      	str	r2, [r3, #0]
            		page++;
 8007448:	4b5a      	ldr	r3, [pc, #360]	; (80075b4 <takeWifiPass+0x26c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3301      	adds	r3, #1
 800744e:	4a59      	ldr	r2, [pc, #356]	; (80075b4 <takeWifiPass+0x26c>)
 8007450:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8007452:	2102      	movs	r1, #2
 8007454:	2003      	movs	r0, #3
 8007456:	f7f9 fd45 	bl	8000ee4 <printTemplate>
 800745a:	e046      	b.n	80074ea <takeWifiPass+0x1a2>
            	} else if(page == 2) {
 800745c:	4b55      	ldr	r3, [pc, #340]	; (80075b4 <takeWifiPass+0x26c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d10c      	bne.n	800747e <takeWifiPass+0x136>
            		cursorPosition = 1;
 8007464:	4b52      	ldr	r3, [pc, #328]	; (80075b0 <takeWifiPass+0x268>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
            		page++;
 800746a:	4b52      	ldr	r3, [pc, #328]	; (80075b4 <takeWifiPass+0x26c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3301      	adds	r3, #1
 8007470:	4a50      	ldr	r2, [pc, #320]	; (80075b4 <takeWifiPass+0x26c>)
 8007472:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8007474:	2103      	movs	r1, #3
 8007476:	2003      	movs	r0, #3
 8007478:	f7f9 fd34 	bl	8000ee4 <printTemplate>
 800747c:	e035      	b.n	80074ea <takeWifiPass+0x1a2>
            	} else if(page == 3) {
 800747e:	4b4d      	ldr	r3, [pc, #308]	; (80075b4 <takeWifiPass+0x26c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b03      	cmp	r3, #3
 8007484:	d10c      	bne.n	80074a0 <takeWifiPass+0x158>
            		cursorPosition = 1;
 8007486:	4b4a      	ldr	r3, [pc, #296]	; (80075b0 <takeWifiPass+0x268>)
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]
            		page++;
 800748c:	4b49      	ldr	r3, [pc, #292]	; (80075b4 <takeWifiPass+0x26c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	4a48      	ldr	r2, [pc, #288]	; (80075b4 <takeWifiPass+0x26c>)
 8007494:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8007496:	2104      	movs	r1, #4
 8007498:	2003      	movs	r0, #3
 800749a:	f7f9 fd23 	bl	8000ee4 <printTemplate>
 800749e:	e024      	b.n	80074ea <takeWifiPass+0x1a2>
            	} else if(page == 4) {
 80074a0:	4b44      	ldr	r3, [pc, #272]	; (80075b4 <takeWifiPass+0x26c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d10c      	bne.n	80074c2 <takeWifiPass+0x17a>
            		cursorPosition = 1;
 80074a8:	4b41      	ldr	r3, [pc, #260]	; (80075b0 <takeWifiPass+0x268>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
            		page++;
 80074ae:	4b41      	ldr	r3, [pc, #260]	; (80075b4 <takeWifiPass+0x26c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	4a3f      	ldr	r2, [pc, #252]	; (80075b4 <takeWifiPass+0x26c>)
 80074b6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80074b8:	2105      	movs	r1, #5
 80074ba:	2003      	movs	r0, #3
 80074bc:	f7f9 fd12 	bl	8000ee4 <printTemplate>
 80074c0:	e013      	b.n	80074ea <takeWifiPass+0x1a2>
            	} else if(page == 5) {
 80074c2:	4b3c      	ldr	r3, [pc, #240]	; (80075b4 <takeWifiPass+0x26c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	d10f      	bne.n	80074ea <takeWifiPass+0x1a2>
            		cursorPosition = 1;
 80074ca:	4b39      	ldr	r3, [pc, #228]	; (80075b0 <takeWifiPass+0x268>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
            		page = 1;
 80074d0:	4b38      	ldr	r3, [pc, #224]	; (80075b4 <takeWifiPass+0x26c>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80074d6:	2101      	movs	r1, #1
 80074d8:	2003      	movs	r0, #3
 80074da:	f7f9 fd03 	bl	8000ee4 <printTemplate>
 80074de:	e004      	b.n	80074ea <takeWifiPass+0x1a2>
            	}
            } else {
            	cursorPosition++;
 80074e0:	4b33      	ldr	r3, [pc, #204]	; (80075b0 <takeWifiPass+0x268>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a32      	ldr	r2, [pc, #200]	; (80075b0 <takeWifiPass+0x268>)
 80074e8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80074ea:	20fa      	movs	r0, #250	; 0xfa
 80074ec:	f001 f990 	bl	8008810 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80074f0:	2108      	movs	r1, #8
 80074f2:	483b      	ldr	r0, [pc, #236]	; (80075e0 <takeWifiPass+0x298>)
 80074f4:	f001 ff5c 	bl	80093b0 <HAL_GPIO_ReadPin>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d17a      	bne.n	80075f4 <takeWifiPass+0x2ac>
        	realCharPos--;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	3b01      	subs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	dc01      	bgt.n	800750e <takeWifiPass+0x1c6>
        	    realCharPos = 80;
 800750a:	2350      	movs	r3, #80	; 0x50
 800750c:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800750e:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <takeWifiPass+0x268>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d166      	bne.n	80075e4 <takeWifiPass+0x29c>
            	if(page == 1) {
 8007516:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <takeWifiPass+0x26c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d10a      	bne.n	8007534 <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 800751e:	4b24      	ldr	r3, [pc, #144]	; (80075b0 <takeWifiPass+0x268>)
 8007520:	2210      	movs	r2, #16
 8007522:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007524:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <takeWifiPass+0x26c>)
 8007526:	2205      	movs	r2, #5
 8007528:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800752a:	2105      	movs	r1, #5
 800752c:	2003      	movs	r0, #3
 800752e:	f7f9 fcd9 	bl	8000ee4 <printTemplate>
 8007532:	e05c      	b.n	80075ee <takeWifiPass+0x2a6>
            	} else if(page == 2) {
 8007534:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <takeWifiPass+0x26c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d10a      	bne.n	8007552 <takeWifiPass+0x20a>
            		cursorPosition = 16;
 800753c:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <takeWifiPass+0x268>)
 800753e:	2210      	movs	r2, #16
 8007540:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <takeWifiPass+0x26c>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007548:	2101      	movs	r1, #1
 800754a:	2003      	movs	r0, #3
 800754c:	f7f9 fcca 	bl	8000ee4 <printTemplate>
 8007550:	e04d      	b.n	80075ee <takeWifiPass+0x2a6>
            	} else if(page == 3) {
 8007552:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <takeWifiPass+0x26c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d10a      	bne.n	8007570 <takeWifiPass+0x228>
            		cursorPosition = 16;
 800755a:	4b15      	ldr	r3, [pc, #84]	; (80075b0 <takeWifiPass+0x268>)
 800755c:	2210      	movs	r2, #16
 800755e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8007560:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <takeWifiPass+0x26c>)
 8007562:	2202      	movs	r2, #2
 8007564:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8007566:	2102      	movs	r1, #2
 8007568:	2003      	movs	r0, #3
 800756a:	f7f9 fcbb 	bl	8000ee4 <printTemplate>
 800756e:	e03e      	b.n	80075ee <takeWifiPass+0x2a6>
            	} else if(page == 4) {
 8007570:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <takeWifiPass+0x26c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d10a      	bne.n	800758e <takeWifiPass+0x246>
            		cursorPosition = 16;
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <takeWifiPass+0x268>)
 800757a:	2210      	movs	r2, #16
 800757c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <takeWifiPass+0x26c>)
 8007580:	2203      	movs	r2, #3
 8007582:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8007584:	2103      	movs	r1, #3
 8007586:	2003      	movs	r0, #3
 8007588:	f7f9 fcac 	bl	8000ee4 <printTemplate>
 800758c:	e02f      	b.n	80075ee <takeWifiPass+0x2a6>
            	} else if(page == 5) {
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <takeWifiPass+0x26c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b05      	cmp	r3, #5
 8007594:	d12b      	bne.n	80075ee <takeWifiPass+0x2a6>
            		cursorPosition = 16;
 8007596:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <takeWifiPass+0x268>)
 8007598:	2210      	movs	r2, #16
 800759a:	601a      	str	r2, [r3, #0]
            		page = 4;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <takeWifiPass+0x26c>)
 800759e:	2204      	movs	r2, #4
 80075a0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80075a2:	2104      	movs	r1, #4
 80075a4:	2003      	movs	r0, #3
 80075a6:	f7f9 fc9d 	bl	8000ee4 <printTemplate>
 80075aa:	e020      	b.n	80075ee <takeWifiPass+0x2a6>
 80075ac:	200001c0 	.word	0x200001c0
 80075b0:	20000000 	.word	0x20000000
 80075b4:	20000004 	.word	0x20000004
 80075b8:	40010800 	.word	0x40010800
 80075bc:	20000245 	.word	0x20000245
 80075c0:	0800dd10 	.word	0x0800dd10
 80075c4:	0800dd60 	.word	0x0800dd60
 80075c8:	0800dd74 	.word	0x0800dd74
 80075cc:	0800dd4c 	.word	0x0800dd4c
 80075d0:	20000014 	.word	0x20000014
 80075d4:	20000128 	.word	0x20000128
 80075d8:	200001e8 	.word	0x200001e8
 80075dc:	20000250 	.word	0x20000250
 80075e0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80075e4:	4b3e      	ldr	r3, [pc, #248]	; (80076e0 <takeWifiPass+0x398>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	4a3d      	ldr	r2, [pc, #244]	; (80076e0 <takeWifiPass+0x398>)
 80075ec:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80075ee:	20fa      	movs	r0, #250	; 0xfa
 80075f0:	f001 f90e 	bl	8008810 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80075f4:	2102      	movs	r1, #2
 80075f6:	483b      	ldr	r0, [pc, #236]	; (80076e4 <takeWifiPass+0x39c>)
 80075f8:	f001 feda 	bl	80093b0 <HAL_GPIO_ReadPin>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d127      	bne.n	8007652 <takeWifiPass+0x30a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	3b01      	subs	r3, #1
 8007606:	4618      	mov	r0, r3
 8007608:	f7f9 f8d4 	bl	80007b4 <getCharFromCursorPosition>
 800760c:	4603      	mov	r3, r0
 800760e:	4619      	mov	r1, r3
 8007610:	4a35      	ldr	r2, [pc, #212]	; (80076e8 <takeWifiPass+0x3a0>)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4413      	add	r3, r2
 8007616:	460a      	mov	r2, r1
 8007618:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[wifiPassLoc] = realCharPos - 1;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b2d9      	uxtb	r1, r3
 8007622:	4a32      	ldr	r2, [pc, #200]	; (80076ec <takeWifiPass+0x3a4>)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	4413      	add	r3, r2
 8007628:	460a      	mov	r2, r1
 800762a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	b2d9      	uxtb	r1, r3
 8007630:	4a2d      	ldr	r2, [pc, #180]	; (80076e8 <takeWifiPass+0x3a0>)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	2001      	movs	r0, #1
 800763c:	f000 fba7 	bl	8007d8e <lcd_print_char>

            writeLoc++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3301      	adds	r3, #1
 800764a:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800764c:	20fa      	movs	r0, #250	; 0xfa
 800764e:	f001 f8df 	bl	8008810 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007652:	2104      	movs	r1, #4
 8007654:	4823      	ldr	r0, [pc, #140]	; (80076e4 <takeWifiPass+0x39c>)
 8007656:	f001 feab 	bl	80093b0 <HAL_GPIO_ReadPin>
 800765a:	4603      	mov	r3, r0
 800765c:	2b01      	cmp	r3, #1
 800765e:	d133      	bne.n	80076c8 <takeWifiPass+0x380>
            if(strlen(wifiPass) >= 1) {
 8007660:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <takeWifiPass+0x3a0>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02c      	beq.n	80076c2 <takeWifiPass+0x37a>
            	wifiPass[wifiPassLoc] = '\0';
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <takeWifiPass+0x3a0>)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
            	wifiPassLocArr[wifiPassLoc] = '\0';
 8007672:	4a1e      	ldr	r2, [pc, #120]	; (80076ec <takeWifiPass+0x3a4>)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	3306      	adds	r3, #6
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	2001      	movs	r0, #1
 8007688:	f000 fba2 	bl	8007dd0 <lcd_delete_char>
            	HAL_Delay(50);
 800768c:	2032      	movs	r0, #50	; 0x32
 800768e:	f001 f8bf 	bl	8008810 <HAL_Delay>

            	if(writeLoc > 7) {
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b07      	cmp	r3, #7
 8007696:	dd03      	ble.n	80076a0 <takeWifiPass+0x358>
            		writeLoc--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3b01      	subs	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e004      	b.n	80076aa <takeWifiPass+0x362>
            	} else if(writeLoc < 7) {
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	dc01      	bgt.n	80076aa <takeWifiPass+0x362>
            		writeLoc = 7;
 80076a6:	2307      	movs	r3, #7
 80076a8:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	dd03      	ble.n	80076b8 <takeWifiPass+0x370>
            		wifiPassLoc--;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	e004      	b.n	80076c2 <takeWifiPass+0x37a>
            	} else if(wifiPassLoc < 0) {
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da01      	bge.n	80076c2 <takeWifiPass+0x37a>
            		wifiPassLoc = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80076c2:	20fa      	movs	r0, #250	; 0xfa
 80076c4:	f001 f8a4 	bl	8008810 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <takeWifiPass+0x398>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	4619      	mov	r1, r3
 80076d0:	2002      	movs	r0, #2
 80076d2:	f000 fb28 	bl	8007d26 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076d6:	e656      	b.n	8007386 <takeWifiPass+0x3e>
    }
}
 80076d8:	bf00      	nop
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bdb0      	pop	{r4, r5, r7, pc}
 80076e0:	20000000 	.word	0x20000000
 80076e4:	40010800 	.word	0x40010800
 80076e8:	200001c0 	.word	0x200001c0
 80076ec:	200001e8 	.word	0x200001e8

080076f0 <mergeData>:

char* mergeData() {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b09c      	sub	sp, #112	; 0x70
 80076f4:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80076f6:	2300      	movs	r3, #0
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076fe:	2228      	movs	r2, #40	; 0x28
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f004 ffa7 	bl	800c656 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007708:	4b67      	ldr	r3, [pc, #412]	; (80078a8 <mergeData+0x1b8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	713b      	strb	r3, [r7, #4]
 800770e:	4b67      	ldr	r3, [pc, #412]	; (80078ac <mergeData+0x1bc>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	717b      	strb	r3, [r7, #5]
 8007714:	4b66      	ldr	r3, [pc, #408]	; (80078b0 <mergeData+0x1c0>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	71bb      	strb	r3, [r7, #6]
 800771a:	4b66      	ldr	r3, [pc, #408]	; (80078b4 <mergeData+0x1c4>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	71fb      	strb	r3, [r7, #7]
 8007720:	4b65      	ldr	r3, [pc, #404]	; (80078b8 <mergeData+0x1c8>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	723b      	strb	r3, [r7, #8]
 8007726:	4b65      	ldr	r3, [pc, #404]	; (80078bc <mergeData+0x1cc>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	727b      	strb	r3, [r7, #9]
 800772c:	4b64      	ldr	r3, [pc, #400]	; (80078c0 <mergeData+0x1d0>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	72bb      	strb	r3, [r7, #10]
 8007732:	4b64      	ldr	r3, [pc, #400]	; (80078c4 <mergeData+0x1d4>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	72fb      	strb	r3, [r7, #11]
 8007738:	4b63      	ldr	r3, [pc, #396]	; (80078c8 <mergeData+0x1d8>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	733b      	strb	r3, [r7, #12]
 800773e:	4b63      	ldr	r3, [pc, #396]	; (80078cc <mergeData+0x1dc>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	737b      	strb	r3, [r7, #13]
 8007744:	4b62      	ldr	r3, [pc, #392]	; (80078d0 <mergeData+0x1e0>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	73bb      	strb	r3, [r7, #14]
 800774a:	4b62      	ldr	r3, [pc, #392]	; (80078d4 <mergeData+0x1e4>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	4b61      	ldr	r3, [pc, #388]	; (80078d8 <mergeData+0x1e8>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	743b      	strb	r3, [r7, #16]
 8007756:	4b61      	ldr	r3, [pc, #388]	; (80078dc <mergeData+0x1ec>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	747b      	strb	r3, [r7, #17]
 800775c:	4b60      	ldr	r3, [pc, #384]	; (80078e0 <mergeData+0x1f0>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	74bb      	strb	r3, [r7, #18]
 8007762:	4b60      	ldr	r3, [pc, #384]	; (80078e4 <mergeData+0x1f4>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	74fb      	strb	r3, [r7, #19]
 8007768:	4b5f      	ldr	r3, [pc, #380]	; (80078e8 <mergeData+0x1f8>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	753b      	strb	r3, [r7, #20]
 800776e:	4b5f      	ldr	r3, [pc, #380]	; (80078ec <mergeData+0x1fc>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	757b      	strb	r3, [r7, #21]
 8007774:	4b5e      	ldr	r3, [pc, #376]	; (80078f0 <mergeData+0x200>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	75bb      	strb	r3, [r7, #22]
 800777a:	4b5e      	ldr	r3, [pc, #376]	; (80078f4 <mergeData+0x204>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	75fb      	strb	r3, [r7, #23]
 8007780:	4b5d      	ldr	r3, [pc, #372]	; (80078f8 <mergeData+0x208>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	763b      	strb	r3, [r7, #24]
 8007786:	4b5d      	ldr	r3, [pc, #372]	; (80078fc <mergeData+0x20c>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	767b      	strb	r3, [r7, #25]
 800778c:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <mergeData+0x210>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	76bb      	strb	r3, [r7, #26]
 8007792:	4b5c      	ldr	r3, [pc, #368]	; (8007904 <mergeData+0x214>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	76fb      	strb	r3, [r7, #27]
 8007798:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <mergeData+0x218>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	773b      	strb	r3, [r7, #28]
 800779e:	4b5b      	ldr	r3, [pc, #364]	; (800790c <mergeData+0x21c>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	777b      	strb	r3, [r7, #29]
 80077a4:	4b5a      	ldr	r3, [pc, #360]	; (8007910 <mergeData+0x220>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	77bb      	strb	r3, [r7, #30]
 80077aa:	4b5a      	ldr	r3, [pc, #360]	; (8007914 <mergeData+0x224>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	4b59      	ldr	r3, [pc, #356]	; (8007918 <mergeData+0x228>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f887 3020 	strb.w	r3, [r7, #32]
 80077b8:	4b58      	ldr	r3, [pc, #352]	; (800791c <mergeData+0x22c>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80077c0:	4b57      	ldr	r3, [pc, #348]	; (8007920 <mergeData+0x230>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077c8:	4b56      	ldr	r3, [pc, #344]	; (8007924 <mergeData+0x234>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d0:	4b55      	ldr	r3, [pc, #340]	; (8007928 <mergeData+0x238>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80077d8:	4b54      	ldr	r3, [pc, #336]	; (800792c <mergeData+0x23c>)
 80077da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80077de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80077e2:	4b52      	ldr	r3, [pc, #328]	; (800792c <mergeData+0x23c>)
 80077e4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80077e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80077ec:	4b4f      	ldr	r3, [pc, #316]	; (800792c <mergeData+0x23c>)
 80077ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80077f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80077f6:	4b4d      	ldr	r3, [pc, #308]	; (800792c <mergeData+0x23c>)
 80077f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80077fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007800:	4b4a      	ldr	r3, [pc, #296]	; (800792c <mergeData+0x23c>)
 8007802:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007806:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800780a:	4b48      	ldr	r3, [pc, #288]	; (800792c <mergeData+0x23c>)
 800780c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007814:	4b45      	ldr	r3, [pc, #276]	; (800792c <mergeData+0x23c>)
 8007816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800781e:	4b43      	ldr	r3, [pc, #268]	; (800792c <mergeData+0x23c>)
 8007820:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007828:	4b40      	ldr	r3, [pc, #256]	; (800792c <mergeData+0x23c>)
 800782a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800782e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007832:	4b3e      	ldr	r3, [pc, #248]	; (800792c <mergeData+0x23c>)
 8007834:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007838:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800783c:	2306      	movs	r3, #6
 800783e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007842:	2300      	movs	r3, #0
 8007844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007846:	e015      	b.n	8007874 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007848:	1d3a      	adds	r2, r7, #4
 800784a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007856:	4936      	ldr	r1, [pc, #216]	; (8007930 <mergeData+0x240>)
 8007858:	4618      	mov	r0, r3
 800785a:	f004 fe8b 	bl	800c574 <siprintf>
	    strcat(combinedString, temp);
 800785e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007862:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f004 fee5 	bl	800c638 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	3301      	adds	r3, #1
 8007872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007876:	2b2b      	cmp	r3, #43	; 0x2b
 8007878:	d9e6      	bls.n	8007848 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800787a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800787e:	4618      	mov	r0, r3
 8007880:	f7f8 fcd0 	bl	8000224 <strlen>
 8007884:	4603      	mov	r3, r0
 8007886:	3301      	adds	r3, #1
 8007888:	4618      	mov	r0, r3
 800788a:	f004 fdbf 	bl	800c40c <malloc>
 800788e:	4603      	mov	r3, r0
 8007890:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007892:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007896:	4619      	mov	r1, r3
 8007898:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800789a:	f004 ff21 	bl	800c6e0 <strcpy>
	return result;
 800789e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3770      	adds	r7, #112	; 0x70
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000233 	.word	0x20000233
 80078ac:	20000225 	.word	0x20000225
 80078b0:	20000228 	.word	0x20000228
 80078b4:	20000229 	.word	0x20000229
 80078b8:	2000022a 	.word	0x2000022a
 80078bc:	20000231 	.word	0x20000231
 80078c0:	2000022b 	.word	0x2000022b
 80078c4:	2000022c 	.word	0x2000022c
 80078c8:	20000230 	.word	0x20000230
 80078cc:	2000022d 	.word	0x2000022d
 80078d0:	2000023d 	.word	0x2000023d
 80078d4:	2000022e 	.word	0x2000022e
 80078d8:	2000023e 	.word	0x2000023e
 80078dc:	2000022f 	.word	0x2000022f
 80078e0:	2000023f 	.word	0x2000023f
 80078e4:	20000232 	.word	0x20000232
 80078e8:	20000234 	.word	0x20000234
 80078ec:	20000235 	.word	0x20000235
 80078f0:	20000236 	.word	0x20000236
 80078f4:	20000237 	.word	0x20000237
 80078f8:	20000238 	.word	0x20000238
 80078fc:	20000239 	.word	0x20000239
 8007900:	2000023a 	.word	0x2000023a
 8007904:	2000023b 	.word	0x2000023b
 8007908:	2000023c 	.word	0x2000023c
 800790c:	20000240 	.word	0x20000240
 8007910:	20000242 	.word	0x20000242
 8007914:	20000221 	.word	0x20000221
 8007918:	20000222 	.word	0x20000222
 800791c:	20000008 	.word	0x20000008
 8007920:	20000009 	.word	0x20000009
 8007924:	20000223 	.word	0x20000223
 8007928:	20000245 	.word	0x20000245
 800792c:	20000128 	.word	0x20000128
 8007930:	0800dd88 	.word	0x0800dd88

08007934 <convertAndSendData>:

void convertAndSendData() {
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800793a:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <convertAndSendData+0x78>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007942:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <convertAndSendData+0x7c>)
 8007944:	2101      	movs	r1, #1
 8007946:	2001      	movs	r0, #1
 8007948:	f000 fa0c 	bl	8007d64 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800794c:	4a19      	ldr	r2, [pc, #100]	; (80079b4 <convertAndSendData+0x80>)
 800794e:	2101      	movs	r1, #1
 8007950:	2002      	movs	r0, #2
 8007952:	f000 fa07 	bl	8007d64 <lcd_print>
 8007956:	e009      	b.n	800796c <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <convertAndSendData+0x84>)
 800795a:	2101      	movs	r1, #1
 800795c:	2001      	movs	r0, #1
 800795e:	f000 fa01 	bl	8007d64 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007962:	4a16      	ldr	r2, [pc, #88]	; (80079bc <convertAndSendData+0x88>)
 8007964:	2101      	movs	r1, #1
 8007966:	2002      	movs	r0, #2
 8007968:	f000 f9fc 	bl	8007d64 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 800796c:	2300      	movs	r3, #0
 800796e:	607b      	str	r3, [r7, #4]
 8007970:	e00a      	b.n	8007988 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007972:	f7ff febd 	bl	80076f0 <mergeData>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	4911      	ldr	r1, [pc, #68]	; (80079c0 <convertAndSendData+0x8c>)
 800797c:	4811      	ldr	r0, [pc, #68]	; (80079c4 <convertAndSendData+0x90>)
 800797e:	f7f9 f823 	bl	80009c8 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3301      	adds	r3, #1
 8007986:	607b      	str	r3, [r7, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b01      	cmp	r3, #1
 800798c:	ddf1      	ble.n	8007972 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800798e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007992:	f000 ff3d 	bl	8008810 <HAL_Delay>
	lcd_clear();
 8007996:	f000 fa11 	bl	8007dbc <lcd_clear>
	HAL_Delay(500);
 800799a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800799e:	f000 ff37 	bl	8008810 <HAL_Delay>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000245 	.word	0x20000245
 80079b0:	0800dd8c 	.word	0x0800dd8c
 80079b4:	0800dda0 	.word	0x0800dda0
 80079b8:	0800ddb4 	.word	0x0800ddb4
 80079bc:	0800ddc8 	.word	0x0800ddc8
 80079c0:	200001a0 	.word	0x200001a0
 80079c4:	20000448 	.word	0x20000448

080079c8 <iotSetup>:

void iotSetup() {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80079cc:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <iotSetup+0x58>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d014      	beq.n	80079fe <iotSetup+0x36>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <iotSetup+0x5c>)
 80079d6:	7adb      	ldrb	r3, [r3, #11]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <iotSetup+0x1a>
			takeMachineID(0);
 80079dc:	2000      	movs	r0, #0
 80079de:	f7ff f975 	bl	8006ccc <takeMachineID>
		}

		if(wifiSSID[0] != '\0') {
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <iotSetup+0x60>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <iotSetup+0x28>
			takeWifiSSID(0);
 80079ea:	2000      	movs	r0, #0
 80079ec:	f7ff fad8 	bl	8006fa0 <takeWifiSSID>
		}

		if(wifiPass[0] != '\0') {
 80079f0:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <iotSetup+0x64>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <iotSetup+0x36>
			takeWifiPass(0);
 80079f8:	2000      	movs	r0, #0
 80079fa:	f7ff fca5 	bl	8007348 <takeWifiPass>
		}
	}
	HAL_Delay(500);
 80079fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a02:	f000 ff05 	bl	8008810 <HAL_Delay>

	//ESP8266_Init(&huart1, "iPhone", "ipek123456");
	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <iotSetup+0x64>)
 8007a08:	4907      	ldr	r1, [pc, #28]	; (8007a28 <iotSetup+0x60>)
 8007a0a:	4809      	ldr	r0, [pc, #36]	; (8007a30 <iotSetup+0x68>)
 8007a0c:	f7f8 ff32 	bl	8000874 <ESP8266_Init>
	HAL_Delay(500);
 8007a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a14:	f000 fefc 	bl	8008810 <HAL_Delay>
	convertAndSendData();
 8007a18:	f7ff ff8c 	bl	8007934 <convertAndSendData>
}
 8007a1c:	bf00      	nop
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000243 	.word	0x20000243
 8007a24:	200001a0 	.word	0x200001a0
 8007a28:	200001ac 	.word	0x200001ac
 8007a2c:	200001c0 	.word	0x200001c0
 8007a30:	20000448 	.word	0x20000448

08007a34 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	f023 030f 	bic.w	r3, r3, #15
 8007a44:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a4c:	7b7b      	ldrb	r3, [r7, #13]
 8007a4e:	f043 030c 	orr.w	r3, r3, #12
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a56:	7b7b      	ldrb	r3, [r7, #13]
 8007a58:	f043 0308 	orr.w	r3, r3, #8
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a60:	7b3b      	ldrb	r3, [r7, #12]
 8007a62:	f043 030c 	orr.w	r3, r3, #12
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a6a:	7b3b      	ldrb	r3, [r7, #12]
 8007a6c:	f043 0308 	orr.w	r3, r3, #8
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a74:	bf00      	nop
 8007a76:	4825      	ldr	r0, [pc, #148]	; (8007b0c <lcd_send_cmd+0xd8>)
 8007a78:	f002 fac3 	bl	800a002 <HAL_I2C_GetError>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d0f9      	beq.n	8007a76 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a82:	bf00      	nop
 8007a84:	4821      	ldr	r0, [pc, #132]	; (8007b0c <lcd_send_cmd+0xd8>)
 8007a86:	f002 faaf 	bl	8009fe8 <HAL_I2C_GetState>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d1f9      	bne.n	8007a84 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a90:	4b1f      	ldr	r3, [pc, #124]	; (8007b10 <lcd_send_cmd+0xdc>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d116      	bne.n	8007ac6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
 8007a9c:	e00f      	b.n	8007abe <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	443b      	add	r3, r7
 8007aa4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	f022 0208 	bic.w	r2, r2, #8
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	443b      	add	r3, r7
 8007ab4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	3301      	adds	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d9ec      	bls.n	8007a9e <lcd_send_cmd+0x6a>
 8007ac4:	e015      	b.n	8007af2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73bb      	strb	r3, [r7, #14]
 8007aca:	e00f      	b.n	8007aec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	3310      	adds	r3, #16
 8007ad0:	443b      	add	r3, r7
 8007ad2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	3310      	adds	r3, #16
 8007ae0:	443b      	add	r3, r7
 8007ae2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	73bb      	strb	r3, [r7, #14]
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d9ec      	bls.n	8007acc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	2364      	movs	r3, #100	; 0x64
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	2304      	movs	r3, #4
 8007afc:	214e      	movs	r1, #78	; 0x4e
 8007afe:	4803      	ldr	r0, [pc, #12]	; (8007b0c <lcd_send_cmd+0xd8>)
 8007b00:	f001 fe12 	bl	8009728 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	200003ac 	.word	0x200003ac
 8007b10:	20000382 	.word	0x20000382

08007b14 <lcd_send_data>:

void lcd_send_data (char data) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	f023 030f 	bic.w	r3, r3, #15
 8007b24:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b2c:	7b7b      	ldrb	r3, [r7, #13]
 8007b2e:	f043 030d 	orr.w	r3, r3, #13
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b36:	7b7b      	ldrb	r3, [r7, #13]
 8007b38:	f043 0309 	orr.w	r3, r3, #9
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b40:	7b3b      	ldrb	r3, [r7, #12]
 8007b42:	f043 030d 	orr.w	r3, r3, #13
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b4a:	7b3b      	ldrb	r3, [r7, #12]
 8007b4c:	f043 0309 	orr.w	r3, r3, #9
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b54:	bf00      	nop
 8007b56:	4825      	ldr	r0, [pc, #148]	; (8007bec <lcd_send_data+0xd8>)
 8007b58:	f002 fa53 	bl	800a002 <HAL_I2C_GetError>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d0f9      	beq.n	8007b56 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b62:	bf00      	nop
 8007b64:	4821      	ldr	r0, [pc, #132]	; (8007bec <lcd_send_data+0xd8>)
 8007b66:	f002 fa3f 	bl	8009fe8 <HAL_I2C_GetState>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d1f9      	bne.n	8007b64 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b70:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <lcd_send_data+0xdc>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d116      	bne.n	8007ba6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e00f      	b.n	8007b9e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	3310      	adds	r3, #16
 8007b82:	443b      	add	r3, r7
 8007b84:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	f022 0208 	bic.w	r2, r2, #8
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	3310      	adds	r3, #16
 8007b92:	443b      	add	r3, r7
 8007b94:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d9ec      	bls.n	8007b7e <lcd_send_data+0x6a>
 8007ba4:	e015      	b.n	8007bd2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73bb      	strb	r3, [r7, #14]
 8007baa:	e00f      	b.n	8007bcc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	3310      	adds	r3, #16
 8007bb0:	443b      	add	r3, r7
 8007bb2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	f042 0208 	orr.w	r2, r2, #8
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	3310      	adds	r3, #16
 8007bc0:	443b      	add	r3, r7
 8007bc2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	73bb      	strb	r3, [r7, #14]
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d9ec      	bls.n	8007bac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bd2:	f107 0208 	add.w	r2, r7, #8
 8007bd6:	2364      	movs	r3, #100	; 0x64
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2304      	movs	r3, #4
 8007bdc:	214e      	movs	r1, #78	; 0x4e
 8007bde:	4803      	ldr	r0, [pc, #12]	; (8007bec <lcd_send_data+0xd8>)
 8007be0:	f001 fda2 	bl	8009728 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007be4:	bf00      	nop
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	200003ac 	.word	0x200003ac
 8007bf0:	20000382 	.word	0x20000382

08007bf4 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007bfc:	e006      	b.n	8007c0c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff ff84 	bl	8007b14 <lcd_send_data>
	while (*str) {
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1f4      	bne.n	8007bfe <lcd_send_string+0xa>
	}
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	f023 030f 	bic.w	r3, r3, #15
 8007c30:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c38:	7b7b      	ldrb	r3, [r7, #13]
 8007c3a:	f043 030d 	orr.w	r3, r3, #13
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c42:	7b7b      	ldrb	r3, [r7, #13]
 8007c44:	f043 0309 	orr.w	r3, r3, #9
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c4c:	7b3b      	ldrb	r3, [r7, #12]
 8007c4e:	f043 030d 	orr.w	r3, r3, #13
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c56:	7b3b      	ldrb	r3, [r7, #12]
 8007c58:	f043 0309 	orr.w	r3, r3, #9
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c60:	bf00      	nop
 8007c62:	4825      	ldr	r0, [pc, #148]	; (8007cf8 <lcd_send_char+0xd8>)
 8007c64:	f002 f9cd 	bl	800a002 <HAL_I2C_GetError>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d0f9      	beq.n	8007c62 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c6e:	bf00      	nop
 8007c70:	4821      	ldr	r0, [pc, #132]	; (8007cf8 <lcd_send_char+0xd8>)
 8007c72:	f002 f9b9 	bl	8009fe8 <HAL_I2C_GetState>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d1f9      	bne.n	8007c70 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c7c:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <lcd_send_char+0xdc>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d116      	bne.n	8007cb2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]
 8007c88:	e00f      	b.n	8007caa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	3310      	adds	r3, #16
 8007c8e:	443b      	add	r3, r7
 8007c90:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	f022 0208 	bic.w	r2, r2, #8
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	3310      	adds	r3, #16
 8007c9e:	443b      	add	r3, r7
 8007ca0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	73fb      	strb	r3, [r7, #15]
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d9ec      	bls.n	8007c8a <lcd_send_char+0x6a>
 8007cb0:	e015      	b.n	8007cde <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73bb      	strb	r3, [r7, #14]
 8007cb6:	e00f      	b.n	8007cd8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	3310      	adds	r3, #16
 8007cbc:	443b      	add	r3, r7
 8007cbe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	f042 0208 	orr.w	r2, r2, #8
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	3310      	adds	r3, #16
 8007ccc:	443b      	add	r3, r7
 8007cce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	73bb      	strb	r3, [r7, #14]
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d9ec      	bls.n	8007cb8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007cde:	f107 0208 	add.w	r2, r7, #8
 8007ce2:	2364      	movs	r3, #100	; 0x64
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	214e      	movs	r1, #78	; 0x4e
 8007cea:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <lcd_send_char+0xd8>)
 8007cec:	f001 fd1c 	bl	8009728 <HAL_I2C_Master_Transmit>
}
 8007cf0:	bf00      	nop
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200003ac 	.word	0x200003ac
 8007cfc:	20000382 	.word	0x20000382

08007d00 <lcd_init>:

void lcd_init (void) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d04:	2002      	movs	r0, #2
 8007d06:	f7ff fe95 	bl	8007a34 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d0a:	2028      	movs	r0, #40	; 0x28
 8007d0c:	f7ff fe92 	bl	8007a34 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d10:	200c      	movs	r0, #12
 8007d12:	f7ff fe8f 	bl	8007a34 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d16:	2080      	movs	r0, #128	; 0x80
 8007d18:	f7ff fe8c 	bl	8007a34 <lcd_send_cmd>
	lcd_backlight(1);
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f000 f86d 	bl	8007dfc <lcd_backlight>
}
 8007d22:	bf00      	nop
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	460a      	mov	r2, r1
 8007d30:	71fb      	strb	r3, [r7, #7]
 8007d32:	4613      	mov	r3, r2
 8007d34:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d106      	bne.n	8007d4a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d3c:	79bb      	ldrb	r3, [r7, #6]
 8007d3e:	337f      	adds	r3, #127	; 0x7f
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fe76 	bl	8007a34 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d48:	e008      	b.n	8007d5c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d105      	bne.n	8007d5c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d50:	79bb      	ldrb	r3, [r7, #6]
 8007d52:	3b41      	subs	r3, #65	; 0x41
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fe6c 	bl	8007a34 <lcd_send_cmd>
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	603a      	str	r2, [r7, #0]
 8007d6e:	71fb      	strb	r3, [r7, #7]
 8007d70:	460b      	mov	r3, r1
 8007d72:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d74:	79ba      	ldrb	r2, [r7, #6]
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff ffd3 	bl	8007d26 <lcd_gotoxy>
	lcd_send_string(str);
 8007d80:	6838      	ldr	r0, [r7, #0]
 8007d82:	f7ff ff37 	bl	8007bf4 <lcd_send_string>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	4603      	mov	r3, r0
 8007d96:	71fb      	strb	r3, [r7, #7]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	71bb      	strb	r3, [r7, #6]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007da0:	79ba      	ldrb	r2, [r7, #6]
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff ffbd 	bl	8007d26 <lcd_gotoxy>
    lcd_send_char(ch);
 8007dac:	797b      	ldrb	r3, [r7, #5]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff ff36 	bl	8007c20 <lcd_send_char>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <lcd_clear>:

void lcd_clear(void) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f7ff fe37 	bl	8007a34 <lcd_send_cmd>
    HAL_Delay(2);
 8007dc6:	2002      	movs	r0, #2
 8007dc8:	f000 fd22 	bl	8008810 <HAL_Delay>
}
 8007dcc:	bf00      	nop
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	460a      	mov	r2, r1
 8007dda:	71fb      	strb	r3, [r7, #7]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007de0:	79ba      	ldrb	r2, [r7, #6]
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ff9d 	bl	8007d26 <lcd_gotoxy>

    lcd_send_char(' ');
 8007dec:	2020      	movs	r0, #32
 8007dee:	f7ff ff17 	bl	8007c20 <lcd_send_char>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <lcd_backlight+0x20>)
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f7ff fe11 	bl	8007a34 <lcd_send_cmd>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000382 	.word	0x20000382

08007e20 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d106      	bne.n	8007e3c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e2e:	200e      	movs	r0, #14
 8007e30:	f7ff fe00 	bl	8007a34 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e34:	200f      	movs	r0, #15
 8007e36:	f7ff fdfd 	bl	8007a34 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e3a:	e002      	b.n	8007e42 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e3c:	200c      	movs	r0, #12
 8007e3e:	f7ff fdf9 	bl	8007a34 <lcd_send_cmd>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	4a03      	ldr	r2, [pc, #12]	; (8007e68 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e5c:	6013      	str	r3, [r2, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bc80      	pop	{r7}
 8007e66:	4770      	bx	lr
 8007e68:	20000200 	.word	0x20000200

08007e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e70:	f000 fc6c 	bl	800874c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e78:	f000 fcca 	bl	8008810 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e7c:	f000 f89c 	bl	8007fb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e80:	f000 f9be 	bl	8008200 <MX_GPIO_Init>
  MX_CAN_Init();
 8007e84:	f000 f8de 	bl	8008044 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e88:	f000 f910 	bl	80080ac <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e8c:	f000 f93c 	bl	8008108 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e90:	f000 f98c 	bl	80081ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e94:	2201      	movs	r2, #1
 8007e96:	2140      	movs	r1, #64	; 0x40
 8007e98:	483e      	ldr	r0, [pc, #248]	; (8007f94 <main+0x128>)
 8007e9a:	f001 faa0 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	2180      	movs	r1, #128	; 0x80
 8007ea2:	483c      	ldr	r0, [pc, #240]	; (8007f94 <main+0x128>)
 8007ea4:	f001 fa9b 	bl	80093de <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ea8:	200a      	movs	r0, #10
 8007eaa:	f000 fcb1 	bl	8008810 <HAL_Delay>
  lcd_init();
 8007eae:	f7ff ff27 	bl	8007d00 <lcd_init>
  HAL_Delay(10);
 8007eb2:	200a      	movs	r0, #10
 8007eb4:	f000 fcac 	bl	8008810 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007eb8:	4837      	ldr	r0, [pc, #220]	; (8007f98 <main+0x12c>)
 8007eba:	f003 f943 	bl	800b144 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ebe:	bf00      	nop
 8007ec0:	4836      	ldr	r0, [pc, #216]	; (8007f9c <main+0x130>)
 8007ec2:	f002 f89e 	bl	800a002 <HAL_I2C_GetError>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d0f9      	beq.n	8007ec0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ecc:	bf00      	nop
 8007ece:	4833      	ldr	r0, [pc, #204]	; (8007f9c <main+0x130>)
 8007ed0:	f002 f88a 	bl	8009fe8 <HAL_I2C_GetState>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d1f9      	bne.n	8007ece <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007eda:	2200      	movs	r2, #0
 8007edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ee0:	482c      	ldr	r0, [pc, #176]	; (8007f94 <main+0x128>)
 8007ee2:	f001 fa7c 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007eec:	4829      	ldr	r0, [pc, #164]	; (8007f94 <main+0x128>)
 8007eee:	f001 fa76 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2104      	movs	r1, #4
 8007ef6:	4827      	ldr	r0, [pc, #156]	; (8007f94 <main+0x128>)
 8007ef8:	f001 fa71 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2102      	movs	r1, #2
 8007f00:	4824      	ldr	r0, [pc, #144]	; (8007f94 <main+0x128>)
 8007f02:	f001 fa6c 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4822      	ldr	r0, [pc, #136]	; (8007f94 <main+0x128>)
 8007f0c:	f001 fa67 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f10:	2200      	movs	r2, #0
 8007f12:	2120      	movs	r1, #32
 8007f14:	4822      	ldr	r0, [pc, #136]	; (8007fa0 <main+0x134>)
 8007f16:	f001 fa62 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2110      	movs	r1, #16
 8007f1e:	4820      	ldr	r0, [pc, #128]	; (8007fa0 <main+0x134>)
 8007f20:	f001 fa5d 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	481e      	ldr	r0, [pc, #120]	; (8007fa4 <main+0x138>)
 8007f2a:	f001 fa58 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2140      	movs	r1, #64	; 0x40
 8007f32:	481c      	ldr	r0, [pc, #112]	; (8007fa4 <main+0x138>)
 8007f34:	f001 fa53 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2120      	movs	r1, #32
 8007f3c:	4819      	ldr	r0, [pc, #100]	; (8007fa4 <main+0x138>)
 8007f3e:	f001 fa4e 	bl	80093de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2110      	movs	r1, #16
 8007f46:	4817      	ldr	r0, [pc, #92]	; (8007fa4 <main+0x138>)
 8007f48:	f001 fa49 	bl	80093de <HAL_GPIO_WritePin>

  i2cTest();
 8007f4c:	f7f8 ff1c 	bl	8000d88 <i2cTest>
  HAL_Delay(100);
 8007f50:	2064      	movs	r0, #100	; 0x64
 8007f52:	f000 fc5d 	bl	8008810 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <main+0x13c>)
 8007f58:	2101      	movs	r1, #1
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f7ff ff02 	bl	8007d64 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f60:	4a12      	ldr	r2, [pc, #72]	; (8007fac <main+0x140>)
 8007f62:	2101      	movs	r1, #1
 8007f64:	2002      	movs	r0, #2
 8007f66:	f7ff fefd 	bl	8007d64 <lcd_print>
  HAL_Delay(1000);
 8007f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f6e:	f000 fc4f 	bl	8008810 <HAL_Delay>
  lcd_clear();
 8007f72:	f7ff ff23 	bl	8007dbc <lcd_clear>

  eepromKontrol();
 8007f76:	f7f8 f95d 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f7e:	f000 fc47 	bl	8008810 <HAL_Delay>

  backLightTimer = millis;
 8007f82:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <main+0x144>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a0b      	ldr	r2, [pc, #44]	; (8007fb4 <main+0x148>)
 8007f88:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f8a:	f7ff fd1d 	bl	80079c8 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f8e:	f7fe fd05 	bl	800699c <mainLoop>
 8007f92:	e7fc      	b.n	8007f8e <main+0x122>
 8007f94:	40010c00 	.word	0x40010c00
 8007f98:	20000400 	.word	0x20000400
 8007f9c:	200003ac 	.word	0x200003ac
 8007fa0:	40011000 	.word	0x40011000
 8007fa4:	40010800 	.word	0x40010800
 8007fa8:	0800dddc 	.word	0x0800dddc
 8007fac:	0800ddf0 	.word	0x0800ddf0
 8007fb0:	20000200 	.word	0x20000200
 8007fb4:	2000021c 	.word	0x2000021c

08007fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b090      	sub	sp, #64	; 0x40
 8007fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fbe:	f107 0318 	add.w	r3, r7, #24
 8007fc2:	2228      	movs	r2, #40	; 0x28
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f004 fb45 	bl	800c656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fcc:	1d3b      	adds	r3, r7, #4
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
 8007fd4:	609a      	str	r2, [r3, #8]
 8007fd6:	60da      	str	r2, [r3, #12]
 8007fd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fec:	2302      	movs	r3, #2
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007ff6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ffc:	f107 0318 	add.w	r3, r7, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f002 fc3f 	bl	800a884 <HAL_RCC_OscConfig>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800800c:	f000 f9a2 	bl	8008354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008010:	230f      	movs	r3, #15
 8008012:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008014:	2302      	movs	r3, #2
 8008016:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800801c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008022:	2300      	movs	r3, #0
 8008024:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008026:	1d3b      	adds	r3, r7, #4
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f002 feac 	bl	800ad88 <HAL_RCC_ClockConfig>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008036:	f000 f98d 	bl	8008354 <Error_Handler>
  }
}
 800803a:	bf00      	nop
 800803c:	3740      	adds	r7, #64	; 0x40
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008048:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <MX_CAN_Init+0x60>)
 800804a:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <MX_CAN_Init+0x64>)
 800804c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <MX_CAN_Init+0x60>)
 8008050:	2210      	movs	r2, #16
 8008052:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008054:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <MX_CAN_Init+0x60>)
 8008056:	2200      	movs	r2, #0
 8008058:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800805a:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <MX_CAN_Init+0x60>)
 800805c:	2200      	movs	r2, #0
 800805e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008060:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <MX_CAN_Init+0x60>)
 8008062:	2200      	movs	r2, #0
 8008064:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008066:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <MX_CAN_Init+0x60>)
 8008068:	2200      	movs	r2, #0
 800806a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800806c:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <MX_CAN_Init+0x60>)
 800806e:	2200      	movs	r2, #0
 8008070:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <MX_CAN_Init+0x60>)
 8008074:	2200      	movs	r2, #0
 8008076:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <MX_CAN_Init+0x60>)
 800807a:	2200      	movs	r2, #0
 800807c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <MX_CAN_Init+0x60>)
 8008080:	2200      	movs	r2, #0
 8008082:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <MX_CAN_Init+0x60>)
 8008086:	2200      	movs	r2, #0
 8008088:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800808a:	4b06      	ldr	r3, [pc, #24]	; (80080a4 <MX_CAN_Init+0x60>)
 800808c:	2200      	movs	r2, #0
 800808e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008090:	4804      	ldr	r0, [pc, #16]	; (80080a4 <MX_CAN_Init+0x60>)
 8008092:	f000 fbe1 	bl	8008858 <HAL_CAN_Init>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800809c:	f000 f95a 	bl	8008354 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80080a0:	bf00      	nop
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000384 	.word	0x20000384
 80080a8:	40006400 	.word	0x40006400

080080ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080b0:	4b12      	ldr	r3, [pc, #72]	; (80080fc <MX_I2C1_Init+0x50>)
 80080b2:	4a13      	ldr	r2, [pc, #76]	; (8008100 <MX_I2C1_Init+0x54>)
 80080b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <MX_I2C1_Init+0x50>)
 80080b8:	4a12      	ldr	r2, [pc, #72]	; (8008104 <MX_I2C1_Init+0x58>)
 80080ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <MX_I2C1_Init+0x50>)
 80080be:	2200      	movs	r2, #0
 80080c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080c2:	4b0e      	ldr	r3, [pc, #56]	; (80080fc <MX_I2C1_Init+0x50>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <MX_I2C1_Init+0x50>)
 80080ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <MX_I2C1_Init+0x50>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <MX_I2C1_Init+0x50>)
 80080d8:	2200      	movs	r2, #0
 80080da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080dc:	4b07      	ldr	r3, [pc, #28]	; (80080fc <MX_I2C1_Init+0x50>)
 80080de:	2200      	movs	r2, #0
 80080e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080e2:	4b06      	ldr	r3, [pc, #24]	; (80080fc <MX_I2C1_Init+0x50>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080e8:	4804      	ldr	r0, [pc, #16]	; (80080fc <MX_I2C1_Init+0x50>)
 80080ea:	f001 f9a9 	bl	8009440 <HAL_I2C_Init>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080f4:	f000 f92e 	bl	8008354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080f8:	bf00      	nop
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200003ac 	.word	0x200003ac
 8008100:	40005400 	.word	0x40005400
 8008104:	00061a80 	.word	0x00061a80

08008108 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800810e:	f107 0308 	add.w	r3, r7, #8
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	605a      	str	r2, [r3, #4]
 8008118:	609a      	str	r2, [r3, #8]
 800811a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800811c:	463b      	mov	r3, r7
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008124:	4b1f      	ldr	r3, [pc, #124]	; (80081a4 <MX_TIM1_Init+0x9c>)
 8008126:	4a20      	ldr	r2, [pc, #128]	; (80081a8 <MX_TIM1_Init+0xa0>)
 8008128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800812a:	4b1e      	ldr	r3, [pc, #120]	; (80081a4 <MX_TIM1_Init+0x9c>)
 800812c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008132:	4b1c      	ldr	r3, [pc, #112]	; (80081a4 <MX_TIM1_Init+0x9c>)
 8008134:	2200      	movs	r2, #0
 8008136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008138:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <MX_TIM1_Init+0x9c>)
 800813a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800813e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008140:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <MX_TIM1_Init+0x9c>)
 8008142:	2200      	movs	r2, #0
 8008144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008146:	4b17      	ldr	r3, [pc, #92]	; (80081a4 <MX_TIM1_Init+0x9c>)
 8008148:	2200      	movs	r2, #0
 800814a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800814c:	4b15      	ldr	r3, [pc, #84]	; (80081a4 <MX_TIM1_Init+0x9c>)
 800814e:	2200      	movs	r2, #0
 8008150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008152:	4814      	ldr	r0, [pc, #80]	; (80081a4 <MX_TIM1_Init+0x9c>)
 8008154:	f002 ffa6 	bl	800b0a4 <HAL_TIM_Base_Init>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800815e:	f000 f8f9 	bl	8008354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008168:	f107 0308 	add.w	r3, r7, #8
 800816c:	4619      	mov	r1, r3
 800816e:	480d      	ldr	r0, [pc, #52]	; (80081a4 <MX_TIM1_Init+0x9c>)
 8008170:	f003 f950 	bl	800b414 <HAL_TIM_ConfigClockSource>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800817a:	f000 f8eb 	bl	8008354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800817e:	2300      	movs	r3, #0
 8008180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008182:	2300      	movs	r3, #0
 8008184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008186:	463b      	mov	r3, r7
 8008188:	4619      	mov	r1, r3
 800818a:	4806      	ldr	r0, [pc, #24]	; (80081a4 <MX_TIM1_Init+0x9c>)
 800818c:	f003 fb3e 	bl	800b80c <HAL_TIMEx_MasterConfigSynchronization>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008196:	f000 f8dd 	bl	8008354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000400 	.word	0x20000400
 80081a8:	40012c00 	.word	0x40012c00

080081ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081b0:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081b2:	4a12      	ldr	r2, [pc, #72]	; (80081fc <MX_USART1_UART_Init+0x50>)
 80081b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081b6:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081be:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081d0:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081d2:	220c      	movs	r2, #12
 80081d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081d8:	2200      	movs	r2, #0
 80081da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081dc:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081de:	2200      	movs	r2, #0
 80081e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081e2:	4805      	ldr	r0, [pc, #20]	; (80081f8 <MX_USART1_UART_Init+0x4c>)
 80081e4:	f003 fb90 	bl	800b908 <HAL_UART_Init>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081ee:	f000 f8b1 	bl	8008354 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000448 	.word	0x20000448
 80081fc:	40013800 	.word	0x40013800

08008200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008206:	f107 0310 	add.w	r3, r7, #16
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	609a      	str	r2, [r3, #8]
 8008212:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008214:	4b4b      	ldr	r3, [pc, #300]	; (8008344 <MX_GPIO_Init+0x144>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4a4a      	ldr	r2, [pc, #296]	; (8008344 <MX_GPIO_Init+0x144>)
 800821a:	f043 0310 	orr.w	r3, r3, #16
 800821e:	6193      	str	r3, [r2, #24]
 8008220:	4b48      	ldr	r3, [pc, #288]	; (8008344 <MX_GPIO_Init+0x144>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800822c:	4b45      	ldr	r3, [pc, #276]	; (8008344 <MX_GPIO_Init+0x144>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	4a44      	ldr	r2, [pc, #272]	; (8008344 <MX_GPIO_Init+0x144>)
 8008232:	f043 0320 	orr.w	r3, r3, #32
 8008236:	6193      	str	r3, [r2, #24]
 8008238:	4b42      	ldr	r3, [pc, #264]	; (8008344 <MX_GPIO_Init+0x144>)
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	60bb      	str	r3, [r7, #8]
 8008242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008244:	4b3f      	ldr	r3, [pc, #252]	; (8008344 <MX_GPIO_Init+0x144>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	4a3e      	ldr	r2, [pc, #248]	; (8008344 <MX_GPIO_Init+0x144>)
 800824a:	f043 0304 	orr.w	r3, r3, #4
 800824e:	6193      	str	r3, [r2, #24]
 8008250:	4b3c      	ldr	r3, [pc, #240]	; (8008344 <MX_GPIO_Init+0x144>)
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	607b      	str	r3, [r7, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800825c:	4b39      	ldr	r3, [pc, #228]	; (8008344 <MX_GPIO_Init+0x144>)
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	4a38      	ldr	r2, [pc, #224]	; (8008344 <MX_GPIO_Init+0x144>)
 8008262:	f043 0308 	orr.w	r3, r3, #8
 8008266:	6193      	str	r3, [r2, #24]
 8008268:	4b36      	ldr	r3, [pc, #216]	; (8008344 <MX_GPIO_Init+0x144>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008274:	2200      	movs	r2, #0
 8008276:	21f0      	movs	r1, #240	; 0xf0
 8008278:	4833      	ldr	r0, [pc, #204]	; (8008348 <MX_GPIO_Init+0x148>)
 800827a:	f001 f8b0 	bl	80093de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800827e:	2200      	movs	r2, #0
 8008280:	f241 0130 	movw	r1, #4144	; 0x1030
 8008284:	4831      	ldr	r0, [pc, #196]	; (800834c <MX_GPIO_Init+0x14c>)
 8008286:	f001 f8aa 	bl	80093de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800828a:	2200      	movs	r2, #0
 800828c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008290:	482f      	ldr	r0, [pc, #188]	; (8008350 <MX_GPIO_Init+0x150>)
 8008292:	f001 f8a4 	bl	80093de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008296:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800829a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a4:	f107 0310 	add.w	r3, r7, #16
 80082a8:	4619      	mov	r1, r3
 80082aa:	4828      	ldr	r0, [pc, #160]	; (800834c <MX_GPIO_Init+0x14c>)
 80082ac:	f000 fe20 	bl	8008ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80082b0:	f248 130f 	movw	r3, #33039	; 0x810f
 80082b4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082be:	f107 0310 	add.w	r3, r7, #16
 80082c2:	4619      	mov	r1, r3
 80082c4:	4820      	ldr	r0, [pc, #128]	; (8008348 <MX_GPIO_Init+0x148>)
 80082c6:	f000 fe13 	bl	8008ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082ca:	23f0      	movs	r3, #240	; 0xf0
 80082cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ce:	2301      	movs	r3, #1
 80082d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082d6:	2302      	movs	r3, #2
 80082d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	4619      	mov	r1, r3
 80082e0:	4819      	ldr	r0, [pc, #100]	; (8008348 <MX_GPIO_Init+0x148>)
 80082e2:	f000 fe05 	bl	8008ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082e6:	f241 0330 	movw	r3, #4144	; 0x1030
 80082ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f4:	2302      	movs	r3, #2
 80082f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	4619      	mov	r1, r3
 80082fe:	4813      	ldr	r0, [pc, #76]	; (800834c <MX_GPIO_Init+0x14c>)
 8008300:	f000 fdf6 	bl	8008ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008304:	f640 4307 	movw	r3, #3079	; 0xc07
 8008308:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800830a:	2301      	movs	r3, #1
 800830c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008312:	2302      	movs	r3, #2
 8008314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008316:	f107 0310 	add.w	r3, r7, #16
 800831a:	4619      	mov	r1, r3
 800831c:	480c      	ldr	r0, [pc, #48]	; (8008350 <MX_GPIO_Init+0x150>)
 800831e:	f000 fde7 	bl	8008ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008322:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	4619      	mov	r1, r3
 8008336:	4806      	ldr	r0, [pc, #24]	; (8008350 <MX_GPIO_Init+0x150>)
 8008338:	f000 fdda 	bl	8008ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800833c:	bf00      	nop
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40021000 	.word	0x40021000
 8008348:	40010800 	.word	0x40010800
 800834c:	40011000 	.word	0x40011000
 8008350:	40010c00 	.word	0x40010c00

08008354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008358:	bf00      	nop
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008366:	4b15      	ldr	r3, [pc, #84]	; (80083bc <HAL_MspInit+0x5c>)
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	4a14      	ldr	r2, [pc, #80]	; (80083bc <HAL_MspInit+0x5c>)
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	6193      	str	r3, [r2, #24]
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <HAL_MspInit+0x5c>)
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800837e:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <HAL_MspInit+0x5c>)
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	4a0e      	ldr	r2, [pc, #56]	; (80083bc <HAL_MspInit+0x5c>)
 8008384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008388:	61d3      	str	r3, [r2, #28]
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_MspInit+0x5c>)
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <HAL_MspInit+0x60>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	4a04      	ldr	r2, [pc, #16]	; (80083c0 <HAL_MspInit+0x60>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083b2:	bf00      	nop
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40010000 	.word	0x40010000

080083c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083cc:	f107 0310 	add.w	r3, r7, #16
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a1c      	ldr	r2, [pc, #112]	; (8008450 <HAL_CAN_MspInit+0x8c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d131      	bne.n	8008448 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <HAL_CAN_MspInit+0x90>)
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	4a1a      	ldr	r2, [pc, #104]	; (8008454 <HAL_CAN_MspInit+0x90>)
 80083ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ee:	61d3      	str	r3, [r2, #28]
 80083f0:	4b18      	ldr	r3, [pc, #96]	; (8008454 <HAL_CAN_MspInit+0x90>)
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083fc:	4b15      	ldr	r3, [pc, #84]	; (8008454 <HAL_CAN_MspInit+0x90>)
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	4a14      	ldr	r2, [pc, #80]	; (8008454 <HAL_CAN_MspInit+0x90>)
 8008402:	f043 0304 	orr.w	r3, r3, #4
 8008406:	6193      	str	r3, [r2, #24]
 8008408:	4b12      	ldr	r3, [pc, #72]	; (8008454 <HAL_CAN_MspInit+0x90>)
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841e:	2300      	movs	r3, #0
 8008420:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008422:	f107 0310 	add.w	r3, r7, #16
 8008426:	4619      	mov	r1, r3
 8008428:	480b      	ldr	r0, [pc, #44]	; (8008458 <HAL_CAN_MspInit+0x94>)
 800842a:	f000 fd61 	bl	8008ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800842e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008434:	2302      	movs	r3, #2
 8008436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008438:	2303      	movs	r3, #3
 800843a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800843c:	f107 0310 	add.w	r3, r7, #16
 8008440:	4619      	mov	r1, r3
 8008442:	4805      	ldr	r0, [pc, #20]	; (8008458 <HAL_CAN_MspInit+0x94>)
 8008444:	f000 fd54 	bl	8008ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008448:	bf00      	nop
 800844a:	3720      	adds	r7, #32
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40006400 	.word	0x40006400
 8008454:	40021000 	.word	0x40021000
 8008458:	40010800 	.word	0x40010800

0800845c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	609a      	str	r2, [r3, #8]
 8008470:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a15      	ldr	r2, [pc, #84]	; (80084cc <HAL_I2C_MspInit+0x70>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d123      	bne.n	80084c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_I2C_MspInit+0x74>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <HAL_I2C_MspInit+0x74>)
 8008482:	f043 0308 	orr.w	r3, r3, #8
 8008486:	6193      	str	r3, [r2, #24]
 8008488:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <HAL_I2C_MspInit+0x74>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008494:	23c0      	movs	r3, #192	; 0xc0
 8008496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008498:	2312      	movs	r3, #18
 800849a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800849c:	2303      	movs	r3, #3
 800849e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	4619      	mov	r1, r3
 80084a6:	480b      	ldr	r0, [pc, #44]	; (80084d4 <HAL_I2C_MspInit+0x78>)
 80084a8:	f000 fd22 	bl	8008ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <HAL_I2C_MspInit+0x74>)
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	4a07      	ldr	r2, [pc, #28]	; (80084d0 <HAL_I2C_MspInit+0x74>)
 80084b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084b6:	61d3      	str	r3, [r2, #28]
 80084b8:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <HAL_I2C_MspInit+0x74>)
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084c4:	bf00      	nop
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40005400 	.word	0x40005400
 80084d0:	40021000 	.word	0x40021000
 80084d4:	40010c00 	.word	0x40010c00

080084d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <HAL_I2C_MspDeInit+0x38>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d10d      	bne.n	8008506 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <HAL_I2C_MspDeInit+0x3c>)
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	4a09      	ldr	r2, [pc, #36]	; (8008514 <HAL_I2C_MspDeInit+0x3c>)
 80084f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084f4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084f6:	2140      	movs	r1, #64	; 0x40
 80084f8:	4807      	ldr	r0, [pc, #28]	; (8008518 <HAL_I2C_MspDeInit+0x40>)
 80084fa:	f000 fe8d 	bl	8009218 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084fe:	2180      	movs	r1, #128	; 0x80
 8008500:	4805      	ldr	r0, [pc, #20]	; (8008518 <HAL_I2C_MspDeInit+0x40>)
 8008502:	f000 fe89 	bl	8009218 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40005400 	.word	0x40005400
 8008514:	40021000 	.word	0x40021000
 8008518:	40010c00 	.word	0x40010c00

0800851c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <HAL_TIM_Base_MspInit+0x44>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d113      	bne.n	8008556 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800852e:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <HAL_TIM_Base_MspInit+0x48>)
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	4a0c      	ldr	r2, [pc, #48]	; (8008564 <HAL_TIM_Base_MspInit+0x48>)
 8008534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008538:	6193      	str	r3, [r2, #24]
 800853a:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <HAL_TIM_Base_MspInit+0x48>)
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	2019      	movs	r0, #25
 800854c:	f000 fb57 	bl	8008bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008550:	2019      	movs	r0, #25
 8008552:	f000 fb70 	bl	8008c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	40012c00 	.word	0x40012c00
 8008564:	40021000 	.word	0x40021000

08008568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008570:	f107 0310 	add.w	r3, r7, #16
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	609a      	str	r2, [r3, #8]
 800857c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a20      	ldr	r2, [pc, #128]	; (8008604 <HAL_UART_MspInit+0x9c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d139      	bne.n	80085fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008588:	4b1f      	ldr	r3, [pc, #124]	; (8008608 <HAL_UART_MspInit+0xa0>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <HAL_UART_MspInit+0xa0>)
 800858e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008592:	6193      	str	r3, [r2, #24]
 8008594:	4b1c      	ldr	r3, [pc, #112]	; (8008608 <HAL_UART_MspInit+0xa0>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085a0:	4b19      	ldr	r3, [pc, #100]	; (8008608 <HAL_UART_MspInit+0xa0>)
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	4a18      	ldr	r2, [pc, #96]	; (8008608 <HAL_UART_MspInit+0xa0>)
 80085a6:	f043 0304 	orr.w	r3, r3, #4
 80085aa:	6193      	str	r3, [r2, #24]
 80085ac:	4b16      	ldr	r3, [pc, #88]	; (8008608 <HAL_UART_MspInit+0xa0>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085be:	2302      	movs	r3, #2
 80085c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085c2:	2303      	movs	r3, #3
 80085c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085c6:	f107 0310 	add.w	r3, r7, #16
 80085ca:	4619      	mov	r1, r3
 80085cc:	480f      	ldr	r0, [pc, #60]	; (800860c <HAL_UART_MspInit+0xa4>)
 80085ce:	f000 fc8f 	bl	8008ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e0:	f107 0310 	add.w	r3, r7, #16
 80085e4:	4619      	mov	r1, r3
 80085e6:	4809      	ldr	r0, [pc, #36]	; (800860c <HAL_UART_MspInit+0xa4>)
 80085e8:	f000 fc82 	bl	8008ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085ec:	2200      	movs	r2, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	2025      	movs	r0, #37	; 0x25
 80085f2:	f000 fb04 	bl	8008bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085f6:	2025      	movs	r0, #37	; 0x25
 80085f8:	f000 fb1d 	bl	8008c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085fc:	bf00      	nop
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40013800 	.word	0x40013800
 8008608:	40021000 	.word	0x40021000
 800860c:	40010800 	.word	0x40010800

08008610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008614:	e7fe      	b.n	8008614 <NMI_Handler+0x4>

08008616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008616:	b480      	push	{r7}
 8008618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800861a:	e7fe      	b.n	800861a <HardFault_Handler+0x4>

0800861c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008620:	e7fe      	b.n	8008620 <MemManage_Handler+0x4>

08008622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008626:	e7fe      	b.n	8008626 <BusFault_Handler+0x4>

08008628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800862c:	e7fe      	b.n	800862c <UsageFault_Handler+0x4>

0800862e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008632:	bf00      	nop
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr

0800863a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800863a:	b480      	push	{r7}
 800863c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008646:	b480      	push	{r7}
 8008648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800864a:	bf00      	nop
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008656:	f000 f8bf 	bl	80087d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800865a:	bf00      	nop
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008664:	4802      	ldr	r0, [pc, #8]	; (8008670 <TIM1_UP_IRQHandler+0x10>)
 8008666:	f002 fdcd 	bl	800b204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000400 	.word	0x20000400

08008674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008678:	4802      	ldr	r0, [pc, #8]	; (8008684 <USART1_IRQHandler+0x10>)
 800867a:	f003 f9cb 	bl	800ba14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800867e:	bf00      	nop
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000448 	.word	0x20000448

08008688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008690:	4a14      	ldr	r2, [pc, #80]	; (80086e4 <_sbrk+0x5c>)
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <_sbrk+0x60>)
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800869c:	4b13      	ldr	r3, [pc, #76]	; (80086ec <_sbrk+0x64>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d102      	bne.n	80086aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <_sbrk+0x64>)
 80086a6:	4a12      	ldr	r2, [pc, #72]	; (80086f0 <_sbrk+0x68>)
 80086a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086aa:	4b10      	ldr	r3, [pc, #64]	; (80086ec <_sbrk+0x64>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d207      	bcs.n	80086c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086b8:	f003 ffe6 	bl	800c688 <__errno>
 80086bc:	4603      	mov	r3, r0
 80086be:	220c      	movs	r2, #12
 80086c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086c6:	e009      	b.n	80086dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086c8:	4b08      	ldr	r3, [pc, #32]	; (80086ec <_sbrk+0x64>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <_sbrk+0x64>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4413      	add	r3, r2
 80086d6:	4a05      	ldr	r2, [pc, #20]	; (80086ec <_sbrk+0x64>)
 80086d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086da:	68fb      	ldr	r3, [r7, #12]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	2000c000 	.word	0x2000c000
 80086e8:	00000400 	.word	0x00000400
 80086ec:	20000490 	.word	0x20000490
 80086f0:	200005e0 	.word	0x200005e0

080086f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008700:	480c      	ldr	r0, [pc, #48]	; (8008734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008702:	490d      	ldr	r1, [pc, #52]	; (8008738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008704:	4a0d      	ldr	r2, [pc, #52]	; (800873c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008708:	e002      	b.n	8008710 <LoopCopyDataInit>

0800870a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800870a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800870c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800870e:	3304      	adds	r3, #4

08008710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008714:	d3f9      	bcc.n	800870a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008716:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008718:	4c0a      	ldr	r4, [pc, #40]	; (8008744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800871a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800871c:	e001      	b.n	8008722 <LoopFillZerobss>

0800871e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800871e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008720:	3204      	adds	r2, #4

08008722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008724:	d3fb      	bcc.n	800871e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008726:	f7ff ffe5 	bl	80086f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800872a:	f003 ffb3 	bl	800c694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800872e:	f7ff fb9d 	bl	8007e6c <main>
  bx lr
 8008732:	4770      	bx	lr
  ldr r0, =_sdata
 8008734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008738:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800873c:	0800de90 	.word	0x0800de90
  ldr r2, =_sbss
 8008740:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8008744:	200005e0 	.word	0x200005e0

08008748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008748:	e7fe      	b.n	8008748 <ADC1_2_IRQHandler>
	...

0800874c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008750:	4b08      	ldr	r3, [pc, #32]	; (8008774 <HAL_Init+0x28>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a07      	ldr	r2, [pc, #28]	; (8008774 <HAL_Init+0x28>)
 8008756:	f043 0310 	orr.w	r3, r3, #16
 800875a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800875c:	2003      	movs	r0, #3
 800875e:	f000 fa43 	bl	8008be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008762:	200f      	movs	r0, #15
 8008764:	f000 f808 	bl	8008778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008768:	f7ff fdfa 	bl	8008360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	40022000 	.word	0x40022000

08008778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008780:	4b12      	ldr	r3, [pc, #72]	; (80087cc <HAL_InitTick+0x54>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <HAL_InitTick+0x58>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	4619      	mov	r1, r3
 800878a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800878e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008792:	fbb2 f3f3 	udiv	r3, r2, r3
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fa5b 	bl	8008c52 <HAL_SYSTICK_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e00e      	b.n	80087c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b0f      	cmp	r3, #15
 80087aa:	d80a      	bhi.n	80087c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087ac:	2200      	movs	r2, #0
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b4:	f000 fa23 	bl	8008bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <HAL_InitTick+0x5c>)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	e000      	b.n	80087c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	200000b0 	.word	0x200000b0
 80087d0:	200000b8 	.word	0x200000b8
 80087d4:	200000b4 	.word	0x200000b4

080087d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_IncTick+0x1c>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <HAL_IncTick+0x20>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4413      	add	r3, r2
 80087e8:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <HAL_IncTick+0x20>)
 80087ea:	6013      	str	r3, [r2, #0]
}
 80087ec:	bf00      	nop
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr
 80087f4:	200000b8 	.word	0x200000b8
 80087f8:	20000494 	.word	0x20000494

080087fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return uwTick;
 8008800:	4b02      	ldr	r3, [pc, #8]	; (800880c <HAL_GetTick+0x10>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	20000494 	.word	0x20000494

08008810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008818:	f7ff fff0 	bl	80087fc <HAL_GetTick>
 800881c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008828:	d005      	beq.n	8008836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800882a:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <HAL_Delay+0x44>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008836:	bf00      	nop
 8008838:	f7ff ffe0 	bl	80087fc <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	429a      	cmp	r2, r3
 8008846:	d8f7      	bhi.n	8008838 <HAL_Delay+0x28>
  {
  }
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	200000b8 	.word	0x200000b8

08008858 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0ed      	b.n	8008a46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fda4 	bl	80083c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800888c:	f7ff ffb6 	bl	80087fc <HAL_GetTick>
 8008890:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008892:	e012      	b.n	80088ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008894:	f7ff ffb2 	bl	80087fc <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b0a      	cmp	r3, #10
 80088a0:	d90b      	bls.n	80088ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2205      	movs	r2, #5
 80088b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e0c5      	b.n	8008a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0e5      	beq.n	8008894 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0202 	bic.w	r2, r2, #2
 80088d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088d8:	f7ff ff90 	bl	80087fc <HAL_GetTick>
 80088dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088de:	e012      	b.n	8008906 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088e0:	f7ff ff8c 	bl	80087fc <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b0a      	cmp	r3, #10
 80088ec:	d90b      	bls.n	8008906 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2205      	movs	r2, #5
 80088fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e09f      	b.n	8008a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e5      	bne.n	80088e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7e1b      	ldrb	r3, [r3, #24]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d108      	bne.n	800892e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e007      	b.n	800893e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800893c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	7e5b      	ldrb	r3, [r3, #25]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d108      	bne.n	8008958 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	e007      	b.n	8008968 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008966:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7e9b      	ldrb	r3, [r3, #26]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d108      	bne.n	8008982 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0220 	orr.w	r2, r2, #32
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	e007      	b.n	8008992 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0220 	bic.w	r2, r2, #32
 8008990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	7edb      	ldrb	r3, [r3, #27]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d108      	bne.n	80089ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0210 	bic.w	r2, r2, #16
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e007      	b.n	80089bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0210 	orr.w	r2, r2, #16
 80089ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7f1b      	ldrb	r3, [r3, #28]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d108      	bne.n	80089d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0208 	orr.w	r2, r2, #8
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e007      	b.n	80089e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0208 	bic.w	r2, r2, #8
 80089e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7f5b      	ldrb	r3, [r3, #29]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d108      	bne.n	8008a00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f042 0204 	orr.w	r2, r2, #4
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	e007      	b.n	8008a10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0204 	bic.w	r2, r2, #4
 8008a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689a      	ldr	r2, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	ea42 0103 	orr.w	r1, r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	1e5a      	subs	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <__NVIC_SetPriorityGrouping>:
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a60:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <__NVIC_SetPriorityGrouping+0x44>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a82:	4a04      	ldr	r2, [pc, #16]	; (8008a94 <__NVIC_SetPriorityGrouping+0x44>)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	60d3      	str	r3, [r2, #12]
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	e000ed00 	.word	0xe000ed00

08008a98 <__NVIC_GetPriorityGrouping>:
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a9c:	4b04      	ldr	r3, [pc, #16]	; (8008ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	f003 0307 	and.w	r3, r3, #7
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	e000ed00 	.word	0xe000ed00

08008ab4 <__NVIC_EnableIRQ>:
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	db0b      	blt.n	8008ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	f003 021f 	and.w	r2, r3, #31
 8008acc:	4906      	ldr	r1, [pc, #24]	; (8008ae8 <__NVIC_EnableIRQ+0x34>)
 8008ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad2:	095b      	lsrs	r3, r3, #5
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8008ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr
 8008ae8:	e000e100 	.word	0xe000e100

08008aec <__NVIC_SetPriority>:
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	db0a      	blt.n	8008b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	490c      	ldr	r1, [pc, #48]	; (8008b38 <__NVIC_SetPriority+0x4c>)
 8008b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b0a:	0112      	lsls	r2, r2, #4
 8008b0c:	b2d2      	uxtb	r2, r2
 8008b0e:	440b      	add	r3, r1
 8008b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b14:	e00a      	b.n	8008b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	4908      	ldr	r1, [pc, #32]	; (8008b3c <__NVIC_SetPriority+0x50>)
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	3b04      	subs	r3, #4
 8008b24:	0112      	lsls	r2, r2, #4
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	440b      	add	r3, r1
 8008b2a:	761a      	strb	r2, [r3, #24]
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	e000e100 	.word	0xe000e100
 8008b3c:	e000ed00 	.word	0xe000ed00

08008b40 <NVIC_EncodePriority>:
{
 8008b40:	b480      	push	{r7}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f1c3 0307 	rsb	r3, r3, #7
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	bf28      	it	cs
 8008b5e:	2304      	movcs	r3, #4
 8008b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	3304      	adds	r3, #4
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d902      	bls.n	8008b70 <NVIC_EncodePriority+0x30>
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3b03      	subs	r3, #3
 8008b6e:	e000      	b.n	8008b72 <NVIC_EncodePriority+0x32>
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	43da      	mvns	r2, r3
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	401a      	ands	r2, r3
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b92:	43d9      	mvns	r1, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b98:	4313      	orrs	r3, r2
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3724      	adds	r7, #36	; 0x24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr

08008ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bb4:	d301      	bcc.n	8008bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e00f      	b.n	8008bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008bba:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <SysTick_Config+0x40>)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008bc2:	210f      	movs	r1, #15
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc8:	f7ff ff90 	bl	8008aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <SysTick_Config+0x40>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bd2:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <SysTick_Config+0x40>)
 8008bd4:	2207      	movs	r2, #7
 8008bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	e000e010 	.word	0xe000e010

08008be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff ff2d 	bl	8008a50 <__NVIC_SetPriorityGrouping>
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b086      	sub	sp, #24
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	4603      	mov	r3, r0
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c10:	f7ff ff42 	bl	8008a98 <__NVIC_GetPriorityGrouping>
 8008c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	68b9      	ldr	r1, [r7, #8]
 8008c1a:	6978      	ldr	r0, [r7, #20]
 8008c1c:	f7ff ff90 	bl	8008b40 <NVIC_EncodePriority>
 8008c20:	4602      	mov	r2, r0
 8008c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff ff5f 	bl	8008aec <__NVIC_SetPriority>
}
 8008c2e:	bf00      	nop
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff ff35 	bl	8008ab4 <__NVIC_EnableIRQ>
}
 8008c4a:	bf00      	nop
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff ffa2 	bl	8008ba4 <SysTick_Config>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d008      	beq.n	8008c94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2204      	movs	r2, #4
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e020      	b.n	8008cd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 020e 	bic.w	r2, r2, #14
 8008ca2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0201 	bic.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8008cc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d005      	beq.n	8008d04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
 8008d02:	e0d6      	b.n	8008eb2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 020e 	bic.w	r2, r2, #14
 8008d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0201 	bic.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4b64      	ldr	r3, [pc, #400]	; (8008ebc <HAL_DMA_Abort_IT+0x1dc>)
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d958      	bls.n	8008de2 <HAL_DMA_Abort_IT+0x102>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a62      	ldr	r2, [pc, #392]	; (8008ec0 <HAL_DMA_Abort_IT+0x1e0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d04f      	beq.n	8008dda <HAL_DMA_Abort_IT+0xfa>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a61      	ldr	r2, [pc, #388]	; (8008ec4 <HAL_DMA_Abort_IT+0x1e4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d048      	beq.n	8008dd6 <HAL_DMA_Abort_IT+0xf6>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a5f      	ldr	r2, [pc, #380]	; (8008ec8 <HAL_DMA_Abort_IT+0x1e8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d040      	beq.n	8008dd0 <HAL_DMA_Abort_IT+0xf0>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a5e      	ldr	r2, [pc, #376]	; (8008ecc <HAL_DMA_Abort_IT+0x1ec>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d038      	beq.n	8008dca <HAL_DMA_Abort_IT+0xea>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a5c      	ldr	r2, [pc, #368]	; (8008ed0 <HAL_DMA_Abort_IT+0x1f0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d030      	beq.n	8008dc4 <HAL_DMA_Abort_IT+0xe4>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a5b      	ldr	r2, [pc, #364]	; (8008ed4 <HAL_DMA_Abort_IT+0x1f4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d028      	beq.n	8008dbe <HAL_DMA_Abort_IT+0xde>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a52      	ldr	r2, [pc, #328]	; (8008ebc <HAL_DMA_Abort_IT+0x1dc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d020      	beq.n	8008db8 <HAL_DMA_Abort_IT+0xd8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a57      	ldr	r2, [pc, #348]	; (8008ed8 <HAL_DMA_Abort_IT+0x1f8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d019      	beq.n	8008db4 <HAL_DMA_Abort_IT+0xd4>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a55      	ldr	r2, [pc, #340]	; (8008edc <HAL_DMA_Abort_IT+0x1fc>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d012      	beq.n	8008db0 <HAL_DMA_Abort_IT+0xd0>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a54      	ldr	r2, [pc, #336]	; (8008ee0 <HAL_DMA_Abort_IT+0x200>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00a      	beq.n	8008daa <HAL_DMA_Abort_IT+0xca>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a52      	ldr	r2, [pc, #328]	; (8008ee4 <HAL_DMA_Abort_IT+0x204>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d102      	bne.n	8008da4 <HAL_DMA_Abort_IT+0xc4>
 8008d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da2:	e01b      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008da8:	e018      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dae:	e015      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008db0:	2310      	movs	r3, #16
 8008db2:	e013      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e011      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dbc:	e00e      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008dbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008dc2:	e00b      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dc8:	e008      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dce:	e005      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd4:	e002      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	e000      	b.n	8008ddc <HAL_DMA_Abort_IT+0xfc>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4a42      	ldr	r2, [pc, #264]	; (8008ee8 <HAL_DMA_Abort_IT+0x208>)
 8008dde:	6053      	str	r3, [r2, #4]
 8008de0:	e057      	b.n	8008e92 <HAL_DMA_Abort_IT+0x1b2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a36      	ldr	r2, [pc, #216]	; (8008ec0 <HAL_DMA_Abort_IT+0x1e0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d04f      	beq.n	8008e8c <HAL_DMA_Abort_IT+0x1ac>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a34      	ldr	r2, [pc, #208]	; (8008ec4 <HAL_DMA_Abort_IT+0x1e4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d048      	beq.n	8008e88 <HAL_DMA_Abort_IT+0x1a8>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a33      	ldr	r2, [pc, #204]	; (8008ec8 <HAL_DMA_Abort_IT+0x1e8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d040      	beq.n	8008e82 <HAL_DMA_Abort_IT+0x1a2>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a31      	ldr	r2, [pc, #196]	; (8008ecc <HAL_DMA_Abort_IT+0x1ec>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d038      	beq.n	8008e7c <HAL_DMA_Abort_IT+0x19c>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a30      	ldr	r2, [pc, #192]	; (8008ed0 <HAL_DMA_Abort_IT+0x1f0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d030      	beq.n	8008e76 <HAL_DMA_Abort_IT+0x196>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2e      	ldr	r2, [pc, #184]	; (8008ed4 <HAL_DMA_Abort_IT+0x1f4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d028      	beq.n	8008e70 <HAL_DMA_Abort_IT+0x190>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a26      	ldr	r2, [pc, #152]	; (8008ebc <HAL_DMA_Abort_IT+0x1dc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d020      	beq.n	8008e6a <HAL_DMA_Abort_IT+0x18a>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2a      	ldr	r2, [pc, #168]	; (8008ed8 <HAL_DMA_Abort_IT+0x1f8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d019      	beq.n	8008e66 <HAL_DMA_Abort_IT+0x186>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a29      	ldr	r2, [pc, #164]	; (8008edc <HAL_DMA_Abort_IT+0x1fc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d012      	beq.n	8008e62 <HAL_DMA_Abort_IT+0x182>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a27      	ldr	r2, [pc, #156]	; (8008ee0 <HAL_DMA_Abort_IT+0x200>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00a      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x17c>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a26      	ldr	r2, [pc, #152]	; (8008ee4 <HAL_DMA_Abort_IT+0x204>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d102      	bne.n	8008e56 <HAL_DMA_Abort_IT+0x176>
 8008e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e54:	e01b      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e5a:	e018      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e60:	e015      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e62:	2310      	movs	r3, #16
 8008e64:	e013      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e011      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e6e:	e00e      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e74:	e00b      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e7a:	e008      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e80:	e005      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e86:	e002      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	e000      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1ae>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4a17      	ldr	r2, [pc, #92]	; (8008eec <HAL_DMA_Abort_IT+0x20c>)
 8008e90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
    } 
  }
  return status;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	40020080 	.word	0x40020080
 8008ec0:	40020008 	.word	0x40020008
 8008ec4:	4002001c 	.word	0x4002001c
 8008ec8:	40020030 	.word	0x40020030
 8008ecc:	40020044 	.word	0x40020044
 8008ed0:	40020058 	.word	0x40020058
 8008ed4:	4002006c 	.word	0x4002006c
 8008ed8:	40020408 	.word	0x40020408
 8008edc:	4002041c 	.word	0x4002041c
 8008ee0:	40020430 	.word	0x40020430
 8008ee4:	40020444 	.word	0x40020444
 8008ee8:	40020400 	.word	0x40020400
 8008eec:	40020000 	.word	0x40020000

08008ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b08b      	sub	sp, #44	; 0x2c
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008efa:	2300      	movs	r3, #0
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008efe:	2300      	movs	r3, #0
 8008f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f02:	e179      	b.n	80091f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f04:	2201      	movs	r2, #1
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	4013      	ands	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	f040 8168 	bne.w	80091f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	4a96      	ldr	r2, [pc, #600]	; (8009180 <HAL_GPIO_Init+0x290>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d05e      	beq.n	8008fea <HAL_GPIO_Init+0xfa>
 8008f2c:	4a94      	ldr	r2, [pc, #592]	; (8009180 <HAL_GPIO_Init+0x290>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d875      	bhi.n	800901e <HAL_GPIO_Init+0x12e>
 8008f32:	4a94      	ldr	r2, [pc, #592]	; (8009184 <HAL_GPIO_Init+0x294>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d058      	beq.n	8008fea <HAL_GPIO_Init+0xfa>
 8008f38:	4a92      	ldr	r2, [pc, #584]	; (8009184 <HAL_GPIO_Init+0x294>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d86f      	bhi.n	800901e <HAL_GPIO_Init+0x12e>
 8008f3e:	4a92      	ldr	r2, [pc, #584]	; (8009188 <HAL_GPIO_Init+0x298>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d052      	beq.n	8008fea <HAL_GPIO_Init+0xfa>
 8008f44:	4a90      	ldr	r2, [pc, #576]	; (8009188 <HAL_GPIO_Init+0x298>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d869      	bhi.n	800901e <HAL_GPIO_Init+0x12e>
 8008f4a:	4a90      	ldr	r2, [pc, #576]	; (800918c <HAL_GPIO_Init+0x29c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d04c      	beq.n	8008fea <HAL_GPIO_Init+0xfa>
 8008f50:	4a8e      	ldr	r2, [pc, #568]	; (800918c <HAL_GPIO_Init+0x29c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d863      	bhi.n	800901e <HAL_GPIO_Init+0x12e>
 8008f56:	4a8e      	ldr	r2, [pc, #568]	; (8009190 <HAL_GPIO_Init+0x2a0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d046      	beq.n	8008fea <HAL_GPIO_Init+0xfa>
 8008f5c:	4a8c      	ldr	r2, [pc, #560]	; (8009190 <HAL_GPIO_Init+0x2a0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d85d      	bhi.n	800901e <HAL_GPIO_Init+0x12e>
 8008f62:	2b12      	cmp	r3, #18
 8008f64:	d82a      	bhi.n	8008fbc <HAL_GPIO_Init+0xcc>
 8008f66:	2b12      	cmp	r3, #18
 8008f68:	d859      	bhi.n	800901e <HAL_GPIO_Init+0x12e>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <HAL_GPIO_Init+0x80>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008feb 	.word	0x08008feb
 8008f74:	08008fc5 	.word	0x08008fc5
 8008f78:	08008fd7 	.word	0x08008fd7
 8008f7c:	08009019 	.word	0x08009019
 8008f80:	0800901f 	.word	0x0800901f
 8008f84:	0800901f 	.word	0x0800901f
 8008f88:	0800901f 	.word	0x0800901f
 8008f8c:	0800901f 	.word	0x0800901f
 8008f90:	0800901f 	.word	0x0800901f
 8008f94:	0800901f 	.word	0x0800901f
 8008f98:	0800901f 	.word	0x0800901f
 8008f9c:	0800901f 	.word	0x0800901f
 8008fa0:	0800901f 	.word	0x0800901f
 8008fa4:	0800901f 	.word	0x0800901f
 8008fa8:	0800901f 	.word	0x0800901f
 8008fac:	0800901f 	.word	0x0800901f
 8008fb0:	0800901f 	.word	0x0800901f
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08008fe1 	.word	0x08008fe1
 8008fbc:	4a75      	ldr	r2, [pc, #468]	; (8009194 <HAL_GPIO_Init+0x2a4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d013      	beq.n	8008fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008fc2:	e02c      	b.n	800901e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	623b      	str	r3, [r7, #32]
          break;
 8008fca:	e029      	b.n	8009020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	623b      	str	r3, [r7, #32]
          break;
 8008fd4:	e024      	b.n	8009020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	623b      	str	r3, [r7, #32]
          break;
 8008fde:	e01f      	b.n	8009020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	623b      	str	r3, [r7, #32]
          break;
 8008fe8:	e01a      	b.n	8009020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008ff2:	2304      	movs	r3, #4
 8008ff4:	623b      	str	r3, [r7, #32]
          break;
 8008ff6:	e013      	b.n	8009020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d105      	bne.n	800900c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009000:	2308      	movs	r3, #8
 8009002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	611a      	str	r2, [r3, #16]
          break;
 800900a:	e009      	b.n	8009020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800900c:	2308      	movs	r3, #8
 800900e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	615a      	str	r2, [r3, #20]
          break;
 8009016:	e003      	b.n	8009020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009018:	2300      	movs	r3, #0
 800901a:	623b      	str	r3, [r7, #32]
          break;
 800901c:	e000      	b.n	8009020 <HAL_GPIO_Init+0x130>
          break;
 800901e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2bff      	cmp	r3, #255	; 0xff
 8009024:	d801      	bhi.n	800902a <HAL_GPIO_Init+0x13a>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	e001      	b.n	800902e <HAL_GPIO_Init+0x13e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3304      	adds	r3, #4
 800902e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2bff      	cmp	r3, #255	; 0xff
 8009034:	d802      	bhi.n	800903c <HAL_GPIO_Init+0x14c>
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	e002      	b.n	8009042 <HAL_GPIO_Init+0x152>
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	3b08      	subs	r3, #8
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	210f      	movs	r1, #15
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	fa01 f303 	lsl.w	r3, r1, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	6a39      	ldr	r1, [r7, #32]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	fa01 f303 	lsl.w	r3, r1, r3
 800905c:	431a      	orrs	r2, r3
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80c1 	beq.w	80091f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009070:	4b49      	ldr	r3, [pc, #292]	; (8009198 <HAL_GPIO_Init+0x2a8>)
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	4a48      	ldr	r2, [pc, #288]	; (8009198 <HAL_GPIO_Init+0x2a8>)
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	6193      	str	r3, [r2, #24]
 800907c:	4b46      	ldr	r3, [pc, #280]	; (8009198 <HAL_GPIO_Init+0x2a8>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009088:	4a44      	ldr	r2, [pc, #272]	; (800919c <HAL_GPIO_Init+0x2ac>)
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	089b      	lsrs	r3, r3, #2
 800908e:	3302      	adds	r3, #2
 8009090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	220f      	movs	r2, #15
 80090a0:	fa02 f303 	lsl.w	r3, r2, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	4013      	ands	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a3c      	ldr	r2, [pc, #240]	; (80091a0 <HAL_GPIO_Init+0x2b0>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d01f      	beq.n	80090f4 <HAL_GPIO_Init+0x204>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a3b      	ldr	r2, [pc, #236]	; (80091a4 <HAL_GPIO_Init+0x2b4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d019      	beq.n	80090f0 <HAL_GPIO_Init+0x200>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a3a      	ldr	r2, [pc, #232]	; (80091a8 <HAL_GPIO_Init+0x2b8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d013      	beq.n	80090ec <HAL_GPIO_Init+0x1fc>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a39      	ldr	r2, [pc, #228]	; (80091ac <HAL_GPIO_Init+0x2bc>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00d      	beq.n	80090e8 <HAL_GPIO_Init+0x1f8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a38      	ldr	r2, [pc, #224]	; (80091b0 <HAL_GPIO_Init+0x2c0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d007      	beq.n	80090e4 <HAL_GPIO_Init+0x1f4>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a37      	ldr	r2, [pc, #220]	; (80091b4 <HAL_GPIO_Init+0x2c4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d101      	bne.n	80090e0 <HAL_GPIO_Init+0x1f0>
 80090dc:	2305      	movs	r3, #5
 80090de:	e00a      	b.n	80090f6 <HAL_GPIO_Init+0x206>
 80090e0:	2306      	movs	r3, #6
 80090e2:	e008      	b.n	80090f6 <HAL_GPIO_Init+0x206>
 80090e4:	2304      	movs	r3, #4
 80090e6:	e006      	b.n	80090f6 <HAL_GPIO_Init+0x206>
 80090e8:	2303      	movs	r3, #3
 80090ea:	e004      	b.n	80090f6 <HAL_GPIO_Init+0x206>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e002      	b.n	80090f6 <HAL_GPIO_Init+0x206>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <HAL_GPIO_Init+0x206>
 80090f4:	2300      	movs	r3, #0
 80090f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f8:	f002 0203 	and.w	r2, r2, #3
 80090fc:	0092      	lsls	r2, r2, #2
 80090fe:	4093      	lsls	r3, r2
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009106:	4925      	ldr	r1, [pc, #148]	; (800919c <HAL_GPIO_Init+0x2ac>)
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	089b      	lsrs	r3, r3, #2
 800910c:	3302      	adds	r3, #2
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d006      	beq.n	800912e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009120:	4b25      	ldr	r3, [pc, #148]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	4924      	ldr	r1, [pc, #144]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	4313      	orrs	r3, r2
 800912a:	608b      	str	r3, [r1, #8]
 800912c:	e006      	b.n	800913c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800912e:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	43db      	mvns	r3, r3
 8009136:	4920      	ldr	r1, [pc, #128]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009138:	4013      	ands	r3, r2
 800913a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d006      	beq.n	8009156 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009148:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	491a      	ldr	r1, [pc, #104]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4313      	orrs	r3, r2
 8009152:	60cb      	str	r3, [r1, #12]
 8009154:	e006      	b.n	8009164 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009156:	4b18      	ldr	r3, [pc, #96]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	43db      	mvns	r3, r3
 800915e:	4916      	ldr	r1, [pc, #88]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009160:	4013      	ands	r3, r2
 8009162:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d025      	beq.n	80091bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009170:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	4910      	ldr	r1, [pc, #64]	; (80091b8 <HAL_GPIO_Init+0x2c8>)
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	4313      	orrs	r3, r2
 800917a:	604b      	str	r3, [r1, #4]
 800917c:	e025      	b.n	80091ca <HAL_GPIO_Init+0x2da>
 800917e:	bf00      	nop
 8009180:	10320000 	.word	0x10320000
 8009184:	10310000 	.word	0x10310000
 8009188:	10220000 	.word	0x10220000
 800918c:	10210000 	.word	0x10210000
 8009190:	10120000 	.word	0x10120000
 8009194:	10110000 	.word	0x10110000
 8009198:	40021000 	.word	0x40021000
 800919c:	40010000 	.word	0x40010000
 80091a0:	40010800 	.word	0x40010800
 80091a4:	40010c00 	.word	0x40010c00
 80091a8:	40011000 	.word	0x40011000
 80091ac:	40011400 	.word	0x40011400
 80091b0:	40011800 	.word	0x40011800
 80091b4:	40011c00 	.word	0x40011c00
 80091b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80091bc:	4b15      	ldr	r3, [pc, #84]	; (8009214 <HAL_GPIO_Init+0x324>)
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	43db      	mvns	r3, r3
 80091c4:	4913      	ldr	r1, [pc, #76]	; (8009214 <HAL_GPIO_Init+0x324>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d006      	beq.n	80091e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091d6:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <HAL_GPIO_Init+0x324>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	490e      	ldr	r1, [pc, #56]	; (8009214 <HAL_GPIO_Init+0x324>)
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	4313      	orrs	r3, r2
 80091e0:	600b      	str	r3, [r1, #0]
 80091e2:	e006      	b.n	80091f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091e4:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <HAL_GPIO_Init+0x324>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	43db      	mvns	r3, r3
 80091ec:	4909      	ldr	r1, [pc, #36]	; (8009214 <HAL_GPIO_Init+0x324>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	3301      	adds	r3, #1
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	f47f ae7e 	bne.w	8008f04 <HAL_GPIO_Init+0x14>
  }
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	372c      	adds	r7, #44	; 0x2c
 800920e:	46bd      	mov	sp, r7
 8009210:	bc80      	pop	{r7}
 8009212:	4770      	bx	lr
 8009214:	40010400 	.word	0x40010400

08009218 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009218:	b480      	push	{r7}
 800921a:	b089      	sub	sp, #36	; 0x24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009226:	e0a6      	b.n	8009376 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009228:	2201      	movs	r2, #1
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	4013      	ands	r3, r2
 8009234:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 8099 	beq.w	8009370 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800923e:	4a54      	ldr	r2, [pc, #336]	; (8009390 <HAL_GPIO_DeInit+0x178>)
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	089b      	lsrs	r3, r3, #2
 8009244:	3302      	adds	r3, #2
 8009246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800924a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	220f      	movs	r2, #15
 8009256:	fa02 f303 	lsl.w	r3, r2, r3
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4013      	ands	r3, r2
 800925e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a4c      	ldr	r2, [pc, #304]	; (8009394 <HAL_GPIO_DeInit+0x17c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01f      	beq.n	80092a8 <HAL_GPIO_DeInit+0x90>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a4b      	ldr	r2, [pc, #300]	; (8009398 <HAL_GPIO_DeInit+0x180>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d019      	beq.n	80092a4 <HAL_GPIO_DeInit+0x8c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a4a      	ldr	r2, [pc, #296]	; (800939c <HAL_GPIO_DeInit+0x184>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d013      	beq.n	80092a0 <HAL_GPIO_DeInit+0x88>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a49      	ldr	r2, [pc, #292]	; (80093a0 <HAL_GPIO_DeInit+0x188>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00d      	beq.n	800929c <HAL_GPIO_DeInit+0x84>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a48      	ldr	r2, [pc, #288]	; (80093a4 <HAL_GPIO_DeInit+0x18c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <HAL_GPIO_DeInit+0x80>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a47      	ldr	r2, [pc, #284]	; (80093a8 <HAL_GPIO_DeInit+0x190>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d101      	bne.n	8009294 <HAL_GPIO_DeInit+0x7c>
 8009290:	2305      	movs	r3, #5
 8009292:	e00a      	b.n	80092aa <HAL_GPIO_DeInit+0x92>
 8009294:	2306      	movs	r3, #6
 8009296:	e008      	b.n	80092aa <HAL_GPIO_DeInit+0x92>
 8009298:	2304      	movs	r3, #4
 800929a:	e006      	b.n	80092aa <HAL_GPIO_DeInit+0x92>
 800929c:	2303      	movs	r3, #3
 800929e:	e004      	b.n	80092aa <HAL_GPIO_DeInit+0x92>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e002      	b.n	80092aa <HAL_GPIO_DeInit+0x92>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <HAL_GPIO_DeInit+0x92>
 80092a8:	2300      	movs	r3, #0
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	f002 0203 	and.w	r2, r2, #3
 80092b0:	0092      	lsls	r2, r2, #2
 80092b2:	4093      	lsls	r3, r2
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d132      	bne.n	8009320 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092ba:	4b3c      	ldr	r3, [pc, #240]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	43db      	mvns	r3, r3
 80092c2:	493a      	ldr	r1, [pc, #232]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092c8:	4b38      	ldr	r3, [pc, #224]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	43db      	mvns	r3, r3
 80092d0:	4936      	ldr	r1, [pc, #216]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092d2:	4013      	ands	r3, r2
 80092d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092d6:	4b35      	ldr	r3, [pc, #212]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	43db      	mvns	r3, r3
 80092de:	4933      	ldr	r1, [pc, #204]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092e4:	4b31      	ldr	r3, [pc, #196]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	43db      	mvns	r3, r3
 80092ec:	492f      	ldr	r1, [pc, #188]	; (80093ac <HAL_GPIO_DeInit+0x194>)
 80092ee:	4013      	ands	r3, r2
 80092f0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	220f      	movs	r2, #15
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009302:	4a23      	ldr	r2, [pc, #140]	; (8009390 <HAL_GPIO_DeInit+0x178>)
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	089b      	lsrs	r3, r3, #2
 8009308:	3302      	adds	r3, #2
 800930a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	43da      	mvns	r2, r3
 8009312:	481f      	ldr	r0, [pc, #124]	; (8009390 <HAL_GPIO_DeInit+0x178>)
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	089b      	lsrs	r3, r3, #2
 8009318:	400a      	ands	r2, r1
 800931a:	3302      	adds	r3, #2
 800931c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2bff      	cmp	r3, #255	; 0xff
 8009324:	d801      	bhi.n	800932a <HAL_GPIO_DeInit+0x112>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	e001      	b.n	800932e <HAL_GPIO_DeInit+0x116>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3304      	adds	r3, #4
 800932e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2bff      	cmp	r3, #255	; 0xff
 8009334:	d802      	bhi.n	800933c <HAL_GPIO_DeInit+0x124>
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	e002      	b.n	8009342 <HAL_GPIO_DeInit+0x12a>
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	3b08      	subs	r3, #8
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	210f      	movs	r1, #15
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	fa01 f303 	lsl.w	r3, r1, r3
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	2104      	movs	r1, #4
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	fa01 f303 	lsl.w	r3, r1, r3
 800935c:	431a      	orrs	r2, r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	43db      	mvns	r3, r3
 800936a:	401a      	ands	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	3301      	adds	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	fa22 f303 	lsr.w	r3, r2, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	f47f af52 	bne.w	8009228 <HAL_GPIO_DeInit+0x10>
  }
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	3724      	adds	r7, #36	; 0x24
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr
 8009390:	40010000 	.word	0x40010000
 8009394:	40010800 	.word	0x40010800
 8009398:	40010c00 	.word	0x40010c00
 800939c:	40011000 	.word	0x40011000
 80093a0:	40011400 	.word	0x40011400
 80093a4:	40011800 	.word	0x40011800
 80093a8:	40011c00 	.word	0x40011c00
 80093ac:	40010400 	.word	0x40010400

080093b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	887b      	ldrh	r3, [r7, #2]
 80093c2:	4013      	ands	r3, r2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	e001      	b.n	80093d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	bc80      	pop	{r7}
 80093dc:	4770      	bx	lr

080093de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	807b      	strh	r3, [r7, #2]
 80093ea:	4613      	mov	r3, r2
 80093ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093ee:	787b      	ldrb	r3, [r7, #1]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093f4:	887a      	ldrh	r2, [r7, #2]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093fa:	e003      	b.n	8009404 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093fc:	887b      	ldrh	r3, [r7, #2]
 80093fe:	041a      	lsls	r2, r3, #16
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	611a      	str	r2, [r3, #16]
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr

0800940e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800940e:	b480      	push	{r7}
 8009410:	b085      	sub	sp, #20
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009420:	887a      	ldrh	r2, [r7, #2]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4013      	ands	r3, r2
 8009426:	041a      	lsls	r2, r3, #16
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	43d9      	mvns	r1, r3
 800942c:	887b      	ldrh	r3, [r7, #2]
 800942e:	400b      	ands	r3, r1
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	611a      	str	r2, [r3, #16]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr

08009440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e12b      	b.n	80096aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7fe fff8 	bl	800845c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2224      	movs	r2, #36	; 0x24
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0201 	bic.w	r2, r2, #1
 8009482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094a4:	f001 fdb8 	bl	800b018 <HAL_RCC_GetPCLK1Freq>
 80094a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4a81      	ldr	r2, [pc, #516]	; (80096b4 <HAL_I2C_Init+0x274>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d807      	bhi.n	80094c4 <HAL_I2C_Init+0x84>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4a80      	ldr	r2, [pc, #512]	; (80096b8 <HAL_I2C_Init+0x278>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bf94      	ite	ls
 80094bc:	2301      	movls	r3, #1
 80094be:	2300      	movhi	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	e006      	b.n	80094d2 <HAL_I2C_Init+0x92>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4a7d      	ldr	r2, [pc, #500]	; (80096bc <HAL_I2C_Init+0x27c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	bf94      	ite	ls
 80094cc:	2301      	movls	r3, #1
 80094ce:	2300      	movhi	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e0e7      	b.n	80096aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4a78      	ldr	r2, [pc, #480]	; (80096c0 <HAL_I2C_Init+0x280>)
 80094de:	fba2 2303 	umull	r2, r3, r2, r3
 80094e2:	0c9b      	lsrs	r3, r3, #18
 80094e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4a6a      	ldr	r2, [pc, #424]	; (80096b4 <HAL_I2C_Init+0x274>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d802      	bhi.n	8009514 <HAL_I2C_Init+0xd4>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3301      	adds	r3, #1
 8009512:	e009      	b.n	8009528 <HAL_I2C_Init+0xe8>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	4a69      	ldr	r2, [pc, #420]	; (80096c4 <HAL_I2C_Init+0x284>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	099b      	lsrs	r3, r3, #6
 8009526:	3301      	adds	r3, #1
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6812      	ldr	r2, [r2, #0]
 800952c:	430b      	orrs	r3, r1
 800952e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800953a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	495c      	ldr	r1, [pc, #368]	; (80096b4 <HAL_I2C_Init+0x274>)
 8009544:	428b      	cmp	r3, r1
 8009546:	d819      	bhi.n	800957c <HAL_I2C_Init+0x13c>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	1e59      	subs	r1, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	fbb1 f3f3 	udiv	r3, r1, r3
 8009556:	1c59      	adds	r1, r3, #1
 8009558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800955c:	400b      	ands	r3, r1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <HAL_I2C_Init+0x138>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	1e59      	subs	r1, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009570:	3301      	adds	r3, #1
 8009572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009576:	e051      	b.n	800961c <HAL_I2C_Init+0x1dc>
 8009578:	2304      	movs	r3, #4
 800957a:	e04f      	b.n	800961c <HAL_I2C_Init+0x1dc>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d111      	bne.n	80095a8 <HAL_I2C_Init+0x168>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	1e58      	subs	r0, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6859      	ldr	r1, [r3, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	440b      	add	r3, r1
 8009592:	fbb0 f3f3 	udiv	r3, r0, r3
 8009596:	3301      	adds	r3, #1
 8009598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf0c      	ite	eq
 80095a0:	2301      	moveq	r3, #1
 80095a2:	2300      	movne	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	e012      	b.n	80095ce <HAL_I2C_Init+0x18e>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	1e58      	subs	r0, r3, #1
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6859      	ldr	r1, [r3, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	0099      	lsls	r1, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80095be:	3301      	adds	r3, #1
 80095c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_I2C_Init+0x196>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e022      	b.n	800961c <HAL_I2C_Init+0x1dc>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10e      	bne.n	80095fc <HAL_I2C_Init+0x1bc>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1e58      	subs	r0, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6859      	ldr	r1, [r3, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	440b      	add	r3, r1
 80095ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80095f0:	3301      	adds	r3, #1
 80095f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095fa:	e00f      	b.n	800961c <HAL_I2C_Init+0x1dc>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	1e58      	subs	r0, r3, #1
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6859      	ldr	r1, [r3, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	440b      	add	r3, r1
 800960a:	0099      	lsls	r1, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009612:	3301      	adds	r3, #1
 8009614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	6809      	ldr	r1, [r1, #0]
 8009620:	4313      	orrs	r3, r2
 8009622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69da      	ldr	r2, [r3, #28]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800964a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	6911      	ldr	r1, [r2, #16]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	68d2      	ldr	r2, [r2, #12]
 8009656:	4311      	orrs	r1, r2
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6812      	ldr	r2, [r2, #0]
 800965c:	430b      	orrs	r3, r1
 800965e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695a      	ldr	r2, [r3, #20]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	431a      	orrs	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
 800968a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	000186a0 	.word	0x000186a0
 80096b8:	001e847f 	.word	0x001e847f
 80096bc:	003d08ff 	.word	0x003d08ff
 80096c0:	431bde83 	.word	0x431bde83
 80096c4:	10624dd3 	.word	0x10624dd3

080096c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e021      	b.n	800971e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2224      	movs	r2, #36	; 0x24
 80096de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 0201 	bic.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7fe fef0 	bl	80084d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	461a      	mov	r2, r3
 8009734:	460b      	mov	r3, r1
 8009736:	817b      	strh	r3, [r7, #10]
 8009738:	4613      	mov	r3, r2
 800973a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800973c:	f7ff f85e 	bl	80087fc <HAL_GetTick>
 8009740:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b20      	cmp	r3, #32
 800974c:	f040 80e0 	bne.w	8009910 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	2319      	movs	r3, #25
 8009756:	2201      	movs	r2, #1
 8009758:	4970      	ldr	r1, [pc, #448]	; (800991c <HAL_I2C_Master_Transmit+0x1f4>)
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fe5c 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
 8009768:	e0d3      	b.n	8009912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009770:	2b01      	cmp	r3, #1
 8009772:	d101      	bne.n	8009778 <HAL_I2C_Master_Transmit+0x50>
 8009774:	2302      	movs	r3, #2
 8009776:	e0cc      	b.n	8009912 <HAL_I2C_Master_Transmit+0x1ea>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b01      	cmp	r3, #1
 800978c:	d007      	beq.n	800979e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0201 	orr.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2221      	movs	r2, #33	; 0x21
 80097b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2210      	movs	r2, #16
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	893a      	ldrh	r2, [r7, #8]
 80097ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4a50      	ldr	r2, [pc, #320]	; (8009920 <HAL_I2C_Master_Transmit+0x1f8>)
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097e0:	8979      	ldrh	r1, [r7, #10]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	6a3a      	ldr	r2, [r7, #32]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fc16 	bl	800a018 <I2C_MasterRequestWrite>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e08d      	b.n	8009912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097f6:	2300      	movs	r3, #0
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	613b      	str	r3, [r7, #16]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	613b      	str	r3, [r7, #16]
 800980a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800980c:	e066      	b.n	80098dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	6a39      	ldr	r1, [r7, #32]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 ff1a 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00d      	beq.n	800983a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	2b04      	cmp	r3, #4
 8009824:	d107      	bne.n	8009836 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e06b      	b.n	8009912 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009862:	3b01      	subs	r3, #1
 8009864:	b29a      	uxth	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b04      	cmp	r3, #4
 8009876:	d11b      	bne.n	80098b0 <HAL_I2C_Master_Transmit+0x188>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987c:	2b00      	cmp	r3, #0
 800987e:	d017      	beq.n	80098b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	781a      	ldrb	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	6a39      	ldr	r1, [r7, #32]
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 ff11 	bl	800a6dc <I2C_WaitOnBTFFlagUntilTimeout>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00d      	beq.n	80098dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d107      	bne.n	80098d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e01a      	b.n	8009912 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d194      	bne.n	800980e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e000      	b.n	8009912 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009910:	2302      	movs	r3, #2
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	00100002 	.word	0x00100002
 8009920:	ffff0000 	.word	0xffff0000

08009924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af02      	add	r7, sp, #8
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	461a      	mov	r2, r3
 8009932:	4603      	mov	r3, r0
 8009934:	817b      	strh	r3, [r7, #10]
 8009936:	460b      	mov	r3, r1
 8009938:	813b      	strh	r3, [r7, #8]
 800993a:	4613      	mov	r3, r2
 800993c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800993e:	f7fe ff5d 	bl	80087fc <HAL_GetTick>
 8009942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b20      	cmp	r3, #32
 800994e:	f040 80d9 	bne.w	8009b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	2319      	movs	r3, #25
 8009958:	2201      	movs	r2, #1
 800995a:	496d      	ldr	r1, [pc, #436]	; (8009b10 <HAL_I2C_Mem_Write+0x1ec>)
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fd5b 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009968:	2302      	movs	r3, #2
 800996a:	e0cc      	b.n	8009b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009972:	2b01      	cmp	r3, #1
 8009974:	d101      	bne.n	800997a <HAL_I2C_Mem_Write+0x56>
 8009976:	2302      	movs	r3, #2
 8009978:	e0c5      	b.n	8009b06 <HAL_I2C_Mem_Write+0x1e2>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b01      	cmp	r3, #1
 800998e:	d007      	beq.n	80099a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2221      	movs	r2, #33	; 0x21
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2240      	movs	r2, #64	; 0x40
 80099bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a3a      	ldr	r2, [r7, #32]
 80099ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4a4d      	ldr	r2, [pc, #308]	; (8009b14 <HAL_I2C_Mem_Write+0x1f0>)
 80099e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099e2:	88f8      	ldrh	r0, [r7, #6]
 80099e4:	893a      	ldrh	r2, [r7, #8]
 80099e6:	8979      	ldrh	r1, [r7, #10]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	4603      	mov	r3, r0
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 fb92 	bl	800a11c <I2C_RequestMemoryWrite>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d052      	beq.n	8009aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e081      	b.n	8009b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 fe20 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d107      	bne.n	8009a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e06b      	b.n	8009b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d11b      	bne.n	8009aa4 <HAL_I2C_Mem_Write+0x180>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d017      	beq.n	8009aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1aa      	bne.n	8009a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 fe13 	bl	800a6dc <I2C_WaitOnBTFFlagUntilTimeout>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00d      	beq.n	8009ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d107      	bne.n	8009ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e016      	b.n	8009b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	e000      	b.n	8009b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b04:	2302      	movs	r3, #2
  }
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	00100002 	.word	0x00100002
 8009b14:	ffff0000 	.word	0xffff0000

08009b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08c      	sub	sp, #48	; 0x30
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	461a      	mov	r2, r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	817b      	strh	r3, [r7, #10]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	813b      	strh	r3, [r7, #8]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b36:	f7fe fe61 	bl	80087fc <HAL_GetTick>
 8009b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	f040 8244 	bne.w	8009fd2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	2319      	movs	r3, #25
 8009b50:	2201      	movs	r2, #1
 8009b52:	4982      	ldr	r1, [pc, #520]	; (8009d5c <HAL_I2C_Mem_Read+0x244>)
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 fc5f 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b60:	2302      	movs	r3, #2
 8009b62:	e237      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d101      	bne.n	8009b72 <HAL_I2C_Mem_Read+0x5a>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e230      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d007      	beq.n	8009b98 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2222      	movs	r2, #34	; 0x22
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2240      	movs	r2, #64	; 0x40
 8009bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4a62      	ldr	r2, [pc, #392]	; (8009d60 <HAL_I2C_Mem_Read+0x248>)
 8009bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bda:	88f8      	ldrh	r0, [r7, #6]
 8009bdc:	893a      	ldrh	r2, [r7, #8]
 8009bde:	8979      	ldrh	r1, [r7, #10]
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4603      	mov	r3, r0
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fb2c 	bl	800a248 <I2C_RequestMemoryRead>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e1ec      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d113      	bne.n	8009c2a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	61fb      	str	r3, [r7, #28]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	61fb      	str	r3, [r7, #28]
 8009c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	e1c0      	b.n	8009fac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d11e      	bne.n	8009c70 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c42:	b672      	cpsid	i
}
 8009c44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	61bb      	str	r3, [r7, #24]
 8009c5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c6c:	b662      	cpsie	i
}
 8009c6e:	e035      	b.n	8009cdc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d11e      	bne.n	8009cb6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c88:	b672      	cpsid	i
}
 8009c8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cb2:	b662      	cpsie	i
}
 8009cb4:	e012      	b.n	8009cdc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cc4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	613b      	str	r3, [r7, #16]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009cdc:	e166      	b.n	8009fac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	f200 811f 	bhi.w	8009f26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d123      	bne.n	8009d38 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 fd39 	bl	800a76c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e167      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	b2d2      	uxtb	r2, r2
 8009d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d36:	e139      	b.n	8009fac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d152      	bne.n	8009de6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	2200      	movs	r2, #0
 8009d48:	4906      	ldr	r1, [pc, #24]	; (8009d64 <HAL_I2C_Mem_Read+0x24c>)
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 fb64 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e13c      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
 8009d5a:	bf00      	nop
 8009d5c:	00100002 	.word	0x00100002
 8009d60:	ffff0000 	.word	0xffff0000
 8009d64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d68:	b672      	cpsid	i
}
 8009d6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009dae:	b662      	cpsie	i
}
 8009db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009de4:	e0e2      	b.n	8009fac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dec:	2200      	movs	r2, #0
 8009dee:	497b      	ldr	r1, [pc, #492]	; (8009fdc <HAL_I2C_Mem_Read+0x4c4>)
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fb11 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e0e9      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e10:	b672      	cpsid	i
}
 8009e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	691a      	ldr	r2, [r3, #16]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	b2d2      	uxtb	r2, r2
 8009e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e30:	3b01      	subs	r3, #1
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e46:	4b66      	ldr	r3, [pc, #408]	; (8009fe0 <HAL_I2C_Mem_Read+0x4c8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	4a65      	ldr	r2, [pc, #404]	; (8009fe4 <HAL_I2C_Mem_Read+0x4cc>)
 8009e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e52:	0a1a      	lsrs	r2, r3, #8
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	00da      	lsls	r2, r3, #3
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d118      	bne.n	8009e9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	f043 0220 	orr.w	r2, r3, #32
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e8e:	b662      	cpsie	i
}
 8009e90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e09a      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d1d9      	bne.n	8009e60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691a      	ldr	r2, [r3, #16]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009eee:	b662      	cpsie	i
}
 8009ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	691a      	ldr	r2, [r3, #16]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f24:	e042      	b.n	8009fac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 fc1e 	bl	800a76c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e04c      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	691a      	ldr	r2, [r3, #16]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d118      	bne.n	8009fac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	691a      	ldr	r2, [r3, #16]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f47f ae94 	bne.w	8009cde <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e000      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3728      	adds	r7, #40	; 0x28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	00010004 	.word	0x00010004
 8009fe0:	200000b0 	.word	0x200000b0
 8009fe4:	14f8b589 	.word	0x14f8b589

08009fe8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff6:	b2db      	uxtb	r3, r3
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr

0800a002 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	bc80      	pop	{r7}
 800a016:	4770      	bx	lr

0800a018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	607a      	str	r2, [r7, #4]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	460b      	mov	r3, r1
 800a026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2b08      	cmp	r3, #8
 800a032:	d006      	beq.n	800a042 <I2C_MasterRequestWrite+0x2a>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d003      	beq.n	800a042 <I2C_MasterRequestWrite+0x2a>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a040:	d108      	bne.n	800a054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e00b      	b.n	800a06c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a058:	2b12      	cmp	r3, #18
 800a05a:	d107      	bne.n	800a06c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a06a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f9cd 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00d      	beq.n	800a0a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a092:	d103      	bne.n	800a09c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a09a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e035      	b.n	800a10c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a8:	d108      	bne.n	800a0bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0aa:	897b      	ldrh	r3, [r7, #10]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0b8:	611a      	str	r2, [r3, #16]
 800a0ba:	e01b      	b.n	800a0f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0bc:	897b      	ldrh	r3, [r7, #10]
 800a0be:	11db      	asrs	r3, r3, #7
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	f003 0306 	and.w	r3, r3, #6
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f063 030f 	orn	r3, r3, #15
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	490e      	ldr	r1, [pc, #56]	; (800a114 <I2C_MasterRequestWrite+0xfc>)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 fa16 	bl	800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e010      	b.n	800a10c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0ea:	897b      	ldrh	r3, [r7, #10]
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	4907      	ldr	r1, [pc, #28]	; (800a118 <I2C_MasterRequestWrite+0x100>)
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 fa06 	bl	800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	00010008 	.word	0x00010008
 800a118:	00010002 	.word	0x00010002

0800a11c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	4608      	mov	r0, r1
 800a126:	4611      	mov	r1, r2
 800a128:	461a      	mov	r2, r3
 800a12a:	4603      	mov	r3, r0
 800a12c:	817b      	strh	r3, [r7, #10]
 800a12e:	460b      	mov	r3, r1
 800a130:	813b      	strh	r3, [r7, #8]
 800a132:	4613      	mov	r3, r2
 800a134:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f960 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00d      	beq.n	800a17a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16c:	d103      	bne.n	800a176 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a174:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e05f      	b.n	800a23a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a17a:	897b      	ldrh	r3, [r7, #10]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	461a      	mov	r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	6a3a      	ldr	r2, [r7, #32]
 800a18e:	492d      	ldr	r1, [pc, #180]	; (800a244 <I2C_RequestMemoryWrite+0x128>)
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f9bb 	bl	800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e04c      	b.n	800a23a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b8:	6a39      	ldr	r1, [r7, #32]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fa46 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00d      	beq.n	800a1e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d107      	bne.n	800a1de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e02b      	b.n	800a23a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d105      	bne.n	800a1f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e8:	893b      	ldrh	r3, [r7, #8]
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	611a      	str	r2, [r3, #16]
 800a1f2:	e021      	b.n	800a238 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1f4:	893b      	ldrh	r3, [r7, #8]
 800a1f6:	0a1b      	lsrs	r3, r3, #8
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a204:	6a39      	ldr	r1, [r7, #32]
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 fa20 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00d      	beq.n	800a22e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	2b04      	cmp	r3, #4
 800a218:	d107      	bne.n	800a22a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e005      	b.n	800a23a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a22e:	893b      	ldrh	r3, [r7, #8]
 800a230:	b2da      	uxtb	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	00010002 	.word	0x00010002

0800a248 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	4608      	mov	r0, r1
 800a252:	4611      	mov	r1, r2
 800a254:	461a      	mov	r2, r3
 800a256:	4603      	mov	r3, r0
 800a258:	817b      	strh	r3, [r7, #10]
 800a25a:	460b      	mov	r3, r1
 800a25c:	813b      	strh	r3, [r7, #8]
 800a25e:	4613      	mov	r3, r2
 800a260:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a270:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	2200      	movs	r2, #0
 800a28a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 f8c2 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00d      	beq.n	800a2b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a8:	d103      	bne.n	800a2b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	e0aa      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2b6:	897b      	ldrh	r3, [r7, #10]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	6a3a      	ldr	r2, [r7, #32]
 800a2ca:	4952      	ldr	r1, [pc, #328]	; (800a414 <I2C_RequestMemoryRead+0x1cc>)
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f91d 	bl	800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e097      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f4:	6a39      	ldr	r1, [r7, #32]
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 f9a8 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00d      	beq.n	800a31e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	2b04      	cmp	r3, #4
 800a308:	d107      	bne.n	800a31a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a318:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e076      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a31e:	88fb      	ldrh	r3, [r7, #6]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d105      	bne.n	800a330 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a324:	893b      	ldrh	r3, [r7, #8]
 800a326:	b2da      	uxtb	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	611a      	str	r2, [r3, #16]
 800a32e:	e021      	b.n	800a374 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a330:	893b      	ldrh	r3, [r7, #8]
 800a332:	0a1b      	lsrs	r3, r3, #8
 800a334:	b29b      	uxth	r3, r3
 800a336:	b2da      	uxtb	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a340:	6a39      	ldr	r1, [r7, #32]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 f982 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00d      	beq.n	800a36a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	2b04      	cmp	r3, #4
 800a354:	d107      	bne.n	800a366 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a364:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e050      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a36a:	893b      	ldrh	r3, [r7, #8]
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a376:	6a39      	ldr	r1, [r7, #32]
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f967 	bl	800a64c <I2C_WaitOnTXEFlagUntilTimeout>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00d      	beq.n	800a3a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d107      	bne.n	800a39c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a39a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e035      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 f82b 	bl	800a418 <I2C_WaitOnFlagUntilTimeout>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00d      	beq.n	800a3e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d6:	d103      	bne.n	800a3e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e013      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3e4:	897b      	ldrh	r3, [r7, #10]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f043 0301 	orr.w	r3, r3, #1
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	6a3a      	ldr	r2, [r7, #32]
 800a3f8:	4906      	ldr	r1, [pc, #24]	; (800a414 <I2C_RequestMemoryRead+0x1cc>)
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f886 	bl	800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	00010002 	.word	0x00010002

0800a418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	4613      	mov	r3, r2
 800a426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a428:	e048      	b.n	800a4bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a430:	d044      	beq.n	800a4bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a432:	f7fe f9e3 	bl	80087fc <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d302      	bcc.n	800a448 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d139      	bne.n	800a4bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	0c1b      	lsrs	r3, r3, #16
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d10d      	bne.n	800a46e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	43da      	mvns	r2, r3
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	4013      	ands	r3, r2
 800a45e:	b29b      	uxth	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	bf0c      	ite	eq
 800a464:	2301      	moveq	r3, #1
 800a466:	2300      	movne	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	461a      	mov	r2, r3
 800a46c:	e00c      	b.n	800a488 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	43da      	mvns	r2, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	4013      	ands	r3, r2
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	bf0c      	ite	eq
 800a480:	2301      	moveq	r3, #1
 800a482:	2300      	movne	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	461a      	mov	r2, r3
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d116      	bne.n	800a4bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e023      	b.n	800a504 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	0c1b      	lsrs	r3, r3, #16
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d10d      	bne.n	800a4e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	43da      	mvns	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2301      	moveq	r3, #1
 800a4da:	2300      	movne	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	461a      	mov	r2, r3
 800a4e0:	e00c      	b.n	800a4fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	43da      	mvns	r2, r3
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2301      	moveq	r3, #1
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d093      	beq.n	800a42a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a51a:	e071      	b.n	800a600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a52a:	d123      	bne.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a53a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2220      	movs	r2, #32
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	f043 0204 	orr.w	r2, r3, #4
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e067      	b.n	800a644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a57a:	d041      	beq.n	800a600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a57c:	f7fe f93e 	bl	80087fc <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d302      	bcc.n	800a592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d136      	bne.n	800a600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	0c1b      	lsrs	r3, r3, #16
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d10c      	bne.n	800a5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	43da      	mvns	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bf14      	ite	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	2300      	moveq	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	e00b      	b.n	800a5ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	43da      	mvns	r2, r3
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bf14      	ite	ne
 800a5c8:	2301      	movne	r3, #1
 800a5ca:	2300      	moveq	r3, #0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d016      	beq.n	800a600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	f043 0220 	orr.w	r2, r3, #32
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e021      	b.n	800a644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	0c1b      	lsrs	r3, r3, #16
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b01      	cmp	r3, #1
 800a608:	d10c      	bne.n	800a624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	43da      	mvns	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4013      	ands	r3, r2
 800a616:	b29b      	uxth	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bf14      	ite	ne
 800a61c:	2301      	movne	r3, #1
 800a61e:	2300      	moveq	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	e00b      	b.n	800a63c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	43da      	mvns	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4013      	ands	r3, r2
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	bf14      	ite	ne
 800a636:	2301      	movne	r3, #1
 800a638:	2300      	moveq	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f47f af6d 	bne.w	800a51c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a658:	e034      	b.n	800a6c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f8e3 	bl	800a826 <I2C_IsAcknowledgeFailed>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e034      	b.n	800a6d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a670:	d028      	beq.n	800a6c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a672:	f7fe f8c3 	bl	80087fc <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d302      	bcc.n	800a688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d11d      	bne.n	800a6c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d016      	beq.n	800a6c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	f043 0220 	orr.w	r2, r3, #32
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e007      	b.n	800a6d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ce:	2b80      	cmp	r3, #128	; 0x80
 800a6d0:	d1c3      	bne.n	800a65a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6e8:	e034      	b.n	800a754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f89b 	bl	800a826 <I2C_IsAcknowledgeFailed>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e034      	b.n	800a764 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a700:	d028      	beq.n	800a754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a702:	f7fe f87b 	bl	80087fc <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d302      	bcc.n	800a718 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d11d      	bne.n	800a754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b04      	cmp	r3, #4
 800a724:	d016      	beq.n	800a754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	f043 0220 	orr.w	r2, r3, #32
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e007      	b.n	800a764 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d1c3      	bne.n	800a6ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a778:	e049      	b.n	800a80e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	2b10      	cmp	r3, #16
 800a786:	d119      	bne.n	800a7bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f06f 0210 	mvn.w	r2, #16
 800a790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e030      	b.n	800a81e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7bc:	f7fe f81e 	bl	80087fc <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d11d      	bne.n	800a80e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7dc:	2b40      	cmp	r3, #64	; 0x40
 800a7de:	d016      	beq.n	800a80e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fa:	f043 0220 	orr.w	r2, r3, #32
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e007      	b.n	800a81e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	d1ae      	bne.n	800a77a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a83c:	d11b      	bne.n	800a876 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a846:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	f043 0204 	orr.w	r2, r3, #4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e000      	b.n	800a878 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr
	...

0800a884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e272      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 8087 	beq.w	800a9b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8a4:	4b92      	ldr	r3, [pc, #584]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f003 030c 	and.w	r3, r3, #12
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d00c      	beq.n	800a8ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8b0:	4b8f      	ldr	r3, [pc, #572]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f003 030c 	and.w	r3, r3, #12
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d112      	bne.n	800a8e2 <HAL_RCC_OscConfig+0x5e>
 800a8bc:	4b8c      	ldr	r3, [pc, #560]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c8:	d10b      	bne.n	800a8e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8ca:	4b89      	ldr	r3, [pc, #548]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d06c      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x12c>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d168      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e24c      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ea:	d106      	bne.n	800a8fa <HAL_RCC_OscConfig+0x76>
 800a8ec:	4b80      	ldr	r3, [pc, #512]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a7f      	ldr	r2, [pc, #508]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a8f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	e02e      	b.n	800a958 <HAL_RCC_OscConfig+0xd4>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10c      	bne.n	800a91c <HAL_RCC_OscConfig+0x98>
 800a902:	4b7b      	ldr	r3, [pc, #492]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a7a      	ldr	r2, [pc, #488]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	4b78      	ldr	r3, [pc, #480]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a77      	ldr	r2, [pc, #476]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	e01d      	b.n	800a958 <HAL_RCC_OscConfig+0xd4>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a924:	d10c      	bne.n	800a940 <HAL_RCC_OscConfig+0xbc>
 800a926:	4b72      	ldr	r3, [pc, #456]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a71      	ldr	r2, [pc, #452]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	4b6f      	ldr	r3, [pc, #444]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a6e      	ldr	r2, [pc, #440]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	e00b      	b.n	800a958 <HAL_RCC_OscConfig+0xd4>
 800a940:	4b6b      	ldr	r3, [pc, #428]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a6a      	ldr	r2, [pc, #424]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	4b68      	ldr	r3, [pc, #416]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a67      	ldr	r2, [pc, #412]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d013      	beq.n	800a988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a960:	f7fd ff4c 	bl	80087fc <HAL_GetTick>
 800a964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a966:	e008      	b.n	800a97a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a968:	f7fd ff48 	bl	80087fc <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b64      	cmp	r3, #100	; 0x64
 800a974:	d901      	bls.n	800a97a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e200      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a97a:	4b5d      	ldr	r3, [pc, #372]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0f0      	beq.n	800a968 <HAL_RCC_OscConfig+0xe4>
 800a986:	e014      	b.n	800a9b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a988:	f7fd ff38 	bl	80087fc <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a990:	f7fd ff34 	bl	80087fc <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b64      	cmp	r3, #100	; 0x64
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e1ec      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9a2:	4b53      	ldr	r3, [pc, #332]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <HAL_RCC_OscConfig+0x10c>
 800a9ae:	e000      	b.n	800a9b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d063      	beq.n	800aa86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9be:	4b4c      	ldr	r3, [pc, #304]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f003 030c 	and.w	r3, r3, #12
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9ca:	4b49      	ldr	r3, [pc, #292]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f003 030c 	and.w	r3, r3, #12
 800a9d2:	2b08      	cmp	r3, #8
 800a9d4:	d11c      	bne.n	800aa10 <HAL_RCC_OscConfig+0x18c>
 800a9d6:	4b46      	ldr	r3, [pc, #280]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d116      	bne.n	800aa10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9e2:	4b43      	ldr	r3, [pc, #268]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <HAL_RCC_OscConfig+0x176>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d001      	beq.n	800a9fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e1c0      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9fa:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	4939      	ldr	r1, [pc, #228]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa0e:	e03a      	b.n	800aa86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d020      	beq.n	800aa5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa18:	4b36      	ldr	r3, [pc, #216]	; (800aaf4 <HAL_RCC_OscConfig+0x270>)
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa1e:	f7fd feed 	bl	80087fc <HAL_GetTick>
 800aa22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa24:	e008      	b.n	800aa38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa26:	f7fd fee9 	bl	80087fc <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d901      	bls.n	800aa38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e1a1      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa38:	4b2d      	ldr	r3, [pc, #180]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0f0      	beq.n	800aa26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa44:	4b2a      	ldr	r3, [pc, #168]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4927      	ldr	r1, [pc, #156]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	600b      	str	r3, [r1, #0]
 800aa58:	e015      	b.n	800aa86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa5a:	4b26      	ldr	r3, [pc, #152]	; (800aaf4 <HAL_RCC_OscConfig+0x270>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa60:	f7fd fecc 	bl	80087fc <HAL_GetTick>
 800aa64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa66:	e008      	b.n	800aa7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa68:	f7fd fec8 	bl	80087fc <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e180      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa7a:	4b1d      	ldr	r3, [pc, #116]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f0      	bne.n	800aa68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0308 	and.w	r3, r3, #8
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d03a      	beq.n	800ab08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d019      	beq.n	800aace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa9a:	4b17      	ldr	r3, [pc, #92]	; (800aaf8 <HAL_RCC_OscConfig+0x274>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaa0:	f7fd feac 	bl	80087fc <HAL_GetTick>
 800aaa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaa6:	e008      	b.n	800aaba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaa8:	f7fd fea8 	bl	80087fc <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d901      	bls.n	800aaba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e160      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaba:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <HAL_RCC_OscConfig+0x26c>)
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0f0      	beq.n	800aaa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aac6:	2001      	movs	r0, #1
 800aac8:	f000 face 	bl	800b068 <RCC_Delay>
 800aacc:	e01c      	b.n	800ab08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aace:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <HAL_RCC_OscConfig+0x274>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aad4:	f7fd fe92 	bl	80087fc <HAL_GetTick>
 800aad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aada:	e00f      	b.n	800aafc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aadc:	f7fd fe8e 	bl	80087fc <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d908      	bls.n	800aafc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e146      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
 800aaee:	bf00      	nop
 800aaf0:	40021000 	.word	0x40021000
 800aaf4:	42420000 	.word	0x42420000
 800aaf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aafc:	4b92      	ldr	r3, [pc, #584]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e9      	bne.n	800aadc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 80a6 	beq.w	800ac62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab16:	2300      	movs	r3, #0
 800ab18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab1a:	4b8b      	ldr	r3, [pc, #556]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10d      	bne.n	800ab42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab26:	4b88      	ldr	r3, [pc, #544]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	4a87      	ldr	r2, [pc, #540]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ab2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab30:	61d3      	str	r3, [r2, #28]
 800ab32:	4b85      	ldr	r3, [pc, #532]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab3a:	60bb      	str	r3, [r7, #8]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab42:	4b82      	ldr	r3, [pc, #520]	; (800ad4c <HAL_RCC_OscConfig+0x4c8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d118      	bne.n	800ab80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab4e:	4b7f      	ldr	r3, [pc, #508]	; (800ad4c <HAL_RCC_OscConfig+0x4c8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a7e      	ldr	r2, [pc, #504]	; (800ad4c <HAL_RCC_OscConfig+0x4c8>)
 800ab54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab5a:	f7fd fe4f 	bl	80087fc <HAL_GetTick>
 800ab5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab60:	e008      	b.n	800ab74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab62:	f7fd fe4b 	bl	80087fc <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	2b64      	cmp	r3, #100	; 0x64
 800ab6e:	d901      	bls.n	800ab74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e103      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab74:	4b75      	ldr	r3, [pc, #468]	; (800ad4c <HAL_RCC_OscConfig+0x4c8>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0f0      	beq.n	800ab62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d106      	bne.n	800ab96 <HAL_RCC_OscConfig+0x312>
 800ab88:	4b6f      	ldr	r3, [pc, #444]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	4a6e      	ldr	r2, [pc, #440]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	6213      	str	r3, [r2, #32]
 800ab94:	e02d      	b.n	800abf2 <HAL_RCC_OscConfig+0x36e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10c      	bne.n	800abb8 <HAL_RCC_OscConfig+0x334>
 800ab9e:	4b6a      	ldr	r3, [pc, #424]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	4a69      	ldr	r2, [pc, #420]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800aba4:	f023 0301 	bic.w	r3, r3, #1
 800aba8:	6213      	str	r3, [r2, #32]
 800abaa:	4b67      	ldr	r3, [pc, #412]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	4a66      	ldr	r2, [pc, #408]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abb0:	f023 0304 	bic.w	r3, r3, #4
 800abb4:	6213      	str	r3, [r2, #32]
 800abb6:	e01c      	b.n	800abf2 <HAL_RCC_OscConfig+0x36e>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	d10c      	bne.n	800abda <HAL_RCC_OscConfig+0x356>
 800abc0:	4b61      	ldr	r3, [pc, #388]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	4a60      	ldr	r2, [pc, #384]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abc6:	f043 0304 	orr.w	r3, r3, #4
 800abca:	6213      	str	r3, [r2, #32]
 800abcc:	4b5e      	ldr	r3, [pc, #376]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	4a5d      	ldr	r2, [pc, #372]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	6213      	str	r3, [r2, #32]
 800abd8:	e00b      	b.n	800abf2 <HAL_RCC_OscConfig+0x36e>
 800abda:	4b5b      	ldr	r3, [pc, #364]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	4a5a      	ldr	r2, [pc, #360]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abe0:	f023 0301 	bic.w	r3, r3, #1
 800abe4:	6213      	str	r3, [r2, #32]
 800abe6:	4b58      	ldr	r3, [pc, #352]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	4a57      	ldr	r2, [pc, #348]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800abec:	f023 0304 	bic.w	r3, r3, #4
 800abf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d015      	beq.n	800ac26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abfa:	f7fd fdff 	bl	80087fc <HAL_GetTick>
 800abfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac00:	e00a      	b.n	800ac18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac02:	f7fd fdfb 	bl	80087fc <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d901      	bls.n	800ac18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e0b1      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac18:	4b4b      	ldr	r3, [pc, #300]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0ee      	beq.n	800ac02 <HAL_RCC_OscConfig+0x37e>
 800ac24:	e014      	b.n	800ac50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac26:	f7fd fde9 	bl	80087fc <HAL_GetTick>
 800ac2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac2c:	e00a      	b.n	800ac44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac2e:	f7fd fde5 	bl	80087fc <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d901      	bls.n	800ac44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e09b      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac44:	4b40      	ldr	r3, [pc, #256]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1ee      	bne.n	800ac2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d105      	bne.n	800ac62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac56:	4b3c      	ldr	r3, [pc, #240]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	4a3b      	ldr	r2, [pc, #236]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ac5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 8087 	beq.w	800ad7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac6c:	4b36      	ldr	r3, [pc, #216]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f003 030c 	and.w	r3, r3, #12
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d061      	beq.n	800ad3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	69db      	ldr	r3, [r3, #28]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d146      	bne.n	800ad0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac80:	4b33      	ldr	r3, [pc, #204]	; (800ad50 <HAL_RCC_OscConfig+0x4cc>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac86:	f7fd fdb9 	bl	80087fc <HAL_GetTick>
 800ac8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac8c:	e008      	b.n	800aca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac8e:	f7fd fdb5 	bl	80087fc <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d901      	bls.n	800aca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e06d      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aca0:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f0      	bne.n	800ac8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a1b      	ldr	r3, [r3, #32]
 800acb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb4:	d108      	bne.n	800acc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800acb6:	4b24      	ldr	r3, [pc, #144]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	4921      	ldr	r1, [pc, #132]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800acc4:	4313      	orrs	r3, r2
 800acc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acc8:	4b1f      	ldr	r3, [pc, #124]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a19      	ldr	r1, [r3, #32]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	430b      	orrs	r3, r1
 800acda:	491b      	ldr	r1, [pc, #108]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ace0:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <HAL_RCC_OscConfig+0x4cc>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace6:	f7fd fd89 	bl	80087fc <HAL_GetTick>
 800acea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acec:	e008      	b.n	800ad00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acee:	f7fd fd85 	bl	80087fc <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d901      	bls.n	800ad00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e03d      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0f0      	beq.n	800acee <HAL_RCC_OscConfig+0x46a>
 800ad0c:	e035      	b.n	800ad7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <HAL_RCC_OscConfig+0x4cc>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad14:	f7fd fd72 	bl	80087fc <HAL_GetTick>
 800ad18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad1a:	e008      	b.n	800ad2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad1c:	f7fd fd6e 	bl	80087fc <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d901      	bls.n	800ad2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e026      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad2e:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <HAL_RCC_OscConfig+0x4c4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1f0      	bne.n	800ad1c <HAL_RCC_OscConfig+0x498>
 800ad3a:	e01e      	b.n	800ad7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d107      	bne.n	800ad54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e019      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
 800ad48:	40021000 	.word	0x40021000
 800ad4c:	40007000 	.word	0x40007000
 800ad50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad54:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <HAL_RCC_OscConfig+0x500>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a1b      	ldr	r3, [r3, #32]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d106      	bne.n	800ad76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d001      	beq.n	800ad7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	40021000 	.word	0x40021000

0800ad88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e0d0      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad9c:	4b6a      	ldr	r3, [pc, #424]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0307 	and.w	r3, r3, #7
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d910      	bls.n	800adcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adaa:	4b67      	ldr	r3, [pc, #412]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f023 0207 	bic.w	r2, r3, #7
 800adb2:	4965      	ldr	r1, [pc, #404]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adba:	4b63      	ldr	r3, [pc, #396]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d001      	beq.n	800adcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e0b8      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0302 	and.w	r3, r3, #2
 800add4:	2b00      	cmp	r3, #0
 800add6:	d020      	beq.n	800ae1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ade4:	4b59      	ldr	r3, [pc, #356]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	4a58      	ldr	r2, [pc, #352]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800adea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800adee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0308 	and.w	r3, r3, #8
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adfc:	4b53      	ldr	r3, [pc, #332]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4a52      	ldr	r2, [pc, #328]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae08:	4b50      	ldr	r3, [pc, #320]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	494d      	ldr	r1, [pc, #308]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d040      	beq.n	800aea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d107      	bne.n	800ae3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae2e:	4b47      	ldr	r3, [pc, #284]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d115      	bne.n	800ae66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e07f      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d107      	bne.n	800ae56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae46:	4b41      	ldr	r3, [pc, #260]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e073      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae56:	4b3d      	ldr	r3, [pc, #244]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e06b      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae66:	4b39      	ldr	r3, [pc, #228]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f023 0203 	bic.w	r2, r3, #3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4936      	ldr	r1, [pc, #216]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae78:	f7fd fcc0 	bl	80087fc <HAL_GetTick>
 800ae7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae7e:	e00a      	b.n	800ae96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae80:	f7fd fcbc 	bl	80087fc <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d901      	bls.n	800ae96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e053      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae96:	4b2d      	ldr	r3, [pc, #180]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f003 020c 	and.w	r2, r3, #12
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d1eb      	bne.n	800ae80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aea8:	4b27      	ldr	r3, [pc, #156]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0307 	and.w	r3, r3, #7
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d210      	bcs.n	800aed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeb6:	4b24      	ldr	r3, [pc, #144]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f023 0207 	bic.w	r2, r3, #7
 800aebe:	4922      	ldr	r1, [pc, #136]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aec6:	4b20      	ldr	r3, [pc, #128]	; (800af48 <HAL_RCC_ClockConfig+0x1c0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f003 0307 	and.w	r3, r3, #7
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d001      	beq.n	800aed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e032      	b.n	800af3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d008      	beq.n	800aef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aee4:	4b19      	ldr	r3, [pc, #100]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	4916      	ldr	r1, [pc, #88]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0308 	and.w	r3, r3, #8
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d009      	beq.n	800af16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af02:	4b12      	ldr	r3, [pc, #72]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	00db      	lsls	r3, r3, #3
 800af10:	490e      	ldr	r1, [pc, #56]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800af12:	4313      	orrs	r3, r2
 800af14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af16:	f000 f821 	bl	800af5c <HAL_RCC_GetSysClockFreq>
 800af1a:	4602      	mov	r2, r0
 800af1c:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <HAL_RCC_ClockConfig+0x1c4>)
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	091b      	lsrs	r3, r3, #4
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	490a      	ldr	r1, [pc, #40]	; (800af50 <HAL_RCC_ClockConfig+0x1c8>)
 800af28:	5ccb      	ldrb	r3, [r1, r3]
 800af2a:	fa22 f303 	lsr.w	r3, r2, r3
 800af2e:	4a09      	ldr	r2, [pc, #36]	; (800af54 <HAL_RCC_ClockConfig+0x1cc>)
 800af30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af32:	4b09      	ldr	r3, [pc, #36]	; (800af58 <HAL_RCC_ClockConfig+0x1d0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	f7fd fc1e 	bl	8008778 <HAL_InitTick>

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	40022000 	.word	0x40022000
 800af4c:	40021000 	.word	0x40021000
 800af50:	0800de04 	.word	0x0800de04
 800af54:	200000b0 	.word	0x200000b0
 800af58:	200000b4 	.word	0x200000b4

0800af5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]
 800af6a:	2300      	movs	r3, #0
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	2300      	movs	r3, #0
 800af70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af76:	4b1e      	ldr	r3, [pc, #120]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f003 030c 	and.w	r3, r3, #12
 800af82:	2b04      	cmp	r3, #4
 800af84:	d002      	beq.n	800af8c <HAL_RCC_GetSysClockFreq+0x30>
 800af86:	2b08      	cmp	r3, #8
 800af88:	d003      	beq.n	800af92 <HAL_RCC_GetSysClockFreq+0x36>
 800af8a:	e027      	b.n	800afdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af8c:	4b19      	ldr	r3, [pc, #100]	; (800aff4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af8e:	613b      	str	r3, [r7, #16]
      break;
 800af90:	e027      	b.n	800afe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	0c9b      	lsrs	r3, r3, #18
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af9c:	5cd3      	ldrb	r3, [r2, r3]
 800af9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d010      	beq.n	800afcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x94>)
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	0c5b      	lsrs	r3, r3, #17
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	4a11      	ldr	r2, [pc, #68]	; (800affc <HAL_RCC_GetSysClockFreq+0xa0>)
 800afb6:	5cd3      	ldrb	r3, [r2, r3]
 800afb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a0d      	ldr	r2, [pc, #52]	; (800aff4 <HAL_RCC_GetSysClockFreq+0x98>)
 800afbe:	fb03 f202 	mul.w	r2, r3, r2
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc8:	617b      	str	r3, [r7, #20]
 800afca:	e004      	b.n	800afd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a0c      	ldr	r2, [pc, #48]	; (800b000 <HAL_RCC_GetSysClockFreq+0xa4>)
 800afd0:	fb02 f303 	mul.w	r3, r2, r3
 800afd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	613b      	str	r3, [r7, #16]
      break;
 800afda:	e002      	b.n	800afe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <HAL_RCC_GetSysClockFreq+0x98>)
 800afde:	613b      	str	r3, [r7, #16]
      break;
 800afe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afe2:	693b      	ldr	r3, [r7, #16]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	40021000 	.word	0x40021000
 800aff4:	007a1200 	.word	0x007a1200
 800aff8:	0800de1c 	.word	0x0800de1c
 800affc:	0800de2c 	.word	0x0800de2c
 800b000:	003d0900 	.word	0x003d0900

0800b004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b008:	4b02      	ldr	r3, [pc, #8]	; (800b014 <HAL_RCC_GetHCLKFreq+0x10>)
 800b00a:	681b      	ldr	r3, [r3, #0]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr
 800b014:	200000b0 	.word	0x200000b0

0800b018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b01c:	f7ff fff2 	bl	800b004 <HAL_RCC_GetHCLKFreq>
 800b020:	4602      	mov	r2, r0
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	0a1b      	lsrs	r3, r3, #8
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	4903      	ldr	r1, [pc, #12]	; (800b03c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b02e:	5ccb      	ldrb	r3, [r1, r3]
 800b030:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b034:	4618      	mov	r0, r3
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40021000 	.word	0x40021000
 800b03c:	0800de14 	.word	0x0800de14

0800b040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b044:	f7ff ffde 	bl	800b004 <HAL_RCC_GetHCLKFreq>
 800b048:	4602      	mov	r2, r0
 800b04a:	4b05      	ldr	r3, [pc, #20]	; (800b060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	0adb      	lsrs	r3, r3, #11
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	4903      	ldr	r1, [pc, #12]	; (800b064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b056:	5ccb      	ldrb	r3, [r1, r3]
 800b058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	40021000 	.word	0x40021000
 800b064:	0800de14 	.word	0x0800de14

0800b068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <RCC_Delay+0x34>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0a      	ldr	r2, [pc, #40]	; (800b0a0 <RCC_Delay+0x38>)
 800b076:	fba2 2303 	umull	r2, r3, r2, r3
 800b07a:	0a5b      	lsrs	r3, r3, #9
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b084:	bf00      	nop
  }
  while (Delay --);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	1e5a      	subs	r2, r3, #1
 800b08a:	60fa      	str	r2, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1f9      	bne.n	800b084 <RCC_Delay+0x1c>
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	bc80      	pop	{r7}
 800b09a:	4770      	bx	lr
 800b09c:	200000b0 	.word	0x200000b0
 800b0a0:	10624dd3 	.word	0x10624dd3

0800b0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e041      	b.n	800b13a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7fd fa26 	bl	800851c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	f000 fa82 	bl	800b5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b01      	cmp	r3, #1
 800b156:	d001      	beq.n	800b15c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e044      	b.n	800b1e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68da      	ldr	r2, [r3, #12]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f042 0201 	orr.w	r2, r2, #1
 800b172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a1d      	ldr	r2, [pc, #116]	; (800b1f0 <HAL_TIM_Base_Start_IT+0xac>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d018      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a1c      	ldr	r2, [pc, #112]	; (800b1f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d013      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b190:	d00e      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a18      	ldr	r2, [pc, #96]	; (800b1f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d009      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a16      	ldr	r2, [pc, #88]	; (800b1fc <HAL_TIM_Base_Start_IT+0xb8>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d004      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a15      	ldr	r2, [pc, #84]	; (800b200 <HAL_TIM_Base_Start_IT+0xbc>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d111      	bne.n	800b1d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f003 0307 	and.w	r3, r3, #7
 800b1ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b06      	cmp	r3, #6
 800b1c0:	d010      	beq.n	800b1e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f042 0201 	orr.w	r2, r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d2:	e007      	b.n	800b1e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0201 	orr.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr
 800b1f0:	40012c00 	.word	0x40012c00
 800b1f4:	40013400 	.word	0x40013400
 800b1f8:	40000400 	.word	0x40000400
 800b1fc:	40000800 	.word	0x40000800
 800b200:	40000c00 	.word	0x40000c00

0800b204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0302 	and.w	r3, r3, #2
 800b216:	2b02      	cmp	r3, #2
 800b218:	d122      	bne.n	800b260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b02      	cmp	r3, #2
 800b226:	d11b      	bne.n	800b260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0202 	mvn.w	r2, #2
 800b230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	f003 0303 	and.w	r3, r3, #3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f9b4 	bl	800b5b4 <HAL_TIM_IC_CaptureCallback>
 800b24c:	e005      	b.n	800b25a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f9a7 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f9b6 	bl	800b5c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	f003 0304 	and.w	r3, r3, #4
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d122      	bne.n	800b2b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d11b      	bne.n	800b2b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f06f 0204 	mvn.w	r2, #4
 800b284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2202      	movs	r2, #2
 800b28a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f98a 	bl	800b5b4 <HAL_TIM_IC_CaptureCallback>
 800b2a0:	e005      	b.n	800b2ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f97d 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f98c 	bl	800b5c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d122      	bne.n	800b308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	f003 0308 	and.w	r3, r3, #8
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d11b      	bne.n	800b308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f06f 0208 	mvn.w	r2, #8
 800b2d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2204      	movs	r2, #4
 800b2de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f003 0303 	and.w	r3, r3, #3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d003      	beq.n	800b2f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f960 	bl	800b5b4 <HAL_TIM_IC_CaptureCallback>
 800b2f4:	e005      	b.n	800b302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f953 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f962 	bl	800b5c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	f003 0310 	and.w	r3, r3, #16
 800b312:	2b10      	cmp	r3, #16
 800b314:	d122      	bne.n	800b35c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f003 0310 	and.w	r3, r3, #16
 800b320:	2b10      	cmp	r3, #16
 800b322:	d11b      	bne.n	800b35c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f06f 0210 	mvn.w	r2, #16
 800b32c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2208      	movs	r2, #8
 800b332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f936 	bl	800b5b4 <HAL_TIM_IC_CaptureCallback>
 800b348:	e005      	b.n	800b356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f929 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f938 	bl	800b5c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b01      	cmp	r3, #1
 800b368:	d10e      	bne.n	800b388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	2b01      	cmp	r3, #1
 800b376:	d107      	bne.n	800b388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f06f 0201 	mvn.w	r2, #1
 800b380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7fc fd62 	bl	8007e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b392:	2b80      	cmp	r3, #128	; 0x80
 800b394:	d10e      	bne.n	800b3b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a0:	2b80      	cmp	r3, #128	; 0x80
 800b3a2:	d107      	bne.n	800b3b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 faa1 	bl	800b8f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3be:	2b40      	cmp	r3, #64	; 0x40
 800b3c0:	d10e      	bne.n	800b3e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d107      	bne.n	800b3e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f8fc 	bl	800b5d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	f003 0320 	and.w	r3, r3, #32
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	d10e      	bne.n	800b40c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b20      	cmp	r3, #32
 800b3fa:	d107      	bne.n	800b40c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0220 	mvn.w	r2, #32
 800b404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fa6c 	bl	800b8e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d101      	bne.n	800b430 <HAL_TIM_ConfigClockSource+0x1c>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e0b4      	b.n	800b59a <HAL_TIM_ConfigClockSource+0x186>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b468:	d03e      	beq.n	800b4e8 <HAL_TIM_ConfigClockSource+0xd4>
 800b46a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b46e:	f200 8087 	bhi.w	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b476:	f000 8086 	beq.w	800b586 <HAL_TIM_ConfigClockSource+0x172>
 800b47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b47e:	d87f      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b480:	2b70      	cmp	r3, #112	; 0x70
 800b482:	d01a      	beq.n	800b4ba <HAL_TIM_ConfigClockSource+0xa6>
 800b484:	2b70      	cmp	r3, #112	; 0x70
 800b486:	d87b      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b488:	2b60      	cmp	r3, #96	; 0x60
 800b48a:	d050      	beq.n	800b52e <HAL_TIM_ConfigClockSource+0x11a>
 800b48c:	2b60      	cmp	r3, #96	; 0x60
 800b48e:	d877      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b490:	2b50      	cmp	r3, #80	; 0x50
 800b492:	d03c      	beq.n	800b50e <HAL_TIM_ConfigClockSource+0xfa>
 800b494:	2b50      	cmp	r3, #80	; 0x50
 800b496:	d873      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b498:	2b40      	cmp	r3, #64	; 0x40
 800b49a:	d058      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x13a>
 800b49c:	2b40      	cmp	r3, #64	; 0x40
 800b49e:	d86f      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a0:	2b30      	cmp	r3, #48	; 0x30
 800b4a2:	d064      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4a4:	2b30      	cmp	r3, #48	; 0x30
 800b4a6:	d86b      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	d060      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d867      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d05c      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4b4:	2b10      	cmp	r3, #16
 800b4b6:	d05a      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4b8:	e062      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4ca:	f000 f980 	bl	800b7ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	609a      	str	r2, [r3, #8]
      break;
 800b4e6:	e04f      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4f8:	f000 f969 	bl	800b7ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b50a:	609a      	str	r2, [r3, #8]
      break;
 800b50c:	e03c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b51a:	461a      	mov	r2, r3
 800b51c:	f000 f8e0 	bl	800b6e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2150      	movs	r1, #80	; 0x50
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f937 	bl	800b79a <TIM_ITRx_SetConfig>
      break;
 800b52c:	e02c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b53a:	461a      	mov	r2, r3
 800b53c:	f000 f8fe 	bl	800b73c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2160      	movs	r1, #96	; 0x60
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f927 	bl	800b79a <TIM_ITRx_SetConfig>
      break;
 800b54c:	e01c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b55a:	461a      	mov	r2, r3
 800b55c:	f000 f8c0 	bl	800b6e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2140      	movs	r1, #64	; 0x40
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f917 	bl	800b79a <TIM_ITRx_SetConfig>
      break;
 800b56c:	e00c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f000 f90e 	bl	800b79a <TIM_ITRx_SetConfig>
      break;
 800b57e:	e003      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	73fb      	strb	r3, [r7, #15]
      break;
 800b584:	e000      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b598:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bc80      	pop	{r7}
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bc80      	pop	{r7}
 800b5c4:	4770      	bx	lr

0800b5c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5ce:	bf00      	nop
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bc80      	pop	{r7}
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc80      	pop	{r7}
 800b5e8:	4770      	bx	lr
	...

0800b5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a33      	ldr	r2, [pc, #204]	; (800b6cc <TIM_Base_SetConfig+0xe0>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d013      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a32      	ldr	r2, [pc, #200]	; (800b6d0 <TIM_Base_SetConfig+0xe4>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00f      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b612:	d00b      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a2f      	ldr	r2, [pc, #188]	; (800b6d4 <TIM_Base_SetConfig+0xe8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d007      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a2e      	ldr	r2, [pc, #184]	; (800b6d8 <TIM_Base_SetConfig+0xec>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d003      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a2d      	ldr	r2, [pc, #180]	; (800b6dc <TIM_Base_SetConfig+0xf0>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d108      	bne.n	800b63e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a22      	ldr	r2, [pc, #136]	; (800b6cc <TIM_Base_SetConfig+0xe0>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d013      	beq.n	800b66e <TIM_Base_SetConfig+0x82>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a21      	ldr	r2, [pc, #132]	; (800b6d0 <TIM_Base_SetConfig+0xe4>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d00f      	beq.n	800b66e <TIM_Base_SetConfig+0x82>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b654:	d00b      	beq.n	800b66e <TIM_Base_SetConfig+0x82>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a1e      	ldr	r2, [pc, #120]	; (800b6d4 <TIM_Base_SetConfig+0xe8>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d007      	beq.n	800b66e <TIM_Base_SetConfig+0x82>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a1d      	ldr	r2, [pc, #116]	; (800b6d8 <TIM_Base_SetConfig+0xec>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d003      	beq.n	800b66e <TIM_Base_SetConfig+0x82>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a1c      	ldr	r2, [pc, #112]	; (800b6dc <TIM_Base_SetConfig+0xf0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d108      	bne.n	800b680 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689a      	ldr	r2, [r3, #8]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a09      	ldr	r2, [pc, #36]	; (800b6cc <TIM_Base_SetConfig+0xe0>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d003      	beq.n	800b6b4 <TIM_Base_SetConfig+0xc8>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a08      	ldr	r2, [pc, #32]	; (800b6d0 <TIM_Base_SetConfig+0xe4>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d103      	bne.n	800b6bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	691a      	ldr	r2, [r3, #16]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	615a      	str	r2, [r3, #20]
}
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bc80      	pop	{r7}
 800b6ca:	4770      	bx	lr
 800b6cc:	40012c00 	.word	0x40012c00
 800b6d0:	40013400 	.word	0x40013400
 800b6d4:	40000400 	.word	0x40000400
 800b6d8:	40000800 	.word	0x40000800
 800b6dc:	40000c00 	.word	0x40000c00

0800b6e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	f023 0201 	bic.w	r2, r3, #1
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b70a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	4313      	orrs	r3, r2
 800b714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f023 030a 	bic.w	r3, r3, #10
 800b71c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4313      	orrs	r3, r2
 800b724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	621a      	str	r2, [r3, #32]
}
 800b732:	bf00      	nop
 800b734:	371c      	adds	r7, #28
 800b736:	46bd      	mov	sp, r7
 800b738:	bc80      	pop	{r7}
 800b73a:	4770      	bx	lr

0800b73c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	f023 0210 	bic.w	r2, r3, #16
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	031b      	lsls	r3, r3, #12
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	4313      	orrs	r3, r2
 800b770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b778:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	011b      	lsls	r3, r3, #4
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	4313      	orrs	r3, r2
 800b782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	621a      	str	r2, [r3, #32]
}
 800b790:	bf00      	nop
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	bc80      	pop	{r7}
 800b798:	4770      	bx	lr

0800b79a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b085      	sub	sp, #20
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f043 0307 	orr.w	r3, r3, #7
 800b7bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	609a      	str	r2, [r3, #8]
}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bc80      	pop	{r7}
 800b7cc:	4770      	bx	lr

0800b7ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b087      	sub	sp, #28
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
 800b7da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	021a      	lsls	r2, r3, #8
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	609a      	str	r2, [r3, #8]
}
 800b802:	bf00      	nop
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	bc80      	pop	{r7}
 800b80a:	4770      	bx	lr

0800b80c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d101      	bne.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b820:	2302      	movs	r3, #2
 800b822:	e050      	b.n	800b8c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b84a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	4313      	orrs	r3, r2
 800b854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a1b      	ldr	r2, [pc, #108]	; (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d018      	beq.n	800b89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a19      	ldr	r2, [pc, #100]	; (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d013      	beq.n	800b89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b87a:	d00e      	beq.n	800b89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a15      	ldr	r2, [pc, #84]	; (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d009      	beq.n	800b89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a14      	ldr	r2, [pc, #80]	; (800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d004      	beq.n	800b89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a12      	ldr	r2, [pc, #72]	; (800b8e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d10c      	bne.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bc80      	pop	{r7}
 800b8ce:	4770      	bx	lr
 800b8d0:	40012c00 	.word	0x40012c00
 800b8d4:	40013400 	.word	0x40013400
 800b8d8:	40000400 	.word	0x40000400
 800b8dc:	40000800 	.word	0x40000800
 800b8e0:	40000c00 	.word	0x40000c00

0800b8e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bc80      	pop	{r7}
 800b8f4:	4770      	bx	lr

0800b8f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8fe:	bf00      	nop
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	bc80      	pop	{r7}
 800b906:	4770      	bx	lr

0800b908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e042      	b.n	800b9a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7fc fe1a 	bl	8008568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2224      	movs	r2, #36	; 0x24
 800b938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b94a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fcb5 	bl	800c2bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	691a      	ldr	r2, [r3, #16]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	695a      	ldr	r2, [r3, #20]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68da      	ldr	r2, [r3, #12]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2220      	movs	r2, #32
 800b98c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2220      	movs	r2, #32
 800b994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b20      	cmp	r3, #32
 800b9c0:	d121      	bne.n	800ba06 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <HAL_UART_Transmit_IT+0x26>
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e01a      	b.n	800ba08 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	88fa      	ldrh	r2, [r7, #6]
 800b9e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2221      	movs	r2, #33	; 0x21
 800b9ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e000      	b.n	800ba08 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba06:	2302      	movs	r3, #2
  }
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bc80      	pop	{r7}
 800ba10:	4770      	bx	lr
	...

0800ba14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b0ba      	sub	sp, #232	; 0xe8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4a:	f003 030f 	and.w	r3, r3, #15
 800ba4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10f      	bne.n	800ba7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d009      	beq.n	800ba7a <HAL_UART_IRQHandler+0x66>
 800ba66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6a:	f003 0320 	and.w	r3, r3, #32
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fb63 	bl	800c13e <UART_Receive_IT>
      return;
 800ba78:	e25b      	b.n	800bf32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80de 	beq.w	800bc40 <HAL_UART_IRQHandler+0x22c>
 800ba84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 80d1 	beq.w	800bc40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00b      	beq.n	800bac2 <HAL_UART_IRQHandler+0xae>
 800baaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d005      	beq.n	800bac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baba:	f043 0201 	orr.w	r2, r3, #1
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac6:	f003 0304 	and.w	r3, r3, #4
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <HAL_UART_IRQHandler+0xd2>
 800bace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d005      	beq.n	800bae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	f043 0202 	orr.w	r2, r3, #2
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00b      	beq.n	800bb0a <HAL_UART_IRQHandler+0xf6>
 800baf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d005      	beq.n	800bb0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb02:	f043 0204 	orr.w	r2, r3, #4
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0e:	f003 0308 	and.w	r3, r3, #8
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d011      	beq.n	800bb3a <HAL_UART_IRQHandler+0x126>
 800bb16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1a:	f003 0320 	and.w	r3, r3, #32
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d105      	bne.n	800bb2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d005      	beq.n	800bb3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb32:	f043 0208 	orr.w	r2, r3, #8
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 81f2 	beq.w	800bf28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d008      	beq.n	800bb62 <HAL_UART_IRQHandler+0x14e>
 800bb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb54:	f003 0320 	and.w	r3, r3, #32
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 faee 	bl	800c13e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf14      	ite	ne
 800bb70:	2301      	movne	r3, #1
 800bb72:	2300      	moveq	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb7e:	f003 0308 	and.w	r3, r3, #8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d103      	bne.n	800bb8e <HAL_UART_IRQHandler+0x17a>
 800bb86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d04f      	beq.n	800bc2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f9f8 	bl	800bf84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d041      	beq.n	800bc26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3314      	adds	r3, #20
 800bba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3314      	adds	r3, #20
 800bbca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1d9      	bne.n	800bba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d013      	beq.n	800bc1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfa:	4a7e      	ldr	r2, [pc, #504]	; (800bdf4 <HAL_UART_IRQHandler+0x3e0>)
 800bbfc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fd f86c 	bl	8008ce0 <HAL_DMA_Abort_IT>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d016      	beq.n	800bc3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc1c:	e00e      	b.n	800bc3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f99c 	bl	800bf5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc24:	e00a      	b.n	800bc3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f998 	bl	800bf5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	e006      	b.n	800bc3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f994 	bl	800bf5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc3a:	e175      	b.n	800bf28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc3c:	bf00      	nop
    return;
 800bc3e:	e173      	b.n	800bf28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	f040 814f 	bne.w	800bee8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc4e:	f003 0310 	and.w	r3, r3, #16
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 8148 	beq.w	800bee8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc5c:	f003 0310 	and.w	r3, r3, #16
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 8141 	beq.w	800bee8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc66:	2300      	movs	r3, #0
 800bc68:	60bb      	str	r3, [r7, #8]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60bb      	str	r3, [r7, #8]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	60bb      	str	r3, [r7, #8]
 800bc7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f000 80b6 	beq.w	800bdf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 8145 	beq.w	800bf2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	f080 813e 	bcs.w	800bf2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	2b20      	cmp	r3, #32
 800bcc0:	f000 8088 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	330c      	adds	r3, #12
 800bcca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcd2:	e853 3f00 	ldrex	r3, [r3]
 800bcd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	330c      	adds	r3, #12
 800bcec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bcf0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bcf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1d9      	bne.n	800bcc4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3314      	adds	r3, #20
 800bd16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd1a:	e853 3f00 	ldrex	r3, [r3]
 800bd1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd22:	f023 0301 	bic.w	r3, r3, #1
 800bd26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3314      	adds	r3, #20
 800bd30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e1      	bne.n	800bd10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3314      	adds	r3, #20
 800bd52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3314      	adds	r3, #20
 800bd6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd70:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd78:	e841 2300 	strex	r3, r2, [r1]
 800bd7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e3      	bne.n	800bd4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2220      	movs	r2, #32
 800bd88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	330c      	adds	r3, #12
 800bd98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bda2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda4:	f023 0310 	bic.w	r3, r3, #16
 800bda8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	330c      	adds	r3, #12
 800bdb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bdb6:	65ba      	str	r2, [r7, #88]	; 0x58
 800bdb8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdbe:	e841 2300 	strex	r3, r2, [r1]
 800bdc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bdc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1e3      	bne.n	800bd92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fc ff4b 	bl	8008c6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f8bf 	bl	800bf6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdf0:	e09c      	b.n	800bf2c <HAL_UART_IRQHandler+0x518>
 800bdf2:	bf00      	nop
 800bdf4:	0800c049 	.word	0x0800c049
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be00:	b29b      	uxth	r3, r3
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 808e 	beq.w	800bf30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 8089 	beq.w	800bf30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	330c      	adds	r3, #12
 800be24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	330c      	adds	r3, #12
 800be3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be42:	647a      	str	r2, [r7, #68]	; 0x44
 800be44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be4a:	e841 2300 	strex	r3, r2, [r1]
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1e3      	bne.n	800be1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3314      	adds	r3, #20
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	e853 3f00 	ldrex	r3, [r3]
 800be64:	623b      	str	r3, [r7, #32]
   return(result);
 800be66:	6a3b      	ldr	r3, [r7, #32]
 800be68:	f023 0301 	bic.w	r3, r3, #1
 800be6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3314      	adds	r3, #20
 800be76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be7a:	633a      	str	r2, [r7, #48]	; 0x30
 800be7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be82:	e841 2300 	strex	r3, r2, [r1]
 800be86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1e3      	bne.n	800be56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2220      	movs	r2, #32
 800be92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	330c      	adds	r3, #12
 800bea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	e853 3f00 	ldrex	r3, [r3]
 800beaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f023 0310 	bic.w	r3, r3, #16
 800beb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	330c      	adds	r3, #12
 800bebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bec0:	61fa      	str	r2, [r7, #28]
 800bec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec4:	69b9      	ldr	r1, [r7, #24]
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	e841 2300 	strex	r3, r2, [r1]
 800becc:	617b      	str	r3, [r7, #20]
   return(result);
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e3      	bne.n	800be9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800beda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bede:	4619      	mov	r1, r3
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f844 	bl	800bf6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bee6:	e023      	b.n	800bf30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d009      	beq.n	800bf08 <HAL_UART_IRQHandler+0x4f4>
 800bef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f8b5 	bl	800c070 <UART_Transmit_IT>
    return;
 800bf06:	e014      	b.n	800bf32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00e      	beq.n	800bf32 <HAL_UART_IRQHandler+0x51e>
 800bf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d008      	beq.n	800bf32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f8f4 	bl	800c10e <UART_EndTransmit_IT>
    return;
 800bf26:	e004      	b.n	800bf32 <HAL_UART_IRQHandler+0x51e>
    return;
 800bf28:	bf00      	nop
 800bf2a:	e002      	b.n	800bf32 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf2c:	bf00      	nop
 800bf2e:	e000      	b.n	800bf32 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf30:	bf00      	nop
  }
}
 800bf32:	37e8      	adds	r7, #232	; 0xe8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr

0800bf4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf52:	bf00      	nop
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bc80      	pop	{r7}
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bc80      	pop	{r7}
 800bf6c:	4770      	bx	lr

0800bf6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	460b      	mov	r3, r1
 800bf78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf7a:	bf00      	nop
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bc80      	pop	{r7}
 800bf82:	4770      	bx	lr

0800bf84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b095      	sub	sp, #84	; 0x54
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfac:	643a      	str	r2, [r7, #64]	; 0x40
 800bfae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e5      	bne.n	800bf8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3314      	adds	r3, #20
 800bfc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	e853 3f00 	ldrex	r3, [r3]
 800bfce:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f023 0301 	bic.w	r3, r3, #1
 800bfd6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3314      	adds	r3, #20
 800bfde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfe8:	e841 2300 	strex	r3, r2, [r1]
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1e5      	bne.n	800bfc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d119      	bne.n	800c030 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	330c      	adds	r3, #12
 800c002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f023 0310 	bic.w	r3, r3, #16
 800c012:	647b      	str	r3, [r7, #68]	; 0x44
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	330c      	adds	r3, #12
 800c01a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c01c:	61ba      	str	r2, [r7, #24]
 800c01e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6979      	ldr	r1, [r7, #20]
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	613b      	str	r3, [r7, #16]
   return(result);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e5      	bne.n	800bffc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2220      	movs	r2, #32
 800c034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c03e:	bf00      	nop
 800c040:	3754      	adds	r7, #84	; 0x54
 800c042:	46bd      	mov	sp, r7
 800c044:	bc80      	pop	{r7}
 800c046:	4770      	bx	lr

0800c048 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff ff7a 	bl	800bf5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c068:	bf00      	nop
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b21      	cmp	r3, #33	; 0x21
 800c082:	d13e      	bne.n	800c102 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08c:	d114      	bne.n	800c0b8 <UART_Transmit_IT+0x48>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d110      	bne.n	800c0b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	881b      	ldrh	r3, [r3, #0]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a1b      	ldr	r3, [r3, #32]
 800c0b0:	1c9a      	adds	r2, r3, #2
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	621a      	str	r2, [r3, #32]
 800c0b6:	e008      	b.n	800c0ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	1c59      	adds	r1, r3, #1
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	6211      	str	r1, [r2, #32]
 800c0c2:	781a      	ldrb	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10f      	bne.n	800c0fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68da      	ldr	r2, [r3, #12]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68da      	ldr	r2, [r3, #12]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	e000      	b.n	800c104 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c102:	2302      	movs	r3, #2
  }
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	bc80      	pop	{r7}
 800c10c:	4770      	bx	lr

0800c10e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b082      	sub	sp, #8
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c124:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2220      	movs	r2, #32
 800c12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff ff02 	bl	800bf38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b08c      	sub	sp, #48	; 0x30
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b22      	cmp	r3, #34	; 0x22
 800c150:	f040 80ae 	bne.w	800c2b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c15c:	d117      	bne.n	800c18e <UART_Receive_IT+0x50>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d113      	bne.n	800c18e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c166:	2300      	movs	r3, #0
 800c168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	b29b      	uxth	r3, r3
 800c178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c180:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c186:	1c9a      	adds	r2, r3, #2
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	629a      	str	r2, [r3, #40]	; 0x28
 800c18c:	e026      	b.n	800c1dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c192:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c194:	2300      	movs	r3, #0
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a0:	d007      	beq.n	800c1b2 <UART_Receive_IT+0x74>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10a      	bne.n	800c1c0 <UART_Receive_IT+0x82>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	e008      	b.n	800c1d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d15d      	bne.n	800c2ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0220 	bic.w	r2, r2, #32
 800c1fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c20e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	695a      	ldr	r2, [r3, #20]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f022 0201 	bic.w	r2, r2, #1
 800c21e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2220      	movs	r2, #32
 800c224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	2b01      	cmp	r3, #1
 800c234:	d135      	bne.n	800c2a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	330c      	adds	r3, #12
 800c242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	e853 3f00 	ldrex	r3, [r3]
 800c24a:	613b      	str	r3, [r7, #16]
   return(result);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f023 0310 	bic.w	r3, r3, #16
 800c252:	627b      	str	r3, [r7, #36]	; 0x24
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	330c      	adds	r3, #12
 800c25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25c:	623a      	str	r2, [r7, #32]
 800c25e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	69f9      	ldr	r1, [r7, #28]
 800c262:	6a3a      	ldr	r2, [r7, #32]
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	61bb      	str	r3, [r7, #24]
   return(result);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e5      	bne.n	800c23c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 0310 	and.w	r3, r3, #16
 800c27a:	2b10      	cmp	r3, #16
 800c27c:	d10a      	bne.n	800c294 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fe67 	bl	800bf6e <HAL_UARTEx_RxEventCallback>
 800c2a0:	e002      	b.n	800c2a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fe51 	bl	800bf4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e002      	b.n	800c2b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e000      	b.n	800c2b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2b0:	2302      	movs	r3, #2
  }
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3730      	adds	r7, #48	; 0x30
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68da      	ldr	r2, [r3, #12]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	430a      	orrs	r2, r1
 800c2d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	689a      	ldr	r2, [r3, #8]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2f6:	f023 030c 	bic.w	r3, r3, #12
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6812      	ldr	r2, [r2, #0]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	430b      	orrs	r3, r1
 800c302:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	699a      	ldr	r2, [r3, #24]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	430a      	orrs	r2, r1
 800c318:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a2c      	ldr	r2, [pc, #176]	; (800c3d0 <UART_SetConfig+0x114>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d103      	bne.n	800c32c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c324:	f7fe fe8c 	bl	800b040 <HAL_RCC_GetPCLK2Freq>
 800c328:	60f8      	str	r0, [r7, #12]
 800c32a:	e002      	b.n	800c332 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c32c:	f7fe fe74 	bl	800b018 <HAL_RCC_GetPCLK1Freq>
 800c330:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009a      	lsls	r2, r3, #2
 800c33c:	441a      	add	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	fbb2 f3f3 	udiv	r3, r2, r3
 800c348:	4a22      	ldr	r2, [pc, #136]	; (800c3d4 <UART_SetConfig+0x118>)
 800c34a:	fba2 2303 	umull	r2, r3, r2, r3
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	0119      	lsls	r1, r3, #4
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4613      	mov	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	009a      	lsls	r2, r3, #2
 800c35c:	441a      	add	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	fbb2 f2f3 	udiv	r2, r2, r3
 800c368:	4b1a      	ldr	r3, [pc, #104]	; (800c3d4 <UART_SetConfig+0x118>)
 800c36a:	fba3 0302 	umull	r0, r3, r3, r2
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	2064      	movs	r0, #100	; 0x64
 800c372:	fb00 f303 	mul.w	r3, r0, r3
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	011b      	lsls	r3, r3, #4
 800c37a:	3332      	adds	r3, #50	; 0x32
 800c37c:	4a15      	ldr	r2, [pc, #84]	; (800c3d4 <UART_SetConfig+0x118>)
 800c37e:	fba2 2303 	umull	r2, r3, r2, r3
 800c382:	095b      	lsrs	r3, r3, #5
 800c384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c388:	4419      	add	r1, r3
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	009a      	lsls	r2, r3, #2
 800c394:	441a      	add	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <UART_SetConfig+0x118>)
 800c3a2:	fba3 0302 	umull	r0, r3, r3, r2
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	2064      	movs	r0, #100	; 0x64
 800c3aa:	fb00 f303 	mul.w	r3, r0, r3
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	011b      	lsls	r3, r3, #4
 800c3b2:	3332      	adds	r3, #50	; 0x32
 800c3b4:	4a07      	ldr	r2, [pc, #28]	; (800c3d4 <UART_SetConfig+0x118>)
 800c3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	f003 020f 	and.w	r2, r3, #15
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	440a      	add	r2, r1
 800c3c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3c8:	bf00      	nop
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	40013800 	.word	0x40013800
 800c3d4:	51eb851f 	.word	0x51eb851f

0800c3d8 <__itoa>:
 800c3d8:	1e93      	subs	r3, r2, #2
 800c3da:	2b22      	cmp	r3, #34	; 0x22
 800c3dc:	b510      	push	{r4, lr}
 800c3de:	460c      	mov	r4, r1
 800c3e0:	d904      	bls.n	800c3ec <__itoa+0x14>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	461c      	mov	r4, r3
 800c3e6:	700b      	strb	r3, [r1, #0]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	bd10      	pop	{r4, pc}
 800c3ec:	2a0a      	cmp	r2, #10
 800c3ee:	d109      	bne.n	800c404 <__itoa+0x2c>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	da07      	bge.n	800c404 <__itoa+0x2c>
 800c3f4:	232d      	movs	r3, #45	; 0x2d
 800c3f6:	700b      	strb	r3, [r1, #0]
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	4240      	negs	r0, r0
 800c3fc:	4421      	add	r1, r4
 800c3fe:	f000 f8d9 	bl	800c5b4 <__utoa>
 800c402:	e7f1      	b.n	800c3e8 <__itoa+0x10>
 800c404:	2100      	movs	r1, #0
 800c406:	e7f9      	b.n	800c3fc <__itoa+0x24>

0800c408 <itoa>:
 800c408:	f7ff bfe6 	b.w	800c3d8 <__itoa>

0800c40c <malloc>:
 800c40c:	4b02      	ldr	r3, [pc, #8]	; (800c418 <malloc+0xc>)
 800c40e:	4601      	mov	r1, r0
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	f000 b823 	b.w	800c45c <_malloc_r>
 800c416:	bf00      	nop
 800c418:	20000108 	.word	0x20000108

0800c41c <sbrk_aligned>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	4e0e      	ldr	r6, [pc, #56]	; (800c458 <sbrk_aligned+0x3c>)
 800c420:	460c      	mov	r4, r1
 800c422:	6831      	ldr	r1, [r6, #0]
 800c424:	4605      	mov	r5, r0
 800c426:	b911      	cbnz	r1, 800c42e <sbrk_aligned+0x12>
 800c428:	f000 f91e 	bl	800c668 <_sbrk_r>
 800c42c:	6030      	str	r0, [r6, #0]
 800c42e:	4621      	mov	r1, r4
 800c430:	4628      	mov	r0, r5
 800c432:	f000 f919 	bl	800c668 <_sbrk_r>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	d00a      	beq.n	800c450 <sbrk_aligned+0x34>
 800c43a:	1cc4      	adds	r4, r0, #3
 800c43c:	f024 0403 	bic.w	r4, r4, #3
 800c440:	42a0      	cmp	r0, r4
 800c442:	d007      	beq.n	800c454 <sbrk_aligned+0x38>
 800c444:	1a21      	subs	r1, r4, r0
 800c446:	4628      	mov	r0, r5
 800c448:	f000 f90e 	bl	800c668 <_sbrk_r>
 800c44c:	3001      	adds	r0, #1
 800c44e:	d101      	bne.n	800c454 <sbrk_aligned+0x38>
 800c450:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c454:	4620      	mov	r0, r4
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	2000049c 	.word	0x2000049c

0800c45c <_malloc_r>:
 800c45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c460:	1ccd      	adds	r5, r1, #3
 800c462:	f025 0503 	bic.w	r5, r5, #3
 800c466:	3508      	adds	r5, #8
 800c468:	2d0c      	cmp	r5, #12
 800c46a:	bf38      	it	cc
 800c46c:	250c      	movcc	r5, #12
 800c46e:	2d00      	cmp	r5, #0
 800c470:	4607      	mov	r7, r0
 800c472:	db01      	blt.n	800c478 <_malloc_r+0x1c>
 800c474:	42a9      	cmp	r1, r5
 800c476:	d905      	bls.n	800c484 <_malloc_r+0x28>
 800c478:	230c      	movs	r3, #12
 800c47a:	2600      	movs	r6, #0
 800c47c:	603b      	str	r3, [r7, #0]
 800c47e:	4630      	mov	r0, r6
 800c480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c484:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c558 <_malloc_r+0xfc>
 800c488:	f000 f868 	bl	800c55c <__malloc_lock>
 800c48c:	f8d8 3000 	ldr.w	r3, [r8]
 800c490:	461c      	mov	r4, r3
 800c492:	bb5c      	cbnz	r4, 800c4ec <_malloc_r+0x90>
 800c494:	4629      	mov	r1, r5
 800c496:	4638      	mov	r0, r7
 800c498:	f7ff ffc0 	bl	800c41c <sbrk_aligned>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	4604      	mov	r4, r0
 800c4a0:	d155      	bne.n	800c54e <_malloc_r+0xf2>
 800c4a2:	f8d8 4000 	ldr.w	r4, [r8]
 800c4a6:	4626      	mov	r6, r4
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	d145      	bne.n	800c538 <_malloc_r+0xdc>
 800c4ac:	2c00      	cmp	r4, #0
 800c4ae:	d048      	beq.n	800c542 <_malloc_r+0xe6>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	eb04 0903 	add.w	r9, r4, r3
 800c4ba:	f000 f8d5 	bl	800c668 <_sbrk_r>
 800c4be:	4581      	cmp	r9, r0
 800c4c0:	d13f      	bne.n	800c542 <_malloc_r+0xe6>
 800c4c2:	6821      	ldr	r1, [r4, #0]
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	1a6d      	subs	r5, r5, r1
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7ff ffa7 	bl	800c41c <sbrk_aligned>
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	d037      	beq.n	800c542 <_malloc_r+0xe6>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	442b      	add	r3, r5
 800c4d6:	6023      	str	r3, [r4, #0]
 800c4d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d038      	beq.n	800c552 <_malloc_r+0xf6>
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	42a2      	cmp	r2, r4
 800c4e4:	d12b      	bne.n	800c53e <_malloc_r+0xe2>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	605a      	str	r2, [r3, #4]
 800c4ea:	e00f      	b.n	800c50c <_malloc_r+0xb0>
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	1b52      	subs	r2, r2, r5
 800c4f0:	d41f      	bmi.n	800c532 <_malloc_r+0xd6>
 800c4f2:	2a0b      	cmp	r2, #11
 800c4f4:	d917      	bls.n	800c526 <_malloc_r+0xca>
 800c4f6:	1961      	adds	r1, r4, r5
 800c4f8:	42a3      	cmp	r3, r4
 800c4fa:	6025      	str	r5, [r4, #0]
 800c4fc:	bf18      	it	ne
 800c4fe:	6059      	strne	r1, [r3, #4]
 800c500:	6863      	ldr	r3, [r4, #4]
 800c502:	bf08      	it	eq
 800c504:	f8c8 1000 	streq.w	r1, [r8]
 800c508:	5162      	str	r2, [r4, r5]
 800c50a:	604b      	str	r3, [r1, #4]
 800c50c:	4638      	mov	r0, r7
 800c50e:	f104 060b 	add.w	r6, r4, #11
 800c512:	f000 f829 	bl	800c568 <__malloc_unlock>
 800c516:	f026 0607 	bic.w	r6, r6, #7
 800c51a:	1d23      	adds	r3, r4, #4
 800c51c:	1af2      	subs	r2, r6, r3
 800c51e:	d0ae      	beq.n	800c47e <_malloc_r+0x22>
 800c520:	1b9b      	subs	r3, r3, r6
 800c522:	50a3      	str	r3, [r4, r2]
 800c524:	e7ab      	b.n	800c47e <_malloc_r+0x22>
 800c526:	42a3      	cmp	r3, r4
 800c528:	6862      	ldr	r2, [r4, #4]
 800c52a:	d1dd      	bne.n	800c4e8 <_malloc_r+0x8c>
 800c52c:	f8c8 2000 	str.w	r2, [r8]
 800c530:	e7ec      	b.n	800c50c <_malloc_r+0xb0>
 800c532:	4623      	mov	r3, r4
 800c534:	6864      	ldr	r4, [r4, #4]
 800c536:	e7ac      	b.n	800c492 <_malloc_r+0x36>
 800c538:	4634      	mov	r4, r6
 800c53a:	6876      	ldr	r6, [r6, #4]
 800c53c:	e7b4      	b.n	800c4a8 <_malloc_r+0x4c>
 800c53e:	4613      	mov	r3, r2
 800c540:	e7cc      	b.n	800c4dc <_malloc_r+0x80>
 800c542:	230c      	movs	r3, #12
 800c544:	4638      	mov	r0, r7
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	f000 f80e 	bl	800c568 <__malloc_unlock>
 800c54c:	e797      	b.n	800c47e <_malloc_r+0x22>
 800c54e:	6025      	str	r5, [r4, #0]
 800c550:	e7dc      	b.n	800c50c <_malloc_r+0xb0>
 800c552:	605b      	str	r3, [r3, #4]
 800c554:	deff      	udf	#255	; 0xff
 800c556:	bf00      	nop
 800c558:	20000498 	.word	0x20000498

0800c55c <__malloc_lock>:
 800c55c:	4801      	ldr	r0, [pc, #4]	; (800c564 <__malloc_lock+0x8>)
 800c55e:	f000 b8bd 	b.w	800c6dc <__retarget_lock_acquire_recursive>
 800c562:	bf00      	nop
 800c564:	200005d8 	.word	0x200005d8

0800c568 <__malloc_unlock>:
 800c568:	4801      	ldr	r0, [pc, #4]	; (800c570 <__malloc_unlock+0x8>)
 800c56a:	f000 b8b8 	b.w	800c6de <__retarget_lock_release_recursive>
 800c56e:	bf00      	nop
 800c570:	200005d8 	.word	0x200005d8

0800c574 <siprintf>:
 800c574:	b40e      	push	{r1, r2, r3}
 800c576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c57a:	b500      	push	{lr}
 800c57c:	b09c      	sub	sp, #112	; 0x70
 800c57e:	ab1d      	add	r3, sp, #116	; 0x74
 800c580:	9002      	str	r0, [sp, #8]
 800c582:	9006      	str	r0, [sp, #24]
 800c584:	9107      	str	r1, [sp, #28]
 800c586:	9104      	str	r1, [sp, #16]
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <siprintf+0x38>)
 800c58a:	4909      	ldr	r1, [pc, #36]	; (800c5b0 <siprintf+0x3c>)
 800c58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c590:	9105      	str	r1, [sp, #20]
 800c592:	6800      	ldr	r0, [r0, #0]
 800c594:	a902      	add	r1, sp, #8
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	f000 f94c 	bl	800c834 <_svfiprintf_r>
 800c59c:	2200      	movs	r2, #0
 800c59e:	9b02      	ldr	r3, [sp, #8]
 800c5a0:	701a      	strb	r2, [r3, #0]
 800c5a2:	b01c      	add	sp, #112	; 0x70
 800c5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	4770      	bx	lr
 800c5ac:	20000108 	.word	0x20000108
 800c5b0:	ffff0208 	.word	0xffff0208

0800c5b4 <__utoa>:
 800c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b6:	b08b      	sub	sp, #44	; 0x2c
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	466e      	mov	r6, sp
 800c5be:	4c1d      	ldr	r4, [pc, #116]	; (800c634 <__utoa+0x80>)
 800c5c0:	f104 0c20 	add.w	ip, r4, #32
 800c5c4:	4637      	mov	r7, r6
 800c5c6:	6820      	ldr	r0, [r4, #0]
 800c5c8:	6861      	ldr	r1, [r4, #4]
 800c5ca:	3408      	adds	r4, #8
 800c5cc:	c703      	stmia	r7!, {r0, r1}
 800c5ce:	4564      	cmp	r4, ip
 800c5d0:	463e      	mov	r6, r7
 800c5d2:	d1f7      	bne.n	800c5c4 <__utoa+0x10>
 800c5d4:	7921      	ldrb	r1, [r4, #4]
 800c5d6:	6820      	ldr	r0, [r4, #0]
 800c5d8:	7139      	strb	r1, [r7, #4]
 800c5da:	1e91      	subs	r1, r2, #2
 800c5dc:	2922      	cmp	r1, #34	; 0x22
 800c5de:	6038      	str	r0, [r7, #0]
 800c5e0:	f04f 0100 	mov.w	r1, #0
 800c5e4:	d904      	bls.n	800c5f0 <__utoa+0x3c>
 800c5e6:	7019      	strb	r1, [r3, #0]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	b00b      	add	sp, #44	; 0x2c
 800c5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f0:	1e58      	subs	r0, r3, #1
 800c5f2:	4684      	mov	ip, r0
 800c5f4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5f8:	fb02 5617 	mls	r6, r2, r7, r5
 800c5fc:	3628      	adds	r6, #40	; 0x28
 800c5fe:	446e      	add	r6, sp
 800c600:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c604:	460c      	mov	r4, r1
 800c606:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c60a:	462e      	mov	r6, r5
 800c60c:	42b2      	cmp	r2, r6
 800c60e:	463d      	mov	r5, r7
 800c610:	f101 0101 	add.w	r1, r1, #1
 800c614:	d9ee      	bls.n	800c5f4 <__utoa+0x40>
 800c616:	2200      	movs	r2, #0
 800c618:	545a      	strb	r2, [r3, r1]
 800c61a:	1919      	adds	r1, r3, r4
 800c61c:	1aa5      	subs	r5, r4, r2
 800c61e:	42aa      	cmp	r2, r5
 800c620:	dae3      	bge.n	800c5ea <__utoa+0x36>
 800c622:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c626:	780e      	ldrb	r6, [r1, #0]
 800c628:	3201      	adds	r2, #1
 800c62a:	7006      	strb	r6, [r0, #0]
 800c62c:	f801 5901 	strb.w	r5, [r1], #-1
 800c630:	e7f4      	b.n	800c61c <__utoa+0x68>
 800c632:	bf00      	nop
 800c634:	0800de2e 	.word	0x0800de2e

0800c638 <strcat>:
 800c638:	4602      	mov	r2, r0
 800c63a:	b510      	push	{r4, lr}
 800c63c:	7814      	ldrb	r4, [r2, #0]
 800c63e:	4613      	mov	r3, r2
 800c640:	3201      	adds	r2, #1
 800c642:	2c00      	cmp	r4, #0
 800c644:	d1fa      	bne.n	800c63c <strcat+0x4>
 800c646:	3b01      	subs	r3, #1
 800c648:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c64c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c650:	2a00      	cmp	r2, #0
 800c652:	d1f9      	bne.n	800c648 <strcat+0x10>
 800c654:	bd10      	pop	{r4, pc}

0800c656 <memset>:
 800c656:	4603      	mov	r3, r0
 800c658:	4402      	add	r2, r0
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d100      	bne.n	800c660 <memset+0xa>
 800c65e:	4770      	bx	lr
 800c660:	f803 1b01 	strb.w	r1, [r3], #1
 800c664:	e7f9      	b.n	800c65a <memset+0x4>
	...

0800c668 <_sbrk_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	2300      	movs	r3, #0
 800c66c:	4d05      	ldr	r5, [pc, #20]	; (800c684 <_sbrk_r+0x1c>)
 800c66e:	4604      	mov	r4, r0
 800c670:	4608      	mov	r0, r1
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	f7fc f808 	bl	8008688 <_sbrk>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_sbrk_r+0x1a>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_sbrk_r+0x1a>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	200005dc 	.word	0x200005dc

0800c688 <__errno>:
 800c688:	4b01      	ldr	r3, [pc, #4]	; (800c690 <__errno+0x8>)
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	20000108 	.word	0x20000108

0800c694 <__libc_init_array>:
 800c694:	b570      	push	{r4, r5, r6, lr}
 800c696:	2600      	movs	r6, #0
 800c698:	4d0c      	ldr	r5, [pc, #48]	; (800c6cc <__libc_init_array+0x38>)
 800c69a:	4c0d      	ldr	r4, [pc, #52]	; (800c6d0 <__libc_init_array+0x3c>)
 800c69c:	1b64      	subs	r4, r4, r5
 800c69e:	10a4      	asrs	r4, r4, #2
 800c6a0:	42a6      	cmp	r6, r4
 800c6a2:	d109      	bne.n	800c6b8 <__libc_init_array+0x24>
 800c6a4:	f000 fbc6 	bl	800ce34 <_init>
 800c6a8:	2600      	movs	r6, #0
 800c6aa:	4d0a      	ldr	r5, [pc, #40]	; (800c6d4 <__libc_init_array+0x40>)
 800c6ac:	4c0a      	ldr	r4, [pc, #40]	; (800c6d8 <__libc_init_array+0x44>)
 800c6ae:	1b64      	subs	r4, r4, r5
 800c6b0:	10a4      	asrs	r4, r4, #2
 800c6b2:	42a6      	cmp	r6, r4
 800c6b4:	d105      	bne.n	800c6c2 <__libc_init_array+0x2e>
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6bc:	4798      	blx	r3
 800c6be:	3601      	adds	r6, #1
 800c6c0:	e7ee      	b.n	800c6a0 <__libc_init_array+0xc>
 800c6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6c6:	4798      	blx	r3
 800c6c8:	3601      	adds	r6, #1
 800c6ca:	e7f2      	b.n	800c6b2 <__libc_init_array+0x1e>
 800c6cc:	0800de88 	.word	0x0800de88
 800c6d0:	0800de88 	.word	0x0800de88
 800c6d4:	0800de88 	.word	0x0800de88
 800c6d8:	0800de8c 	.word	0x0800de8c

0800c6dc <__retarget_lock_acquire_recursive>:
 800c6dc:	4770      	bx	lr

0800c6de <__retarget_lock_release_recursive>:
 800c6de:	4770      	bx	lr

0800c6e0 <strcpy>:
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e6:	f803 2b01 	strb.w	r2, [r3], #1
 800c6ea:	2a00      	cmp	r2, #0
 800c6ec:	d1f9      	bne.n	800c6e2 <strcpy+0x2>
 800c6ee:	4770      	bx	lr

0800c6f0 <_free_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	d040      	beq.n	800c77a <_free_r+0x8a>
 800c6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6fc:	1f0c      	subs	r4, r1, #4
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfb8      	it	lt
 800c702:	18e4      	addlt	r4, r4, r3
 800c704:	f7ff ff2a 	bl	800c55c <__malloc_lock>
 800c708:	4a1c      	ldr	r2, [pc, #112]	; (800c77c <_free_r+0x8c>)
 800c70a:	6813      	ldr	r3, [r2, #0]
 800c70c:	b933      	cbnz	r3, 800c71c <_free_r+0x2c>
 800c70e:	6063      	str	r3, [r4, #4]
 800c710:	6014      	str	r4, [r2, #0]
 800c712:	4628      	mov	r0, r5
 800c714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c718:	f7ff bf26 	b.w	800c568 <__malloc_unlock>
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	d908      	bls.n	800c732 <_free_r+0x42>
 800c720:	6820      	ldr	r0, [r4, #0]
 800c722:	1821      	adds	r1, r4, r0
 800c724:	428b      	cmp	r3, r1
 800c726:	bf01      	itttt	eq
 800c728:	6819      	ldreq	r1, [r3, #0]
 800c72a:	685b      	ldreq	r3, [r3, #4]
 800c72c:	1809      	addeq	r1, r1, r0
 800c72e:	6021      	streq	r1, [r4, #0]
 800c730:	e7ed      	b.n	800c70e <_free_r+0x1e>
 800c732:	461a      	mov	r2, r3
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	b10b      	cbz	r3, 800c73c <_free_r+0x4c>
 800c738:	42a3      	cmp	r3, r4
 800c73a:	d9fa      	bls.n	800c732 <_free_r+0x42>
 800c73c:	6811      	ldr	r1, [r2, #0]
 800c73e:	1850      	adds	r0, r2, r1
 800c740:	42a0      	cmp	r0, r4
 800c742:	d10b      	bne.n	800c75c <_free_r+0x6c>
 800c744:	6820      	ldr	r0, [r4, #0]
 800c746:	4401      	add	r1, r0
 800c748:	1850      	adds	r0, r2, r1
 800c74a:	4283      	cmp	r3, r0
 800c74c:	6011      	str	r1, [r2, #0]
 800c74e:	d1e0      	bne.n	800c712 <_free_r+0x22>
 800c750:	6818      	ldr	r0, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	4408      	add	r0, r1
 800c756:	6010      	str	r0, [r2, #0]
 800c758:	6053      	str	r3, [r2, #4]
 800c75a:	e7da      	b.n	800c712 <_free_r+0x22>
 800c75c:	d902      	bls.n	800c764 <_free_r+0x74>
 800c75e:	230c      	movs	r3, #12
 800c760:	602b      	str	r3, [r5, #0]
 800c762:	e7d6      	b.n	800c712 <_free_r+0x22>
 800c764:	6820      	ldr	r0, [r4, #0]
 800c766:	1821      	adds	r1, r4, r0
 800c768:	428b      	cmp	r3, r1
 800c76a:	bf01      	itttt	eq
 800c76c:	6819      	ldreq	r1, [r3, #0]
 800c76e:	685b      	ldreq	r3, [r3, #4]
 800c770:	1809      	addeq	r1, r1, r0
 800c772:	6021      	streq	r1, [r4, #0]
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	6054      	str	r4, [r2, #4]
 800c778:	e7cb      	b.n	800c712 <_free_r+0x22>
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	20000498 	.word	0x20000498

0800c780 <__ssputs_r>:
 800c780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c784:	461f      	mov	r7, r3
 800c786:	688e      	ldr	r6, [r1, #8]
 800c788:	4682      	mov	sl, r0
 800c78a:	42be      	cmp	r6, r7
 800c78c:	460c      	mov	r4, r1
 800c78e:	4690      	mov	r8, r2
 800c790:	680b      	ldr	r3, [r1, #0]
 800c792:	d82c      	bhi.n	800c7ee <__ssputs_r+0x6e>
 800c794:	898a      	ldrh	r2, [r1, #12]
 800c796:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c79a:	d026      	beq.n	800c7ea <__ssputs_r+0x6a>
 800c79c:	6965      	ldr	r5, [r4, #20]
 800c79e:	6909      	ldr	r1, [r1, #16]
 800c7a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7a4:	eba3 0901 	sub.w	r9, r3, r1
 800c7a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7ac:	1c7b      	adds	r3, r7, #1
 800c7ae:	444b      	add	r3, r9
 800c7b0:	106d      	asrs	r5, r5, #1
 800c7b2:	429d      	cmp	r5, r3
 800c7b4:	bf38      	it	cc
 800c7b6:	461d      	movcc	r5, r3
 800c7b8:	0553      	lsls	r3, r2, #21
 800c7ba:	d527      	bpl.n	800c80c <__ssputs_r+0x8c>
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f7ff fe4d 	bl	800c45c <_malloc_r>
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	b360      	cbz	r0, 800c820 <__ssputs_r+0xa0>
 800c7c6:	464a      	mov	r2, r9
 800c7c8:	6921      	ldr	r1, [r4, #16]
 800c7ca:	f000 fb1c 	bl	800ce06 <memcpy>
 800c7ce:	89a3      	ldrh	r3, [r4, #12]
 800c7d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	6126      	str	r6, [r4, #16]
 800c7dc:	444e      	add	r6, r9
 800c7de:	6026      	str	r6, [r4, #0]
 800c7e0:	463e      	mov	r6, r7
 800c7e2:	6165      	str	r5, [r4, #20]
 800c7e4:	eba5 0509 	sub.w	r5, r5, r9
 800c7e8:	60a5      	str	r5, [r4, #8]
 800c7ea:	42be      	cmp	r6, r7
 800c7ec:	d900      	bls.n	800c7f0 <__ssputs_r+0x70>
 800c7ee:	463e      	mov	r6, r7
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	4641      	mov	r1, r8
 800c7f4:	6820      	ldr	r0, [r4, #0]
 800c7f6:	f000 fade 	bl	800cdb6 <memmove>
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	68a3      	ldr	r3, [r4, #8]
 800c7fe:	1b9b      	subs	r3, r3, r6
 800c800:	60a3      	str	r3, [r4, #8]
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	4433      	add	r3, r6
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c80c:	462a      	mov	r2, r5
 800c80e:	f000 faa3 	bl	800cd58 <_realloc_r>
 800c812:	4606      	mov	r6, r0
 800c814:	2800      	cmp	r0, #0
 800c816:	d1e0      	bne.n	800c7da <__ssputs_r+0x5a>
 800c818:	4650      	mov	r0, sl
 800c81a:	6921      	ldr	r1, [r4, #16]
 800c81c:	f7ff ff68 	bl	800c6f0 <_free_r>
 800c820:	230c      	movs	r3, #12
 800c822:	f8ca 3000 	str.w	r3, [sl]
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	e7e9      	b.n	800c808 <__ssputs_r+0x88>

0800c834 <_svfiprintf_r>:
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	4698      	mov	r8, r3
 800c83a:	898b      	ldrh	r3, [r1, #12]
 800c83c:	4607      	mov	r7, r0
 800c83e:	061b      	lsls	r3, r3, #24
 800c840:	460d      	mov	r5, r1
 800c842:	4614      	mov	r4, r2
 800c844:	b09d      	sub	sp, #116	; 0x74
 800c846:	d50e      	bpl.n	800c866 <_svfiprintf_r+0x32>
 800c848:	690b      	ldr	r3, [r1, #16]
 800c84a:	b963      	cbnz	r3, 800c866 <_svfiprintf_r+0x32>
 800c84c:	2140      	movs	r1, #64	; 0x40
 800c84e:	f7ff fe05 	bl	800c45c <_malloc_r>
 800c852:	6028      	str	r0, [r5, #0]
 800c854:	6128      	str	r0, [r5, #16]
 800c856:	b920      	cbnz	r0, 800c862 <_svfiprintf_r+0x2e>
 800c858:	230c      	movs	r3, #12
 800c85a:	603b      	str	r3, [r7, #0]
 800c85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c860:	e0d0      	b.n	800ca04 <_svfiprintf_r+0x1d0>
 800c862:	2340      	movs	r3, #64	; 0x40
 800c864:	616b      	str	r3, [r5, #20]
 800c866:	2300      	movs	r3, #0
 800c868:	9309      	str	r3, [sp, #36]	; 0x24
 800c86a:	2320      	movs	r3, #32
 800c86c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c870:	2330      	movs	r3, #48	; 0x30
 800c872:	f04f 0901 	mov.w	r9, #1
 800c876:	f8cd 800c 	str.w	r8, [sp, #12]
 800c87a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca1c <_svfiprintf_r+0x1e8>
 800c87e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c882:	4623      	mov	r3, r4
 800c884:	469a      	mov	sl, r3
 800c886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88a:	b10a      	cbz	r2, 800c890 <_svfiprintf_r+0x5c>
 800c88c:	2a25      	cmp	r2, #37	; 0x25
 800c88e:	d1f9      	bne.n	800c884 <_svfiprintf_r+0x50>
 800c890:	ebba 0b04 	subs.w	fp, sl, r4
 800c894:	d00b      	beq.n	800c8ae <_svfiprintf_r+0x7a>
 800c896:	465b      	mov	r3, fp
 800c898:	4622      	mov	r2, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff ff6f 	bl	800c780 <__ssputs_r>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	f000 80a9 	beq.w	800c9fa <_svfiprintf_r+0x1c6>
 800c8a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8aa:	445a      	add	r2, fp
 800c8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 80a1 	beq.w	800c9fa <_svfiprintf_r+0x1c6>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c2:	f10a 0a01 	add.w	sl, sl, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	9307      	str	r3, [sp, #28]
 800c8ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c8d0:	4654      	mov	r4, sl
 800c8d2:	2205      	movs	r2, #5
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	4850      	ldr	r0, [pc, #320]	; (800ca1c <_svfiprintf_r+0x1e8>)
 800c8da:	f000 fa86 	bl	800cdea <memchr>
 800c8de:	9a04      	ldr	r2, [sp, #16]
 800c8e0:	b9d8      	cbnz	r0, 800c91a <_svfiprintf_r+0xe6>
 800c8e2:	06d0      	lsls	r0, r2, #27
 800c8e4:	bf44      	itt	mi
 800c8e6:	2320      	movmi	r3, #32
 800c8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ec:	0711      	lsls	r1, r2, #28
 800c8ee:	bf44      	itt	mi
 800c8f0:	232b      	movmi	r3, #43	; 0x2b
 800c8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fc:	d015      	beq.n	800c92a <_svfiprintf_r+0xf6>
 800c8fe:	4654      	mov	r4, sl
 800c900:	2000      	movs	r0, #0
 800c902:	f04f 0c0a 	mov.w	ip, #10
 800c906:	9a07      	ldr	r2, [sp, #28]
 800c908:	4621      	mov	r1, r4
 800c90a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c90e:	3b30      	subs	r3, #48	; 0x30
 800c910:	2b09      	cmp	r3, #9
 800c912:	d94d      	bls.n	800c9b0 <_svfiprintf_r+0x17c>
 800c914:	b1b0      	cbz	r0, 800c944 <_svfiprintf_r+0x110>
 800c916:	9207      	str	r2, [sp, #28]
 800c918:	e014      	b.n	800c944 <_svfiprintf_r+0x110>
 800c91a:	eba0 0308 	sub.w	r3, r0, r8
 800c91e:	fa09 f303 	lsl.w	r3, r9, r3
 800c922:	4313      	orrs	r3, r2
 800c924:	46a2      	mov	sl, r4
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	e7d2      	b.n	800c8d0 <_svfiprintf_r+0x9c>
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	1d19      	adds	r1, r3, #4
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	9103      	str	r1, [sp, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfbb      	ittet	lt
 800c936:	425b      	neglt	r3, r3
 800c938:	f042 0202 	orrlt.w	r2, r2, #2
 800c93c:	9307      	strge	r3, [sp, #28]
 800c93e:	9307      	strlt	r3, [sp, #28]
 800c940:	bfb8      	it	lt
 800c942:	9204      	strlt	r2, [sp, #16]
 800c944:	7823      	ldrb	r3, [r4, #0]
 800c946:	2b2e      	cmp	r3, #46	; 0x2e
 800c948:	d10c      	bne.n	800c964 <_svfiprintf_r+0x130>
 800c94a:	7863      	ldrb	r3, [r4, #1]
 800c94c:	2b2a      	cmp	r3, #42	; 0x2a
 800c94e:	d134      	bne.n	800c9ba <_svfiprintf_r+0x186>
 800c950:	9b03      	ldr	r3, [sp, #12]
 800c952:	3402      	adds	r4, #2
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9203      	str	r2, [sp, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfb8      	it	lt
 800c95e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca20 <_svfiprintf_r+0x1ec>
 800c968:	2203      	movs	r2, #3
 800c96a:	4650      	mov	r0, sl
 800c96c:	7821      	ldrb	r1, [r4, #0]
 800c96e:	f000 fa3c 	bl	800cdea <memchr>
 800c972:	b138      	cbz	r0, 800c984 <_svfiprintf_r+0x150>
 800c974:	2240      	movs	r2, #64	; 0x40
 800c976:	9b04      	ldr	r3, [sp, #16]
 800c978:	eba0 000a 	sub.w	r0, r0, sl
 800c97c:	4082      	lsls	r2, r0
 800c97e:	4313      	orrs	r3, r2
 800c980:	3401      	adds	r4, #1
 800c982:	9304      	str	r3, [sp, #16]
 800c984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c988:	2206      	movs	r2, #6
 800c98a:	4826      	ldr	r0, [pc, #152]	; (800ca24 <_svfiprintf_r+0x1f0>)
 800c98c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c990:	f000 fa2b 	bl	800cdea <memchr>
 800c994:	2800      	cmp	r0, #0
 800c996:	d038      	beq.n	800ca0a <_svfiprintf_r+0x1d6>
 800c998:	4b23      	ldr	r3, [pc, #140]	; (800ca28 <_svfiprintf_r+0x1f4>)
 800c99a:	bb1b      	cbnz	r3, 800c9e4 <_svfiprintf_r+0x1b0>
 800c99c:	9b03      	ldr	r3, [sp, #12]
 800c99e:	3307      	adds	r3, #7
 800c9a0:	f023 0307 	bic.w	r3, r3, #7
 800c9a4:	3308      	adds	r3, #8
 800c9a6:	9303      	str	r3, [sp, #12]
 800c9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9aa:	4433      	add	r3, r6
 800c9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ae:	e768      	b.n	800c882 <_svfiprintf_r+0x4e>
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	2001      	movs	r0, #1
 800c9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b8:	e7a6      	b.n	800c908 <_svfiprintf_r+0xd4>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f04f 0c0a 	mov.w	ip, #10
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	3401      	adds	r4, #1
 800c9c4:	9305      	str	r3, [sp, #20]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9cc:	3a30      	subs	r2, #48	; 0x30
 800c9ce:	2a09      	cmp	r2, #9
 800c9d0:	d903      	bls.n	800c9da <_svfiprintf_r+0x1a6>
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0c6      	beq.n	800c964 <_svfiprintf_r+0x130>
 800c9d6:	9105      	str	r1, [sp, #20]
 800c9d8:	e7c4      	b.n	800c964 <_svfiprintf_r+0x130>
 800c9da:	4604      	mov	r4, r0
 800c9dc:	2301      	movs	r3, #1
 800c9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9e2:	e7f0      	b.n	800c9c6 <_svfiprintf_r+0x192>
 800c9e4:	ab03      	add	r3, sp, #12
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <_svfiprintf_r+0x1f8>)
 800c9ee:	a904      	add	r1, sp, #16
 800c9f0:	f3af 8000 	nop.w
 800c9f4:	1c42      	adds	r2, r0, #1
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	d1d6      	bne.n	800c9a8 <_svfiprintf_r+0x174>
 800c9fa:	89ab      	ldrh	r3, [r5, #12]
 800c9fc:	065b      	lsls	r3, r3, #25
 800c9fe:	f53f af2d 	bmi.w	800c85c <_svfiprintf_r+0x28>
 800ca02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca04:	b01d      	add	sp, #116	; 0x74
 800ca06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0a:	ab03      	add	r3, sp, #12
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	462a      	mov	r2, r5
 800ca10:	4638      	mov	r0, r7
 800ca12:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <_svfiprintf_r+0x1f8>)
 800ca14:	a904      	add	r1, sp, #16
 800ca16:	f000 f87d 	bl	800cb14 <_printf_i>
 800ca1a:	e7eb      	b.n	800c9f4 <_svfiprintf_r+0x1c0>
 800ca1c:	0800de53 	.word	0x0800de53
 800ca20:	0800de59 	.word	0x0800de59
 800ca24:	0800de5d 	.word	0x0800de5d
 800ca28:	00000000 	.word	0x00000000
 800ca2c:	0800c781 	.word	0x0800c781

0800ca30 <_printf_common>:
 800ca30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	4616      	mov	r6, r2
 800ca36:	4699      	mov	r9, r3
 800ca38:	688a      	ldr	r2, [r1, #8]
 800ca3a:	690b      	ldr	r3, [r1, #16]
 800ca3c:	4607      	mov	r7, r0
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	bfb8      	it	lt
 800ca42:	4613      	movlt	r3, r2
 800ca44:	6033      	str	r3, [r6, #0]
 800ca46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca50:	b10a      	cbz	r2, 800ca56 <_printf_common+0x26>
 800ca52:	3301      	adds	r3, #1
 800ca54:	6033      	str	r3, [r6, #0]
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	0699      	lsls	r1, r3, #26
 800ca5a:	bf42      	ittt	mi
 800ca5c:	6833      	ldrmi	r3, [r6, #0]
 800ca5e:	3302      	addmi	r3, #2
 800ca60:	6033      	strmi	r3, [r6, #0]
 800ca62:	6825      	ldr	r5, [r4, #0]
 800ca64:	f015 0506 	ands.w	r5, r5, #6
 800ca68:	d106      	bne.n	800ca78 <_printf_common+0x48>
 800ca6a:	f104 0a19 	add.w	sl, r4, #25
 800ca6e:	68e3      	ldr	r3, [r4, #12]
 800ca70:	6832      	ldr	r2, [r6, #0]
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	42ab      	cmp	r3, r5
 800ca76:	dc2b      	bgt.n	800cad0 <_printf_common+0xa0>
 800ca78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca7c:	1e13      	subs	r3, r2, #0
 800ca7e:	6822      	ldr	r2, [r4, #0]
 800ca80:	bf18      	it	ne
 800ca82:	2301      	movne	r3, #1
 800ca84:	0692      	lsls	r2, r2, #26
 800ca86:	d430      	bmi.n	800caea <_printf_common+0xba>
 800ca88:	4649      	mov	r1, r9
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca90:	47c0      	blx	r8
 800ca92:	3001      	adds	r0, #1
 800ca94:	d023      	beq.n	800cade <_printf_common+0xae>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	6922      	ldr	r2, [r4, #16]
 800ca9a:	f003 0306 	and.w	r3, r3, #6
 800ca9e:	2b04      	cmp	r3, #4
 800caa0:	bf14      	ite	ne
 800caa2:	2500      	movne	r5, #0
 800caa4:	6833      	ldreq	r3, [r6, #0]
 800caa6:	f04f 0600 	mov.w	r6, #0
 800caaa:	bf08      	it	eq
 800caac:	68e5      	ldreq	r5, [r4, #12]
 800caae:	f104 041a 	add.w	r4, r4, #26
 800cab2:	bf08      	it	eq
 800cab4:	1aed      	subeq	r5, r5, r3
 800cab6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800caba:	bf08      	it	eq
 800cabc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cac0:	4293      	cmp	r3, r2
 800cac2:	bfc4      	itt	gt
 800cac4:	1a9b      	subgt	r3, r3, r2
 800cac6:	18ed      	addgt	r5, r5, r3
 800cac8:	42b5      	cmp	r5, r6
 800caca:	d11a      	bne.n	800cb02 <_printf_common+0xd2>
 800cacc:	2000      	movs	r0, #0
 800cace:	e008      	b.n	800cae2 <_printf_common+0xb2>
 800cad0:	2301      	movs	r3, #1
 800cad2:	4652      	mov	r2, sl
 800cad4:	4649      	mov	r1, r9
 800cad6:	4638      	mov	r0, r7
 800cad8:	47c0      	blx	r8
 800cada:	3001      	adds	r0, #1
 800cadc:	d103      	bne.n	800cae6 <_printf_common+0xb6>
 800cade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae6:	3501      	adds	r5, #1
 800cae8:	e7c1      	b.n	800ca6e <_printf_common+0x3e>
 800caea:	2030      	movs	r0, #48	; 0x30
 800caec:	18e1      	adds	r1, r4, r3
 800caee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caf8:	4422      	add	r2, r4
 800cafa:	3302      	adds	r3, #2
 800cafc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb00:	e7c2      	b.n	800ca88 <_printf_common+0x58>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4622      	mov	r2, r4
 800cb06:	4649      	mov	r1, r9
 800cb08:	4638      	mov	r0, r7
 800cb0a:	47c0      	blx	r8
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d0e6      	beq.n	800cade <_printf_common+0xae>
 800cb10:	3601      	adds	r6, #1
 800cb12:	e7d9      	b.n	800cac8 <_printf_common+0x98>

0800cb14 <_printf_i>:
 800cb14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	7e0f      	ldrb	r7, [r1, #24]
 800cb1a:	4691      	mov	r9, r2
 800cb1c:	2f78      	cmp	r7, #120	; 0x78
 800cb1e:	4680      	mov	r8, r0
 800cb20:	460c      	mov	r4, r1
 800cb22:	469a      	mov	sl, r3
 800cb24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb2a:	d807      	bhi.n	800cb3c <_printf_i+0x28>
 800cb2c:	2f62      	cmp	r7, #98	; 0x62
 800cb2e:	d80a      	bhi.n	800cb46 <_printf_i+0x32>
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	f000 80d5 	beq.w	800cce0 <_printf_i+0x1cc>
 800cb36:	2f58      	cmp	r7, #88	; 0x58
 800cb38:	f000 80c1 	beq.w	800ccbe <_printf_i+0x1aa>
 800cb3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb44:	e03a      	b.n	800cbbc <_printf_i+0xa8>
 800cb46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb4a:	2b15      	cmp	r3, #21
 800cb4c:	d8f6      	bhi.n	800cb3c <_printf_i+0x28>
 800cb4e:	a101      	add	r1, pc, #4	; (adr r1, 800cb54 <_printf_i+0x40>)
 800cb50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb54:	0800cbad 	.word	0x0800cbad
 800cb58:	0800cbc1 	.word	0x0800cbc1
 800cb5c:	0800cb3d 	.word	0x0800cb3d
 800cb60:	0800cb3d 	.word	0x0800cb3d
 800cb64:	0800cb3d 	.word	0x0800cb3d
 800cb68:	0800cb3d 	.word	0x0800cb3d
 800cb6c:	0800cbc1 	.word	0x0800cbc1
 800cb70:	0800cb3d 	.word	0x0800cb3d
 800cb74:	0800cb3d 	.word	0x0800cb3d
 800cb78:	0800cb3d 	.word	0x0800cb3d
 800cb7c:	0800cb3d 	.word	0x0800cb3d
 800cb80:	0800ccc7 	.word	0x0800ccc7
 800cb84:	0800cbed 	.word	0x0800cbed
 800cb88:	0800cc81 	.word	0x0800cc81
 800cb8c:	0800cb3d 	.word	0x0800cb3d
 800cb90:	0800cb3d 	.word	0x0800cb3d
 800cb94:	0800cce9 	.word	0x0800cce9
 800cb98:	0800cb3d 	.word	0x0800cb3d
 800cb9c:	0800cbed 	.word	0x0800cbed
 800cba0:	0800cb3d 	.word	0x0800cb3d
 800cba4:	0800cb3d 	.word	0x0800cb3d
 800cba8:	0800cc89 	.word	0x0800cc89
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	1d1a      	adds	r2, r3, #4
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	602a      	str	r2, [r5, #0]
 800cbb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e0a0      	b.n	800cd02 <_printf_i+0x1ee>
 800cbc0:	6820      	ldr	r0, [r4, #0]
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	0607      	lsls	r7, r0, #24
 800cbc6:	f103 0104 	add.w	r1, r3, #4
 800cbca:	6029      	str	r1, [r5, #0]
 800cbcc:	d501      	bpl.n	800cbd2 <_printf_i+0xbe>
 800cbce:	681e      	ldr	r6, [r3, #0]
 800cbd0:	e003      	b.n	800cbda <_printf_i+0xc6>
 800cbd2:	0646      	lsls	r6, r0, #25
 800cbd4:	d5fb      	bpl.n	800cbce <_printf_i+0xba>
 800cbd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cbda:	2e00      	cmp	r6, #0
 800cbdc:	da03      	bge.n	800cbe6 <_printf_i+0xd2>
 800cbde:	232d      	movs	r3, #45	; 0x2d
 800cbe0:	4276      	negs	r6, r6
 800cbe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe6:	230a      	movs	r3, #10
 800cbe8:	4859      	ldr	r0, [pc, #356]	; (800cd50 <_printf_i+0x23c>)
 800cbea:	e012      	b.n	800cc12 <_printf_i+0xfe>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	1d19      	adds	r1, r3, #4
 800cbf2:	6029      	str	r1, [r5, #0]
 800cbf4:	0605      	lsls	r5, r0, #24
 800cbf6:	d501      	bpl.n	800cbfc <_printf_i+0xe8>
 800cbf8:	681e      	ldr	r6, [r3, #0]
 800cbfa:	e002      	b.n	800cc02 <_printf_i+0xee>
 800cbfc:	0641      	lsls	r1, r0, #25
 800cbfe:	d5fb      	bpl.n	800cbf8 <_printf_i+0xe4>
 800cc00:	881e      	ldrh	r6, [r3, #0]
 800cc02:	2f6f      	cmp	r7, #111	; 0x6f
 800cc04:	bf0c      	ite	eq
 800cc06:	2308      	moveq	r3, #8
 800cc08:	230a      	movne	r3, #10
 800cc0a:	4851      	ldr	r0, [pc, #324]	; (800cd50 <_printf_i+0x23c>)
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc12:	6865      	ldr	r5, [r4, #4]
 800cc14:	2d00      	cmp	r5, #0
 800cc16:	bfa8      	it	ge
 800cc18:	6821      	ldrge	r1, [r4, #0]
 800cc1a:	60a5      	str	r5, [r4, #8]
 800cc1c:	bfa4      	itt	ge
 800cc1e:	f021 0104 	bicge.w	r1, r1, #4
 800cc22:	6021      	strge	r1, [r4, #0]
 800cc24:	b90e      	cbnz	r6, 800cc2a <_printf_i+0x116>
 800cc26:	2d00      	cmp	r5, #0
 800cc28:	d04b      	beq.n	800ccc2 <_printf_i+0x1ae>
 800cc2a:	4615      	mov	r5, r2
 800cc2c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc30:	fb03 6711 	mls	r7, r3, r1, r6
 800cc34:	5dc7      	ldrb	r7, [r0, r7]
 800cc36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc3a:	4637      	mov	r7, r6
 800cc3c:	42bb      	cmp	r3, r7
 800cc3e:	460e      	mov	r6, r1
 800cc40:	d9f4      	bls.n	800cc2c <_printf_i+0x118>
 800cc42:	2b08      	cmp	r3, #8
 800cc44:	d10b      	bne.n	800cc5e <_printf_i+0x14a>
 800cc46:	6823      	ldr	r3, [r4, #0]
 800cc48:	07de      	lsls	r6, r3, #31
 800cc4a:	d508      	bpl.n	800cc5e <_printf_i+0x14a>
 800cc4c:	6923      	ldr	r3, [r4, #16]
 800cc4e:	6861      	ldr	r1, [r4, #4]
 800cc50:	4299      	cmp	r1, r3
 800cc52:	bfde      	ittt	le
 800cc54:	2330      	movle	r3, #48	; 0x30
 800cc56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc5e:	1b52      	subs	r2, r2, r5
 800cc60:	6122      	str	r2, [r4, #16]
 800cc62:	464b      	mov	r3, r9
 800cc64:	4621      	mov	r1, r4
 800cc66:	4640      	mov	r0, r8
 800cc68:	f8cd a000 	str.w	sl, [sp]
 800cc6c:	aa03      	add	r2, sp, #12
 800cc6e:	f7ff fedf 	bl	800ca30 <_printf_common>
 800cc72:	3001      	adds	r0, #1
 800cc74:	d14a      	bne.n	800cd0c <_printf_i+0x1f8>
 800cc76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc7a:	b004      	add	sp, #16
 800cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	f043 0320 	orr.w	r3, r3, #32
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	2778      	movs	r7, #120	; 0x78
 800cc8a:	4832      	ldr	r0, [pc, #200]	; (800cd54 <_printf_i+0x240>)
 800cc8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	6829      	ldr	r1, [r5, #0]
 800cc94:	061f      	lsls	r7, r3, #24
 800cc96:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc9a:	d402      	bmi.n	800cca2 <_printf_i+0x18e>
 800cc9c:	065f      	lsls	r7, r3, #25
 800cc9e:	bf48      	it	mi
 800cca0:	b2b6      	uxthmi	r6, r6
 800cca2:	07df      	lsls	r7, r3, #31
 800cca4:	bf48      	it	mi
 800cca6:	f043 0320 	orrmi.w	r3, r3, #32
 800ccaa:	6029      	str	r1, [r5, #0]
 800ccac:	bf48      	it	mi
 800ccae:	6023      	strmi	r3, [r4, #0]
 800ccb0:	b91e      	cbnz	r6, 800ccba <_printf_i+0x1a6>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	f023 0320 	bic.w	r3, r3, #32
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	2310      	movs	r3, #16
 800ccbc:	e7a6      	b.n	800cc0c <_printf_i+0xf8>
 800ccbe:	4824      	ldr	r0, [pc, #144]	; (800cd50 <_printf_i+0x23c>)
 800ccc0:	e7e4      	b.n	800cc8c <_printf_i+0x178>
 800ccc2:	4615      	mov	r5, r2
 800ccc4:	e7bd      	b.n	800cc42 <_printf_i+0x12e>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	6826      	ldr	r6, [r4, #0]
 800ccca:	1d18      	adds	r0, r3, #4
 800cccc:	6961      	ldr	r1, [r4, #20]
 800ccce:	6028      	str	r0, [r5, #0]
 800ccd0:	0635      	lsls	r5, r6, #24
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	d501      	bpl.n	800ccda <_printf_i+0x1c6>
 800ccd6:	6019      	str	r1, [r3, #0]
 800ccd8:	e002      	b.n	800cce0 <_printf_i+0x1cc>
 800ccda:	0670      	lsls	r0, r6, #25
 800ccdc:	d5fb      	bpl.n	800ccd6 <_printf_i+0x1c2>
 800ccde:	8019      	strh	r1, [r3, #0]
 800cce0:	2300      	movs	r3, #0
 800cce2:	4615      	mov	r5, r2
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	e7bc      	b.n	800cc62 <_printf_i+0x14e>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	2100      	movs	r1, #0
 800ccec:	1d1a      	adds	r2, r3, #4
 800ccee:	602a      	str	r2, [r5, #0]
 800ccf0:	681d      	ldr	r5, [r3, #0]
 800ccf2:	6862      	ldr	r2, [r4, #4]
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 f878 	bl	800cdea <memchr>
 800ccfa:	b108      	cbz	r0, 800cd00 <_printf_i+0x1ec>
 800ccfc:	1b40      	subs	r0, r0, r5
 800ccfe:	6060      	str	r0, [r4, #4]
 800cd00:	6863      	ldr	r3, [r4, #4]
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	2300      	movs	r3, #0
 800cd06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd0a:	e7aa      	b.n	800cc62 <_printf_i+0x14e>
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	4649      	mov	r1, r9
 800cd10:	4640      	mov	r0, r8
 800cd12:	6923      	ldr	r3, [r4, #16]
 800cd14:	47d0      	blx	sl
 800cd16:	3001      	adds	r0, #1
 800cd18:	d0ad      	beq.n	800cc76 <_printf_i+0x162>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	079b      	lsls	r3, r3, #30
 800cd1e:	d413      	bmi.n	800cd48 <_printf_i+0x234>
 800cd20:	68e0      	ldr	r0, [r4, #12]
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	4298      	cmp	r0, r3
 800cd26:	bfb8      	it	lt
 800cd28:	4618      	movlt	r0, r3
 800cd2a:	e7a6      	b.n	800cc7a <_printf_i+0x166>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	4632      	mov	r2, r6
 800cd30:	4649      	mov	r1, r9
 800cd32:	4640      	mov	r0, r8
 800cd34:	47d0      	blx	sl
 800cd36:	3001      	adds	r0, #1
 800cd38:	d09d      	beq.n	800cc76 <_printf_i+0x162>
 800cd3a:	3501      	adds	r5, #1
 800cd3c:	68e3      	ldr	r3, [r4, #12]
 800cd3e:	9903      	ldr	r1, [sp, #12]
 800cd40:	1a5b      	subs	r3, r3, r1
 800cd42:	42ab      	cmp	r3, r5
 800cd44:	dcf2      	bgt.n	800cd2c <_printf_i+0x218>
 800cd46:	e7eb      	b.n	800cd20 <_printf_i+0x20c>
 800cd48:	2500      	movs	r5, #0
 800cd4a:	f104 0619 	add.w	r6, r4, #25
 800cd4e:	e7f5      	b.n	800cd3c <_printf_i+0x228>
 800cd50:	0800de64 	.word	0x0800de64
 800cd54:	0800de75 	.word	0x0800de75

0800cd58 <_realloc_r>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4614      	mov	r4, r2
 800cd60:	460e      	mov	r6, r1
 800cd62:	b921      	cbnz	r1, 800cd6e <_realloc_r+0x16>
 800cd64:	4611      	mov	r1, r2
 800cd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6a:	f7ff bb77 	b.w	800c45c <_malloc_r>
 800cd6e:	b92a      	cbnz	r2, 800cd7c <_realloc_r+0x24>
 800cd70:	f7ff fcbe 	bl	800c6f0 <_free_r>
 800cd74:	4625      	mov	r5, r4
 800cd76:	4628      	mov	r0, r5
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	f000 f851 	bl	800ce22 <_malloc_usable_size_r>
 800cd80:	4284      	cmp	r4, r0
 800cd82:	4607      	mov	r7, r0
 800cd84:	d802      	bhi.n	800cd8c <_realloc_r+0x34>
 800cd86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd8a:	d812      	bhi.n	800cdb2 <_realloc_r+0x5a>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f7ff fb64 	bl	800c45c <_malloc_r>
 800cd94:	4605      	mov	r5, r0
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d0ed      	beq.n	800cd76 <_realloc_r+0x1e>
 800cd9a:	42bc      	cmp	r4, r7
 800cd9c:	4622      	mov	r2, r4
 800cd9e:	4631      	mov	r1, r6
 800cda0:	bf28      	it	cs
 800cda2:	463a      	movcs	r2, r7
 800cda4:	f000 f82f 	bl	800ce06 <memcpy>
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4640      	mov	r0, r8
 800cdac:	f7ff fca0 	bl	800c6f0 <_free_r>
 800cdb0:	e7e1      	b.n	800cd76 <_realloc_r+0x1e>
 800cdb2:	4635      	mov	r5, r6
 800cdb4:	e7df      	b.n	800cd76 <_realloc_r+0x1e>

0800cdb6 <memmove>:
 800cdb6:	4288      	cmp	r0, r1
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	eb01 0402 	add.w	r4, r1, r2
 800cdbe:	d902      	bls.n	800cdc6 <memmove+0x10>
 800cdc0:	4284      	cmp	r4, r0
 800cdc2:	4623      	mov	r3, r4
 800cdc4:	d807      	bhi.n	800cdd6 <memmove+0x20>
 800cdc6:	1e43      	subs	r3, r0, #1
 800cdc8:	42a1      	cmp	r1, r4
 800cdca:	d008      	beq.n	800cdde <memmove+0x28>
 800cdcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdd4:	e7f8      	b.n	800cdc8 <memmove+0x12>
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	4402      	add	r2, r0
 800cdda:	428a      	cmp	r2, r1
 800cddc:	d100      	bne.n	800cde0 <memmove+0x2a>
 800cdde:	bd10      	pop	{r4, pc}
 800cde0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cde4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cde8:	e7f7      	b.n	800cdda <memmove+0x24>

0800cdea <memchr>:
 800cdea:	4603      	mov	r3, r0
 800cdec:	b510      	push	{r4, lr}
 800cdee:	b2c9      	uxtb	r1, r1
 800cdf0:	4402      	add	r2, r0
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	d101      	bne.n	800cdfc <memchr+0x12>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	e003      	b.n	800ce04 <memchr+0x1a>
 800cdfc:	7804      	ldrb	r4, [r0, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	428c      	cmp	r4, r1
 800ce02:	d1f6      	bne.n	800cdf2 <memchr+0x8>
 800ce04:	bd10      	pop	{r4, pc}

0800ce06 <memcpy>:
 800ce06:	440a      	add	r2, r1
 800ce08:	4291      	cmp	r1, r2
 800ce0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce0e:	d100      	bne.n	800ce12 <memcpy+0xc>
 800ce10:	4770      	bx	lr
 800ce12:	b510      	push	{r4, lr}
 800ce14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce18:	4291      	cmp	r1, r2
 800ce1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce1e:	d1f9      	bne.n	800ce14 <memcpy+0xe>
 800ce20:	bd10      	pop	{r4, pc}

0800ce22 <_malloc_usable_size_r>:
 800ce22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce26:	1f18      	subs	r0, r3, #4
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	bfbc      	itt	lt
 800ce2c:	580b      	ldrlt	r3, [r1, r0]
 800ce2e:	18c0      	addlt	r0, r0, r3
 800ce30:	4770      	bx	lr
	...

0800ce34 <_init>:
 800ce34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce36:	bf00      	nop
 800ce38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3a:	bc08      	pop	{r3}
 800ce3c:	469e      	mov	lr, r3
 800ce3e:	4770      	bx	lr

0800ce40 <_fini>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr
