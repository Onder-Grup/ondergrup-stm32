
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d670  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800d854  0800d854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7c4  0800e7c4  00020a14  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7c4  0800e7c4  00020a14  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7c4  0800e7c4  00020a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7c4  0800e7c4  0001e7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7c8  0800e7c8  0001e7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a14  20000000  0800e7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000a14  0800f1e0  00020a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001014  0800f1e0  00021014  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013679  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269a  00000000  00000000  000340f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e12  00000000  00000000  00037960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  00038772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189d5  00000000  00000000  00053667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd61  00000000  00000000  0006c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005228  00000000  00000000  0010bda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a14 	.word	0x20000a14
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d83c 	.word	0x0800d83c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a18 	.word	0x20000a18
 8000220:	0800d83c 	.word	0x0800d83c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fecf 	bl	800d000 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00c f89a 	bl	800c3b0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 ffca 	bl	8009218 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fead 	bl	800d000 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fe9d 	bl	800d000 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00c f865 	bl	800c3b0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 ff95 	bl	8009218 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00c f851 	bl	800c3b0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 ff81 	bl	8009218 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d8a0 	.word	0x0800d8a0
 8000324:	0800d8b0 	.word	0x0800d8b0
 8000328:	20000a30 	.word	0x20000a30
 800032c:	0800d92c 	.word	0x0800d92c
 8000330:	0800d8d0 	.word	0x0800d8d0
 8000334:	0800d940 	.word	0x0800d940

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a fb45 	bl	800aa0a <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a fb31 	bl	800a9f0 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fe94 	bl	800a130 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000b54 	.word	0x20000b54
 8000414:	20000b2a 	.word	0x20000b2a

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a fad5 	bl	800aa0a <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a fac1 	bl	800a9f0 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fe24 	bl	800a130 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000b54 	.word	0x20000b54
 80004f4:	20000b2a 	.word	0x20000b2a

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a fa4f 	bl	800aa0a <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a fa3b 	bl	800a9f0 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fd9e 	bl	800a130 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000b54 	.word	0x20000b54
 8000600:	20000b2a 	.word	0x20000b2a

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fda4 	bl	8009218 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b2a 	.word	0x20000b2a

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c fb40 	bl	800ce14 <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fca1 	bl	800d0e8 <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fd2c 	bl	8009218 <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <printTemplate+0x298>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4a9c      	ldr	r2, [pc, #624]	; (8000a4c <printTemplate+0x29c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <printTemplate+0x2a0>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <printTemplate+0x2a4>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4a97      	ldr	r2, [pc, #604]	; (8000a58 <printTemplate+0x2a8>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <printTemplate+0x2ac>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <printTemplate+0x2b0>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <printTemplate+0x2b4>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4a91      	ldr	r2, [pc, #580]	; (8000a68 <printTemplate+0x2b8>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4a90      	ldr	r2, [pc, #576]	; (8000a6c <printTemplate+0x2bc>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <printTemplate+0x2c0>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <printTemplate+0x2c4>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e0f5      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d178      	bne.n	800094a <printTemplate+0x19a>
		if(page == 1) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <printTemplate+0xd8>
			lcd_clear();
 800085e:	f7ff ff2f 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f008 fcd8 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000868:	4a83      	ldr	r2, [pc, #524]	; (8000a78 <printTemplate+0x2c8>)
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fefb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <printTemplate+0x2cc>)
 8000874:	2107      	movs	r1, #7
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800087c:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <printTemplate+0x2d0>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fef1 	bl	8000668 <lcd_print>
}
 8000886:	e0da      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d114      	bne.n	80008b8 <printTemplate+0x108>
			lcd_clear();
 800088e:	f7ff ff17 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f008 fcc0 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000898:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <printTemplate+0x2c8>)
 800089a:	2101      	movs	r1, #1
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fee3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <printTemplate+0x2cc>)
 80008a4:	2107      	movs	r1, #7
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fede 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008ac:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <printTemplate+0x2d4>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fed9 	bl	8000668 <lcd_print>
}
 80008b6:	e0c2      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d114      	bne.n	80008e8 <printTemplate+0x138>
			lcd_clear();
 80008be:	f7ff feff 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 fca8 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008c8:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <printTemplate+0x2c8>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <printTemplate+0x2cc>)
 80008d4:	2107      	movs	r1, #7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fec6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <printTemplate+0x2d8>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fec1 	bl	8000668 <lcd_print>
}
 80008e6:	e0aa      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d114      	bne.n	8000918 <printTemplate+0x168>
			lcd_clear();
 80008ee:	f7ff fee7 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f008 fc90 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008f8:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <printTemplate+0x2c8>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <printTemplate+0x2cc>)
 8000904:	2107      	movs	r1, #7
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff feae 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <printTemplate+0x2dc>)
 800090e:	2101      	movs	r1, #1
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fea9 	bl	8000668 <lcd_print>
}
 8000916:	e092      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	f040 808f 	bne.w	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000920:	f7ff fece 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f008 fc77 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <printTemplate+0x2c8>)
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe9a 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <printTemplate+0x2cc>)
 8000936:	2107      	movs	r1, #7
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe95 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <printTemplate+0x2e0>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe90 	bl	8000668 <lcd_print>
}
 8000948:	e079      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d176      	bne.n	8000a3e <printTemplate+0x28e>
		if(page == 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <printTemplate+0x1d0>
			lcd_clear();
 8000956:	f7ff feb3 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f008 fc5c 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <printTemplate+0x2e4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe7f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <printTemplate+0x2e8>)
 800096c:	2107      	movs	r1, #7
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe7a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <printTemplate+0x2d0>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe75 	bl	8000668 <lcd_print>
}
 800097e:	e05e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d114      	bne.n	80009b0 <printTemplate+0x200>
			lcd_clear();
 8000986:	f7ff fe9b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f008 fc44 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <printTemplate+0x2e4>)
 8000992:	2101      	movs	r1, #1
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe67 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <printTemplate+0x2e8>)
 800099c:	2107      	movs	r1, #7
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <printTemplate+0x2d4>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe5d 	bl	8000668 <lcd_print>
}
 80009ae:	e046      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d114      	bne.n	80009e0 <printTemplate+0x230>
			lcd_clear();
 80009b6:	f7ff fe83 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 fc2c 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <printTemplate+0x2e4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <printTemplate+0x2e8>)
 80009cc:	2107      	movs	r1, #7
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe4a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <printTemplate+0x2d8>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fe45 	bl	8000668 <lcd_print>
}
 80009de:	e02e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d114      	bne.n	8000a10 <printTemplate+0x260>
			lcd_clear();
 80009e6:	f7ff fe6b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f008 fc14 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <printTemplate+0x2e4>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe37 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <printTemplate+0x2e8>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <printTemplate+0x2dc>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe2d 	bl	8000668 <lcd_print>
}
 8000a0e:	e016      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d113      	bne.n	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000a16:	f7ff fe53 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f008 fbfc 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <printTemplate+0x2e4>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe1f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <printTemplate+0x2e8>)
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <printTemplate+0x2e0>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff fe15 	bl	8000668 <lcd_print>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d9cc 	.word	0x0800d9cc
 8000a4c:	0800d9d4 	.word	0x0800d9d4
 8000a50:	0800d9d8 	.word	0x0800d9d8
 8000a54:	0800d9dc 	.word	0x0800d9dc
 8000a58:	0800d9e0 	.word	0x0800d9e0
 8000a5c:	0800d9e4 	.word	0x0800d9e4
 8000a60:	0800d9e8 	.word	0x0800d9e8
 8000a64:	0800d9ec 	.word	0x0800d9ec
 8000a68:	0800d9f0 	.word	0x0800d9f0
 8000a6c:	0800d9f4 	.word	0x0800d9f4
 8000a70:	0800d9f8 	.word	0x0800d9f8
 8000a74:	20000cd0 	.word	0x20000cd0
 8000a78:	0800d9fc 	.word	0x0800d9fc
 8000a7c:	20000cdc 	.word	0x20000cdc
 8000a80:	0800da04 	.word	0x0800da04
 8000a84:	0800da18 	.word	0x0800da18
 8000a88:	0800da2c 	.word	0x0800da2c
 8000a8c:	0800da40 	.word	0x0800da40
 8000a90:	0800da54 	.word	0x0800da54
 8000a94:	0800da68 	.word	0x0800da68
 8000a98:	20000cf0 	.word	0x20000cf0

08000a9c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <getCharFromCursorPosition+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000960 	.word	0x20000960

08000abc <convertToCharArray>:

void convertToCharArray(char *outputArray, const uint8_t *inputArray, int state) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	int startVal;

	if(state == 0) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d103      	bne.n	8000ad6 <convertToCharArray+0x1a>
		startVal = ssidStartPos;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <convertToCharArray+0x5c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e002      	b.n	8000adc <convertToCharArray+0x20>
	} else {
		startVal = passStartPos;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <convertToCharArray+0x60>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	617b      	str	r3, [r7, #20]
	}

	for(int i=0; i<20; i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	e012      	b.n	8000b08 <convertToCharArray+0x4c>
		outputArray[i] = getCharFromCursorPosition(inputArray[startVal]);
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	18d4      	adds	r4, r2, r3
 8000af2:	4608      	mov	r0, r1
 8000af4:	f7ff ffd2 	bl	8000a9c <getCharFromCursorPosition>
 8000af8:	4603      	mov	r3, r0
 8000afa:	7023      	strb	r3, [r4, #0]
		startVal++;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
	for(int i=0; i<20; i++) {
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	3301      	adds	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	2b13      	cmp	r3, #19
 8000b0c:	dde9      	ble.n	8000ae2 <convertToCharArray+0x26>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	200009b2 	.word	0x200009b2
 8000b1c:	200009b3 	.word	0x200009b3

08000b20 <convertToIntArray>:

void convertToIntArray(uint8_t *outputArray, const char *inputArray, int state) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int startVal;
	if(state == 0) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <convertToIntArray+0x1a>
		startVal = ssidStartPos;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <convertToIntArray+0x60>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	e002      	b.n	8000b40 <convertToIntArray+0x20>
	} else {
		startVal = passStartPos;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <convertToIntArray+0x64>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	61fb      	str	r3, [r7, #28]
	}

	for(int i=0; i<20; i++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	e013      	b.n	8000b6e <convertToIntArray+0x4e>
		uint8_t pos = getCharPos(inputArray[i]);
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f81c 	bl	8000b8c <getCharPos>
 8000b54:	4603      	mov	r3, r0
 8000b56:	75fb      	strb	r3, [r7, #23]
		eepromData[startVal] = pos;
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <convertToIntArray+0x68>)
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	7dfa      	ldrb	r2, [r7, #23]
 8000b60:	701a      	strb	r2, [r3, #0]
		startVal++;
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
	for(int i=0; i<20; i++) {
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b13      	cmp	r3, #19
 8000b72:	dde8      	ble.n	8000b46 <convertToIntArray+0x26>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200009b2 	.word	0x200009b2
 8000b84:	200009b3 	.word	0x200009b3
 8000b88:	20000c38 	.word	0x20000c38

08000b8c <getCharPos>:

uint8_t getCharPos(char inputChar) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	for(int k=0; k<79; k++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e00c      	b.n	8000bb6 <getCharPos+0x2a>
		if(inputChar == charactersArray[k]) {
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <getCharPos+0x3c>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <getCharPos+0x24>
			return k;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	e006      	b.n	8000bbe <getCharPos+0x32>
	for(int k=0; k<79; k++) {
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b4e      	cmp	r3, #78	; 0x4e
 8000bba:	ddef      	ble.n	8000b9c <getCharPos+0x10>
		}
	}

	return -1;
 8000bbc:	23ff      	movs	r3, #255	; 0xff
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000960 	.word	0x20000960

08000bcc <takeMachineID>:

void takeMachineID(int state) {
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08b      	sub	sp, #44	; 0x2c
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff fda5 	bl	8000724 <lcd_cursor>

    int cursorPosition = 3;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000be2:	2305      	movs	r3, #5
 8000be4:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d104      	bne.n	8000bf6 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000bec:	220c      	movs	r2, #12
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4899      	ldr	r0, [pc, #612]	; (8000e58 <takeMachineID+0x28c>)
 8000bf2:	f00c fa25 	bl	800d040 <memset>
    }
    HAL_Delay(100);
 8000bf6:	2064      	movs	r0, #100	; 0x64
 8000bf8:	f008 fb0e 	bl	8009218 <HAL_Delay>

    printTemplate(1, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff fdd6 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c04:	2108      	movs	r1, #8
 8000c06:	4895      	ldr	r0, [pc, #596]	; (8000e5c <takeMachineID+0x290>)
 8000c08:	f009 f8d6 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d138      	bne.n	8000c84 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fd86 	bl	8000724 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000c18:	4b8f      	ldr	r3, [pc, #572]	; (8000e58 <takeMachineID+0x28c>)
 8000c1a:	7adb      	ldrb	r3, [r3, #11]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d110      	bne.n	8000c42 <takeMachineID+0x76>
        		lcd_clear();
 8000c20:	f7ff fd4e 	bl	80006c0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000c24:	4a8e      	ldr	r2, [pc, #568]	; (8000e60 <takeMachineID+0x294>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fd1d 	bl	8000668 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000c2e:	4a8d      	ldr	r2, [pc, #564]	; (8000e64 <takeMachineID+0x298>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	2002      	movs	r0, #2
 8000c34:	f7ff fd18 	bl	8000668 <lcd_print>
        		HAL_Delay(1200);
 8000c38:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c3c:	f008 faec 	bl	8009218 <HAL_Delay>
        		goto mainSection;
 8000c40:	e7c8      	b.n	8000bd4 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <takeMachineID+0x29c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b88      	ldr	r3, [pc, #544]	; (8000e6c <takeMachineID+0x2a0>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a82      	ldr	r2, [pc, #520]	; (8000e58 <takeMachineID+0x28c>)
 8000c4e:	461c      	mov	r4, r3
 8000c50:	4613      	mov	r3, r2
 8000c52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c54:	6020      	str	r0, [r4, #0]
 8000c56:	6061      	str	r1, [r4, #4]
 8000c58:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000c5a:	20c8      	movs	r0, #200	; 0xc8
 8000c5c:	f008 fadc 	bl	8009218 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000c60:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	236e      	movs	r3, #110	; 0x6e
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b80      	ldr	r3, [pc, #512]	; (8000e6c <takeMachineID+0x2a0>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	236e      	movs	r3, #110	; 0x6e
 8000c70:	2200      	movs	r2, #0
 8000c72:	21a0      	movs	r1, #160	; 0xa0
 8000c74:	487e      	ldr	r0, [pc, #504]	; (8000e70 <takeMachineID+0x2a4>)
 8000c76:	f009 fb59 	bl	800a32c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000c7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7e:	f008 facb 	bl	8009218 <HAL_Delay>

            break;
 8000c82:	e0e5      	b.n	8000e50 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000c84:	2101      	movs	r1, #1
 8000c86:	4875      	ldr	r0, [pc, #468]	; (8000e5c <takeMachineID+0x290>)
 8000c88:	f009 f896 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d112      	bne.n	8000cb8 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	d102      	bne.n	8000c9e <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e008      	b.n	8000cb0 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b0e      	cmp	r3, #14
 8000ca2:	d102      	bne.n	8000caa <takeMachineID+0xde>
                cursorPosition = 3;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e002      	b.n	8000cb0 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000cb0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000cb4:	f008 fab0 	bl	8009218 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000cb8:	2108      	movs	r1, #8
 8000cba:	486e      	ldr	r0, [pc, #440]	; (8000e74 <takeMachineID+0x2a8>)
 8000cbc:	f009 f87c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d112      	bne.n	8000cec <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d102      	bne.n	8000cd2 <takeMachineID+0x106>
                cursorPosition = 14;
 8000ccc:	230e      	movs	r3, #14
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e008      	b.n	8000ce4 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b0a      	cmp	r3, #10
 8000cd6:	d102      	bne.n	8000cde <takeMachineID+0x112>
            	cursorPosition = 7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e002      	b.n	8000ce4 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000ce4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ce8:	f008 fa96 	bl	8009218 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000cec:	2102      	movs	r1, #2
 8000cee:	485b      	ldr	r0, [pc, #364]	; (8000e5c <takeMachineID+0x290>)
 8000cf0:	f009 f862 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d16c      	bne.n	8000dd4 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d105      	bne.n	8000d0c <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000d00:	4a55      	ldr	r2, [pc, #340]	; (8000e58 <takeMachineID+0x28c>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4413      	add	r3, r2
 8000d06:	2230      	movs	r2, #48	; 0x30
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e04f      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d105      	bne.n	8000d1e <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000d12:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <takeMachineID+0x28c>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4413      	add	r3, r2
 8000d18:	2231      	movs	r2, #49	; 0x31
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e046      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d105      	bne.n	8000d30 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000d24:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <takeMachineID+0x28c>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4413      	add	r3, r2
 8000d2a:	2232      	movs	r2, #50	; 0x32
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e03d      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d105      	bne.n	8000d42 <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000d36:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <takeMachineID+0x28c>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2233      	movs	r2, #51	; 0x33
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e034      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d105      	bne.n	8000d54 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000d48:	4a43      	ldr	r2, [pc, #268]	; (8000e58 <takeMachineID+0x28c>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2234      	movs	r2, #52	; 0x34
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e02b      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d105      	bne.n	8000d66 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000d5a:	4a3f      	ldr	r2, [pc, #252]	; (8000e58 <takeMachineID+0x28c>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4413      	add	r3, r2
 8000d60:	2235      	movs	r2, #53	; 0x35
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e022      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b0b      	cmp	r3, #11
 8000d6a:	d105      	bne.n	8000d78 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000d6c:	4a3a      	ldr	r2, [pc, #232]	; (8000e58 <takeMachineID+0x28c>)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4413      	add	r3, r2
 8000d72:	2236      	movs	r2, #54	; 0x36
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e019      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	d105      	bne.n	8000d8a <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <takeMachineID+0x28c>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4413      	add	r3, r2
 8000d84:	2237      	movs	r2, #55	; 0x37
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e010      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b0d      	cmp	r3, #13
 8000d8e:	d105      	bne.n	8000d9c <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000d90:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <takeMachineID+0x28c>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4413      	add	r3, r2
 8000d96:	2238      	movs	r2, #56	; 0x38
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e007      	b.n	8000dac <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2b0e      	cmp	r3, #14
 8000da0:	d104      	bne.n	8000dac <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000da2:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <takeMachineID+0x28c>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4413      	add	r3, r2
 8000da8:	2239      	movs	r2, #57	; 0x39
 8000daa:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	b2d9      	uxtb	r1, r3
 8000db0:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <takeMachineID+0x28c>)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fc69 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000dcc:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000dd0:	f008 fa22 	bl	8009218 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4821      	ldr	r0, [pc, #132]	; (8000e5c <takeMachineID+0x290>)
 8000dd8:	f008 ffee 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12f      	bne.n	8000e42 <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <takeMachineID+0x28c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d027      	beq.n	8000e3a <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <takeMachineID+0x28c>)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4413      	add	r3, r2
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff fc68 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000e04:	2032      	movs	r0, #50	; 0x32
 8000e06:	f008 fa07 	bl	8009218 <HAL_Delay>

                if(writeLoc > 5) {
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	dd03      	ble.n	8000e18 <takeMachineID+0x24c>
                	writeLoc--;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e004      	b.n	8000e22 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	dc01      	bgt.n	8000e22 <takeMachineID+0x256>
                	writeLoc = 5;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	dd03      	ble.n	8000e30 <takeMachineID+0x264>
                	machineIDLoc--;
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	e004      	b.n	8000e3a <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da01      	bge.n	8000e3a <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000e3a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e3e:	f008 f9eb 	bl	8009218 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fbee 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000e4e:	e6d9      	b.n	8000c04 <takeMachineID+0x38>
    }
}
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	20000cd0 	.word	0x20000cd0
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	0800da70 	.word	0x0800da70
 8000e64:	0800da84 	.word	0x0800da84
 8000e68:	200009b1 	.word	0x200009b1
 8000e6c:	20000c38 	.word	0x20000c38
 8000e70:	20000b54 	.word	0x20000b54
 8000e74:	40011000 	.word	0x40011000

08000e78 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fc4f 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d104      	bne.n	8000e96 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000e8c:	2214      	movs	r2, #20
 8000e8e:	2100      	movs	r1, #0
 8000e90:	488e      	ldr	r0, [pc, #568]	; (80010cc <takeWifiSSID+0x254>)
 8000e92:	f00c f8d5 	bl	800d040 <memset>
    }

    int realCharPos = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000e9a:	4b8d      	ldr	r3, [pc, #564]	; (80010d0 <takeWifiSSID+0x258>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
    page = 1;
 8000ea0:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <takeWifiSSID+0x25c>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fc7d 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4887      	ldr	r0, [pc, #540]	; (80010d8 <takeWifiSSID+0x260>)
 8000eba:	f008 ff7d 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d137      	bne.n	8000f34 <takeWifiSSID+0xbc>
            lcd_cursor(0);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fc2d 	bl	8000724 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000eca:	4880      	ldr	r0, [pc, #512]	; (80010cc <takeWifiSSID+0x254>)
 8000ecc:	f7ff f9aa 	bl	8000224 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b14      	cmp	r3, #20
 8000ed4:	d910      	bls.n	8000ef8 <takeWifiSSID+0x80>
                lcd_clear();
 8000ed6:	f7ff fbf3 	bl	80006c0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000eda:	4a80      	ldr	r2, [pc, #512]	; (80010dc <takeWifiSSID+0x264>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fbc2 	bl	8000668 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000ee4:	4a7e      	ldr	r2, [pc, #504]	; (80010e0 <takeWifiSSID+0x268>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f7ff fbbd 	bl	8000668 <lcd_print>
                HAL_Delay(1200);
 8000eee:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000ef2:	f008 f991 	bl	8009218 <HAL_Delay>
                goto mainSSIDSection;
 8000ef6:	e7c3      	b.n	8000e80 <takeWifiSSID+0x8>
            }

            convertToIntArray(eepromData, wifiSSIDTemp, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	497a      	ldr	r1, [pc, #488]	; (80010e4 <takeWifiSSID+0x26c>)
 8000efc:	487a      	ldr	r0, [pc, #488]	; (80010e8 <takeWifiSSID+0x270>)
 8000efe:	f7ff fe0f 	bl	8000b20 <convertToIntArray>
            HAL_Delay(200);
 8000f02:	20c8      	movs	r0, #200	; 0xc8
 8000f04:	f008 f988 	bl	8009218 <HAL_Delay>
            memcpy(&eepromData[ssidStartPos], wifiSSIDTemp, 20);
 8000f08:	4b78      	ldr	r3, [pc, #480]	; (80010ec <takeWifiSSID+0x274>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <takeWifiSSID+0x270>)
 8000f10:	4413      	add	r3, r2
 8000f12:	4a74      	ldr	r2, [pc, #464]	; (80010e4 <takeWifiSSID+0x26c>)
 8000f14:	461d      	mov	r5, r3
 8000f16:	4614      	mov	r4, r2
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	6028      	str	r0, [r5, #0]
 8000f1c:	6069      	str	r1, [r5, #4]
 8000f1e:	60aa      	str	r2, [r5, #8]
 8000f20:	60eb      	str	r3, [r5, #12]
 8000f22:	6820      	ldr	r0, [r4, #0]
 8000f24:	6128      	str	r0, [r5, #16]
            HAL_Delay(200);
 8000f26:	20c8      	movs	r0, #200	; 0xc8
 8000f28:	f008 f976 	bl	8009218 <HAL_Delay>

            hafizaYaz = 1;
 8000f2c:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <takeWifiSSID+0x278>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]

            break;
 8000f32:	e14d      	b.n	80011d0 <takeWifiSSID+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f34:	2101      	movs	r1, #1
 8000f36:	4868      	ldr	r0, [pc, #416]	; (80010d8 <takeWifiSSID+0x260>)
 8000f38:	f008 ff3e 	bl	8009db8 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d166      	bne.n	8001010 <takeWifiSSID+0x198>
        	realCharPos++;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b50      	cmp	r3, #80	; 0x50
 8000f4c:	dd01      	ble.n	8000f52 <takeWifiSSID+0xda>
        		realCharPos = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <takeWifiSSID+0x258>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b10      	cmp	r3, #16
 8000f58:	d152      	bne.n	8001000 <takeWifiSSID+0x188>
            	if(page == 1) {
 8000f5a:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <takeWifiSSID+0x25c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10c      	bne.n	8000f7c <takeWifiSSID+0x104>
            		cursorPosition = 1;
 8000f62:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <takeWifiSSID+0x258>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
            		page++;
 8000f68:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <takeWifiSSID+0x25c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <takeWifiSSID+0x25c>)
 8000f70:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000f72:	2102      	movs	r1, #2
 8000f74:	2002      	movs	r0, #2
 8000f76:	f7ff fc1b 	bl	80007b0 <printTemplate>
 8000f7a:	e046      	b.n	800100a <takeWifiSSID+0x192>
            	} else if(page == 2) {
 8000f7c:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <takeWifiSSID+0x25c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d10c      	bne.n	8000f9e <takeWifiSSID+0x126>
            		cursorPosition = 1;
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <takeWifiSSID+0x258>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
            		page++;
 8000f8a:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <takeWifiSSID+0x25c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <takeWifiSSID+0x25c>)
 8000f92:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000f94:	2103      	movs	r1, #3
 8000f96:	2002      	movs	r0, #2
 8000f98:	f7ff fc0a 	bl	80007b0 <printTemplate>
 8000f9c:	e035      	b.n	800100a <takeWifiSSID+0x192>
            	} else if(page == 3) {
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d10c      	bne.n	8000fc0 <takeWifiSSID+0x148>
            		cursorPosition = 1;
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <takeWifiSSID+0x258>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
            		page++;
 8000fac:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fb4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff fbf9 	bl	80007b0 <printTemplate>
 8000fbe:	e024      	b.n	800100a <takeWifiSSID+0x192>
            	} else if(page == 4) {
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d10c      	bne.n	8000fe2 <takeWifiSSID+0x16a>
            		cursorPosition = 1;
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <takeWifiSSID+0x258>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
            		page++;
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a3f      	ldr	r2, [pc, #252]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fd6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000fd8:	2105      	movs	r1, #5
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f7ff fbe8 	bl	80007b0 <printTemplate>
 8000fe0:	e013      	b.n	800100a <takeWifiSSID+0x192>
            	} else if(page == 5) {
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <takeWifiSSID+0x25c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	d10f      	bne.n	800100a <takeWifiSSID+0x192>
            		cursorPosition = 1;
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <takeWifiSSID+0x258>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000ff0:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <takeWifiSSID+0x25c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f7ff fbd9 	bl	80007b0 <printTemplate>
 8000ffe:	e004      	b.n	800100a <takeWifiSSID+0x192>
            	}
            } else {
            	cursorPosition++;
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <takeWifiSSID+0x258>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <takeWifiSSID+0x258>)
 8001008:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800100a:	20fa      	movs	r0, #250	; 0xfa
 800100c:	f008 f904 	bl	8009218 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001010:	2108      	movs	r1, #8
 8001012:	4838      	ldr	r0, [pc, #224]	; (80010f4 <takeWifiSSID+0x27c>)
 8001014:	f008 fed0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d174      	bne.n	8001108 <takeWifiSSID+0x290>
        	realCharPos--;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3b01      	subs	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	dc01      	bgt.n	800102e <takeWifiSSID+0x1b6>
        		realCharPos = 80;
 800102a:	2350      	movs	r3, #80	; 0x50
 800102c:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <takeWifiSSID+0x258>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d160      	bne.n	80010f8 <takeWifiSSID+0x280>
            	if(page == 1) {
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <takeWifiSSID+0x25c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10a      	bne.n	8001054 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <takeWifiSSID+0x258>)
 8001040:	2210      	movs	r2, #16
 8001042:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <takeWifiSSID+0x25c>)
 8001046:	2205      	movs	r2, #5
 8001048:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 800104a:	2105      	movs	r1, #5
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff fbaf 	bl	80007b0 <printTemplate>
 8001052:	e056      	b.n	8001102 <takeWifiSSID+0x28a>
            	} else if(page == 2) {
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <takeWifiSSID+0x25c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d10a      	bne.n	8001072 <takeWifiSSID+0x1fa>
            		cursorPosition = 16;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <takeWifiSSID+0x258>)
 800105e:	2210      	movs	r2, #16
 8001060:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <takeWifiSSID+0x25c>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001068:	2101      	movs	r1, #1
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff fba0 	bl	80007b0 <printTemplate>
 8001070:	e047      	b.n	8001102 <takeWifiSSID+0x28a>
            	} else if(page == 3) {
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <takeWifiSSID+0x25c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d10a      	bne.n	8001090 <takeWifiSSID+0x218>
            		cursorPosition = 16;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <takeWifiSSID+0x258>)
 800107c:	2210      	movs	r2, #16
 800107e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <takeWifiSSID+0x25c>)
 8001082:	2202      	movs	r2, #2
 8001084:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8001086:	2102      	movs	r1, #2
 8001088:	2002      	movs	r0, #2
 800108a:	f7ff fb91 	bl	80007b0 <printTemplate>
 800108e:	e038      	b.n	8001102 <takeWifiSSID+0x28a>
            	} else if(page == 4) {
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <takeWifiSSID+0x25c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d10a      	bne.n	80010ae <takeWifiSSID+0x236>
            		cursorPosition = 16;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <takeWifiSSID+0x258>)
 800109a:	2210      	movs	r2, #16
 800109c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <takeWifiSSID+0x25c>)
 80010a0:	2203      	movs	r2, #3
 80010a2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80010a4:	2103      	movs	r1, #3
 80010a6:	2002      	movs	r0, #2
 80010a8:	f7ff fb82 	bl	80007b0 <printTemplate>
 80010ac:	e029      	b.n	8001102 <takeWifiSSID+0x28a>
            	} else if(page == 5) {
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <takeWifiSSID+0x25c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d125      	bne.n	8001102 <takeWifiSSID+0x28a>
            		cursorPosition = 16;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <takeWifiSSID+0x258>)
 80010b8:	2210      	movs	r2, #16
 80010ba:	601a      	str	r2, [r3, #0]
            		page = 4;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <takeWifiSSID+0x25c>)
 80010be:	2204      	movs	r2, #4
 80010c0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80010c2:	2104      	movs	r1, #4
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff fb73 	bl	80007b0 <printTemplate>
 80010ca:	e01a      	b.n	8001102 <takeWifiSSID+0x28a>
 80010cc:	20000cdc 	.word	0x20000cdc
 80010d0:	20000944 	.word	0x20000944
 80010d4:	20000948 	.word	0x20000948
 80010d8:	40010800 	.word	0x40010800
 80010dc:	0800da98 	.word	0x0800da98
 80010e0:	0800daac 	.word	0x0800daac
 80010e4:	20000d04 	.word	0x20000d04
 80010e8:	20000c38 	.word	0x20000c38
 80010ec:	200009b2 	.word	0x200009b2
 80010f0:	20000d5c 	.word	0x20000d5c
 80010f4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80010f8:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <takeWifiSSID+0x360>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4a36      	ldr	r2, [pc, #216]	; (80011d8 <takeWifiSSID+0x360>)
 8001100:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001102:	20fa      	movs	r0, #250	; 0xfa
 8001104:	f008 f888 	bl	8009218 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001108:	2102      	movs	r1, #2
 800110a:	4834      	ldr	r0, [pc, #208]	; (80011dc <takeWifiSSID+0x364>)
 800110c:	f008 fe54 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d11e      	bne.n	8001154 <takeWifiSSID+0x2dc>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3b01      	subs	r3, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcbe 	bl	8000a9c <getCharFromCursorPosition>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <takeWifiSSID+0x368>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4413      	add	r3, r2
 800112a:	460a      	mov	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	b2d9      	uxtb	r1, r3
 8001132:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <takeWifiSSID+0x368>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff faa8 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	3301      	adds	r3, #1
 800114c:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800114e:	20fa      	movs	r0, #250	; 0xfa
 8001150:	f008 f862 	bl	8009218 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001154:	2104      	movs	r1, #4
 8001156:	4821      	ldr	r0, [pc, #132]	; (80011dc <takeWifiSSID+0x364>)
 8001158:	f008 fe2e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d12e      	bne.n	80011c0 <takeWifiSSID+0x348>
        	if(strlen(wifiSSID) >= 1) {
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <takeWifiSSID+0x368>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d027      	beq.n	80011ba <takeWifiSSID+0x342>
        		wifiSSID[wifiNameLoc] = '\0';
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <takeWifiSSID+0x368>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4413      	add	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3306      	adds	r3, #6
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff faa8 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8001184:	2032      	movs	r0, #50	; 0x32
 8001186:	f008 f847 	bl	8009218 <HAL_Delay>
        		if(writeLoc > 7) {
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b07      	cmp	r3, #7
 800118e:	dd03      	ble.n	8001198 <takeWifiSSID+0x320>
        			writeLoc--;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3b01      	subs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e004      	b.n	80011a2 <takeWifiSSID+0x32a>
        		} else if(writeLoc < 7) {
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b06      	cmp	r3, #6
 800119c:	dc01      	bgt.n	80011a2 <takeWifiSSID+0x32a>
        			writeLoc = 7;
 800119e:	2307      	movs	r3, #7
 80011a0:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	dd03      	ble.n	80011b0 <takeWifiSSID+0x338>
        			wifiNameLoc--;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	e004      	b.n	80011ba <takeWifiSSID+0x342>
        		} else if(wifiNameLoc < 0) {
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da01      	bge.n	80011ba <takeWifiSSID+0x342>
        			wifiNameLoc = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80011ba:	20fa      	movs	r0, #250	; 0xfa
 80011bc:	f008 f82c 	bl	8009218 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <takeWifiSSID+0x360>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff fa2e 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80011ce:	e672      	b.n	8000eb6 <takeWifiSSID+0x3e>
    }
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	20000944 	.word	0x20000944
 80011dc:	40010800 	.word	0x40010800
 80011e0:	20000cdc 	.word	0x20000cdc

080011e4 <takeWifiPass>:

void takeWifiPass(int state) {
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fa99 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80011f8:	2214      	movs	r2, #20
 80011fa:	2100      	movs	r1, #0
 80011fc:	488e      	ldr	r0, [pc, #568]	; (8001438 <takeWifiPass+0x254>)
 80011fe:	f00b ff1f 	bl	800d040 <memset>
    }

    int realCharPos = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001206:	4b8d      	ldr	r3, [pc, #564]	; (800143c <takeWifiPass+0x258>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
    page = 1;
 800120c:	4b8c      	ldr	r3, [pc, #560]	; (8001440 <takeWifiPass+0x25c>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001216:	2307      	movs	r3, #7
 8001218:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 800121a:	2101      	movs	r1, #1
 800121c:	2003      	movs	r0, #3
 800121e:	f7ff fac7 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001222:	2108      	movs	r1, #8
 8001224:	4887      	ldr	r0, [pc, #540]	; (8001444 <takeWifiPass+0x260>)
 8001226:	f008 fdc7 	bl	8009db8 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d137      	bne.n	80012a0 <takeWifiPass+0xbc>
            lcd_cursor(0);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fa77 	bl	8000724 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001236:	4880      	ldr	r0, [pc, #512]	; (8001438 <takeWifiPass+0x254>)
 8001238:	f7fe fff4 	bl	8000224 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	2b14      	cmp	r3, #20
 8001240:	d910      	bls.n	8001264 <takeWifiPass+0x80>
                lcd_clear();
 8001242:	f7ff fa3d 	bl	80006c0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001246:	4a80      	ldr	r2, [pc, #512]	; (8001448 <takeWifiPass+0x264>)
 8001248:	2101      	movs	r1, #1
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fa0c 	bl	8000668 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8001250:	4a7e      	ldr	r2, [pc, #504]	; (800144c <takeWifiPass+0x268>)
 8001252:	2101      	movs	r1, #1
 8001254:	2002      	movs	r0, #2
 8001256:	f7ff fa07 	bl	8000668 <lcd_print>
                HAL_Delay(1200);
 800125a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800125e:	f007 ffdb 	bl	8009218 <HAL_Delay>
                goto mainPASSSection;
 8001262:	e7c3      	b.n	80011ec <takeWifiPass+0x8>
            }

            convertToIntArray(eepromData, wifiPassTemp, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	497a      	ldr	r1, [pc, #488]	; (8001450 <takeWifiPass+0x26c>)
 8001268:	487a      	ldr	r0, [pc, #488]	; (8001454 <takeWifiPass+0x270>)
 800126a:	f7ff fc59 	bl	8000b20 <convertToIntArray>
            HAL_Delay(200);
 800126e:	20c8      	movs	r0, #200	; 0xc8
 8001270:	f007 ffd2 	bl	8009218 <HAL_Delay>
            memcpy(&eepromData[passStartPos], wifiPassTemp, 20);
 8001274:	4b78      	ldr	r3, [pc, #480]	; (8001458 <takeWifiPass+0x274>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <takeWifiPass+0x270>)
 800127c:	4413      	add	r3, r2
 800127e:	4a74      	ldr	r2, [pc, #464]	; (8001450 <takeWifiPass+0x26c>)
 8001280:	461d      	mov	r5, r3
 8001282:	4614      	mov	r4, r2
 8001284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001286:	6028      	str	r0, [r5, #0]
 8001288:	6069      	str	r1, [r5, #4]
 800128a:	60aa      	str	r2, [r5, #8]
 800128c:	60eb      	str	r3, [r5, #12]
 800128e:	6820      	ldr	r0, [r4, #0]
 8001290:	6128      	str	r0, [r5, #16]
            HAL_Delay(200);
 8001292:	20c8      	movs	r0, #200	; 0xc8
 8001294:	f007 ffc0 	bl	8009218 <HAL_Delay>

            hafizaYaz = 1;
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <takeWifiPass+0x278>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]

            break;
 800129e:	e14d      	b.n	800153c <takeWifiPass+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012a0:	2101      	movs	r1, #1
 80012a2:	4868      	ldr	r0, [pc, #416]	; (8001444 <takeWifiPass+0x260>)
 80012a4:	f008 fd88 	bl	8009db8 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d166      	bne.n	800137c <takeWifiPass+0x198>
        	realCharPos++;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b50      	cmp	r3, #80	; 0x50
 80012b8:	dd01      	ble.n	80012be <takeWifiPass+0xda>
        	    realCharPos = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <takeWifiPass+0x258>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d152      	bne.n	800136c <takeWifiPass+0x188>
            	if(page == 1) {
 80012c6:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <takeWifiPass+0x25c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10c      	bne.n	80012e8 <takeWifiPass+0x104>
            		cursorPosition = 1;
 80012ce:	4b5b      	ldr	r3, [pc, #364]	; (800143c <takeWifiPass+0x258>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
            		page++;
 80012d4:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <takeWifiPass+0x25c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a59      	ldr	r2, [pc, #356]	; (8001440 <takeWifiPass+0x25c>)
 80012dc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80012de:	2102      	movs	r1, #2
 80012e0:	2003      	movs	r0, #3
 80012e2:	f7ff fa65 	bl	80007b0 <printTemplate>
 80012e6:	e046      	b.n	8001376 <takeWifiPass+0x192>
            	} else if(page == 2) {
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <takeWifiPass+0x25c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d10c      	bne.n	800130a <takeWifiPass+0x126>
            		cursorPosition = 1;
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <takeWifiPass+0x258>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
            		page++;
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <takeWifiPass+0x25c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <takeWifiPass+0x25c>)
 80012fe:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001300:	2103      	movs	r1, #3
 8001302:	2003      	movs	r0, #3
 8001304:	f7ff fa54 	bl	80007b0 <printTemplate>
 8001308:	e035      	b.n	8001376 <takeWifiPass+0x192>
            	} else if(page == 3) {
 800130a:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <takeWifiPass+0x25c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d10c      	bne.n	800132c <takeWifiPass+0x148>
            		cursorPosition = 1;
 8001312:	4b4a      	ldr	r3, [pc, #296]	; (800143c <takeWifiPass+0x258>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
            		page++;
 8001318:	4b49      	ldr	r3, [pc, #292]	; (8001440 <takeWifiPass+0x25c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a48      	ldr	r2, [pc, #288]	; (8001440 <takeWifiPass+0x25c>)
 8001320:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001322:	2104      	movs	r1, #4
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff fa43 	bl	80007b0 <printTemplate>
 800132a:	e024      	b.n	8001376 <takeWifiPass+0x192>
            	} else if(page == 4) {
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <takeWifiPass+0x25c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d10c      	bne.n	800134e <takeWifiPass+0x16a>
            		cursorPosition = 1;
 8001334:	4b41      	ldr	r3, [pc, #260]	; (800143c <takeWifiPass+0x258>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]
            		page++;
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <takeWifiPass+0x25c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a3f      	ldr	r2, [pc, #252]	; (8001440 <takeWifiPass+0x25c>)
 8001342:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001344:	2105      	movs	r1, #5
 8001346:	2003      	movs	r0, #3
 8001348:	f7ff fa32 	bl	80007b0 <printTemplate>
 800134c:	e013      	b.n	8001376 <takeWifiPass+0x192>
            	} else if(page == 5) {
 800134e:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <takeWifiPass+0x25c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b05      	cmp	r3, #5
 8001354:	d10f      	bne.n	8001376 <takeWifiPass+0x192>
            		cursorPosition = 1;
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <takeWifiPass+0x258>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
            		page = 1;
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <takeWifiPass+0x25c>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001362:	2101      	movs	r1, #1
 8001364:	2003      	movs	r0, #3
 8001366:	f7ff fa23 	bl	80007b0 <printTemplate>
 800136a:	e004      	b.n	8001376 <takeWifiPass+0x192>
            	}
            } else {
            	cursorPosition++;
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <takeWifiPass+0x258>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <takeWifiPass+0x258>)
 8001374:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001376:	20fa      	movs	r0, #250	; 0xfa
 8001378:	f007 ff4e 	bl	8009218 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800137c:	2108      	movs	r1, #8
 800137e:	4838      	ldr	r0, [pc, #224]	; (8001460 <takeWifiPass+0x27c>)
 8001380:	f008 fd1a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d174      	bne.n	8001474 <takeWifiPass+0x290>
        	realCharPos--;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3b01      	subs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dc01      	bgt.n	800139a <takeWifiPass+0x1b6>
        	    realCharPos = 80;
 8001396:	2350      	movs	r3, #80	; 0x50
 8001398:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <takeWifiPass+0x258>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d160      	bne.n	8001464 <takeWifiPass+0x280>
            	if(page == 1) {
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <takeWifiPass+0x25c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10a      	bne.n	80013c0 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <takeWifiPass+0x258>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	601a      	str	r2, [r3, #0]
            		page = 5;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <takeWifiPass+0x25c>)
 80013b2:	2205      	movs	r2, #5
 80013b4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80013b6:	2105      	movs	r1, #5
 80013b8:	2003      	movs	r0, #3
 80013ba:	f7ff f9f9 	bl	80007b0 <printTemplate>
 80013be:	e056      	b.n	800146e <takeWifiPass+0x28a>
            	} else if(page == 2) {
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <takeWifiPass+0x25c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d10a      	bne.n	80013de <takeWifiPass+0x1fa>
            		cursorPosition = 16;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <takeWifiPass+0x258>)
 80013ca:	2210      	movs	r2, #16
 80013cc:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <takeWifiPass+0x25c>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	2003      	movs	r0, #3
 80013d8:	f7ff f9ea 	bl	80007b0 <printTemplate>
 80013dc:	e047      	b.n	800146e <takeWifiPass+0x28a>
            	} else if(page == 3) {
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <takeWifiPass+0x25c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d10a      	bne.n	80013fc <takeWifiPass+0x218>
            		cursorPosition = 16;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <takeWifiPass+0x258>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	601a      	str	r2, [r3, #0]
            		page = 2;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <takeWifiPass+0x25c>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80013f2:	2102      	movs	r1, #2
 80013f4:	2003      	movs	r0, #3
 80013f6:	f7ff f9db 	bl	80007b0 <printTemplate>
 80013fa:	e038      	b.n	800146e <takeWifiPass+0x28a>
            	} else if(page == 4) {
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <takeWifiPass+0x25c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b04      	cmp	r3, #4
 8001402:	d10a      	bne.n	800141a <takeWifiPass+0x236>
            		cursorPosition = 16;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <takeWifiPass+0x258>)
 8001406:	2210      	movs	r2, #16
 8001408:	601a      	str	r2, [r3, #0]
            		page = 3;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <takeWifiPass+0x25c>)
 800140c:	2203      	movs	r2, #3
 800140e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001410:	2103      	movs	r1, #3
 8001412:	2003      	movs	r0, #3
 8001414:	f7ff f9cc 	bl	80007b0 <printTemplate>
 8001418:	e029      	b.n	800146e <takeWifiPass+0x28a>
            	} else if(page == 5) {
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <takeWifiPass+0x25c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d125      	bne.n	800146e <takeWifiPass+0x28a>
            		cursorPosition = 16;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <takeWifiPass+0x258>)
 8001424:	2210      	movs	r2, #16
 8001426:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <takeWifiPass+0x25c>)
 800142a:	2204      	movs	r2, #4
 800142c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800142e:	2104      	movs	r1, #4
 8001430:	2003      	movs	r0, #3
 8001432:	f7ff f9bd 	bl	80007b0 <printTemplate>
 8001436:	e01a      	b.n	800146e <takeWifiPass+0x28a>
 8001438:	20000cf0 	.word	0x20000cf0
 800143c:	20000944 	.word	0x20000944
 8001440:	20000948 	.word	0x20000948
 8001444:	40010800 	.word	0x40010800
 8001448:	0800da98 	.word	0x0800da98
 800144c:	0800dac0 	.word	0x0800dac0
 8001450:	20000d18 	.word	0x20000d18
 8001454:	20000c38 	.word	0x20000c38
 8001458:	200009b3 	.word	0x200009b3
 800145c:	20000d5c 	.word	0x20000d5c
 8001460:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <takeWifiPass+0x360>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	4a36      	ldr	r2, [pc, #216]	; (8001544 <takeWifiPass+0x360>)
 800146c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800146e:	20fa      	movs	r0, #250	; 0xfa
 8001470:	f007 fed2 	bl	8009218 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001474:	2102      	movs	r1, #2
 8001476:	4834      	ldr	r0, [pc, #208]	; (8001548 <takeWifiPass+0x364>)
 8001478:	f008 fc9e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d11e      	bne.n	80014c0 <takeWifiPass+0x2dc>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3b01      	subs	r3, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb08 	bl	8000a9c <getCharFromCursorPosition>
 800148c:	4603      	mov	r3, r0
 800148e:	4619      	mov	r1, r3
 8001490:	4a2e      	ldr	r2, [pc, #184]	; (800154c <takeWifiPass+0x368>)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	460a      	mov	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	b2d9      	uxtb	r1, r3
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <takeWifiPass+0x368>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff f8f2 	bl	8000692 <lcd_print_char>

            writeLoc++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3301      	adds	r3, #1
 80014b8:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80014ba:	20fa      	movs	r0, #250	; 0xfa
 80014bc:	f007 feac 	bl	8009218 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80014c0:	2104      	movs	r1, #4
 80014c2:	4821      	ldr	r0, [pc, #132]	; (8001548 <takeWifiPass+0x364>)
 80014c4:	f008 fc78 	bl	8009db8 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d12e      	bne.n	800152c <takeWifiPass+0x348>
            if(strlen(wifiPass) >= 1) {
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <takeWifiPass+0x368>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d027      	beq.n	8001526 <takeWifiPass+0x342>
            	wifiPass[wifiPassLoc] = '\0';
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <takeWifiPass+0x368>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4413      	add	r3, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3306      	adds	r3, #6
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff f8f2 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f007 fe91 	bl	8009218 <HAL_Delay>

            	if(writeLoc > 7) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	dd03      	ble.n	8001504 <takeWifiPass+0x320>
            		writeLoc--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e004      	b.n	800150e <takeWifiPass+0x32a>
            	} else if(writeLoc < 7) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b06      	cmp	r3, #6
 8001508:	dc01      	bgt.n	800150e <takeWifiPass+0x32a>
            		writeLoc = 7;
 800150a:	2307      	movs	r3, #7
 800150c:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	dd03      	ble.n	800151c <takeWifiPass+0x338>
            		wifiPassLoc--;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3b01      	subs	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	e004      	b.n	8001526 <takeWifiPass+0x342>
            	} else if(wifiPassLoc < 0) {
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da01      	bge.n	8001526 <takeWifiPass+0x342>
            		wifiPassLoc = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001526:	20fa      	movs	r0, #250	; 0xfa
 8001528:	f007 fe76 	bl	8009218 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <takeWifiPass+0x360>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	2002      	movs	r0, #2
 8001536:	f7ff f878 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800153a:	e672      	b.n	8001222 <takeWifiPass+0x3e>
    }
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	20000944 	.word	0x20000944
 8001548:	40010800 	.word	0x40010800
 800154c:	20000cf0 	.word	0x20000cf0

08001550 <checkSlideVal>:

int checkSlideVal(int state) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d111      	bne.n	8001582 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800155e:	2101      	movs	r1, #1
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <checkSlideVal+0x60>)
 8001562:	f008 fc29 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <checkSlideVal+0x20>
			return 34;
 800156c:	2322      	movs	r3, #34	; 0x22
 800156e:	e01b      	b.n	80015a8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001570:	2108      	movs	r1, #8
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <checkSlideVal+0x64>)
 8001574:	f008 fc20 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d113      	bne.n	80015a6 <checkSlideVal+0x56>
			return 32;
 800157e:	2320      	movs	r3, #32
 8001580:	e012      	b.n	80015a8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001582:	2101      	movs	r1, #1
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <checkSlideVal+0x60>)
 8001586:	f008 fc17 	bl	8009db8 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <checkSlideVal+0x44>
			return 35;
 8001590:	2323      	movs	r3, #35	; 0x23
 8001592:	e009      	b.n	80015a8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001594:	2108      	movs	r1, #8
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <checkSlideVal+0x64>)
 8001598:	f008 fc0e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <checkSlideVal+0x56>
			return 33;
 80015a2:	2321      	movs	r3, #33	; 0x21
 80015a4:	e000      	b.n	80015a8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40011000 	.word	0x40011000

080015b8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7fe fe2c 	bl	8000224 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80015d4:	e08a      	b.n	80016ec <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f7ff ffba 	bl	8001550 <checkSlideVal>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dd07      	ble.n	80015f2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f7ff ffb4 	bl	8001550 <checkSlideVal>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <slideText+0x148>)
 80015ee:	701a      	strb	r2, [r3, #0]
			break;
 80015f0:	e081      	b.n	80016f6 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	e075      	b.n	80016e4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f7ff ffa9 	bl	8001550 <checkSlideVal>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	dd09      	ble.n	8001618 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ffa3 	bl	8001550 <checkSlideVal>
 800160a:	4603      	mov	r3, r0
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <slideText+0x148>)
 8001610:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001616:	e069      	b.n	80016ec <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	4413      	add	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	e029      	b.n	8001676 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001622:	6838      	ldr	r0, [r7, #0]
 8001624:	f7ff ff94 	bl	8001550 <checkSlideVal>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	dd0b      	ble.n	8001646 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ff8e 	bl	8001550 <checkSlideVal>
 8001634:	4603      	mov	r3, r0
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <slideText+0x148>)
 800163a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001644:	e01d      	b.n	8001682 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	b2d8      	uxtb	r0, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	f7ff f814 	bl	8000692 <lcd_print_char>
				HAL_Delay(30);
 800166a:	201e      	movs	r0, #30
 800166c:	f007 fdd4 	bl	8009218 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3301      	adds	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	7dfa      	ldrb	r2, [r7, #23]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4413      	add	r3, r2
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbcf      	blt.n	8001622 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	3b01      	subs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	e023      	b.n	80016d2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f7ff ff60 	bl	8001550 <checkSlideVal>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	dd0b      	ble.n	80016ae <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f7ff ff5a 	bl	8001550 <checkSlideVal>
 800169c:	4603      	mov	r3, r0
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <slideText+0x148>)
 80016a2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80016ac:	e017      	b.n	80016de <slideText+0x126>
				}
			     if(j >= startPos) {
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	db0a      	blt.n	80016cc <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	b2d1      	uxtb	r1, r2
 80016be:	2220      	movs	r2, #32
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ffe6 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(30);
 80016c6:	201e      	movs	r0, #30
 80016c8:	f007 fda6 	bl	8009218 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	7dfa      	ldrb	r2, [r7, #23]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dad5      	bge.n	800168a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	3301      	adds	r3, #1
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	6a3a      	ldr	r2, [r7, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	db85      	blt.n	80015f8 <slideText+0x40>
	while(mainLoopVal == 1) {
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	f43f af71 	beq.w	80015d6 <slideText+0x1e>
			     }
			}
		}
	}
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000d30 	.word	0x20000d30

08001704 <menu>:

void menu() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001708:	2101      	movs	r1, #1
 800170a:	488f      	ldr	r0, [pc, #572]	; (8001948 <menu+0x244>)
 800170c:	f008 fb54 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	f040 808e 	bne.w	8001834 <menu+0x130>
 8001718:	4b8c      	ldr	r3, [pc, #560]	; (800194c <menu+0x248>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f083 0301 	eor.w	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8086 	beq.w	8001834 <menu+0x130>
		menuSayac = menuSayac+1;
 8001728:	4b89      	ldr	r3, [pc, #548]	; (8001950 <menu+0x24c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b87      	ldr	r3, [pc, #540]	; (8001950 <menu+0x24c>)
 8001732:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001734:	4b86      	ldr	r3, [pc, #536]	; (8001950 <menu+0x24c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b24      	cmp	r3, #36	; 0x24
 800173a:	d102      	bne.n	8001742 <menu+0x3e>
			menuSayac = 1;
 800173c:	4b84      	ldr	r3, [pc, #528]	; (8001950 <menu+0x24c>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001742:	4b83      	ldr	r3, [pc, #524]	; (8001950 <menu+0x24c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b12      	cmp	r3, #18
 8001748:	d106      	bne.n	8001758 <menu+0x54>
 800174a:	4b82      	ldr	r3, [pc, #520]	; (8001954 <menu+0x250>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <menu+0x54>
			menuSayac = 21;
 8001752:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <menu+0x24c>)
 8001754:	2215      	movs	r2, #21
 8001756:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001758:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <menu+0x24c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d106      	bne.n	800176e <menu+0x6a>
 8001760:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <menu+0x254>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <menu+0x6a>
			menuSayac = 16;
 8001768:	4b79      	ldr	r3, [pc, #484]	; (8001950 <menu+0x24c>)
 800176a:	2210      	movs	r2, #16
 800176c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800176e:	4b78      	ldr	r3, [pc, #480]	; (8001950 <menu+0x24c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b0d      	cmp	r3, #13
 8001774:	d106      	bne.n	8001784 <menu+0x80>
 8001776:	4b78      	ldr	r3, [pc, #480]	; (8001958 <menu+0x254>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <menu+0x80>
			menuSayac = 16;
 800177e:	4b74      	ldr	r3, [pc, #464]	; (8001950 <menu+0x24c>)
 8001780:	2210      	movs	r2, #16
 8001782:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001784:	4b72      	ldr	r3, [pc, #456]	; (8001950 <menu+0x24c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d106      	bne.n	800179a <menu+0x96>
 800178c:	4b72      	ldr	r3, [pc, #456]	; (8001958 <menu+0x254>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <menu+0x96>
			menuSayac = 13;
 8001794:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <menu+0x24c>)
 8001796:	220d      	movs	r2, #13
 8001798:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800179a:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <menu+0x24c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d10a      	bne.n	80017b8 <menu+0xb4>
 80017a2:	4b6e      	ldr	r3, [pc, #440]	; (800195c <menu+0x258>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d003      	beq.n	80017b2 <menu+0xae>
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <menu+0x258>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d102      	bne.n	80017b8 <menu+0xb4>
			menuSayac = 11;
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <menu+0x24c>)
 80017b4:	220b      	movs	r2, #11
 80017b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80017b8:	4b65      	ldr	r3, [pc, #404]	; (8001950 <menu+0x24c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d10e      	bne.n	80017de <menu+0xda>
 80017c0:	4b67      	ldr	r3, [pc, #412]	; (8001960 <menu+0x25c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d003      	beq.n	80017d0 <menu+0xcc>
 80017c8:	4b65      	ldr	r3, [pc, #404]	; (8001960 <menu+0x25c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d106      	bne.n	80017de <menu+0xda>
 80017d0:	4b61      	ldr	r3, [pc, #388]	; (8001958 <menu+0x254>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d102      	bne.n	80017de <menu+0xda>
			menuSayac = 16;
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <menu+0x24c>)
 80017da:	2210      	movs	r2, #16
 80017dc:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80017de:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <menu+0x24c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d10e      	bne.n	8001804 <menu+0x100>
 80017e6:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <menu+0x25c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d003      	beq.n	80017f6 <menu+0xf2>
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <menu+0x25c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d106      	bne.n	8001804 <menu+0x100>
 80017f6:	4b58      	ldr	r3, [pc, #352]	; (8001958 <menu+0x254>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d102      	bne.n	8001804 <menu+0x100>
			menuSayac = 13;
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <menu+0x24c>)
 8001800:	220d      	movs	r2, #13
 8001802:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001804:	4b52      	ldr	r3, [pc, #328]	; (8001950 <menu+0x24c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d106      	bne.n	800181a <menu+0x116>
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <menu+0x260>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d102      	bne.n	800181a <menu+0x116>
			menuSayac = 16;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <menu+0x24c>)
 8001816:	2210      	movs	r2, #16
 8001818:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800181a:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <menu+0x24c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b18      	cmp	r3, #24
 8001820:	d106      	bne.n	8001830 <menu+0x12c>
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <menu+0x250>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <menu+0x12c>
			menuSayac = 26;
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <menu+0x24c>)
 800182c:	221a      	movs	r2, #26
 800182e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001830:	f004 fd20 	bl	8006274 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001834:	2108      	movs	r1, #8
 8001836:	484c      	ldr	r0, [pc, #304]	; (8001968 <menu+0x264>)
 8001838:	f008 fabe 	bl	8009db8 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d175      	bne.n	800192e <menu+0x22a>
 8001842:	4b42      	ldr	r3, [pc, #264]	; (800194c <menu+0x248>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d06e      	beq.n	800192e <menu+0x22a>
		if (menuSayac <= 1) {
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <menu+0x24c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d802      	bhi.n	800185e <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <menu+0x24c>)
 800185a:	2224      	movs	r2, #36	; 0x24
 800185c:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <menu+0x24c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <menu+0x24c>)
 8001868:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <menu+0x24c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b14      	cmp	r3, #20
 8001870:	d106      	bne.n	8001880 <menu+0x17c>
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <menu+0x250>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <menu+0x17c>
			menuSayac = 17;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <menu+0x24c>)
 800187c:	2211      	movs	r2, #17
 800187e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <menu+0x24c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d106      	bne.n	8001896 <menu+0x192>
 8001888:	4b33      	ldr	r3, [pc, #204]	; (8001958 <menu+0x254>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <menu+0x192>
			menuSayac = 7;
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <menu+0x24c>)
 8001892:	2207      	movs	r2, #7
 8001894:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <menu+0x24c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	d106      	bne.n	80018ac <menu+0x1a8>
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <menu+0x254>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <menu+0x1a8>
			menuSayac = 12;
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <menu+0x24c>)
 80018a8:	220c      	movs	r2, #12
 80018aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <menu+0x24c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	d106      	bne.n	80018c2 <menu+0x1be>
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <menu+0x254>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d102      	bne.n	80018c2 <menu+0x1be>
			menuSayac = 8;
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <menu+0x24c>)
 80018be:	2208      	movs	r2, #8
 80018c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <menu+0x24c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	d10a      	bne.n	80018e0 <menu+0x1dc>
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <menu+0x258>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d003      	beq.n	80018da <menu+0x1d6>
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <menu+0x258>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d102      	bne.n	80018e0 <menu+0x1dc>
			menuSayac = 9;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <menu+0x24c>)
 80018dc:	2209      	movs	r2, #9
 80018de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <menu+0x24c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d10a      	bne.n	80018fe <menu+0x1fa>
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <menu+0x25c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d003      	beq.n	80018f8 <menu+0x1f4>
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <menu+0x25c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d102      	bne.n	80018fe <menu+0x1fa>
			menuSayac = 11;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <menu+0x24c>)
 80018fa:	220b      	movs	r2, #11
 80018fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <menu+0x24c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d106      	bne.n	8001914 <menu+0x210>
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <menu+0x260>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <menu+0x210>
			menuSayac = 14;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <menu+0x24c>)
 8001910:	220e      	movs	r2, #14
 8001912:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <menu+0x24c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b19      	cmp	r3, #25
 800191a:	d106      	bne.n	800192a <menu+0x226>
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <menu+0x250>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <menu+0x226>
			menuSayac = 23;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <menu+0x24c>)
 8001926:	2217      	movs	r2, #23
 8001928:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800192a:	f004 fca3 	bl	8006274 <bekle>
	}

	if (menuSayac == 0) {
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <menu+0x24c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d134      	bne.n	80019a0 <menu+0x29c>
		if(dilSecim == 0) {
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <menu+0x268>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d122      	bne.n	8001984 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <menu+0x26c>)
 8001940:	2101      	movs	r1, #1
 8001942:	2001      	movs	r0, #1
 8001944:	e016      	b.n	8001974 <menu+0x270>
 8001946:	bf00      	nop
 8001948:	40010800 	.word	0x40010800
 800194c:	20000d5f 	.word	0x20000d5f
 8001950:	20000d30 	.word	0x20000d30
 8001954:	20000d3f 	.word	0x20000d3f
 8001958:	20000d38 	.word	0x20000d38
 800195c:	20000d39 	.word	0x20000d39
 8001960:	20000d3a 	.word	0x20000d3a
 8001964:	20000d3b 	.word	0x20000d3b
 8001968:	40011000 	.word	0x40011000
 800196c:	20000d51 	.word	0x20000d51
 8001970:	0800dad4 	.word	0x0800dad4
 8001974:	f7fe fe78 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001978:	4a94      	ldr	r2, [pc, #592]	; (8001bcc <menu+0x4c8>)
 800197a:	2101      	movs	r1, #1
 800197c:	2002      	movs	r0, #2
 800197e:	f7fe fe73 	bl	8000668 <lcd_print>
 8001982:	e00d      	b.n	80019a0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <menu+0x4cc>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d109      	bne.n	80019a0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800198c:	4a91      	ldr	r2, [pc, #580]	; (8001bd4 <menu+0x4d0>)
 800198e:	2101      	movs	r1, #1
 8001990:	2001      	movs	r0, #1
 8001992:	f7fe fe69 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001996:	4a90      	ldr	r2, [pc, #576]	; (8001bd8 <menu+0x4d4>)
 8001998:	2101      	movs	r1, #1
 800199a:	2002      	movs	r0, #2
 800199c:	f7fe fe64 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80019a0:	4b8e      	ldr	r3, [pc, #568]	; (8001bdc <menu+0x4d8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	f040 82b5 	bne.w	8001f14 <menu+0x810>
		if(dilSecim == 0) {
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <menu+0x4cc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80019b2:	4a8b      	ldr	r2, [pc, #556]	; (8001be0 <menu+0x4dc>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7fe fe56 	bl	8000668 <lcd_print>
 80019bc:	e008      	b.n	80019d0 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80019be:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <menu+0x4cc>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d104      	bne.n	80019d0 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80019c6:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <menu+0x4e0>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7fe fe4c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80019d0:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <menu+0x4e4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d123      	bne.n	8001a20 <menu+0x31c>
			if(dilSecim == 0) {
 80019d8:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <menu+0x4cc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80019e0:	4a82      	ldr	r2, [pc, #520]	; (8001bec <menu+0x4e8>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7fe fe3f 	bl	8000668 <lcd_print>
 80019ea:	e008      	b.n	80019fe <menu+0x2fa>

			} else if(dilSecim == 1) {
 80019ec:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <menu+0x4cc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d104      	bne.n	80019fe <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80019f4:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <menu+0x4ec>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	2002      	movs	r0, #2
 80019fa:	f7fe fe35 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80019fe:	4a7d      	ldr	r2, [pc, #500]	; (8001bf4 <menu+0x4f0>)
 8001a00:	210f      	movs	r1, #15
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7fe fe30 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001a08:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <menu+0x4f4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	497b      	ldr	r1, [pc, #492]	; (8001bfc <menu+0x4f8>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00b f9fd 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001a16:	4a79      	ldr	r2, [pc, #484]	; (8001bfc <menu+0x4f8>)
 8001a18:	210e      	movs	r1, #14
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f7fe fe24 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001a20:	4b71      	ldr	r3, [pc, #452]	; (8001be8 <menu+0x4e4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d123      	bne.n	8001a70 <menu+0x36c>
			if(dilSecim == 0) {
 8001a28:	4b69      	ldr	r3, [pc, #420]	; (8001bd0 <menu+0x4cc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001a30:	4a73      	ldr	r2, [pc, #460]	; (8001c00 <menu+0x4fc>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7fe fe17 	bl	8000668 <lcd_print>
 8001a3a:	e008      	b.n	8001a4e <menu+0x34a>
			} else if(dilSecim == 1) {
 8001a3c:	4b64      	ldr	r3, [pc, #400]	; (8001bd0 <menu+0x4cc>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d104      	bne.n	8001a4e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001a44:	4a6f      	ldr	r2, [pc, #444]	; (8001c04 <menu+0x500>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7fe fe0d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <menu+0x504>)
 8001a50:	210f      	movs	r1, #15
 8001a52:	2002      	movs	r0, #2
 8001a54:	f7fe fe08 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001a58:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <menu+0x508>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	4967      	ldr	r1, [pc, #412]	; (8001bfc <menu+0x4f8>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f00b f9d5 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <menu+0x4f8>)
 8001a68:	210e      	movs	r1, #14
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7fe fdfc 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001a70:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <menu+0x4e4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <menu+0x3bc>
			if(dilSecim == 0) {
 8001a78:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <menu+0x4cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001a80:	4a63      	ldr	r2, [pc, #396]	; (8001c10 <menu+0x50c>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	2002      	movs	r0, #2
 8001a86:	f7fe fdef 	bl	8000668 <lcd_print>
 8001a8a:	e008      	b.n	8001a9e <menu+0x39a>
			} else if(dilSecim == 1) {
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <menu+0x4cc>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d104      	bne.n	8001a9e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001a94:	4a5f      	ldr	r2, [pc, #380]	; (8001c14 <menu+0x510>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7fe fde5 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <menu+0x504>)
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7fe fde0 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <menu+0x514>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	220a      	movs	r2, #10
 8001aae:	4953      	ldr	r1, [pc, #332]	; (8001bfc <menu+0x4f8>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00b f9ad 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001ab6:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <menu+0x4f8>)
 8001ab8:	210e      	movs	r1, #14
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7fe fdd4 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001ac0:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <menu+0x4e4>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d123      	bne.n	8001b10 <menu+0x40c>
			if(dilSecim == 0) {
 8001ac8:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <menu+0x4cc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <menu+0x518>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7fe fdc7 	bl	8000668 <lcd_print>
 8001ada:	e008      	b.n	8001aee <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001adc:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <menu+0x4cc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d104      	bne.n	8001aee <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <menu+0x51c>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7fe fdbd 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001aee:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <menu+0x504>)
 8001af0:	210f      	movs	r1, #15
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7fe fdb8 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <menu+0x520>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	220a      	movs	r2, #10
 8001afe:	493f      	ldr	r1, [pc, #252]	; (8001bfc <menu+0x4f8>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00b f985 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001b06:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <menu+0x4f8>)
 8001b08:	210e      	movs	r1, #14
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7fe fdac 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <menu+0x4e4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d123      	bne.n	8001b60 <menu+0x45c>
			if(dilSecim == 0) {
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <menu+0x4cc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001b20:	4a41      	ldr	r2, [pc, #260]	; (8001c28 <menu+0x524>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7fe fd9f 	bl	8000668 <lcd_print>
 8001b2a:	e008      	b.n	8001b3e <menu+0x43a>
			} else if(dilSecim == 1) {
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <menu+0x4cc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d104      	bne.n	8001b3e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001b34:	4a3d      	ldr	r2, [pc, #244]	; (8001c2c <menu+0x528>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fd95 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b3e:	4a32      	ldr	r2, [pc, #200]	; (8001c08 <menu+0x504>)
 8001b40:	210f      	movs	r1, #15
 8001b42:	2002      	movs	r0, #2
 8001b44:	f7fe fd90 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <menu+0x52c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	492b      	ldr	r1, [pc, #172]	; (8001bfc <menu+0x4f8>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00b f95d 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001b56:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <menu+0x4f8>)
 8001b58:	210e      	movs	r1, #14
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe fd84 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <menu+0x4e4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d123      	bne.n	8001bb0 <menu+0x4ac>
			if(dilSecim == 0) {
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <menu+0x4cc>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001b70:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <menu+0x530>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	2002      	movs	r0, #2
 8001b76:	f7fe fd77 	bl	8000668 <lcd_print>
 8001b7a:	e008      	b.n	8001b8e <menu+0x48a>
			} else if(dilSecim == 1) {
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <menu+0x4cc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d104      	bne.n	8001b8e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001b84:	4a2c      	ldr	r2, [pc, #176]	; (8001c38 <menu+0x534>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7fe fd6d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <menu+0x504>)
 8001b90:	210f      	movs	r1, #15
 8001b92:	2002      	movs	r0, #2
 8001b94:	f7fe fd68 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <menu+0x538>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	4917      	ldr	r1, [pc, #92]	; (8001bfc <menu+0x4f8>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00b f935 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <menu+0x4f8>)
 8001ba8:	210e      	movs	r1, #14
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7fe fd5c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <menu+0x4e4>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d15f      	bne.n	8001c78 <menu+0x574>
			if(dilSecim == 0) {
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <menu+0x4cc>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d141      	bne.n	8001c44 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <menu+0x53c>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7fe fd4f 	bl	8000668 <lcd_print>
 8001bca:	e044      	b.n	8001c56 <menu+0x552>
 8001bcc:	0800dae8 	.word	0x0800dae8
 8001bd0:	20000d51 	.word	0x20000d51
 8001bd4:	0800dafc 	.word	0x0800dafc
 8001bd8:	0800db10 	.word	0x0800db10
 8001bdc:	20000d30 	.word	0x20000d30
 8001be0:	0800db24 	.word	0x0800db24
 8001be4:	0800db38 	.word	0x0800db38
 8001be8:	20000d32 	.word	0x20000d32
 8001bec:	0800db4c 	.word	0x0800db4c
 8001bf0:	0800db5c 	.word	0x0800db5c
 8001bf4:	0800db6c 	.word	0x0800db6c
 8001bf8:	20000d52 	.word	0x20000d52
 8001bfc:	20000ca8 	.word	0x20000ca8
 8001c00:	0800db70 	.word	0x0800db70
 8001c04:	0800db80 	.word	0x0800db80
 8001c08:	0800db90 	.word	0x0800db90
 8001c0c:	20000d53 	.word	0x20000d53
 8001c10:	0800db94 	.word	0x0800db94
 8001c14:	0800dba4 	.word	0x0800dba4
 8001c18:	20000d54 	.word	0x20000d54
 8001c1c:	0800dbb4 	.word	0x0800dbb4
 8001c20:	0800dbc4 	.word	0x0800dbc4
 8001c24:	20000d55 	.word	0x20000d55
 8001c28:	0800dbd4 	.word	0x0800dbd4
 8001c2c:	0800dbe4 	.word	0x0800dbe4
 8001c30:	20000d56 	.word	0x20000d56
 8001c34:	0800dbf4 	.word	0x0800dbf4
 8001c38:	0800dc04 	.word	0x0800dc04
 8001c3c:	20000d57 	.word	0x20000d57
 8001c40:	0800dc14 	.word	0x0800dc14
			} else if(dilSecim == 1) {
 8001c44:	4b4f      	ldr	r3, [pc, #316]	; (8001d84 <menu+0x680>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d104      	bne.n	8001c56 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <menu+0x684>)
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7fe fd09 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c56:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <menu+0x688>)
 8001c58:	210f      	movs	r1, #15
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f7fe fd04 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <menu+0x68c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	220a      	movs	r2, #10
 8001c66:	494b      	ldr	r1, [pc, #300]	; (8001d94 <menu+0x690>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00b f8d1 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001c6e:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <menu+0x690>)
 8001c70:	210e      	movs	r1, #14
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7fe fcf8 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <menu+0x694>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d123      	bne.n	8001cc8 <menu+0x5c4>
			if(dilSecim == 0) {
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <menu+0x680>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001c88:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <menu+0x698>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7fe fceb 	bl	8000668 <lcd_print>
 8001c92:	e008      	b.n	8001ca6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <menu+0x680>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d104      	bne.n	8001ca6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001c9c:	4a40      	ldr	r2, [pc, #256]	; (8001da0 <menu+0x69c>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f7fe fce1 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <menu+0x688>)
 8001ca8:	210f      	movs	r1, #15
 8001caa:	2002      	movs	r0, #2
 8001cac:	f7fe fcdc 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <menu+0x6a0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	4937      	ldr	r1, [pc, #220]	; (8001d94 <menu+0x690>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00b f8a9 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001cbe:	4a35      	ldr	r2, [pc, #212]	; (8001d94 <menu+0x690>)
 8001cc0:	210e      	movs	r1, #14
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f7fe fcd0 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <menu+0x694>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d123      	bne.n	8001d18 <menu+0x614>
			if(dilSecim == 0) {
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <menu+0x680>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001cd8:	4a33      	ldr	r2, [pc, #204]	; (8001da8 <menu+0x6a4>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7fe fcc3 	bl	8000668 <lcd_print>
 8001ce2:	e008      	b.n	8001cf6 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <menu+0x680>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d104      	bne.n	8001cf6 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001cec:	4a2f      	ldr	r2, [pc, #188]	; (8001dac <menu+0x6a8>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7fe fcb9 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <menu+0x688>)
 8001cf8:	210f      	movs	r1, #15
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f7fe fcb4 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <menu+0x6ac>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	220a      	movs	r2, #10
 8001d06:	4923      	ldr	r1, [pc, #140]	; (8001d94 <menu+0x690>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00b f881 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <menu+0x690>)
 8001d10:	210e      	movs	r1, #14
 8001d12:	2002      	movs	r0, #2
 8001d14:	f7fe fca8 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <menu+0x694>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d123      	bne.n	8001d68 <menu+0x664>
			if(dilSecim == 0) {
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <menu+0x680>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <menu+0x6b0>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f7fe fc9b 	bl	8000668 <lcd_print>
 8001d32:	e008      	b.n	8001d46 <menu+0x642>
			} else if(dilSecim == 1) {
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <menu+0x680>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d104      	bne.n	8001d46 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <menu+0x6b4>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7fe fc91 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <menu+0x6b8>)
 8001d48:	2110      	movs	r1, #16
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f7fe fc8c 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <menu+0x6bc>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	220a      	movs	r2, #10
 8001d56:	490f      	ldr	r1, [pc, #60]	; (8001d94 <menu+0x690>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00b f859 	bl	800ce10 <itoa>
			lcd_print(2, 15, snum);
 8001d5e:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <menu+0x690>)
 8001d60:	210f      	movs	r1, #15
 8001d62:	2002      	movs	r0, #2
 8001d64:	f7fe fc80 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <menu+0x694>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b0a      	cmp	r3, #10
 8001d6e:	d134      	bne.n	8001dda <menu+0x6d6>
			if(dilSecim == 0) {
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <menu+0x680>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d127      	bne.n	8001dc8 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <menu+0x6c0>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f7fe fc73 	bl	8000668 <lcd_print>
 8001d82:	e02a      	b.n	8001dda <menu+0x6d6>
 8001d84:	20000d51 	.word	0x20000d51
 8001d88:	0800dc24 	.word	0x0800dc24
 8001d8c:	0800db90 	.word	0x0800db90
 8001d90:	20000d58 	.word	0x20000d58
 8001d94:	20000ca8 	.word	0x20000ca8
 8001d98:	20000d32 	.word	0x20000d32
 8001d9c:	0800dc34 	.word	0x0800dc34
 8001da0:	0800dc44 	.word	0x0800dc44
 8001da4:	20000d59 	.word	0x20000d59
 8001da8:	0800dc54 	.word	0x0800dc54
 8001dac:	0800dc64 	.word	0x0800dc64
 8001db0:	20000d5a 	.word	0x20000d5a
 8001db4:	0800dc74 	.word	0x0800dc74
 8001db8:	0800dc84 	.word	0x0800dc84
 8001dbc:	0800dc94 	.word	0x0800dc94
 8001dc0:	20000d5b 	.word	0x20000d5b
 8001dc4:	0800dc98 	.word	0x0800dc98
			} else if(dilSecim == 1) {
 8001dc8:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <menu+0x8d0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001dd0:	4a81      	ldr	r2, [pc, #516]	; (8001fd8 <menu+0x8d4>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f7fe fc47 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dda:	2102      	movs	r1, #2
 8001ddc:	487f      	ldr	r0, [pc, #508]	; (8001fdc <menu+0x8d8>)
 8001dde:	f007 ffeb 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d119      	bne.n	8001e1c <menu+0x718>
 8001de8:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <menu+0x8dc>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <menu+0x718>
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <menu+0x8e0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10e      	bne.n	8001e1c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001dfe:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <menu+0x8e4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <menu+0x8e4>)
 8001e08:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001e0a:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <menu+0x8e4>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b0a      	cmp	r3, #10
 8001e10:	d902      	bls.n	8001e18 <menu+0x714>
				hataGostermeSirasi = 0;
 8001e12:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <menu+0x8e4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e18:	f004 fa2c 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	486f      	ldr	r0, [pc, #444]	; (8001fdc <menu+0x8d8>)
 8001e20:	f007 ffca 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d119      	bne.n	8001e5e <menu+0x75a>
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <menu+0x8dc>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <menu+0x75a>
 8001e38:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <menu+0x8e0>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10e      	bne.n	8001e5e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001e40:	4b69      	ldr	r3, [pc, #420]	; (8001fe8 <menu+0x8e4>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <menu+0x8e4>)
 8001e4a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <menu+0x8e4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b0b      	cmp	r3, #11
 8001e52:	d902      	bls.n	8001e5a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001e54:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <menu+0x8e4>)
 8001e56:	220a      	movs	r2, #10
 8001e58:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e5a:	f004 fa0b 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001e5e:	2108      	movs	r1, #8
 8001e60:	485e      	ldr	r0, [pc, #376]	; (8001fdc <menu+0x8d8>)
 8001e62:	f007 ffa9 	bl	8009db8 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d153      	bne.n	8001f14 <menu+0x810>
 8001e6c:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <menu+0x8dc>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d04c      	beq.n	8001f14 <menu+0x810>
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	; (8001fe8 <menu+0x8e4>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b0a      	cmp	r3, #10
 8001e80:	d148      	bne.n	8001f14 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001e82:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <menu+0x8e8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <menu+0x8ec>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001e90:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <menu+0x8f0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <menu+0x8ec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <menu+0x8f4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <menu+0x8ec>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <menu+0x8f8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <menu+0x8ec>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <menu+0x8fc>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <menu+0x8ec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ec8:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <menu+0x900>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <menu+0x8ec>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <menu+0x904>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <menu+0x8ec>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ee4:	4b49      	ldr	r3, [pc, #292]	; (800200c <menu+0x908>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <menu+0x8ec>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <menu+0x90c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <menu+0x8ec>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <menu+0x910>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <menu+0x8ec>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001f0e:	4b42      	ldr	r3, [pc, #264]	; (8002018 <menu+0x914>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <menu+0x918>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f040 80fc 	bne.w	8002116 <menu+0xa12>
		if(dilSecim == 0) {
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <menu+0x8d0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001f26:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <menu+0x91c>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7fe fb9c 	bl	8000668 <lcd_print>
 8001f30:	e008      	b.n	8001f44 <menu+0x840>
		} else if(dilSecim == 1) {
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <menu+0x8d0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d104      	bne.n	8001f44 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001f3a:	4a3a      	ldr	r2, [pc, #232]	; (8002024 <menu+0x920>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7fe fb92 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <menu+0x8e0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d003      	beq.n	8001f54 <menu+0x850>
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <menu+0x8e0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d112      	bne.n	8001f7a <menu+0x876>
			if(dilSecim == 0) {
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <menu+0x8d0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001f5c:	4a32      	ldr	r2, [pc, #200]	; (8002028 <menu+0x924>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2002      	movs	r0, #2
 8001f62:	f7fe fb81 	bl	8000668 <lcd_print>
 8001f66:	e008      	b.n	8001f7a <menu+0x876>
			} else if(dilSecim == 1) {
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <menu+0x8d0>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d104      	bne.n	8001f7a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001f70:	4a2e      	ldr	r2, [pc, #184]	; (800202c <menu+0x928>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7fe fb77 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <menu+0x92c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <menu+0x8ac>
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <menu+0x8e0>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d112      	bne.n	8001fb0 <menu+0x8ac>
			if(dilSecim == 0) {
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <menu+0x8d0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001f92:	4a28      	ldr	r2, [pc, #160]	; (8002034 <menu+0x930>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7fe fb66 	bl	8000668 <lcd_print>
 8001f9c:	e008      	b.n	8001fb0 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <menu+0x8d0>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d104      	bne.n	8001fb0 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <menu+0x934>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	2002      	movs	r0, #2
 8001fac:	f7fe fb5c 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <menu+0x92c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d14c      	bne.n	8002052 <menu+0x94e>
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <menu+0x8e0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d148      	bne.n	8002052 <menu+0x94e>
			if(dilSecim == 0) {
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <menu+0x8d0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d13b      	bne.n	8002040 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <menu+0x938>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f7fe fb4b 	bl	8000668 <lcd_print>
 8001fd2:	e03e      	b.n	8002052 <menu+0x94e>
 8001fd4:	20000d51 	.word	0x20000d51
 8001fd8:	0800dcac 	.word	0x0800dcac
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	20000d5f 	.word	0x20000d5f
 8001fe4:	20000d3f 	.word	0x20000d3f
 8001fe8:	20000d32 	.word	0x20000d32
 8001fec:	20000d52 	.word	0x20000d52
 8001ff0:	20000c38 	.word	0x20000c38
 8001ff4:	20000d53 	.word	0x20000d53
 8001ff8:	20000d54 	.word	0x20000d54
 8001ffc:	20000d55 	.word	0x20000d55
 8002000:	20000d56 	.word	0x20000d56
 8002004:	20000d57 	.word	0x20000d57
 8002008:	20000d58 	.word	0x20000d58
 800200c:	20000d59 	.word	0x20000d59
 8002010:	20000d5a 	.word	0x20000d5a
 8002014:	20000d5b 	.word	0x20000d5b
 8002018:	20000d5c 	.word	0x20000d5c
 800201c:	20000d30 	.word	0x20000d30
 8002020:	0800dcc0 	.word	0x0800dcc0
 8002024:	0800dcd4 	.word	0x0800dcd4
 8002028:	0800dce8 	.word	0x0800dce8
 800202c:	0800dcfc 	.word	0x0800dcfc
 8002030:	20000d31 	.word	0x20000d31
 8002034:	0800dd10 	.word	0x0800dd10
 8002038:	0800dd20 	.word	0x0800dd20
 800203c:	0800dd30 	.word	0x0800dd30
			} else if(dilSecim == 1) {
 8002040:	4b98      	ldr	r3, [pc, #608]	; (80022a4 <menu+0xba0>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d104      	bne.n	8002052 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8002048:	4a97      	ldr	r2, [pc, #604]	; (80022a8 <menu+0xba4>)
 800204a:	2101      	movs	r1, #1
 800204c:	2002      	movs	r0, #2
 800204e:	f7fe fb0b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002052:	2102      	movs	r1, #2
 8002054:	4895      	ldr	r0, [pc, #596]	; (80022ac <menu+0xba8>)
 8002056:	f007 feaf 	bl	8009db8 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b01      	cmp	r3, #1
 800205e:	d119      	bne.n	8002094 <menu+0x990>
 8002060:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <menu+0xbac>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <menu+0x990>
 800206e:	4b91      	ldr	r3, [pc, #580]	; (80022b4 <menu+0xbb0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8002076:	4b90      	ldr	r3, [pc, #576]	; (80022b8 <menu+0xbb4>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b8e      	ldr	r3, [pc, #568]	; (80022b8 <menu+0xbb4>)
 8002080:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8002082:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <menu+0xbb4>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d902      	bls.n	8002090 <menu+0x98c>
				calismaSekli = 0;
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <menu+0xbb4>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002090:	f004 f8f0 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002094:	2104      	movs	r1, #4
 8002096:	4885      	ldr	r0, [pc, #532]	; (80022ac <menu+0xba8>)
 8002098:	f007 fe8e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d119      	bne.n	80020d6 <menu+0x9d2>
 80020a2:	4b83      	ldr	r3, [pc, #524]	; (80022b0 <menu+0xbac>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <menu+0x9d2>
 80020b0:	4b80      	ldr	r3, [pc, #512]	; (80022b4 <menu+0xbb0>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10e      	bne.n	80020d6 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <menu+0xbb4>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	3b01      	subs	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b7d      	ldr	r3, [pc, #500]	; (80022b8 <menu+0xbb4>)
 80020c2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80020c4:	4b7c      	ldr	r3, [pc, #496]	; (80022b8 <menu+0xbb4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <menu+0x9ce>
	    		calismaSekli = 1;
 80020cc:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <menu+0xbb4>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80020d2:	f004 f8cf 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d6:	2108      	movs	r1, #8
 80020d8:	4874      	ldr	r0, [pc, #464]	; (80022ac <menu+0xba8>)
 80020da:	f007 fe6d 	bl	8009db8 <HAL_GPIO_ReadPin>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d118      	bne.n	8002116 <menu+0xa12>
 80020e4:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <menu+0xbac>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d011      	beq.n	8002116 <menu+0xa12>
			eepromData[1] = calismaSekli;
 80020f2:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <menu+0xbb4>)
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	4b71      	ldr	r3, [pc, #452]	; (80022bc <menu+0xbb8>)
 80020f8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <menu+0xbb4>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d106      	bne.n	8002110 <menu+0xa0c>
				altLimit = 1;
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <menu+0xbbc>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002108:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <menu+0xbbc>)
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <menu+0xbb8>)
 800210e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002110:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <menu+0xbc0>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8002116:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <menu+0xbc4>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b03      	cmp	r3, #3
 800211c:	f040 8083 	bne.w	8002226 <menu+0xb22>
		if(dilSecim == 0) {
 8002120:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <menu+0xba0>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8002128:	4a68      	ldr	r2, [pc, #416]	; (80022cc <menu+0xbc8>)
 800212a:	2101      	movs	r1, #1
 800212c:	2001      	movs	r0, #1
 800212e:	f7fe fa9b 	bl	8000668 <lcd_print>
 8002132:	e008      	b.n	8002146 <menu+0xa42>
		} else if(dilSecim == 1) {
 8002134:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <menu+0xba0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d104      	bne.n	8002146 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 800213c:	4a64      	ldr	r2, [pc, #400]	; (80022d0 <menu+0xbcc>)
 800213e:	2101      	movs	r1, #1
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe fa91 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <menu+0xbd0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d113      	bne.n	8002176 <menu+0xa72>
			if(dilSecim == 0) {
 800214e:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <menu+0xba0>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8002156:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <menu+0xbd4>)
 8002158:	2101      	movs	r1, #1
 800215a:	2002      	movs	r0, #2
 800215c:	f7fe fa84 	bl	8000668 <lcd_print>
 8002160:	e012      	b.n	8002188 <menu+0xa84>
			} else if(dilSecim == 1) {
 8002162:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <menu+0xba0>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800216a:	4a5c      	ldr	r2, [pc, #368]	; (80022dc <menu+0xbd8>)
 800216c:	2101      	movs	r1, #1
 800216e:	2002      	movs	r0, #2
 8002170:	f7fe fa7a 	bl	8000668 <lcd_print>
 8002174:	e008      	b.n	8002188 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <menu+0xbd0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d104      	bne.n	8002188 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800217e:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <menu+0xbdc>)
 8002180:	2101      	movs	r1, #1
 8002182:	2002      	movs	r0, #2
 8002184:	f7fe fa70 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002188:	2102      	movs	r1, #2
 800218a:	4848      	ldr	r0, [pc, #288]	; (80022ac <menu+0xba8>)
 800218c:	f007 fe14 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d115      	bne.n	80021c2 <menu+0xabe>
 8002196:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <menu+0xbac>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <menu+0xbd0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <menu+0xbd0>)
 80021ae:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <menu+0xbd0>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d902      	bls.n	80021be <menu+0xaba>
				emniyetCercevesi = 0;
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <menu+0xbd0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021be:	f004 f859 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c2:	2104      	movs	r1, #4
 80021c4:	4839      	ldr	r0, [pc, #228]	; (80022ac <menu+0xba8>)
 80021c6:	f007 fdf7 	bl	8009db8 <HAL_GPIO_ReadPin>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d115      	bne.n	80021fc <menu+0xaf8>
 80021d0:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <menu+0xbac>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	f083 0301 	eor.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <menu+0xbd0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <menu+0xbd0>)
 80021e8:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <menu+0xbd0>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <menu+0xbd0>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021f8:	f004 f83c 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80021fc:	2108      	movs	r1, #8
 80021fe:	482b      	ldr	r0, [pc, #172]	; (80022ac <menu+0xba8>)
 8002200:	f007 fdda 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10d      	bne.n	8002226 <menu+0xb22>
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <menu+0xbac>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <menu+0xbd0>)
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <menu+0xbb8>)
 800221e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <menu+0xbc0>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <menu+0xbc4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b04      	cmp	r3, #4
 800222c:	f040 80ba 	bne.w	80023a4 <menu+0xca0>
		if(dilSecim == 0) {
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <menu+0xba0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002238:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <menu+0xbe0>)
 800223a:	2101      	movs	r1, #1
 800223c:	2001      	movs	r0, #1
 800223e:	f7fe fa13 	bl	8000668 <lcd_print>
 8002242:	e008      	b.n	8002256 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <menu+0xba0>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d104      	bne.n	8002256 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <menu+0xbe4>)
 800224e:	2101      	movs	r1, #1
 8002250:	2001      	movs	r0, #1
 8002252:	f7fe fa09 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <menu+0xbe8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d113      	bne.n	8002286 <menu+0xb82>
			if(dilSecim == 0) {
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <menu+0xba0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <menu+0xbd4>)
 8002268:	2101      	movs	r1, #1
 800226a:	2002      	movs	r0, #2
 800226c:	f7fe f9fc 	bl	8000668 <lcd_print>
 8002270:	e049      	b.n	8002306 <menu+0xc02>
			} else if(dilSecim == 1) {
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <menu+0xba0>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d145      	bne.n	8002306 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 800227a:	4a18      	ldr	r2, [pc, #96]	; (80022dc <menu+0xbd8>)
 800227c:	2101      	movs	r1, #1
 800227e:	2002      	movs	r0, #2
 8002280:	f7fe f9f2 	bl	8000668 <lcd_print>
 8002284:	e03f      	b.n	8002306 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <menu+0xbe8>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d13b      	bne.n	8002306 <menu+0xc02>
			if(dilSecim == 0) {
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <menu+0xba0>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d12e      	bne.n	80022f4 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <menu+0xbec>)
 8002298:	2101      	movs	r1, #1
 800229a:	2002      	movs	r0, #2
 800229c:	f7fe f9e4 	bl	8000668 <lcd_print>
 80022a0:	e031      	b.n	8002306 <menu+0xc02>
 80022a2:	bf00      	nop
 80022a4:	20000d51 	.word	0x20000d51
 80022a8:	0800dd40 	.word	0x0800dd40
 80022ac:	40010800 	.word	0x40010800
 80022b0:	20000d5f 	.word	0x20000d5f
 80022b4:	20000d3f 	.word	0x20000d3f
 80022b8:	20000d31 	.word	0x20000d31
 80022bc:	20000c38 	.word	0x20000c38
 80022c0:	20000d36 	.word	0x20000d36
 80022c4:	20000d5c 	.word	0x20000d5c
 80022c8:	20000d30 	.word	0x20000d30
 80022cc:	0800dd50 	.word	0x0800dd50
 80022d0:	0800dd64 	.word	0x0800dd64
 80022d4:	20000d34 	.word	0x20000d34
 80022d8:	0800dd78 	.word	0x0800dd78
 80022dc:	0800dd8c 	.word	0x0800dd8c
 80022e0:	0800dda0 	.word	0x0800dda0
 80022e4:	0800ddb0 	.word	0x0800ddb0
 80022e8:	0800ddc4 	.word	0x0800ddc4
 80022ec:	20000d35 	.word	0x20000d35
 80022f0:	0800ddd8 	.word	0x0800ddd8
			} else if(dilSecim == 1) {
 80022f4:	4b92      	ldr	r3, [pc, #584]	; (8002540 <menu+0xe3c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80022fc:	4a91      	ldr	r2, [pc, #580]	; (8002544 <menu+0xe40>)
 80022fe:	2101      	movs	r1, #1
 8002300:	2002      	movs	r0, #2
 8002302:	f7fe f9b1 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002306:	2102      	movs	r1, #2
 8002308:	488f      	ldr	r0, [pc, #572]	; (8002548 <menu+0xe44>)
 800230a:	f007 fd55 	bl	8009db8 <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d115      	bne.n	8002340 <menu+0xc3c>
 8002314:	4b8d      	ldr	r3, [pc, #564]	; (800254c <menu+0xe48>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <menu+0xe4c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b89      	ldr	r3, [pc, #548]	; (8002550 <menu+0xe4c>)
 800232c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <menu+0xe4c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d902      	bls.n	800233c <menu+0xc38>
				yavaslamaLimit = 0;
 8002336:	4b86      	ldr	r3, [pc, #536]	; (8002550 <menu+0xe4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800233c:	f003 ff9a 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002340:	2104      	movs	r1, #4
 8002342:	4881      	ldr	r0, [pc, #516]	; (8002548 <menu+0xe44>)
 8002344:	f007 fd38 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d115      	bne.n	800237a <menu+0xc76>
 800234e:	4b7f      	ldr	r3, [pc, #508]	; (800254c <menu+0xe48>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00e      	beq.n	800237a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 800235c:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <menu+0xe4c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <menu+0xe4c>)
 8002366:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002368:	4b79      	ldr	r3, [pc, #484]	; (8002550 <menu+0xe4c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002370:	4b77      	ldr	r3, [pc, #476]	; (8002550 <menu+0xe4c>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002376:	f003 ff7d 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800237a:	2108      	movs	r1, #8
 800237c:	4872      	ldr	r0, [pc, #456]	; (8002548 <menu+0xe44>)
 800237e:	f007 fd1b 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10d      	bne.n	80023a4 <menu+0xca0>
 8002388:	4b70      	ldr	r3, [pc, #448]	; (800254c <menu+0xe48>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002396:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <menu+0xe4c>)
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <menu+0xe50>)
 800239c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <menu+0xe54>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80023a4:	4b6d      	ldr	r3, [pc, #436]	; (800255c <menu+0xe58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	f040 80b9 	bne.w	8002520 <menu+0xe1c>
		if(dilSecim == 0) {
 80023ae:	4b64      	ldr	r3, [pc, #400]	; (8002540 <menu+0xe3c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80023b6:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <menu+0xe5c>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe f954 	bl	8000668 <lcd_print>
 80023c0:	e008      	b.n	80023d4 <menu+0xcd0>
		} else if(dilSecim == 1) {
 80023c2:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <menu+0xe3c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d104      	bne.n	80023d4 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80023ca:	4a66      	ldr	r2, [pc, #408]	; (8002564 <menu+0xe60>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7fe f94a 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 80023d4:	4b64      	ldr	r3, [pc, #400]	; (8002568 <menu+0xe64>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d113      	bne.n	8002404 <menu+0xd00>
			if(dilSecim == 0) {
 80023dc:	4b58      	ldr	r3, [pc, #352]	; (8002540 <menu+0xe3c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80023e4:	4a61      	ldr	r2, [pc, #388]	; (800256c <menu+0xe68>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7fe f93d 	bl	8000668 <lcd_print>
 80023ee:	e020      	b.n	8002432 <menu+0xd2e>
			} else if(dilSecim == 1) {
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <menu+0xe3c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d11c      	bne.n	8002432 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80023f8:	4a5d      	ldr	r2, [pc, #372]	; (8002570 <menu+0xe6c>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	2002      	movs	r0, #2
 80023fe:	f7fe f933 	bl	8000668 <lcd_print>
 8002402:	e016      	b.n	8002432 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <menu+0xe64>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d112      	bne.n	8002432 <menu+0xd2e>
			if(dilSecim == 0){
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <menu+0xe3c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002414:	4a57      	ldr	r2, [pc, #348]	; (8002574 <menu+0xe70>)
 8002416:	2101      	movs	r1, #1
 8002418:	2002      	movs	r0, #2
 800241a:	f7fe f925 	bl	8000668 <lcd_print>
 800241e:	e008      	b.n	8002432 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002420:	4b47      	ldr	r3, [pc, #284]	; (8002540 <menu+0xe3c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d104      	bne.n	8002432 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002428:	4a46      	ldr	r2, [pc, #280]	; (8002544 <menu+0xe40>)
 800242a:	2101      	movs	r1, #1
 800242c:	2002      	movs	r0, #2
 800242e:	f7fe f91b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002432:	2102      	movs	r1, #2
 8002434:	4844      	ldr	r0, [pc, #272]	; (8002548 <menu+0xe44>)
 8002436:	f007 fcbf 	bl	8009db8 <HAL_GPIO_ReadPin>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d119      	bne.n	8002474 <menu+0xd70>
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <menu+0xe48>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <menu+0xd70>
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <menu+0xe74>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <menu+0xd70>
			altLimit = altLimit + 1;
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <menu+0xe64>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <menu+0xe64>)
 8002460:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <menu+0xe64>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d902      	bls.n	8002470 <menu+0xd6c>
				altLimit = 0;
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <menu+0xe64>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002470:	f003 ff00 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002474:	2104      	movs	r1, #4
 8002476:	4834      	ldr	r0, [pc, #208]	; (8002548 <menu+0xe44>)
 8002478:	f007 fc9e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d119      	bne.n	80024b6 <menu+0xdb2>
 8002482:	4b32      	ldr	r3, [pc, #200]	; (800254c <menu+0xe48>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d012      	beq.n	80024b6 <menu+0xdb2>
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <menu+0xe74>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10e      	bne.n	80024b6 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <menu+0xe64>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <menu+0xe64>)
 80024a2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <menu+0xe64>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <menu+0xdae>
		   		altLimit = 1;
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <menu+0xe64>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024b2:	f003 fedf 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b6:	2108      	movs	r1, #8
 80024b8:	4823      	ldr	r0, [pc, #140]	; (8002548 <menu+0xe44>)
 80024ba:	f007 fc7d 	bl	8009db8 <HAL_GPIO_ReadPin>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d12d      	bne.n	8002520 <menu+0xe1c>
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <menu+0xe48>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d026      	beq.n	8002520 <menu+0xe1c>
			eepromData[5] = altLimit;
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <menu+0xe64>)
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <menu+0xe50>)
 80024d8:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <menu+0xe64>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d110      	bne.n	8002504 <menu+0xe00>
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <menu+0xe78>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <menu+0xdee>
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <menu+0xe78>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d108      	bne.n	8002504 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <menu+0xe78>)
 80024f4:	2203      	movs	r2, #3
 80024f6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <menu+0xe78>)
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <menu+0xe50>)
 80024fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002502:	e00a      	b.n	800251a <menu+0xe16>
			} else if(altLimit == 0) {
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <menu+0xe64>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <menu+0xe16>
				platformSilindirTipi = 0;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <menu+0xe7c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <menu+0xe7c>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <menu+0xe50>)
 8002518:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <menu+0xe54>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <menu+0xe58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b06      	cmp	r3, #6
 8002526:	f040 80b6 	bne.w	8002696 <menu+0xf92>
		if(dilSecim == 0) {
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <menu+0xe3c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d12a      	bne.n	8002588 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <menu+0xe80>)
 8002534:	2101      	movs	r1, #1
 8002536:	2001      	movs	r0, #1
 8002538:	f7fe f896 	bl	8000668 <lcd_print>
 800253c:	e02d      	b.n	800259a <menu+0xe96>
 800253e:	bf00      	nop
 8002540:	20000d51 	.word	0x20000d51
 8002544:	0800ddec 	.word	0x0800ddec
 8002548:	40010800 	.word	0x40010800
 800254c:	20000d5f 	.word	0x20000d5f
 8002550:	20000d35 	.word	0x20000d35
 8002554:	20000c38 	.word	0x20000c38
 8002558:	20000d5c 	.word	0x20000d5c
 800255c:	20000d30 	.word	0x20000d30
 8002560:	0800de00 	.word	0x0800de00
 8002564:	0800de14 	.word	0x0800de14
 8002568:	20000d36 	.word	0x20000d36
 800256c:	0800dd78 	.word	0x0800dd78
 8002570:	0800dd8c 	.word	0x0800dd8c
 8002574:	0800ddd8 	.word	0x0800ddd8
 8002578:	20000d31 	.word	0x20000d31
 800257c:	20000d3d 	.word	0x20000d3d
 8002580:	20000d43 	.word	0x20000d43
 8002584:	0800de28 	.word	0x0800de28
		} else if(dilSecim == 1){
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <menu+0x1070>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d104      	bne.n	800259a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002590:	4a79      	ldr	r2, [pc, #484]	; (8002778 <menu+0x1074>)
 8002592:	2101      	movs	r1, #1
 8002594:	2001      	movs	r0, #1
 8002596:	f7fe f867 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 800259a:	4b78      	ldr	r3, [pc, #480]	; (800277c <menu+0x1078>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <menu+0xec6>
			if(dilSecim == 0) {
 80025a2:	4b74      	ldr	r3, [pc, #464]	; (8002774 <menu+0x1070>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80025aa:	4a75      	ldr	r2, [pc, #468]	; (8002780 <menu+0x107c>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	2002      	movs	r0, #2
 80025b0:	f7fe f85a 	bl	8000668 <lcd_print>
 80025b4:	e020      	b.n	80025f8 <menu+0xef4>
			} else if(dilSecim == 1){
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <menu+0x1070>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11c      	bne.n	80025f8 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80025be:	4a71      	ldr	r2, [pc, #452]	; (8002784 <menu+0x1080>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	2002      	movs	r0, #2
 80025c4:	f7fe f850 	bl	8000668 <lcd_print>
 80025c8:	e016      	b.n	80025f8 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <menu+0x1078>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d112      	bne.n	80025f8 <menu+0xef4>
			if(dilSecim == 0) {
 80025d2:	4b68      	ldr	r3, [pc, #416]	; (8002774 <menu+0x1070>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80025da:	4a6b      	ldr	r2, [pc, #428]	; (8002788 <menu+0x1084>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2002      	movs	r0, #2
 80025e0:	f7fe f842 	bl	8000668 <lcd_print>
 80025e4:	e008      	b.n	80025f8 <menu+0xef4>
			} else if(dilSecim == 1) {
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <menu+0x1070>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d104      	bne.n	80025f8 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <menu+0x1088>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7fe f838 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f8:	2102      	movs	r1, #2
 80025fa:	4865      	ldr	r0, [pc, #404]	; (8002790 <menu+0x108c>)
 80025fc:	f007 fbdc 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d115      	bne.n	8002632 <menu+0xf2e>
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <menu+0x1090>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <menu+0x1078>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <menu+0x1078>)
 800261e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002620:	4b56      	ldr	r3, [pc, #344]	; (800277c <menu+0x1078>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d902      	bls.n	800262e <menu+0xf2a>
				basincSalteri = 0;
 8002628:	4b54      	ldr	r3, [pc, #336]	; (800277c <menu+0x1078>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800262e:	f003 fe21 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002632:	2104      	movs	r1, #4
 8002634:	4856      	ldr	r0, [pc, #344]	; (8002790 <menu+0x108c>)
 8002636:	f007 fbbf 	bl	8009db8 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d115      	bne.n	800266c <menu+0xf68>
 8002640:	4b54      	ldr	r3, [pc, #336]	; (8002794 <menu+0x1090>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00e      	beq.n	800266c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800264e:	4b4b      	ldr	r3, [pc, #300]	; (800277c <menu+0x1078>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3b01      	subs	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <menu+0x1078>)
 8002658:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <menu+0x1078>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <menu+0xf64>
		   		basincSalteri = 1;
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <menu+0x1078>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002668:	f003 fe04 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800266c:	2108      	movs	r1, #8
 800266e:	4848      	ldr	r0, [pc, #288]	; (8002790 <menu+0x108c>)
 8002670:	f007 fba2 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	d10d      	bne.n	8002696 <menu+0xf92>
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <menu+0x1090>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <menu+0x1078>)
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <menu+0x1094>)
 800268e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002690:	4b42      	ldr	r3, [pc, #264]	; (800279c <menu+0x1098>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <menu+0x109c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b07      	cmp	r3, #7
 800269c:	f040 80f5 	bne.w	800288a <menu+0x1186>
		if(dilSecim == 0) {
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <menu+0x1070>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80026a8:	4a3e      	ldr	r2, [pc, #248]	; (80027a4 <menu+0x10a0>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7fd ffdb 	bl	8000668 <lcd_print>
 80026b2:	e008      	b.n	80026c6 <menu+0xfc2>
		} else if(dilSecim == 1){
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <menu+0x1070>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d104      	bne.n	80026c6 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80026bc:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <menu+0x10a4>)
 80026be:	2101      	movs	r1, #1
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7fd ffd1 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <menu+0x10a8>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d113      	bne.n	80026f6 <menu+0xff2>
			if(dilSecim == 0) {
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <menu+0x1070>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <menu+0x107c>)
 80026d8:	2101      	movs	r1, #1
 80026da:	2002      	movs	r0, #2
 80026dc:	f7fd ffc4 	bl	8000668 <lcd_print>
 80026e0:	e079      	b.n	80027d6 <menu+0x10d2>
			} else if(dilSecim == 1){
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <menu+0x1070>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d175      	bne.n	80027d6 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <menu+0x1080>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7fd ffba 	bl	8000668 <lcd_print>
 80026f4:	e06f      	b.n	80027d6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <menu+0x10a8>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d113      	bne.n	8002726 <menu+0x1022>
			if(dilSecim == 0) {
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <menu+0x1070>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002706:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <menu+0x10ac>)
 8002708:	2101      	movs	r1, #1
 800270a:	2002      	movs	r0, #2
 800270c:	f7fd ffac 	bl	8000668 <lcd_print>
 8002710:	e061      	b.n	80027d6 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <menu+0x1070>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d15d      	bne.n	80027d6 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800271a:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <menu+0x10b0>)
 800271c:	2101      	movs	r1, #1
 800271e:	2002      	movs	r0, #2
 8002720:	f7fd ffa2 	bl	8000668 <lcd_print>
 8002724:	e057      	b.n	80027d6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <menu+0x10a8>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d113      	bne.n	8002756 <menu+0x1052>
			if(dilSecim == 0) {
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <menu+0x1070>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <menu+0x10b4>)
 8002738:	2101      	movs	r1, #1
 800273a:	2002      	movs	r0, #2
 800273c:	f7fd ff94 	bl	8000668 <lcd_print>
 8002740:	e049      	b.n	80027d6 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <menu+0x1070>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d145      	bne.n	80027d6 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <menu+0x10b8>)
 800274c:	2101      	movs	r1, #1
 800274e:	2002      	movs	r0, #2
 8002750:	f7fd ff8a 	bl	8000668 <lcd_print>
 8002754:	e03f      	b.n	80027d6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <menu+0x10a8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d13b      	bne.n	80027d6 <menu+0x10d2>
			if(dilSecim == 0) {
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <menu+0x1070>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d12e      	bne.n	80027c4 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <menu+0x10bc>)
 8002768:	2101      	movs	r1, #1
 800276a:	2002      	movs	r0, #2
 800276c:	f7fd ff7c 	bl	8000668 <lcd_print>
 8002770:	e031      	b.n	80027d6 <menu+0x10d2>
 8002772:	bf00      	nop
 8002774:	20000d51 	.word	0x20000d51
 8002778:	0800de38 	.word	0x0800de38
 800277c:	20000d37 	.word	0x20000d37
 8002780:	0800dd78 	.word	0x0800dd78
 8002784:	0800dd8c 	.word	0x0800dd8c
 8002788:	0800ddd8 	.word	0x0800ddd8
 800278c:	0800ddec 	.word	0x0800ddec
 8002790:	40010800 	.word	0x40010800
 8002794:	20000d5f 	.word	0x20000d5f
 8002798:	20000c38 	.word	0x20000c38
 800279c:	20000d5c 	.word	0x20000d5c
 80027a0:	20000d30 	.word	0x20000d30
 80027a4:	0800de48 	.word	0x0800de48
 80027a8:	0800de5c 	.word	0x0800de5c
 80027ac:	20000d38 	.word	0x20000d38
 80027b0:	0800de70 	.word	0x0800de70
 80027b4:	0800de84 	.word	0x0800de84
 80027b8:	0800de98 	.word	0x0800de98
 80027bc:	0800deac 	.word	0x0800deac
 80027c0:	0800dec0 	.word	0x0800dec0
			} else if(dilSecim == 1){
 80027c4:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <menu+0x1328>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d104      	bne.n	80027d6 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80027cc:	4a98      	ldr	r2, [pc, #608]	; (8002a30 <menu+0x132c>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7fd ff49 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d6:	2102      	movs	r1, #2
 80027d8:	4896      	ldr	r0, [pc, #600]	; (8002a34 <menu+0x1330>)
 80027da:	f007 faed 	bl	8009db8 <HAL_GPIO_ReadPin>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d115      	bne.n	8002810 <menu+0x110c>
 80027e4:	4b94      	ldr	r3, [pc, #592]	; (8002a38 <menu+0x1334>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f083 0301 	eor.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80027f2:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <menu+0x1338>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <menu+0x1338>)
 80027fc:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80027fe:	4b8f      	ldr	r3, [pc, #572]	; (8002a3c <menu+0x1338>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d902      	bls.n	800280c <menu+0x1108>
				kapiSecimleri = 0;
 8002806:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <menu+0x1338>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800280c:	f003 fd32 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002810:	2104      	movs	r1, #4
 8002812:	4888      	ldr	r0, [pc, #544]	; (8002a34 <menu+0x1330>)
 8002814:	f007 fad0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d115      	bne.n	800284a <menu+0x1146>
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <menu+0x1334>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800282c:	4b83      	ldr	r3, [pc, #524]	; (8002a3c <menu+0x1338>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <menu+0x1338>)
 8002836:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002838:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <menu+0x1338>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d902      	bls.n	8002846 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002840:	4b7e      	ldr	r3, [pc, #504]	; (8002a3c <menu+0x1338>)
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002846:	f003 fd15 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800284a:	2108      	movs	r1, #8
 800284c:	4879      	ldr	r0, [pc, #484]	; (8002a34 <menu+0x1330>)
 800284e:	f007 fab3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d118      	bne.n	800288a <menu+0x1186>
 8002858:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <menu+0x1334>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f083 0301 	eor.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d011      	beq.n	800288a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002866:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <menu+0x1338>)
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <menu+0x133c>)
 800286c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <menu+0x1338>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <menu+0x1180>
				altLimit = 1;
 8002876:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <menu+0x1340>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800287c:	4b71      	ldr	r3, [pc, #452]	; (8002a44 <menu+0x1340>)
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <menu+0x133c>)
 8002882:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002884:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <menu+0x1344>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800288a:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <menu+0x1348>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b08      	cmp	r3, #8
 8002890:	f040 8092 	bne.w	80029b8 <menu+0x12b4>
		if(dilSecim == 0) {
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <menu+0x1328>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800289c:	4a6c      	ldr	r2, [pc, #432]	; (8002a50 <menu+0x134c>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7fd fee1 	bl	8000668 <lcd_print>
 80028a6:	e008      	b.n	80028ba <menu+0x11b6>
		} else if(dilSecim == 1) {
 80028a8:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <menu+0x1328>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d104      	bne.n	80028ba <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <menu+0x1350>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7fd fed7 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80028ba:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <menu+0x1354>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d113      	bne.n	80028ea <menu+0x11e6>
			if(dilSecim == 0) {
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <menu+0x1328>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80028ca:	4a64      	ldr	r2, [pc, #400]	; (8002a5c <menu+0x1358>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	2002      	movs	r0, #2
 80028d0:	f7fd feca 	bl	8000668 <lcd_print>
 80028d4:	e020      	b.n	8002918 <menu+0x1214>
			} else if(dilSecim == 1) {
 80028d6:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <menu+0x1328>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d11c      	bne.n	8002918 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80028de:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <menu+0x135c>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	2002      	movs	r0, #2
 80028e4:	f7fd fec0 	bl	8000668 <lcd_print>
 80028e8:	e016      	b.n	8002918 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <menu+0x1354>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d112      	bne.n	8002918 <menu+0x1214>
			if(dilSecim == 0){
 80028f2:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <menu+0x1328>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80028fa:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <menu+0x1360>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2002      	movs	r0, #2
 8002900:	f7fd feb2 	bl	8000668 <lcd_print>
 8002904:	e008      	b.n	8002918 <menu+0x1214>
			} else if(dilSecim == 1){
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <menu+0x1328>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800290e:	4a56      	ldr	r2, [pc, #344]	; (8002a68 <menu+0x1364>)
 8002910:	2101      	movs	r1, #1
 8002912:	2002      	movs	r0, #2
 8002914:	f7fd fea8 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002918:	2102      	movs	r1, #2
 800291a:	4846      	ldr	r0, [pc, #280]	; (8002a34 <menu+0x1330>)
 800291c:	f007 fa4c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d115      	bne.n	8002952 <menu+0x124e>
 8002926:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <menu+0x1334>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	f083 0301 	eor.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002934:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <menu+0x1354>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <menu+0x1354>)
 800293e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002940:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <menu+0x1354>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d902      	bls.n	800294e <menu+0x124a>
				kapiAcTipi = 0;
 8002948:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <menu+0x1354>)
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800294e:	f003 fc91 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002952:	2104      	movs	r1, #4
 8002954:	4837      	ldr	r0, [pc, #220]	; (8002a34 <menu+0x1330>)
 8002956:	f007 fa2f 	bl	8009db8 <HAL_GPIO_ReadPin>
 800295a:	4603      	mov	r3, r0
 800295c:	2b01      	cmp	r3, #1
 800295e:	d115      	bne.n	800298c <menu+0x1288>
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <menu+0x1334>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <menu+0x1354>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3b01      	subs	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <menu+0x1354>)
 8002978:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <menu+0x1354>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002982:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <menu+0x1354>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002988:	f003 fc74 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298c:	2108      	movs	r1, #8
 800298e:	4829      	ldr	r0, [pc, #164]	; (8002a34 <menu+0x1330>)
 8002990:	f007 fa12 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002994:	4603      	mov	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d10e      	bne.n	80029b8 <menu+0x12b4>
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <menu+0x1334>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80029a8:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <menu+0x1354>)
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <menu+0x133c>)
 80029ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <menu+0x1344>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <menu+0x1348>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	f040 80b9 	bne.w	8002b34 <menu+0x1430>
		if(dilSecim == 0){
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <menu+0x1328>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <menu+0x1368>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7fd fe4a 	bl	8000668 <lcd_print>
 80029d4:	e008      	b.n	80029e8 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <menu+0x1328>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d104      	bne.n	80029e8 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <menu+0x136c>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7fd fe40 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <menu+0x1370>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <menu+0x1374>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fd fe37 	bl	8000668 <lcd_print>
 80029fa:	e04c      	b.n	8002a96 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <menu+0x1370>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d13f      	bne.n	8002a84 <menu+0x1380>
			if(dilSecim == 0){
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <menu+0x1328>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <menu+0x1378>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2002      	movs	r0, #2
 8002a12:	f7fd fe29 	bl	8000668 <lcd_print>
 8002a16:	e03e      	b.n	8002a96 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <menu+0x1328>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13a      	bne.n	8002a96 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <menu+0x137c>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f7fd fe1f 	bl	8000668 <lcd_print>
 8002a2a:	e034      	b.n	8002a96 <menu+0x1392>
 8002a2c:	20000d51 	.word	0x20000d51
 8002a30:	0800ded4 	.word	0x0800ded4
 8002a34:	40010800 	.word	0x40010800
 8002a38:	20000d5f 	.word	0x20000d5f
 8002a3c:	20000d38 	.word	0x20000d38
 8002a40:	20000c38 	.word	0x20000c38
 8002a44:	20000d36 	.word	0x20000d36
 8002a48:	20000d5c 	.word	0x20000d5c
 8002a4c:	20000d30 	.word	0x20000d30
 8002a50:	0800dee8 	.word	0x0800dee8
 8002a54:	0800defc 	.word	0x0800defc
 8002a58:	20000d3c 	.word	0x20000d3c
 8002a5c:	0800df10 	.word	0x0800df10
 8002a60:	0800df20 	.word	0x0800df20
 8002a64:	0800df30 	.word	0x0800df30
 8002a68:	0800df44 	.word	0x0800df44
 8002a6c:	0800df58 	.word	0x0800df58
 8002a70:	0800df6c 	.word	0x0800df6c
 8002a74:	20000d39 	.word	0x20000d39
 8002a78:	0800df80 	.word	0x0800df80
 8002a7c:	0800df94 	.word	0x0800df94
 8002a80:	0800dfa4 	.word	0x0800dfa4
			}
		} else if(kapi1Tip == 2) {
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <menu+0x15ac>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d104      	bne.n	8002a96 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002a8c:	4a89      	ldr	r2, [pc, #548]	; (8002cb4 <menu+0x15b0>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7fd fde9 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a96:	2102      	movs	r1, #2
 8002a98:	4887      	ldr	r0, [pc, #540]	; (8002cb8 <menu+0x15b4>)
 8002a9a:	f007 f98d 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d115      	bne.n	8002ad0 <menu+0x13cc>
 8002aa4:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <menu+0x15b8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00e      	beq.n	8002ad0 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002ab2:	4b7f      	ldr	r3, [pc, #508]	; (8002cb0 <menu+0x15ac>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <menu+0x15ac>)
 8002abc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002abe:	4b7c      	ldr	r3, [pc, #496]	; (8002cb0 <menu+0x15ac>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d902      	bls.n	8002acc <menu+0x13c8>
				kapi1Tip = 0;
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <menu+0x15ac>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002acc:	f003 fbd2 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	4879      	ldr	r0, [pc, #484]	; (8002cb8 <menu+0x15b4>)
 8002ad4:	f007 f970 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d115      	bne.n	8002b0a <menu+0x1406>
 8002ade:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <menu+0x15b8>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002aec:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <menu+0x15ac>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <menu+0x15ac>)
 8002af6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <menu+0x15ac>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d902      	bls.n	8002b06 <menu+0x1402>
		   		kapi1Tip = 2;
 8002b00:	4b6b      	ldr	r3, [pc, #428]	; (8002cb0 <menu+0x15ac>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b06:	f003 fbb5 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	486a      	ldr	r0, [pc, #424]	; (8002cb8 <menu+0x15b4>)
 8002b0e:	f007 f953 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10d      	bne.n	8002b34 <menu+0x1430>
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <menu+0x15b8>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002b26:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <menu+0x15ac>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <menu+0x15bc>)
 8002b2c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <menu+0x15c0>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002b34:	4b64      	ldr	r3, [pc, #400]	; (8002cc8 <menu+0x15c4>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b0a      	cmp	r3, #10
 8002b3a:	d17f      	bne.n	8002c3c <menu+0x1538>
		if(dilSecim == 0) {
 8002b3c:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <menu+0x15c8>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002b44:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <menu+0x15cc>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7fd fd8d 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b4e:	4a61      	ldr	r2, [pc, #388]	; (8002cd4 <menu+0x15d0>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	2002      	movs	r0, #2
 8002b54:	f7fd fd88 	bl	8000668 <lcd_print>
 8002b58:	e00d      	b.n	8002b76 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <menu+0x15c8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d109      	bne.n	8002b76 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002b62:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <menu+0x15d4>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fd fd7e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b6c:	4a5b      	ldr	r2, [pc, #364]	; (8002cdc <menu+0x15d8>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2002      	movs	r0, #2
 8002b72:	f7fd fd79 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <menu+0x15dc>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	220a      	movs	r2, #10
 8002b7c:	4959      	ldr	r1, [pc, #356]	; (8002ce4 <menu+0x15e0>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00a f946 	bl	800ce10 <itoa>
		lcd_print(2,16,snum);
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <menu+0x15e0>)
 8002b86:	2110      	movs	r1, #16
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f7fd fd6d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4849      	ldr	r0, [pc, #292]	; (8002cb8 <menu+0x15b4>)
 8002b92:	f007 f911 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d119      	bne.n	8002bd0 <menu+0x14cc>
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <menu+0x15b8>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <menu+0x14cc>
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <menu+0x15ac>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <menu+0x15dc>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <menu+0x15dc>)
 8002bbc:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <menu+0x15dc>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d902      	bls.n	8002bcc <menu+0x14c8>
				kapi1AcSure = 0;
 8002bc6:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <menu+0x15dc>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bcc:	f003 fb52 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	4839      	ldr	r0, [pc, #228]	; (8002cb8 <menu+0x15b4>)
 8002bd4:	f007 f8f0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d119      	bne.n	8002c12 <menu+0x150e>
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <menu+0x15b8>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d012      	beq.n	8002c12 <menu+0x150e>
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <menu+0x15ac>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <menu+0x15dc>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <menu+0x15dc>)
 8002bfe:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <menu+0x15dc>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d902      	bls.n	8002c0e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <menu+0x15dc>)
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c0e:	f003 fb31 	bl	8006274 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c12:	2108      	movs	r1, #8
 8002c14:	4828      	ldr	r0, [pc, #160]	; (8002cb8 <menu+0x15b4>)
 8002c16:	f007 f8cf 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10d      	bne.n	8002c3c <menu+0x1538>
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <menu+0x15b8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <menu+0x15dc>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <menu+0x15bc>)
 8002c34:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <menu+0x15c0>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <menu+0x15c4>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b0b      	cmp	r3, #11
 8002c42:	f040 80b5 	bne.w	8002db0 <menu+0x16ac>
		if(dilSecim == 0) {
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <menu+0x15c8>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002c4e:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <menu+0x15e4>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f7fd fd08 	bl	8000668 <lcd_print>
 8002c58:	e008      	b.n	8002c6c <menu+0x1568>
		} else if(dilSecim == 1) {
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <menu+0x15c8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d104      	bne.n	8002c6c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <menu+0x15e8>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7fd fcfe 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <menu+0x15ec>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <menu+0x15f0>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f7fd fcf5 	bl	8000668 <lcd_print>
 8002c7e:	e048      	b.n	8002d12 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <menu+0x15ec>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d13b      	bne.n	8002d00 <menu+0x15fc>
			if(dilSecim == 0) {
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <menu+0x15c8>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <menu+0x15f4>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	2002      	movs	r0, #2
 8002c96:	f7fd fce7 	bl	8000668 <lcd_print>
 8002c9a:	e03a      	b.n	8002d12 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <menu+0x15c8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d136      	bne.n	8002d12 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002ca4:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <menu+0x15f8>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2002      	movs	r0, #2
 8002caa:	f7fd fcdd 	bl	8000668 <lcd_print>
 8002cae:	e030      	b.n	8002d12 <menu+0x160e>
 8002cb0:	20000d39 	.word	0x20000d39
 8002cb4:	0800dfb8 	.word	0x0800dfb8
 8002cb8:	40010800 	.word	0x40010800
 8002cbc:	20000d5f 	.word	0x20000d5f
 8002cc0:	20000c38 	.word	0x20000c38
 8002cc4:	20000d5c 	.word	0x20000d5c
 8002cc8:	20000d30 	.word	0x20000d30
 8002ccc:	20000d51 	.word	0x20000d51
 8002cd0:	0800dfc8 	.word	0x0800dfc8
 8002cd4:	0800dfdc 	.word	0x0800dfdc
 8002cd8:	0800dfec 	.word	0x0800dfec
 8002cdc:	0800e000 	.word	0x0800e000
 8002ce0:	20000d49 	.word	0x20000d49
 8002ce4:	20000ca8 	.word	0x20000ca8
 8002ce8:	0800e010 	.word	0x0800e010
 8002cec:	0800e024 	.word	0x0800e024
 8002cf0:	20000d3a 	.word	0x20000d3a
 8002cf4:	0800df80 	.word	0x0800df80
 8002cf8:	0800df94 	.word	0x0800df94
 8002cfc:	0800dfa4 	.word	0x0800dfa4
			}
		} else if(kapi2Tip == 2) {
 8002d00:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <menu+0x1828>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d104      	bne.n	8002d12 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002d08:	4a89      	ldr	r2, [pc, #548]	; (8002f30 <menu+0x182c>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f7fd fcab 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d12:	2102      	movs	r1, #2
 8002d14:	4887      	ldr	r0, [pc, #540]	; (8002f34 <menu+0x1830>)
 8002d16:	f007 f84f 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d115      	bne.n	8002d4c <menu+0x1648>
 8002d20:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <menu+0x1834>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	f083 0301 	eor.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00e      	beq.n	8002d4c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <menu+0x1828>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b7d      	ldr	r3, [pc, #500]	; (8002f2c <menu+0x1828>)
 8002d38:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002d3a:	4b7c      	ldr	r3, [pc, #496]	; (8002f2c <menu+0x1828>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d902      	bls.n	8002d48 <menu+0x1644>
				kapi2Tip = 0;
 8002d42:	4b7a      	ldr	r3, [pc, #488]	; (8002f2c <menu+0x1828>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d48:	f003 fa94 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	4879      	ldr	r0, [pc, #484]	; (8002f34 <menu+0x1830>)
 8002d50:	f007 f832 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d115      	bne.n	8002d86 <menu+0x1682>
 8002d5a:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <menu+0x1834>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	f083 0301 	eor.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002d68:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <menu+0x1828>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <menu+0x1828>)
 8002d72:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002d74:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <menu+0x1828>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d902      	bls.n	8002d82 <menu+0x167e>
		   		kapi2Tip = 2;
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <menu+0x1828>)
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d82:	f003 fa77 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d86:	2108      	movs	r1, #8
 8002d88:	486a      	ldr	r0, [pc, #424]	; (8002f34 <menu+0x1830>)
 8002d8a:	f007 f815 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10d      	bne.n	8002db0 <menu+0x16ac>
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <menu+0x1834>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002da2:	4b62      	ldr	r3, [pc, #392]	; (8002f2c <menu+0x1828>)
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <menu+0x1838>)
 8002da8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <menu+0x183c>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002db0:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <menu+0x1840>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d17f      	bne.n	8002eb8 <menu+0x17b4>
		if(dilSecim == 0) {
 8002db8:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <menu+0x1844>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002dc0:	4a62      	ldr	r2, [pc, #392]	; (8002f4c <menu+0x1848>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f7fd fc4f 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002dca:	4a61      	ldr	r2, [pc, #388]	; (8002f50 <menu+0x184c>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	2002      	movs	r0, #2
 8002dd0:	f7fd fc4a 	bl	8000668 <lcd_print>
 8002dd4:	e00d      	b.n	8002df2 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <menu+0x1844>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d109      	bne.n	8002df2 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002dde:	4a5d      	ldr	r2, [pc, #372]	; (8002f54 <menu+0x1850>)
 8002de0:	2101      	movs	r1, #1
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fd fc40 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002de8:	4a5b      	ldr	r2, [pc, #364]	; (8002f58 <menu+0x1854>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2002      	movs	r0, #2
 8002dee:	f7fd fc3b 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <menu+0x1858>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	220a      	movs	r2, #10
 8002df8:	4959      	ldr	r1, [pc, #356]	; (8002f60 <menu+0x185c>)
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f00a f808 	bl	800ce10 <itoa>
		lcd_print(2,16,snum);
 8002e00:	4a57      	ldr	r2, [pc, #348]	; (8002f60 <menu+0x185c>)
 8002e02:	2110      	movs	r1, #16
 8002e04:	2002      	movs	r0, #2
 8002e06:	f7fd fc2f 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4849      	ldr	r0, [pc, #292]	; (8002f34 <menu+0x1830>)
 8002e0e:	f006 ffd3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d119      	bne.n	8002e4c <menu+0x1748>
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <menu+0x1834>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f083 0301 	eor.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <menu+0x1748>
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <menu+0x1828>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10e      	bne.n	8002e4c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <menu+0x1858>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <menu+0x1858>)
 8002e38:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <menu+0x1858>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d902      	bls.n	8002e48 <menu+0x1744>
				kapi2AcSure = 0;
 8002e42:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <menu+0x1858>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e48:	f003 fa14 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	4839      	ldr	r0, [pc, #228]	; (8002f34 <menu+0x1830>)
 8002e50:	f006 ffb2 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d119      	bne.n	8002e8e <menu+0x178a>
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <menu+0x1834>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f083 0301 	eor.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <menu+0x178a>
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <menu+0x1828>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <menu+0x1858>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <menu+0x1858>)
 8002e7a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <menu+0x1858>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b06      	cmp	r3, #6
 8002e82:	d902      	bls.n	8002e8a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <menu+0x1858>)
 8002e86:	2205      	movs	r2, #5
 8002e88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e8a:	f003 f9f3 	bl	8006274 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8e:	2108      	movs	r1, #8
 8002e90:	4828      	ldr	r0, [pc, #160]	; (8002f34 <menu+0x1830>)
 8002e92:	f006 ff91 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10d      	bne.n	8002eb8 <menu+0x17b4>
 8002e9c:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <menu+0x1834>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <menu+0x1858>)
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <menu+0x1838>)
 8002eb0:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002eb2:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <menu+0x183c>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <menu+0x1840>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b0d      	cmp	r3, #13
 8002ebe:	f040 80b5 	bne.w	800302c <menu+0x1928>
		if(dilSecim == 0) {
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <menu+0x1844>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <menu+0x1860>)
 8002ecc:	2101      	movs	r1, #1
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7fd fbca 	bl	8000668 <lcd_print>
 8002ed4:	e008      	b.n	8002ee8 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <menu+0x1844>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d104      	bne.n	8002ee8 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002ede:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <menu+0x1864>)
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7fd fbc0 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <menu+0x1868>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <menu+0x186c>)
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	f7fd fbb7 	bl	8000668 <lcd_print>
 8002efa:	e048      	b.n	8002f8e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <menu+0x1868>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d13b      	bne.n	8002f7c <menu+0x1878>
			if(dilSecim == 0) {
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <menu+0x1844>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <menu+0x1870>)
 8002f0e:	2101      	movs	r1, #1
 8002f10:	2002      	movs	r0, #2
 8002f12:	f7fd fba9 	bl	8000668 <lcd_print>
 8002f16:	e03a      	b.n	8002f8e <menu+0x188a>
			} else if(dilSecim == 1) {
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <menu+0x1844>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d136      	bne.n	8002f8e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002f20:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <menu+0x1874>)
 8002f22:	2101      	movs	r1, #1
 8002f24:	2002      	movs	r0, #2
 8002f26:	f7fd fb9f 	bl	8000668 <lcd_print>
 8002f2a:	e030      	b.n	8002f8e <menu+0x188a>
 8002f2c:	20000d3a 	.word	0x20000d3a
 8002f30:	0800dfb8 	.word	0x0800dfb8
 8002f34:	40010800 	.word	0x40010800
 8002f38:	20000d5f 	.word	0x20000d5f
 8002f3c:	20000c38 	.word	0x20000c38
 8002f40:	20000d5c 	.word	0x20000d5c
 8002f44:	20000d30 	.word	0x20000d30
 8002f48:	20000d51 	.word	0x20000d51
 8002f4c:	0800e038 	.word	0x0800e038
 8002f50:	0800dfdc 	.word	0x0800dfdc
 8002f54:	0800e04c 	.word	0x0800e04c
 8002f58:	0800e000 	.word	0x0800e000
 8002f5c:	20000d4a 	.word	0x20000d4a
 8002f60:	20000ca8 	.word	0x20000ca8
 8002f64:	0800e060 	.word	0x0800e060
 8002f68:	0800e074 	.word	0x0800e074
 8002f6c:	20000d3b 	.word	0x20000d3b
 8002f70:	0800df80 	.word	0x0800df80
 8002f74:	0800df94 	.word	0x0800df94
 8002f78:	0800dfa4 	.word	0x0800dfa4
			}
		} else if(kapitablaTip == 2) {
 8002f7c:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <menu+0x19e8>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d104      	bne.n	8002f8e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002f84:	4a5a      	ldr	r2, [pc, #360]	; (80030f0 <menu+0x19ec>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	2002      	movs	r0, #2
 8002f8a:	f7fd fb6d 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4858      	ldr	r0, [pc, #352]	; (80030f4 <menu+0x19f0>)
 8002f92:	f006 ff11 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d115      	bne.n	8002fc8 <menu+0x18c4>
 8002f9c:	4b56      	ldr	r3, [pc, #344]	; (80030f8 <menu+0x19f4>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	f083 0301 	eor.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002faa:	4b50      	ldr	r3, [pc, #320]	; (80030ec <menu+0x19e8>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b4e      	ldr	r3, [pc, #312]	; (80030ec <menu+0x19e8>)
 8002fb4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <menu+0x19e8>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <menu+0x18c0>
				kapitablaTip = 0;
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <menu+0x19e8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fc4:	f003 f956 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc8:	2104      	movs	r1, #4
 8002fca:	484a      	ldr	r0, [pc, #296]	; (80030f4 <menu+0x19f0>)
 8002fcc:	f006 fef4 	bl	8009db8 <HAL_GPIO_ReadPin>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d115      	bne.n	8003002 <menu+0x18fe>
 8002fd6:	4b48      	ldr	r3, [pc, #288]	; (80030f8 <menu+0x19f4>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002fe4:	4b41      	ldr	r3, [pc, #260]	; (80030ec <menu+0x19e8>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <menu+0x19e8>)
 8002fee:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <menu+0x19e8>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d902      	bls.n	8002ffe <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <menu+0x19e8>)
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ffe:	f003 f939 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003002:	2108      	movs	r1, #8
 8003004:	483b      	ldr	r0, [pc, #236]	; (80030f4 <menu+0x19f0>)
 8003006:	f006 fed7 	bl	8009db8 <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10d      	bne.n	800302c <menu+0x1928>
 8003010:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <menu+0x19f4>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <menu+0x19e8>)
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <menu+0x19f8>)
 8003024:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <menu+0x19fc>)
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <menu+0x1a00>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b0e      	cmp	r3, #14
 8003032:	f040 80f2 	bne.w	800321a <menu+0x1b16>
		if(dilSecim == 0) {
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <menu+0x1a04>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800303e:	4a33      	ldr	r2, [pc, #204]	; (800310c <menu+0x1a08>)
 8003040:	2101      	movs	r1, #1
 8003042:	2001      	movs	r0, #1
 8003044:	f7fd fb10 	bl	8000668 <lcd_print>
 8003048:	e008      	b.n	800305c <menu+0x1958>
		} else if(dilSecim == 1) {
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <menu+0x1a04>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d104      	bne.n	800305c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8003052:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <menu+0x1a0c>)
 8003054:	2101      	movs	r1, #1
 8003056:	2001      	movs	r0, #1
 8003058:	f7fd fb06 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <menu+0x1a10>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d113      	bne.n	800308c <menu+0x1988>
			if(dilSecim == 0){
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <menu+0x1a04>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 800306c:	4a2a      	ldr	r2, [pc, #168]	; (8003118 <menu+0x1a14>)
 800306e:	2101      	movs	r1, #1
 8003070:	2002      	movs	r0, #2
 8003072:	f7fd faf9 	bl	8000668 <lcd_print>
 8003076:	e071      	b.n	800315c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <menu+0x1a04>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d16d      	bne.n	800315c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8003080:	4a26      	ldr	r2, [pc, #152]	; (800311c <menu+0x1a18>)
 8003082:	2101      	movs	r1, #1
 8003084:	2002      	movs	r0, #2
 8003086:	f7fd faef 	bl	8000668 <lcd_print>
 800308a:	e067      	b.n	800315c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <menu+0x1a10>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d112      	bne.n	80030ba <menu+0x19b6>
			if(dilSecim == 0){
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <menu+0x1a04>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 800309c:	4a20      	ldr	r2, [pc, #128]	; (8003120 <menu+0x1a1c>)
 800309e:	2101      	movs	r1, #1
 80030a0:	2002      	movs	r0, #2
 80030a2:	f7fd fae1 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <menu+0x1a04>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d156      	bne.n	800315c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <menu+0x1a20>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	2002      	movs	r0, #2
 80030b4:	f7fd fad8 	bl	8000668 <lcd_print>
 80030b8:	e050      	b.n	800315c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <menu+0x1a10>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d136      	bne.n	8003130 <menu+0x1a2c>
			if(dilSecim == 0){
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <menu+0x1a04>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <menu+0x1a24>)
 80030cc:	2101      	movs	r1, #1
 80030ce:	2002      	movs	r0, #2
 80030d0:	f7fd faca 	bl	8000668 <lcd_print>
 80030d4:	e042      	b.n	800315c <menu+0x1a58>
			} else if(dilSecim == 1) {
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <menu+0x1a04>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d13e      	bne.n	800315c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <menu+0x1a28>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	2002      	movs	r0, #2
 80030e4:	f7fd fac0 	bl	8000668 <lcd_print>
 80030e8:	e038      	b.n	800315c <menu+0x1a58>
 80030ea:	bf00      	nop
 80030ec:	20000d3b 	.word	0x20000d3b
 80030f0:	0800dfb8 	.word	0x0800dfb8
 80030f4:	40010800 	.word	0x40010800
 80030f8:	20000d5f 	.word	0x20000d5f
 80030fc:	20000c38 	.word	0x20000c38
 8003100:	20000d5c 	.word	0x20000d5c
 8003104:	20000d30 	.word	0x20000d30
 8003108:	20000d51 	.word	0x20000d51
 800310c:	0800e088 	.word	0x0800e088
 8003110:	0800e09c 	.word	0x0800e09c
 8003114:	20000d3d 	.word	0x20000d3d
 8003118:	0800e0b0 	.word	0x0800e0b0
 800311c:	0800e0c0 	.word	0x0800e0c0
 8003120:	0800e0d0 	.word	0x0800e0d0
 8003124:	0800e0e0 	.word	0x0800e0e0
 8003128:	0800e0f0 	.word	0x0800e0f0
 800312c:	0800e104 	.word	0x0800e104
			}
		} else if(kapiTablaAcKonum == 3) {
 8003130:	4b9b      	ldr	r3, [pc, #620]	; (80033a0 <menu+0x1c9c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d111      	bne.n	800315c <menu+0x1a58>
			if(dilSecim == 0) {
 8003138:	4b9a      	ldr	r3, [pc, #616]	; (80033a4 <menu+0x1ca0>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003140:	4a99      	ldr	r2, [pc, #612]	; (80033a8 <menu+0x1ca4>)
 8003142:	2101      	movs	r1, #1
 8003144:	2002      	movs	r0, #2
 8003146:	f7fd fa8f 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 800314a:	4b96      	ldr	r3, [pc, #600]	; (80033a4 <menu+0x1ca0>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d104      	bne.n	800315c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8003152:	4a96      	ldr	r2, [pc, #600]	; (80033ac <menu+0x1ca8>)
 8003154:	2101      	movs	r1, #1
 8003156:	2002      	movs	r0, #2
 8003158:	f7fd fa86 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800315c:	2102      	movs	r1, #2
 800315e:	4894      	ldr	r0, [pc, #592]	; (80033b0 <menu+0x1cac>)
 8003160:	f006 fe2a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d115      	bne.n	8003196 <menu+0x1a92>
 800316a:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <menu+0x1cb0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	f083 0301 	eor.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003178:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <menu+0x1c9c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b87      	ldr	r3, [pc, #540]	; (80033a0 <menu+0x1c9c>)
 8003182:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003184:	4b86      	ldr	r3, [pc, #536]	; (80033a0 <menu+0x1c9c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d902      	bls.n	8003192 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 800318c:	4b84      	ldr	r3, [pc, #528]	; (80033a0 <menu+0x1c9c>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003192:	f003 f86f 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003196:	2104      	movs	r1, #4
 8003198:	4885      	ldr	r0, [pc, #532]	; (80033b0 <menu+0x1cac>)
 800319a:	f006 fe0d 	bl	8009db8 <HAL_GPIO_ReadPin>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d115      	bne.n	80031d0 <menu+0x1acc>
 80031a4:	4b83      	ldr	r3, [pc, #524]	; (80033b4 <menu+0x1cb0>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80031b2:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <menu+0x1c9c>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <menu+0x1c9c>)
 80031bc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80031be:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <menu+0x1c9c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d902      	bls.n	80031cc <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 80031c6:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <menu+0x1c9c>)
 80031c8:	2202      	movs	r2, #2
 80031ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031cc:	f003 f852 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d0:	2108      	movs	r1, #8
 80031d2:	4877      	ldr	r0, [pc, #476]	; (80033b0 <menu+0x1cac>)
 80031d4:	f006 fdf0 	bl	8009db8 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d11d      	bne.n	800321a <menu+0x1b16>
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <menu+0x1cb0>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d016      	beq.n	800321a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80031ec:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <menu+0x1c9c>)
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	4b71      	ldr	r3, [pc, #452]	; (80033b8 <menu+0x1cb4>)
 80031f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80031f6:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <menu+0x1c9c>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <menu+0x1b02>
 80031fe:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <menu+0x1c9c>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d106      	bne.n	8003214 <menu+0x1b10>
				altLimit = 1;
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <menu+0x1cb8>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800320c:	4b6b      	ldr	r3, [pc, #428]	; (80033bc <menu+0x1cb8>)
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <menu+0x1cb4>)
 8003212:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <menu+0x1cbc>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <menu+0x1cc0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	d17f      	bne.n	8003322 <menu+0x1c1e>
		if(dilSecim == 0) {
 8003222:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <menu+0x1ca0>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800322a:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <menu+0x1cc4>)
 800322c:	2101      	movs	r1, #1
 800322e:	2001      	movs	r0, #1
 8003230:	f7fd fa1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <menu+0x1cc8>)
 8003236:	2101      	movs	r1, #1
 8003238:	2002      	movs	r0, #2
 800323a:	f7fd fa15 	bl	8000668 <lcd_print>
 800323e:	e00d      	b.n	800325c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003240:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <menu+0x1ca0>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d109      	bne.n	800325c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003248:	4a61      	ldr	r2, [pc, #388]	; (80033d0 <menu+0x1ccc>)
 800324a:	2101      	movs	r1, #1
 800324c:	2001      	movs	r0, #1
 800324e:	f7fd fa0b 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003252:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <menu+0x1cd0>)
 8003254:	2101      	movs	r1, #1
 8003256:	2002      	movs	r0, #2
 8003258:	f7fd fa06 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <menu+0x1cd4>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	220a      	movs	r2, #10
 8003262:	495e      	ldr	r1, [pc, #376]	; (80033dc <menu+0x1cd8>)
 8003264:	4618      	mov	r0, r3
 8003266:	f009 fdd3 	bl	800ce10 <itoa>
		lcd_print(2,16,snum);
 800326a:	4a5c      	ldr	r2, [pc, #368]	; (80033dc <menu+0x1cd8>)
 800326c:	2110      	movs	r1, #16
 800326e:	2002      	movs	r0, #2
 8003270:	f7fd f9fa 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003274:	2102      	movs	r1, #2
 8003276:	484e      	ldr	r0, [pc, #312]	; (80033b0 <menu+0x1cac>)
 8003278:	f006 fd9e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d119      	bne.n	80032b6 <menu+0x1bb2>
 8003282:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <menu+0x1cb0>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <menu+0x1bb2>
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <menu+0x1cdc>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10e      	bne.n	80032b6 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <menu+0x1cd4>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <menu+0x1cd4>)
 80032a2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <menu+0x1cd4>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d902      	bls.n	80032b2 <menu+0x1bae>
				kapiTablaAcSure = 0;
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <menu+0x1cd4>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032b2:	f002 ffdf 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80032b6:	2104      	movs	r1, #4
 80032b8:	483d      	ldr	r0, [pc, #244]	; (80033b0 <menu+0x1cac>)
 80032ba:	f006 fd7d 	bl	8009db8 <HAL_GPIO_ReadPin>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d119      	bne.n	80032f8 <menu+0x1bf4>
 80032c4:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <menu+0x1cb0>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f083 0301 	eor.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <menu+0x1bf4>
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <menu+0x1cdc>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10e      	bne.n	80032f8 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <menu+0x1cd4>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	3b01      	subs	r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <menu+0x1cd4>)
 80032e4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80032e6:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <menu+0x1cd4>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <menu+0x1cd4>)
 80032f0:	2205      	movs	r2, #5
 80032f2:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80032f4:	f002 ffbe 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032f8:	2108      	movs	r1, #8
 80032fa:	482d      	ldr	r0, [pc, #180]	; (80033b0 <menu+0x1cac>)
 80032fc:	f006 fd5c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10d      	bne.n	8003322 <menu+0x1c1e>
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <menu+0x1cb0>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	f083 0301 	eor.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003314:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <menu+0x1cd4>)
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <menu+0x1cb4>)
 800331a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800331c:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <menu+0x1cbc>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <menu+0x1cc0>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	f040 80bc 	bne.w	80034a4 <menu+0x1da0>
		if(dilSecim == 0) {
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <menu+0x1ca0>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003334:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <menu+0x1ce0>)
 8003336:	2101      	movs	r1, #1
 8003338:	2001      	movs	r0, #1
 800333a:	f7fd f995 	bl	8000668 <lcd_print>
 800333e:	e008      	b.n	8003352 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <menu+0x1ca0>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d104      	bne.n	8003352 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <menu+0x1ce4>)
 800334a:	2101      	movs	r1, #1
 800334c:	2001      	movs	r0, #1
 800334e:	f7fd f98b 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <menu+0x1ce8>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <menu+0x1c7e>
			if(dilSecim == 0) {
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <menu+0x1ca0>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <menu+0x1ca4>)
 8003364:	2101      	movs	r1, #1
 8003366:	2002      	movs	r0, #2
 8003368:	f7fd f97e 	bl	8000668 <lcd_print>
 800336c:	e04b      	b.n	8003406 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <menu+0x1ca0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d147      	bne.n	8003406 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <menu+0x1ca8>)
 8003378:	2101      	movs	r1, #1
 800337a:	2002      	movs	r0, #2
 800337c:	f7fd f974 	bl	8000668 <lcd_print>
 8003380:	e041      	b.n	8003406 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <menu+0x1ce8>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d13d      	bne.n	8003406 <menu+0x1d02>
			if(dilSecim == 0) {
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <menu+0x1ca0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d130      	bne.n	80033f4 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8003392:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <menu+0x1cec>)
 8003394:	2101      	movs	r1, #1
 8003396:	2002      	movs	r0, #2
 8003398:	f7fd f966 	bl	8000668 <lcd_print>
 800339c:	e033      	b.n	8003406 <menu+0x1d02>
 800339e:	bf00      	nop
 80033a0:	20000d3d 	.word	0x20000d3d
 80033a4:	20000d51 	.word	0x20000d51
 80033a8:	0800dd78 	.word	0x0800dd78
 80033ac:	0800dd8c 	.word	0x0800dd8c
 80033b0:	40010800 	.word	0x40010800
 80033b4:	20000d5f 	.word	0x20000d5f
 80033b8:	20000c38 	.word	0x20000c38
 80033bc:	20000d36 	.word	0x20000d36
 80033c0:	20000d5c 	.word	0x20000d5c
 80033c4:	20000d30 	.word	0x20000d30
 80033c8:	0800e118 	.word	0x0800e118
 80033cc:	0800dfdc 	.word	0x0800dfdc
 80033d0:	0800e12c 	.word	0x0800e12c
 80033d4:	0800e000 	.word	0x0800e000
 80033d8:	20000d4b 	.word	0x20000d4b
 80033dc:	20000ca8 	.word	0x20000ca8
 80033e0:	20000d3b 	.word	0x20000d3b
 80033e4:	0800e140 	.word	0x0800e140
 80033e8:	0800e154 	.word	0x0800e154
 80033ec:	20000d3e 	.word	0x20000d3e
 80033f0:	0800ddd8 	.word	0x0800ddd8
			} else if(dilSecim == 1) {
 80033f4:	4b99      	ldr	r3, [pc, #612]	; (800365c <menu+0x1f58>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d104      	bne.n	8003406 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80033fc:	4a98      	ldr	r2, [pc, #608]	; (8003660 <menu+0x1f5c>)
 80033fe:	2101      	movs	r1, #1
 8003400:	2002      	movs	r0, #2
 8003402:	f7fd f931 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003406:	2102      	movs	r1, #2
 8003408:	4896      	ldr	r0, [pc, #600]	; (8003664 <menu+0x1f60>)
 800340a:	f006 fcd5 	bl	8009db8 <HAL_GPIO_ReadPin>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d115      	bne.n	8003440 <menu+0x1d3c>
 8003414:	4b94      	ldr	r3, [pc, #592]	; (8003668 <menu+0x1f64>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f083 0301 	eor.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003422:	4b92      	ldr	r3, [pc, #584]	; (800366c <menu+0x1f68>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b90      	ldr	r3, [pc, #576]	; (800366c <menu+0x1f68>)
 800342c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800342e:	4b8f      	ldr	r3, [pc, #572]	; (800366c <menu+0x1f68>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d902      	bls.n	800343c <menu+0x1d38>
				yukariYavasLimit = 0;
 8003436:	4b8d      	ldr	r3, [pc, #564]	; (800366c <menu+0x1f68>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800343c:	f002 ff1a 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003440:	2104      	movs	r1, #4
 8003442:	4888      	ldr	r0, [pc, #544]	; (8003664 <menu+0x1f60>)
 8003444:	f006 fcb8 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003448:	4603      	mov	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d115      	bne.n	800347a <menu+0x1d76>
 800344e:	4b86      	ldr	r3, [pc, #536]	; (8003668 <menu+0x1f64>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 800345c:	4b83      	ldr	r3, [pc, #524]	; (800366c <menu+0x1f68>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <menu+0x1f68>)
 8003466:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003468:	4b80      	ldr	r3, [pc, #512]	; (800366c <menu+0x1f68>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <menu+0x1f68>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003476:	f002 fefd 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800347a:	2108      	movs	r1, #8
 800347c:	4879      	ldr	r0, [pc, #484]	; (8003664 <menu+0x1f60>)
 800347e:	f006 fc9b 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10d      	bne.n	80034a4 <menu+0x1da0>
 8003488:	4b77      	ldr	r3, [pc, #476]	; (8003668 <menu+0x1f64>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003496:	4b75      	ldr	r3, [pc, #468]	; (800366c <menu+0x1f68>)
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b75      	ldr	r3, [pc, #468]	; (8003670 <menu+0x1f6c>)
 800349c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800349e:	4b75      	ldr	r3, [pc, #468]	; (8003674 <menu+0x1f70>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80034a4:	4b74      	ldr	r3, [pc, #464]	; (8003678 <menu+0x1f74>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b11      	cmp	r3, #17
 80034aa:	f040 80c3 	bne.w	8003634 <menu+0x1f30>
		if(dilSecim == 0) {
 80034ae:	4b6b      	ldr	r3, [pc, #428]	; (800365c <menu+0x1f58>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80034b6:	4a71      	ldr	r2, [pc, #452]	; (800367c <menu+0x1f78>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7fd f8d4 	bl	8000668 <lcd_print>
 80034c0:	e008      	b.n	80034d4 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80034c2:	4b66      	ldr	r3, [pc, #408]	; (800365c <menu+0x1f58>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d104      	bne.n	80034d4 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80034ca:	4a6d      	ldr	r2, [pc, #436]	; (8003680 <menu+0x1f7c>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	2001      	movs	r0, #1
 80034d0:	f7fd f8ca 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80034d4:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <menu+0x1f80>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d113      	bne.n	8003504 <menu+0x1e00>
			if(dilSecim == 0){
 80034dc:	4b5f      	ldr	r3, [pc, #380]	; (800365c <menu+0x1f58>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80034e4:	4a68      	ldr	r2, [pc, #416]	; (8003688 <menu+0x1f84>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f7fd f8bd 	bl	8000668 <lcd_print>
 80034ee:	e038      	b.n	8003562 <menu+0x1e5e>
			} else if(dilSecim == 1){
 80034f0:	4b5a      	ldr	r3, [pc, #360]	; (800365c <menu+0x1f58>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d134      	bne.n	8003562 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80034f8:	4a64      	ldr	r2, [pc, #400]	; (800368c <menu+0x1f88>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2002      	movs	r0, #2
 80034fe:	f7fd f8b3 	bl	8000668 <lcd_print>
 8003502:	e02e      	b.n	8003562 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003504:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <menu+0x1f80>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d113      	bne.n	8003534 <menu+0x1e30>
			if(dilSecim == 0){
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <menu+0x1f58>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003514:	4a5e      	ldr	r2, [pc, #376]	; (8003690 <menu+0x1f8c>)
 8003516:	2101      	movs	r1, #1
 8003518:	2002      	movs	r0, #2
 800351a:	f7fd f8a5 	bl	8000668 <lcd_print>
 800351e:	e020      	b.n	8003562 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003520:	4b4e      	ldr	r3, [pc, #312]	; (800365c <menu+0x1f58>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11c      	bne.n	8003562 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003528:	4a5a      	ldr	r2, [pc, #360]	; (8003694 <menu+0x1f90>)
 800352a:	2101      	movs	r1, #1
 800352c:	2002      	movs	r0, #2
 800352e:	f7fd f89b 	bl	8000668 <lcd_print>
 8003532:	e016      	b.n	8003562 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <menu+0x1f80>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d112      	bne.n	8003562 <menu+0x1e5e>
			if(dilSecim == 0) {
 800353c:	4b47      	ldr	r3, [pc, #284]	; (800365c <menu+0x1f58>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003544:	4a54      	ldr	r2, [pc, #336]	; (8003698 <menu+0x1f94>)
 8003546:	2101      	movs	r1, #1
 8003548:	2002      	movs	r0, #2
 800354a:	f7fd f88d 	bl	8000668 <lcd_print>
 800354e:	e008      	b.n	8003562 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <menu+0x1f58>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d104      	bne.n	8003562 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003558:	4a50      	ldr	r2, [pc, #320]	; (800369c <menu+0x1f98>)
 800355a:	2101      	movs	r1, #1
 800355c:	2002      	movs	r0, #2
 800355e:	f7fd f883 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003562:	2102      	movs	r1, #2
 8003564:	483f      	ldr	r0, [pc, #252]	; (8003664 <menu+0x1f60>)
 8003566:	f006 fc27 	bl	8009db8 <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d115      	bne.n	800359c <menu+0x1e98>
 8003570:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <menu+0x1f64>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <menu+0x1f80>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <menu+0x1f80>)
 8003588:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <menu+0x1f80>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <menu+0x1f80>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003598:	f002 fe6c 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800359c:	2104      	movs	r1, #4
 800359e:	4831      	ldr	r0, [pc, #196]	; (8003664 <menu+0x1f60>)
 80035a0:	f006 fc0a 	bl	8009db8 <HAL_GPIO_ReadPin>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d115      	bne.n	80035d6 <menu+0x1ed2>
 80035aa:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <menu+0x1f64>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <menu+0x1f80>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	4b30      	ldr	r3, [pc, #192]	; (8003684 <menu+0x1f80>)
 80035c2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <menu+0x1f80>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d902      	bls.n	80035d2 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <menu+0x1f80>)
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035d2:	f002 fe4f 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d6:	2108      	movs	r1, #8
 80035d8:	4822      	ldr	r0, [pc, #136]	; (8003664 <menu+0x1f60>)
 80035da:	f006 fbed 	bl	8009db8 <HAL_GPIO_ReadPin>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d127      	bne.n	8003634 <menu+0x1f30>
 80035e4:	4b20      	ldr	r3, [pc, #128]	; (8003668 <menu+0x1f64>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <menu+0x1f80>)
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <menu+0x1f6c>)
 80035f8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <menu+0x1f80>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d003      	beq.n	800360a <menu+0x1f06>
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <menu+0x1f80>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d106      	bne.n	8003618 <menu+0x1f14>
				calismaSekli = 0;
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <menu+0x1f9c>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003610:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <menu+0x1f9c>)
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <menu+0x1f6c>)
 8003616:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <menu+0x1f80>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <menu+0x1fa0>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <menu+0x1fa0>)
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <menu+0x1f6c>)
 800362c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <menu+0x1f70>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <menu+0x1f74>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b12      	cmp	r3, #18
 800363a:	f040 80d5 	bne.w	80037e8 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <menu+0x1f80>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d13c      	bne.n	80036c0 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <menu+0x1f58>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d12e      	bne.n	80036ac <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800364e:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <menu+0x1fa4>)
 8003650:	2101      	movs	r1, #1
 8003652:	2001      	movs	r0, #1
 8003654:	f7fd f808 	bl	8000668 <lcd_print>
 8003658:	e048      	b.n	80036ec <menu+0x1fe8>
 800365a:	bf00      	nop
 800365c:	20000d51 	.word	0x20000d51
 8003660:	0800ddec 	.word	0x0800ddec
 8003664:	40010800 	.word	0x40010800
 8003668:	20000d5f 	.word	0x20000d5f
 800366c:	20000d3e 	.word	0x20000d3e
 8003670:	20000c38 	.word	0x20000c38
 8003674:	20000d5c 	.word	0x20000d5c
 8003678:	20000d30 	.word	0x20000d30
 800367c:	0800e168 	.word	0x0800e168
 8003680:	0800e17c 	.word	0x0800e17c
 8003684:	20000d3f 	.word	0x20000d3f
 8003688:	0800e190 	.word	0x0800e190
 800368c:	0800e1a0 	.word	0x0800e1a0
 8003690:	0800e1b0 	.word	0x0800e1b0
 8003694:	0800e1c0 	.word	0x0800e1c0
 8003698:	0800dd78 	.word	0x0800dd78
 800369c:	0800dd8c 	.word	0x0800dd8c
 80036a0:	20000d31 	.word	0x20000d31
 80036a4:	20000d42 	.word	0x20000d42
 80036a8:	0800e1d0 	.word	0x0800e1d0
			} else if(dilSecim == 1) {
 80036ac:	4b7b      	ldr	r3, [pc, #492]	; (800389c <menu+0x2198>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d11b      	bne.n	80036ec <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80036b4:	4a7a      	ldr	r2, [pc, #488]	; (80038a0 <menu+0x219c>)
 80036b6:	2101      	movs	r1, #1
 80036b8:	2001      	movs	r0, #1
 80036ba:	f7fc ffd5 	bl	8000668 <lcd_print>
 80036be:	e015      	b.n	80036ec <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036c0:	4b78      	ldr	r3, [pc, #480]	; (80038a4 <menu+0x21a0>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d111      	bne.n	80036ec <menu+0x1fe8>
			if(dilSecim == 0){
 80036c8:	4b74      	ldr	r3, [pc, #464]	; (800389c <menu+0x2198>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80036d0:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <menu+0x21a4>)
 80036d2:	2101      	movs	r1, #1
 80036d4:	2001      	movs	r0, #1
 80036d6:	f7fc ffc7 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 80036da:	4b70      	ldr	r3, [pc, #448]	; (800389c <menu+0x2198>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d104      	bne.n	80036ec <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80036e2:	4a72      	ldr	r2, [pc, #456]	; (80038ac <menu+0x21a8>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	2001      	movs	r0, #1
 80036e8:	f7fc ffbe 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80036ec:	4b70      	ldr	r3, [pc, #448]	; (80038b0 <menu+0x21ac>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d113      	bne.n	800371c <menu+0x2018>
			if(dilSecim == 0) {
 80036f4:	4b69      	ldr	r3, [pc, #420]	; (800389c <menu+0x2198>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80036fc:	4a6d      	ldr	r2, [pc, #436]	; (80038b4 <menu+0x21b0>)
 80036fe:	2101      	movs	r1, #1
 8003700:	2002      	movs	r0, #2
 8003702:	f7fc ffb1 	bl	8000668 <lcd_print>
 8003706:	e020      	b.n	800374a <menu+0x2046>
			} else if(dilSecim == 1){
 8003708:	4b64      	ldr	r3, [pc, #400]	; (800389c <menu+0x2198>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d11c      	bne.n	800374a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003710:	4a69      	ldr	r2, [pc, #420]	; (80038b8 <menu+0x21b4>)
 8003712:	2101      	movs	r1, #1
 8003714:	2002      	movs	r0, #2
 8003716:	f7fc ffa7 	bl	8000668 <lcd_print>
 800371a:	e016      	b.n	800374a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800371c:	4b64      	ldr	r3, [pc, #400]	; (80038b0 <menu+0x21ac>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d112      	bne.n	800374a <menu+0x2046>
			if(dilSecim == 0){
 8003724:	4b5d      	ldr	r3, [pc, #372]	; (800389c <menu+0x2198>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800372c:	4a63      	ldr	r2, [pc, #396]	; (80038bc <menu+0x21b8>)
 800372e:	2101      	movs	r1, #1
 8003730:	2002      	movs	r0, #2
 8003732:	f7fc ff99 	bl	8000668 <lcd_print>
 8003736:	e008      	b.n	800374a <menu+0x2046>
			} else if(dilSecim == 1){
 8003738:	4b58      	ldr	r3, [pc, #352]	; (800389c <menu+0x2198>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d104      	bne.n	800374a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003740:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <menu+0x21bc>)
 8003742:	2101      	movs	r1, #1
 8003744:	2002      	movs	r0, #2
 8003746:	f7fc ff8f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800374a:	2102      	movs	r1, #2
 800374c:	485d      	ldr	r0, [pc, #372]	; (80038c4 <menu+0x21c0>)
 800374e:	f006 fb33 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	d115      	bne.n	8003784 <menu+0x2080>
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <menu+0x21c4>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	f083 0301 	eor.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003766:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <menu+0x21ac>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <menu+0x21ac>)
 8003770:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003772:	4b4f      	ldr	r3, [pc, #316]	; (80038b0 <menu+0x21ac>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d902      	bls.n	8003780 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800377a:	4b4d      	ldr	r3, [pc, #308]	; (80038b0 <menu+0x21ac>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003780:	f002 fd78 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003784:	2104      	movs	r1, #4
 8003786:	484f      	ldr	r0, [pc, #316]	; (80038c4 <menu+0x21c0>)
 8003788:	f006 fb16 	bl	8009db8 <HAL_GPIO_ReadPin>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d115      	bne.n	80037be <menu+0x20ba>
 8003792:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <menu+0x21c4>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f083 0301 	eor.w	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80037a0:	4b43      	ldr	r3, [pc, #268]	; (80038b0 <menu+0x21ac>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <menu+0x21ac>)
 80037aa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80037ac:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <menu+0x21ac>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80037b4:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <menu+0x21ac>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037ba:	f002 fd5b 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037be:	2108      	movs	r1, #8
 80037c0:	4840      	ldr	r0, [pc, #256]	; (80038c4 <menu+0x21c0>)
 80037c2:	f006 faf9 	bl	8009db8 <HAL_GPIO_ReadPin>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10d      	bne.n	80037e8 <menu+0x20e4>
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <menu+0x21c4>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f083 0301 	eor.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80037da:	4b35      	ldr	r3, [pc, #212]	; (80038b0 <menu+0x21ac>)
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <menu+0x21c8>)
 80037e0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <menu+0x21cc>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80037e8:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <menu+0x21d0>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b13      	cmp	r3, #19
 80037ee:	f040 80d5 	bne.w	800399c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80037f2:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <menu+0x21a0>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d113      	bne.n	8003822 <menu+0x211e>
			if(dilSecim == 0) {
 80037fa:	4b28      	ldr	r3, [pc, #160]	; (800389c <menu+0x2198>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003802:	4a35      	ldr	r2, [pc, #212]	; (80038d8 <menu+0x21d4>)
 8003804:	2101      	movs	r1, #1
 8003806:	2001      	movs	r0, #1
 8003808:	f7fc ff2e 	bl	8000668 <lcd_print>
 800380c:	e01f      	b.n	800384e <menu+0x214a>
			} else if(dilSecim == 1) {
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <menu+0x2198>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d11b      	bne.n	800384e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003816:	4a31      	ldr	r2, [pc, #196]	; (80038dc <menu+0x21d8>)
 8003818:	2101      	movs	r1, #1
 800381a:	2001      	movs	r0, #1
 800381c:	f7fc ff24 	bl	8000668 <lcd_print>
 8003820:	e015      	b.n	800384e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <menu+0x21a0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d111      	bne.n	800384e <menu+0x214a>
			if(dilSecim == 0) {
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <menu+0x2198>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003832:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <menu+0x21dc>)
 8003834:	2101      	movs	r1, #1
 8003836:	2001      	movs	r0, #1
 8003838:	f7fc ff16 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <menu+0x2198>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d104      	bne.n	800384e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003844:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <menu+0x21e0>)
 8003846:	2101      	movs	r1, #1
 8003848:	2001      	movs	r0, #1
 800384a:	f7fc ff0d 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <menu+0x21e4>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d113      	bne.n	800387e <menu+0x217a>
			if(dilSecim == 0) {
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <menu+0x2198>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800385e:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <menu+0x21b0>)
 8003860:	2101      	movs	r1, #1
 8003862:	2002      	movs	r0, #2
 8003864:	f7fc ff00 	bl	8000668 <lcd_print>
 8003868:	e049      	b.n	80038fe <menu+0x21fa>
			} else if(dilSecim == 1) {
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <menu+0x2198>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d145      	bne.n	80038fe <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003872:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <menu+0x21b4>)
 8003874:	2101      	movs	r1, #1
 8003876:	2002      	movs	r0, #2
 8003878:	f7fc fef6 	bl	8000668 <lcd_print>
 800387c:	e03f      	b.n	80038fe <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <menu+0x21e4>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d13b      	bne.n	80038fe <menu+0x21fa>
			if(dilSecim == 0) {
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <menu+0x2198>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d12e      	bne.n	80038ec <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800388e:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <menu+0x21b8>)
 8003890:	2101      	movs	r1, #1
 8003892:	2002      	movs	r0, #2
 8003894:	f7fc fee8 	bl	8000668 <lcd_print>
 8003898:	e031      	b.n	80038fe <menu+0x21fa>
 800389a:	bf00      	nop
 800389c:	20000d51 	.word	0x20000d51
 80038a0:	0800e1e4 	.word	0x0800e1e4
 80038a4:	20000d3f 	.word	0x20000d3f
 80038a8:	0800e1f4 	.word	0x0800e1f4
 80038ac:	0800e208 	.word	0x0800e208
 80038b0:	20000d40 	.word	0x20000d40
 80038b4:	0800dd78 	.word	0x0800dd78
 80038b8:	0800dd8c 	.word	0x0800dd8c
 80038bc:	0800ddd8 	.word	0x0800ddd8
 80038c0:	0800ddec 	.word	0x0800ddec
 80038c4:	40010800 	.word	0x40010800
 80038c8:	20000d5f 	.word	0x20000d5f
 80038cc:	20000c38 	.word	0x20000c38
 80038d0:	20000d5c 	.word	0x20000d5c
 80038d4:	20000d30 	.word	0x20000d30
 80038d8:	0800e21c 	.word	0x0800e21c
 80038dc:	0800e230 	.word	0x0800e230
 80038e0:	0800e244 	.word	0x0800e244
 80038e4:	0800e258 	.word	0x0800e258
 80038e8:	20000d41 	.word	0x20000d41
			} else if(dilSecim == 1) {
 80038ec:	4b90      	ldr	r3, [pc, #576]	; (8003b30 <menu+0x242c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d104      	bne.n	80038fe <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80038f4:	4a8f      	ldr	r2, [pc, #572]	; (8003b34 <menu+0x2430>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	2002      	movs	r0, #2
 80038fa:	f7fc feb5 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fe:	2102      	movs	r1, #2
 8003900:	488d      	ldr	r0, [pc, #564]	; (8003b38 <menu+0x2434>)
 8003902:	f006 fa59 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d115      	bne.n	8003938 <menu+0x2234>
 800390c:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <menu+0x2438>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800391a:	4b89      	ldr	r3, [pc, #548]	; (8003b40 <menu+0x243c>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <menu+0x243c>)
 8003924:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003926:	4b86      	ldr	r3, [pc, #536]	; (8003b40 <menu+0x243c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d902      	bls.n	8003934 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800392e:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <menu+0x243c>)
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003934:	f002 fc9e 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003938:	2104      	movs	r1, #4
 800393a:	487f      	ldr	r0, [pc, #508]	; (8003b38 <menu+0x2434>)
 800393c:	f006 fa3c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d115      	bne.n	8003972 <menu+0x226e>
 8003946:	4b7d      	ldr	r3, [pc, #500]	; (8003b3c <menu+0x2438>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003954:	4b7a      	ldr	r3, [pc, #488]	; (8003b40 <menu+0x243c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	3b01      	subs	r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <menu+0x243c>)
 800395e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003960:	4b77      	ldr	r3, [pc, #476]	; (8003b40 <menu+0x243c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <menu+0x243c>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800396e:	f002 fc81 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003972:	2108      	movs	r1, #8
 8003974:	4870      	ldr	r0, [pc, #448]	; (8003b38 <menu+0x2434>)
 8003976:	f006 fa1f 	bl	8009db8 <HAL_GPIO_ReadPin>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10d      	bne.n	800399c <menu+0x2298>
 8003980:	4b6e      	ldr	r3, [pc, #440]	; (8003b3c <menu+0x2438>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800398e:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <menu+0x243c>)
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <menu+0x2440>)
 8003994:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003996:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <menu+0x2444>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800399c:	4b6b      	ldr	r3, [pc, #428]	; (8003b4c <menu+0x2448>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b14      	cmp	r3, #20
 80039a2:	f040 80b5 	bne.w	8003b10 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80039a6:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <menu+0x244c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d113      	bne.n	80039d6 <menu+0x22d2>
			if(dilSecim == 0) {
 80039ae:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <menu+0x242c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80039b6:	4a67      	ldr	r2, [pc, #412]	; (8003b54 <menu+0x2450>)
 80039b8:	2101      	movs	r1, #1
 80039ba:	2001      	movs	r0, #1
 80039bc:	f7fc fe54 	bl	8000668 <lcd_print>
 80039c0:	e020      	b.n	8003a04 <menu+0x2300>
			} else if(dilSecim == 1) {
 80039c2:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <menu+0x242c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d11c      	bne.n	8003a04 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80039ca:	4a63      	ldr	r2, [pc, #396]	; (8003b58 <menu+0x2454>)
 80039cc:	2101      	movs	r1, #1
 80039ce:	2001      	movs	r0, #1
 80039d0:	f7fc fe4a 	bl	8000668 <lcd_print>
 80039d4:	e016      	b.n	8003a04 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80039d6:	4b5e      	ldr	r3, [pc, #376]	; (8003b50 <menu+0x244c>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d112      	bne.n	8003a04 <menu+0x2300>
			if(dilSecim == 0) {
 80039de:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <menu+0x242c>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80039e6:	4a5d      	ldr	r2, [pc, #372]	; (8003b5c <menu+0x2458>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	2001      	movs	r0, #1
 80039ec:	f7fc fe3c 	bl	8000668 <lcd_print>
 80039f0:	e008      	b.n	8003a04 <menu+0x2300>
			} else if(dilSecim == 1) {
 80039f2:	4b4f      	ldr	r3, [pc, #316]	; (8003b30 <menu+0x242c>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d104      	bne.n	8003a04 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80039fa:	4a59      	ldr	r2, [pc, #356]	; (8003b60 <menu+0x245c>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	2001      	movs	r0, #1
 8003a00:	f7fc fe32 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003a04:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <menu+0x2460>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d113      	bne.n	8003a34 <menu+0x2330>
			if(dilSecim == 0) {
 8003a0c:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <menu+0x242c>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003a14:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <menu+0x2464>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	2002      	movs	r0, #2
 8003a1a:	f7fc fe25 	bl	8000668 <lcd_print>
 8003a1e:	e020      	b.n	8003a62 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003a20:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <menu+0x242c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d11c      	bne.n	8003a62 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003a28:	4a50      	ldr	r2, [pc, #320]	; (8003b6c <menu+0x2468>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	f7fc fe1b 	bl	8000668 <lcd_print>
 8003a32:	e016      	b.n	8003a62 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003a34:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <menu+0x2460>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d112      	bne.n	8003a62 <menu+0x235e>
			if(dilSecim == 0) {
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <menu+0x242c>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003a44:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <menu+0x246c>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	2002      	movs	r0, #2
 8003a4a:	f7fc fe0d 	bl	8000668 <lcd_print>
 8003a4e:	e008      	b.n	8003a62 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003a50:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <menu+0x242c>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d104      	bne.n	8003a62 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003a58:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <menu+0x2470>)
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f7fc fe03 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003a62:	2102      	movs	r1, #2
 8003a64:	4834      	ldr	r0, [pc, #208]	; (8003b38 <menu+0x2434>)
 8003a66:	f006 f9a7 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d119      	bne.n	8003aa4 <menu+0x23a0>
 8003a70:	4b32      	ldr	r3, [pc, #200]	; (8003b3c <menu+0x2438>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <menu+0x23a0>
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <menu+0x244c>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d10e      	bne.n	8003aa4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <menu+0x2460>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <menu+0x2460>)
 8003a90:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003a92:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <menu+0x2460>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d902      	bls.n	8003aa0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <menu+0x2460>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003aa0:	f002 fbe8 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	4824      	ldr	r0, [pc, #144]	; (8003b38 <menu+0x2434>)
 8003aa8:	f006 f986 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d119      	bne.n	8003ae6 <menu+0x23e2>
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <menu+0x2438>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f083 0301 	eor.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d012      	beq.n	8003ae6 <menu+0x23e2>
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <menu+0x244c>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d10e      	bne.n	8003ae6 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003ac8:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <menu+0x2460>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <menu+0x2460>)
 8003ad2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <menu+0x2460>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <menu+0x2460>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ae2:	f002 fbc7 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae6:	2108      	movs	r1, #8
 8003ae8:	4813      	ldr	r0, [pc, #76]	; (8003b38 <menu+0x2434>)
 8003aea:	f006 f965 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10d      	bne.n	8003b10 <menu+0x240c>
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <menu+0x2438>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	f083 0301 	eor.w	r3, r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <menu+0x2460>)
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <menu+0x2440>)
 8003b08:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <menu+0x2444>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <menu+0x2448>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b15      	cmp	r3, #21
 8003b16:	f040 80c2 	bne.w	8003c9e <menu+0x259a>
		if(dilSecim == 0) {
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <menu+0x242c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d12c      	bne.n	8003b7c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003b22:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <menu+0x2474>)
 8003b24:	2101      	movs	r1, #1
 8003b26:	2001      	movs	r0, #1
 8003b28:	f7fc fd9e 	bl	8000668 <lcd_print>
 8003b2c:	e02f      	b.n	8003b8e <menu+0x248a>
 8003b2e:	bf00      	nop
 8003b30:	20000d51 	.word	0x20000d51
 8003b34:	0800ddec 	.word	0x0800ddec
 8003b38:	40010800 	.word	0x40010800
 8003b3c:	20000d5f 	.word	0x20000d5f
 8003b40:	20000d41 	.word	0x20000d41
 8003b44:	20000c38 	.word	0x20000c38
 8003b48:	20000d5c 	.word	0x20000d5c
 8003b4c:	20000d30 	.word	0x20000d30
 8003b50:	20000d3f 	.word	0x20000d3f
 8003b54:	0800e26c 	.word	0x0800e26c
 8003b58:	0800e280 	.word	0x0800e280
 8003b5c:	0800e294 	.word	0x0800e294
 8003b60:	0800e2a8 	.word	0x0800e2a8
 8003b64:	20000d42 	.word	0x20000d42
 8003b68:	0800e2bc 	.word	0x0800e2bc
 8003b6c:	0800e2d0 	.word	0x0800e2d0
 8003b70:	0800e2e0 	.word	0x0800e2e0
 8003b74:	0800e2f4 	.word	0x0800e2f4
 8003b78:	0800e304 	.word	0x0800e304
		} else if(dilSecim == 1) {
 8003b7c:	4b9c      	ldr	r3, [pc, #624]	; (8003df0 <menu+0x26ec>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d104      	bne.n	8003b8e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003b84:	4a9b      	ldr	r2, [pc, #620]	; (8003df4 <menu+0x26f0>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f7fc fd6d 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003b8e:	4b9a      	ldr	r3, [pc, #616]	; (8003df8 <menu+0x26f4>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d112      	bne.n	8003bbc <menu+0x24b8>
			if(dilSecim == 0) {
 8003b96:	4b96      	ldr	r3, [pc, #600]	; (8003df0 <menu+0x26ec>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003b9e:	4a97      	ldr	r2, [pc, #604]	; (8003dfc <menu+0x26f8>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	2002      	movs	r0, #2
 8003ba4:	f7fc fd60 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003ba8:	4b91      	ldr	r3, [pc, #580]	; (8003df0 <menu+0x26ec>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d11c      	bne.n	8003bea <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003bb0:	4a93      	ldr	r2, [pc, #588]	; (8003e00 <menu+0x26fc>)
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f7fc fd57 	bl	8000668 <lcd_print>
 8003bba:	e016      	b.n	8003bea <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003bbc:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <menu+0x26f4>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d112      	bne.n	8003bea <menu+0x24e6>
			if(dilSecim == 0) {
 8003bc4:	4b8a      	ldr	r3, [pc, #552]	; (8003df0 <menu+0x26ec>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003bcc:	4a8d      	ldr	r2, [pc, #564]	; (8003e04 <menu+0x2700>)
 8003bce:	2101      	movs	r1, #1
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	f7fc fd49 	bl	8000668 <lcd_print>
 8003bd6:	e008      	b.n	8003bea <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003bd8:	4b85      	ldr	r3, [pc, #532]	; (8003df0 <menu+0x26ec>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d104      	bne.n	8003bea <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003be0:	4a89      	ldr	r2, [pc, #548]	; (8003e08 <menu+0x2704>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	2002      	movs	r0, #2
 8003be6:	f7fc fd3f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bea:	2102      	movs	r1, #2
 8003bec:	4887      	ldr	r0, [pc, #540]	; (8003e0c <menu+0x2708>)
 8003bee:	f006 f8e3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d115      	bne.n	8003c24 <menu+0x2520>
 8003bf8:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <menu+0x270c>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	f083 0301 	eor.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <menu+0x26f4>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <menu+0x26f4>)
 8003c10:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003c12:	4b79      	ldr	r3, [pc, #484]	; (8003df8 <menu+0x26f4>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d902      	bls.n	8003c20 <menu+0x251c>
				platformSilindirTipi = 0;
 8003c1a:	4b77      	ldr	r3, [pc, #476]	; (8003df8 <menu+0x26f4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c20:	f002 fb28 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c24:	2104      	movs	r1, #4
 8003c26:	4879      	ldr	r0, [pc, #484]	; (8003e0c <menu+0x2708>)
 8003c28:	f006 f8c6 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d115      	bne.n	8003c5e <menu+0x255a>
 8003c32:	4b77      	ldr	r3, [pc, #476]	; (8003e10 <menu+0x270c>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003c40:	4b6d      	ldr	r3, [pc, #436]	; (8003df8 <menu+0x26f4>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	4b6b      	ldr	r3, [pc, #428]	; (8003df8 <menu+0x26f4>)
 8003c4a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	; (8003df8 <menu+0x26f4>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003c54:	4b68      	ldr	r3, [pc, #416]	; (8003df8 <menu+0x26f4>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c5a:	f002 fb0b 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5e:	2108      	movs	r1, #8
 8003c60:	486a      	ldr	r0, [pc, #424]	; (8003e0c <menu+0x2708>)
 8003c62:	f006 f8a9 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d118      	bne.n	8003c9e <menu+0x259a>
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <menu+0x270c>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003c7a:	4b5f      	ldr	r3, [pc, #380]	; (8003df8 <menu+0x26f4>)
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <menu+0x2710>)
 8003c80:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003c82:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <menu+0x26f4>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d106      	bne.n	8003c98 <menu+0x2594>
				altLimit = 1;
 8003c8a:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <menu+0x2714>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <menu+0x2714>)
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	4b5f      	ldr	r3, [pc, #380]	; (8003e14 <menu+0x2710>)
 8003c96:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003c98:	4b60      	ldr	r3, [pc, #384]	; (8003e1c <menu+0x2718>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003c9e:	4b60      	ldr	r3, [pc, #384]	; (8003e20 <menu+0x271c>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b16      	cmp	r3, #22
 8003ca4:	f040 8081 	bne.w	8003daa <menu+0x26a6>
		if(dilSecim == 0) {
 8003ca8:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <menu+0x26ec>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003cb0:	4a5c      	ldr	r2, [pc, #368]	; (8003e24 <menu+0x2720>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f7fc fcd7 	bl	8000668 <lcd_print>
 8003cba:	e008      	b.n	8003cce <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003cbc:	4b4c      	ldr	r3, [pc, #304]	; (8003df0 <menu+0x26ec>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d104      	bne.n	8003cce <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003cc4:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <menu+0x2724>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fc fccd 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003cce:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <menu+0x26ec>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cd6:	4a55      	ldr	r2, [pc, #340]	; (8003e2c <menu+0x2728>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	2002      	movs	r0, #2
 8003cdc:	f7fc fcc4 	bl	8000668 <lcd_print>
 8003ce0:	e008      	b.n	8003cf4 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003ce2:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <menu+0x26ec>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d104      	bne.n	8003cf4 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003cea:	4a51      	ldr	r2, [pc, #324]	; (8003e30 <menu+0x272c>)
 8003cec:	2101      	movs	r1, #1
 8003cee:	2002      	movs	r0, #2
 8003cf0:	f7fc fcba 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <menu+0x2730>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	220a      	movs	r2, #10
 8003cfa:	494f      	ldr	r1, [pc, #316]	; (8003e38 <menu+0x2734>)
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f009 f887 	bl	800ce10 <itoa>
		lcd_print(2,16,snum);
 8003d02:	4a4d      	ldr	r2, [pc, #308]	; (8003e38 <menu+0x2734>)
 8003d04:	2110      	movs	r1, #16
 8003d06:	2002      	movs	r0, #2
 8003d08:	f7fc fcae 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	483f      	ldr	r0, [pc, #252]	; (8003e0c <menu+0x2708>)
 8003d10:	f006 f852 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d115      	bne.n	8003d46 <menu+0x2642>
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <menu+0x270c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	f083 0301 	eor.w	r3, r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00e      	beq.n	8003d46 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003d28:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <menu+0x2730>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <menu+0x2730>)
 8003d32:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003d34:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <menu+0x2730>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d902      	bls.n	8003d42 <menu+0x263e>
				yukariValfTmr = 0;
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <menu+0x2730>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d42:	f002 fa97 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d46:	2104      	movs	r1, #4
 8003d48:	4830      	ldr	r0, [pc, #192]	; (8003e0c <menu+0x2708>)
 8003d4a:	f006 f835 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d115      	bne.n	8003d80 <menu+0x267c>
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <menu+0x270c>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f083 0301 	eor.w	r3, r3, #1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00e      	beq.n	8003d80 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <menu+0x2730>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <menu+0x2730>)
 8003d6c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <menu+0x2730>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d902      	bls.n	8003d7c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <menu+0x2730>)
 8003d78:	2205      	movs	r2, #5
 8003d7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d7c:	f002 fa7a 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d80:	2108      	movs	r1, #8
 8003d82:	4822      	ldr	r0, [pc, #136]	; (8003e0c <menu+0x2708>)
 8003d84:	f006 f818 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10d      	bne.n	8003daa <menu+0x26a6>
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <menu+0x270c>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	f083 0301 	eor.w	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <menu+0x2730>)
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <menu+0x2710>)
 8003da2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <menu+0x2718>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <menu+0x271c>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b17      	cmp	r3, #23
 8003db0:	f040 80ac 	bne.w	8003f0c <menu+0x2808>
		if(dilSecim == 0) {
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <menu+0x26ec>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <menu+0x2738>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7fc fc51 	bl	8000668 <lcd_print>
 8003dc6:	e008      	b.n	8003dda <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <menu+0x26ec>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d104      	bne.n	8003dda <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003dd0:	4a1b      	ldr	r2, [pc, #108]	; (8003e40 <menu+0x273c>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7fc fc47 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <menu+0x26ec>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d130      	bne.n	8003e44 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <menu+0x2728>)
 8003de4:	2101      	movs	r1, #1
 8003de6:	2002      	movs	r0, #2
 8003de8:	f7fc fc3e 	bl	8000668 <lcd_print>
 8003dec:	e033      	b.n	8003e56 <menu+0x2752>
 8003dee:	bf00      	nop
 8003df0:	20000d51 	.word	0x20000d51
 8003df4:	0800e318 	.word	0x0800e318
 8003df8:	20000d43 	.word	0x20000d43
 8003dfc:	0800e2bc 	.word	0x0800e2bc
 8003e00:	0800e2d0 	.word	0x0800e2d0
 8003e04:	0800e2e0 	.word	0x0800e2e0
 8003e08:	0800e2f4 	.word	0x0800e2f4
 8003e0c:	40010800 	.word	0x40010800
 8003e10:	20000d5f 	.word	0x20000d5f
 8003e14:	20000c38 	.word	0x20000c38
 8003e18:	20000d36 	.word	0x20000d36
 8003e1c:	20000d5c 	.word	0x20000d5c
 8003e20:	20000d30 	.word	0x20000d30
 8003e24:	0800e328 	.word	0x0800e328
 8003e28:	0800e33c 	.word	0x0800e33c
 8003e2c:	0800dfdc 	.word	0x0800dfdc
 8003e30:	0800e350 	.word	0x0800e350
 8003e34:	20000d44 	.word	0x20000d44
 8003e38:	20000ca8 	.word	0x20000ca8
 8003e3c:	0800e360 	.word	0x0800e360
 8003e40:	0800e374 	.word	0x0800e374
			} else if(dilSecim == 1) {
 8003e44:	4b98      	ldr	r3, [pc, #608]	; (80040a8 <menu+0x29a4>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d104      	bne.n	8003e56 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003e4c:	4a97      	ldr	r2, [pc, #604]	; (80040ac <menu+0x29a8>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	2002      	movs	r0, #2
 8003e52:	f7fc fc09 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003e56:	4b96      	ldr	r3, [pc, #600]	; (80040b0 <menu+0x29ac>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	220a      	movs	r2, #10
 8003e5c:	4995      	ldr	r1, [pc, #596]	; (80040b4 <menu+0x29b0>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f008 ffd6 	bl	800ce10 <itoa>
		lcd_print(2,16,snum);
 8003e64:	4a93      	ldr	r2, [pc, #588]	; (80040b4 <menu+0x29b0>)
 8003e66:	2110      	movs	r1, #16
 8003e68:	2002      	movs	r0, #2
 8003e6a:	f7fc fbfd 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4891      	ldr	r0, [pc, #580]	; (80040b8 <menu+0x29b4>)
 8003e72:	f005 ffa1 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d115      	bne.n	8003ea8 <menu+0x27a4>
 8003e7c:	4b8f      	ldr	r3, [pc, #572]	; (80040bc <menu+0x29b8>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	f083 0301 	eor.w	r3, r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00e      	beq.n	8003ea8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003e8a:	4b89      	ldr	r3, [pc, #548]	; (80040b0 <menu+0x29ac>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b87      	ldr	r3, [pc, #540]	; (80040b0 <menu+0x29ac>)
 8003e94:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003e96:	4b86      	ldr	r3, [pc, #536]	; (80040b0 <menu+0x29ac>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d902      	bls.n	8003ea4 <menu+0x27a0>
				asagiValfTmr = 0;
 8003e9e:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <menu+0x29ac>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ea4:	f002 f9e6 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	4883      	ldr	r0, [pc, #524]	; (80040b8 <menu+0x29b4>)
 8003eac:	f005 ff84 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d115      	bne.n	8003ee2 <menu+0x27de>
 8003eb6:	4b81      	ldr	r3, [pc, #516]	; (80040bc <menu+0x29b8>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	f083 0301 	eor.w	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003ec4:	4b7a      	ldr	r3, [pc, #488]	; (80040b0 <menu+0x29ac>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	4b78      	ldr	r3, [pc, #480]	; (80040b0 <menu+0x29ac>)
 8003ece:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003ed0:	4b77      	ldr	r3, [pc, #476]	; (80040b0 <menu+0x29ac>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d902      	bls.n	8003ede <menu+0x27da>
		   		asagiValfTmr = 5;
 8003ed8:	4b75      	ldr	r3, [pc, #468]	; (80040b0 <menu+0x29ac>)
 8003eda:	2205      	movs	r2, #5
 8003edc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ede:	f002 f9c9 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee2:	2108      	movs	r1, #8
 8003ee4:	4874      	ldr	r0, [pc, #464]	; (80040b8 <menu+0x29b4>)
 8003ee6:	f005 ff67 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10d      	bne.n	8003f0c <menu+0x2808>
 8003ef0:	4b72      	ldr	r3, [pc, #456]	; (80040bc <menu+0x29b8>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f083 0301 	eor.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003efe:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <menu+0x29ac>)
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	4b6f      	ldr	r3, [pc, #444]	; (80040c0 <menu+0x29bc>)
 8003f04:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003f06:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <menu+0x29c0>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003f0c:	4b6e      	ldr	r3, [pc, #440]	; (80040c8 <menu+0x29c4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b18      	cmp	r3, #24
 8003f12:	f040 809d 	bne.w	8004050 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <menu+0x29c8>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d113      	bne.n	8003f46 <menu+0x2842>
			if(dilSecim == 0) {
 8003f1e:	4b62      	ldr	r3, [pc, #392]	; (80040a8 <menu+0x29a4>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003f26:	4a6a      	ldr	r2, [pc, #424]	; (80040d0 <menu+0x29cc>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f7fc fb9c 	bl	8000668 <lcd_print>
 8003f30:	e020      	b.n	8003f74 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <menu+0x29a4>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d11c      	bne.n	8003f74 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003f3a:	4a66      	ldr	r2, [pc, #408]	; (80040d4 <menu+0x29d0>)
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	2001      	movs	r0, #1
 8003f40:	f7fc fb92 	bl	8000668 <lcd_print>
 8003f44:	e016      	b.n	8003f74 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f46:	4b61      	ldr	r3, [pc, #388]	; (80040cc <menu+0x29c8>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d112      	bne.n	8003f74 <menu+0x2870>
			if(dilSecim == 0) {
 8003f4e:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <menu+0x29a4>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003f56:	4a60      	ldr	r2, [pc, #384]	; (80040d8 <menu+0x29d4>)
 8003f58:	2101      	movs	r1, #1
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fc fb84 	bl	8000668 <lcd_print>
 8003f60:	e008      	b.n	8003f74 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003f62:	4b51      	ldr	r3, [pc, #324]	; (80040a8 <menu+0x29a4>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d104      	bne.n	8003f74 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003f6a:	4a5c      	ldr	r2, [pc, #368]	; (80040dc <menu+0x29d8>)
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7fc fb7a 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003f74:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <menu+0x29a4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f7c:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <menu+0x29dc>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	2002      	movs	r0, #2
 8003f82:	f7fc fb71 	bl	8000668 <lcd_print>
 8003f86:	e008      	b.n	8003f9a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003f88:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <menu+0x29a4>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d104      	bne.n	8003f9a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003f90:	4a46      	ldr	r2, [pc, #280]	; (80040ac <menu+0x29a8>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	2002      	movs	r0, #2
 8003f96:	f7fc fb67 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003f9a:	4b52      	ldr	r3, [pc, #328]	; (80040e4 <menu+0x29e0>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	220a      	movs	r2, #10
 8003fa0:	4944      	ldr	r1, [pc, #272]	; (80040b4 <menu+0x29b0>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f008 ff34 	bl	800ce10 <itoa>
		lcd_print(2, 16, snum);
 8003fa8:	4a42      	ldr	r2, [pc, #264]	; (80040b4 <menu+0x29b0>)
 8003faa:	2110      	movs	r1, #16
 8003fac:	2002      	movs	r0, #2
 8003fae:	f7fc fb5b 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4840      	ldr	r0, [pc, #256]	; (80040b8 <menu+0x29b4>)
 8003fb6:	f005 feff 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d115      	bne.n	8003fec <menu+0x28e8>
 8003fc0:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <menu+0x29b8>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003fce:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <menu+0x29e0>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <menu+0x29e0>)
 8003fd8:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003fda:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <menu+0x29e0>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d902      	bls.n	8003fe8 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003fe2:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <menu+0x29e0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fe8:	f002 f944 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fec:	2104      	movs	r1, #4
 8003fee:	4832      	ldr	r0, [pc, #200]	; (80040b8 <menu+0x29b4>)
 8003ff0:	f005 fee2 	bl	8009db8 <HAL_GPIO_ReadPin>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d115      	bne.n	8004026 <menu+0x2922>
 8003ffa:	4b30      	ldr	r3, [pc, #192]	; (80040bc <menu+0x29b8>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	f083 0301 	eor.w	r3, r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <menu+0x29e0>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <menu+0x29e0>)
 8004012:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004014:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <menu+0x29e0>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d902      	bls.n	8004022 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 800401c:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <menu+0x29e0>)
 800401e:	2205      	movs	r2, #5
 8004020:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004022:	f002 f927 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004026:	2108      	movs	r1, #8
 8004028:	4823      	ldr	r0, [pc, #140]	; (80040b8 <menu+0x29b4>)
 800402a:	f005 fec5 	bl	8009db8 <HAL_GPIO_ReadPin>
 800402e:	4603      	mov	r3, r0
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10d      	bne.n	8004050 <menu+0x294c>
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <menu+0x29b8>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	f083 0301 	eor.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <menu+0x29e0>)
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <menu+0x29bc>)
 8004048:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <menu+0x29c0>)
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <menu+0x29c4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b19      	cmp	r3, #25
 8004056:	f040 80c4 	bne.w	80041e2 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <menu+0x29c8>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d113      	bne.n	800408a <menu+0x2986>
			if(dilSecim == 0) {
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <menu+0x29a4>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800406a:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <menu+0x29e4>)
 800406c:	2101      	movs	r1, #1
 800406e:	2001      	movs	r0, #1
 8004070:	f7fc fafa 	bl	8000668 <lcd_print>
 8004074:	e047      	b.n	8004106 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <menu+0x29a4>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d143      	bne.n	8004106 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <menu+0x29e8>)
 8004080:	2101      	movs	r1, #1
 8004082:	2001      	movs	r0, #1
 8004084:	f7fc faf0 	bl	8000668 <lcd_print>
 8004088:	e03d      	b.n	8004106 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <menu+0x29c8>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d139      	bne.n	8004106 <menu+0x2a02>
			if(dilSecim == 0) {
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <menu+0x29a4>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d12c      	bne.n	80040f4 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 800409a:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <menu+0x29ec>)
 800409c:	2101      	movs	r1, #1
 800409e:	2001      	movs	r0, #1
 80040a0:	f7fc fae2 	bl	8000668 <lcd_print>
 80040a4:	e02f      	b.n	8004106 <menu+0x2a02>
 80040a6:	bf00      	nop
 80040a8:	20000d51 	.word	0x20000d51
 80040ac:	0800e350 	.word	0x0800e350
 80040b0:	20000d45 	.word	0x20000d45
 80040b4:	20000ca8 	.word	0x20000ca8
 80040b8:	40010800 	.word	0x40010800
 80040bc:	20000d5f 	.word	0x20000d5f
 80040c0:	20000c38 	.word	0x20000c38
 80040c4:	20000d5c 	.word	0x20000d5c
 80040c8:	20000d30 	.word	0x20000d30
 80040cc:	20000d3f 	.word	0x20000d3f
 80040d0:	0800e388 	.word	0x0800e388
 80040d4:	0800e39c 	.word	0x0800e39c
 80040d8:	0800e3b0 	.word	0x0800e3b0
 80040dc:	0800e3c4 	.word	0x0800e3c4
 80040e0:	0800dfdc 	.word	0x0800dfdc
 80040e4:	20000d46 	.word	0x20000d46
 80040e8:	0800e3d8 	.word	0x0800e3d8
 80040ec:	0800e3ec 	.word	0x0800e3ec
 80040f0:	0800e400 	.word	0x0800e400
			} else if(dilSecim == 1) {
 80040f4:	4b73      	ldr	r3, [pc, #460]	; (80042c4 <menu+0x2bc0>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d104      	bne.n	8004106 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80040fc:	4a72      	ldr	r2, [pc, #456]	; (80042c8 <menu+0x2bc4>)
 80040fe:	2101      	movs	r1, #1
 8004100:	2001      	movs	r0, #1
 8004102:	f7fc fab1 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8004106:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <menu+0x2bc0>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 800410e:	4a6f      	ldr	r2, [pc, #444]	; (80042cc <menu+0x2bc8>)
 8004110:	2101      	movs	r1, #1
 8004112:	2002      	movs	r0, #2
 8004114:	f7fc faa8 	bl	8000668 <lcd_print>
 8004118:	e008      	b.n	800412c <menu+0x2a28>
			} else if(dilSecim == 1) {
 800411a:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <menu+0x2bc0>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d104      	bne.n	800412c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8004122:	4a6b      	ldr	r2, [pc, #428]	; (80042d0 <menu+0x2bcc>)
 8004124:	2101      	movs	r1, #1
 8004126:	2002      	movs	r0, #2
 8004128:	f7fc fa9e 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800412c:	4b69      	ldr	r3, [pc, #420]	; (80042d4 <menu+0x2bd0>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	220a      	movs	r2, #10
 8004132:	4969      	ldr	r1, [pc, #420]	; (80042d8 <menu+0x2bd4>)
 8004134:	4618      	mov	r0, r3
 8004136:	f008 fe6b 	bl	800ce10 <itoa>
		lcd_print(2,16,snum);
 800413a:	4a67      	ldr	r2, [pc, #412]	; (80042d8 <menu+0x2bd4>)
 800413c:	2110      	movs	r1, #16
 800413e:	2002      	movs	r0, #2
 8004140:	f7fc fa92 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004144:	2102      	movs	r1, #2
 8004146:	4865      	ldr	r0, [pc, #404]	; (80042dc <menu+0x2bd8>)
 8004148:	f005 fe36 	bl	8009db8 <HAL_GPIO_ReadPin>
 800414c:	4603      	mov	r3, r0
 800414e:	2b01      	cmp	r3, #1
 8004150:	d115      	bne.n	800417e <menu+0x2a7a>
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <menu+0x2bdc>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	f083 0301 	eor.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004160:	4b5c      	ldr	r3, [pc, #368]	; (80042d4 <menu+0x2bd0>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b5a      	ldr	r3, [pc, #360]	; (80042d4 <menu+0x2bd0>)
 800416a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <menu+0x2bd0>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d902      	bls.n	800417a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <menu+0x2bd0>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800417a:	f002 f87b 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800417e:	2104      	movs	r1, #4
 8004180:	4856      	ldr	r0, [pc, #344]	; (80042dc <menu+0x2bd8>)
 8004182:	f005 fe19 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d115      	bne.n	80041b8 <menu+0x2ab4>
 800418c:	4b54      	ldr	r3, [pc, #336]	; (80042e0 <menu+0x2bdc>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f083 0301 	eor.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00e      	beq.n	80041b8 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800419a:	4b4e      	ldr	r3, [pc, #312]	; (80042d4 <menu+0x2bd0>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	3b01      	subs	r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <menu+0x2bd0>)
 80041a4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <menu+0x2bd0>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <menu+0x2bd0>)
 80041b0:	2205      	movs	r2, #5
 80041b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041b4:	f002 f85e 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041b8:	2108      	movs	r1, #8
 80041ba:	4848      	ldr	r0, [pc, #288]	; (80042dc <menu+0x2bd8>)
 80041bc:	f005 fdfc 	bl	8009db8 <HAL_GPIO_ReadPin>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10d      	bne.n	80041e2 <menu+0x2ade>
 80041c6:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <menu+0x2bdc>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f083 0301 	eor.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 80041d4:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <menu+0x2bd0>)
 80041d6:	781a      	ldrb	r2, [r3, #0]
 80041d8:	4b42      	ldr	r3, [pc, #264]	; (80042e4 <menu+0x2be0>)
 80041da:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80041dc:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <menu+0x2be4>)
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80041e2:	4b42      	ldr	r3, [pc, #264]	; (80042ec <menu+0x2be8>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b1a      	cmp	r3, #26
 80041e8:	f040 80ec 	bne.w	80043c4 <menu+0x2cc0>
		if(dilSecim == 0) {
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <menu+0x2bc0>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80041f4:	4a3e      	ldr	r2, [pc, #248]	; (80042f0 <menu+0x2bec>)
 80041f6:	2101      	movs	r1, #1
 80041f8:	2001      	movs	r0, #1
 80041fa:	f7fc fa35 	bl	8000668 <lcd_print>
 80041fe:	e008      	b.n	8004212 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <menu+0x2bc0>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d104      	bne.n	8004212 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8004208:	4a3a      	ldr	r2, [pc, #232]	; (80042f4 <menu+0x2bf0>)
 800420a:	2101      	movs	r1, #1
 800420c:	2001      	movs	r0, #1
 800420e:	f7fc fa2b 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <menu+0x2bf4>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b63      	cmp	r3, #99	; 0x63
 8004218:	d91e      	bls.n	8004258 <menu+0x2b54>
			if(dilSecim == 0) {
 800421a:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <menu+0x2bc0>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8004222:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <menu+0x2bc8>)
 8004224:	2101      	movs	r1, #1
 8004226:	2002      	movs	r0, #2
 8004228:	f7fc fa1e 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <menu+0x2bc0>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d104      	bne.n	800423e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <menu+0x2bcc>)
 8004236:	2101      	movs	r1, #1
 8004238:	2002      	movs	r0, #2
 800423a:	f7fc fa15 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800423e:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <menu+0x2bf4>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	220a      	movs	r2, #10
 8004244:	4924      	ldr	r1, [pc, #144]	; (80042d8 <menu+0x2bd4>)
 8004246:	4618      	mov	r0, r3
 8004248:	f008 fde2 	bl	800ce10 <itoa>
			lcd_print(2,14,snum);
 800424c:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <menu+0x2bd4>)
 800424e:	210e      	movs	r1, #14
 8004250:	2002      	movs	r0, #2
 8004252:	f7fc fa09 	bl	8000668 <lcd_print>
 8004256:	e066      	b.n	8004326 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <menu+0x2bf4>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b09      	cmp	r3, #9
 800425e:	d923      	bls.n	80042a8 <menu+0x2ba4>
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <menu+0x2bf4>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b63      	cmp	r3, #99	; 0x63
 8004266:	d81f      	bhi.n	80042a8 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <menu+0x2bc0>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8004270:	4a16      	ldr	r2, [pc, #88]	; (80042cc <menu+0x2bc8>)
 8004272:	2101      	movs	r1, #1
 8004274:	2002      	movs	r0, #2
 8004276:	f7fc f9f7 	bl	8000668 <lcd_print>
 800427a:	e008      	b.n	800428e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <menu+0x2bc0>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d104      	bne.n	800428e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004284:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <menu+0x2bcc>)
 8004286:	2101      	movs	r1, #1
 8004288:	2002      	movs	r0, #2
 800428a:	f7fc f9ed 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <menu+0x2bf4>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	220a      	movs	r2, #10
 8004294:	4910      	ldr	r1, [pc, #64]	; (80042d8 <menu+0x2bd4>)
 8004296:	4618      	mov	r0, r3
 8004298:	f008 fdba 	bl	800ce10 <itoa>
			lcd_print(2, 15, snum);
 800429c:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <menu+0x2bd4>)
 800429e:	210f      	movs	r1, #15
 80042a0:	2002      	movs	r0, #2
 80042a2:	f7fc f9e1 	bl	8000668 <lcd_print>
 80042a6:	e03e      	b.n	8004326 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <menu+0x2bf4>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b09      	cmp	r3, #9
 80042ae:	d83a      	bhi.n	8004326 <menu+0x2c22>
			if(dilSecim == 0) {
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <menu+0x2bc0>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d121      	bne.n	80042fc <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <menu+0x2bc8>)
 80042ba:	2101      	movs	r1, #1
 80042bc:	2002      	movs	r0, #2
 80042be:	f7fc f9d3 	bl	8000668 <lcd_print>
 80042c2:	e024      	b.n	800430e <menu+0x2c0a>
 80042c4:	20000d51 	.word	0x20000d51
 80042c8:	0800e414 	.word	0x0800e414
 80042cc:	0800dfdc 	.word	0x0800dfdc
 80042d0:	0800e350 	.word	0x0800e350
 80042d4:	20000d47 	.word	0x20000d47
 80042d8:	20000ca8 	.word	0x20000ca8
 80042dc:	40010800 	.word	0x40010800
 80042e0:	20000d5f 	.word	0x20000d5f
 80042e4:	20000c38 	.word	0x20000c38
 80042e8:	20000d5c 	.word	0x20000d5c
 80042ec:	20000d30 	.word	0x20000d30
 80042f0:	0800e428 	.word	0x0800e428
 80042f4:	0800e43c 	.word	0x0800e43c
 80042f8:	20000d48 	.word	0x20000d48
			} else if(dilSecim == 1) {
 80042fc:	4b8f      	ldr	r3, [pc, #572]	; (800453c <menu+0x2e38>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d104      	bne.n	800430e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004304:	4a8e      	ldr	r2, [pc, #568]	; (8004540 <menu+0x2e3c>)
 8004306:	2101      	movs	r1, #1
 8004308:	2002      	movs	r0, #2
 800430a:	f7fc f9ad 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800430e:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <menu+0x2e40>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	220a      	movs	r2, #10
 8004314:	498c      	ldr	r1, [pc, #560]	; (8004548 <menu+0x2e44>)
 8004316:	4618      	mov	r0, r3
 8004318:	f008 fd7a 	bl	800ce10 <itoa>
			lcd_print(2, 16, snum);
 800431c:	4a8a      	ldr	r2, [pc, #552]	; (8004548 <menu+0x2e44>)
 800431e:	2110      	movs	r1, #16
 8004320:	2002      	movs	r0, #2
 8004322:	f7fc f9a1 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004326:	2102      	movs	r1, #2
 8004328:	4888      	ldr	r0, [pc, #544]	; (800454c <menu+0x2e48>)
 800432a:	f005 fd45 	bl	8009db8 <HAL_GPIO_ReadPin>
 800432e:	4603      	mov	r3, r0
 8004330:	2b01      	cmp	r3, #1
 8004332:	d115      	bne.n	8004360 <menu+0x2c5c>
 8004334:	4b86      	ldr	r3, [pc, #536]	; (8004550 <menu+0x2e4c>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	f083 0301 	eor.w	r3, r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00e      	beq.n	8004360 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004342:	4b80      	ldr	r3, [pc, #512]	; (8004544 <menu+0x2e40>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b7e      	ldr	r3, [pc, #504]	; (8004544 <menu+0x2e40>)
 800434c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <menu+0x2e40>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2bb4      	cmp	r3, #180	; 0xb4
 8004354:	d902      	bls.n	800435c <menu+0x2c58>
				makineCalismaTmr = 0;
 8004356:	4b7b      	ldr	r3, [pc, #492]	; (8004544 <menu+0x2e40>)
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800435c:	f001 ff8a 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004360:	2104      	movs	r1, #4
 8004362:	487a      	ldr	r0, [pc, #488]	; (800454c <menu+0x2e48>)
 8004364:	f005 fd28 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d115      	bne.n	800439a <menu+0x2c96>
 800436e:	4b78      	ldr	r3, [pc, #480]	; (8004550 <menu+0x2e4c>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 800437c:	4b71      	ldr	r3, [pc, #452]	; (8004544 <menu+0x2e40>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <menu+0x2e40>)
 8004386:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004388:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <menu+0x2e40>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2bb5      	cmp	r3, #181	; 0xb5
 800438e:	d902      	bls.n	8004396 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004390:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <menu+0x2e40>)
 8004392:	22b4      	movs	r2, #180	; 0xb4
 8004394:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004396:	f001 ff6d 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800439a:	2108      	movs	r1, #8
 800439c:	486b      	ldr	r0, [pc, #428]	; (800454c <menu+0x2e48>)
 800439e:	f005 fd0b 	bl	8009db8 <HAL_GPIO_ReadPin>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10d      	bne.n	80043c4 <menu+0x2cc0>
 80043a8:	4b69      	ldr	r3, [pc, #420]	; (8004550 <menu+0x2e4c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f083 0301 	eor.w	r3, r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80043b6:	4b63      	ldr	r3, [pc, #396]	; (8004544 <menu+0x2e40>)
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	4b66      	ldr	r3, [pc, #408]	; (8004554 <menu+0x2e50>)
 80043bc:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80043be:	4b66      	ldr	r3, [pc, #408]	; (8004558 <menu+0x2e54>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80043c4:	4b65      	ldr	r3, [pc, #404]	; (800455c <menu+0x2e58>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b1b      	cmp	r3, #27
 80043ca:	f040 8083 	bne.w	80044d4 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80043ce:	4a64      	ldr	r2, [pc, #400]	; (8004560 <menu+0x2e5c>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	2001      	movs	r0, #1
 80043d4:	f7fc f948 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 80043d8:	4b62      	ldr	r3, [pc, #392]	; (8004564 <menu+0x2e60>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d113      	bne.n	8004408 <menu+0x2d04>
			if(dilSecim == 0) {
 80043e0:	4b56      	ldr	r3, [pc, #344]	; (800453c <menu+0x2e38>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80043e8:	4a5f      	ldr	r2, [pc, #380]	; (8004568 <menu+0x2e64>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	2002      	movs	r0, #2
 80043ee:	f7fc f93b 	bl	8000668 <lcd_print>
 80043f2:	e020      	b.n	8004436 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <menu+0x2e38>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d11c      	bne.n	8004436 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80043fc:	4a5b      	ldr	r2, [pc, #364]	; (800456c <menu+0x2e68>)
 80043fe:	2101      	movs	r1, #1
 8004400:	2002      	movs	r0, #2
 8004402:	f7fc f931 	bl	8000668 <lcd_print>
 8004406:	e016      	b.n	8004436 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004408:	4b56      	ldr	r3, [pc, #344]	; (8004564 <menu+0x2e60>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d112      	bne.n	8004436 <menu+0x2d32>
			if(dilSecim == 0) {
 8004410:	4b4a      	ldr	r3, [pc, #296]	; (800453c <menu+0x2e38>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004418:	4a55      	ldr	r2, [pc, #340]	; (8004570 <menu+0x2e6c>)
 800441a:	2101      	movs	r1, #1
 800441c:	2002      	movs	r0, #2
 800441e:	f7fc f923 	bl	8000668 <lcd_print>
 8004422:	e008      	b.n	8004436 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004424:	4b45      	ldr	r3, [pc, #276]	; (800453c <menu+0x2e38>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d104      	bne.n	8004436 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800442c:	4a51      	ldr	r2, [pc, #324]	; (8004574 <menu+0x2e70>)
 800442e:	2101      	movs	r1, #1
 8004430:	2002      	movs	r0, #2
 8004432:	f7fc f919 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004436:	2102      	movs	r1, #2
 8004438:	4844      	ldr	r0, [pc, #272]	; (800454c <menu+0x2e48>)
 800443a:	f005 fcbd 	bl	8009db8 <HAL_GPIO_ReadPin>
 800443e:	4603      	mov	r3, r0
 8004440:	2b01      	cmp	r3, #1
 8004442:	d115      	bne.n	8004470 <menu+0x2d6c>
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <menu+0x2e4c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f083 0301 	eor.w	r3, r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <menu+0x2e60>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <menu+0x2e60>)
 800445c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <menu+0x2e60>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d902      	bls.n	800446c <menu+0x2d68>
				buzzer = 0;
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <menu+0x2e60>)
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800446c:	f001 ff02 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004470:	2104      	movs	r1, #4
 8004472:	4836      	ldr	r0, [pc, #216]	; (800454c <menu+0x2e48>)
 8004474:	f005 fca0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d115      	bne.n	80044aa <menu+0x2da6>
 800447e:	4b34      	ldr	r3, [pc, #208]	; (8004550 <menu+0x2e4c>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <menu+0x2da6>
			buzzer = buzzer - 1;
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <menu+0x2e60>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <menu+0x2e60>)
 8004496:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <menu+0x2e60>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <menu+0x2da2>
		   		buzzer = 1;
 80044a0:	4b30      	ldr	r3, [pc, #192]	; (8004564 <menu+0x2e60>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044a6:	f001 fee5 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044aa:	2108      	movs	r1, #8
 80044ac:	4827      	ldr	r0, [pc, #156]	; (800454c <menu+0x2e48>)
 80044ae:	f005 fc83 	bl	8009db8 <HAL_GPIO_ReadPin>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d10d      	bne.n	80044d4 <menu+0x2dd0>
 80044b8:	4b25      	ldr	r3, [pc, #148]	; (8004550 <menu+0x2e4c>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f083 0301 	eor.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d006      	beq.n	80044d4 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80044c6:	4b27      	ldr	r3, [pc, #156]	; (8004564 <menu+0x2e60>)
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <menu+0x2e50>)
 80044cc:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <menu+0x2e54>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <menu+0x2e58>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b1c      	cmp	r3, #28
 80044da:	f040 80ab 	bne.w	8004634 <menu+0x2f30>
		calismaSayModu = 0;
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <menu+0x2e74>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80044e4:	4a25      	ldr	r2, [pc, #148]	; (800457c <menu+0x2e78>)
 80044e6:	2101      	movs	r1, #1
 80044e8:	2001      	movs	r0, #1
 80044ea:	f7fc f8bd 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <menu+0x2e7c>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d113      	bne.n	800451e <menu+0x2e1a>
			if(dilSecim == 0) {
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <menu+0x2e38>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <menu+0x2e64>)
 8004500:	2101      	movs	r1, #1
 8004502:	2002      	movs	r0, #2
 8004504:	f7fc f8b0 	bl	8000668 <lcd_print>
 8004508:	e045      	b.n	8004596 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <menu+0x2e38>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d141      	bne.n	8004596 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <menu+0x2e68>)
 8004514:	2101      	movs	r1, #1
 8004516:	2002      	movs	r0, #2
 8004518:	f7fc f8a6 	bl	8000668 <lcd_print>
 800451c:	e03b      	b.n	8004596 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <menu+0x2e7c>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d137      	bne.n	8004596 <menu+0x2e92>
			if(dilSecim == 0){
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <menu+0x2e38>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d12a      	bne.n	8004584 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <menu+0x2e6c>)
 8004530:	2101      	movs	r1, #1
 8004532:	2002      	movs	r0, #2
 8004534:	f7fc f898 	bl	8000668 <lcd_print>
 8004538:	e02d      	b.n	8004596 <menu+0x2e92>
 800453a:	bf00      	nop
 800453c:	20000d51 	.word	0x20000d51
 8004540:	0800e350 	.word	0x0800e350
 8004544:	20000d48 	.word	0x20000d48
 8004548:	20000ca8 	.word	0x20000ca8
 800454c:	40010800 	.word	0x40010800
 8004550:	20000d5f 	.word	0x20000d5f
 8004554:	20000c38 	.word	0x20000c38
 8004558:	20000d5c 	.word	0x20000d5c
 800455c:	20000d30 	.word	0x20000d30
 8004560:	0800e450 	.word	0x0800e450
 8004564:	20000d4c 	.word	0x20000d4c
 8004568:	0800dd78 	.word	0x0800dd78
 800456c:	0800dd8c 	.word	0x0800dd8c
 8004570:	0800ddd8 	.word	0x0800ddd8
 8004574:	0800ddec 	.word	0x0800ddec
 8004578:	20000d50 	.word	0x20000d50
 800457c:	0800e464 	.word	0x0800e464
 8004580:	20000d4e 	.word	0x20000d4e
			} else if(dilSecim == 1) {
 8004584:	4b71      	ldr	r3, [pc, #452]	; (800474c <menu+0x3048>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d104      	bne.n	8004596 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 800458c:	4a70      	ldr	r2, [pc, #448]	; (8004750 <menu+0x304c>)
 800458e:	2101      	movs	r1, #1
 8004590:	2002      	movs	r0, #2
 8004592:	f7fc f869 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004596:	2102      	movs	r1, #2
 8004598:	486e      	ldr	r0, [pc, #440]	; (8004754 <menu+0x3050>)
 800459a:	f005 fc0d 	bl	8009db8 <HAL_GPIO_ReadPin>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d115      	bne.n	80045d0 <menu+0x2ecc>
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <menu+0x3054>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f083 0301 	eor.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <menu+0x3058>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b68      	ldr	r3, [pc, #416]	; (800475c <menu+0x3058>)
 80045bc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80045be:	4b67      	ldr	r3, [pc, #412]	; (800475c <menu+0x3058>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d902      	bls.n	80045cc <menu+0x2ec8>
				demoMode = 0;
 80045c6:	4b65      	ldr	r3, [pc, #404]	; (800475c <menu+0x3058>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045cc:	f001 fe52 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d0:	2104      	movs	r1, #4
 80045d2:	4860      	ldr	r0, [pc, #384]	; (8004754 <menu+0x3050>)
 80045d4:	f005 fbf0 	bl	8009db8 <HAL_GPIO_ReadPin>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d115      	bne.n	800460a <menu+0x2f06>
 80045de:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <menu+0x3054>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f083 0301 	eor.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <menu+0x2f06>
			demoMode = demoMode - 1;
 80045ec:	4b5b      	ldr	r3, [pc, #364]	; (800475c <menu+0x3058>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <menu+0x3058>)
 80045f6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80045f8:	4b58      	ldr	r3, [pc, #352]	; (800475c <menu+0x3058>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <menu+0x2f02>
		   		demoMode = 1;
 8004600:	4b56      	ldr	r3, [pc, #344]	; (800475c <menu+0x3058>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004606:	f001 fe35 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800460a:	2108      	movs	r1, #8
 800460c:	4851      	ldr	r0, [pc, #324]	; (8004754 <menu+0x3050>)
 800460e:	f005 fbd3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10d      	bne.n	8004634 <menu+0x2f30>
 8004618:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <menu+0x3054>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004626:	4b4d      	ldr	r3, [pc, #308]	; (800475c <menu+0x3058>)
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <menu+0x305c>)
 800462c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800462e:	4b4d      	ldr	r3, [pc, #308]	; (8004764 <menu+0x3060>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004634:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <menu+0x3064>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b1d      	cmp	r3, #29
 800463a:	f040 8132 	bne.w	80048a2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800463e:	4b4b      	ldr	r3, [pc, #300]	; (800476c <menu+0x3068>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d113      	bne.n	800466e <menu+0x2f6a>
 8004646:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <menu+0x306c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <menu+0x2f6a>
 800464e:	4b49      	ldr	r3, [pc, #292]	; (8004774 <menu+0x3070>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <menu+0x2f6a>
 8004656:	4b48      	ldr	r3, [pc, #288]	; (8004778 <menu+0x3074>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <menu+0x2f6a>
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <menu+0x3078>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004666:	4b46      	ldr	r3, [pc, #280]	; (8004780 <menu+0x307c>)
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e002      	b.n	8004674 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <menu+0x307c>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004674:	4b43      	ldr	r3, [pc, #268]	; (8004784 <menu+0x3080>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d154      	bne.n	8004726 <menu+0x3022>
			if(dilSecim == 0) {
 800467c:	4b33      	ldr	r3, [pc, #204]	; (800474c <menu+0x3048>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004684:	4a40      	ldr	r2, [pc, #256]	; (8004788 <menu+0x3084>)
 8004686:	2101      	movs	r1, #1
 8004688:	2001      	movs	r0, #1
 800468a:	f7fb ffed 	bl	8000668 <lcd_print>
 800468e:	e008      	b.n	80046a2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <menu+0x3048>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d104      	bne.n	80046a2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004698:	4a3c      	ldr	r2, [pc, #240]	; (800478c <menu+0x3088>)
 800469a:	2101      	movs	r1, #1
 800469c:	2001      	movs	r0, #1
 800469e:	f7fb ffe3 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <menu+0x3078>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	220a      	movs	r2, #10
 80046a8:	4939      	ldr	r1, [pc, #228]	; (8004790 <menu+0x308c>)
 80046aa:	4618      	mov	r0, r3
 80046ac:	f008 fbb0 	bl	800ce10 <itoa>
			lcd_print(2, 12, snum);
 80046b0:	4a37      	ldr	r2, [pc, #220]	; (8004790 <menu+0x308c>)
 80046b2:	210c      	movs	r1, #12
 80046b4:	2002      	movs	r0, #2
 80046b6:	f7fb ffd7 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <menu+0x3074>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	220a      	movs	r2, #10
 80046c0:	4933      	ldr	r1, [pc, #204]	; (8004790 <menu+0x308c>)
 80046c2:	4618      	mov	r0, r3
 80046c4:	f008 fba4 	bl	800ce10 <itoa>
			lcd_print(2, 13, snum);
 80046c8:	4a31      	ldr	r2, [pc, #196]	; (8004790 <menu+0x308c>)
 80046ca:	210d      	movs	r1, #13
 80046cc:	2002      	movs	r0, #2
 80046ce:	f7fb ffcb 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <menu+0x3070>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	220a      	movs	r2, #10
 80046d8:	492d      	ldr	r1, [pc, #180]	; (8004790 <menu+0x308c>)
 80046da:	4618      	mov	r0, r3
 80046dc:	f008 fb98 	bl	800ce10 <itoa>
			lcd_print(2, 14, snum);
 80046e0:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <menu+0x308c>)
 80046e2:	210e      	movs	r1, #14
 80046e4:	2002      	movs	r0, #2
 80046e6:	f7fb ffbf 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80046ea:	4b21      	ldr	r3, [pc, #132]	; (8004770 <menu+0x306c>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	220a      	movs	r2, #10
 80046f0:	4927      	ldr	r1, [pc, #156]	; (8004790 <menu+0x308c>)
 80046f2:	4618      	mov	r0, r3
 80046f4:	f008 fb8c 	bl	800ce10 <itoa>
			lcd_print(2, 15, snum);
 80046f8:	4a25      	ldr	r2, [pc, #148]	; (8004790 <menu+0x308c>)
 80046fa:	210f      	movs	r1, #15
 80046fc:	2002      	movs	r0, #2
 80046fe:	f7fb ffb3 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <menu+0x3068>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	220a      	movs	r2, #10
 8004708:	4921      	ldr	r1, [pc, #132]	; (8004790 <menu+0x308c>)
 800470a:	4618      	mov	r0, r3
 800470c:	f008 fb80 	bl	800ce10 <itoa>
			lcd_print(2, 16, snum);
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <menu+0x308c>)
 8004712:	2110      	movs	r1, #16
 8004714:	2002      	movs	r0, #2
 8004716:	f7fb ffa7 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <menu+0x3090>)
 800471c:	2101      	movs	r1, #1
 800471e:	2002      	movs	r0, #2
 8004720:	f7fb ffa2 	bl	8000668 <lcd_print>
 8004724:	e048      	b.n	80047b8 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <menu+0x3080>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d144      	bne.n	80047b8 <menu+0x30b4>
			if(dilSecim == 0) {
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <menu+0x3048>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d132      	bne.n	800479c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <menu+0x3084>)
 8004738:	2101      	movs	r1, #1
 800473a:	2001      	movs	r0, #1
 800473c:	f7fb ff94 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <menu+0x3094>)
 8004742:	2101      	movs	r1, #1
 8004744:	2002      	movs	r0, #2
 8004746:	f7fb ff8f 	bl	8000668 <lcd_print>
 800474a:	e035      	b.n	80047b8 <menu+0x30b4>
 800474c:	20000d51 	.word	0x20000d51
 8004750:	0800ddec 	.word	0x0800ddec
 8004754:	40010800 	.word	0x40010800
 8004758:	20000d5f 	.word	0x20000d5f
 800475c:	20000d4e 	.word	0x20000d4e
 8004760:	20000c38 	.word	0x20000c38
 8004764:	20000d5c 	.word	0x20000d5c
 8004768:	20000d30 	.word	0x20000d30
 800476c:	20000d2d 	.word	0x20000d2d
 8004770:	20000d2e 	.word	0x20000d2e
 8004774:	200009b4 	.word	0x200009b4
 8004778:	200009b5 	.word	0x200009b5
 800477c:	20000d2f 	.word	0x20000d2f
 8004780:	20000d71 	.word	0x20000d71
 8004784:	20000d50 	.word	0x20000d50
 8004788:	0800e474 	.word	0x0800e474
 800478c:	0800e488 	.word	0x0800e488
 8004790:	20000ca8 	.word	0x20000ca8
 8004794:	0800e49c 	.word	0x0800e49c
 8004798:	0800e4a8 	.word	0x0800e4a8
			} else if(dilSecim == 1) {
 800479c:	4b94      	ldr	r3, [pc, #592]	; (80049f0 <menu+0x32ec>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d109      	bne.n	80047b8 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80047a4:	4a93      	ldr	r2, [pc, #588]	; (80049f4 <menu+0x32f0>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7fb ff5d 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80047ae:	4a92      	ldr	r2, [pc, #584]	; (80049f8 <menu+0x32f4>)
 80047b0:	2101      	movs	r1, #1
 80047b2:	2002      	movs	r0, #2
 80047b4:	f7fb ff58 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80047b8:	2102      	movs	r1, #2
 80047ba:	4890      	ldr	r0, [pc, #576]	; (80049fc <menu+0x32f8>)
 80047bc:	f005 fafc 	bl	8009db8 <HAL_GPIO_ReadPin>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d119      	bne.n	80047fa <menu+0x30f6>
 80047c6:	4b8e      	ldr	r3, [pc, #568]	; (8004a00 <menu+0x32fc>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f083 0301 	eor.w	r3, r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d012      	beq.n	80047fa <menu+0x30f6>
 80047d4:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <menu+0x3300>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00e      	beq.n	80047fa <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80047dc:	4b8a      	ldr	r3, [pc, #552]	; (8004a08 <menu+0x3304>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <menu+0x3304>)
 80047e6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80047e8:	4b87      	ldr	r3, [pc, #540]	; (8004a08 <menu+0x3304>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d902      	bls.n	80047f6 <menu+0x30f2>
				calismaSayModu = 0;
 80047f0:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <menu+0x3304>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80047f6:	f001 fd3d 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80047fa:	2104      	movs	r1, #4
 80047fc:	487f      	ldr	r0, [pc, #508]	; (80049fc <menu+0x32f8>)
 80047fe:	f005 fadb 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d119      	bne.n	800483c <menu+0x3138>
 8004808:	4b7d      	ldr	r3, [pc, #500]	; (8004a00 <menu+0x32fc>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d012      	beq.n	800483c <menu+0x3138>
 8004816:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <menu+0x3300>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00e      	beq.n	800483c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800481e:	4b7a      	ldr	r3, [pc, #488]	; (8004a08 <menu+0x3304>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4b78      	ldr	r3, [pc, #480]	; (8004a08 <menu+0x3304>)
 8004828:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800482a:	4b77      	ldr	r3, [pc, #476]	; (8004a08 <menu+0x3304>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <menu+0x3134>
		   		calismaSayModu = 1;
 8004832:	4b75      	ldr	r3, [pc, #468]	; (8004a08 <menu+0x3304>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004838:	f001 fd1c 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800483c:	2108      	movs	r1, #8
 800483e:	486f      	ldr	r0, [pc, #444]	; (80049fc <menu+0x32f8>)
 8004840:	f005 faba 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004844:	4603      	mov	r3, r0
 8004846:	2b01      	cmp	r3, #1
 8004848:	d12b      	bne.n	80048a2 <menu+0x319e>
 800484a:	4b6d      	ldr	r3, [pc, #436]	; (8004a00 <menu+0x32fc>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f083 0301 	eor.w	r3, r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d024      	beq.n	80048a2 <menu+0x319e>
			eepromData[32] = 0;
 8004858:	4b6c      	ldr	r3, [pc, #432]	; (8004a0c <menu+0x3308>)
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <menu+0x3308>)
 8004862:	2200      	movs	r2, #0
 8004864:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004866:	4b69      	ldr	r3, [pc, #420]	; (8004a0c <menu+0x3308>)
 8004868:	2200      	movs	r2, #0
 800486a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800486c:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <menu+0x3308>)
 800486e:	2200      	movs	r2, #0
 8004870:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004872:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <menu+0x3308>)
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004878:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <menu+0x330c>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800487e:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <menu+0x3310>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004884:	4b64      	ldr	r3, [pc, #400]	; (8004a18 <menu+0x3314>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800488a:	4b64      	ldr	r3, [pc, #400]	; (8004a1c <menu+0x3318>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004890:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <menu+0x331c>)
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004896:	4b5c      	ldr	r3, [pc, #368]	; (8004a08 <menu+0x3304>)
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <menu+0x3320>)
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80048a2:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <menu+0x3324>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b1e      	cmp	r3, #30
 80048a8:	d16f      	bne.n	800498a <menu+0x3286>
		calismaSayModu = 0;
 80048aa:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <menu+0x3304>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80048b0:	4b4f      	ldr	r3, [pc, #316]	; (80049f0 <menu+0x32ec>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80048b8:	4a5c      	ldr	r2, [pc, #368]	; (8004a2c <menu+0x3328>)
 80048ba:	2101      	movs	r1, #1
 80048bc:	2001      	movs	r0, #1
 80048be:	f7fb fed3 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80048c2:	4a5b      	ldr	r2, [pc, #364]	; (8004a30 <menu+0x332c>)
 80048c4:	2101      	movs	r1, #1
 80048c6:	2002      	movs	r0, #2
 80048c8:	f7fb fece 	bl	8000668 <lcd_print>
 80048cc:	e00d      	b.n	80048ea <menu+0x31e6>
		} else if(dilSecim == 1) {
 80048ce:	4b48      	ldr	r3, [pc, #288]	; (80049f0 <menu+0x32ec>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d109      	bne.n	80048ea <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80048d6:	4a57      	ldr	r2, [pc, #348]	; (8004a34 <menu+0x3330>)
 80048d8:	2101      	movs	r1, #1
 80048da:	2001      	movs	r0, #1
 80048dc:	f7fb fec4 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80048e0:	4a55      	ldr	r2, [pc, #340]	; (8004a38 <menu+0x3334>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	2002      	movs	r0, #2
 80048e6:	f7fb febf 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80048ea:	2102      	movs	r1, #2
 80048ec:	4843      	ldr	r0, [pc, #268]	; (80049fc <menu+0x32f8>)
 80048ee:	f005 fa63 	bl	8009db8 <HAL_GPIO_ReadPin>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d115      	bne.n	8004924 <menu+0x3220>
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <menu+0x32fc>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f083 0301 	eor.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004906:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <menu+0x32ec>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <menu+0x32ec>)
 8004910:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <menu+0x32ec>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d902      	bls.n	8004920 <menu+0x321c>
				dilSecim = 0;
 800491a:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <menu+0x32ec>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004920:	f001 fca8 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004924:	2104      	movs	r1, #4
 8004926:	4835      	ldr	r0, [pc, #212]	; (80049fc <menu+0x32f8>)
 8004928:	f005 fa46 	bl	8009db8 <HAL_GPIO_ReadPin>
 800492c:	4603      	mov	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d115      	bne.n	800495e <menu+0x325a>
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <menu+0x32fc>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f083 0301 	eor.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004940:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <menu+0x32ec>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	3b01      	subs	r3, #1
 8004946:	b2da      	uxtb	r2, r3
 8004948:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <menu+0x32ec>)
 800494a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800494c:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <menu+0x32ec>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <menu+0x3256>
		   		dilSecim = 1;
 8004954:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <menu+0x32ec>)
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800495a:	f001 fc8b 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800495e:	2108      	movs	r1, #8
 8004960:	4826      	ldr	r0, [pc, #152]	; (80049fc <menu+0x32f8>)
 8004962:	f005 fa29 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10e      	bne.n	800498a <menu+0x3286>
 800496c:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <menu+0x32fc>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	f083 0301 	eor.w	r3, r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <menu+0x3286>
			eepromData[33] = dilSecim;
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <menu+0x32ec>)
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <menu+0x3308>)
 8004980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <menu+0x3320>)
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800498a:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <menu+0x3324>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b1f      	cmp	r3, #31
 8004990:	f040 80b7 	bne.w	8004b02 <menu+0x33fe>
		calismaSayModu = 0;
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <menu+0x3304>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800499a:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <menu+0x3338>)
 800499c:	2101      	movs	r1, #1
 800499e:	2001      	movs	r0, #1
 80049a0:	f7fb fe62 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 80049a4:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <menu+0x333c>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d113      	bne.n	80049d4 <menu+0x32d0>
			if(dilSecim == 0) {
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <menu+0x32ec>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80049b4:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <menu+0x3340>)
 80049b6:	2101      	movs	r1, #1
 80049b8:	2002      	movs	r0, #2
 80049ba:	f7fb fe55 	bl	8000668 <lcd_print>
 80049be:	e050      	b.n	8004a62 <menu+0x335e>
			} else if(dilSecim == 1) {
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <menu+0x32ec>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d14c      	bne.n	8004a62 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80049c8:	4a1f      	ldr	r2, [pc, #124]	; (8004a48 <menu+0x3344>)
 80049ca:	2101      	movs	r1, #1
 80049cc:	2002      	movs	r0, #2
 80049ce:	f7fb fe4b 	bl	8000668 <lcd_print>
 80049d2:	e046      	b.n	8004a62 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <menu+0x333c>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d142      	bne.n	8004a62 <menu+0x335e>
			if(dilSecim == 0){
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <menu+0x32ec>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d135      	bne.n	8004a50 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80049e4:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <menu+0x3348>)
 80049e6:	2101      	movs	r1, #1
 80049e8:	2002      	movs	r0, #2
 80049ea:	f7fb fe3d 	bl	8000668 <lcd_print>
 80049ee:	e038      	b.n	8004a62 <menu+0x335e>
 80049f0:	20000d51 	.word	0x20000d51
 80049f4:	0800e488 	.word	0x0800e488
 80049f8:	0800e4bc 	.word	0x0800e4bc
 80049fc:	40010800 	.word	0x40010800
 8004a00:	20000d5f 	.word	0x20000d5f
 8004a04:	20000d71 	.word	0x20000d71
 8004a08:	20000d50 	.word	0x20000d50
 8004a0c:	20000c38 	.word	0x20000c38
 8004a10:	20000d2f 	.word	0x20000d2f
 8004a14:	200009b5 	.word	0x200009b5
 8004a18:	200009b4 	.word	0x200009b4
 8004a1c:	20000d2e 	.word	0x20000d2e
 8004a20:	20000d2d 	.word	0x20000d2d
 8004a24:	20000d5c 	.word	0x20000d5c
 8004a28:	20000d30 	.word	0x20000d30
 8004a2c:	0800e4d0 	.word	0x0800e4d0
 8004a30:	0800e4e4 	.word	0x0800e4e4
 8004a34:	0800e4f8 	.word	0x0800e4f8
 8004a38:	0800e50c 	.word	0x0800e50c
 8004a3c:	0800e520 	.word	0x0800e520
 8004a40:	20000d4f 	.word	0x20000d4f
 8004a44:	0800dd78 	.word	0x0800dd78
 8004a48:	0800dd8c 	.word	0x0800dd8c
 8004a4c:	0800ddd8 	.word	0x0800ddd8
			} else if(dilSecim == 1) {
 8004a50:	4bac      	ldr	r3, [pc, #688]	; (8004d04 <menu+0x3600>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d104      	bne.n	8004a62 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004a58:	4aab      	ldr	r2, [pc, #684]	; (8004d08 <menu+0x3604>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	f7fb fe03 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a62:	2102      	movs	r1, #2
 8004a64:	48a9      	ldr	r0, [pc, #676]	; (8004d0c <menu+0x3608>)
 8004a66:	f005 f9a7 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d115      	bne.n	8004a9c <menu+0x3398>
 8004a70:	4ba7      	ldr	r3, [pc, #668]	; (8004d10 <menu+0x360c>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f083 0301 	eor.w	r3, r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <menu+0x3398>
			iotMode = iotMode + 1;
 8004a7e:	4ba5      	ldr	r3, [pc, #660]	; (8004d14 <menu+0x3610>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	4ba3      	ldr	r3, [pc, #652]	; (8004d14 <menu+0x3610>)
 8004a88:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004a8a:	4ba2      	ldr	r3, [pc, #648]	; (8004d14 <menu+0x3610>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d902      	bls.n	8004a98 <menu+0x3394>
				iotMode = 0;
 8004a92:	4ba0      	ldr	r3, [pc, #640]	; (8004d14 <menu+0x3610>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004a98:	f001 fbec 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	489b      	ldr	r0, [pc, #620]	; (8004d0c <menu+0x3608>)
 8004aa0:	f005 f98a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d115      	bne.n	8004ad6 <menu+0x33d2>
 8004aaa:	4b99      	ldr	r3, [pc, #612]	; (8004d10 <menu+0x360c>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	f083 0301 	eor.w	r3, r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004ab8:	4b96      	ldr	r3, [pc, #600]	; (8004d14 <menu+0x3610>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b94      	ldr	r3, [pc, #592]	; (8004d14 <menu+0x3610>)
 8004ac2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004ac4:	4b93      	ldr	r3, [pc, #588]	; (8004d14 <menu+0x3610>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <menu+0x33ce>
		   		iotMode = 1;
 8004acc:	4b91      	ldr	r3, [pc, #580]	; (8004d14 <menu+0x3610>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004ad2:	f001 fbcf 	bl	8006274 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ad6:	2108      	movs	r1, #8
 8004ad8:	488c      	ldr	r0, [pc, #560]	; (8004d0c <menu+0x3608>)
 8004ada:	f005 f96d 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d10e      	bne.n	8004b02 <menu+0x33fe>
 8004ae4:	4b8a      	ldr	r3, [pc, #552]	; (8004d10 <menu+0x360c>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	f083 0301 	eor.w	r3, r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004af2:	4b88      	ldr	r3, [pc, #544]	; (8004d14 <menu+0x3610>)
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <menu+0x3614>)
 8004af8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004afc:	4b87      	ldr	r3, [pc, #540]	; (8004d1c <menu+0x3618>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004b02:	4b87      	ldr	r3, [pc, #540]	; (8004d20 <menu+0x361c>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d138      	bne.n	8004b7c <menu+0x3478>
		calismaSayModu = 0;
 8004b0a:	4b86      	ldr	r3, [pc, #536]	; (8004d24 <menu+0x3620>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004b10:	4a85      	ldr	r2, [pc, #532]	; (8004d28 <menu+0x3624>)
 8004b12:	2101      	movs	r1, #1
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fb fda7 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 8004b1a:	4a84      	ldr	r2, [pc, #528]	; (8004d2c <menu+0x3628>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	2002      	movs	r0, #2
 8004b20:	f7fb fda2 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "    ");
 8004b24:	4a82      	ldr	r2, [pc, #520]	; (8004d30 <menu+0x362c>)
 8004b26:	210d      	movs	r1, #13
 8004b28:	2002      	movs	r0, #2
 8004b2a:	f7fb fd9d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4876      	ldr	r0, [pc, #472]	; (8004d0c <menu+0x3608>)
 8004b32:	f005 f941 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d11f      	bne.n	8004b7c <menu+0x3478>
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	4873      	ldr	r0, [pc, #460]	; (8004d0c <menu+0x3608>)
 8004b40:	f005 f93a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d118      	bne.n	8004b7c <menu+0x3478>
 8004b4a:	4b71      	ldr	r3, [pc, #452]	; (8004d10 <menu+0x360c>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f083 0301 	eor.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <menu+0x3478>
			takeMachineID(0);
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f7fc f837 	bl	8000bcc <takeMachineID>

			HAL_Delay(50);
 8004b5e:	2032      	movs	r0, #50	; 0x32
 8004b60:	f004 fb5a 	bl	8009218 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004b64:	4a71      	ldr	r2, [pc, #452]	; (8004d2c <menu+0x3628>)
 8004b66:	2101      	movs	r1, #1
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f7fb fd7d 	bl	8000668 <lcd_print>
			lcd_print(2, 13, "    ");
 8004b6e:	4a70      	ldr	r2, [pc, #448]	; (8004d30 <menu+0x362c>)
 8004b70:	210d      	movs	r1, #13
 8004b72:	2002      	movs	r0, #2
 8004b74:	f7fb fd78 	bl	8000668 <lcd_print>

			bekle();
 8004b78:	f001 fb7c 	bl	8006274 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <menu+0x361c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b21      	cmp	r3, #33	; 0x21
 8004b82:	d153      	bne.n	8004c2c <menu+0x3528>
		calismaSayModu = 0;
 8004b84:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <menu+0x3620>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004b8a:	4a6a      	ldr	r2, [pc, #424]	; (8004d34 <menu+0x3630>)
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fb fd6a 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004b94:	4868      	ldr	r0, [pc, #416]	; (8004d38 <menu+0x3634>)
 8004b96:	f7fb fb45 	bl	8000224 <strlen>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d811      	bhi.n	8004bc4 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <menu+0x3634>)
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	2002      	movs	r0, #2
 8004ba6:	f7fb fd5f 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004baa:	4863      	ldr	r0, [pc, #396]	; (8004d38 <menu+0x3634>)
 8004bac:	f7fb fb3a 	bl	8000224 <strlen>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	4a60      	ldr	r2, [pc, #384]	; (8004d3c <menu+0x3638>)
 8004bba:	4619      	mov	r1, r3
 8004bbc:	2002      	movs	r0, #2
 8004bbe:	f7fb fd53 	bl	8000668 <lcd_print>
 8004bc2:	e005      	b.n	8004bd0 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	2101      	movs	r1, #1
 8004bca:	485b      	ldr	r0, [pc, #364]	; (8004d38 <menu+0x3634>)
 8004bcc:	f7fc fcf4 	bl	80015b8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	484e      	ldr	r0, [pc, #312]	; (8004d0c <menu+0x3608>)
 8004bd4:	f005 f8f0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d126      	bne.n	8004c2c <menu+0x3528>
 8004bde:	2104      	movs	r1, #4
 8004be0:	484a      	ldr	r0, [pc, #296]	; (8004d0c <menu+0x3608>)
 8004be2:	f005 f8e9 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d11f      	bne.n	8004c2c <menu+0x3528>
 8004bec:	4b48      	ldr	r3, [pc, #288]	; (8004d10 <menu+0x360c>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f083 0301 	eor.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <menu+0x3528>
			takeWifiSSID(0);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f7fc f93c 	bl	8000e78 <takeWifiSSID>

			HAL_Delay(100);
 8004c00:	2064      	movs	r0, #100	; 0x64
 8004c02:	f004 fb09 	bl	8009218 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004c06:	4a4c      	ldr	r2, [pc, #304]	; (8004d38 <menu+0x3634>)
 8004c08:	2101      	movs	r1, #1
 8004c0a:	2002      	movs	r0, #2
 8004c0c:	f7fb fd2c 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004c10:	4849      	ldr	r0, [pc, #292]	; (8004d38 <menu+0x3634>)
 8004c12:	f7fb fb07 	bl	8000224 <strlen>
 8004c16:	4603      	mov	r3, r0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	4a47      	ldr	r2, [pc, #284]	; (8004d3c <menu+0x3638>)
 8004c20:	4619      	mov	r1, r3
 8004c22:	2002      	movs	r0, #2
 8004c24:	f7fb fd20 	bl	8000668 <lcd_print>

			bekle();
 8004c28:	f001 fb24 	bl	8006274 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004c2c:	4b3c      	ldr	r3, [pc, #240]	; (8004d20 <menu+0x361c>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b22      	cmp	r3, #34	; 0x22
 8004c32:	d153      	bne.n	8004cdc <menu+0x35d8>
		calismaSayModu = 0;
 8004c34:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <menu+0x3620>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004c3a:	4a41      	ldr	r2, [pc, #260]	; (8004d40 <menu+0x363c>)
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f7fb fd12 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004c44:	483f      	ldr	r0, [pc, #252]	; (8004d44 <menu+0x3640>)
 8004c46:	f7fb faed 	bl	8000224 <strlen>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d811      	bhi.n	8004c74 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004c50:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <menu+0x3640>)
 8004c52:	2101      	movs	r1, #1
 8004c54:	2002      	movs	r0, #2
 8004c56:	f7fb fd07 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004c5a:	483a      	ldr	r0, [pc, #232]	; (8004d44 <menu+0x3640>)
 8004c5c:	f7fb fae2 	bl	8000224 <strlen>
 8004c60:	4603      	mov	r3, r0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	4a34      	ldr	r2, [pc, #208]	; (8004d3c <menu+0x3638>)
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	2002      	movs	r0, #2
 8004c6e:	f7fb fcfb 	bl	8000668 <lcd_print>
 8004c72:	e005      	b.n	8004c80 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004c74:	2301      	movs	r3, #1
 8004c76:	2202      	movs	r2, #2
 8004c78:	2101      	movs	r1, #1
 8004c7a:	4832      	ldr	r0, [pc, #200]	; (8004d44 <menu+0x3640>)
 8004c7c:	f7fc fc9c 	bl	80015b8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c80:	2102      	movs	r1, #2
 8004c82:	4822      	ldr	r0, [pc, #136]	; (8004d0c <menu+0x3608>)
 8004c84:	f005 f898 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d126      	bne.n	8004cdc <menu+0x35d8>
 8004c8e:	2104      	movs	r1, #4
 8004c90:	481e      	ldr	r0, [pc, #120]	; (8004d0c <menu+0x3608>)
 8004c92:	f005 f891 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d11f      	bne.n	8004cdc <menu+0x35d8>
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <menu+0x360c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f083 0301 	eor.w	r3, r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d018      	beq.n	8004cdc <menu+0x35d8>
			takeWifiPass(0);
 8004caa:	2000      	movs	r0, #0
 8004cac:	f7fc fa9a 	bl	80011e4 <takeWifiPass>

			HAL_Delay(50);
 8004cb0:	2032      	movs	r0, #50	; 0x32
 8004cb2:	f004 fab1 	bl	8009218 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <menu+0x3640>)
 8004cb8:	2101      	movs	r1, #1
 8004cba:	2002      	movs	r0, #2
 8004cbc:	f7fb fcd4 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004cc0:	4820      	ldr	r0, [pc, #128]	; (8004d44 <menu+0x3640>)
 8004cc2:	f7fb faaf 	bl	8000224 <strlen>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <menu+0x3638>)
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	2002      	movs	r0, #2
 8004cd4:	f7fb fcc8 	bl	8000668 <lcd_print>

			bekle();
 8004cd8:	f001 facc 	bl	8006274 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <menu+0x361c>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b23      	cmp	r3, #35	; 0x23
 8004ce2:	d155      	bne.n	8004d90 <menu+0x368c>
		if(dilSecim == 0) {
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <menu+0x3600>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d131      	bne.n	8004d50 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <menu+0x3644>)
 8004cee:	2101      	movs	r1, #1
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f7fb fcb9 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <menu+0x3648>)
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	2002      	movs	r0, #2
 8004cfc:	f7fb fcb4 	bl	8000668 <lcd_print>
 8004d00:	e034      	b.n	8004d6c <menu+0x3668>
 8004d02:	bf00      	nop
 8004d04:	20000d51 	.word	0x20000d51
 8004d08:	0800ddec 	.word	0x0800ddec
 8004d0c:	40010800 	.word	0x40010800
 8004d10:	20000d5f 	.word	0x20000d5f
 8004d14:	20000d4f 	.word	0x20000d4f
 8004d18:	20000c38 	.word	0x20000c38
 8004d1c:	20000d5c 	.word	0x20000d5c
 8004d20:	20000d30 	.word	0x20000d30
 8004d24:	20000d50 	.word	0x20000d50
 8004d28:	0800e534 	.word	0x0800e534
 8004d2c:	20000cd0 	.word	0x20000cd0
 8004d30:	0800e548 	.word	0x0800e548
 8004d34:	0800e550 	.word	0x0800e550
 8004d38:	20000cdc 	.word	0x20000cdc
 8004d3c:	2000094c 	.word	0x2000094c
 8004d40:	0800e564 	.word	0x0800e564
 8004d44:	20000cf0 	.word	0x20000cf0
 8004d48:	0800e578 	.word	0x0800e578
 8004d4c:	0800e58c 	.word	0x0800e58c
		} else if(dilSecim == 1) {
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <menu+0x3690>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d109      	bne.n	8004d6c <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004d58:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <menu+0x3694>)
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f7fb fc83 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <menu+0x3698>)
 8004d64:	2101      	movs	r1, #1
 8004d66:	2002      	movs	r0, #2
 8004d68:	f7fb fc7e 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004d6c:	2108      	movs	r1, #8
 8004d6e:	480c      	ldr	r0, [pc, #48]	; (8004da0 <menu+0x369c>)
 8004d70:	f005 f822 	bl	8009db8 <HAL_GPIO_ReadPin>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10a      	bne.n	8004d90 <menu+0x368c>
			menuGiris = 0;
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <menu+0x36a0>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004d80:	f7fb fc9e 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d88:	f004 fa46 	bl	8009218 <HAL_Delay>
			NVIC_SystemReset();
 8004d8c:	f7fb fce0 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000d51 	.word	0x20000d51
 8004d98:	0800e5a0 	.word	0x0800e5a0
 8004d9c:	0800e5b4 	.word	0x0800e5b4
 8004da0:	40010800 	.word	0x40010800
 8004da4:	20000d4d 	.word	0x20000d4d

08004da8 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004db2:	48a9      	ldr	r0, [pc, #676]	; (8005058 <loadMenuTexts+0x2b0>)
 8004db4:	f7fb fce2 	bl	800077c <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4aa8      	ldr	r2, [pc, #672]	; (800505c <loadMenuTexts+0x2b4>)
 8004dbc:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004dbe:	48a8      	ldr	r0, [pc, #672]	; (8005060 <loadMenuTexts+0x2b8>)
 8004dc0:	f7fb fcdc 	bl	800077c <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4aa7      	ldr	r2, [pc, #668]	; (8005064 <loadMenuTexts+0x2bc>)
 8004dc8:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004dca:	48a7      	ldr	r0, [pc, #668]	; (8005068 <loadMenuTexts+0x2c0>)
 8004dcc:	f7fb fcd6 	bl	800077c <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4aa6      	ldr	r2, [pc, #664]	; (800506c <loadMenuTexts+0x2c4>)
 8004dd4:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004dd6:	48a6      	ldr	r0, [pc, #664]	; (8005070 <loadMenuTexts+0x2c8>)
 8004dd8:	f7fb fcd0 	bl	800077c <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4aa5      	ldr	r2, [pc, #660]	; (8005074 <loadMenuTexts+0x2cc>)
 8004de0:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004de2:	48a5      	ldr	r0, [pc, #660]	; (8005078 <loadMenuTexts+0x2d0>)
 8004de4:	f7fb fcca 	bl	800077c <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4aa4      	ldr	r2, [pc, #656]	; (800507c <loadMenuTexts+0x2d4>)
 8004dec:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004dee:	48a4      	ldr	r0, [pc, #656]	; (8005080 <loadMenuTexts+0x2d8>)
 8004df0:	f7fb fcc4 	bl	800077c <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4aa3      	ldr	r2, [pc, #652]	; (8005084 <loadMenuTexts+0x2dc>)
 8004df8:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004dfa:	48a3      	ldr	r0, [pc, #652]	; (8005088 <loadMenuTexts+0x2e0>)
 8004dfc:	f7fb fcbe 	bl	800077c <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4aa2      	ldr	r2, [pc, #648]	; (800508c <loadMenuTexts+0x2e4>)
 8004e04:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f040 82d1 	bne.w	80053b0 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004e0e:	48a0      	ldr	r0, [pc, #640]	; (8005090 <loadMenuTexts+0x2e8>)
 8004e10:	f7fb fcb4 	bl	800077c <copyText>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a9f      	ldr	r2, [pc, #636]	; (8005094 <loadMenuTexts+0x2ec>)
 8004e18:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004e1a:	489f      	ldr	r0, [pc, #636]	; (8005098 <loadMenuTexts+0x2f0>)
 8004e1c:	f7fb fcae 	bl	800077c <copyText>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a9e      	ldr	r2, [pc, #632]	; (800509c <loadMenuTexts+0x2f4>)
 8004e24:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004e26:	489e      	ldr	r0, [pc, #632]	; (80050a0 <loadMenuTexts+0x2f8>)
 8004e28:	f7fb fca8 	bl	800077c <copyText>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a9d      	ldr	r2, [pc, #628]	; (80050a4 <loadMenuTexts+0x2fc>)
 8004e30:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004e32:	489d      	ldr	r0, [pc, #628]	; (80050a8 <loadMenuTexts+0x300>)
 8004e34:	f7fb fca2 	bl	800077c <copyText>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a9c      	ldr	r2, [pc, #624]	; (80050ac <loadMenuTexts+0x304>)
 8004e3c:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004e3e:	489c      	ldr	r0, [pc, #624]	; (80050b0 <loadMenuTexts+0x308>)
 8004e40:	f7fb fc9c 	bl	800077c <copyText>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a9b      	ldr	r2, [pc, #620]	; (80050b4 <loadMenuTexts+0x30c>)
 8004e48:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004e4a:	489b      	ldr	r0, [pc, #620]	; (80050b8 <loadMenuTexts+0x310>)
 8004e4c:	f7fb fc96 	bl	800077c <copyText>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a9a      	ldr	r2, [pc, #616]	; (80050bc <loadMenuTexts+0x314>)
 8004e54:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004e56:	489a      	ldr	r0, [pc, #616]	; (80050c0 <loadMenuTexts+0x318>)
 8004e58:	f7fb fc90 	bl	800077c <copyText>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a99      	ldr	r2, [pc, #612]	; (80050c4 <loadMenuTexts+0x31c>)
 8004e60:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004e62:	4899      	ldr	r0, [pc, #612]	; (80050c8 <loadMenuTexts+0x320>)
 8004e64:	f7fb fc8a 	bl	800077c <copyText>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a98      	ldr	r2, [pc, #608]	; (80050cc <loadMenuTexts+0x324>)
 8004e6c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004e6e:	4898      	ldr	r0, [pc, #608]	; (80050d0 <loadMenuTexts+0x328>)
 8004e70:	f7fb fc84 	bl	800077c <copyText>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a97      	ldr	r2, [pc, #604]	; (80050d4 <loadMenuTexts+0x32c>)
 8004e78:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004e7a:	4897      	ldr	r0, [pc, #604]	; (80050d8 <loadMenuTexts+0x330>)
 8004e7c:	f7fb fc7e 	bl	800077c <copyText>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4a96      	ldr	r2, [pc, #600]	; (80050dc <loadMenuTexts+0x334>)
 8004e84:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004e86:	4896      	ldr	r0, [pc, #600]	; (80050e0 <loadMenuTexts+0x338>)
 8004e88:	f7fb fc78 	bl	800077c <copyText>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a95      	ldr	r2, [pc, #596]	; (80050e4 <loadMenuTexts+0x33c>)
 8004e90:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004e92:	4895      	ldr	r0, [pc, #596]	; (80050e8 <loadMenuTexts+0x340>)
 8004e94:	f7fb fc72 	bl	800077c <copyText>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4a94      	ldr	r2, [pc, #592]	; (80050ec <loadMenuTexts+0x344>)
 8004e9c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004e9e:	4894      	ldr	r0, [pc, #592]	; (80050f0 <loadMenuTexts+0x348>)
 8004ea0:	f7fb fc6c 	bl	800077c <copyText>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a93      	ldr	r2, [pc, #588]	; (80050f4 <loadMenuTexts+0x34c>)
 8004ea8:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004eaa:	4893      	ldr	r0, [pc, #588]	; (80050f8 <loadMenuTexts+0x350>)
 8004eac:	f7fb fc66 	bl	800077c <copyText>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a92      	ldr	r2, [pc, #584]	; (80050fc <loadMenuTexts+0x354>)
 8004eb4:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004eb6:	4892      	ldr	r0, [pc, #584]	; (8005100 <loadMenuTexts+0x358>)
 8004eb8:	f7fb fc60 	bl	800077c <copyText>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4a91      	ldr	r2, [pc, #580]	; (8005104 <loadMenuTexts+0x35c>)
 8004ec0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004ec2:	4891      	ldr	r0, [pc, #580]	; (8005108 <loadMenuTexts+0x360>)
 8004ec4:	f7fb fc5a 	bl	800077c <copyText>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4a90      	ldr	r2, [pc, #576]	; (800510c <loadMenuTexts+0x364>)
 8004ecc:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004ece:	4890      	ldr	r0, [pc, #576]	; (8005110 <loadMenuTexts+0x368>)
 8004ed0:	f7fb fc54 	bl	800077c <copyText>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4a8f      	ldr	r2, [pc, #572]	; (8005114 <loadMenuTexts+0x36c>)
 8004ed8:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004eda:	488f      	ldr	r0, [pc, #572]	; (8005118 <loadMenuTexts+0x370>)
 8004edc:	f7fb fc4e 	bl	800077c <copyText>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4a8e      	ldr	r2, [pc, #568]	; (800511c <loadMenuTexts+0x374>)
 8004ee4:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004ee6:	488e      	ldr	r0, [pc, #568]	; (8005120 <loadMenuTexts+0x378>)
 8004ee8:	f7fb fc48 	bl	800077c <copyText>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a8d      	ldr	r2, [pc, #564]	; (8005124 <loadMenuTexts+0x37c>)
 8004ef0:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004ef2:	488d      	ldr	r0, [pc, #564]	; (8005128 <loadMenuTexts+0x380>)
 8004ef4:	f7fb fc42 	bl	800077c <copyText>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a8c      	ldr	r2, [pc, #560]	; (800512c <loadMenuTexts+0x384>)
 8004efc:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004efe:	488c      	ldr	r0, [pc, #560]	; (8005130 <loadMenuTexts+0x388>)
 8004f00:	f7fb fc3c 	bl	800077c <copyText>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a8b      	ldr	r2, [pc, #556]	; (8005134 <loadMenuTexts+0x38c>)
 8004f08:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004f0a:	488b      	ldr	r0, [pc, #556]	; (8005138 <loadMenuTexts+0x390>)
 8004f0c:	f7fb fc36 	bl	800077c <copyText>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a8a      	ldr	r2, [pc, #552]	; (800513c <loadMenuTexts+0x394>)
 8004f14:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004f16:	488a      	ldr	r0, [pc, #552]	; (8005140 <loadMenuTexts+0x398>)
 8004f18:	f7fb fc30 	bl	800077c <copyText>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4a89      	ldr	r2, [pc, #548]	; (8005144 <loadMenuTexts+0x39c>)
 8004f20:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004f22:	4889      	ldr	r0, [pc, #548]	; (8005148 <loadMenuTexts+0x3a0>)
 8004f24:	f7fb fc2a 	bl	800077c <copyText>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4a88      	ldr	r2, [pc, #544]	; (800514c <loadMenuTexts+0x3a4>)
 8004f2c:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004f2e:	4888      	ldr	r0, [pc, #544]	; (8005150 <loadMenuTexts+0x3a8>)
 8004f30:	f7fb fc24 	bl	800077c <copyText>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a87      	ldr	r2, [pc, #540]	; (8005154 <loadMenuTexts+0x3ac>)
 8004f38:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004f3a:	4887      	ldr	r0, [pc, #540]	; (8005158 <loadMenuTexts+0x3b0>)
 8004f3c:	f7fb fc1e 	bl	800077c <copyText>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4a86      	ldr	r2, [pc, #536]	; (800515c <loadMenuTexts+0x3b4>)
 8004f44:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004f46:	4886      	ldr	r0, [pc, #536]	; (8005160 <loadMenuTexts+0x3b8>)
 8004f48:	f7fb fc18 	bl	800077c <copyText>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a85      	ldr	r2, [pc, #532]	; (8005164 <loadMenuTexts+0x3bc>)
 8004f50:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004f52:	4885      	ldr	r0, [pc, #532]	; (8005168 <loadMenuTexts+0x3c0>)
 8004f54:	f7fb fc12 	bl	800077c <copyText>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4a84      	ldr	r2, [pc, #528]	; (800516c <loadMenuTexts+0x3c4>)
 8004f5c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004f5e:	4884      	ldr	r0, [pc, #528]	; (8005170 <loadMenuTexts+0x3c8>)
 8004f60:	f7fb fc0c 	bl	800077c <copyText>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4a83      	ldr	r2, [pc, #524]	; (8005174 <loadMenuTexts+0x3cc>)
 8004f68:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004f6a:	4883      	ldr	r0, [pc, #524]	; (8005178 <loadMenuTexts+0x3d0>)
 8004f6c:	f7fb fc06 	bl	800077c <copyText>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4a82      	ldr	r2, [pc, #520]	; (800517c <loadMenuTexts+0x3d4>)
 8004f74:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004f76:	4882      	ldr	r0, [pc, #520]	; (8005180 <loadMenuTexts+0x3d8>)
 8004f78:	f7fb fc00 	bl	800077c <copyText>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4a81      	ldr	r2, [pc, #516]	; (8005184 <loadMenuTexts+0x3dc>)
 8004f80:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004f82:	4881      	ldr	r0, [pc, #516]	; (8005188 <loadMenuTexts+0x3e0>)
 8004f84:	f7fb fbfa 	bl	800077c <copyText>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4a80      	ldr	r2, [pc, #512]	; (800518c <loadMenuTexts+0x3e4>)
 8004f8c:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004f8e:	4880      	ldr	r0, [pc, #512]	; (8005190 <loadMenuTexts+0x3e8>)
 8004f90:	f7fb fbf4 	bl	800077c <copyText>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4a7f      	ldr	r2, [pc, #508]	; (8005194 <loadMenuTexts+0x3ec>)
 8004f98:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004f9a:	487f      	ldr	r0, [pc, #508]	; (8005198 <loadMenuTexts+0x3f0>)
 8004f9c:	f7fb fbee 	bl	800077c <copyText>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	; (800519c <loadMenuTexts+0x3f4>)
 8004fa4:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004fa6:	487e      	ldr	r0, [pc, #504]	; (80051a0 <loadMenuTexts+0x3f8>)
 8004fa8:	f7fb fbe8 	bl	800077c <copyText>
 8004fac:	4603      	mov	r3, r0
 8004fae:	4a7d      	ldr	r2, [pc, #500]	; (80051a4 <loadMenuTexts+0x3fc>)
 8004fb0:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004fb2:	487d      	ldr	r0, [pc, #500]	; (80051a8 <loadMenuTexts+0x400>)
 8004fb4:	f7fb fbe2 	bl	800077c <copyText>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4a7c      	ldr	r2, [pc, #496]	; (80051ac <loadMenuTexts+0x404>)
 8004fbc:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004fbe:	487c      	ldr	r0, [pc, #496]	; (80051b0 <loadMenuTexts+0x408>)
 8004fc0:	f7fb fbdc 	bl	800077c <copyText>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4a7b      	ldr	r2, [pc, #492]	; (80051b4 <loadMenuTexts+0x40c>)
 8004fc8:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004fca:	487b      	ldr	r0, [pc, #492]	; (80051b8 <loadMenuTexts+0x410>)
 8004fcc:	f7fb fbd6 	bl	800077c <copyText>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4a7a      	ldr	r2, [pc, #488]	; (80051bc <loadMenuTexts+0x414>)
 8004fd4:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004fd6:	487a      	ldr	r0, [pc, #488]	; (80051c0 <loadMenuTexts+0x418>)
 8004fd8:	f7fb fbd0 	bl	800077c <copyText>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4a79      	ldr	r2, [pc, #484]	; (80051c4 <loadMenuTexts+0x41c>)
 8004fe0:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004fe2:	4879      	ldr	r0, [pc, #484]	; (80051c8 <loadMenuTexts+0x420>)
 8004fe4:	f7fb fbca 	bl	800077c <copyText>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4a78      	ldr	r2, [pc, #480]	; (80051cc <loadMenuTexts+0x424>)
 8004fec:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004fee:	4878      	ldr	r0, [pc, #480]	; (80051d0 <loadMenuTexts+0x428>)
 8004ff0:	f7fb fbc4 	bl	800077c <copyText>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4a77      	ldr	r2, [pc, #476]	; (80051d4 <loadMenuTexts+0x42c>)
 8004ff8:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004ffa:	4877      	ldr	r0, [pc, #476]	; (80051d8 <loadMenuTexts+0x430>)
 8004ffc:	f7fb fbbe 	bl	800077c <copyText>
 8005000:	4603      	mov	r3, r0
 8005002:	4a76      	ldr	r2, [pc, #472]	; (80051dc <loadMenuTexts+0x434>)
 8005004:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8005006:	4876      	ldr	r0, [pc, #472]	; (80051e0 <loadMenuTexts+0x438>)
 8005008:	f7fb fbb8 	bl	800077c <copyText>
 800500c:	4603      	mov	r3, r0
 800500e:	4a75      	ldr	r2, [pc, #468]	; (80051e4 <loadMenuTexts+0x43c>)
 8005010:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8005012:	4875      	ldr	r0, [pc, #468]	; (80051e8 <loadMenuTexts+0x440>)
 8005014:	f7fb fbb2 	bl	800077c <copyText>
 8005018:	4603      	mov	r3, r0
 800501a:	4a74      	ldr	r2, [pc, #464]	; (80051ec <loadMenuTexts+0x444>)
 800501c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 800501e:	4874      	ldr	r0, [pc, #464]	; (80051f0 <loadMenuTexts+0x448>)
 8005020:	f7fb fbac 	bl	800077c <copyText>
 8005024:	4603      	mov	r3, r0
 8005026:	4a73      	ldr	r2, [pc, #460]	; (80051f4 <loadMenuTexts+0x44c>)
 8005028:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 800502a:	4873      	ldr	r0, [pc, #460]	; (80051f8 <loadMenuTexts+0x450>)
 800502c:	f7fb fba6 	bl	800077c <copyText>
 8005030:	4603      	mov	r3, r0
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <loadMenuTexts+0x454>)
 8005034:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8005036:	4872      	ldr	r0, [pc, #456]	; (8005200 <loadMenuTexts+0x458>)
 8005038:	f7fb fba0 	bl	800077c <copyText>
 800503c:	4603      	mov	r3, r0
 800503e:	4a71      	ldr	r2, [pc, #452]	; (8005204 <loadMenuTexts+0x45c>)
 8005040:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8005042:	4871      	ldr	r0, [pc, #452]	; (8005208 <loadMenuTexts+0x460>)
 8005044:	f7fb fb9a 	bl	800077c <copyText>
 8005048:	4603      	mov	r3, r0
 800504a:	4a70      	ldr	r2, [pc, #448]	; (800520c <loadMenuTexts+0x464>)
 800504c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 800504e:	4870      	ldr	r0, [pc, #448]	; (8005210 <loadMenuTexts+0x468>)
 8005050:	f7fb fb94 	bl	800077c <copyText>
 8005054:	4603      	mov	r3, r0
 8005056:	e0dd      	b.n	8005214 <loadMenuTexts+0x46c>
 8005058:	20000000 	.word	0x20000000
 800505c:	20000d94 	.word	0x20000d94
 8005060:	20000010 	.word	0x20000010
 8005064:	20000d98 	.word	0x20000d98
 8005068:	20000020 	.word	0x20000020
 800506c:	20000df0 	.word	0x20000df0
 8005070:	20000030 	.word	0x20000030
 8005074:	20000e20 	.word	0x20000e20
 8005078:	20000040 	.word	0x20000040
 800507c:	20000e28 	.word	0x20000e28
 8005080:	20000050 	.word	0x20000050
 8005084:	20000ea0 	.word	0x20000ea0
 8005088:	20000060 	.word	0x20000060
 800508c:	20000ea4 	.word	0x20000ea4
 8005090:	20000070 	.word	0x20000070
 8005094:	20000d9c 	.word	0x20000d9c
 8005098:	20000080 	.word	0x20000080
 800509c:	20000da0 	.word	0x20000da0
 80050a0:	20000090 	.word	0x20000090
 80050a4:	20000da4 	.word	0x20000da4
 80050a8:	200000a0 	.word	0x200000a0
 80050ac:	20000da8 	.word	0x20000da8
 80050b0:	200000b0 	.word	0x200000b0
 80050b4:	20000dac 	.word	0x20000dac
 80050b8:	200000c0 	.word	0x200000c0
 80050bc:	20000db0 	.word	0x20000db0
 80050c0:	200000d0 	.word	0x200000d0
 80050c4:	20000db4 	.word	0x20000db4
 80050c8:	200000e0 	.word	0x200000e0
 80050cc:	20000db8 	.word	0x20000db8
 80050d0:	200000f0 	.word	0x200000f0
 80050d4:	20000dbc 	.word	0x20000dbc
 80050d8:	20000100 	.word	0x20000100
 80050dc:	20000dc0 	.word	0x20000dc0
 80050e0:	20000110 	.word	0x20000110
 80050e4:	20000dc4 	.word	0x20000dc4
 80050e8:	20000120 	.word	0x20000120
 80050ec:	20000dc8 	.word	0x20000dc8
 80050f0:	20000130 	.word	0x20000130
 80050f4:	20000dcc 	.word	0x20000dcc
 80050f8:	20000140 	.word	0x20000140
 80050fc:	20000dd0 	.word	0x20000dd0
 8005100:	20000150 	.word	0x20000150
 8005104:	20000dd4 	.word	0x20000dd4
 8005108:	20000160 	.word	0x20000160
 800510c:	20000dd8 	.word	0x20000dd8
 8005110:	20000170 	.word	0x20000170
 8005114:	20000ddc 	.word	0x20000ddc
 8005118:	20000180 	.word	0x20000180
 800511c:	20000de0 	.word	0x20000de0
 8005120:	20000190 	.word	0x20000190
 8005124:	20000de4 	.word	0x20000de4
 8005128:	200001a0 	.word	0x200001a0
 800512c:	20000de8 	.word	0x20000de8
 8005130:	200001b0 	.word	0x200001b0
 8005134:	20000dec 	.word	0x20000dec
 8005138:	200001c0 	.word	0x200001c0
 800513c:	20000df4 	.word	0x20000df4
 8005140:	200001d0 	.word	0x200001d0
 8005144:	20000df8 	.word	0x20000df8
 8005148:	200001e0 	.word	0x200001e0
 800514c:	20000dfc 	.word	0x20000dfc
 8005150:	200001f0 	.word	0x200001f0
 8005154:	20000e00 	.word	0x20000e00
 8005158:	20000200 	.word	0x20000200
 800515c:	20000e04 	.word	0x20000e04
 8005160:	20000210 	.word	0x20000210
 8005164:	20000e08 	.word	0x20000e08
 8005168:	20000220 	.word	0x20000220
 800516c:	20000e0c 	.word	0x20000e0c
 8005170:	20000230 	.word	0x20000230
 8005174:	20000e10 	.word	0x20000e10
 8005178:	20000240 	.word	0x20000240
 800517c:	20000e14 	.word	0x20000e14
 8005180:	20000250 	.word	0x20000250
 8005184:	20000e18 	.word	0x20000e18
 8005188:	20000260 	.word	0x20000260
 800518c:	20000e1c 	.word	0x20000e1c
 8005190:	20000270 	.word	0x20000270
 8005194:	20000e24 	.word	0x20000e24
 8005198:	20000280 	.word	0x20000280
 800519c:	20000e2c 	.word	0x20000e2c
 80051a0:	20000290 	.word	0x20000290
 80051a4:	20000e30 	.word	0x20000e30
 80051a8:	200002a0 	.word	0x200002a0
 80051ac:	20000e34 	.word	0x20000e34
 80051b0:	200002b0 	.word	0x200002b0
 80051b4:	20000e38 	.word	0x20000e38
 80051b8:	200002c0 	.word	0x200002c0
 80051bc:	20000e3c 	.word	0x20000e3c
 80051c0:	200002d0 	.word	0x200002d0
 80051c4:	20000e40 	.word	0x20000e40
 80051c8:	200002e0 	.word	0x200002e0
 80051cc:	20000e44 	.word	0x20000e44
 80051d0:	200002f0 	.word	0x200002f0
 80051d4:	20000e48 	.word	0x20000e48
 80051d8:	20000300 	.word	0x20000300
 80051dc:	20000e4c 	.word	0x20000e4c
 80051e0:	20000310 	.word	0x20000310
 80051e4:	20000e50 	.word	0x20000e50
 80051e8:	20000320 	.word	0x20000320
 80051ec:	20000e54 	.word	0x20000e54
 80051f0:	20000330 	.word	0x20000330
 80051f4:	20000e58 	.word	0x20000e58
 80051f8:	20000340 	.word	0x20000340
 80051fc:	20000e5c 	.word	0x20000e5c
 8005200:	20000350 	.word	0x20000350
 8005204:	20000e60 	.word	0x20000e60
 8005208:	20000360 	.word	0x20000360
 800520c:	20000e64 	.word	0x20000e64
 8005210:	20000370 	.word	0x20000370
 8005214:	4a3d      	ldr	r2, [pc, #244]	; (800530c <loadMenuTexts+0x564>)
 8005216:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005218:	483d      	ldr	r0, [pc, #244]	; (8005310 <loadMenuTexts+0x568>)
 800521a:	f7fb faaf 	bl	800077c <copyText>
 800521e:	4603      	mov	r3, r0
 8005220:	4a3c      	ldr	r2, [pc, #240]	; (8005314 <loadMenuTexts+0x56c>)
 8005222:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005224:	483c      	ldr	r0, [pc, #240]	; (8005318 <loadMenuTexts+0x570>)
 8005226:	f7fb faa9 	bl	800077c <copyText>
 800522a:	4603      	mov	r3, r0
 800522c:	4a3b      	ldr	r2, [pc, #236]	; (800531c <loadMenuTexts+0x574>)
 800522e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005230:	483b      	ldr	r0, [pc, #236]	; (8005320 <loadMenuTexts+0x578>)
 8005232:	f7fb faa3 	bl	800077c <copyText>
 8005236:	4603      	mov	r3, r0
 8005238:	4a3a      	ldr	r2, [pc, #232]	; (8005324 <loadMenuTexts+0x57c>)
 800523a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 800523c:	483a      	ldr	r0, [pc, #232]	; (8005328 <loadMenuTexts+0x580>)
 800523e:	f7fb fa9d 	bl	800077c <copyText>
 8005242:	4603      	mov	r3, r0
 8005244:	4a39      	ldr	r2, [pc, #228]	; (800532c <loadMenuTexts+0x584>)
 8005246:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005248:	4839      	ldr	r0, [pc, #228]	; (8005330 <loadMenuTexts+0x588>)
 800524a:	f7fb fa97 	bl	800077c <copyText>
 800524e:	4603      	mov	r3, r0
 8005250:	4a38      	ldr	r2, [pc, #224]	; (8005334 <loadMenuTexts+0x58c>)
 8005252:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005254:	4838      	ldr	r0, [pc, #224]	; (8005338 <loadMenuTexts+0x590>)
 8005256:	f7fb fa91 	bl	800077c <copyText>
 800525a:	4603      	mov	r3, r0
 800525c:	4a37      	ldr	r2, [pc, #220]	; (800533c <loadMenuTexts+0x594>)
 800525e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005260:	4837      	ldr	r0, [pc, #220]	; (8005340 <loadMenuTexts+0x598>)
 8005262:	f7fb fa8b 	bl	800077c <copyText>
 8005266:	4603      	mov	r3, r0
 8005268:	4a36      	ldr	r2, [pc, #216]	; (8005344 <loadMenuTexts+0x59c>)
 800526a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 800526c:	4836      	ldr	r0, [pc, #216]	; (8005348 <loadMenuTexts+0x5a0>)
 800526e:	f7fb fa85 	bl	800077c <copyText>
 8005272:	4603      	mov	r3, r0
 8005274:	4a35      	ldr	r2, [pc, #212]	; (800534c <loadMenuTexts+0x5a4>)
 8005276:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005278:	4835      	ldr	r0, [pc, #212]	; (8005350 <loadMenuTexts+0x5a8>)
 800527a:	f7fb fa7f 	bl	800077c <copyText>
 800527e:	4603      	mov	r3, r0
 8005280:	4a34      	ldr	r2, [pc, #208]	; (8005354 <loadMenuTexts+0x5ac>)
 8005282:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005284:	4834      	ldr	r0, [pc, #208]	; (8005358 <loadMenuTexts+0x5b0>)
 8005286:	f7fb fa79 	bl	800077c <copyText>
 800528a:	4603      	mov	r3, r0
 800528c:	4a33      	ldr	r2, [pc, #204]	; (800535c <loadMenuTexts+0x5b4>)
 800528e:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005290:	4833      	ldr	r0, [pc, #204]	; (8005360 <loadMenuTexts+0x5b8>)
 8005292:	f7fb fa73 	bl	800077c <copyText>
 8005296:	4603      	mov	r3, r0
 8005298:	4a32      	ldr	r2, [pc, #200]	; (8005364 <loadMenuTexts+0x5bc>)
 800529a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 800529c:	4832      	ldr	r0, [pc, #200]	; (8005368 <loadMenuTexts+0x5c0>)
 800529e:	f7fb fa6d 	bl	800077c <copyText>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a31      	ldr	r2, [pc, #196]	; (800536c <loadMenuTexts+0x5c4>)
 80052a6:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80052a8:	4831      	ldr	r0, [pc, #196]	; (8005370 <loadMenuTexts+0x5c8>)
 80052aa:	f7fb fa67 	bl	800077c <copyText>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <loadMenuTexts+0x5cc>)
 80052b2:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80052b4:	4830      	ldr	r0, [pc, #192]	; (8005378 <loadMenuTexts+0x5d0>)
 80052b6:	f7fb fa61 	bl	800077c <copyText>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a2f      	ldr	r2, [pc, #188]	; (800537c <loadMenuTexts+0x5d4>)
 80052be:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80052c0:	482f      	ldr	r0, [pc, #188]	; (8005380 <loadMenuTexts+0x5d8>)
 80052c2:	f7fb fa5b 	bl	800077c <copyText>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4a2e      	ldr	r2, [pc, #184]	; (8005384 <loadMenuTexts+0x5dc>)
 80052ca:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80052cc:	482e      	ldr	r0, [pc, #184]	; (8005388 <loadMenuTexts+0x5e0>)
 80052ce:	f7fb fa55 	bl	800077c <copyText>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a2d      	ldr	r2, [pc, #180]	; (800538c <loadMenuTexts+0x5e4>)
 80052d6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80052d8:	482d      	ldr	r0, [pc, #180]	; (8005390 <loadMenuTexts+0x5e8>)
 80052da:	f7fb fa4f 	bl	800077c <copyText>
 80052de:	4603      	mov	r3, r0
 80052e0:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <loadMenuTexts+0x5ec>)
 80052e2:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80052e4:	482c      	ldr	r0, [pc, #176]	; (8005398 <loadMenuTexts+0x5f0>)
 80052e6:	f7fb fa49 	bl	800077c <copyText>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4a2b      	ldr	r2, [pc, #172]	; (800539c <loadMenuTexts+0x5f4>)
 80052ee:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80052f0:	482b      	ldr	r0, [pc, #172]	; (80053a0 <loadMenuTexts+0x5f8>)
 80052f2:	f7fb fa43 	bl	800077c <copyText>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <loadMenuTexts+0x5fc>)
 80052fa:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80052fc:	482a      	ldr	r0, [pc, #168]	; (80053a8 <loadMenuTexts+0x600>)
 80052fe:	f7fb fa3d 	bl	800077c <copyText>
 8005302:	4603      	mov	r3, r0
 8005304:	4a29      	ldr	r2, [pc, #164]	; (80053ac <loadMenuTexts+0x604>)
 8005306:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005308:	e2d3      	b.n	80058b2 <loadMenuTexts+0xb0a>
 800530a:	bf00      	nop
 800530c:	20000e68 	.word	0x20000e68
 8005310:	20000380 	.word	0x20000380
 8005314:	20000e6c 	.word	0x20000e6c
 8005318:	20000390 	.word	0x20000390
 800531c:	20000e70 	.word	0x20000e70
 8005320:	200003a0 	.word	0x200003a0
 8005324:	20000e74 	.word	0x20000e74
 8005328:	200003b0 	.word	0x200003b0
 800532c:	20000e78 	.word	0x20000e78
 8005330:	200003c0 	.word	0x200003c0
 8005334:	20000e7c 	.word	0x20000e7c
 8005338:	200003d0 	.word	0x200003d0
 800533c:	20000e80 	.word	0x20000e80
 8005340:	200003e0 	.word	0x200003e0
 8005344:	20000e84 	.word	0x20000e84
 8005348:	200003f0 	.word	0x200003f0
 800534c:	20000e88 	.word	0x20000e88
 8005350:	20000400 	.word	0x20000400
 8005354:	20000e8c 	.word	0x20000e8c
 8005358:	20000410 	.word	0x20000410
 800535c:	20000e90 	.word	0x20000e90
 8005360:	20000420 	.word	0x20000420
 8005364:	20000e94 	.word	0x20000e94
 8005368:	20000430 	.word	0x20000430
 800536c:	20000e98 	.word	0x20000e98
 8005370:	20000440 	.word	0x20000440
 8005374:	20000e9c 	.word	0x20000e9c
 8005378:	20000450 	.word	0x20000450
 800537c:	20000ea8 	.word	0x20000ea8
 8005380:	20000460 	.word	0x20000460
 8005384:	20000eac 	.word	0x20000eac
 8005388:	20000470 	.word	0x20000470
 800538c:	20000eb0 	.word	0x20000eb0
 8005390:	20000480 	.word	0x20000480
 8005394:	20000eb4 	.word	0x20000eb4
 8005398:	20000490 	.word	0x20000490
 800539c:	20000eb8 	.word	0x20000eb8
 80053a0:	200004a0 	.word	0x200004a0
 80053a4:	20000ebc 	.word	0x20000ebc
 80053a8:	200004b0 	.word	0x200004b0
 80053ac:	20000ec0 	.word	0x20000ec0
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80053b0:	48a9      	ldr	r0, [pc, #676]	; (8005658 <loadMenuTexts+0x8b0>)
 80053b2:	f7fb f9e3 	bl	800077c <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4aa8      	ldr	r2, [pc, #672]	; (800565c <loadMenuTexts+0x8b4>)
 80053ba:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80053bc:	48a8      	ldr	r0, [pc, #672]	; (8005660 <loadMenuTexts+0x8b8>)
 80053be:	f7fb f9dd 	bl	800077c <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4aa7      	ldr	r2, [pc, #668]	; (8005664 <loadMenuTexts+0x8bc>)
 80053c6:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80053c8:	48a7      	ldr	r0, [pc, #668]	; (8005668 <loadMenuTexts+0x8c0>)
 80053ca:	f7fb f9d7 	bl	800077c <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4aa6      	ldr	r2, [pc, #664]	; (800566c <loadMenuTexts+0x8c4>)
 80053d2:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80053d4:	48a6      	ldr	r0, [pc, #664]	; (8005670 <loadMenuTexts+0x8c8>)
 80053d6:	f7fb f9d1 	bl	800077c <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4aa5      	ldr	r2, [pc, #660]	; (8005674 <loadMenuTexts+0x8cc>)
 80053de:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80053e0:	48a5      	ldr	r0, [pc, #660]	; (8005678 <loadMenuTexts+0x8d0>)
 80053e2:	f7fb f9cb 	bl	800077c <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4aa4      	ldr	r2, [pc, #656]	; (800567c <loadMenuTexts+0x8d4>)
 80053ea:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80053ec:	48a4      	ldr	r0, [pc, #656]	; (8005680 <loadMenuTexts+0x8d8>)
 80053ee:	f7fb f9c5 	bl	800077c <copyText>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4aa3      	ldr	r2, [pc, #652]	; (8005684 <loadMenuTexts+0x8dc>)
 80053f6:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80053f8:	48a3      	ldr	r0, [pc, #652]	; (8005688 <loadMenuTexts+0x8e0>)
 80053fa:	f7fb f9bf 	bl	800077c <copyText>
 80053fe:	4603      	mov	r3, r0
 8005400:	4aa2      	ldr	r2, [pc, #648]	; (800568c <loadMenuTexts+0x8e4>)
 8005402:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005404:	48a2      	ldr	r0, [pc, #648]	; (8005690 <loadMenuTexts+0x8e8>)
 8005406:	f7fb f9b9 	bl	800077c <copyText>
 800540a:	4603      	mov	r3, r0
 800540c:	4aa1      	ldr	r2, [pc, #644]	; (8005694 <loadMenuTexts+0x8ec>)
 800540e:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005410:	48a1      	ldr	r0, [pc, #644]	; (8005698 <loadMenuTexts+0x8f0>)
 8005412:	f7fb f9b3 	bl	800077c <copyText>
 8005416:	4603      	mov	r3, r0
 8005418:	4aa0      	ldr	r2, [pc, #640]	; (800569c <loadMenuTexts+0x8f4>)
 800541a:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 800541c:	48a0      	ldr	r0, [pc, #640]	; (80056a0 <loadMenuTexts+0x8f8>)
 800541e:	f7fb f9ad 	bl	800077c <copyText>
 8005422:	4603      	mov	r3, r0
 8005424:	4a9f      	ldr	r2, [pc, #636]	; (80056a4 <loadMenuTexts+0x8fc>)
 8005426:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005428:	489f      	ldr	r0, [pc, #636]	; (80056a8 <loadMenuTexts+0x900>)
 800542a:	f7fb f9a7 	bl	800077c <copyText>
 800542e:	4603      	mov	r3, r0
 8005430:	4a9e      	ldr	r2, [pc, #632]	; (80056ac <loadMenuTexts+0x904>)
 8005432:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005434:	489e      	ldr	r0, [pc, #632]	; (80056b0 <loadMenuTexts+0x908>)
 8005436:	f7fb f9a1 	bl	800077c <copyText>
 800543a:	4603      	mov	r3, r0
 800543c:	4a9d      	ldr	r2, [pc, #628]	; (80056b4 <loadMenuTexts+0x90c>)
 800543e:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005440:	489d      	ldr	r0, [pc, #628]	; (80056b8 <loadMenuTexts+0x910>)
 8005442:	f7fb f99b 	bl	800077c <copyText>
 8005446:	4603      	mov	r3, r0
 8005448:	4a9c      	ldr	r2, [pc, #624]	; (80056bc <loadMenuTexts+0x914>)
 800544a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 800544c:	489c      	ldr	r0, [pc, #624]	; (80056c0 <loadMenuTexts+0x918>)
 800544e:	f7fb f995 	bl	800077c <copyText>
 8005452:	4603      	mov	r3, r0
 8005454:	4a9b      	ldr	r2, [pc, #620]	; (80056c4 <loadMenuTexts+0x91c>)
 8005456:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005458:	489b      	ldr	r0, [pc, #620]	; (80056c8 <loadMenuTexts+0x920>)
 800545a:	f7fb f98f 	bl	800077c <copyText>
 800545e:	4603      	mov	r3, r0
 8005460:	4a9a      	ldr	r2, [pc, #616]	; (80056cc <loadMenuTexts+0x924>)
 8005462:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005464:	489a      	ldr	r0, [pc, #616]	; (80056d0 <loadMenuTexts+0x928>)
 8005466:	f7fb f989 	bl	800077c <copyText>
 800546a:	4603      	mov	r3, r0
 800546c:	4a99      	ldr	r2, [pc, #612]	; (80056d4 <loadMenuTexts+0x92c>)
 800546e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005470:	4899      	ldr	r0, [pc, #612]	; (80056d8 <loadMenuTexts+0x930>)
 8005472:	f7fb f983 	bl	800077c <copyText>
 8005476:	4603      	mov	r3, r0
 8005478:	4a98      	ldr	r2, [pc, #608]	; (80056dc <loadMenuTexts+0x934>)
 800547a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 800547c:	4898      	ldr	r0, [pc, #608]	; (80056e0 <loadMenuTexts+0x938>)
 800547e:	f7fb f97d 	bl	800077c <copyText>
 8005482:	4603      	mov	r3, r0
 8005484:	4a97      	ldr	r2, [pc, #604]	; (80056e4 <loadMenuTexts+0x93c>)
 8005486:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005488:	4897      	ldr	r0, [pc, #604]	; (80056e8 <loadMenuTexts+0x940>)
 800548a:	f7fb f977 	bl	800077c <copyText>
 800548e:	4603      	mov	r3, r0
 8005490:	4a96      	ldr	r2, [pc, #600]	; (80056ec <loadMenuTexts+0x944>)
 8005492:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005494:	4896      	ldr	r0, [pc, #600]	; (80056f0 <loadMenuTexts+0x948>)
 8005496:	f7fb f971 	bl	800077c <copyText>
 800549a:	4603      	mov	r3, r0
 800549c:	4a95      	ldr	r2, [pc, #596]	; (80056f4 <loadMenuTexts+0x94c>)
 800549e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80054a0:	4895      	ldr	r0, [pc, #596]	; (80056f8 <loadMenuTexts+0x950>)
 80054a2:	f7fb f96b 	bl	800077c <copyText>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a94      	ldr	r2, [pc, #592]	; (80056fc <loadMenuTexts+0x954>)
 80054aa:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80054ac:	4894      	ldr	r0, [pc, #592]	; (8005700 <loadMenuTexts+0x958>)
 80054ae:	f7fb f965 	bl	800077c <copyText>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a93      	ldr	r2, [pc, #588]	; (8005704 <loadMenuTexts+0x95c>)
 80054b6:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80054b8:	4893      	ldr	r0, [pc, #588]	; (8005708 <loadMenuTexts+0x960>)
 80054ba:	f7fb f95f 	bl	800077c <copyText>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a92      	ldr	r2, [pc, #584]	; (800570c <loadMenuTexts+0x964>)
 80054c2:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80054c4:	4892      	ldr	r0, [pc, #584]	; (8005710 <loadMenuTexts+0x968>)
 80054c6:	f7fb f959 	bl	800077c <copyText>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a91      	ldr	r2, [pc, #580]	; (8005714 <loadMenuTexts+0x96c>)
 80054ce:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80054d0:	4891      	ldr	r0, [pc, #580]	; (8005718 <loadMenuTexts+0x970>)
 80054d2:	f7fb f953 	bl	800077c <copyText>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a90      	ldr	r2, [pc, #576]	; (800571c <loadMenuTexts+0x974>)
 80054da:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80054dc:	4890      	ldr	r0, [pc, #576]	; (8005720 <loadMenuTexts+0x978>)
 80054de:	f7fb f94d 	bl	800077c <copyText>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a8f      	ldr	r2, [pc, #572]	; (8005724 <loadMenuTexts+0x97c>)
 80054e6:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80054e8:	488f      	ldr	r0, [pc, #572]	; (8005728 <loadMenuTexts+0x980>)
 80054ea:	f7fb f947 	bl	800077c <copyText>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4a8e      	ldr	r2, [pc, #568]	; (800572c <loadMenuTexts+0x984>)
 80054f2:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80054f4:	488e      	ldr	r0, [pc, #568]	; (8005730 <loadMenuTexts+0x988>)
 80054f6:	f7fb f941 	bl	800077c <copyText>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4a8d      	ldr	r2, [pc, #564]	; (8005734 <loadMenuTexts+0x98c>)
 80054fe:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005500:	488d      	ldr	r0, [pc, #564]	; (8005738 <loadMenuTexts+0x990>)
 8005502:	f7fb f93b 	bl	800077c <copyText>
 8005506:	4603      	mov	r3, r0
 8005508:	4a8c      	ldr	r2, [pc, #560]	; (800573c <loadMenuTexts+0x994>)
 800550a:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 800550c:	488c      	ldr	r0, [pc, #560]	; (8005740 <loadMenuTexts+0x998>)
 800550e:	f7fb f935 	bl	800077c <copyText>
 8005512:	4603      	mov	r3, r0
 8005514:	4a8b      	ldr	r2, [pc, #556]	; (8005744 <loadMenuTexts+0x99c>)
 8005516:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005518:	488b      	ldr	r0, [pc, #556]	; (8005748 <loadMenuTexts+0x9a0>)
 800551a:	f7fb f92f 	bl	800077c <copyText>
 800551e:	4603      	mov	r3, r0
 8005520:	4a8a      	ldr	r2, [pc, #552]	; (800574c <loadMenuTexts+0x9a4>)
 8005522:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005524:	488a      	ldr	r0, [pc, #552]	; (8005750 <loadMenuTexts+0x9a8>)
 8005526:	f7fb f929 	bl	800077c <copyText>
 800552a:	4603      	mov	r3, r0
 800552c:	4a89      	ldr	r2, [pc, #548]	; (8005754 <loadMenuTexts+0x9ac>)
 800552e:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005530:	4889      	ldr	r0, [pc, #548]	; (8005758 <loadMenuTexts+0x9b0>)
 8005532:	f7fb f923 	bl	800077c <copyText>
 8005536:	4603      	mov	r3, r0
 8005538:	4a88      	ldr	r2, [pc, #544]	; (800575c <loadMenuTexts+0x9b4>)
 800553a:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 800553c:	4888      	ldr	r0, [pc, #544]	; (8005760 <loadMenuTexts+0x9b8>)
 800553e:	f7fb f91d 	bl	800077c <copyText>
 8005542:	4603      	mov	r3, r0
 8005544:	4a87      	ldr	r2, [pc, #540]	; (8005764 <loadMenuTexts+0x9bc>)
 8005546:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005548:	4887      	ldr	r0, [pc, #540]	; (8005768 <loadMenuTexts+0x9c0>)
 800554a:	f7fb f917 	bl	800077c <copyText>
 800554e:	4603      	mov	r3, r0
 8005550:	4a86      	ldr	r2, [pc, #536]	; (800576c <loadMenuTexts+0x9c4>)
 8005552:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005554:	4886      	ldr	r0, [pc, #536]	; (8005770 <loadMenuTexts+0x9c8>)
 8005556:	f7fb f911 	bl	800077c <copyText>
 800555a:	4603      	mov	r3, r0
 800555c:	4a85      	ldr	r2, [pc, #532]	; (8005774 <loadMenuTexts+0x9cc>)
 800555e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005560:	4885      	ldr	r0, [pc, #532]	; (8005778 <loadMenuTexts+0x9d0>)
 8005562:	f7fb f90b 	bl	800077c <copyText>
 8005566:	4603      	mov	r3, r0
 8005568:	4a84      	ldr	r2, [pc, #528]	; (800577c <loadMenuTexts+0x9d4>)
 800556a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 800556c:	4884      	ldr	r0, [pc, #528]	; (8005780 <loadMenuTexts+0x9d8>)
 800556e:	f7fb f905 	bl	800077c <copyText>
 8005572:	4603      	mov	r3, r0
 8005574:	4a83      	ldr	r2, [pc, #524]	; (8005784 <loadMenuTexts+0x9dc>)
 8005576:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005578:	4883      	ldr	r0, [pc, #524]	; (8005788 <loadMenuTexts+0x9e0>)
 800557a:	f7fb f8ff 	bl	800077c <copyText>
 800557e:	4603      	mov	r3, r0
 8005580:	4a82      	ldr	r2, [pc, #520]	; (800578c <loadMenuTexts+0x9e4>)
 8005582:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005584:	4882      	ldr	r0, [pc, #520]	; (8005790 <loadMenuTexts+0x9e8>)
 8005586:	f7fb f8f9 	bl	800077c <copyText>
 800558a:	4603      	mov	r3, r0
 800558c:	4a81      	ldr	r2, [pc, #516]	; (8005794 <loadMenuTexts+0x9ec>)
 800558e:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005590:	4881      	ldr	r0, [pc, #516]	; (8005798 <loadMenuTexts+0x9f0>)
 8005592:	f7fb f8f3 	bl	800077c <copyText>
 8005596:	4603      	mov	r3, r0
 8005598:	4a80      	ldr	r2, [pc, #512]	; (800579c <loadMenuTexts+0x9f4>)
 800559a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 800559c:	4880      	ldr	r0, [pc, #512]	; (80057a0 <loadMenuTexts+0x9f8>)
 800559e:	f7fb f8ed 	bl	800077c <copyText>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a7f      	ldr	r2, [pc, #508]	; (80057a4 <loadMenuTexts+0x9fc>)
 80055a6:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80055a8:	487f      	ldr	r0, [pc, #508]	; (80057a8 <loadMenuTexts+0xa00>)
 80055aa:	f7fb f8e7 	bl	800077c <copyText>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4a7e      	ldr	r2, [pc, #504]	; (80057ac <loadMenuTexts+0xa04>)
 80055b2:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80055b4:	487e      	ldr	r0, [pc, #504]	; (80057b0 <loadMenuTexts+0xa08>)
 80055b6:	f7fb f8e1 	bl	800077c <copyText>
 80055ba:	4603      	mov	r3, r0
 80055bc:	4a7d      	ldr	r2, [pc, #500]	; (80057b4 <loadMenuTexts+0xa0c>)
 80055be:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80055c0:	487d      	ldr	r0, [pc, #500]	; (80057b8 <loadMenuTexts+0xa10>)
 80055c2:	f7fb f8db 	bl	800077c <copyText>
 80055c6:	4603      	mov	r3, r0
 80055c8:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <loadMenuTexts+0xa14>)
 80055ca:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80055cc:	487c      	ldr	r0, [pc, #496]	; (80057c0 <loadMenuTexts+0xa18>)
 80055ce:	f7fb f8d5 	bl	800077c <copyText>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4a7b      	ldr	r2, [pc, #492]	; (80057c4 <loadMenuTexts+0xa1c>)
 80055d6:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80055d8:	487b      	ldr	r0, [pc, #492]	; (80057c8 <loadMenuTexts+0xa20>)
 80055da:	f7fb f8cf 	bl	800077c <copyText>
 80055de:	4603      	mov	r3, r0
 80055e0:	4a7a      	ldr	r2, [pc, #488]	; (80057cc <loadMenuTexts+0xa24>)
 80055e2:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80055e4:	487a      	ldr	r0, [pc, #488]	; (80057d0 <loadMenuTexts+0xa28>)
 80055e6:	f7fb f8c9 	bl	800077c <copyText>
 80055ea:	4603      	mov	r3, r0
 80055ec:	4a79      	ldr	r2, [pc, #484]	; (80057d4 <loadMenuTexts+0xa2c>)
 80055ee:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80055f0:	4879      	ldr	r0, [pc, #484]	; (80057d8 <loadMenuTexts+0xa30>)
 80055f2:	f7fb f8c3 	bl	800077c <copyText>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4a78      	ldr	r2, [pc, #480]	; (80057dc <loadMenuTexts+0xa34>)
 80055fa:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80055fc:	4878      	ldr	r0, [pc, #480]	; (80057e0 <loadMenuTexts+0xa38>)
 80055fe:	f7fb f8bd 	bl	800077c <copyText>
 8005602:	4603      	mov	r3, r0
 8005604:	4a77      	ldr	r2, [pc, #476]	; (80057e4 <loadMenuTexts+0xa3c>)
 8005606:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005608:	4877      	ldr	r0, [pc, #476]	; (80057e8 <loadMenuTexts+0xa40>)
 800560a:	f7fb f8b7 	bl	800077c <copyText>
 800560e:	4603      	mov	r3, r0
 8005610:	4a76      	ldr	r2, [pc, #472]	; (80057ec <loadMenuTexts+0xa44>)
 8005612:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005614:	4876      	ldr	r0, [pc, #472]	; (80057f0 <loadMenuTexts+0xa48>)
 8005616:	f7fb f8b1 	bl	800077c <copyText>
 800561a:	4603      	mov	r3, r0
 800561c:	4a75      	ldr	r2, [pc, #468]	; (80057f4 <loadMenuTexts+0xa4c>)
 800561e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005620:	4875      	ldr	r0, [pc, #468]	; (80057f8 <loadMenuTexts+0xa50>)
 8005622:	f7fb f8ab 	bl	800077c <copyText>
 8005626:	4603      	mov	r3, r0
 8005628:	4a74      	ldr	r2, [pc, #464]	; (80057fc <loadMenuTexts+0xa54>)
 800562a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 800562c:	4874      	ldr	r0, [pc, #464]	; (8005800 <loadMenuTexts+0xa58>)
 800562e:	f7fb f8a5 	bl	800077c <copyText>
 8005632:	4603      	mov	r3, r0
 8005634:	4a73      	ldr	r2, [pc, #460]	; (8005804 <loadMenuTexts+0xa5c>)
 8005636:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005638:	4873      	ldr	r0, [pc, #460]	; (8005808 <loadMenuTexts+0xa60>)
 800563a:	f7fb f89f 	bl	800077c <copyText>
 800563e:	4603      	mov	r3, r0
 8005640:	4a72      	ldr	r2, [pc, #456]	; (800580c <loadMenuTexts+0xa64>)
 8005642:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005644:	4872      	ldr	r0, [pc, #456]	; (8005810 <loadMenuTexts+0xa68>)
 8005646:	f7fb f899 	bl	800077c <copyText>
 800564a:	4603      	mov	r3, r0
 800564c:	4a71      	ldr	r2, [pc, #452]	; (8005814 <loadMenuTexts+0xa6c>)
 800564e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005650:	4871      	ldr	r0, [pc, #452]	; (8005818 <loadMenuTexts+0xa70>)
 8005652:	f7fb f893 	bl	800077c <copyText>
 8005656:	e0e1      	b.n	800581c <loadMenuTexts+0xa74>
 8005658:	200004c0 	.word	0x200004c0
 800565c:	20000d9c 	.word	0x20000d9c
 8005660:	200004d0 	.word	0x200004d0
 8005664:	20000da0 	.word	0x20000da0
 8005668:	200004e0 	.word	0x200004e0
 800566c:	20000da4 	.word	0x20000da4
 8005670:	200004f0 	.word	0x200004f0
 8005674:	20000da8 	.word	0x20000da8
 8005678:	20000500 	.word	0x20000500
 800567c:	20000dac 	.word	0x20000dac
 8005680:	20000510 	.word	0x20000510
 8005684:	20000db0 	.word	0x20000db0
 8005688:	20000520 	.word	0x20000520
 800568c:	20000db4 	.word	0x20000db4
 8005690:	20000530 	.word	0x20000530
 8005694:	20000db8 	.word	0x20000db8
 8005698:	20000540 	.word	0x20000540
 800569c:	20000dbc 	.word	0x20000dbc
 80056a0:	20000550 	.word	0x20000550
 80056a4:	20000dc0 	.word	0x20000dc0
 80056a8:	20000560 	.word	0x20000560
 80056ac:	20000dc4 	.word	0x20000dc4
 80056b0:	20000570 	.word	0x20000570
 80056b4:	20000dc8 	.word	0x20000dc8
 80056b8:	20000580 	.word	0x20000580
 80056bc:	20000dcc 	.word	0x20000dcc
 80056c0:	20000590 	.word	0x20000590
 80056c4:	20000dd0 	.word	0x20000dd0
 80056c8:	200005a0 	.word	0x200005a0
 80056cc:	20000dd4 	.word	0x20000dd4
 80056d0:	200005b0 	.word	0x200005b0
 80056d4:	20000dd8 	.word	0x20000dd8
 80056d8:	200005c0 	.word	0x200005c0
 80056dc:	20000ddc 	.word	0x20000ddc
 80056e0:	200005d0 	.word	0x200005d0
 80056e4:	20000de0 	.word	0x20000de0
 80056e8:	200005e0 	.word	0x200005e0
 80056ec:	20000de4 	.word	0x20000de4
 80056f0:	200005f0 	.word	0x200005f0
 80056f4:	20000de8 	.word	0x20000de8
 80056f8:	20000600 	.word	0x20000600
 80056fc:	20000dec 	.word	0x20000dec
 8005700:	20000610 	.word	0x20000610
 8005704:	20000df4 	.word	0x20000df4
 8005708:	20000620 	.word	0x20000620
 800570c:	20000df8 	.word	0x20000df8
 8005710:	20000630 	.word	0x20000630
 8005714:	20000dfc 	.word	0x20000dfc
 8005718:	20000640 	.word	0x20000640
 800571c:	20000e00 	.word	0x20000e00
 8005720:	20000650 	.word	0x20000650
 8005724:	20000e04 	.word	0x20000e04
 8005728:	20000660 	.word	0x20000660
 800572c:	20000e08 	.word	0x20000e08
 8005730:	20000670 	.word	0x20000670
 8005734:	20000e0c 	.word	0x20000e0c
 8005738:	20000680 	.word	0x20000680
 800573c:	20000e10 	.word	0x20000e10
 8005740:	20000690 	.word	0x20000690
 8005744:	20000e14 	.word	0x20000e14
 8005748:	200006a0 	.word	0x200006a0
 800574c:	20000e18 	.word	0x20000e18
 8005750:	200006b0 	.word	0x200006b0
 8005754:	20000e1c 	.word	0x20000e1c
 8005758:	200006c0 	.word	0x200006c0
 800575c:	20000e24 	.word	0x20000e24
 8005760:	200006d0 	.word	0x200006d0
 8005764:	20000e2c 	.word	0x20000e2c
 8005768:	200006e0 	.word	0x200006e0
 800576c:	20000e30 	.word	0x20000e30
 8005770:	200006f0 	.word	0x200006f0
 8005774:	20000e34 	.word	0x20000e34
 8005778:	20000700 	.word	0x20000700
 800577c:	20000e38 	.word	0x20000e38
 8005780:	20000710 	.word	0x20000710
 8005784:	20000e3c 	.word	0x20000e3c
 8005788:	20000720 	.word	0x20000720
 800578c:	20000e40 	.word	0x20000e40
 8005790:	20000730 	.word	0x20000730
 8005794:	20000e44 	.word	0x20000e44
 8005798:	20000740 	.word	0x20000740
 800579c:	20000e48 	.word	0x20000e48
 80057a0:	20000750 	.word	0x20000750
 80057a4:	20000e4c 	.word	0x20000e4c
 80057a8:	20000760 	.word	0x20000760
 80057ac:	20000e50 	.word	0x20000e50
 80057b0:	20000770 	.word	0x20000770
 80057b4:	20000e54 	.word	0x20000e54
 80057b8:	20000780 	.word	0x20000780
 80057bc:	20000e58 	.word	0x20000e58
 80057c0:	20000790 	.word	0x20000790
 80057c4:	20000e5c 	.word	0x20000e5c
 80057c8:	200007a0 	.word	0x200007a0
 80057cc:	20000e60 	.word	0x20000e60
 80057d0:	200007b0 	.word	0x200007b0
 80057d4:	20000e64 	.word	0x20000e64
 80057d8:	200007c0 	.word	0x200007c0
 80057dc:	20000e68 	.word	0x20000e68
 80057e0:	200007d0 	.word	0x200007d0
 80057e4:	20000e6c 	.word	0x20000e6c
 80057e8:	200007e0 	.word	0x200007e0
 80057ec:	20000e70 	.word	0x20000e70
 80057f0:	200007f0 	.word	0x200007f0
 80057f4:	20000e74 	.word	0x20000e74
 80057f8:	20000800 	.word	0x20000800
 80057fc:	20000e78 	.word	0x20000e78
 8005800:	20000810 	.word	0x20000810
 8005804:	20000e7c 	.word	0x20000e7c
 8005808:	20000820 	.word	0x20000820
 800580c:	20000e80 	.word	0x20000e80
 8005810:	20000830 	.word	0x20000830
 8005814:	20000e84 	.word	0x20000e84
 8005818:	20000840 	.word	0x20000840
 800581c:	4603      	mov	r3, r0
 800581e:	4a27      	ldr	r2, [pc, #156]	; (80058bc <loadMenuTexts+0xb14>)
 8005820:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005822:	4827      	ldr	r0, [pc, #156]	; (80058c0 <loadMenuTexts+0xb18>)
 8005824:	f7fa ffaa 	bl	800077c <copyText>
 8005828:	4603      	mov	r3, r0
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <loadMenuTexts+0xb1c>)
 800582c:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800582e:	4826      	ldr	r0, [pc, #152]	; (80058c8 <loadMenuTexts+0xb20>)
 8005830:	f7fa ffa4 	bl	800077c <copyText>
 8005834:	4603      	mov	r3, r0
 8005836:	4a25      	ldr	r2, [pc, #148]	; (80058cc <loadMenuTexts+0xb24>)
 8005838:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800583a:	4825      	ldr	r0, [pc, #148]	; (80058d0 <loadMenuTexts+0xb28>)
 800583c:	f7fa ff9e 	bl	800077c <copyText>
 8005840:	4603      	mov	r3, r0
 8005842:	4a24      	ldr	r2, [pc, #144]	; (80058d4 <loadMenuTexts+0xb2c>)
 8005844:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005846:	4824      	ldr	r0, [pc, #144]	; (80058d8 <loadMenuTexts+0xb30>)
 8005848:	f7fa ff98 	bl	800077c <copyText>
 800584c:	4603      	mov	r3, r0
 800584e:	4a23      	ldr	r2, [pc, #140]	; (80058dc <loadMenuTexts+0xb34>)
 8005850:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005852:	4823      	ldr	r0, [pc, #140]	; (80058e0 <loadMenuTexts+0xb38>)
 8005854:	f7fa ff92 	bl	800077c <copyText>
 8005858:	4603      	mov	r3, r0
 800585a:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <loadMenuTexts+0xb3c>)
 800585c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800585e:	4822      	ldr	r0, [pc, #136]	; (80058e8 <loadMenuTexts+0xb40>)
 8005860:	f7fa ff8c 	bl	800077c <copyText>
 8005864:	4603      	mov	r3, r0
 8005866:	4a21      	ldr	r2, [pc, #132]	; (80058ec <loadMenuTexts+0xb44>)
 8005868:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800586a:	4821      	ldr	r0, [pc, #132]	; (80058f0 <loadMenuTexts+0xb48>)
 800586c:	f7fa ff86 	bl	800077c <copyText>
 8005870:	4603      	mov	r3, r0
 8005872:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <loadMenuTexts+0xb4c>)
 8005874:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005876:	4820      	ldr	r0, [pc, #128]	; (80058f8 <loadMenuTexts+0xb50>)
 8005878:	f7fa ff80 	bl	800077c <copyText>
 800587c:	4603      	mov	r3, r0
 800587e:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <loadMenuTexts+0xb54>)
 8005880:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005882:	481f      	ldr	r0, [pc, #124]	; (8005900 <loadMenuTexts+0xb58>)
 8005884:	f7fa ff7a 	bl	800077c <copyText>
 8005888:	4603      	mov	r3, r0
 800588a:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <loadMenuTexts+0xb5c>)
 800588c:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800588e:	481e      	ldr	r0, [pc, #120]	; (8005908 <loadMenuTexts+0xb60>)
 8005890:	f7fa ff74 	bl	800077c <copyText>
 8005894:	4603      	mov	r3, r0
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <loadMenuTexts+0xb64>)
 8005898:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800589a:	481d      	ldr	r0, [pc, #116]	; (8005910 <loadMenuTexts+0xb68>)
 800589c:	f7fa ff6e 	bl	800077c <copyText>
 80058a0:	4603      	mov	r3, r0
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <loadMenuTexts+0xb6c>)
 80058a4:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80058a6:	481c      	ldr	r0, [pc, #112]	; (8005918 <loadMenuTexts+0xb70>)
 80058a8:	f7fa ff68 	bl	800077c <copyText>
 80058ac:	4603      	mov	r3, r0
 80058ae:	4a1b      	ldr	r2, [pc, #108]	; (800591c <loadMenuTexts+0xb74>)
 80058b0:	6013      	str	r3, [r2, #0]
}
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000e88 	.word	0x20000e88
 80058c0:	20000850 	.word	0x20000850
 80058c4:	20000e8c 	.word	0x20000e8c
 80058c8:	20000860 	.word	0x20000860
 80058cc:	20000e90 	.word	0x20000e90
 80058d0:	20000870 	.word	0x20000870
 80058d4:	20000e94 	.word	0x20000e94
 80058d8:	20000880 	.word	0x20000880
 80058dc:	20000e98 	.word	0x20000e98
 80058e0:	20000890 	.word	0x20000890
 80058e4:	20000e9c 	.word	0x20000e9c
 80058e8:	200008a0 	.word	0x200008a0
 80058ec:	20000ea8 	.word	0x20000ea8
 80058f0:	200008b0 	.word	0x200008b0
 80058f4:	20000eac 	.word	0x20000eac
 80058f8:	200008c0 	.word	0x200008c0
 80058fc:	20000eb0 	.word	0x20000eb0
 8005900:	200008d0 	.word	0x200008d0
 8005904:	20000eb4 	.word	0x20000eb4
 8005908:	200008e0 	.word	0x200008e0
 800590c:	20000eb8 	.word	0x20000eb8
 8005910:	200008f0 	.word	0x200008f0
 8005914:	20000ebc 	.word	0x20000ebc
 8005918:	20000900 	.word	0x20000900
 800591c:	20000ec0 	.word	0x20000ec0

08005920 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d105      	bne.n	800593c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005930:	4a22      	ldr	r2, [pc, #136]	; (80059bc <lcdUpdate+0x9c>)
 8005932:	2101      	movs	r1, #1
 8005934:	2002      	movs	r0, #2
 8005936:	f7fa fe97 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800593a:	e03b      	b.n	80059b4 <lcdUpdate+0x94>
	} else if(y==2) {
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d105      	bne.n	800594e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <lcdUpdate+0x9c>)
 8005944:	2102      	movs	r1, #2
 8005946:	2002      	movs	r0, #2
 8005948:	f7fa fe8e 	bl	8000668 <lcd_print>
}
 800594c:	e032      	b.n	80059b4 <lcdUpdate+0x94>
	} else if(y==3) {
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d105      	bne.n	8005960 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <lcdUpdate+0x9c>)
 8005956:	2103      	movs	r1, #3
 8005958:	2002      	movs	r0, #2
 800595a:	f7fa fe85 	bl	8000668 <lcd_print>
}
 800595e:	e029      	b.n	80059b4 <lcdUpdate+0x94>
	} else if(y==4) {
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d105      	bne.n	8005972 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <lcdUpdate+0x9c>)
 8005968:	2104      	movs	r1, #4
 800596a:	2002      	movs	r0, #2
 800596c:	f7fa fe7c 	bl	8000668 <lcd_print>
}
 8005970:	e020      	b.n	80059b4 <lcdUpdate+0x94>
	} else if(y==5) {
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d105      	bne.n	8005984 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005978:	4a10      	ldr	r2, [pc, #64]	; (80059bc <lcdUpdate+0x9c>)
 800597a:	2105      	movs	r1, #5
 800597c:	2002      	movs	r0, #2
 800597e:	f7fa fe73 	bl	8000668 <lcd_print>
}
 8005982:	e017      	b.n	80059b4 <lcdUpdate+0x94>
	} else if(y==6) {
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	2b06      	cmp	r3, #6
 8005988:	d105      	bne.n	8005996 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800598a:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <lcdUpdate+0x9c>)
 800598c:	2106      	movs	r1, #6
 800598e:	2002      	movs	r0, #2
 8005990:	f7fa fe6a 	bl	8000668 <lcd_print>
}
 8005994:	e00e      	b.n	80059b4 <lcdUpdate+0x94>
	} else if (y==7) {
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	2b07      	cmp	r3, #7
 800599a:	d10b      	bne.n	80059b4 <lcdUpdate+0x94>
		lcd_clear();
 800599c:	f7fa fe90 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80059a0:	4a07      	ldr	r2, [pc, #28]	; (80059c0 <lcdUpdate+0xa0>)
 80059a2:	2101      	movs	r1, #1
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7fa fe5f 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80059aa:	4a06      	ldr	r2, [pc, #24]	; (80059c4 <lcdUpdate+0xa4>)
 80059ac:	2101      	movs	r1, #1
 80059ae:	2002      	movs	r0, #2
 80059b0:	f7fa fe5a 	bl	8000668 <lcd_print>
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	0800dc94 	.word	0x0800dc94
 80059c0:	0800e5c8 	.word	0x0800e5c8
 80059c4:	0800e5dc 	.word	0x0800e5dc

080059c8 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d11d      	bne.n	8005a14 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80059d8:	4b62      	ldr	r3, [pc, #392]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80059e0:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <hataKoduLcdGoster+0x1a0>)
 80059e2:	2101      	movs	r1, #1
 80059e4:	2001      	movs	r0, #1
 80059e6:	f7fa fe3f 	bl	8000668 <lcd_print>
 80059ea:	e008      	b.n	80059fe <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80059ec:	4b5d      	ldr	r3, [pc, #372]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d104      	bne.n	80059fe <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059f4:	4a5d      	ldr	r2, [pc, #372]	; (8005b6c <hataKoduLcdGoster+0x1a4>)
 80059f6:	2101      	movs	r1, #1
 80059f8:	2001      	movs	r0, #1
 80059fa:	f7fa fe35 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80059fe:	4a5c      	ldr	r2, [pc, #368]	; (8005b70 <hataKoduLcdGoster+0x1a8>)
 8005a00:	2101      	movs	r1, #1
 8005a02:	2002      	movs	r0, #2
 8005a04:	f7fa fe30 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a08:	4a5a      	ldr	r2, [pc, #360]	; (8005b74 <hataKoduLcdGoster+0x1ac>)
 8005a0a:	2107      	movs	r1, #7
 8005a0c:	2002      	movs	r0, #2
 8005a0e:	f7fa fe2b 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005a12:	e0a3      	b.n	8005b5c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d11d      	bne.n	8005a56 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005a1a:	4b52      	ldr	r3, [pc, #328]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d105      	bne.n	8005a2e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a22:	4a51      	ldr	r2, [pc, #324]	; (8005b68 <hataKoduLcdGoster+0x1a0>)
 8005a24:	2101      	movs	r1, #1
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7fa fe1e 	bl	8000668 <lcd_print>
 8005a2c:	e008      	b.n	8005a40 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005a2e:	4b4d      	ldr	r3, [pc, #308]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d104      	bne.n	8005a40 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a36:	4a4d      	ldr	r2, [pc, #308]	; (8005b6c <hataKoduLcdGoster+0x1a4>)
 8005a38:	2101      	movs	r1, #1
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f7fa fe14 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 8005a40:	4a4d      	ldr	r2, [pc, #308]	; (8005b78 <hataKoduLcdGoster+0x1b0>)
 8005a42:	2102      	movs	r1, #2
 8005a44:	2002      	movs	r0, #2
 8005a46:	f7fa fe0f 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a4a:	4a4a      	ldr	r2, [pc, #296]	; (8005b74 <hataKoduLcdGoster+0x1ac>)
 8005a4c:	2107      	movs	r1, #7
 8005a4e:	2002      	movs	r0, #2
 8005a50:	f7fa fe0a 	bl	8000668 <lcd_print>
}
 8005a54:	e082      	b.n	8005b5c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d11d      	bne.n	8005a98 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005a5c:	4b41      	ldr	r3, [pc, #260]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a64:	4a40      	ldr	r2, [pc, #256]	; (8005b68 <hataKoduLcdGoster+0x1a0>)
 8005a66:	2101      	movs	r1, #1
 8005a68:	2001      	movs	r0, #1
 8005a6a:	f7fa fdfd 	bl	8000668 <lcd_print>
 8005a6e:	e008      	b.n	8005a82 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005a70:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d104      	bne.n	8005a82 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a78:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <hataKoduLcdGoster+0x1a4>)
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	f7fa fdf3 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 8005a82:	4a3e      	ldr	r2, [pc, #248]	; (8005b7c <hataKoduLcdGoster+0x1b4>)
 8005a84:	2103      	movs	r1, #3
 8005a86:	2002      	movs	r0, #2
 8005a88:	f7fa fdee 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a8c:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <hataKoduLcdGoster+0x1ac>)
 8005a8e:	2107      	movs	r1, #7
 8005a90:	2002      	movs	r0, #2
 8005a92:	f7fa fde9 	bl	8000668 <lcd_print>
}
 8005a96:	e061      	b.n	8005b5c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d11d      	bne.n	8005ada <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005a9e:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d105      	bne.n	8005ab2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005aa6:	4a30      	ldr	r2, [pc, #192]	; (8005b68 <hataKoduLcdGoster+0x1a0>)
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	2001      	movs	r0, #1
 8005aac:	f7fa fddc 	bl	8000668 <lcd_print>
 8005ab0:	e008      	b.n	8005ac4 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d104      	bne.n	8005ac4 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005aba:	4a2c      	ldr	r2, [pc, #176]	; (8005b6c <hataKoduLcdGoster+0x1a4>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f7fa fdd2 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 8005ac4:	4a2e      	ldr	r2, [pc, #184]	; (8005b80 <hataKoduLcdGoster+0x1b8>)
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	2002      	movs	r0, #2
 8005aca:	f7fa fdcd 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <hataKoduLcdGoster+0x1ac>)
 8005ad0:	2107      	movs	r1, #7
 8005ad2:	2002      	movs	r0, #2
 8005ad4:	f7fa fdc8 	bl	8000668 <lcd_print>
}
 8005ad8:	e040      	b.n	8005b5c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d11d      	bne.n	8005b1c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <hataKoduLcdGoster+0x1a0>)
 8005aea:	2101      	movs	r1, #1
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7fa fdbb 	bl	8000668 <lcd_print>
 8005af2:	e008      	b.n	8005b06 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005af4:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d104      	bne.n	8005b06 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <hataKoduLcdGoster+0x1a4>)
 8005afe:	2101      	movs	r1, #1
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7fa fdb1 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <hataKoduLcdGoster+0x1bc>)
 8005b08:	2105      	movs	r1, #5
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	f7fa fdac 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005b10:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <hataKoduLcdGoster+0x1ac>)
 8005b12:	2107      	movs	r1, #7
 8005b14:	2002      	movs	r0, #2
 8005b16:	f7fa fda7 	bl	8000668 <lcd_print>
}
 8005b1a:	e01f      	b.n	8005b5c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d11c      	bne.n	8005b5c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005b2a:	4a0f      	ldr	r2, [pc, #60]	; (8005b68 <hataKoduLcdGoster+0x1a0>)
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	2001      	movs	r0, #1
 8005b30:	f7fa fd9a 	bl	8000668 <lcd_print>
 8005b34:	e008      	b.n	8005b48 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <hataKoduLcdGoster+0x19c>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d104      	bne.n	8005b48 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005b3e:	4a0b      	ldr	r2, [pc, #44]	; (8005b6c <hataKoduLcdGoster+0x1a4>)
 8005b40:	2101      	movs	r1, #1
 8005b42:	2001      	movs	r0, #1
 8005b44:	f7fa fd90 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 8005b48:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <hataKoduLcdGoster+0x1c0>)
 8005b4a:	2106      	movs	r1, #6
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f7fa fd8b 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <hataKoduLcdGoster+0x1ac>)
 8005b54:	2107      	movs	r1, #7
 8005b56:	2002      	movs	r0, #2
 8005b58:	f7fa fd86 	bl	8000668 <lcd_print>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20000d51 	.word	0x20000d51
 8005b68:	0800e5f0 	.word	0x0800e5f0
 8005b6c:	0800e604 	.word	0x0800e604
 8005b70:	0800d9d8 	.word	0x0800d9d8
 8005b74:	0800e618 	.word	0x0800e618
 8005b78:	0800d9dc 	.word	0x0800d9dc
 8005b7c:	0800d9e0 	.word	0x0800d9e0
 8005b80:	0800d9e4 	.word	0x0800d9e4
 8005b84:	0800d9e8 	.word	0x0800d9e8
 8005b88:	0800d9ec 	.word	0x0800d9ec

08005b8c <convertAndSendData>:

void convertAndSendData() {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005b92:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <convertAndSendData+0x58>)
 8005b94:	2101      	movs	r1, #1
 8005b96:	2001      	movs	r0, #1
 8005b98:	f7fa fd66 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005b9c:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <convertAndSendData+0x5c>)
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	2002      	movs	r0, #2
 8005ba2:	f7fa fd61 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	e00a      	b.n	8005bc2 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005bac:	f002 fb82 	bl	80082b4 <mergeData>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	490d      	ldr	r1, [pc, #52]	; (8005bec <convertAndSendData+0x60>)
 8005bb6:	480e      	ldr	r0, [pc, #56]	; (8005bf0 <convertAndSendData+0x64>)
 8005bb8:	f7fa fb3c 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	ddf1      	ble.n	8005bac <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005bcc:	f003 fb24 	bl	8009218 <HAL_Delay>
	lcd_clear();
 8005bd0:	f7fa fd76 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 8005bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005bd8:	f003 fb1e 	bl	8009218 <HAL_Delay>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	0800e624 	.word	0x0800e624
 8005be8:	0800e630 	.word	0x0800e630
 8005bec:	20000cd0 	.word	0x20000cd0
 8005bf0:	20000bf0 	.word	0x20000bf0

08005bf4 <eepromKontrol>:

void eepromKontrol(int type) {
 8005bf4:	b5b0      	push	{r4, r5, r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af04      	add	r7, sp, #16
 8005bfa:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005bfc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005c00:	9302      	str	r3, [sp, #8]
 8005c02:	236e      	movs	r3, #110	; 0x6e
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	4b9c      	ldr	r3, [pc, #624]	; (8005e78 <eepromKontrol+0x284>)
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	236e      	movs	r3, #110	; 0x6e
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	21a0      	movs	r1, #160	; 0xa0
 8005c10:	489a      	ldr	r0, [pc, #616]	; (8005e7c <eepromKontrol+0x288>)
 8005c12:	f004 fc85 	bl	800a520 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005c16:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005c1a:	f003 fafd 	bl	8009218 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005c1e:	4b96      	ldr	r3, [pc, #600]	; (8005e78 <eepromKontrol+0x284>)
 8005c20:	78da      	ldrb	r2, [r3, #3]
 8005c22:	4b97      	ldr	r3, [pc, #604]	; (8005e80 <eepromKontrol+0x28c>)
 8005c24:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005c26:	4b94      	ldr	r3, [pc, #592]	; (8005e78 <eepromKontrol+0x284>)
 8005c28:	785a      	ldrb	r2, [r3, #1]
 8005c2a:	4b96      	ldr	r3, [pc, #600]	; (8005e84 <eepromKontrol+0x290>)
 8005c2c:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005c2e:	4b92      	ldr	r3, [pc, #584]	; (8005e78 <eepromKontrol+0x284>)
 8005c30:	789a      	ldrb	r2, [r3, #2]
 8005c32:	4b95      	ldr	r3, [pc, #596]	; (8005e88 <eepromKontrol+0x294>)
 8005c34:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005c36:	4b90      	ldr	r3, [pc, #576]	; (8005e78 <eepromKontrol+0x284>)
 8005c38:	791a      	ldrb	r2, [r3, #4]
 8005c3a:	4b94      	ldr	r3, [pc, #592]	; (8005e8c <eepromKontrol+0x298>)
 8005c3c:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005c3e:	4b8e      	ldr	r3, [pc, #568]	; (8005e78 <eepromKontrol+0x284>)
 8005c40:	795a      	ldrb	r2, [r3, #5]
 8005c42:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <eepromKontrol+0x29c>)
 8005c44:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005c46:	4b8c      	ldr	r3, [pc, #560]	; (8005e78 <eepromKontrol+0x284>)
 8005c48:	799a      	ldrb	r2, [r3, #6]
 8005c4a:	4b92      	ldr	r3, [pc, #584]	; (8005e94 <eepromKontrol+0x2a0>)
 8005c4c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005c4e:	4b8a      	ldr	r3, [pc, #552]	; (8005e78 <eepromKontrol+0x284>)
 8005c50:	79da      	ldrb	r2, [r3, #7]
 8005c52:	4b91      	ldr	r3, [pc, #580]	; (8005e98 <eepromKontrol+0x2a4>)
 8005c54:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005c56:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <eepromKontrol+0x284>)
 8005c58:	7a1a      	ldrb	r2, [r3, #8]
 8005c5a:	4b90      	ldr	r3, [pc, #576]	; (8005e9c <eepromKontrol+0x2a8>)
 8005c5c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005c5e:	4b86      	ldr	r3, [pc, #536]	; (8005e78 <eepromKontrol+0x284>)
 8005c60:	7a5a      	ldrb	r2, [r3, #9]
 8005c62:	4b8f      	ldr	r3, [pc, #572]	; (8005ea0 <eepromKontrol+0x2ac>)
 8005c64:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005c66:	4b84      	ldr	r3, [pc, #528]	; (8005e78 <eepromKontrol+0x284>)
 8005c68:	7a9a      	ldrb	r2, [r3, #10]
 8005c6a:	4b8e      	ldr	r3, [pc, #568]	; (8005ea4 <eepromKontrol+0x2b0>)
 8005c6c:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005c6e:	4b82      	ldr	r3, [pc, #520]	; (8005e78 <eepromKontrol+0x284>)
 8005c70:	7ada      	ldrb	r2, [r3, #11]
 8005c72:	4b8d      	ldr	r3, [pc, #564]	; (8005ea8 <eepromKontrol+0x2b4>)
 8005c74:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005c76:	4b80      	ldr	r3, [pc, #512]	; (8005e78 <eepromKontrol+0x284>)
 8005c78:	7b1a      	ldrb	r2, [r3, #12]
 8005c7a:	4b8c      	ldr	r3, [pc, #560]	; (8005eac <eepromKontrol+0x2b8>)
 8005c7c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005c7e:	4b7e      	ldr	r3, [pc, #504]	; (8005e78 <eepromKontrol+0x284>)
 8005c80:	7b5a      	ldrb	r2, [r3, #13]
 8005c82:	4b8b      	ldr	r3, [pc, #556]	; (8005eb0 <eepromKontrol+0x2bc>)
 8005c84:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005c86:	4b7c      	ldr	r3, [pc, #496]	; (8005e78 <eepromKontrol+0x284>)
 8005c88:	7b9a      	ldrb	r2, [r3, #14]
 8005c8a:	4b8a      	ldr	r3, [pc, #552]	; (8005eb4 <eepromKontrol+0x2c0>)
 8005c8c:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005c8e:	4b7a      	ldr	r3, [pc, #488]	; (8005e78 <eepromKontrol+0x284>)
 8005c90:	7bda      	ldrb	r2, [r3, #15]
 8005c92:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <eepromKontrol+0x2c4>)
 8005c94:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005c96:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <eepromKontrol+0x284>)
 8005c98:	7c1a      	ldrb	r2, [r3, #16]
 8005c9a:	4b88      	ldr	r3, [pc, #544]	; (8005ebc <eepromKontrol+0x2c8>)
 8005c9c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005c9e:	4b76      	ldr	r3, [pc, #472]	; (8005e78 <eepromKontrol+0x284>)
 8005ca0:	7c5a      	ldrb	r2, [r3, #17]
 8005ca2:	4b87      	ldr	r3, [pc, #540]	; (8005ec0 <eepromKontrol+0x2cc>)
 8005ca4:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005ca6:	4b74      	ldr	r3, [pc, #464]	; (8005e78 <eepromKontrol+0x284>)
 8005ca8:	7c9a      	ldrb	r2, [r3, #18]
 8005caa:	4b86      	ldr	r3, [pc, #536]	; (8005ec4 <eepromKontrol+0x2d0>)
 8005cac:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005cae:	4b72      	ldr	r3, [pc, #456]	; (8005e78 <eepromKontrol+0x284>)
 8005cb0:	7cda      	ldrb	r2, [r3, #19]
 8005cb2:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <eepromKontrol+0x2d4>)
 8005cb4:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005cb6:	4b70      	ldr	r3, [pc, #448]	; (8005e78 <eepromKontrol+0x284>)
 8005cb8:	7d1a      	ldrb	r2, [r3, #20]
 8005cba:	4b84      	ldr	r3, [pc, #528]	; (8005ecc <eepromKontrol+0x2d8>)
 8005cbc:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005cbe:	4b6e      	ldr	r3, [pc, #440]	; (8005e78 <eepromKontrol+0x284>)
 8005cc0:	7d5a      	ldrb	r2, [r3, #21]
 8005cc2:	4b83      	ldr	r3, [pc, #524]	; (8005ed0 <eepromKontrol+0x2dc>)
 8005cc4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005cc6:	4b6c      	ldr	r3, [pc, #432]	; (8005e78 <eepromKontrol+0x284>)
 8005cc8:	7d9a      	ldrb	r2, [r3, #22]
 8005cca:	4b82      	ldr	r3, [pc, #520]	; (8005ed4 <eepromKontrol+0x2e0>)
 8005ccc:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005cce:	4b6a      	ldr	r3, [pc, #424]	; (8005e78 <eepromKontrol+0x284>)
 8005cd0:	7dda      	ldrb	r2, [r3, #23]
 8005cd2:	4b81      	ldr	r3, [pc, #516]	; (8005ed8 <eepromKontrol+0x2e4>)
 8005cd4:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005cd6:	4b68      	ldr	r3, [pc, #416]	; (8005e78 <eepromKontrol+0x284>)
 8005cd8:	7e1a      	ldrb	r2, [r3, #24]
 8005cda:	4b80      	ldr	r3, [pc, #512]	; (8005edc <eepromKontrol+0x2e8>)
 8005cdc:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005cde:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <eepromKontrol+0x284>)
 8005ce0:	7e5a      	ldrb	r2, [r3, #25]
 8005ce2:	4b7f      	ldr	r3, [pc, #508]	; (8005ee0 <eepromKontrol+0x2ec>)
 8005ce4:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005ce6:	4b64      	ldr	r3, [pc, #400]	; (8005e78 <eepromKontrol+0x284>)
 8005ce8:	7e9a      	ldrb	r2, [r3, #26]
 8005cea:	4b7e      	ldr	r3, [pc, #504]	; (8005ee4 <eepromKontrol+0x2f0>)
 8005cec:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005cee:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <eepromKontrol+0x284>)
 8005cf0:	7eda      	ldrb	r2, [r3, #27]
 8005cf2:	4b7d      	ldr	r3, [pc, #500]	; (8005ee8 <eepromKontrol+0x2f4>)
 8005cf4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005cf6:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <eepromKontrol+0x284>)
 8005cf8:	7f1a      	ldrb	r2, [r3, #28]
 8005cfa:	4b7c      	ldr	r3, [pc, #496]	; (8005eec <eepromKontrol+0x2f8>)
 8005cfc:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005cfe:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <eepromKontrol+0x284>)
 8005d00:	7f5a      	ldrb	r2, [r3, #29]
 8005d02:	4b7b      	ldr	r3, [pc, #492]	; (8005ef0 <eepromKontrol+0x2fc>)
 8005d04:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005d06:	4b5c      	ldr	r3, [pc, #368]	; (8005e78 <eepromKontrol+0x284>)
 8005d08:	7f9a      	ldrb	r2, [r3, #30]
 8005d0a:	4b7a      	ldr	r3, [pc, #488]	; (8005ef4 <eepromKontrol+0x300>)
 8005d0c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005d0e:	4b5a      	ldr	r3, [pc, #360]	; (8005e78 <eepromKontrol+0x284>)
 8005d10:	7fda      	ldrb	r2, [r3, #31]
 8005d12:	4b79      	ldr	r3, [pc, #484]	; (8005ef8 <eepromKontrol+0x304>)
 8005d14:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005d16:	4b58      	ldr	r3, [pc, #352]	; (8005e78 <eepromKontrol+0x284>)
 8005d18:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005d1c:	4b77      	ldr	r3, [pc, #476]	; (8005efc <eepromKontrol+0x308>)
 8005d1e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005d20:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <eepromKontrol+0x284>)
 8005d22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005d26:	4b76      	ldr	r3, [pc, #472]	; (8005f00 <eepromKontrol+0x30c>)
 8005d28:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005d2a:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <eepromKontrol+0x284>)
 8005d2c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005d30:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <eepromKontrol+0x310>)
 8005d32:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005d34:	4b50      	ldr	r3, [pc, #320]	; (8005e78 <eepromKontrol+0x284>)
 8005d36:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005d3a:	4b73      	ldr	r3, [pc, #460]	; (8005f08 <eepromKontrol+0x314>)
 8005d3c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005d3e:	4b4e      	ldr	r3, [pc, #312]	; (8005e78 <eepromKontrol+0x284>)
 8005d40:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005d44:	4b71      	ldr	r3, [pc, #452]	; (8005f0c <eepromKontrol+0x318>)
 8005d46:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005d48:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <eepromKontrol+0x284>)
 8005d4a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005d4e:	4b70      	ldr	r3, [pc, #448]	; (8005f10 <eepromKontrol+0x31c>)
 8005d50:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005d52:	4b49      	ldr	r3, [pc, #292]	; (8005e78 <eepromKontrol+0x284>)
 8005d54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005d58:	4b6e      	ldr	r3, [pc, #440]	; (8005f14 <eepromKontrol+0x320>)
 8005d5a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005d5c:	4b46      	ldr	r3, [pc, #280]	; (8005e78 <eepromKontrol+0x284>)
 8005d5e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005d62:	4b6d      	ldr	r3, [pc, #436]	; (8005f18 <eepromKontrol+0x324>)
 8005d64:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005d66:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <eepromKontrol+0x284>)
 8005d68:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005d6c:	4b6b      	ldr	r3, [pc, #428]	; (8005f1c <eepromKontrol+0x328>)
 8005d6e:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <eepromKontrol+0x284>)
 8005d72:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005d76:	4b6a      	ldr	r3, [pc, #424]	; (8005f20 <eepromKontrol+0x32c>)
 8005d78:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005d7a:	4b3f      	ldr	r3, [pc, #252]	; (8005e78 <eepromKontrol+0x284>)
 8005d7c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005d80:	4b68      	ldr	r3, [pc, #416]	; (8005f24 <eepromKontrol+0x330>)
 8005d82:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <eepromKontrol+0x284>)
 8005d86:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005d8a:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <eepromKontrol+0x334>)
 8005d8c:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005d8e:	4b3a      	ldr	r3, [pc, #232]	; (8005e78 <eepromKontrol+0x284>)
 8005d90:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d94:	4b65      	ldr	r3, [pc, #404]	; (8005f2c <eepromKontrol+0x338>)
 8005d96:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005d98:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <eepromKontrol+0x284>)
 8005d9a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005d9e:	4b64      	ldr	r3, [pc, #400]	; (8005f30 <eepromKontrol+0x33c>)
 8005da0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005da2:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <eepromKontrol+0x284>)
 8005da4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005da8:	4b62      	ldr	r3, [pc, #392]	; (8005f34 <eepromKontrol+0x340>)
 8005daa:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005dac:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <eepromKontrol+0x284>)
 8005dae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005db2:	4b61      	ldr	r3, [pc, #388]	; (8005f38 <eepromKontrol+0x344>)
 8005db4:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005db6:	4b52      	ldr	r3, [pc, #328]	; (8005f00 <eepromKontrol+0x30c>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fff4 	bl	8004da8 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	; (8005efc <eepromKontrol+0x308>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d902      	bls.n	8005dce <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005dc8:	4b4c      	ldr	r3, [pc, #304]	; (8005efc <eepromKontrol+0x308>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005dce:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <eepromKontrol+0x304>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b09      	cmp	r3, #9
 8005dd4:	d902      	bls.n	8005ddc <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005dd6:	4b48      	ldr	r3, [pc, #288]	; (8005ef8 <eepromKontrol+0x304>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005ddc:	4b45      	ldr	r3, [pc, #276]	; (8005ef4 <eepromKontrol+0x300>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d902      	bls.n	8005dea <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005de4:	4b43      	ldr	r3, [pc, #268]	; (8005ef4 <eepromKontrol+0x300>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005dea:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <eepromKontrol+0x2fc>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b09      	cmp	r3, #9
 8005df0:	d902      	bls.n	8005df8 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005df2:	4b3f      	ldr	r3, [pc, #252]	; (8005ef0 <eepromKontrol+0x2fc>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005df8:	4b3c      	ldr	r3, [pc, #240]	; (8005eec <eepromKontrol+0x2f8>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	d902      	bls.n	8005e06 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005e00:	4b3a      	ldr	r3, [pc, #232]	; (8005eec <eepromKontrol+0x2f8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005e06:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <eepromKontrol+0x290>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d902      	bls.n	8005e14 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <eepromKontrol+0x290>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005e14:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <eepromKontrol+0x294>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d902      	bls.n	8005e22 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <eepromKontrol+0x294>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005e22:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <eepromKontrol+0x298>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d902      	bls.n	8005e30 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <eepromKontrol+0x298>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005e30:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <eepromKontrol+0x29c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d902      	bls.n	8005e3e <eepromKontrol+0x24a>
	    altLimit=1;
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <eepromKontrol+0x29c>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <eepromKontrol+0x2a0>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d902      	bls.n	8005e4c <eepromKontrol+0x258>
	    basincSalteri=1;
 8005e46:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <eepromKontrol+0x2a0>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005e4c:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <eepromKontrol+0x2a4>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d902      	bls.n	8005e5a <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <eepromKontrol+0x2a4>)
 8005e56:	2203      	movs	r2, #3
 8005e58:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005e5a:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <eepromKontrol+0x31c>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d902      	bls.n	8005e68 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <eepromKontrol+0x31c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <eepromKontrol+0x2a8>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d965      	bls.n	8005f3c <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <eepromKontrol+0x2a8>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e061      	b.n	8005f3c <eepromKontrol+0x348>
 8005e78:	20000c38 	.word	0x20000c38
 8005e7c:	20000b54 	.word	0x20000b54
 8005e80:	20000ca6 	.word	0x20000ca6
 8005e84:	20000d31 	.word	0x20000d31
 8005e88:	20000d34 	.word	0x20000d34
 8005e8c:	20000d35 	.word	0x20000d35
 8005e90:	20000d36 	.word	0x20000d36
 8005e94:	20000d37 	.word	0x20000d37
 8005e98:	20000d38 	.word	0x20000d38
 8005e9c:	20000d39 	.word	0x20000d39
 8005ea0:	20000d49 	.word	0x20000d49
 8005ea4:	20000d3a 	.word	0x20000d3a
 8005ea8:	20000d4a 	.word	0x20000d4a
 8005eac:	20000d3b 	.word	0x20000d3b
 8005eb0:	20000d4b 	.word	0x20000d4b
 8005eb4:	20000d3e 	.word	0x20000d3e
 8005eb8:	20000d3f 	.word	0x20000d3f
 8005ebc:	20000d40 	.word	0x20000d40
 8005ec0:	20000d41 	.word	0x20000d41
 8005ec4:	20000d42 	.word	0x20000d42
 8005ec8:	20000d43 	.word	0x20000d43
 8005ecc:	20000d44 	.word	0x20000d44
 8005ed0:	20000d45 	.word	0x20000d45
 8005ed4:	20000d46 	.word	0x20000d46
 8005ed8:	20000d47 	.word	0x20000d47
 8005edc:	20000d48 	.word	0x20000d48
 8005ee0:	20000d4c 	.word	0x20000d4c
 8005ee4:	20000d4e 	.word	0x20000d4e
 8005ee8:	20000d2c 	.word	0x20000d2c
 8005eec:	20000d2d 	.word	0x20000d2d
 8005ef0:	20000d2e 	.word	0x20000d2e
 8005ef4:	200009b4 	.word	0x200009b4
 8005ef8:	200009b5 	.word	0x200009b5
 8005efc:	20000d2f 	.word	0x20000d2f
 8005f00:	20000d51 	.word	0x20000d51
 8005f04:	20000d4f 	.word	0x20000d4f
 8005f08:	20000d3d 	.word	0x20000d3d
 8005f0c:	20000d50 	.word	0x20000d50
 8005f10:	20000d3c 	.word	0x20000d3c
 8005f14:	20000d52 	.word	0x20000d52
 8005f18:	20000d53 	.word	0x20000d53
 8005f1c:	20000d54 	.word	0x20000d54
 8005f20:	20000d55 	.word	0x20000d55
 8005f24:	20000d56 	.word	0x20000d56
 8005f28:	20000d57 	.word	0x20000d57
 8005f2c:	20000d58 	.word	0x20000d58
 8005f30:	20000d59 	.word	0x20000d59
 8005f34:	20000d5a 	.word	0x20000d5a
 8005f38:	20000d5b 	.word	0x20000d5b
	}

	if(kapi1AcSure>5) {
 8005f3c:	4b70      	ldr	r3, [pc, #448]	; (8006100 <eepromKontrol+0x50c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b05      	cmp	r3, #5
 8005f42:	d902      	bls.n	8005f4a <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005f44:	4b6e      	ldr	r3, [pc, #440]	; (8006100 <eepromKontrol+0x50c>)
 8005f46:	2205      	movs	r2, #5
 8005f48:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005f4a:	4b6e      	ldr	r3, [pc, #440]	; (8006104 <eepromKontrol+0x510>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d902      	bls.n	8005f58 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005f52:	4b6c      	ldr	r3, [pc, #432]	; (8006104 <eepromKontrol+0x510>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005f58:	4b6b      	ldr	r3, [pc, #428]	; (8006108 <eepromKontrol+0x514>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	d902      	bls.n	8005f66 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005f60:	4b69      	ldr	r3, [pc, #420]	; (8006108 <eepromKontrol+0x514>)
 8005f62:	2205      	movs	r2, #5
 8005f64:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005f66:	4b69      	ldr	r3, [pc, #420]	; (800610c <eepromKontrol+0x518>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d902      	bls.n	8005f74 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005f6e:	4b67      	ldr	r3, [pc, #412]	; (800610c <eepromKontrol+0x518>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005f74:	4b66      	ldr	r3, [pc, #408]	; (8006110 <eepromKontrol+0x51c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d902      	bls.n	8005f82 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005f7c:	4b64      	ldr	r3, [pc, #400]	; (8006110 <eepromKontrol+0x51c>)
 8005f7e:	2202      	movs	r2, #2
 8005f80:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005f82:	4b64      	ldr	r3, [pc, #400]	; (8006114 <eepromKontrol+0x520>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d902      	bls.n	8005f90 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005f8a:	4b62      	ldr	r3, [pc, #392]	; (8006114 <eepromKontrol+0x520>)
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005f90:	4b61      	ldr	r3, [pc, #388]	; (8006118 <eepromKontrol+0x524>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d902      	bls.n	8005f9e <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005f98:	4b5f      	ldr	r3, [pc, #380]	; (8006118 <eepromKontrol+0x524>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	; (800611c <eepromKontrol+0x528>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d902      	bls.n	8005fac <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005fa6:	4b5d      	ldr	r3, [pc, #372]	; (800611c <eepromKontrol+0x528>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005fac:	4b5c      	ldr	r3, [pc, #368]	; (8006120 <eepromKontrol+0x52c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d902      	bls.n	8005fba <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005fb4:	4b5a      	ldr	r3, [pc, #360]	; (8006120 <eepromKontrol+0x52c>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005fba:	4b5a      	ldr	r3, [pc, #360]	; (8006124 <eepromKontrol+0x530>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d902      	bls.n	8005fc8 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005fc2:	4b58      	ldr	r3, [pc, #352]	; (8006124 <eepromKontrol+0x530>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005fc8:	4b57      	ldr	r3, [pc, #348]	; (8006128 <eepromKontrol+0x534>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d902      	bls.n	8005fd6 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005fd0:	4b55      	ldr	r3, [pc, #340]	; (8006128 <eepromKontrol+0x534>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005fd6:	4b55      	ldr	r3, [pc, #340]	; (800612c <eepromKontrol+0x538>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d902      	bls.n	8005fe4 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005fde:	4b53      	ldr	r3, [pc, #332]	; (800612c <eepromKontrol+0x538>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005fe4:	4b52      	ldr	r3, [pc, #328]	; (8006130 <eepromKontrol+0x53c>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b05      	cmp	r3, #5
 8005fea:	d902      	bls.n	8005ff2 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005fec:	4b50      	ldr	r3, [pc, #320]	; (8006130 <eepromKontrol+0x53c>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005ff2:	4b50      	ldr	r3, [pc, #320]	; (8006134 <eepromKontrol+0x540>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d902      	bls.n	8006000 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005ffa:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <eepromKontrol+0x540>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8006000:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <eepromKontrol+0x544>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b05      	cmp	r3, #5
 8006006:	d902      	bls.n	800600e <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8006008:	4b4b      	ldr	r3, [pc, #300]	; (8006138 <eepromKontrol+0x544>)
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 800600e:	4b4b      	ldr	r3, [pc, #300]	; (800613c <eepromKontrol+0x548>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b05      	cmp	r3, #5
 8006014:	d902      	bls.n	800601c <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8006016:	4b49      	ldr	r3, [pc, #292]	; (800613c <eepromKontrol+0x548>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 800601c:	4b48      	ldr	r3, [pc, #288]	; (8006140 <eepromKontrol+0x54c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2bb4      	cmp	r3, #180	; 0xb4
 8006022:	d902      	bls.n	800602a <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8006024:	4b46      	ldr	r3, [pc, #280]	; (8006140 <eepromKontrol+0x54c>)
 8006026:	223c      	movs	r2, #60	; 0x3c
 8006028:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800602a:	4b46      	ldr	r3, [pc, #280]	; (8006144 <eepromKontrol+0x550>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d902      	bls.n	8006038 <eepromKontrol+0x444>
	    buzzer=0;
 8006032:	4b44      	ldr	r3, [pc, #272]	; (8006144 <eepromKontrol+0x550>)
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8006038:	4b43      	ldr	r3, [pc, #268]	; (8006148 <eepromKontrol+0x554>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d902      	bls.n	8006046 <eepromKontrol+0x452>
	    demoMode=0;
 8006040:	4b41      	ldr	r3, [pc, #260]	; (8006148 <eepromKontrol+0x554>)
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8006046:	4b41      	ldr	r3, [pc, #260]	; (800614c <eepromKontrol+0x558>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d902      	bls.n	8006054 <eepromKontrol+0x460>
	    calismaSayModu=0;
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <eepromKontrol+0x558>)
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8006054:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <eepromKontrol+0x55c>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d902      	bls.n	8006062 <eepromKontrol+0x46e>
	    dilSecim=0;
 800605c:	4b3c      	ldr	r3, [pc, #240]	; (8006150 <eepromKontrol+0x55c>)
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8006062:	4b3c      	ldr	r3, [pc, #240]	; (8006154 <eepromKontrol+0x560>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d902      	bls.n	8006070 <eepromKontrol+0x47c>
		iotMode=0;
 800606a:	4b3a      	ldr	r3, [pc, #232]	; (8006154 <eepromKontrol+0x560>)
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8006070:	4b39      	ldr	r3, [pc, #228]	; (8006158 <eepromKontrol+0x564>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <eepromKontrol+0x568>)
 8006078:	441a      	add	r2, r3
 800607a:	4b39      	ldr	r3, [pc, #228]	; (8006160 <eepromKontrol+0x56c>)
 800607c:	6810      	ldr	r0, [r2, #0]
 800607e:	6851      	ldr	r1, [r2, #4]
 8006080:	6892      	ldr	r2, [r2, #8]
 8006082:	c307      	stmia	r3!, {r0, r1, r2}
	memcpy(wifiSSIDTemp, &eepromData[ssidStartPos], 20);
 8006084:	4b37      	ldr	r3, [pc, #220]	; (8006164 <eepromKontrol+0x570>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	4b34      	ldr	r3, [pc, #208]	; (800615c <eepromKontrol+0x568>)
 800608c:	4413      	add	r3, r2
 800608e:	4a36      	ldr	r2, [pc, #216]	; (8006168 <eepromKontrol+0x574>)
 8006090:	4614      	mov	r4, r2
 8006092:	461d      	mov	r5, r3
 8006094:	6828      	ldr	r0, [r5, #0]
 8006096:	6869      	ldr	r1, [r5, #4]
 8006098:	68aa      	ldr	r2, [r5, #8]
 800609a:	68eb      	ldr	r3, [r5, #12]
 800609c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800609e:	6928      	ldr	r0, [r5, #16]
 80060a0:	6020      	str	r0, [r4, #0]
	memcpy(wifiPassTemp, &eepromData[passStartPos], 20);
 80060a2:	4b32      	ldr	r3, [pc, #200]	; (800616c <eepromKontrol+0x578>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	4b2c      	ldr	r3, [pc, #176]	; (800615c <eepromKontrol+0x568>)
 80060aa:	4413      	add	r3, r2
 80060ac:	4a30      	ldr	r2, [pc, #192]	; (8006170 <eepromKontrol+0x57c>)
 80060ae:	4614      	mov	r4, r2
 80060b0:	461d      	mov	r5, r3
 80060b2:	6828      	ldr	r0, [r5, #0]
 80060b4:	6869      	ldr	r1, [r5, #4]
 80060b6:	68aa      	ldr	r2, [r5, #8]
 80060b8:	68eb      	ldr	r3, [r5, #12]
 80060ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060bc:	6928      	ldr	r0, [r5, #16]
 80060be:	6020      	str	r0, [r4, #0]
	HAL_Delay(500);
 80060c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060c4:	f003 f8a8 	bl	8009218 <HAL_Delay>

	convertToCharArray(wifiSSID, wifiSSIDTemp, 0);
 80060c8:	2200      	movs	r2, #0
 80060ca:	4927      	ldr	r1, [pc, #156]	; (8006168 <eepromKontrol+0x574>)
 80060cc:	4829      	ldr	r0, [pc, #164]	; (8006174 <eepromKontrol+0x580>)
 80060ce:	f7fa fcf5 	bl	8000abc <convertToCharArray>
	HAL_Delay(500);
 80060d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060d6:	f003 f89f 	bl	8009218 <HAL_Delay>
	convertToCharArray(wifiPass, wifiPassTemp, 1);
 80060da:	2201      	movs	r2, #1
 80060dc:	4924      	ldr	r1, [pc, #144]	; (8006170 <eepromKontrol+0x57c>)
 80060de:	4826      	ldr	r0, [pc, #152]	; (8006178 <eepromKontrol+0x584>)
 80060e0:	f7fa fcec 	bl	8000abc <convertToCharArray>

	if(iotMode == 1 && type == 1) {
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <eepromKontrol+0x560>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d104      	bne.n	80060f6 <eepromKontrol+0x502>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <eepromKontrol+0x502>
		convertAndSendData();
 80060f2:	f7ff fd4b 	bl	8005b8c <convertAndSendData>
	}
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bdb0      	pop	{r4, r5, r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000d49 	.word	0x20000d49
 8006104:	20000d3a 	.word	0x20000d3a
 8006108:	20000d4a 	.word	0x20000d4a
 800610c:	20000d3b 	.word	0x20000d3b
 8006110:	20000d3d 	.word	0x20000d3d
 8006114:	20000d4b 	.word	0x20000d4b
 8006118:	20000d3e 	.word	0x20000d3e
 800611c:	20000d3f 	.word	0x20000d3f
 8006120:	20000d40 	.word	0x20000d40
 8006124:	20000d41 	.word	0x20000d41
 8006128:	20000d42 	.word	0x20000d42
 800612c:	20000d43 	.word	0x20000d43
 8006130:	20000d44 	.word	0x20000d44
 8006134:	20000d45 	.word	0x20000d45
 8006138:	20000d46 	.word	0x20000d46
 800613c:	20000d47 	.word	0x20000d47
 8006140:	20000d48 	.word	0x20000d48
 8006144:	20000d4c 	.word	0x20000d4c
 8006148:	20000d4e 	.word	0x20000d4e
 800614c:	20000d50 	.word	0x20000d50
 8006150:	20000d51 	.word	0x20000d51
 8006154:	20000d4f 	.word	0x20000d4f
 8006158:	200009b1 	.word	0x200009b1
 800615c:	20000c38 	.word	0x20000c38
 8006160:	20000cd0 	.word	0x20000cd0
 8006164:	200009b2 	.word	0x200009b2
 8006168:	20000d04 	.word	0x20000d04
 800616c:	200009b3 	.word	0x200009b3
 8006170:	20000d18 	.word	0x20000d18
 8006174:	20000cdc 	.word	0x20000cdc
 8006178:	20000cf0 	.word	0x20000cf0

0800617c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b089      	sub	sp, #36	; 0x24
 8006180:	af04      	add	r7, sp, #16
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8006186:	4b26      	ldr	r3, [pc, #152]	; (8006220 <hata2EEPROM+0xa4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	1e5a      	subs	r2, r3, #1
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <hata2EEPROM+0xa8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4413      	add	r3, r2
 8006192:	4a25      	ldr	r2, [pc, #148]	; (8006228 <hata2EEPROM+0xac>)
 8006194:	5cd3      	ldrb	r3, [r2, r3]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800619a:	f000 f849 	bl	8006230 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800619e:	e000      	b.n	80061a2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80061a0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e012      	b.n	80061ce <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <hata2EEPROM+0xa8>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <hata2EEPROM+0xac>)
 80061b2:	5cd3      	ldrb	r3, [r2, r3]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d107      	bne.n	80061c8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80061b8:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <hata2EEPROM+0xa8>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	4919      	ldr	r1, [pc, #100]	; (8006228 <hata2EEPROM+0xac>)
 80061c2:	79fa      	ldrb	r2, [r7, #7]
 80061c4:	54ca      	strb	r2, [r1, r3]
					break;
 80061c6:	e007      	b.n	80061d8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <hata2EEPROM+0xa4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	dbe7      	blt.n	80061a8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80061d8:	4b12      	ldr	r3, [pc, #72]	; (8006224 <hata2EEPROM+0xa8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	b299      	uxth	r1, r3
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <hata2EEPROM+0xa4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	b298      	uxth	r0, r3
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <hata2EEPROM+0xa8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a0f      	ldr	r2, [pc, #60]	; (8006228 <hata2EEPROM+0xac>)
 80061ea:	4413      	add	r3, r2
 80061ec:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <hata2EEPROM+0xa4>)
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	b292      	uxth	r2, r2
 80061f2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80061f6:	9402      	str	r4, [sp, #8]
 80061f8:	9201      	str	r2, [sp, #4]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	4603      	mov	r3, r0
 80061fe:	460a      	mov	r2, r1
 8006200:	21a0      	movs	r1, #160	; 0xa0
 8006202:	480a      	ldr	r0, [pc, #40]	; (800622c <hata2EEPROM+0xb0>)
 8006204:	f004 f892 	bl	800a32c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8006208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800620c:	f003 f804 	bl	8009218 <HAL_Delay>
	eepromKontrol(1);
 8006210:	2001      	movs	r0, #1
 8006212:	f7ff fcef 	bl	8005bf4 <eepromKontrol>
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	20000938 	.word	0x20000938
 8006224:	2000093c 	.word	0x2000093c
 8006228:	20000c38 	.word	0x20000c38
 800622c:	20000b54 	.word	0x20000b54

08006230 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	e009      	b.n	8006250 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 800623c:	4a0a      	ldr	r2, [pc, #40]	; (8006268 <eepromDataFillWithEmpty+0x38>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <eepromDataFillWithEmpty+0x3c>)
 8006246:	2100      	movs	r1, #0
 8006248:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3301      	adds	r3, #1
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <eepromDataFillWithEmpty+0x40>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	dbf0      	blt.n	800623c <eepromDataFillWithEmpty+0xc>
	}
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000910 	.word	0x20000910
 800626c:	20000c38 	.word	0x20000c38
 8006270:	20000938 	.word	0x20000938

08006274 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
	timer1=millis;
 8006278:	4b47      	ldr	r3, [pc, #284]	; (8006398 <bekle+0x124>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a47      	ldr	r2, [pc, #284]	; (800639c <bekle+0x128>)
 800627e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006280:	e002      	b.n	8006288 <bekle+0x14>
    	butonKontrol = 1;
 8006282:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <bekle+0x12c>)
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006288:	2101      	movs	r1, #1
 800628a:	4846      	ldr	r0, [pc, #280]	; (80063a4 <bekle+0x130>)
 800628c:	f003 fd94 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006290:	4603      	mov	r3, r0
 8006292:	2b01      	cmp	r3, #1
 8006294:	d109      	bne.n	80062aa <bekle+0x36>
 8006296:	4b40      	ldr	r3, [pc, #256]	; (8006398 <bekle+0x124>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b40      	ldr	r3, [pc, #256]	; (800639c <bekle+0x128>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d0ef      	beq.n	8006282 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80062a2:	e002      	b.n	80062aa <bekle+0x36>
    	butonKontrol = 1;
 80062a4:	4b3e      	ldr	r3, [pc, #248]	; (80063a0 <bekle+0x12c>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80062aa:	2108      	movs	r1, #8
 80062ac:	483e      	ldr	r0, [pc, #248]	; (80063a8 <bekle+0x134>)
 80062ae:	f003 fd83 	bl	8009db8 <HAL_GPIO_ReadPin>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d109      	bne.n	80062cc <bekle+0x58>
 80062b8:	4b37      	ldr	r3, [pc, #220]	; (8006398 <bekle+0x124>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b37      	ldr	r3, [pc, #220]	; (800639c <bekle+0x128>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d0ef      	beq.n	80062a4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80062c4:	e002      	b.n	80062cc <bekle+0x58>
    	butonKontrol = 1;
 80062c6:	4b36      	ldr	r3, [pc, #216]	; (80063a0 <bekle+0x12c>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80062cc:	2102      	movs	r1, #2
 80062ce:	4835      	ldr	r0, [pc, #212]	; (80063a4 <bekle+0x130>)
 80062d0:	f003 fd72 	bl	8009db8 <HAL_GPIO_ReadPin>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d109      	bne.n	80062ee <bekle+0x7a>
 80062da:	4b2f      	ldr	r3, [pc, #188]	; (8006398 <bekle+0x124>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b2f      	ldr	r3, [pc, #188]	; (800639c <bekle+0x128>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d0ef      	beq.n	80062c6 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80062e6:	e002      	b.n	80062ee <bekle+0x7a>
    	butonKontrol = 1;
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <bekle+0x12c>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80062ee:	2104      	movs	r1, #4
 80062f0:	482c      	ldr	r0, [pc, #176]	; (80063a4 <bekle+0x130>)
 80062f2:	f003 fd61 	bl	8009db8 <HAL_GPIO_ReadPin>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d109      	bne.n	8006310 <bekle+0x9c>
 80062fc:	4b26      	ldr	r3, [pc, #152]	; (8006398 <bekle+0x124>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b26      	ldr	r3, [pc, #152]	; (800639c <bekle+0x128>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d0ef      	beq.n	80062e8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006308:	e002      	b.n	8006310 <bekle+0x9c>
    	butonKontrol = 1;
 800630a:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <bekle+0x12c>)
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006310:	2108      	movs	r1, #8
 8006312:	4824      	ldr	r0, [pc, #144]	; (80063a4 <bekle+0x130>)
 8006314:	f003 fd50 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006318:	4603      	mov	r3, r0
 800631a:	2b01      	cmp	r3, #1
 800631c:	d109      	bne.n	8006332 <bekle+0xbe>
 800631e:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <bekle+0x124>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <bekle+0x128>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d0ef      	beq.n	800630a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800632a:	e002      	b.n	8006332 <bekle+0xbe>
    	butonKontrol = 1;
 800632c:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <bekle+0x12c>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006332:	2180      	movs	r1, #128	; 0x80
 8006334:	481c      	ldr	r0, [pc, #112]	; (80063a8 <bekle+0x134>)
 8006336:	f003 fd3f 	bl	8009db8 <HAL_GPIO_ReadPin>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <bekle+0xe0>
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <bekle+0x124>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <bekle+0x128>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d0ef      	beq.n	800632c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800634c:	e002      	b.n	8006354 <bekle+0xe0>
    	butonKontrol = 1;
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <bekle+0x12c>)
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006358:	4813      	ldr	r0, [pc, #76]	; (80063a8 <bekle+0x134>)
 800635a:	f003 fd2d 	bl	8009db8 <HAL_GPIO_ReadPin>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <bekle+0x104>
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <bekle+0x124>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <bekle+0x128>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d0ee      	beq.n	800634e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006370:	e002      	b.n	8006378 <bekle+0x104>
    	butonKontrol = 1;
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <bekle+0x12c>)
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800637c:	480a      	ldr	r0, [pc, #40]	; (80063a8 <bekle+0x134>)
 800637e:	f003 fd1b 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <bekle+0x120>
 8006388:	4b03      	ldr	r3, [pc, #12]	; (8006398 <bekle+0x124>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <bekle+0x128>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d0ee      	beq.n	8006372 <bekle+0xfe>
    }

}
 8006394:	bf00      	nop
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000cb0 	.word	0x20000cb0
 800639c:	20000cb8 	.word	0x20000cb8
 80063a0:	20000d5f 	.word	0x20000d5f
 80063a4:	40010800 	.word	0x40010800
 80063a8:	40011000 	.word	0x40011000

080063ac <i2cTest>:

void i2cTest() {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80063b2:	463b      	mov	r3, r7
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80063be:	4b50      	ldr	r3, [pc, #320]	; (8006500 <i2cTest+0x154>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	4b4e      	ldr	r3, [pc, #312]	; (8006500 <i2cTest+0x154>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80063ce:	484c      	ldr	r0, [pc, #304]	; (8006500 <i2cTest+0x154>)
 80063d0:	f003 fe7e 	bl	800a0d0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063d4:	23c0      	movs	r3, #192	; 0xc0
 80063d6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80063d8:	2311      	movs	r3, #17
 80063da:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80063dc:	2301      	movs	r3, #1
 80063de:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80063e0:	2303      	movs	r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80063e4:	463b      	mov	r3, r7
 80063e6:	4619      	mov	r1, r3
 80063e8:	4846      	ldr	r0, [pc, #280]	; (8006504 <i2cTest+0x158>)
 80063ea:	f003 fa85 	bl	80098f8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80063ee:	2201      	movs	r2, #1
 80063f0:	2140      	movs	r1, #64	; 0x40
 80063f2:	4844      	ldr	r0, [pc, #272]	; (8006504 <i2cTest+0x158>)
 80063f4:	f003 fcf7 	bl	8009de6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80063f8:	2201      	movs	r2, #1
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	4841      	ldr	r0, [pc, #260]	; (8006504 <i2cTest+0x158>)
 80063fe:	f003 fcf2 	bl	8009de6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006402:	200a      	movs	r0, #10
 8006404:	f002 ff08 	bl	8009218 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006408:	bf00      	nop
 800640a:	2140      	movs	r1, #64	; 0x40
 800640c:	483d      	ldr	r0, [pc, #244]	; (8006504 <i2cTest+0x158>)
 800640e:	f003 fcd3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d006      	beq.n	8006426 <i2cTest+0x7a>
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	483a      	ldr	r0, [pc, #232]	; (8006504 <i2cTest+0x158>)
 800641c:	f003 fccc 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d1f1      	bne.n	800640a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006426:	2200      	movs	r2, #0
 8006428:	2180      	movs	r1, #128	; 0x80
 800642a:	4836      	ldr	r0, [pc, #216]	; (8006504 <i2cTest+0x158>)
 800642c:	f003 fcdb 	bl	8009de6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006430:	200a      	movs	r0, #10
 8006432:	f002 fef1 	bl	8009218 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8006436:	bf00      	nop
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	4832      	ldr	r0, [pc, #200]	; (8006504 <i2cTest+0x158>)
 800643c:	f003 fcbc 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006440:	4603      	mov	r3, r0
 8006442:	2b01      	cmp	r3, #1
 8006444:	d0f8      	beq.n	8006438 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8006446:	2200      	movs	r2, #0
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	482e      	ldr	r0, [pc, #184]	; (8006504 <i2cTest+0x158>)
 800644c:	f003 fccb 	bl	8009de6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006450:	200a      	movs	r0, #10
 8006452:	f002 fee1 	bl	8009218 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8006456:	bf00      	nop
 8006458:	2140      	movs	r1, #64	; 0x40
 800645a:	482a      	ldr	r0, [pc, #168]	; (8006504 <i2cTest+0x158>)
 800645c:	f003 fcac 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006460:	4603      	mov	r3, r0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d0f8      	beq.n	8006458 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006466:	2201      	movs	r2, #1
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	4826      	ldr	r0, [pc, #152]	; (8006504 <i2cTest+0x158>)
 800646c:	f003 fcbb 	bl	8009de6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006470:	200a      	movs	r0, #10
 8006472:	f002 fed1 	bl	8009218 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8006476:	bf00      	nop
 8006478:	2140      	movs	r1, #64	; 0x40
 800647a:	4822      	ldr	r0, [pc, #136]	; (8006504 <i2cTest+0x158>)
 800647c:	f003 fc9c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006480:	4603      	mov	r3, r0
 8006482:	2b01      	cmp	r3, #1
 8006484:	d1f8      	bne.n	8006478 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006486:	2201      	movs	r2, #1
 8006488:	2180      	movs	r1, #128	; 0x80
 800648a:	481e      	ldr	r0, [pc, #120]	; (8006504 <i2cTest+0x158>)
 800648c:	f003 fcab 	bl	8009de6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006490:	200a      	movs	r0, #10
 8006492:	f002 fec1 	bl	8009218 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006496:	bf00      	nop
 8006498:	2180      	movs	r1, #128	; 0x80
 800649a:	481a      	ldr	r0, [pc, #104]	; (8006504 <i2cTest+0x158>)
 800649c:	f003 fc8c 	bl	8009db8 <HAL_GPIO_ReadPin>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d1f8      	bne.n	8006498 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064a6:	23c0      	movs	r3, #192	; 0xc0
 80064a8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80064aa:	2312      	movs	r3, #18
 80064ac:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80064ae:	2301      	movs	r3, #1
 80064b0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80064b2:	2303      	movs	r3, #3
 80064b4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80064b6:	463b      	mov	r3, r7
 80064b8:	4619      	mov	r1, r3
 80064ba:	4812      	ldr	r0, [pc, #72]	; (8006504 <i2cTest+0x158>)
 80064bc:	f003 fa1c 	bl	80098f8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <i2cTest+0x154>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <i2cTest+0x154>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ce:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <i2cTest+0x154>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <i2cTest+0x154>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064de:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <i2cTest+0x154>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <i2cTest+0x154>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80064f0:	4803      	ldr	r0, [pc, #12]	; (8006500 <i2cTest+0x154>)
 80064f2:	f003 fca9 	bl	8009e48 <HAL_I2C_Init>
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000b54 	.word	0x20000b54
 8006504:	40010c00 	.word	0x40010c00

08006508 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <checkLCDBacklight+0x34>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <checkLCDBacklight+0x38>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	1ad2      	subs	r2, r2, r3
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <checkLCDBacklight+0x3c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	460b      	mov	r3, r1
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	429a      	cmp	r2, r3
 8006526:	d303      	bcc.n	8006530 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006528:	2000      	movs	r0, #0
 800652a:	f7fa f8e9 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800652e:	e002      	b.n	8006536 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006530:	2001      	movs	r0, #1
 8006532:	f7fa f8e5 	bl	8000700 <lcd_backlight>
}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000cb0 	.word	0x20000cb0
 8006540:	20000ccc 	.word	0x20000ccc
 8006544:	20000940 	.word	0x20000940

08006548 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800654c:	4b13      	ldr	r3, [pc, #76]	; (800659c <checkBasincSalteri+0x54>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <checkBasincSalteri+0x12>
		basincVar=1;
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <checkBasincSalteri+0x58>)
 8006556:	2201      	movs	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <checkBasincSalteri+0x54>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d119      	bne.n	8006596 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006566:	480f      	ldr	r0, [pc, #60]	; (80065a4 <checkBasincSalteri+0x5c>)
 8006568:	f003 fc26 	bl	8009db8 <HAL_GPIO_ReadPin>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <checkBasincSalteri+0x60>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <checkBasincSalteri+0x64>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d90a      	bls.n	8006596 <checkBasincSalteri+0x4e>
				basincVar=1;
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <checkBasincSalteri+0x58>)
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006586:	e006      	b.n	8006596 <checkBasincSalteri+0x4e>
			timer5=millis;
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <checkBasincSalteri+0x60>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a07      	ldr	r2, [pc, #28]	; (80065ac <checkBasincSalteri+0x64>)
 800658e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <checkBasincSalteri+0x58>)
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000d37 	.word	0x20000d37
 80065a0:	20000d33 	.word	0x20000d33
 80065a4:	40011000 	.word	0x40011000
 80065a8:	20000cb0 	.word	0x20000cb0
 80065ac:	20000cc8 	.word	0x20000cc8

080065b0 <checkBasGonder>:

void checkBasGonder() {
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <checkBasGonder+0x74>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d10b      	bne.n	80065d4 <checkBasGonder+0x24>
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <checkBasGonder+0x78>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <checkBasGonder+0x24>
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <checkBasGonder+0x7c>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80065cc:	4b18      	ldr	r3, [pc, #96]	; (8006630 <checkBasGonder+0x80>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e009      	b.n	80065e8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80065d4:	4b14      	ldr	r3, [pc, #80]	; (8006628 <checkBasGonder+0x78>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80065e2:	4b13      	ldr	r3, [pc, #76]	; (8006630 <checkBasGonder+0x80>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80065e8:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <checkBasGonder+0x74>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10b      	bne.n	8006608 <checkBasGonder+0x58>
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <checkBasGonder+0x84>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <checkBasGonder+0x58>
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <checkBasGonder+0x7c>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006600:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <checkBasGonder+0x88>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006606:	e009      	b.n	800661c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <checkBasGonder+0x84>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f083 0301 	eor.w	r3, r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <checkBasGonder+0x88>)
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	20000d31 	.word	0x20000d31
 8006628:	20000d65 	.word	0x20000d65
 800662c:	20000d3f 	.word	0x20000d3f
 8006630:	20000d6c 	.word	0x20000d6c
 8006634:	20000d68 	.word	0x20000d68
 8006638:	20000d6d 	.word	0x20000d6d

0800663c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006640:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <checkKapiSecimleri+0x98>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006648:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <checkKapiSecimleri+0x9c>)
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800664e:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <checkKapiSecimleri+0x98>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10e      	bne.n	8006674 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800665a:	4820      	ldr	r0, [pc, #128]	; (80066dc <checkKapiSecimleri+0xa0>)
 800665c:	f003 fbac 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <checkKapiSecimleri+0x9c>)
 8006668:	2201      	movs	r2, #1
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	e002      	b.n	8006674 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800666e:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <checkKapiSecimleri+0x9c>)
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006674:	4b17      	ldr	r3, [pc, #92]	; (80066d4 <checkKapiSecimleri+0x98>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d10e      	bne.n	800669a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800667c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006680:	4816      	ldr	r0, [pc, #88]	; (80066dc <checkKapiSecimleri+0xa0>)
 8006682:	f003 fb99 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <checkKapiSecimleri+0x9c>)
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e002      	b.n	800669a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006694:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <checkKapiSecimleri+0x9c>)
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <checkKapiSecimleri+0x98>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d116      	bne.n	80066d0 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80066a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066a6:	480d      	ldr	r0, [pc, #52]	; (80066dc <checkKapiSecimleri+0xa0>)
 80066a8:	f003 fb86 	bl	8009db8 <HAL_GPIO_ReadPin>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <checkKapiSecimleri+0x8e>
 80066b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066b6:	4809      	ldr	r0, [pc, #36]	; (80066dc <checkKapiSecimleri+0xa0>)
 80066b8:	f003 fb7e 	bl	8009db8 <HAL_GPIO_ReadPin>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <checkKapiSecimleri+0x9c>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80066c8:	e002      	b.n	80066d0 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80066ca:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <checkKapiSecimleri+0x9c>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
}
 80066d0:	bf00      	nop
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000d38 	.word	0x20000d38
 80066d8:	20000d83 	.word	0x20000d83
 80066dc:	40010800 	.word	0x40010800

080066e0 <checkAktifCalisma>:

void checkAktifCalisma() {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80066e4:	4b62      	ldr	r3, [pc, #392]	; (8006870 <checkAktifCalisma+0x190>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f041 8332 	bne.w	8007d52 <checkAktifCalisma+0x1672>
 80066ee:	4b61      	ldr	r3, [pc, #388]	; (8006874 <checkAktifCalisma+0x194>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f041 832d 	bne.w	8007d52 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80066f8:	4b5f      	ldr	r3, [pc, #380]	; (8006878 <checkAktifCalisma+0x198>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11a      	bne.n	8006736 <checkAktifCalisma+0x56>
 8006700:	4b5e      	ldr	r3, [pc, #376]	; (800687c <checkAktifCalisma+0x19c>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d116      	bne.n	8006736 <checkAktifCalisma+0x56>
 8006708:	4b5d      	ldr	r3, [pc, #372]	; (8006880 <checkAktifCalisma+0x1a0>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <checkAktifCalisma+0x46>
 8006710:	4b5c      	ldr	r3, [pc, #368]	; (8006884 <checkAktifCalisma+0x1a4>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f083 0301 	eor.w	r3, r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <checkAktifCalisma+0x46>
 800671e:	4b5a      	ldr	r3, [pc, #360]	; (8006888 <checkAktifCalisma+0x1a8>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d007      	beq.n	8006736 <checkAktifCalisma+0x56>
 8006726:	4b59      	ldr	r3, [pc, #356]	; (800688c <checkAktifCalisma+0x1ac>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d018      	beq.n	8006760 <checkAktifCalisma+0x80>
 800672e:	4b58      	ldr	r3, [pc, #352]	; (8006890 <checkAktifCalisma+0x1b0>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d114      	bne.n	8006760 <checkAktifCalisma+0x80>
 8006736:	4b57      	ldr	r3, [pc, #348]	; (8006894 <checkAktifCalisma+0x1b4>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d010      	beq.n	8006760 <checkAktifCalisma+0x80>
 800673e:	4b56      	ldr	r3, [pc, #344]	; (8006898 <checkAktifCalisma+0x1b8>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006746:	2201      	movs	r2, #1
 8006748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800674c:	4853      	ldr	r0, [pc, #332]	; (800689c <checkAktifCalisma+0x1bc>)
 800674e:	f003 fb4a 	bl	8009de6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006752:	4b53      	ldr	r3, [pc, #332]	; (80068a0 <checkAktifCalisma+0x1c0>)
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006758:	4b52      	ldr	r3, [pc, #328]	; (80068a4 <checkAktifCalisma+0x1c4>)
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e008      	b.n	8006772 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006760:	2200      	movs	r2, #0
 8006762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006766:	484d      	ldr	r0, [pc, #308]	; (800689c <checkAktifCalisma+0x1bc>)
 8006768:	f003 fb3d 	bl	8009de6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 800676c:	4b4c      	ldr	r3, [pc, #304]	; (80068a0 <checkAktifCalisma+0x1c0>)
 800676e:	2200      	movs	r2, #0
 8006770:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006772:	4b40      	ldr	r3, [pc, #256]	; (8006874 <checkAktifCalisma+0x194>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d160      	bne.n	800683c <checkAktifCalisma+0x15c>
 800677a:	4b46      	ldr	r3, [pc, #280]	; (8006894 <checkAktifCalisma+0x1b4>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d05c      	beq.n	800683c <checkAktifCalisma+0x15c>
 8006782:	4b45      	ldr	r3, [pc, #276]	; (8006898 <checkAktifCalisma+0x1b8>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d058      	beq.n	800683c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800678a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800678e:	4843      	ldr	r0, [pc, #268]	; (800689c <checkAktifCalisma+0x1bc>)
 8006790:	f003 fb12 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <checkAktifCalisma+0xc2>
 800679a:	4b43      	ldr	r3, [pc, #268]	; (80068a8 <checkAktifCalisma+0x1c8>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d04c      	beq.n	800683c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80067a2:	2102      	movs	r1, #2
 80067a4:	4841      	ldr	r0, [pc, #260]	; (80068ac <checkAktifCalisma+0x1cc>)
 80067a6:	f003 fb07 	bl	8009db8 <HAL_GPIO_ReadPin>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d145      	bne.n	800683c <checkAktifCalisma+0x15c>
				&& (basincVar)
 80067b0:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <checkAktifCalisma+0x1d0>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d041      	beq.n	800683c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80067b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067bc:	4837      	ldr	r0, [pc, #220]	; (800689c <checkAktifCalisma+0x1bc>)
 80067be:	f003 fafb 	bl	8009db8 <HAL_GPIO_ReadPin>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d10e      	bne.n	80067e6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80067c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067cc:	4833      	ldr	r0, [pc, #204]	; (800689c <checkAktifCalisma+0x1bc>)
 80067ce:	f003 faf3 	bl	8009db8 <HAL_GPIO_ReadPin>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d106      	bne.n	80067e6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80067d8:	2140      	movs	r1, #64	; 0x40
 80067da:	4834      	ldr	r0, [pc, #208]	; (80068ac <checkAktifCalisma+0x1cc>)
 80067dc:	f003 faec 	bl	8009db8 <HAL_GPIO_ReadPin>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d003      	beq.n	80067ee <checkAktifCalisma+0x10e>
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <checkAktifCalisma+0x198>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d026      	beq.n	800683c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <checkAktifCalisma+0x1a0>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f083 0301 	eor.w	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01f      	beq.n	800683c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80067fc:	4b1f      	ldr	r3, [pc, #124]	; (800687c <checkAktifCalisma+0x19c>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f083 0301 	eor.w	r3, r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d018      	beq.n	800683c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <checkAktifCalisma+0x1ac>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	f083 0301 	eor.w	r3, r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d011      	beq.n	800683c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006818:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <checkAktifCalisma+0x1d4>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f083 0301 	eor.w	r3, r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <checkAktifCalisma+0x1d8>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f083 0301 	eor.w	r3, r3, #1
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006834:	4b10      	ldr	r3, [pc, #64]	; (8006878 <checkAktifCalisma+0x198>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	e002      	b.n	8006842 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <checkAktifCalisma+0x198>)
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <checkAktifCalisma+0x198>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d03a      	beq.n	80068c0 <checkAktifCalisma+0x1e0>
 800684a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800684e:	4817      	ldr	r0, [pc, #92]	; (80068ac <checkAktifCalisma+0x1cc>)
 8006850:	f003 fab2 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d132      	bne.n	80068c0 <checkAktifCalisma+0x1e0>
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <checkAktifCalisma+0x1dc>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02e      	beq.n	80068c0 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006862:	2201      	movs	r2, #1
 8006864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006868:	480c      	ldr	r0, [pc, #48]	; (800689c <checkAktifCalisma+0x1bc>)
 800686a:	f003 fabc 	bl	8009de6 <HAL_GPIO_WritePin>
 800686e:	e02d      	b.n	80068cc <checkAktifCalisma+0x1ec>
 8006870:	20000d4e 	.word	0x20000d4e
 8006874:	20000d4d 	.word	0x20000d4d
 8006878:	20000d65 	.word	0x20000d65
 800687c:	20000d66 	.word	0x20000d66
 8006880:	20000d68 	.word	0x20000d68
 8006884:	20000d60 	.word	0x20000d60
 8006888:	20000d43 	.word	0x20000d43
 800688c:	20000d67 	.word	0x20000d67
 8006890:	20000d42 	.word	0x20000d42
 8006894:	20000d82 	.word	0x20000d82
 8006898:	20000d83 	.word	0x20000d83
 800689c:	40010c00 	.word	0x40010c00
 80068a0:	20000d84 	.word	0x20000d84
 80068a4:	20000d6f 	.word	0x20000d6f
 80068a8:	20000d6c 	.word	0x20000d6c
 80068ac:	40011000 	.word	0x40011000
 80068b0:	20000d33 	.word	0x20000d33
 80068b4:	20000d6a 	.word	0x20000d6a
 80068b8:	20000d6b 	.word	0x20000d6b
 80068bc:	20000d3e 	.word	0x20000d3e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068c0:	2200      	movs	r2, #0
 80068c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068c6:	4860      	ldr	r0, [pc, #384]	; (8006a48 <checkAktifCalisma+0x368>)
 80068c8:	f003 fa8d 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80068cc:	4b5f      	ldr	r3, [pc, #380]	; (8006a4c <checkAktifCalisma+0x36c>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <checkAktifCalisma+0x21c>
 80068d4:	4b5e      	ldr	r3, [pc, #376]	; (8006a50 <checkAktifCalisma+0x370>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d007      	beq.n	80068ec <checkAktifCalisma+0x20c>
 80068dc:	4b5c      	ldr	r3, [pc, #368]	; (8006a50 <checkAktifCalisma+0x370>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d003      	beq.n	80068ec <checkAktifCalisma+0x20c>
 80068e4:	4b5b      	ldr	r3, [pc, #364]	; (8006a54 <checkAktifCalisma+0x374>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d107      	bne.n	80068fc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80068ec:	2201      	movs	r2, #1
 80068ee:	2104      	movs	r1, #4
 80068f0:	4855      	ldr	r0, [pc, #340]	; (8006a48 <checkAktifCalisma+0x368>)
 80068f2:	f003 fa78 	bl	8009de6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80068f6:	4b58      	ldr	r3, [pc, #352]	; (8006a58 <checkAktifCalisma+0x378>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80068fc:	4b56      	ldr	r3, [pc, #344]	; (8006a58 <checkAktifCalisma+0x378>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02f      	beq.n	8006964 <checkAktifCalisma+0x284>
 8006904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006908:	484f      	ldr	r0, [pc, #316]	; (8006a48 <checkAktifCalisma+0x368>)
 800690a:	f003 fa55 	bl	8009db8 <HAL_GPIO_ReadPin>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d106      	bne.n	8006922 <checkAktifCalisma+0x242>
 8006914:	4b51      	ldr	r3, [pc, #324]	; (8006a5c <checkAktifCalisma+0x37c>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f083 0301 	eor.w	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <checkAktifCalisma+0x250>
 8006922:	2102      	movs	r1, #2
 8006924:	484e      	ldr	r0, [pc, #312]	; (8006a60 <checkAktifCalisma+0x380>)
 8006926:	f003 fa47 	bl	8009db8 <HAL_GPIO_ReadPin>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d119      	bne.n	8006964 <checkAktifCalisma+0x284>
 8006930:	4b4c      	ldr	r3, [pc, #304]	; (8006a64 <checkAktifCalisma+0x384>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d015      	beq.n	8006964 <checkAktifCalisma+0x284>
 8006938:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <checkAktifCalisma+0x388>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d011      	beq.n	8006964 <checkAktifCalisma+0x284>
 8006940:	4b4a      	ldr	r3, [pc, #296]	; (8006a6c <checkAktifCalisma+0x38c>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <checkAktifCalisma+0x284>
 8006948:	4b49      	ldr	r3, [pc, #292]	; (8006a70 <checkAktifCalisma+0x390>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f083 0301 	eor.w	r3, r3, #1
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d006      	beq.n	8006964 <checkAktifCalisma+0x284>
			timer2=millis;
 8006956:	4b47      	ldr	r3, [pc, #284]	; (8006a74 <checkAktifCalisma+0x394>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a47      	ldr	r2, [pc, #284]	; (8006a78 <checkAktifCalisma+0x398>)
 800695c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800695e:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <checkAktifCalisma+0x390>)
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006964:	4b43      	ldr	r3, [pc, #268]	; (8006a74 <checkAktifCalisma+0x394>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b43      	ldr	r3, [pc, #268]	; (8006a78 <checkAktifCalisma+0x398>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	4a43      	ldr	r2, [pc, #268]	; (8006a7c <checkAktifCalisma+0x39c>)
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	4293      	cmp	r3, r2
 8006974:	d303      	bcc.n	800697e <checkAktifCalisma+0x29e>
 8006976:	4b3e      	ldr	r3, [pc, #248]	; (8006a70 <checkAktifCalisma+0x390>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d111      	bne.n	80069a2 <checkAktifCalisma+0x2c2>
 800697e:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <checkAktifCalisma+0x384>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f083 0301 	eor.w	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <checkAktifCalisma+0x2c2>
 800698c:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <checkAktifCalisma+0x388>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f083 0301 	eor.w	r3, r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <checkAktifCalisma+0x2c2>
 800699a:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <checkAktifCalisma+0x38c>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2104      	movs	r1, #4
 80069a6:	4828      	ldr	r0, [pc, #160]	; (8006a48 <checkAktifCalisma+0x368>)
 80069a8:	f003 fa1d 	bl	8009de6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80069ac:	4b2a      	ldr	r3, [pc, #168]	; (8006a58 <checkAktifCalisma+0x378>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <checkAktifCalisma+0x390>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80069b8:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <checkAktifCalisma+0x3a0>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80069c0:	4b30      	ldr	r3, [pc, #192]	; (8006a84 <checkAktifCalisma+0x3a4>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <checkAktifCalisma+0x3a0>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d116      	bne.n	80069fc <checkAktifCalisma+0x31c>
 80069ce:	4b2e      	ldr	r3, [pc, #184]	; (8006a88 <checkAktifCalisma+0x3a8>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d112      	bne.n	80069fc <checkAktifCalisma+0x31c>
 80069d6:	2101      	movs	r1, #1
 80069d8:	4821      	ldr	r0, [pc, #132]	; (8006a60 <checkAktifCalisma+0x380>)
 80069da:	f003 f9ed 	bl	8009db8 <HAL_GPIO_ReadPin>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <checkAktifCalisma+0x31c>
 80069e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069e8:	4817      	ldr	r0, [pc, #92]	; (8006a48 <checkAktifCalisma+0x368>)
 80069ea:	f003 f9e5 	bl	8009db8 <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80069f4:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <checkAktifCalisma+0x3a4>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	e011      	b.n	8006a20 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <checkAktifCalisma+0x3a0>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d10d      	bne.n	8006a20 <checkAktifCalisma+0x340>
 8006a04:	2101      	movs	r1, #1
 8006a06:	4816      	ldr	r0, [pc, #88]	; (8006a60 <checkAktifCalisma+0x380>)
 8006a08:	f003 f9d6 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d106      	bne.n	8006a20 <checkAktifCalisma+0x340>
 8006a12:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <checkAktifCalisma+0x3a8>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <checkAktifCalisma+0x3a4>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <checkAktifCalisma+0x3a0>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d134      	bne.n	8006a92 <checkAktifCalisma+0x3b2>
 8006a28:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <checkAktifCalisma+0x3a8>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d130      	bne.n	8006a92 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006a30:	2101      	movs	r1, #1
 8006a32:	480b      	ldr	r0, [pc, #44]	; (8006a60 <checkAktifCalisma+0x380>)
 8006a34:	f003 f9c0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d126      	bne.n	8006a8c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006a3e:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <checkAktifCalisma+0x3a4>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e025      	b.n	8006a92 <checkAktifCalisma+0x3b2>
 8006a46:	bf00      	nop
 8006a48:	40010c00 	.word	0x40010c00
 8006a4c:	20000d65 	.word	0x20000d65
 8006a50:	20000d3f 	.word	0x20000d3f
 8006a54:	20000d43 	.word	0x20000d43
 8006a58:	20000d69 	.word	0x20000d69
 8006a5c:	20000d6c 	.word	0x20000d6c
 8006a60:	40011000 	.word	0x40011000
 8006a64:	20000d82 	.word	0x20000d82
 8006a68:	20000d83 	.word	0x20000d83
 8006a6c:	20000d33 	.word	0x20000d33
 8006a70:	20000d61 	.word	0x20000d61
 8006a74:	20000cb0 	.word	0x20000cb0
 8006a78:	20000cbc 	.word	0x20000cbc
 8006a7c:	20000d44 	.word	0x20000d44
 8006a80:	20000d34 	.word	0x20000d34
 8006a84:	20000d87 	.word	0x20000d87
 8006a88:	20000d31 	.word	0x20000d31
			} else {
				cerceveVar=0;
 8006a8c:	4b7f      	ldr	r3, [pc, #508]	; (8006c8c <checkAktifCalisma+0x5ac>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006a92:	4b7f      	ldr	r3, [pc, #508]	; (8006c90 <checkAktifCalisma+0x5b0>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d17c      	bne.n	8006b94 <checkAktifCalisma+0x4b4>
 8006a9a:	4b7e      	ldr	r3, [pc, #504]	; (8006c94 <checkAktifCalisma+0x5b4>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d078      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
 8006aa2:	4b7d      	ldr	r3, [pc, #500]	; (8006c98 <checkAktifCalisma+0x5b8>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d074      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aae:	487b      	ldr	r0, [pc, #492]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006ab0:	f003 f982 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <checkAktifCalisma+0x3e2>
 8006aba:	4b79      	ldr	r3, [pc, #484]	; (8006ca0 <checkAktifCalisma+0x5c0>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d068      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006ac2:	4b72      	ldr	r3, [pc, #456]	; (8006c8c <checkAktifCalisma+0x5ac>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d064      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
 8006aca:	4b76      	ldr	r3, [pc, #472]	; (8006ca4 <checkAktifCalisma+0x5c4>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f083 0301 	eor.w	r3, r3, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d05d      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006ad8:	2104      	movs	r1, #4
 8006ada:	4873      	ldr	r0, [pc, #460]	; (8006ca8 <checkAktifCalisma+0x5c8>)
 8006adc:	f003 f96c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <checkAktifCalisma+0x40e>
 8006ae6:	4b71      	ldr	r3, [pc, #452]	; (8006cac <checkAktifCalisma+0x5cc>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d152      	bne.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006af2:	486a      	ldr	r0, [pc, #424]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006af4:	f003 f960 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10e      	bne.n	8006b1c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b02:	4866      	ldr	r0, [pc, #408]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006b04:	f003 f958 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d106      	bne.n	8006b1c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006b0e:	2140      	movs	r1, #64	; 0x40
 8006b10:	4865      	ldr	r0, [pc, #404]	; (8006ca8 <checkAktifCalisma+0x5c8>)
 8006b12:	f003 f951 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d003      	beq.n	8006b24 <checkAktifCalisma+0x444>
 8006b1c:	4b64      	ldr	r3, [pc, #400]	; (8006cb0 <checkAktifCalisma+0x5d0>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d037      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006b24:	4b63      	ldr	r3, [pc, #396]	; (8006cb4 <checkAktifCalisma+0x5d4>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f083 0301 	eor.w	r3, r3, #1
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d030      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006b32:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <checkAktifCalisma+0x5d8>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	f083 0301 	eor.w	r3, r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d029      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006b40:	4b5e      	ldr	r3, [pc, #376]	; (8006cbc <checkAktifCalisma+0x5dc>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	f083 0301 	eor.w	r3, r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d022      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006b4e:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <checkAktifCalisma+0x5e0>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f083 0301 	eor.w	r3, r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006b5c:	4b59      	ldr	r3, [pc, #356]	; (8006cc4 <checkAktifCalisma+0x5e4>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f083 0301 	eor.w	r3, r3, #1
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d014      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006b6a:	4b57      	ldr	r3, [pc, #348]	; (8006cc8 <checkAktifCalisma+0x5e8>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f083 0301 	eor.w	r3, r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006b78:	2201      	movs	r2, #1
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	4847      	ldr	r0, [pc, #284]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006b7e:	f003 f932 	bl	8009de6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006b82:	4b4b      	ldr	r3, [pc, #300]	; (8006cb0 <checkAktifCalisma+0x5d0>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006b88:	4b50      	ldr	r3, [pc, #320]	; (8006ccc <checkAktifCalisma+0x5ec>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006b8e:	4b50      	ldr	r3, [pc, #320]	; (8006cd0 <checkAktifCalisma+0x5f0>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006b94:	4b46      	ldr	r3, [pc, #280]	; (8006cb0 <checkAktifCalisma+0x5d0>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d033      	beq.n	8006c04 <checkAktifCalisma+0x524>
 8006b9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ba0:	483e      	ldr	r0, [pc, #248]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006ba2:	f003 f909 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d106      	bne.n	8006bba <checkAktifCalisma+0x4da>
 8006bac:	4b3c      	ldr	r3, [pc, #240]	; (8006ca0 <checkAktifCalisma+0x5c0>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f083 0301 	eor.w	r3, r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <checkAktifCalisma+0x4f0>
 8006bba:	2104      	movs	r1, #4
 8006bbc:	483a      	ldr	r0, [pc, #232]	; (8006ca8 <checkAktifCalisma+0x5c8>)
 8006bbe:	f003 f8fb 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d11d      	bne.n	8006c04 <checkAktifCalisma+0x524>
 8006bc8:	4b38      	ldr	r3, [pc, #224]	; (8006cac <checkAktifCalisma+0x5cc>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d019      	beq.n	8006c04 <checkAktifCalisma+0x524>
 8006bd0:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <checkAktifCalisma+0x5b4>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d015      	beq.n	8006c04 <checkAktifCalisma+0x524>
 8006bd8:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <checkAktifCalisma+0x5b8>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d011      	beq.n	8006c04 <checkAktifCalisma+0x524>
 8006be0:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <checkAktifCalisma+0x5ac>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00d      	beq.n	8006c04 <checkAktifCalisma+0x524>
 8006be8:	4b3a      	ldr	r3, [pc, #232]	; (8006cd4 <checkAktifCalisma+0x5f4>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f083 0301 	eor.w	r3, r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <checkAktifCalisma+0x524>
			timer2=millis;
 8006bf6:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <checkAktifCalisma+0x5f8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a38      	ldr	r2, [pc, #224]	; (8006cdc <checkAktifCalisma+0x5fc>)
 8006bfc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006bfe:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <checkAktifCalisma+0x5f4>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006c04:	4b34      	ldr	r3, [pc, #208]	; (8006cd8 <checkAktifCalisma+0x5f8>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <checkAktifCalisma+0x5fc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	4a34      	ldr	r2, [pc, #208]	; (8006ce0 <checkAktifCalisma+0x600>)
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d303      	bcc.n	8006c1e <checkAktifCalisma+0x53e>
 8006c16:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <checkAktifCalisma+0x5f4>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d114      	bne.n	8006c48 <checkAktifCalisma+0x568>
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <checkAktifCalisma+0x5b4>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f083 0301 	eor.w	r3, r3, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10d      	bne.n	8006c48 <checkAktifCalisma+0x568>
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <checkAktifCalisma+0x5b8>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f083 0301 	eor.w	r3, r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <checkAktifCalisma+0x568>
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <checkAktifCalisma+0x5ac>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f083 0301 	eor.w	r3, r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4813      	ldr	r0, [pc, #76]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006c4e:	f003 f8ca 	bl	8009de6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006c52:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <checkAktifCalisma+0x5d0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <checkAktifCalisma+0x5f4>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <checkAktifCalisma+0x5d0>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d040      	beq.n	8006ce8 <checkAktifCalisma+0x608>
 8006c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c6a:	480f      	ldr	r0, [pc, #60]	; (8006ca8 <checkAktifCalisma+0x5c8>)
 8006c6c:	f003 f8a4 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d138      	bne.n	8006ce8 <checkAktifCalisma+0x608>
 8006c76:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <checkAktifCalisma+0x604>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d034      	beq.n	8006ce8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006c7e:	2201      	movs	r2, #1
 8006c80:	2101      	movs	r1, #1
 8006c82:	4806      	ldr	r0, [pc, #24]	; (8006c9c <checkAktifCalisma+0x5bc>)
 8006c84:	f003 f8af 	bl	8009de6 <HAL_GPIO_WritePin>
 8006c88:	e033      	b.n	8006cf2 <checkAktifCalisma+0x612>
 8006c8a:	bf00      	nop
 8006c8c:	20000d87 	.word	0x20000d87
 8006c90:	20000d4d 	.word	0x20000d4d
 8006c94:	20000d82 	.word	0x20000d82
 8006c98:	20000d83 	.word	0x20000d83
 8006c9c:	40010c00 	.word	0x40010c00
 8006ca0:	20000d6d 	.word	0x20000d6d
 8006ca4:	20000d81 	.word	0x20000d81
 8006ca8:	40011000 	.word	0x40011000
 8006cac:	20000d36 	.word	0x20000d36
 8006cb0:	20000d68 	.word	0x20000d68
 8006cb4:	20000d65 	.word	0x20000d65
 8006cb8:	20000d69 	.word	0x20000d69
 8006cbc:	20000d66 	.word	0x20000d66
 8006cc0:	20000d67 	.word	0x20000d67
 8006cc4:	20000d6a 	.word	0x20000d6a
 8006cc8:	20000d6b 	.word	0x20000d6b
 8006ccc:	20000d70 	.word	0x20000d70
 8006cd0:	20000d91 	.word	0x20000d91
 8006cd4:	20000d60 	.word	0x20000d60
 8006cd8:	20000cb0 	.word	0x20000cb0
 8006cdc:	20000cbc 	.word	0x20000cbc
 8006ce0:	20000d45 	.word	0x20000d45
 8006ce4:	20000d35 	.word	0x20000d35
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2101      	movs	r1, #1
 8006cec:	4836      	ldr	r0, [pc, #216]	; (8006dc8 <checkAktifCalisma+0x6e8>)
 8006cee:	f003 f87a 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006cf2:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <checkAktifCalisma+0x6ec>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 8080 	bne.w	8006dfc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006cfc:	4b34      	ldr	r3, [pc, #208]	; (8006dd0 <checkAktifCalisma+0x6f0>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d003      	beq.n	8006d0c <checkAktifCalisma+0x62c>
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <checkAktifCalisma+0x6f0>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d177      	bne.n	8006dfc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <checkAktifCalisma+0x6f4>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d073      	beq.n	8006dfc <checkAktifCalisma+0x71c>
 8006d14:	4b30      	ldr	r3, [pc, #192]	; (8006dd8 <checkAktifCalisma+0x6f8>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d06f      	beq.n	8006dfc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d20:	4829      	ldr	r0, [pc, #164]	; (8006dc8 <checkAktifCalisma+0x6e8>)
 8006d22:	f003 f849 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d167      	bne.n	8006dfc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d30:	482a      	ldr	r0, [pc, #168]	; (8006ddc <checkAktifCalisma+0x6fc>)
 8006d32:	f003 f841 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <checkAktifCalisma+0x664>
 8006d3c:	4b28      	ldr	r3, [pc, #160]	; (8006de0 <checkAktifCalisma+0x700>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d15b      	bne.n	8006dfc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	4825      	ldr	r0, [pc, #148]	; (8006ddc <checkAktifCalisma+0x6fc>)
 8006d48:	f003 f836 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10f      	bne.n	8006d72 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d56:	481c      	ldr	r0, [pc, #112]	; (8006dc8 <checkAktifCalisma+0x6e8>)
 8006d58:	f003 f82e 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d107      	bne.n	8006d72 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d66:	4818      	ldr	r0, [pc, #96]	; (8006dc8 <checkAktifCalisma+0x6e8>)
 8006d68:	f003 f826 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d003      	beq.n	8006d7a <checkAktifCalisma+0x69a>
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <checkAktifCalisma+0x704>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d040      	beq.n	8006dfc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <checkAktifCalisma+0x708>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f083 0301 	eor.w	r3, r3, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d039      	beq.n	8006dfc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006d88:	4b18      	ldr	r3, [pc, #96]	; (8006dec <checkAktifCalisma+0x70c>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f083 0301 	eor.w	r3, r3, #1
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d032      	beq.n	8006dfc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <checkAktifCalisma+0x710>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	f083 0301 	eor.w	r3, r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02b      	beq.n	8006dfc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <checkAktifCalisma+0x714>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f083 0301 	eor.w	r3, r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d024      	beq.n	8006dfc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006db2:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <checkAktifCalisma+0x718>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f083 0301 	eor.w	r3, r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01d      	beq.n	8006dfc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <checkAktifCalisma+0x704>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e01c      	b.n	8006e02 <checkAktifCalisma+0x722>
 8006dc8:	40010c00 	.word	0x40010c00
 8006dcc:	20000d4d 	.word	0x20000d4d
 8006dd0:	20000d3f 	.word	0x20000d3f
 8006dd4:	20000d82 	.word	0x20000d82
 8006dd8:	20000d83 	.word	0x20000d83
 8006ddc:	40011000 	.word	0x40011000
 8006de0:	20000d40 	.word	0x20000d40
 8006de4:	20000d66 	.word	0x20000d66
 8006de8:	20000d65 	.word	0x20000d65
 8006dec:	20000d69 	.word	0x20000d69
 8006df0:	20000d68 	.word	0x20000d68
 8006df4:	20000d67 	.word	0x20000d67
 8006df8:	20000d6b 	.word	0x20000d6b
		} else {
			devmotoryukaricalisiyor=0;
 8006dfc:	4b64      	ldr	r3, [pc, #400]	; (8006f90 <checkAktifCalisma+0x8b0>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006e02:	4b63      	ldr	r3, [pc, #396]	; (8006f90 <checkAktifCalisma+0x8b0>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2120      	movs	r1, #32
 8006e0e:	4861      	ldr	r0, [pc, #388]	; (8006f94 <checkAktifCalisma+0x8b4>)
 8006e10:	f002 ffe9 	bl	8009de6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006e14:	4b60      	ldr	r3, [pc, #384]	; (8006f98 <checkAktifCalisma+0x8b8>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006e1a:	4b5f      	ldr	r3, [pc, #380]	; (8006f98 <checkAktifCalisma+0x8b8>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d025      	beq.n	8006e6e <checkAktifCalisma+0x78e>
 8006e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e26:	485d      	ldr	r0, [pc, #372]	; (8006f9c <checkAktifCalisma+0x8bc>)
 8006e28:	f002 ffc6 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d007      	beq.n	8006e42 <checkAktifCalisma+0x762>
 8006e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e36:	4857      	ldr	r0, [pc, #348]	; (8006f94 <checkAktifCalisma+0x8b4>)
 8006e38:	f002 ffbe 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d115      	bne.n	8006e6e <checkAktifCalisma+0x78e>
 8006e42:	4b57      	ldr	r3, [pc, #348]	; (8006fa0 <checkAktifCalisma+0x8c0>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d011      	beq.n	8006e6e <checkAktifCalisma+0x78e>
 8006e4a:	4b56      	ldr	r3, [pc, #344]	; (8006fa4 <checkAktifCalisma+0x8c4>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00d      	beq.n	8006e6e <checkAktifCalisma+0x78e>
 8006e52:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <checkAktifCalisma+0x8c8>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	f083 0301 	eor.w	r3, r3, #1
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d006      	beq.n	8006e6e <checkAktifCalisma+0x78e>
			timer2=millis;
 8006e60:	4b52      	ldr	r3, [pc, #328]	; (8006fac <checkAktifCalisma+0x8cc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a52      	ldr	r2, [pc, #328]	; (8006fb0 <checkAktifCalisma+0x8d0>)
 8006e66:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006e68:	4b4f      	ldr	r3, [pc, #316]	; (8006fa8 <checkAktifCalisma+0x8c8>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006e6e:	4b4f      	ldr	r3, [pc, #316]	; (8006fac <checkAktifCalisma+0x8cc>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b4f      	ldr	r3, [pc, #316]	; (8006fb0 <checkAktifCalisma+0x8d0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	4a4e      	ldr	r2, [pc, #312]	; (8006fb4 <checkAktifCalisma+0x8d4>)
 8006e7a:	7812      	ldrb	r2, [r2, #0]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d303      	bcc.n	8006e88 <checkAktifCalisma+0x7a8>
 8006e80:	4b49      	ldr	r3, [pc, #292]	; (8006fa8 <checkAktifCalisma+0x8c8>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <checkAktifCalisma+0x7c4>
 8006e88:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <checkAktifCalisma+0x8c0>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	f083 0301 	eor.w	r3, r3, #1
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <checkAktifCalisma+0x7c4>
 8006e96:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <checkAktifCalisma+0x8c4>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f083 0301 	eor.w	r3, r3, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2120      	movs	r1, #32
 8006ea8:	483a      	ldr	r0, [pc, #232]	; (8006f94 <checkAktifCalisma+0x8b4>)
 8006eaa:	f002 ff9c 	bl	8009de6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006eae:	4b3a      	ldr	r3, [pc, #232]	; (8006f98 <checkAktifCalisma+0x8b8>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006eb4:	4b3c      	ldr	r3, [pc, #240]	; (8006fa8 <checkAktifCalisma+0x8c8>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006eba:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <checkAktifCalisma+0x8d8>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 8088 	bne.w	8006fd4 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006ec4:	4b3d      	ldr	r3, [pc, #244]	; (8006fbc <checkAktifCalisma+0x8dc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d003      	beq.n	8006ed4 <checkAktifCalisma+0x7f4>
 8006ecc:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <checkAktifCalisma+0x8dc>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d17f      	bne.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006ed4:	4b32      	ldr	r3, [pc, #200]	; (8006fa0 <checkAktifCalisma+0x8c0>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d07b      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
 8006edc:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <checkAktifCalisma+0x8c4>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d077      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006ee4:	2140      	movs	r1, #64	; 0x40
 8006ee6:	482b      	ldr	r0, [pc, #172]	; (8006f94 <checkAktifCalisma+0x8b4>)
 8006ee8:	f002 ff66 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d170      	bne.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ef6:	4827      	ldr	r0, [pc, #156]	; (8006f94 <checkAktifCalisma+0x8b4>)
 8006ef8:	f002 ff5e 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <checkAktifCalisma+0x82a>
 8006f02:	4b2f      	ldr	r3, [pc, #188]	; (8006fc0 <checkAktifCalisma+0x8e0>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d164      	bne.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f0e:	4823      	ldr	r0, [pc, #140]	; (8006f9c <checkAktifCalisma+0x8bc>)
 8006f10:	f002 ff52 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d10f      	bne.n	8006f3a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f1e:	481f      	ldr	r0, [pc, #124]	; (8006f9c <checkAktifCalisma+0x8bc>)
 8006f20:	f002 ff4a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d107      	bne.n	8006f3a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f2e:	481b      	ldr	r0, [pc, #108]	; (8006f9c <checkAktifCalisma+0x8bc>)
 8006f30:	f002 ff42 	bl	8009db8 <HAL_GPIO_ReadPin>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d003      	beq.n	8006f42 <checkAktifCalisma+0x862>
 8006f3a:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <checkAktifCalisma+0x8e4>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d048      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <checkAktifCalisma+0x8e8>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f083 0301 	eor.w	r3, r3, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d041      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006f50:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <checkAktifCalisma+0x8ec>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	f083 0301 	eor.w	r3, r3, #1
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d03a      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <checkAktifCalisma+0x8f0>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	f083 0301 	eor.w	r3, r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d033      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <checkAktifCalisma+0x8b8>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f083 0301 	eor.w	r3, r3, #1
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02c      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <checkAktifCalisma+0x8b0>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f083 0301 	eor.w	r3, r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d025      	beq.n	8006fd4 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006f88:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <checkAktifCalisma+0x8e4>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e024      	b.n	8006fda <checkAktifCalisma+0x8fa>
 8006f90:	20000d66 	.word	0x20000d66
 8006f94:	40011000 	.word	0x40011000
 8006f98:	20000d6a 	.word	0x20000d6a
 8006f9c:	40010c00 	.word	0x40010c00
 8006fa0:	20000d82 	.word	0x20000d82
 8006fa4:	20000d83 	.word	0x20000d83
 8006fa8:	20000d62 	.word	0x20000d62
 8006fac:	20000cb0 	.word	0x20000cb0
 8006fb0:	20000cbc 	.word	0x20000cbc
 8006fb4:	20000d46 	.word	0x20000d46
 8006fb8:	20000d4d 	.word	0x20000d4d
 8006fbc:	20000d3f 	.word	0x20000d3f
 8006fc0:	20000d41 	.word	0x20000d41
 8006fc4:	20000d67 	.word	0x20000d67
 8006fc8:	20000d65 	.word	0x20000d65
 8006fcc:	20000d69 	.word	0x20000d69
 8006fd0:	20000d68 	.word	0x20000d68
		} else {
			devmotorasagicalisiyor=0;
 8006fd4:	4b96      	ldr	r3, [pc, #600]	; (8007230 <checkAktifCalisma+0xb50>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006fda:	4b95      	ldr	r3, [pc, #596]	; (8007230 <checkAktifCalisma+0xb50>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2110      	movs	r1, #16
 8006fe6:	4893      	ldr	r0, [pc, #588]	; (8007234 <checkAktifCalisma+0xb54>)
 8006fe8:	f002 fefd 	bl	8009de6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006fec:	4b92      	ldr	r3, [pc, #584]	; (8007238 <checkAktifCalisma+0xb58>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006ff2:	4b91      	ldr	r3, [pc, #580]	; (8007238 <checkAktifCalisma+0xb58>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d024      	beq.n	8007044 <checkAktifCalisma+0x964>
 8006ffa:	2140      	movs	r1, #64	; 0x40
 8006ffc:	488d      	ldr	r0, [pc, #564]	; (8007234 <checkAktifCalisma+0xb54>)
 8006ffe:	f002 fedb 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007002:	4603      	mov	r3, r0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d007      	beq.n	8007018 <checkAktifCalisma+0x938>
 8007008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800700c:	4889      	ldr	r0, [pc, #548]	; (8007234 <checkAktifCalisma+0xb54>)
 800700e:	f002 fed3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007012:	4603      	mov	r3, r0
 8007014:	2b01      	cmp	r3, #1
 8007016:	d115      	bne.n	8007044 <checkAktifCalisma+0x964>
 8007018:	4b88      	ldr	r3, [pc, #544]	; (800723c <checkAktifCalisma+0xb5c>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d011      	beq.n	8007044 <checkAktifCalisma+0x964>
 8007020:	4b87      	ldr	r3, [pc, #540]	; (8007240 <checkAktifCalisma+0xb60>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <checkAktifCalisma+0x964>
 8007028:	4b86      	ldr	r3, [pc, #536]	; (8007244 <checkAktifCalisma+0xb64>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	f083 0301 	eor.w	r3, r3, #1
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d006      	beq.n	8007044 <checkAktifCalisma+0x964>
			timer2=millis;
 8007036:	4b84      	ldr	r3, [pc, #528]	; (8007248 <checkAktifCalisma+0xb68>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a84      	ldr	r2, [pc, #528]	; (800724c <checkAktifCalisma+0xb6c>)
 800703c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800703e:	4b81      	ldr	r3, [pc, #516]	; (8007244 <checkAktifCalisma+0xb64>)
 8007040:	2201      	movs	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007044:	4b80      	ldr	r3, [pc, #512]	; (8007248 <checkAktifCalisma+0xb68>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4b80      	ldr	r3, [pc, #512]	; (800724c <checkAktifCalisma+0xb6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	4a80      	ldr	r2, [pc, #512]	; (8007250 <checkAktifCalisma+0xb70>)
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	4293      	cmp	r3, r2
 8007054:	d303      	bcc.n	800705e <checkAktifCalisma+0x97e>
 8007056:	4b7b      	ldr	r3, [pc, #492]	; (8007244 <checkAktifCalisma+0xb64>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10d      	bne.n	800707a <checkAktifCalisma+0x99a>
 800705e:	4b77      	ldr	r3, [pc, #476]	; (800723c <checkAktifCalisma+0xb5c>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	f083 0301 	eor.w	r3, r3, #1
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <checkAktifCalisma+0x99a>
 800706c:	4b74      	ldr	r3, [pc, #464]	; (8007240 <checkAktifCalisma+0xb60>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f083 0301 	eor.w	r3, r3, #1
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800707a:	2200      	movs	r2, #0
 800707c:	2110      	movs	r1, #16
 800707e:	486d      	ldr	r0, [pc, #436]	; (8007234 <checkAktifCalisma+0xb54>)
 8007080:	f002 feb1 	bl	8009de6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8007084:	4b6c      	ldr	r3, [pc, #432]	; (8007238 <checkAktifCalisma+0xb58>)
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800708a:	4b6e      	ldr	r3, [pc, #440]	; (8007244 <checkAktifCalisma+0xb64>)
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8007090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007094:	486f      	ldr	r0, [pc, #444]	; (8007254 <checkAktifCalisma+0xb74>)
 8007096:	f002 fe8f 	bl	8009db8 <HAL_GPIO_ReadPin>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d120      	bne.n	80070e2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80070a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070a4:	486b      	ldr	r0, [pc, #428]	; (8007254 <checkAktifCalisma+0xb74>)
 80070a6:	f002 fe87 	bl	8009db8 <HAL_GPIO_ReadPin>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d118      	bne.n	80070e2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80070b0:	2104      	movs	r1, #4
 80070b2:	4868      	ldr	r0, [pc, #416]	; (8007254 <checkAktifCalisma+0xb74>)
 80070b4:	f002 fe80 	bl	8009db8 <HAL_GPIO_ReadPin>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d111      	bne.n	80070e2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80070be:	2102      	movs	r1, #2
 80070c0:	4864      	ldr	r0, [pc, #400]	; (8007254 <checkAktifCalisma+0xb74>)
 80070c2:	f002 fe79 	bl	8009db8 <HAL_GPIO_ReadPin>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80070cc:	2101      	movs	r1, #1
 80070ce:	4861      	ldr	r0, [pc, #388]	; (8007254 <checkAktifCalisma+0xb74>)
 80070d0:	f002 fe72 	bl	8009db8 <HAL_GPIO_ReadPin>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <checkAktifCalisma+0xa02>
			makineStop=1;
 80070da:	4b5f      	ldr	r3, [pc, #380]	; (8007258 <checkAktifCalisma+0xb78>)
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	e002      	b.n	80070e8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80070e2:	4b5d      	ldr	r3, [pc, #372]	; (8007258 <checkAktifCalisma+0xb78>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070e8:	4b5c      	ldr	r3, [pc, #368]	; (800725c <checkAktifCalisma+0xb7c>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d144      	bne.n	800717a <checkAktifCalisma+0xa9a>
 80070f0:	4b5b      	ldr	r3, [pc, #364]	; (8007260 <checkAktifCalisma+0xb80>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d003      	beq.n	8007100 <checkAktifCalisma+0xa20>
 80070f8:	4b59      	ldr	r3, [pc, #356]	; (8007260 <checkAktifCalisma+0xb80>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d13c      	bne.n	800717a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	484c      	ldr	r0, [pc, #304]	; (8007234 <checkAktifCalisma+0xb54>)
 8007104:	f002 fe58 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <checkAktifCalisma+0xa36>
 800710e:	4b55      	ldr	r3, [pc, #340]	; (8007264 <checkAktifCalisma+0xb84>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <checkAktifCalisma+0xa4e>
 8007116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800711a:	484e      	ldr	r0, [pc, #312]	; (8007254 <checkAktifCalisma+0xb74>)
 800711c:	f002 fe4c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d129      	bne.n	800717a <checkAktifCalisma+0xa9a>
 8007126:	4b4f      	ldr	r3, [pc, #316]	; (8007264 <checkAktifCalisma+0xb84>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d125      	bne.n	800717a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800712e:	2104      	movs	r1, #4
 8007130:	4840      	ldr	r0, [pc, #256]	; (8007234 <checkAktifCalisma+0xb54>)
 8007132:	f002 fe41 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d003      	beq.n	8007144 <checkAktifCalisma+0xa64>
 800713c:	4b4a      	ldr	r3, [pc, #296]	; (8007268 <checkAktifCalisma+0xb88>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11a      	bne.n	800717a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007144:	2102      	movs	r1, #2
 8007146:	483b      	ldr	r0, [pc, #236]	; (8007234 <checkAktifCalisma+0xb54>)
 8007148:	f002 fe36 	bl	8009db8 <HAL_GPIO_ReadPin>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d113      	bne.n	800717a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8007152:	4b46      	ldr	r3, [pc, #280]	; (800726c <checkAktifCalisma+0xb8c>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f083 0301 	eor.w	r3, r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00c      	beq.n	800717a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8007160:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <checkAktifCalisma+0xb78>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8007168:	4b41      	ldr	r3, [pc, #260]	; (8007270 <checkAktifCalisma+0xb90>)
 800716a:	2201      	movs	r2, #1
 800716c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800716e:	4b36      	ldr	r3, [pc, #216]	; (8007248 <checkAktifCalisma+0xb68>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a40      	ldr	r2, [pc, #256]	; (8007274 <checkAktifCalisma+0xb94>)
 8007174:	6013      	str	r3, [r2, #0]
			bekle();
 8007176:	f7ff f87d 	bl	8006274 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800717a:	4b33      	ldr	r3, [pc, #204]	; (8007248 <checkAktifCalisma+0xb68>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b3d      	ldr	r3, [pc, #244]	; (8007274 <checkAktifCalisma+0xb94>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	4a3c      	ldr	r2, [pc, #240]	; (8007278 <checkAktifCalisma+0xb98>)
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	4293      	cmp	r3, r2
 800718a:	d211      	bcs.n	80071b0 <checkAktifCalisma+0xad0>
 800718c:	2104      	movs	r1, #4
 800718e:	4829      	ldr	r0, [pc, #164]	; (8007234 <checkAktifCalisma+0xb54>)
 8007190:	f002 fe12 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <checkAktifCalisma+0xad0>
 800719a:	4b33      	ldr	r3, [pc, #204]	; (8007268 <checkAktifCalisma+0xb88>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <checkAktifCalisma+0xad0>
 80071a2:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <checkAktifCalisma+0xb78>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f083 0301 	eor.w	r3, r3, #1
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80071b0:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <checkAktifCalisma+0xb90>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071b6:	4b29      	ldr	r3, [pc, #164]	; (800725c <checkAktifCalisma+0xb7c>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d160      	bne.n	8007280 <checkAktifCalisma+0xba0>
 80071be:	4b28      	ldr	r3, [pc, #160]	; (8007260 <checkAktifCalisma+0xb80>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d003      	beq.n	80071ce <checkAktifCalisma+0xaee>
 80071c6:	4b26      	ldr	r3, [pc, #152]	; (8007260 <checkAktifCalisma+0xb80>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d158      	bne.n	8007280 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80071ce:	2104      	movs	r1, #4
 80071d0:	4818      	ldr	r0, [pc, #96]	; (8007234 <checkAktifCalisma+0xb54>)
 80071d2:	f002 fdf1 	bl	8009db8 <HAL_GPIO_ReadPin>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d003      	beq.n	80071e4 <checkAktifCalisma+0xb04>
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <checkAktifCalisma+0xb88>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d14d      	bne.n	8007280 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80071e4:	2102      	movs	r1, #2
 80071e6:	4813      	ldr	r0, [pc, #76]	; (8007234 <checkAktifCalisma+0xb54>)
 80071e8:	f002 fde6 	bl	8009db8 <HAL_GPIO_ReadPin>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d146      	bne.n	8007280 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80071f2:	2180      	movs	r1, #128	; 0x80
 80071f4:	480f      	ldr	r0, [pc, #60]	; (8007234 <checkAktifCalisma+0xb54>)
 80071f6:	f002 fddf 	bl	8009db8 <HAL_GPIO_ReadPin>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <checkAktifCalisma+0xb28>
 8007200:	4b18      	ldr	r3, [pc, #96]	; (8007264 <checkAktifCalisma+0xb84>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <checkAktifCalisma+0xb40>
 8007208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800720c:	4811      	ldr	r0, [pc, #68]	; (8007254 <checkAktifCalisma+0xb74>)
 800720e:	f002 fdd3 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d133      	bne.n	8007280 <checkAktifCalisma+0xba0>
 8007218:	4b12      	ldr	r3, [pc, #72]	; (8007264 <checkAktifCalisma+0xb84>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d12f      	bne.n	8007280 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <checkAktifCalisma+0xb78>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d02b      	beq.n	8007280 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8007228:	4b14      	ldr	r3, [pc, #80]	; (800727c <checkAktifCalisma+0xb9c>)
 800722a:	2201      	movs	r2, #1
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e02a      	b.n	8007286 <checkAktifCalisma+0xba6>
 8007230:	20000d67 	.word	0x20000d67
 8007234:	40011000 	.word	0x40011000
 8007238:	20000d6b 	.word	0x20000d6b
 800723c:	20000d82 	.word	0x20000d82
 8007240:	20000d83 	.word	0x20000d83
 8007244:	20000d63 	.word	0x20000d63
 8007248:	20000cb0 	.word	0x20000cb0
 800724c:	20000cbc 	.word	0x20000cbc
 8007250:	20000d46 	.word	0x20000d46
 8007254:	40010c00 	.word	0x40010c00
 8007258:	20000d72 	.word	0x20000d72
 800725c:	20000d39 	.word	0x20000d39
 8007260:	20000d38 	.word	0x20000d38
 8007264:	20000d3c 	.word	0x20000d3c
 8007268:	20000d36 	.word	0x20000d36
 800726c:	20000d5f 	.word	0x20000d5f
 8007270:	20000d73 	.word	0x20000d73
 8007274:	20000cb4 	.word	0x20000cb4
 8007278:	20000d49 	.word	0x20000d49
 800727c:	20000d74 	.word	0x20000d74
		} else {
			kapi1butonkontrol=0;
 8007280:	4b8b      	ldr	r3, [pc, #556]	; (80074b0 <checkAktifCalisma+0xdd0>)
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007286:	4b8b      	ldr	r3, [pc, #556]	; (80074b4 <checkAktifCalisma+0xdd4>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d121      	bne.n	80072d2 <checkAktifCalisma+0xbf2>
 800728e:	4b8a      	ldr	r3, [pc, #552]	; (80074b8 <checkAktifCalisma+0xdd8>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d003      	beq.n	800729e <checkAktifCalisma+0xbbe>
 8007296:	4b88      	ldr	r3, [pc, #544]	; (80074b8 <checkAktifCalisma+0xdd8>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d119      	bne.n	80072d2 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800729e:	2104      	movs	r1, #4
 80072a0:	4886      	ldr	r0, [pc, #536]	; (80074bc <checkAktifCalisma+0xddc>)
 80072a2:	f002 fd89 	bl	8009db8 <HAL_GPIO_ReadPin>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d003      	beq.n	80072b4 <checkAktifCalisma+0xbd4>
 80072ac:	4b84      	ldr	r3, [pc, #528]	; (80074c0 <checkAktifCalisma+0xde0>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10e      	bne.n	80072d2 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80072b4:	2102      	movs	r1, #2
 80072b6:	4881      	ldr	r0, [pc, #516]	; (80074bc <checkAktifCalisma+0xddc>)
 80072b8:	f002 fd7e 	bl	8009db8 <HAL_GPIO_ReadPin>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d107      	bne.n	80072d2 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80072c2:	4b80      	ldr	r3, [pc, #512]	; (80074c4 <checkAktifCalisma+0xde4>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80072ca:	4b7f      	ldr	r3, [pc, #508]	; (80074c8 <checkAktifCalisma+0xde8>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80072d2:	4b7d      	ldr	r3, [pc, #500]	; (80074c8 <checkAktifCalisma+0xde8>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80072d8:	4b75      	ldr	r3, [pc, #468]	; (80074b0 <checkAktifCalisma+0xdd0>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d107      	bne.n	80072f0 <checkAktifCalisma+0xc10>
 80072e0:	4b79      	ldr	r3, [pc, #484]	; (80074c8 <checkAktifCalisma+0xde8>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d103      	bne.n	80072f0 <checkAktifCalisma+0xc10>
 80072e8:	4b78      	ldr	r3, [pc, #480]	; (80074cc <checkAktifCalisma+0xdec>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80072f0:	2201      	movs	r2, #1
 80072f2:	2180      	movs	r1, #128	; 0x80
 80072f4:	4876      	ldr	r0, [pc, #472]	; (80074d0 <checkAktifCalisma+0xdf0>)
 80072f6:	f002 fd76 	bl	8009de6 <HAL_GPIO_WritePin>
 80072fa:	e004      	b.n	8007306 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80072fc:	2200      	movs	r2, #0
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	4873      	ldr	r0, [pc, #460]	; (80074d0 <checkAktifCalisma+0xdf0>)
 8007302:	f002 fd70 	bl	8009de6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007306:	4b73      	ldr	r3, [pc, #460]	; (80074d4 <checkAktifCalisma+0xdf4>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d141      	bne.n	8007392 <checkAktifCalisma+0xcb2>
 800730e:	4b6a      	ldr	r3, [pc, #424]	; (80074b8 <checkAktifCalisma+0xdd8>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d003      	beq.n	800731e <checkAktifCalisma+0xc3e>
 8007316:	4b68      	ldr	r3, [pc, #416]	; (80074b8 <checkAktifCalisma+0xdd8>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d139      	bne.n	8007392 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800731e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007322:	4866      	ldr	r0, [pc, #408]	; (80074bc <checkAktifCalisma+0xddc>)
 8007324:	f002 fd48 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <checkAktifCalisma+0xc56>
 800732e:	4b6a      	ldr	r3, [pc, #424]	; (80074d8 <checkAktifCalisma+0xdf8>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <checkAktifCalisma+0xc6e>
 8007336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800733a:	4868      	ldr	r0, [pc, #416]	; (80074dc <checkAktifCalisma+0xdfc>)
 800733c:	f002 fd3c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d125      	bne.n	8007392 <checkAktifCalisma+0xcb2>
 8007346:	4b64      	ldr	r3, [pc, #400]	; (80074d8 <checkAktifCalisma+0xdf8>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d121      	bne.n	8007392 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800734e:	2102      	movs	r1, #2
 8007350:	485a      	ldr	r0, [pc, #360]	; (80074bc <checkAktifCalisma+0xddc>)
 8007352:	f002 fd31 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007356:	4603      	mov	r3, r0
 8007358:	2b01      	cmp	r3, #1
 800735a:	d11a      	bne.n	8007392 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800735c:	2104      	movs	r1, #4
 800735e:	4857      	ldr	r0, [pc, #348]	; (80074bc <checkAktifCalisma+0xddc>)
 8007360:	f002 fd2a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d113      	bne.n	8007392 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800736a:	4b56      	ldr	r3, [pc, #344]	; (80074c4 <checkAktifCalisma+0xde4>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00f      	beq.n	8007392 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007372:	4b5b      	ldr	r3, [pc, #364]	; (80074e0 <checkAktifCalisma+0xe00>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	f083 0301 	eor.w	r3, r3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007380:	4b58      	ldr	r3, [pc, #352]	; (80074e4 <checkAktifCalisma+0xe04>)
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007386:	4b58      	ldr	r3, [pc, #352]	; (80074e8 <checkAktifCalisma+0xe08>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a58      	ldr	r2, [pc, #352]	; (80074ec <checkAktifCalisma+0xe0c>)
 800738c:	6013      	str	r3, [r2, #0]
			bekle();
 800738e:	f7fe ff71 	bl	8006274 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007392:	4b55      	ldr	r3, [pc, #340]	; (80074e8 <checkAktifCalisma+0xe08>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4b55      	ldr	r3, [pc, #340]	; (80074ec <checkAktifCalisma+0xe0c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	4a54      	ldr	r2, [pc, #336]	; (80074f0 <checkAktifCalisma+0xe10>)
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d20d      	bcs.n	80073c0 <checkAktifCalisma+0xce0>
 80073a4:	2102      	movs	r1, #2
 80073a6:	4845      	ldr	r0, [pc, #276]	; (80074bc <checkAktifCalisma+0xddc>)
 80073a8:	f002 fd06 	bl	8009db8 <HAL_GPIO_ReadPin>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d006      	beq.n	80073c0 <checkAktifCalisma+0xce0>
 80073b2:	4b44      	ldr	r3, [pc, #272]	; (80074c4 <checkAktifCalisma+0xde4>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f083 0301 	eor.w	r3, r3, #1
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80073c0:	4b48      	ldr	r3, [pc, #288]	; (80074e4 <checkAktifCalisma+0xe04>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80073c6:	4b43      	ldr	r3, [pc, #268]	; (80074d4 <checkAktifCalisma+0xdf4>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d135      	bne.n	800743a <checkAktifCalisma+0xd5a>
 80073ce:	4b3a      	ldr	r3, [pc, #232]	; (80074b8 <checkAktifCalisma+0xdd8>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d003      	beq.n	80073de <checkAktifCalisma+0xcfe>
 80073d6:	4b38      	ldr	r3, [pc, #224]	; (80074b8 <checkAktifCalisma+0xdd8>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d12d      	bne.n	800743a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80073de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073e2:	4836      	ldr	r0, [pc, #216]	; (80074bc <checkAktifCalisma+0xddc>)
 80073e4:	f002 fce8 	bl	8009db8 <HAL_GPIO_ReadPin>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <checkAktifCalisma+0xd16>
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <checkAktifCalisma+0xdf8>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <checkAktifCalisma+0xd2e>
 80073f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073fa:	4838      	ldr	r0, [pc, #224]	; (80074dc <checkAktifCalisma+0xdfc>)
 80073fc:	f002 fcdc 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d119      	bne.n	800743a <checkAktifCalisma+0xd5a>
 8007406:	4b34      	ldr	r3, [pc, #208]	; (80074d8 <checkAktifCalisma+0xdf8>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d115      	bne.n	800743a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800740e:	2102      	movs	r1, #2
 8007410:	482a      	ldr	r0, [pc, #168]	; (80074bc <checkAktifCalisma+0xddc>)
 8007412:	f002 fcd1 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007416:	4603      	mov	r3, r0
 8007418:	2b01      	cmp	r3, #1
 800741a:	d10e      	bne.n	800743a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800741c:	2104      	movs	r1, #4
 800741e:	4827      	ldr	r0, [pc, #156]	; (80074bc <checkAktifCalisma+0xddc>)
 8007420:	f002 fcca 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800742a:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <checkAktifCalisma+0xde4>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007432:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <checkAktifCalisma+0xe14>)
 8007434:	2201      	movs	r2, #1
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	e002      	b.n	8007440 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800743a:	4b2e      	ldr	r3, [pc, #184]	; (80074f4 <checkAktifCalisma+0xe14>)
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <checkAktifCalisma+0xdf4>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d11d      	bne.n	8007484 <checkAktifCalisma+0xda4>
 8007448:	4b1b      	ldr	r3, [pc, #108]	; (80074b8 <checkAktifCalisma+0xdd8>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d003      	beq.n	8007458 <checkAktifCalisma+0xd78>
 8007450:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <checkAktifCalisma+0xdd8>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d115      	bne.n	8007484 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007458:	2102      	movs	r1, #2
 800745a:	4818      	ldr	r0, [pc, #96]	; (80074bc <checkAktifCalisma+0xddc>)
 800745c:	f002 fcac 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d10e      	bne.n	8007484 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007466:	2104      	movs	r1, #4
 8007468:	4814      	ldr	r0, [pc, #80]	; (80074bc <checkAktifCalisma+0xddc>)
 800746a:	f002 fca5 	bl	8009db8 <HAL_GPIO_ReadPin>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d107      	bne.n	8007484 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007474:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <checkAktifCalisma+0xde4>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <checkAktifCalisma+0xe18>)
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	e002      	b.n	800748a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007484:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <checkAktifCalisma+0xe18>)
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800748a:	4b1a      	ldr	r3, [pc, #104]	; (80074f4 <checkAktifCalisma+0xe14>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d107      	bne.n	80074a2 <checkAktifCalisma+0xdc2>
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <checkAktifCalisma+0xe18>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <checkAktifCalisma+0xdc2>
 800749a:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <checkAktifCalisma+0xe04>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d02c      	beq.n	80074fc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80074a2:	2201      	movs	r2, #1
 80074a4:	2140      	movs	r1, #64	; 0x40
 80074a6:	480a      	ldr	r0, [pc, #40]	; (80074d0 <checkAktifCalisma+0xdf0>)
 80074a8:	f002 fc9d 	bl	8009de6 <HAL_GPIO_WritePin>
 80074ac:	e02b      	b.n	8007506 <checkAktifCalisma+0xe26>
 80074ae:	bf00      	nop
 80074b0:	20000d74 	.word	0x20000d74
 80074b4:	20000d39 	.word	0x20000d39
 80074b8:	20000d38 	.word	0x20000d38
 80074bc:	40011000 	.word	0x40011000
 80074c0:	20000d36 	.word	0x20000d36
 80074c4:	20000d72 	.word	0x20000d72
 80074c8:	20000d75 	.word	0x20000d75
 80074cc:	20000d73 	.word	0x20000d73
 80074d0:	40010800 	.word	0x40010800
 80074d4:	20000d3a 	.word	0x20000d3a
 80074d8:	20000d3c 	.word	0x20000d3c
 80074dc:	40010c00 	.word	0x40010c00
 80074e0:	20000d5f 	.word	0x20000d5f
 80074e4:	20000d76 	.word	0x20000d76
 80074e8:	20000cb0 	.word	0x20000cb0
 80074ec:	20000cb4 	.word	0x20000cb4
 80074f0:	20000d4a 	.word	0x20000d4a
 80074f4:	20000d77 	.word	0x20000d77
 80074f8:	20000d78 	.word	0x20000d78
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80074fc:	2200      	movs	r2, #0
 80074fe:	2140      	movs	r1, #64	; 0x40
 8007500:	488d      	ldr	r0, [pc, #564]	; (8007738 <checkAktifCalisma+0x1058>)
 8007502:	f002 fc70 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007506:	4b8d      	ldr	r3, [pc, #564]	; (800773c <checkAktifCalisma+0x105c>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <checkAktifCalisma+0xe36>
 800750e:	4b8b      	ldr	r3, [pc, #556]	; (800773c <checkAktifCalisma+0x105c>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d115      	bne.n	8007542 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007516:	2104      	movs	r1, #4
 8007518:	4889      	ldr	r0, [pc, #548]	; (8007740 <checkAktifCalisma+0x1060>)
 800751a:	f002 fc4d 	bl	8009db8 <HAL_GPIO_ReadPin>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	d003      	beq.n	800752c <checkAktifCalisma+0xe4c>
 8007524:	4b87      	ldr	r3, [pc, #540]	; (8007744 <checkAktifCalisma+0x1064>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800752c:	2102      	movs	r1, #2
 800752e:	4884      	ldr	r0, [pc, #528]	; (8007740 <checkAktifCalisma+0x1060>)
 8007530:	f002 fc42 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800753a:	4b83      	ldr	r3, [pc, #524]	; (8007748 <checkAktifCalisma+0x1068>)
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	e002      	b.n	8007548 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007542:	4b81      	ldr	r3, [pc, #516]	; (8007748 <checkAktifCalisma+0x1068>)
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007548:	4b7c      	ldr	r3, [pc, #496]	; (800773c <checkAktifCalisma+0x105c>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d003      	beq.n	8007558 <checkAktifCalisma+0xe78>
 8007550:	4b7a      	ldr	r3, [pc, #488]	; (800773c <checkAktifCalisma+0x105c>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d111      	bne.n	800757c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007558:	2102      	movs	r1, #2
 800755a:	4879      	ldr	r0, [pc, #484]	; (8007740 <checkAktifCalisma+0x1060>)
 800755c:	f002 fc2c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007560:	4603      	mov	r3, r0
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10a      	bne.n	800757c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007566:	2104      	movs	r1, #4
 8007568:	4875      	ldr	r0, [pc, #468]	; (8007740 <checkAktifCalisma+0x1060>)
 800756a:	f002 fc25 	bl	8009db8 <HAL_GPIO_ReadPin>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007574:	4b75      	ldr	r3, [pc, #468]	; (800774c <checkAktifCalisma+0x106c>)
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e002      	b.n	8007582 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 800757c:	4b73      	ldr	r3, [pc, #460]	; (800774c <checkAktifCalisma+0x106c>)
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007582:	4b71      	ldr	r3, [pc, #452]	; (8007748 <checkAktifCalisma+0x1068>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00f      	beq.n	80075aa <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800758a:	4b71      	ldr	r3, [pc, #452]	; (8007750 <checkAktifCalisma+0x1070>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d10b      	bne.n	80075aa <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007596:	486f      	ldr	r0, [pc, #444]	; (8007754 <checkAktifCalisma+0x1074>)
 8007598:	f002 fc0e 	bl	8009db8 <HAL_GPIO_ReadPin>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80075a2:	4b6d      	ldr	r3, [pc, #436]	; (8007758 <checkAktifCalisma+0x1078>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e002      	b.n	80075b0 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80075aa:	4b6b      	ldr	r3, [pc, #428]	; (8007758 <checkAktifCalisma+0x1078>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80075b0:	4b66      	ldr	r3, [pc, #408]	; (800774c <checkAktifCalisma+0x106c>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00f      	beq.n	80075d8 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80075b8:	4b65      	ldr	r3, [pc, #404]	; (8007750 <checkAktifCalisma+0x1070>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10b      	bne.n	80075d8 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80075c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075c4:	4863      	ldr	r0, [pc, #396]	; (8007754 <checkAktifCalisma+0x1074>)
 80075c6:	f002 fbf7 	bl	8009db8 <HAL_GPIO_ReadPin>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80075d0:	4b62      	ldr	r3, [pc, #392]	; (800775c <checkAktifCalisma+0x107c>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e002      	b.n	80075de <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80075d8:	4b60      	ldr	r3, [pc, #384]	; (800775c <checkAktifCalisma+0x107c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80075de:	4b60      	ldr	r3, [pc, #384]	; (8007760 <checkAktifCalisma+0x1080>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d137      	bne.n	8007656 <checkAktifCalisma+0xf76>
 80075e6:	4b5f      	ldr	r3, [pc, #380]	; (8007764 <checkAktifCalisma+0x1084>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d003      	beq.n	80075f6 <checkAktifCalisma+0xf16>
 80075ee:	4b5d      	ldr	r3, [pc, #372]	; (8007764 <checkAktifCalisma+0x1084>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d12f      	bne.n	8007656 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80075f6:	4b54      	ldr	r3, [pc, #336]	; (8007748 <checkAktifCalisma+0x1068>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <checkAktifCalisma+0xf26>
 80075fe:	4b53      	ldr	r3, [pc, #332]	; (800774c <checkAktifCalisma+0x106c>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d027      	beq.n	8007656 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800760a:	484d      	ldr	r0, [pc, #308]	; (8007740 <checkAktifCalisma+0x1060>)
 800760c:	f002 fbd4 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <checkAktifCalisma+0xf3e>
 8007616:	4b4e      	ldr	r3, [pc, #312]	; (8007750 <checkAktifCalisma+0x1070>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800761e:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <checkAktifCalisma+0x1078>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d103      	bne.n	800762e <checkAktifCalisma+0xf4e>
 8007626:	4b4d      	ldr	r3, [pc, #308]	; (800775c <checkAktifCalisma+0x107c>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d013      	beq.n	8007656 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800762e:	4b4e      	ldr	r3, [pc, #312]	; (8007768 <checkAktifCalisma+0x1088>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00f      	beq.n	8007656 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007636:	4b4d      	ldr	r3, [pc, #308]	; (800776c <checkAktifCalisma+0x108c>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	f083 0301 	eor.w	r3, r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007644:	4b4a      	ldr	r3, [pc, #296]	; (8007770 <checkAktifCalisma+0x1090>)
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800764a:	4b4a      	ldr	r3, [pc, #296]	; (8007774 <checkAktifCalisma+0x1094>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a4a      	ldr	r2, [pc, #296]	; (8007778 <checkAktifCalisma+0x1098>)
 8007650:	6013      	str	r3, [r2, #0]
			bekle();
 8007652:	f7fe fe0f 	bl	8006274 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007656:	4b47      	ldr	r3, [pc, #284]	; (8007774 <checkAktifCalisma+0x1094>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b47      	ldr	r3, [pc, #284]	; (8007778 <checkAktifCalisma+0x1098>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	4a46      	ldr	r2, [pc, #280]	; (800777c <checkAktifCalisma+0x109c>)
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	4293      	cmp	r3, r2
 8007666:	d214      	bcs.n	8007692 <checkAktifCalisma+0xfb2>
 8007668:	4b37      	ldr	r3, [pc, #220]	; (8007748 <checkAktifCalisma+0x1068>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f083 0301 	eor.w	r3, r3, #1
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <checkAktifCalisma+0xfa4>
 8007676:	4b35      	ldr	r3, [pc, #212]	; (800774c <checkAktifCalisma+0x106c>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f083 0301 	eor.w	r3, r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <checkAktifCalisma+0xfb2>
 8007684:	4b38      	ldr	r3, [pc, #224]	; (8007768 <checkAktifCalisma+0x1088>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f083 0301 	eor.w	r3, r3, #1
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007692:	4b37      	ldr	r3, [pc, #220]	; (8007770 <checkAktifCalisma+0x1090>)
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007698:	4b31      	ldr	r3, [pc, #196]	; (8007760 <checkAktifCalisma+0x1080>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d12b      	bne.n	80076f8 <checkAktifCalisma+0x1018>
 80076a0:	4b30      	ldr	r3, [pc, #192]	; (8007764 <checkAktifCalisma+0x1084>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d003      	beq.n	80076b0 <checkAktifCalisma+0xfd0>
 80076a8:	4b2e      	ldr	r3, [pc, #184]	; (8007764 <checkAktifCalisma+0x1084>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d123      	bne.n	80076f8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80076b0:	4b25      	ldr	r3, [pc, #148]	; (8007748 <checkAktifCalisma+0x1068>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d103      	bne.n	80076c0 <checkAktifCalisma+0xfe0>
 80076b8:	4b24      	ldr	r3, [pc, #144]	; (800774c <checkAktifCalisma+0x106c>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01b      	beq.n	80076f8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80076c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076c4:	481e      	ldr	r0, [pc, #120]	; (8007740 <checkAktifCalisma+0x1060>)
 80076c6:	f002 fb77 	bl	8009db8 <HAL_GPIO_ReadPin>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <checkAktifCalisma+0xff8>
 80076d0:	4b1f      	ldr	r3, [pc, #124]	; (8007750 <checkAktifCalisma+0x1070>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80076d8:	4b1f      	ldr	r3, [pc, #124]	; (8007758 <checkAktifCalisma+0x1078>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <checkAktifCalisma+0x1008>
 80076e0:	4b1e      	ldr	r3, [pc, #120]	; (800775c <checkAktifCalisma+0x107c>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80076e8:	4b1f      	ldr	r3, [pc, #124]	; (8007768 <checkAktifCalisma+0x1088>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80076f0:	4b23      	ldr	r3, [pc, #140]	; (8007780 <checkAktifCalisma+0x10a0>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e002      	b.n	80076fe <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80076f8:	4b21      	ldr	r3, [pc, #132]	; (8007780 <checkAktifCalisma+0x10a0>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80076fe:	4b18      	ldr	r3, [pc, #96]	; (8007760 <checkAktifCalisma+0x1080>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d140      	bne.n	8007788 <checkAktifCalisma+0x10a8>
 8007706:	4b17      	ldr	r3, [pc, #92]	; (8007764 <checkAktifCalisma+0x1084>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d003      	beq.n	8007716 <checkAktifCalisma+0x1036>
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <checkAktifCalisma+0x1084>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d138      	bne.n	8007788 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <checkAktifCalisma+0x1068>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <checkAktifCalisma+0x1046>
 800771e:	4b0b      	ldr	r3, [pc, #44]	; (800774c <checkAktifCalisma+0x106c>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d030      	beq.n	8007788 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <checkAktifCalisma+0x1088>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d02c      	beq.n	8007788 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800772e:	4b15      	ldr	r3, [pc, #84]	; (8007784 <checkAktifCalisma+0x10a4>)
 8007730:	2201      	movs	r2, #1
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	e02b      	b.n	800778e <checkAktifCalisma+0x10ae>
 8007736:	bf00      	nop
 8007738:	40010800 	.word	0x40010800
 800773c:	20000d3d 	.word	0x20000d3d
 8007740:	40011000 	.word	0x40011000
 8007744:	20000d36 	.word	0x20000d36
 8007748:	20000d7c 	.word	0x20000d7c
 800774c:	20000d7d 	.word	0x20000d7d
 8007750:	20000d3c 	.word	0x20000d3c
 8007754:	40010c00 	.word	0x40010c00
 8007758:	20000d8c 	.word	0x20000d8c
 800775c:	20000d8d 	.word	0x20000d8d
 8007760:	20000d3b 	.word	0x20000d3b
 8007764:	20000d38 	.word	0x20000d38
 8007768:	20000d72 	.word	0x20000d72
 800776c:	20000d5f 	.word	0x20000d5f
 8007770:	20000d79 	.word	0x20000d79
 8007774:	20000cb0 	.word	0x20000cb0
 8007778:	20000cb4 	.word	0x20000cb4
 800777c:	20000d4b 	.word	0x20000d4b
 8007780:	20000d7a 	.word	0x20000d7a
 8007784:	20000d7b 	.word	0x20000d7b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007788:	4b89      	ldr	r3, [pc, #548]	; (80079b0 <checkAktifCalisma+0x12d0>)
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800778e:	4b89      	ldr	r3, [pc, #548]	; (80079b4 <checkAktifCalisma+0x12d4>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d107      	bne.n	80077a6 <checkAktifCalisma+0x10c6>
 8007796:	4b88      	ldr	r3, [pc, #544]	; (80079b8 <checkAktifCalisma+0x12d8>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <checkAktifCalisma+0x10c6>
 800779e:	4b84      	ldr	r3, [pc, #528]	; (80079b0 <checkAktifCalisma+0x12d0>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80077a6:	2201      	movs	r2, #1
 80077a8:	2120      	movs	r1, #32
 80077aa:	4884      	ldr	r0, [pc, #528]	; (80079bc <checkAktifCalisma+0x12dc>)
 80077ac:	f002 fb1b 	bl	8009de6 <HAL_GPIO_WritePin>
 80077b0:	e004      	b.n	80077bc <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2120      	movs	r1, #32
 80077b6:	4881      	ldr	r0, [pc, #516]	; (80079bc <checkAktifCalisma+0x12dc>)
 80077b8:	f002 fb15 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80077bc:	4b80      	ldr	r3, [pc, #512]	; (80079c0 <checkAktifCalisma+0x12e0>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00e      	beq.n	80077e2 <checkAktifCalisma+0x1102>
 80077c4:	2102      	movs	r1, #2
 80077c6:	487f      	ldr	r0, [pc, #508]	; (80079c4 <checkAktifCalisma+0x12e4>)
 80077c8:	f002 faf6 	bl	8009db8 <HAL_GPIO_ReadPin>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <checkAktifCalisma+0x1102>
 80077d2:	4b7d      	ldr	r3, [pc, #500]	; (80079c8 <checkAktifCalisma+0x12e8>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <checkAktifCalisma+0x1102>
 80077da:	4b7c      	ldr	r3, [pc, #496]	; (80079cc <checkAktifCalisma+0x12ec>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d112      	bne.n	8007808 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80077e2:	4b7b      	ldr	r3, [pc, #492]	; (80079d0 <checkAktifCalisma+0x12f0>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d066      	beq.n	80078b8 <checkAktifCalisma+0x11d8>
 80077ea:	2104      	movs	r1, #4
 80077ec:	4875      	ldr	r0, [pc, #468]	; (80079c4 <checkAktifCalisma+0x12e4>)
 80077ee:	f002 fae3 	bl	8009db8 <HAL_GPIO_ReadPin>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d15f      	bne.n	80078b8 <checkAktifCalisma+0x11d8>
 80077f8:	4b73      	ldr	r3, [pc, #460]	; (80079c8 <checkAktifCalisma+0x12e8>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05b      	beq.n	80078b8 <checkAktifCalisma+0x11d8>
 8007800:	4b72      	ldr	r3, [pc, #456]	; (80079cc <checkAktifCalisma+0x12ec>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d057      	beq.n	80078b8 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007808:	4b72      	ldr	r3, [pc, #456]	; (80079d4 <checkAktifCalisma+0x12f4>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	3301      	adds	r3, #1
 800780e:	b2da      	uxtb	r2, r3
 8007810:	4b70      	ldr	r3, [pc, #448]	; (80079d4 <checkAktifCalisma+0x12f4>)
 8007812:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007814:	4b6f      	ldr	r3, [pc, #444]	; (80079d4 <checkAktifCalisma+0x12f4>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b09      	cmp	r3, #9
 800781a:	d908      	bls.n	800782e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 800781c:	4b6d      	ldr	r3, [pc, #436]	; (80079d4 <checkAktifCalisma+0x12f4>)
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007822:	4b6d      	ldr	r3, [pc, #436]	; (80079d8 <checkAktifCalisma+0x12f8>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	b2da      	uxtb	r2, r3
 800782a:	4b6b      	ldr	r3, [pc, #428]	; (80079d8 <checkAktifCalisma+0x12f8>)
 800782c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800782e:	4b6a      	ldr	r3, [pc, #424]	; (80079d8 <checkAktifCalisma+0x12f8>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d908      	bls.n	8007848 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007836:	4b68      	ldr	r3, [pc, #416]	; (80079d8 <checkAktifCalisma+0x12f8>)
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 800783c:	4b67      	ldr	r3, [pc, #412]	; (80079dc <checkAktifCalisma+0x12fc>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	4b65      	ldr	r3, [pc, #404]	; (80079dc <checkAktifCalisma+0x12fc>)
 8007846:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007848:	4b64      	ldr	r3, [pc, #400]	; (80079dc <checkAktifCalisma+0x12fc>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b09      	cmp	r3, #9
 800784e:	d908      	bls.n	8007862 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007850:	4b62      	ldr	r3, [pc, #392]	; (80079dc <checkAktifCalisma+0x12fc>)
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007856:	4b62      	ldr	r3, [pc, #392]	; (80079e0 <checkAktifCalisma+0x1300>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	4b60      	ldr	r3, [pc, #384]	; (80079e0 <checkAktifCalisma+0x1300>)
 8007860:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007862:	4b5f      	ldr	r3, [pc, #380]	; (80079e0 <checkAktifCalisma+0x1300>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b09      	cmp	r3, #9
 8007868:	d908      	bls.n	800787c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800786a:	4b5d      	ldr	r3, [pc, #372]	; (80079e0 <checkAktifCalisma+0x1300>)
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007870:	4b5c      	ldr	r3, [pc, #368]	; (80079e4 <checkAktifCalisma+0x1304>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <checkAktifCalisma+0x1304>)
 800787a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800787c:	4b59      	ldr	r3, [pc, #356]	; (80079e4 <checkAktifCalisma+0x1304>)
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	4b59      	ldr	r3, [pc, #356]	; (80079e8 <checkAktifCalisma+0x1308>)
 8007882:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007886:	4b56      	ldr	r3, [pc, #344]	; (80079e0 <checkAktifCalisma+0x1300>)
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	4b57      	ldr	r3, [pc, #348]	; (80079e8 <checkAktifCalisma+0x1308>)
 800788c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800788e:	4b53      	ldr	r3, [pc, #332]	; (80079dc <checkAktifCalisma+0x12fc>)
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	4b55      	ldr	r3, [pc, #340]	; (80079e8 <checkAktifCalisma+0x1308>)
 8007894:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007896:	4b50      	ldr	r3, [pc, #320]	; (80079d8 <checkAktifCalisma+0x12f8>)
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	4b53      	ldr	r3, [pc, #332]	; (80079e8 <checkAktifCalisma+0x1308>)
 800789c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800789e:	4b4d      	ldr	r3, [pc, #308]	; (80079d4 <checkAktifCalisma+0x12f4>)
 80078a0:	781a      	ldrb	r2, [r3, #0]
 80078a2:	4b51      	ldr	r3, [pc, #324]	; (80079e8 <checkAktifCalisma+0x1308>)
 80078a4:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80078a6:	4b51      	ldr	r3, [pc, #324]	; (80079ec <checkAktifCalisma+0x130c>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80078ac:	4b44      	ldr	r3, [pc, #272]	; (80079c0 <checkAktifCalisma+0x12e0>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80078b2:	4b47      	ldr	r3, [pc, #284]	; (80079d0 <checkAktifCalisma+0x12f0>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80078b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078bc:	484c      	ldr	r0, [pc, #304]	; (80079f0 <checkAktifCalisma+0x1310>)
 80078be:	f002 fa7b 	bl	8009db8 <HAL_GPIO_ReadPin>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d016      	beq.n	80078f6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80078c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80078cc:	4848      	ldr	r0, [pc, #288]	; (80079f0 <checkAktifCalisma+0x1310>)
 80078ce:	f002 fa73 	bl	8009db8 <HAL_GPIO_ReadPin>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00e      	beq.n	80078f6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80078d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078dc:	4844      	ldr	r0, [pc, #272]	; (80079f0 <checkAktifCalisma+0x1310>)
 80078de:	f002 fa6b 	bl	8009db8 <HAL_GPIO_ReadPin>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80078e8:	2140      	movs	r1, #64	; 0x40
 80078ea:	4836      	ldr	r0, [pc, #216]	; (80079c4 <checkAktifCalisma+0x12e4>)
 80078ec:	f002 fa64 	bl	8009db8 <HAL_GPIO_ReadPin>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <checkAktifCalisma+0x121e>
			startBasili=1;
 80078f6:	4b3f      	ldr	r3, [pc, #252]	; (80079f4 <checkAktifCalisma+0x1314>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	e002      	b.n	8007904 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80078fe:	4b3d      	ldr	r3, [pc, #244]	; (80079f4 <checkAktifCalisma+0x1314>)
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007904:	4b3b      	ldr	r3, [pc, #236]	; (80079f4 <checkAktifCalisma+0x1314>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d014      	beq.n	8007936 <checkAktifCalisma+0x1256>
 800790c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007910:	4837      	ldr	r0, [pc, #220]	; (80079f0 <checkAktifCalisma+0x1310>)
 8007912:	f002 fa51 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007916:	4603      	mov	r3, r0
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10c      	bne.n	8007936 <checkAktifCalisma+0x1256>
			hataVar=1;
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <checkAktifCalisma+0x1318>)
 800791e:	2201      	movs	r2, #1
 8007920:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007922:	2001      	movs	r0, #1
 8007924:	f7fe f850 	bl	80059c8 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007928:	2001      	movs	r0, #1
 800792a:	f7fe fc27 	bl	800617c <hata2EEPROM>
			acilstophatasi=1;
 800792e:	4b33      	ldr	r3, [pc, #204]	; (80079fc <checkAktifCalisma+0x131c>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e018      	b.n	8007968 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007936:	4b31      	ldr	r3, [pc, #196]	; (80079fc <checkAktifCalisma+0x131c>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <checkAktifCalisma+0x1288>
 800793e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007942:	482b      	ldr	r0, [pc, #172]	; (80079f0 <checkAktifCalisma+0x1310>)
 8007944:	f002 fa38 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <checkAktifCalisma+0x1288>
 800794e:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <checkAktifCalisma+0x1314>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f083 0301 	eor.w	r3, r3, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 800795c:	4b27      	ldr	r3, [pc, #156]	; (80079fc <checkAktifCalisma+0x131c>)
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007962:	2001      	movs	r0, #1
 8007964:	f7fd ffdc 	bl	8005920 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <checkAktifCalisma+0x1320>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f083 0301 	eor.w	r3, r3, #1
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d04c      	beq.n	8007a10 <checkAktifCalisma+0x1330>
 8007976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800797a:	481d      	ldr	r0, [pc, #116]	; (80079f0 <checkAktifCalisma+0x1310>)
 800797c:	f002 fa1c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <checkAktifCalisma+0x12ae>
 8007986:	4b1f      	ldr	r3, [pc, #124]	; (8007a04 <checkAktifCalisma+0x1324>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d040      	beq.n	8007a10 <checkAktifCalisma+0x1330>
 800798e:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <checkAktifCalisma+0x1328>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d13c      	bne.n	8007a10 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007996:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <checkAktifCalisma+0x1318>)
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800799c:	2002      	movs	r0, #2
 800799e:	f7fe f813 	bl	80059c8 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80079a2:	2002      	movs	r0, #2
 80079a4:	f7fe fbea 	bl	800617c <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80079a8:	4b18      	ldr	r3, [pc, #96]	; (8007a0c <checkAktifCalisma+0x132c>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e047      	b.n	8007a40 <checkAktifCalisma+0x1360>
 80079b0:	20000d7b 	.word	0x20000d7b
 80079b4:	20000d7a 	.word	0x20000d7a
 80079b8:	20000d79 	.word	0x20000d79
 80079bc:	40010800 	.word	0x40010800
 80079c0:	20000d6f 	.word	0x20000d6f
 80079c4:	40011000 	.word	0x40011000
 80079c8:	20000d36 	.word	0x20000d36
 80079cc:	20000d72 	.word	0x20000d72
 80079d0:	20000d70 	.word	0x20000d70
 80079d4:	20000d2d 	.word	0x20000d2d
 80079d8:	20000d2e 	.word	0x20000d2e
 80079dc:	200009b4 	.word	0x200009b4
 80079e0:	200009b5 	.word	0x200009b5
 80079e4:	20000d2f 	.word	0x20000d2f
 80079e8:	20000c38 	.word	0x20000c38
 80079ec:	20000d5c 	.word	0x20000d5c
 80079f0:	40010c00 	.word	0x40010c00
 80079f4:	20000d7e 	.word	0x20000d7e
 80079f8:	20000d85 	.word	0x20000d85
 80079fc:	20000d80 	.word	0x20000d80
 8007a00:	20000d87 	.word	0x20000d87
 8007a04:	20000d91 	.word	0x20000d91
 8007a08:	20000d34 	.word	0x20000d34
 8007a0c:	20000d81 	.word	0x20000d81
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007a10:	4b97      	ldr	r3, [pc, #604]	; (8007c70 <checkAktifCalisma+0x1590>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d013      	beq.n	8007a40 <checkAktifCalisma+0x1360>
 8007a18:	4b96      	ldr	r3, [pc, #600]	; (8007c74 <checkAktifCalisma+0x1594>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00f      	beq.n	8007a40 <checkAktifCalisma+0x1360>
 8007a20:	4b95      	ldr	r3, [pc, #596]	; (8007c78 <checkAktifCalisma+0x1598>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	f083 0301 	eor.w	r3, r3, #1
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007a2e:	4b90      	ldr	r3, [pc, #576]	; (8007c70 <checkAktifCalisma+0x1590>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007a34:	4b91      	ldr	r3, [pc, #580]	; (8007c7c <checkAktifCalisma+0x159c>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007a3a:	2002      	movs	r0, #2
 8007a3c:	f7fd ff70 	bl	8005920 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007a40:	4b8f      	ldr	r3, [pc, #572]	; (8007c80 <checkAktifCalisma+0x15a0>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11c      	bne.n	8007a82 <checkAktifCalisma+0x13a2>
 8007a48:	4b8e      	ldr	r3, [pc, #568]	; (8007c84 <checkAktifCalisma+0x15a4>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d118      	bne.n	8007a82 <checkAktifCalisma+0x13a2>
 8007a50:	4b8d      	ldr	r3, [pc, #564]	; (8007c88 <checkAktifCalisma+0x15a8>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d014      	beq.n	8007a82 <checkAktifCalisma+0x13a2>
 8007a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a5c:	488b      	ldr	r0, [pc, #556]	; (8007c8c <checkAktifCalisma+0x15ac>)
 8007a5e:	f002 f9ab 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d10c      	bne.n	8007a82 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007a68:	4b89      	ldr	r3, [pc, #548]	; (8007c90 <checkAktifCalisma+0x15b0>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007a6e:	2003      	movs	r0, #3
 8007a70:	f7fd ffaa 	bl	80059c8 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007a74:	2003      	movs	r0, #3
 8007a76:	f7fe fb81 	bl	800617c <hata2EEPROM>
			basinchatasi=1;
 8007a7a:	4b86      	ldr	r3, [pc, #536]	; (8007c94 <checkAktifCalisma+0x15b4>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e015      	b.n	8007aae <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007a82:	4b84      	ldr	r3, [pc, #528]	; (8007c94 <checkAktifCalisma+0x15b4>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <checkAktifCalisma+0x13ce>
 8007a8a:	4b7d      	ldr	r3, [pc, #500]	; (8007c80 <checkAktifCalisma+0x15a0>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10d      	bne.n	8007aae <checkAktifCalisma+0x13ce>
 8007a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a96:	4880      	ldr	r0, [pc, #512]	; (8007c98 <checkAktifCalisma+0x15b8>)
 8007a98:	f002 f98e 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d105      	bne.n	8007aae <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007aa2:	4b7c      	ldr	r3, [pc, #496]	; (8007c94 <checkAktifCalisma+0x15b4>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007aa8:	2003      	movs	r0, #3
 8007aaa:	f7fd ff39 	bl	8005920 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007aae:	4b7b      	ldr	r3, [pc, #492]	; (8007c9c <checkAktifCalisma+0x15bc>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <checkAktifCalisma+0x13de>
 8007ab6:	4b7a      	ldr	r3, [pc, #488]	; (8007ca0 <checkAktifCalisma+0x15c0>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01c      	beq.n	8007af8 <checkAktifCalisma+0x1418>
 8007abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac2:	4878      	ldr	r0, [pc, #480]	; (8007ca4 <checkAktifCalisma+0x15c4>)
 8007ac4:	f002 f978 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d114      	bne.n	8007af8 <checkAktifCalisma+0x1418>
 8007ace:	4b76      	ldr	r3, [pc, #472]	; (8007ca8 <checkAktifCalisma+0x15c8>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d003      	beq.n	8007ade <checkAktifCalisma+0x13fe>
 8007ad6:	4b74      	ldr	r3, [pc, #464]	; (8007ca8 <checkAktifCalisma+0x15c8>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d10c      	bne.n	8007af8 <checkAktifCalisma+0x1418>
			hataVar=1;
 8007ade:	4b6c      	ldr	r3, [pc, #432]	; (8007c90 <checkAktifCalisma+0x15b0>)
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007ae4:	2004      	movs	r0, #4
 8007ae6:	f7fd ff6f 	bl	80059c8 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007aea:	2004      	movs	r0, #4
 8007aec:	f7fe fb46 	bl	800617c <hata2EEPROM>
			katkapisivicihatasi=1;
 8007af0:	4b6e      	ldr	r3, [pc, #440]	; (8007cac <checkAktifCalisma+0x15cc>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e01f      	b.n	8007b38 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007af8:	4b6c      	ldr	r3, [pc, #432]	; (8007cac <checkAktifCalisma+0x15cc>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01b      	beq.n	8007b38 <checkAktifCalisma+0x1458>
 8007b00:	4b6b      	ldr	r3, [pc, #428]	; (8007cb0 <checkAktifCalisma+0x15d0>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <checkAktifCalisma+0x1458>
 8007b08:	4b64      	ldr	r3, [pc, #400]	; (8007c9c <checkAktifCalisma+0x15bc>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f083 0301 	eor.w	r3, r3, #1
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d010      	beq.n	8007b38 <checkAktifCalisma+0x1458>
 8007b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b1a:	4862      	ldr	r0, [pc, #392]	; (8007ca4 <checkAktifCalisma+0x15c4>)
 8007b1c:	f002 f94c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007b26:	4b61      	ldr	r3, [pc, #388]	; (8007cac <checkAktifCalisma+0x15cc>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007b2c:	4b5c      	ldr	r3, [pc, #368]	; (8007ca0 <checkAktifCalisma+0x15c0>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007b32:	2004      	movs	r0, #4
 8007b34:	f7fd fef4 	bl	8005920 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007b38:	4b58      	ldr	r3, [pc, #352]	; (8007c9c <checkAktifCalisma+0x15bc>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <checkAktifCalisma+0x1468>
 8007b40:	4b5c      	ldr	r3, [pc, #368]	; (8007cb4 <checkAktifCalisma+0x15d4>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01c      	beq.n	8007b82 <checkAktifCalisma+0x14a2>
 8007b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b4c:	4855      	ldr	r0, [pc, #340]	; (8007ca4 <checkAktifCalisma+0x15c4>)
 8007b4e:	f002 f933 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d114      	bne.n	8007b82 <checkAktifCalisma+0x14a2>
 8007b58:	4b53      	ldr	r3, [pc, #332]	; (8007ca8 <checkAktifCalisma+0x15c8>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d003      	beq.n	8007b68 <checkAktifCalisma+0x1488>
 8007b60:	4b51      	ldr	r3, [pc, #324]	; (8007ca8 <checkAktifCalisma+0x15c8>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d10c      	bne.n	8007b82 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007b68:	4b49      	ldr	r3, [pc, #292]	; (8007c90 <checkAktifCalisma+0x15b0>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007b6e:	2005      	movs	r0, #5
 8007b70:	f7fd ff2a 	bl	80059c8 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007b74:	2005      	movs	r0, #5
 8007b76:	f7fe fb01 	bl	800617c <hata2EEPROM>
			tablakapisivicihatasi=1;
 8007b7a:	4b4f      	ldr	r3, [pc, #316]	; (8007cb8 <checkAktifCalisma+0x15d8>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	e023      	b.n	8007bca <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007b82:	4b4d      	ldr	r3, [pc, #308]	; (8007cb8 <checkAktifCalisma+0x15d8>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01f      	beq.n	8007bca <checkAktifCalisma+0x14ea>
 8007b8a:	4b49      	ldr	r3, [pc, #292]	; (8007cb0 <checkAktifCalisma+0x15d0>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01b      	beq.n	8007bca <checkAktifCalisma+0x14ea>
 8007b92:	4b42      	ldr	r3, [pc, #264]	; (8007c9c <checkAktifCalisma+0x15bc>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	f083 0301 	eor.w	r3, r3, #1
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d014      	beq.n	8007bca <checkAktifCalisma+0x14ea>
 8007ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ba4:	483f      	ldr	r0, [pc, #252]	; (8007ca4 <checkAktifCalisma+0x15c4>)
 8007ba6:	f002 f907 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10c      	bne.n	8007bca <checkAktifCalisma+0x14ea>
 8007bb0:	4b3f      	ldr	r3, [pc, #252]	; (8007cb0 <checkAktifCalisma+0x15d0>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d008      	beq.n	8007bca <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007bb8:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <checkAktifCalisma+0x15d8>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007bbe:	4b3d      	ldr	r3, [pc, #244]	; (8007cb4 <checkAktifCalisma+0x15d4>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007bc4:	2005      	movs	r0, #5
 8007bc6:	f7fd feab 	bl	8005920 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007bca:	4b2f      	ldr	r3, [pc, #188]	; (8007c88 <checkAktifCalisma+0x15a8>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d107      	bne.n	8007be2 <checkAktifCalisma+0x1502>
 8007bd2:	4b29      	ldr	r3, [pc, #164]	; (8007c78 <checkAktifCalisma+0x1598>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <checkAktifCalisma+0x1502>
 8007bda:	4b38      	ldr	r3, [pc, #224]	; (8007cbc <checkAktifCalisma+0x15dc>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d014      	beq.n	8007c0c <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007be2:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <checkAktifCalisma+0x15e0>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4b37      	ldr	r3, [pc, #220]	; (8007cc4 <checkAktifCalisma+0x15e4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	4a36      	ldr	r2, [pc, #216]	; (8007cc8 <checkAktifCalisma+0x15e8>)
 8007bee:	7812      	ldrb	r2, [r2, #0]
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d30b      	bcc.n	8007c0c <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007bf4:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <checkAktifCalisma+0x15b0>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007bfa:	2006      	movs	r0, #6
 8007bfc:	f7fd fee4 	bl	80059c8 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007c00:	2006      	movs	r0, #6
 8007c02:	f7fe fabb 	bl	800617c <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007c06:	4b31      	ldr	r3, [pc, #196]	; (8007ccc <checkAktifCalisma+0x15ec>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007c0c:	4b2f      	ldr	r3, [pc, #188]	; (8007ccc <checkAktifCalisma+0x15ec>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d013      	beq.n	8007c3c <checkAktifCalisma+0x155c>
 8007c14:	2108      	movs	r1, #8
 8007c16:	4823      	ldr	r0, [pc, #140]	; (8007ca4 <checkAktifCalisma+0x15c4>)
 8007c18:	f002 f8ce 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00c      	beq.n	8007c3c <checkAktifCalisma+0x155c>
 8007c22:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <checkAktifCalisma+0x15bc>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f083 0301 	eor.w	r3, r3, #1
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007c30:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <checkAktifCalisma+0x15ec>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007c36:	2006      	movs	r0, #6
 8007c38:	f7fd fe72 	bl	8005920 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007c3c:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <checkAktifCalisma+0x15f0>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10b      	bne.n	8007c5c <checkAktifCalisma+0x157c>
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <checkAktifCalisma+0x1598>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d107      	bne.n	8007c5c <checkAktifCalisma+0x157c>
 8007c4c:	4b21      	ldr	r3, [pc, #132]	; (8007cd4 <checkAktifCalisma+0x15f4>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <checkAktifCalisma+0x157c>
 8007c54:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <checkAktifCalisma+0x15dc>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d03f      	beq.n	8007cdc <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007c5c:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <checkAktifCalisma+0x15f8>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007c62:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <checkAktifCalisma+0x15c0>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <checkAktifCalisma+0x15d4>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e03c      	b.n	8007cea <checkAktifCalisma+0x160a>
 8007c70:	20000d81 	.word	0x20000d81
 8007c74:	20000d87 	.word	0x20000d87
 8007c78:	20000d68 	.word	0x20000d68
 8007c7c:	20000d91 	.word	0x20000d91
 8007c80:	20000d33 	.word	0x20000d33
 8007c84:	20000d37 	.word	0x20000d37
 8007c88:	20000d84 	.word	0x20000d84
 8007c8c:	40011000 	.word	0x40011000
 8007c90:	20000d85 	.word	0x20000d85
 8007c94:	20000d8e 	.word	0x20000d8e
 8007c98:	40010c00 	.word	0x40010c00
 8007c9c:	20000d7e 	.word	0x20000d7e
 8007ca0:	20000d92 	.word	0x20000d92
 8007ca4:	40010800 	.word	0x40010800
 8007ca8:	20000d38 	.word	0x20000d38
 8007cac:	20000d8f 	.word	0x20000d8f
 8007cb0:	20000d72 	.word	0x20000d72
 8007cb4:	20000d93 	.word	0x20000d93
 8007cb8:	20000d90 	.word	0x20000d90
 8007cbc:	20000d67 	.word	0x20000d67
 8007cc0:	20000cb0 	.word	0x20000cb0
 8007cc4:	20000cc4 	.word	0x20000cc4
 8007cc8:	20000d48 	.word	0x20000d48
 8007ccc:	20000d7f 	.word	0x20000d7f
 8007cd0:	20000d65 	.word	0x20000d65
 8007cd4:	20000d66 	.word	0x20000d66
 8007cd8:	20000d86 	.word	0x20000d86
		} else {
			makineCalisiyor=1;
 8007cdc:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <checkAktifCalisma+0x1678>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007ce2:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <checkAktifCalisma+0x167c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	; (8007d60 <checkAktifCalisma+0x1680>)
 8007ce8:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007cea:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <checkAktifCalisma+0x1684>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d02f      	beq.n	8007d52 <checkAktifCalisma+0x1672>
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <checkAktifCalisma+0x1688>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f083 0301 	eor.w	r3, r3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d028      	beq.n	8007d52 <checkAktifCalisma+0x1672>
 8007d00:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <checkAktifCalisma+0x168c>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f083 0301 	eor.w	r3, r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d021      	beq.n	8007d52 <checkAktifCalisma+0x1672>
 8007d0e:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <checkAktifCalisma+0x1690>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f083 0301 	eor.w	r3, r3, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007d1c:	4b15      	ldr	r3, [pc, #84]	; (8007d74 <checkAktifCalisma+0x1694>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f083 0301 	eor.w	r3, r3, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d013      	beq.n	8007d52 <checkAktifCalisma+0x1672>
 8007d2a:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <checkAktifCalisma+0x1698>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f083 0301 	eor.w	r3, r3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00c      	beq.n	8007d52 <checkAktifCalisma+0x1672>
 8007d38:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <checkAktifCalisma+0x169c>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f083 0301 	eor.w	r3, r3, #1
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <checkAktifCalisma+0x1684>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007d4c:	2007      	movs	r0, #7
 8007d4e:	f7fd fde7 	bl	8005920 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007d52:	bf00      	nop
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000d86 	.word	0x20000d86
 8007d5c:	20000cb0 	.word	0x20000cb0
 8007d60:	20000cc4 	.word	0x20000cc4
 8007d64:	20000d85 	.word	0x20000d85
 8007d68:	20000d80 	.word	0x20000d80
 8007d6c:	20000d81 	.word	0x20000d81
 8007d70:	20000d8e 	.word	0x20000d8e
 8007d74:	20000d8f 	.word	0x20000d8f
 8007d78:	20000d90 	.word	0x20000d90
 8007d7c:	20000d7f 	.word	0x20000d7f

08007d80 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007d84:	4b8b      	ldr	r3, [pc, #556]	; (8007fb4 <checkDemoModCalisma+0x234>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	f040 8229 	bne.w	80081e0 <checkDemoModCalisma+0x460>
 8007d8e:	4b8a      	ldr	r3, [pc, #552]	; (8007fb8 <checkDemoModCalisma+0x238>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8224 	beq.w	80081e0 <checkDemoModCalisma+0x460>
 8007d98:	4b88      	ldr	r3, [pc, #544]	; (8007fbc <checkDemoModCalisma+0x23c>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 821f 	bne.w	80081e0 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007da2:	2102      	movs	r1, #2
 8007da4:	4886      	ldr	r0, [pc, #536]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007da6:	f002 f807 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11d      	bne.n	8007dec <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007db0:	4b84      	ldr	r3, [pc, #528]	; (8007fc4 <checkDemoModCalisma+0x244>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f083 0301 	eor.w	r3, r3, #1
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d016      	beq.n	8007dec <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007dbe:	4b82      	ldr	r3, [pc, #520]	; (8007fc8 <checkDemoModCalisma+0x248>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f083 0301 	eor.w	r3, r3, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00f      	beq.n	8007dec <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007dcc:	4b7f      	ldr	r3, [pc, #508]	; (8007fcc <checkDemoModCalisma+0x24c>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f083 0301 	eor.w	r3, r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007dda:	2201      	movs	r2, #1
 8007ddc:	2104      	movs	r1, #4
 8007dde:	487c      	ldr	r0, [pc, #496]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007de0:	f002 f801 	bl	8009de6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007de4:	4b7b      	ldr	r3, [pc, #492]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	e00e      	b.n	8007e0a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007dec:	2102      	movs	r1, #2
 8007dee:	4874      	ldr	r0, [pc, #464]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007df0:	f001 ffe2 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d107      	bne.n	8007e0a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	4874      	ldr	r0, [pc, #464]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007e00:	f001 fff1 	bl	8009de6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007e04:	4b73      	ldr	r3, [pc, #460]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007e0a:	4b72      	ldr	r3, [pc, #456]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <checkDemoModCalisma+0xaa>
 8007e12:	4b6d      	ldr	r3, [pc, #436]	; (8007fc8 <checkDemoModCalisma+0x248>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d107      	bne.n	8007e2a <checkDemoModCalisma+0xaa>
 8007e1a:	4b6c      	ldr	r3, [pc, #432]	; (8007fcc <checkDemoModCalisma+0x24c>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <checkDemoModCalisma+0xaa>
 8007e22:	4b68      	ldr	r3, [pc, #416]	; (8007fc4 <checkDemoModCalisma+0x244>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e30:	4867      	ldr	r0, [pc, #412]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007e32:	f001 ffd8 	bl	8009de6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007e36:	2201      	movs	r2, #1
 8007e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e3c:	4864      	ldr	r0, [pc, #400]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007e3e:	f001 ffd2 	bl	8009de6 <HAL_GPIO_WritePin>
 8007e42:	e00b      	b.n	8007e5c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e44:	2200      	movs	r2, #0
 8007e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e4a:	4861      	ldr	r0, [pc, #388]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007e4c:	f001 ffcb 	bl	8009de6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e50:	2200      	movs	r2, #0
 8007e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e56:	485e      	ldr	r0, [pc, #376]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007e58:	f001 ffc5 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	4858      	ldr	r0, [pc, #352]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007e60:	f001 ffaa 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10d      	bne.n	8007e86 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e6e:	4854      	ldr	r0, [pc, #336]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007e70:	f001 ffa2 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007e7a:	4b56      	ldr	r3, [pc, #344]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f083 0301 	eor.w	r3, r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007e86:	2102      	movs	r1, #2
 8007e88:	484d      	ldr	r0, [pc, #308]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007e8a:	f001 ff95 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d125      	bne.n	8007ee0 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e98:	4849      	ldr	r0, [pc, #292]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007e9a:	f001 ff8d 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d11d      	bne.n	8007ee0 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007ea4:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f083 0301 	eor.w	r3, r3, #1
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007eb2:	4b44      	ldr	r3, [pc, #272]	; (8007fc4 <checkDemoModCalisma+0x244>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	f083 0301 	eor.w	r3, r3, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00f      	beq.n	8007ee0 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007ec0:	4b42      	ldr	r3, [pc, #264]	; (8007fcc <checkDemoModCalisma+0x24c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f083 0301 	eor.w	r3, r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007ece:	2201      	movs	r2, #1
 8007ed0:	2120      	movs	r1, #32
 8007ed2:	483b      	ldr	r0, [pc, #236]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007ed4:	f001 ff87 	bl	8009de6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007ed8:	4b3b      	ldr	r3, [pc, #236]	; (8007fc8 <checkDemoModCalisma+0x248>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2120      	movs	r1, #32
 8007ee4:	4836      	ldr	r0, [pc, #216]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007ee6:	f001 ff7e 	bl	8009de6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007eea:	4b37      	ldr	r3, [pc, #220]	; (8007fc8 <checkDemoModCalisma+0x248>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	4833      	ldr	r0, [pc, #204]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007ef4:	f001 ff60 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d125      	bne.n	8007f4a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f02:	482f      	ldr	r0, [pc, #188]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007f04:	f001 ff58 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d11d      	bne.n	8007f4a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007f0e:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	f083 0301 	eor.w	r3, r3, #1
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d016      	beq.n	8007f4a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007f1c:	4b2a      	ldr	r3, [pc, #168]	; (8007fc8 <checkDemoModCalisma+0x248>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f083 0301 	eor.w	r3, r3, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007f2a:	4b26      	ldr	r3, [pc, #152]	; (8007fc4 <checkDemoModCalisma+0x244>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f083 0301 	eor.w	r3, r3, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007f38:	2201      	movs	r2, #1
 8007f3a:	2110      	movs	r1, #16
 8007f3c:	4820      	ldr	r0, [pc, #128]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007f3e:	f001 ff52 	bl	8009de6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007f42:	4b22      	ldr	r3, [pc, #136]	; (8007fcc <checkDemoModCalisma+0x24c>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	e007      	b.n	8007f5a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2110      	movs	r1, #16
 8007f4e:	481c      	ldr	r0, [pc, #112]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007f50:	f001 ff49 	bl	8009de6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007f54:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <checkDemoModCalisma+0x24c>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007f5a:	2104      	movs	r1, #4
 8007f5c:	4818      	ldr	r0, [pc, #96]	; (8007fc0 <checkDemoModCalisma+0x240>)
 8007f5e:	f001 ff2b 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d139      	bne.n	8007fdc <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <checkDemoModCalisma+0x254>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	f083 0301 	eor.w	r3, r3, #1
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d032      	beq.n	8007fdc <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <checkDemoModCalisma+0x24c>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f083 0301 	eor.w	r3, r3, #1
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d02b      	beq.n	8007fdc <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007f84:	4b10      	ldr	r3, [pc, #64]	; (8007fc8 <checkDemoModCalisma+0x248>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f083 0301 	eor.w	r3, r3, #1
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d024      	beq.n	8007fdc <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007f92:	2201      	movs	r2, #1
 8007f94:	2102      	movs	r1, #2
 8007f96:	480e      	ldr	r0, [pc, #56]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007f98:	f001 ff25 	bl	8009de6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <checkDemoModCalisma+0x250>)
 8007fa2:	f001 ff20 	bl	8009de6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007fa6:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <checkDemoModCalisma+0x244>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <checkDemoModCalisma+0x258>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e027      	b.n	8008004 <checkDemoModCalisma+0x284>
 8007fb4:	20000d4e 	.word	0x20000d4e
 8007fb8:	20000d82 	.word	0x20000d82
 8007fbc:	20000d4d 	.word	0x20000d4d
 8007fc0:	40011000 	.word	0x40011000
 8007fc4:	20000d89 	.word	0x20000d89
 8007fc8:	20000d8a 	.word	0x20000d8a
 8007fcc:	20000d8b 	.word	0x20000d8b
 8007fd0:	40010c00 	.word	0x40010c00
 8007fd4:	20000d88 	.word	0x20000d88
 8007fd8:	20000d6e 	.word	0x20000d6e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007fdc:	2104      	movs	r1, #4
 8007fde:	48a0      	ldr	r0, [pc, #640]	; (8008260 <checkDemoModCalisma+0x4e0>)
 8007fe0:	f001 feea 	bl	8009db8 <HAL_GPIO_ReadPin>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d10c      	bne.n	8008004 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007fea:	2200      	movs	r2, #0
 8007fec:	2102      	movs	r1, #2
 8007fee:	489d      	ldr	r0, [pc, #628]	; (8008264 <checkDemoModCalisma+0x4e4>)
 8007ff0:	f001 fef9 	bl	8009de6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	489a      	ldr	r0, [pc, #616]	; (8008264 <checkDemoModCalisma+0x4e4>)
 8007ffa:	f001 fef4 	bl	8009de6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007ffe:	4b9a      	ldr	r3, [pc, #616]	; (8008268 <checkDemoModCalisma+0x4e8>)
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8008004:	2104      	movs	r1, #4
 8008006:	4896      	ldr	r0, [pc, #600]	; (8008260 <checkDemoModCalisma+0x4e0>)
 8008008:	f001 fed6 	bl	8009db8 <HAL_GPIO_ReadPin>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d10d      	bne.n	800802e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8008012:	2201      	movs	r2, #1
 8008014:	2180      	movs	r1, #128	; 0x80
 8008016:	4895      	ldr	r0, [pc, #596]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008018:	f001 fee5 	bl	8009de6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800801c:	2201      	movs	r2, #1
 800801e:	2120      	movs	r1, #32
 8008020:	4892      	ldr	r0, [pc, #584]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008022:	f001 fee0 	bl	8009de6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8008026:	4b92      	ldr	r3, [pc, #584]	; (8008270 <checkDemoModCalisma+0x4f0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a92      	ldr	r2, [pc, #584]	; (8008274 <checkDemoModCalisma+0x4f4>)
 800802c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800802e:	4b90      	ldr	r3, [pc, #576]	; (8008270 <checkDemoModCalisma+0x4f0>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b90      	ldr	r3, [pc, #576]	; (8008274 <checkDemoModCalisma+0x4f4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b04      	cmp	r3, #4
 800803a:	d909      	bls.n	8008050 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	488a      	ldr	r0, [pc, #552]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008042:	f001 fed0 	bl	8009de6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008046:	2200      	movs	r2, #0
 8008048:	2120      	movs	r1, #32
 800804a:	4888      	ldr	r0, [pc, #544]	; (800826c <checkDemoModCalisma+0x4ec>)
 800804c:	f001 fecb 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8008050:	2102      	movs	r1, #2
 8008052:	4883      	ldr	r0, [pc, #524]	; (8008260 <checkDemoModCalisma+0x4e0>)
 8008054:	f001 feb0 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008058:	4603      	mov	r3, r0
 800805a:	2b01      	cmp	r3, #1
 800805c:	d108      	bne.n	8008070 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800805e:	2201      	movs	r2, #1
 8008060:	2140      	movs	r1, #64	; 0x40
 8008062:	4882      	ldr	r0, [pc, #520]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008064:	f001 febf 	bl	8009de6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8008068:	4b81      	ldr	r3, [pc, #516]	; (8008270 <checkDemoModCalisma+0x4f0>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a81      	ldr	r2, [pc, #516]	; (8008274 <checkDemoModCalisma+0x4f4>)
 800806e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008070:	4b7f      	ldr	r3, [pc, #508]	; (8008270 <checkDemoModCalisma+0x4f0>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	4b7f      	ldr	r3, [pc, #508]	; (8008274 <checkDemoModCalisma+0x4f4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b04      	cmp	r3, #4
 800807c:	d904      	bls.n	8008088 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800807e:	2200      	movs	r2, #0
 8008080:	2140      	movs	r1, #64	; 0x40
 8008082:	487a      	ldr	r0, [pc, #488]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008084:	f001 feaf 	bl	8009de6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8008088:	4b7b      	ldr	r3, [pc, #492]	; (8008278 <checkDemoModCalisma+0x4f8>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d058      	beq.n	8008142 <checkDemoModCalisma+0x3c2>
 8008090:	4b7a      	ldr	r3, [pc, #488]	; (800827c <checkDemoModCalisma+0x4fc>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d054      	beq.n	8008142 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8008098:	4b79      	ldr	r3, [pc, #484]	; (8008280 <checkDemoModCalisma+0x500>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	4b77      	ldr	r3, [pc, #476]	; (8008280 <checkDemoModCalisma+0x500>)
 80080a2:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80080a4:	4b76      	ldr	r3, [pc, #472]	; (8008280 <checkDemoModCalisma+0x500>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b09      	cmp	r3, #9
 80080aa:	d908      	bls.n	80080be <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80080ac:	4b74      	ldr	r3, [pc, #464]	; (8008280 <checkDemoModCalisma+0x500>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80080b2:	4b74      	ldr	r3, [pc, #464]	; (8008284 <checkDemoModCalisma+0x504>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	3301      	adds	r3, #1
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	4b72      	ldr	r3, [pc, #456]	; (8008284 <checkDemoModCalisma+0x504>)
 80080bc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80080be:	4b71      	ldr	r3, [pc, #452]	; (8008284 <checkDemoModCalisma+0x504>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d908      	bls.n	80080d8 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80080c6:	4b6f      	ldr	r3, [pc, #444]	; (8008284 <checkDemoModCalisma+0x504>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80080cc:	4b6e      	ldr	r3, [pc, #440]	; (8008288 <checkDemoModCalisma+0x508>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	4b6c      	ldr	r3, [pc, #432]	; (8008288 <checkDemoModCalisma+0x508>)
 80080d6:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80080d8:	4b6b      	ldr	r3, [pc, #428]	; (8008288 <checkDemoModCalisma+0x508>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b09      	cmp	r3, #9
 80080de:	d908      	bls.n	80080f2 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80080e0:	4b69      	ldr	r3, [pc, #420]	; (8008288 <checkDemoModCalisma+0x508>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80080e6:	4b69      	ldr	r3, [pc, #420]	; (800828c <checkDemoModCalisma+0x50c>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	4b67      	ldr	r3, [pc, #412]	; (800828c <checkDemoModCalisma+0x50c>)
 80080f0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80080f2:	4b66      	ldr	r3, [pc, #408]	; (800828c <checkDemoModCalisma+0x50c>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b09      	cmp	r3, #9
 80080f8:	d908      	bls.n	800810c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80080fa:	4b64      	ldr	r3, [pc, #400]	; (800828c <checkDemoModCalisma+0x50c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8008100:	4b63      	ldr	r3, [pc, #396]	; (8008290 <checkDemoModCalisma+0x510>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	3301      	adds	r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	4b61      	ldr	r3, [pc, #388]	; (8008290 <checkDemoModCalisma+0x510>)
 800810a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800810c:	4b60      	ldr	r3, [pc, #384]	; (8008290 <checkDemoModCalisma+0x510>)
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	4b60      	ldr	r3, [pc, #384]	; (8008294 <checkDemoModCalisma+0x514>)
 8008112:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8008116:	4b5d      	ldr	r3, [pc, #372]	; (800828c <checkDemoModCalisma+0x50c>)
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	4b5e      	ldr	r3, [pc, #376]	; (8008294 <checkDemoModCalisma+0x514>)
 800811c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800811e:	4b5a      	ldr	r3, [pc, #360]	; (8008288 <checkDemoModCalisma+0x508>)
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	4b5c      	ldr	r3, [pc, #368]	; (8008294 <checkDemoModCalisma+0x514>)
 8008124:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8008126:	4b57      	ldr	r3, [pc, #348]	; (8008284 <checkDemoModCalisma+0x504>)
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	4b5a      	ldr	r3, [pc, #360]	; (8008294 <checkDemoModCalisma+0x514>)
 800812c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800812e:	4b54      	ldr	r3, [pc, #336]	; (8008280 <checkDemoModCalisma+0x500>)
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	4b58      	ldr	r3, [pc, #352]	; (8008294 <checkDemoModCalisma+0x514>)
 8008134:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8008136:	4b58      	ldr	r3, [pc, #352]	; (8008298 <checkDemoModCalisma+0x518>)
 8008138:	2201      	movs	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800813c:	4b4f      	ldr	r3, [pc, #316]	; (800827c <checkDemoModCalisma+0x4fc>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008142:	4b56      	ldr	r3, [pc, #344]	; (800829c <checkDemoModCalisma+0x51c>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f040 8087 	bne.w	800825a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800814c:	4a54      	ldr	r2, [pc, #336]	; (80082a0 <checkDemoModCalisma+0x520>)
 800814e:	2101      	movs	r1, #1
 8008150:	2002      	movs	r0, #2
 8008152:	f7f8 fa89 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8008156:	4a53      	ldr	r2, [pc, #332]	; (80082a4 <checkDemoModCalisma+0x524>)
 8008158:	2101      	movs	r1, #1
 800815a:	2001      	movs	r0, #1
 800815c:	f7f8 fa84 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8008160:	4b4b      	ldr	r3, [pc, #300]	; (8008290 <checkDemoModCalisma+0x510>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	220a      	movs	r2, #10
 8008166:	4950      	ldr	r1, [pc, #320]	; (80082a8 <checkDemoModCalisma+0x528>)
 8008168:	4618      	mov	r0, r3
 800816a:	f004 fe51 	bl	800ce10 <itoa>
			lcd_print(2,12,snum);
 800816e:	4a4e      	ldr	r2, [pc, #312]	; (80082a8 <checkDemoModCalisma+0x528>)
 8008170:	210c      	movs	r1, #12
 8008172:	2002      	movs	r0, #2
 8008174:	f7f8 fa78 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8008178:	4b44      	ldr	r3, [pc, #272]	; (800828c <checkDemoModCalisma+0x50c>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	220a      	movs	r2, #10
 800817e:	494a      	ldr	r1, [pc, #296]	; (80082a8 <checkDemoModCalisma+0x528>)
 8008180:	4618      	mov	r0, r3
 8008182:	f004 fe45 	bl	800ce10 <itoa>
			lcd_print(2,13,snum);
 8008186:	4a48      	ldr	r2, [pc, #288]	; (80082a8 <checkDemoModCalisma+0x528>)
 8008188:	210d      	movs	r1, #13
 800818a:	2002      	movs	r0, #2
 800818c:	f7f8 fa6c 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8008190:	4b3d      	ldr	r3, [pc, #244]	; (8008288 <checkDemoModCalisma+0x508>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	220a      	movs	r2, #10
 8008196:	4944      	ldr	r1, [pc, #272]	; (80082a8 <checkDemoModCalisma+0x528>)
 8008198:	4618      	mov	r0, r3
 800819a:	f004 fe39 	bl	800ce10 <itoa>
			lcd_print(2,14,snum);
 800819e:	4a42      	ldr	r2, [pc, #264]	; (80082a8 <checkDemoModCalisma+0x528>)
 80081a0:	210e      	movs	r1, #14
 80081a2:	2002      	movs	r0, #2
 80081a4:	f7f8 fa60 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80081a8:	4b36      	ldr	r3, [pc, #216]	; (8008284 <checkDemoModCalisma+0x504>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	220a      	movs	r2, #10
 80081ae:	493e      	ldr	r1, [pc, #248]	; (80082a8 <checkDemoModCalisma+0x528>)
 80081b0:	4618      	mov	r0, r3
 80081b2:	f004 fe2d 	bl	800ce10 <itoa>
			lcd_print(2,15,snum);
 80081b6:	4a3c      	ldr	r2, [pc, #240]	; (80082a8 <checkDemoModCalisma+0x528>)
 80081b8:	210f      	movs	r1, #15
 80081ba:	2002      	movs	r0, #2
 80081bc:	f7f8 fa54 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80081c0:	4b2f      	ldr	r3, [pc, #188]	; (8008280 <checkDemoModCalisma+0x500>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	220a      	movs	r2, #10
 80081c6:	4938      	ldr	r1, [pc, #224]	; (80082a8 <checkDemoModCalisma+0x528>)
 80081c8:	4618      	mov	r0, r3
 80081ca:	f004 fe21 	bl	800ce10 <itoa>
			lcd_print(2,16,snum);
 80081ce:	4a36      	ldr	r2, [pc, #216]	; (80082a8 <checkDemoModCalisma+0x528>)
 80081d0:	2110      	movs	r1, #16
 80081d2:	2002      	movs	r0, #2
 80081d4:	f7f8 fa48 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 80081d8:	4b34      	ldr	r3, [pc, #208]	; (80082ac <checkDemoModCalisma+0x52c>)
 80081da:	2201      	movs	r2, #1
 80081dc:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80081de:	e03c      	b.n	800825a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80081e0:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <checkDemoModCalisma+0x530>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d003      	beq.n	80081f0 <checkDemoModCalisma+0x470>
 80081e8:	4b2c      	ldr	r3, [pc, #176]	; (800829c <checkDemoModCalisma+0x51c>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d134      	bne.n	800825a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80081f0:	2200      	movs	r2, #0
 80081f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80081f6:	481b      	ldr	r0, [pc, #108]	; (8008264 <checkDemoModCalisma+0x4e4>)
 80081f8:	f001 fdf5 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80081fc:	2200      	movs	r2, #0
 80081fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008202:	4818      	ldr	r0, [pc, #96]	; (8008264 <checkDemoModCalisma+0x4e4>)
 8008204:	f001 fdef 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008208:	2200      	movs	r2, #0
 800820a:	2104      	movs	r1, #4
 800820c:	4815      	ldr	r0, [pc, #84]	; (8008264 <checkDemoModCalisma+0x4e4>)
 800820e:	f001 fdea 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008212:	2200      	movs	r2, #0
 8008214:	2102      	movs	r1, #2
 8008216:	4813      	ldr	r0, [pc, #76]	; (8008264 <checkDemoModCalisma+0x4e4>)
 8008218:	f001 fde5 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800821c:	2200      	movs	r2, #0
 800821e:	2101      	movs	r1, #1
 8008220:	4810      	ldr	r0, [pc, #64]	; (8008264 <checkDemoModCalisma+0x4e4>)
 8008222:	f001 fde0 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008226:	2200      	movs	r2, #0
 8008228:	2120      	movs	r1, #32
 800822a:	480d      	ldr	r0, [pc, #52]	; (8008260 <checkDemoModCalisma+0x4e0>)
 800822c:	f001 fddb 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008230:	2200      	movs	r2, #0
 8008232:	2110      	movs	r1, #16
 8008234:	480a      	ldr	r0, [pc, #40]	; (8008260 <checkDemoModCalisma+0x4e0>)
 8008236:	f001 fdd6 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800823a:	2200      	movs	r2, #0
 800823c:	2180      	movs	r1, #128	; 0x80
 800823e:	480b      	ldr	r0, [pc, #44]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008240:	f001 fdd1 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008244:	2200      	movs	r2, #0
 8008246:	2140      	movs	r1, #64	; 0x40
 8008248:	4808      	ldr	r0, [pc, #32]	; (800826c <checkDemoModCalisma+0x4ec>)
 800824a:	f001 fdcc 	bl	8009de6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800824e:	2200      	movs	r2, #0
 8008250:	2120      	movs	r1, #32
 8008252:	4806      	ldr	r0, [pc, #24]	; (800826c <checkDemoModCalisma+0x4ec>)
 8008254:	f001 fdc7 	bl	8009de6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8008258:	e7ff      	b.n	800825a <checkDemoModCalisma+0x4da>
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40011000 	.word	0x40011000
 8008264:	40010c00 	.word	0x40010c00
 8008268:	20000d89 	.word	0x20000d89
 800826c:	40010800 	.word	0x40010800
 8008270:	20000cb0 	.word	0x20000cb0
 8008274:	20000cc0 	.word	0x20000cc0
 8008278:	20000d88 	.word	0x20000d88
 800827c:	20000d6e 	.word	0x20000d6e
 8008280:	20000d2d 	.word	0x20000d2d
 8008284:	20000d2e 	.word	0x20000d2e
 8008288:	200009b4 	.word	0x200009b4
 800828c:	200009b5 	.word	0x200009b5
 8008290:	20000d2f 	.word	0x20000d2f
 8008294:	20000c38 	.word	0x20000c38
 8008298:	20000d5c 	.word	0x20000d5c
 800829c:	20000d4d 	.word	0x20000d4d
 80082a0:	0800e640 	.word	0x0800e640
 80082a4:	0800e64c 	.word	0x0800e64c
 80082a8:	20000ca8 	.word	0x20000ca8
 80082ac:	20000d64 	.word	0x20000d64
 80082b0:	20000d4e 	.word	0x20000d4e

080082b4 <mergeData>:

char* mergeData() {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b09e      	sub	sp, #120	; 0x78
 80082b8:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80082ba:	2300      	movs	r3, #0
 80082bc:	643b      	str	r3, [r7, #64]	; 0x40
 80082be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082c2:	2229      	movs	r2, #41	; 0x29
 80082c4:	2100      	movs	r1, #0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f004 feba 	bl	800d040 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80082cc:	4b6a      	ldr	r3, [pc, #424]	; (8008478 <mergeData+0x1c4>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	713b      	strb	r3, [r7, #4]
 80082d2:	4b6a      	ldr	r3, [pc, #424]	; (800847c <mergeData+0x1c8>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	717b      	strb	r3, [r7, #5]
 80082d8:	4b69      	ldr	r3, [pc, #420]	; (8008480 <mergeData+0x1cc>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	71bb      	strb	r3, [r7, #6]
 80082de:	4b69      	ldr	r3, [pc, #420]	; (8008484 <mergeData+0x1d0>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
 80082e4:	4b68      	ldr	r3, [pc, #416]	; (8008488 <mergeData+0x1d4>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	723b      	strb	r3, [r7, #8]
 80082ea:	4b68      	ldr	r3, [pc, #416]	; (800848c <mergeData+0x1d8>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	727b      	strb	r3, [r7, #9]
 80082f0:	4b67      	ldr	r3, [pc, #412]	; (8008490 <mergeData+0x1dc>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	72bb      	strb	r3, [r7, #10]
 80082f6:	4b67      	ldr	r3, [pc, #412]	; (8008494 <mergeData+0x1e0>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	72fb      	strb	r3, [r7, #11]
 80082fc:	4b66      	ldr	r3, [pc, #408]	; (8008498 <mergeData+0x1e4>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	733b      	strb	r3, [r7, #12]
 8008302:	4b66      	ldr	r3, [pc, #408]	; (800849c <mergeData+0x1e8>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	737b      	strb	r3, [r7, #13]
 8008308:	4b65      	ldr	r3, [pc, #404]	; (80084a0 <mergeData+0x1ec>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	73bb      	strb	r3, [r7, #14]
 800830e:	4b65      	ldr	r3, [pc, #404]	; (80084a4 <mergeData+0x1f0>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	4b64      	ldr	r3, [pc, #400]	; (80084a8 <mergeData+0x1f4>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	743b      	strb	r3, [r7, #16]
 800831a:	4b64      	ldr	r3, [pc, #400]	; (80084ac <mergeData+0x1f8>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	747b      	strb	r3, [r7, #17]
 8008320:	4b63      	ldr	r3, [pc, #396]	; (80084b0 <mergeData+0x1fc>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	74bb      	strb	r3, [r7, #18]
 8008326:	4b63      	ldr	r3, [pc, #396]	; (80084b4 <mergeData+0x200>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	74fb      	strb	r3, [r7, #19]
 800832c:	4b62      	ldr	r3, [pc, #392]	; (80084b8 <mergeData+0x204>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	753b      	strb	r3, [r7, #20]
 8008332:	4b62      	ldr	r3, [pc, #392]	; (80084bc <mergeData+0x208>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	757b      	strb	r3, [r7, #21]
 8008338:	4b61      	ldr	r3, [pc, #388]	; (80084c0 <mergeData+0x20c>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	75bb      	strb	r3, [r7, #22]
 800833e:	4b61      	ldr	r3, [pc, #388]	; (80084c4 <mergeData+0x210>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	75fb      	strb	r3, [r7, #23]
 8008344:	4b60      	ldr	r3, [pc, #384]	; (80084c8 <mergeData+0x214>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	763b      	strb	r3, [r7, #24]
 800834a:	4b60      	ldr	r3, [pc, #384]	; (80084cc <mergeData+0x218>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	767b      	strb	r3, [r7, #25]
 8008350:	4b5f      	ldr	r3, [pc, #380]	; (80084d0 <mergeData+0x21c>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	76bb      	strb	r3, [r7, #26]
 8008356:	4b5f      	ldr	r3, [pc, #380]	; (80084d4 <mergeData+0x220>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	76fb      	strb	r3, [r7, #27]
 800835c:	4b5e      	ldr	r3, [pc, #376]	; (80084d8 <mergeData+0x224>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	773b      	strb	r3, [r7, #28]
 8008362:	4b5e      	ldr	r3, [pc, #376]	; (80084dc <mergeData+0x228>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	777b      	strb	r3, [r7, #29]
 8008368:	4b5d      	ldr	r3, [pc, #372]	; (80084e0 <mergeData+0x22c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	77bb      	strb	r3, [r7, #30]
 800836e:	4b5d      	ldr	r3, [pc, #372]	; (80084e4 <mergeData+0x230>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	4b5c      	ldr	r3, [pc, #368]	; (80084e8 <mergeData+0x234>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	f887 3020 	strb.w	r3, [r7, #32]
 800837c:	4b5b      	ldr	r3, [pc, #364]	; (80084ec <mergeData+0x238>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008384:	4b5a      	ldr	r3, [pc, #360]	; (80084f0 <mergeData+0x23c>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800838c:	4b59      	ldr	r3, [pc, #356]	; (80084f4 <mergeData+0x240>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008394:	4b58      	ldr	r3, [pc, #352]	; (80084f8 <mergeData+0x244>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 800839c:	4b57      	ldr	r3, [pc, #348]	; (80084fc <mergeData+0x248>)
 800839e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80083a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80083a6:	4b55      	ldr	r3, [pc, #340]	; (80084fc <mergeData+0x248>)
 80083a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80083ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80083b0:	4b52      	ldr	r3, [pc, #328]	; (80084fc <mergeData+0x248>)
 80083b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80083b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80083ba:	4b50      	ldr	r3, [pc, #320]	; (80084fc <mergeData+0x248>)
 80083bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80083c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80083c4:	4b4d      	ldr	r3, [pc, #308]	; (80084fc <mergeData+0x248>)
 80083c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80083ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80083ce:	4b4b      	ldr	r3, [pc, #300]	; (80084fc <mergeData+0x248>)
 80083d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80083d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80083d8:	4b48      	ldr	r3, [pc, #288]	; (80084fc <mergeData+0x248>)
 80083da:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80083e2:	4b46      	ldr	r3, [pc, #280]	; (80084fc <mergeData+0x248>)
 80083e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80083e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80083ec:	4b43      	ldr	r3, [pc, #268]	; (80084fc <mergeData+0x248>)
 80083ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80083f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80083f6:	4b41      	ldr	r3, [pc, #260]	; (80084fc <mergeData+0x248>)
 80083f8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80083fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008400:	4b3e      	ldr	r3, [pc, #248]	; (80084fc <mergeData+0x248>)
 8008402:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8008406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800840a:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <mergeData+0x24c>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008412:	2300      	movs	r3, #0
 8008414:	677b      	str	r3, [r7, #116]	; 0x74
 8008416:	e015      	b.n	8008444 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008418:	1d3a      	adds	r2, r7, #4
 800841a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841c:	4413      	add	r3, r2
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008426:	4937      	ldr	r1, [pc, #220]	; (8008504 <mergeData+0x250>)
 8008428:	4618      	mov	r0, r3
 800842a:	f004 fde9 	bl	800d000 <siprintf>
	    strcat(combinedString, temp);
 800842e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f004 fe09 	bl	800d050 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800843e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008440:	3301      	adds	r3, #1
 8008442:	677b      	str	r3, [r7, #116]	; 0x74
 8008444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008446:	2b2c      	cmp	r3, #44	; 0x2c
 8008448:	d9e6      	bls.n	8008418 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800844a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800844e:	4618      	mov	r0, r3
 8008450:	f7f7 fee8 	bl	8000224 <strlen>
 8008454:	4603      	mov	r3, r0
 8008456:	3301      	adds	r3, #1
 8008458:	4618      	mov	r0, r3
 800845a:	f004 fcdb 	bl	800ce14 <malloc>
 800845e:	4603      	mov	r3, r0
 8008460:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008466:	4619      	mov	r1, r3
 8008468:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800846a:	f004 fe3d 	bl	800d0e8 <strcpy>
	return result;
 800846e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008470:	4618      	mov	r0, r3
 8008472:	3778      	adds	r7, #120	; 0x78
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000d3f 	.word	0x20000d3f
 800847c:	20000d31 	.word	0x20000d31
 8008480:	20000d34 	.word	0x20000d34
 8008484:	20000d35 	.word	0x20000d35
 8008488:	20000d36 	.word	0x20000d36
 800848c:	20000d3d 	.word	0x20000d3d
 8008490:	20000d37 	.word	0x20000d37
 8008494:	20000d38 	.word	0x20000d38
 8008498:	20000d3c 	.word	0x20000d3c
 800849c:	20000d39 	.word	0x20000d39
 80084a0:	20000d49 	.word	0x20000d49
 80084a4:	20000d3a 	.word	0x20000d3a
 80084a8:	20000d4a 	.word	0x20000d4a
 80084ac:	20000d3b 	.word	0x20000d3b
 80084b0:	20000d4b 	.word	0x20000d4b
 80084b4:	20000d3e 	.word	0x20000d3e
 80084b8:	20000d40 	.word	0x20000d40
 80084bc:	20000d41 	.word	0x20000d41
 80084c0:	20000d42 	.word	0x20000d42
 80084c4:	20000d43 	.word	0x20000d43
 80084c8:	20000d44 	.word	0x20000d44
 80084cc:	20000d45 	.word	0x20000d45
 80084d0:	20000d46 	.word	0x20000d46
 80084d4:	20000d47 	.word	0x20000d47
 80084d8:	20000d48 	.word	0x20000d48
 80084dc:	20000d4c 	.word	0x20000d4c
 80084e0:	20000d4e 	.word	0x20000d4e
 80084e4:	20000d2d 	.word	0x20000d2d
 80084e8:	20000d2e 	.word	0x20000d2e
 80084ec:	200009b4 	.word	0x200009b4
 80084f0:	200009b5 	.word	0x200009b5
 80084f4:	20000d2f 	.word	0x20000d2f
 80084f8:	20000d51 	.word	0x20000d51
 80084fc:	20000c38 	.word	0x20000c38
 8008500:	20000940 	.word	0x20000940
 8008504:	0800e660 	.word	0x0800e660

08008508 <mainLoop>:

void mainLoop() {
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800850e:	f7fd fffb 	bl	8006508 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008512:	2101      	movs	r1, #1
 8008514:	48ad      	ldr	r0, [pc, #692]	; (80087cc <mainLoop+0x2c4>)
 8008516:	f001 fc4f 	bl	8009db8 <HAL_GPIO_ReadPin>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d136      	bne.n	800858e <mainLoop+0x86>
 8008520:	2108      	movs	r1, #8
 8008522:	48ab      	ldr	r0, [pc, #684]	; (80087d0 <mainLoop+0x2c8>)
 8008524:	f001 fc48 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d12f      	bne.n	800858e <mainLoop+0x86>
 800852e:	2102      	movs	r1, #2
 8008530:	48a6      	ldr	r0, [pc, #664]	; (80087cc <mainLoop+0x2c4>)
 8008532:	f001 fc41 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d128      	bne.n	800858e <mainLoop+0x86>
 800853c:	2104      	movs	r1, #4
 800853e:	48a3      	ldr	r0, [pc, #652]	; (80087cc <mainLoop+0x2c4>)
 8008540:	f001 fc3a 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d121      	bne.n	800858e <mainLoop+0x86>
 800854a:	2108      	movs	r1, #8
 800854c:	489f      	ldr	r0, [pc, #636]	; (80087cc <mainLoop+0x2c4>)
 800854e:	f001 fc33 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11a      	bne.n	800858e <mainLoop+0x86>
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	489d      	ldr	r0, [pc, #628]	; (80087d0 <mainLoop+0x2c8>)
 800855c:	f001 fc2c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008560:	4603      	mov	r3, r0
 8008562:	2b01      	cmp	r3, #1
 8008564:	d113      	bne.n	800858e <mainLoop+0x86>
 8008566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800856a:	4899      	ldr	r0, [pc, #612]	; (80087d0 <mainLoop+0x2c8>)
 800856c:	f001 fc24 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008570:	4603      	mov	r3, r0
 8008572:	2b01      	cmp	r3, #1
 8008574:	d10b      	bne.n	800858e <mainLoop+0x86>
 8008576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800857a:	4895      	ldr	r0, [pc, #596]	; (80087d0 <mainLoop+0x2c8>)
 800857c:	f001 fc1c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008580:	4603      	mov	r3, r0
 8008582:	2b01      	cmp	r3, #1
 8008584:	d103      	bne.n	800858e <mainLoop+0x86>
			butonKontrol=0;
 8008586:	4b93      	ldr	r3, [pc, #588]	; (80087d4 <mainLoop+0x2cc>)
 8008588:	2200      	movs	r2, #0
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e003      	b.n	8008596 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800858e:	4b92      	ldr	r3, [pc, #584]	; (80087d8 <mainLoop+0x2d0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a92      	ldr	r2, [pc, #584]	; (80087dc <mainLoop+0x2d4>)
 8008594:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008596:	4b92      	ldr	r3, [pc, #584]	; (80087e0 <mainLoop+0x2d8>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d03a      	beq.n	8008614 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800859e:	bf00      	nop
 80085a0:	4890      	ldr	r0, [pc, #576]	; (80087e4 <mainLoop+0x2dc>)
 80085a2:	f002 fa32 	bl	800aa0a <HAL_I2C_GetError>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d0f9      	beq.n	80085a0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80085ac:	bf00      	nop
 80085ae:	488d      	ldr	r0, [pc, #564]	; (80087e4 <mainLoop+0x2dc>)
 80085b0:	f002 fa1e 	bl	800a9f0 <HAL_I2C_GetState>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d1f9      	bne.n	80085ae <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80085ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085be:	9302      	str	r3, [sp, #8]
 80085c0:	236e      	movs	r3, #110	; 0x6e
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	4b88      	ldr	r3, [pc, #544]	; (80087e8 <mainLoop+0x2e0>)
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	236e      	movs	r3, #110	; 0x6e
 80085ca:	2200      	movs	r2, #0
 80085cc:	21a0      	movs	r1, #160	; 0xa0
 80085ce:	4885      	ldr	r0, [pc, #532]	; (80087e4 <mainLoop+0x2dc>)
 80085d0:	f001 feac 	bl	800a32c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80085d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085d8:	f000 fe1e 	bl	8009218 <HAL_Delay>

		  hafizaYaz=0;
 80085dc:	4b80      	ldr	r3, [pc, #512]	; (80087e0 <mainLoop+0x2d8>)
 80085de:	2200      	movs	r2, #0
 80085e0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80085e2:	4b82      	ldr	r3, [pc, #520]	; (80087ec <mainLoop+0x2e4>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80085ea:	4a81      	ldr	r2, [pc, #516]	; (80087f0 <mainLoop+0x2e8>)
 80085ec:	2101      	movs	r1, #1
 80085ee:	2002      	movs	r0, #2
 80085f0:	f7f8 f83a 	bl	8000668 <lcd_print>
 80085f4:	e008      	b.n	8008608 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80085f6:	4b7d      	ldr	r3, [pc, #500]	; (80087ec <mainLoop+0x2e4>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d104      	bne.n	8008608 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80085fe:	4a7d      	ldr	r2, [pc, #500]	; (80087f4 <mainLoop+0x2ec>)
 8008600:	2101      	movs	r1, #1
 8008602:	2002      	movs	r0, #2
 8008604:	f7f8 f830 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800860c:	f000 fe04 	bl	8009218 <HAL_Delay>
		  lcd_clear();
 8008610:	f7f8 f856 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008614:	4b78      	ldr	r3, [pc, #480]	; (80087f8 <mainLoop+0x2f0>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f083 0301 	eor.w	r3, r3, #1
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d06e      	beq.n	8008700 <mainLoop+0x1f8>
 8008622:	4870      	ldr	r0, [pc, #448]	; (80087e4 <mainLoop+0x2dc>)
 8008624:	f002 f9e4 	bl	800a9f0 <HAL_I2C_GetState>
 8008628:	4603      	mov	r3, r0
 800862a:	2b20      	cmp	r3, #32
 800862c:	d168      	bne.n	8008700 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 800862e:	4b73      	ldr	r3, [pc, #460]	; (80087fc <mainLoop+0x2f4>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f083 0301 	eor.w	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d044      	beq.n	80086c6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 800863c:	4a70      	ldr	r2, [pc, #448]	; (8008800 <mainLoop+0x2f8>)
 800863e:	2101      	movs	r1, #1
 8008640:	2001      	movs	r0, #1
 8008642:	f7f8 f811 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 8008646:	4b69      	ldr	r3, [pc, #420]	; (80087ec <mainLoop+0x2e4>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800864e:	4a6d      	ldr	r2, [pc, #436]	; (8008804 <mainLoop+0x2fc>)
 8008650:	2101      	movs	r1, #1
 8008652:	2002      	movs	r0, #2
 8008654:	f7f8 f808 	bl	8000668 <lcd_print>
 8008658:	e008      	b.n	800866c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800865a:	4b64      	ldr	r3, [pc, #400]	; (80087ec <mainLoop+0x2e4>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d104      	bne.n	800866c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8008662:	4a69      	ldr	r2, [pc, #420]	; (8008808 <mainLoop+0x300>)
 8008664:	2101      	movs	r1, #1
 8008666:	2002      	movs	r0, #2
 8008668:	f7f7 fffe 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 800866c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008670:	f000 fdd2 	bl	8009218 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008674:	bf00      	nop
 8008676:	485b      	ldr	r0, [pc, #364]	; (80087e4 <mainLoop+0x2dc>)
 8008678:	f002 f9c7 	bl	800aa0a <HAL_I2C_GetError>
 800867c:	4603      	mov	r3, r0
 800867e:	2b04      	cmp	r3, #4
 8008680:	d0f9      	beq.n	8008676 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008682:	e003      	b.n	800868c <mainLoop+0x184>
				  HAL_Delay(1000);
 8008684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008688:	f000 fdc6 	bl	8009218 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800868c:	4855      	ldr	r0, [pc, #340]	; (80087e4 <mainLoop+0x2dc>)
 800868e:	f002 f9af 	bl	800a9f0 <HAL_I2C_GetState>
 8008692:	4603      	mov	r3, r0
 8008694:	2b20      	cmp	r3, #32
 8008696:	d1f5      	bne.n	8008684 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8008698:	4b54      	ldr	r3, [pc, #336]	; (80087ec <mainLoop+0x2e4>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80086a0:	4a5a      	ldr	r2, [pc, #360]	; (800880c <mainLoop+0x304>)
 80086a2:	2101      	movs	r1, #1
 80086a4:	2002      	movs	r0, #2
 80086a6:	f7f7 ffdf 	bl	8000668 <lcd_print>
 80086aa:	e008      	b.n	80086be <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80086ac:	4b4f      	ldr	r3, [pc, #316]	; (80087ec <mainLoop+0x2e4>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d104      	bne.n	80086be <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80086b4:	4a56      	ldr	r2, [pc, #344]	; (8008810 <mainLoop+0x308>)
 80086b6:	2101      	movs	r1, #1
 80086b8:	2002      	movs	r0, #2
 80086ba:	f7f7 ffd5 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 80086be:	4b4f      	ldr	r3, [pc, #316]	; (80087fc <mainLoop+0x2f4>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	e014      	b.n	80086f0 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80086c6:	4b49      	ldr	r3, [pc, #292]	; (80087ec <mainLoop+0x2e4>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80086ce:	4a51      	ldr	r2, [pc, #324]	; (8008814 <mainLoop+0x30c>)
 80086d0:	2101      	movs	r1, #1
 80086d2:	2002      	movs	r0, #2
 80086d4:	f7f7 ffc8 	bl	8000668 <lcd_print>
 80086d8:	e008      	b.n	80086ec <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80086da:	4b44      	ldr	r3, [pc, #272]	; (80087ec <mainLoop+0x2e4>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d104      	bne.n	80086ec <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80086e2:	4a4d      	ldr	r2, [pc, #308]	; (8008818 <mainLoop+0x310>)
 80086e4:	2101      	movs	r1, #1
 80086e6:	2002      	movs	r0, #2
 80086e8:	f7f7 ffbe 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 80086ec:	f7f7 ffe8 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 80086f0:	f7f7 ffe6 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 80086f4:	2001      	movs	r0, #1
 80086f6:	f7fd fa7d 	bl	8005bf4 <eepromKontrol>
		  hafizaOku=1;
 80086fa:	4b3f      	ldr	r3, [pc, #252]	; (80087f8 <mainLoop+0x2f0>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008700:	4b46      	ldr	r3, [pc, #280]	; (800881c <mainLoop+0x314>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11c      	bne.n	8008742 <mainLoop+0x23a>
 8008708:	4b45      	ldr	r3, [pc, #276]	; (8008820 <mainLoop+0x318>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f083 0301 	eor.w	r3, r3, #1
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d015      	beq.n	8008742 <mainLoop+0x23a>
 8008716:	4b43      	ldr	r3, [pc, #268]	; (8008824 <mainLoop+0x31c>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d111      	bne.n	8008742 <mainLoop+0x23a>
			lcd_clear();
 800871e:	f7f7 ffcf 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 8008722:	200a      	movs	r0, #10
 8008724:	f000 fd78 	bl	8009218 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008728:	4a3f      	ldr	r2, [pc, #252]	; (8008828 <mainLoop+0x320>)
 800872a:	2101      	movs	r1, #1
 800872c:	2001      	movs	r0, #1
 800872e:	f7f7 ff9b 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008732:	4a3e      	ldr	r2, [pc, #248]	; (800882c <mainLoop+0x324>)
 8008734:	2101      	movs	r1, #1
 8008736:	2002      	movs	r0, #2
 8008738:	f7f7 ff96 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 800873c:	4b38      	ldr	r3, [pc, #224]	; (8008820 <mainLoop+0x318>)
 800873e:	2201      	movs	r2, #1
 8008740:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008742:	4b36      	ldr	r3, [pc, #216]	; (800881c <mainLoop+0x314>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d112      	bne.n	8008770 <mainLoop+0x268>
 800874a:	2102      	movs	r1, #2
 800874c:	481f      	ldr	r0, [pc, #124]	; (80087cc <mainLoop+0x2c4>)
 800874e:	f001 fb33 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008752:	4603      	mov	r3, r0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d10b      	bne.n	8008770 <mainLoop+0x268>
 8008758:	2104      	movs	r1, #4
 800875a:	481c      	ldr	r0, [pc, #112]	; (80087cc <mainLoop+0x2c4>)
 800875c:	f001 fb2c 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008760:	4603      	mov	r3, r0
 8008762:	2b01      	cmp	r3, #1
 8008764:	d104      	bne.n	8008770 <mainLoop+0x268>
			menuGiris=1;
 8008766:	4b2d      	ldr	r3, [pc, #180]	; (800881c <mainLoop+0x314>)
 8008768:	2201      	movs	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800876c:	f7f7 ffa8 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 8008770:	4b2a      	ldr	r3, [pc, #168]	; (800881c <mainLoop+0x314>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d102      	bne.n	800877e <mainLoop+0x276>
			menu(&hi2c1);
 8008778:	481a      	ldr	r0, [pc, #104]	; (80087e4 <mainLoop+0x2dc>)
 800877a:	f7f8 ffc3 	bl	8001704 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800877e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008782:	4813      	ldr	r0, [pc, #76]	; (80087d0 <mainLoop+0x2c8>)
 8008784:	f001 fb47 	bl	8009e16 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800878c:	4828      	ldr	r0, [pc, #160]	; (8008830 <mainLoop+0x328>)
 800878e:	f001 fb13 	bl	8009db8 <HAL_GPIO_ReadPin>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <mainLoop+0x2a6>
 8008798:	4b26      	ldr	r3, [pc, #152]	; (8008834 <mainLoop+0x32c>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f083 0301 	eor.w	r3, r3, #1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <mainLoop+0x2a6>
			stopVar=1;
 80087a6:	4b24      	ldr	r3, [pc, #144]	; (8008838 <mainLoop+0x330>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	e002      	b.n	80087b4 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 80087ae:	4b22      	ldr	r3, [pc, #136]	; (8008838 <mainLoop+0x330>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80087b4:	f7fd fec8 	bl	8006548 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80087b8:	f7fd fefa 	bl	80065b0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80087bc:	f7fd ff3e 	bl	800663c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80087c0:	f7fd ff8e 	bl	80066e0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80087c4:	f7ff fadc 	bl	8007d80 <checkDemoModCalisma>
		checkLCDBacklight();
 80087c8:	e6a1      	b.n	800850e <mainLoop+0x6>
 80087ca:	bf00      	nop
 80087cc:	40010800 	.word	0x40010800
 80087d0:	40011000 	.word	0x40011000
 80087d4:	20000d5f 	.word	0x20000d5f
 80087d8:	20000cb0 	.word	0x20000cb0
 80087dc:	20000ccc 	.word	0x20000ccc
 80087e0:	20000d5c 	.word	0x20000d5c
 80087e4:	20000b54 	.word	0x20000b54
 80087e8:	20000c38 	.word	0x20000c38
 80087ec:	20000d51 	.word	0x20000d51
 80087f0:	0800e664 	.word	0x0800e664
 80087f4:	0800e678 	.word	0x0800e678
 80087f8:	20000d5d 	.word	0x20000d5d
 80087fc:	20000d5e 	.word	0x20000d5e
 8008800:	0800e68c 	.word	0x0800e68c
 8008804:	0800e6a0 	.word	0x0800e6a0
 8008808:	0800e6b4 	.word	0x0800e6b4
 800880c:	0800e6c8 	.word	0x0800e6c8
 8008810:	0800e6dc 	.word	0x0800e6dc
 8008814:	0800e6f0 	.word	0x0800e6f0
 8008818:	0800e704 	.word	0x0800e704
 800881c:	20000d4d 	.word	0x20000d4d
 8008820:	20000d64 	.word	0x20000d64
 8008824:	20000d4e 	.word	0x20000d4e
 8008828:	0800e5c8 	.word	0x0800e5c8
 800882c:	0800e5dc 	.word	0x0800e5dc
 8008830:	40010c00 	.word	0x40010c00
 8008834:	20000d85 	.word	0x20000d85
 8008838:	20000d82 	.word	0x20000d82

0800883c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	4a03      	ldr	r2, [pc, #12]	; (8008858 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800884c:	6013      	str	r3, [r2, #0]
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr
 8008858:	20000cb0 	.word	0x20000cb0

0800885c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008860:	f000 fc78 	bl	8009154 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008868:	f000 fcd6 	bl	8009218 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800886c:	f000 f8a8 	bl	80089c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008870:	f000 f9ca 	bl	8008c08 <MX_GPIO_Init>
  MX_CAN_Init();
 8008874:	f000 f8ea 	bl	8008a4c <MX_CAN_Init>
  MX_I2C1_Init();
 8008878:	f000 f91c 	bl	8008ab4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800887c:	f000 f948 	bl	8008b10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008880:	f000 f998 	bl	8008bb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008884:	2201      	movs	r2, #1
 8008886:	2140      	movs	r1, #64	; 0x40
 8008888:	4843      	ldr	r0, [pc, #268]	; (8008998 <main+0x13c>)
 800888a:	f001 faac 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800888e:	2201      	movs	r2, #1
 8008890:	2180      	movs	r1, #128	; 0x80
 8008892:	4841      	ldr	r0, [pc, #260]	; (8008998 <main+0x13c>)
 8008894:	f001 faa7 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008898:	200a      	movs	r0, #10
 800889a:	f000 fcbd 	bl	8009218 <HAL_Delay>
  lcd_init();
 800889e:	f7f7 feb1 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 80088a2:	200a      	movs	r0, #10
 80088a4:	f000 fcb8 	bl	8009218 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80088a8:	483c      	ldr	r0, [pc, #240]	; (800899c <main+0x140>)
 80088aa:	f003 f94f 	bl	800bb4c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80088ae:	bf00      	nop
 80088b0:	483b      	ldr	r0, [pc, #236]	; (80089a0 <main+0x144>)
 80088b2:	f002 f8aa 	bl	800aa0a <HAL_I2C_GetError>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d0f9      	beq.n	80088b0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80088bc:	bf00      	nop
 80088be:	4838      	ldr	r0, [pc, #224]	; (80089a0 <main+0x144>)
 80088c0:	f002 f896 	bl	800a9f0 <HAL_I2C_GetState>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d1f9      	bne.n	80088be <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80088ca:	2200      	movs	r2, #0
 80088cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088d0:	4831      	ldr	r0, [pc, #196]	; (8008998 <main+0x13c>)
 80088d2:	f001 fa88 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80088d6:	2200      	movs	r2, #0
 80088d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088dc:	482e      	ldr	r0, [pc, #184]	; (8008998 <main+0x13c>)
 80088de:	f001 fa82 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80088e2:	2200      	movs	r2, #0
 80088e4:	2104      	movs	r1, #4
 80088e6:	482c      	ldr	r0, [pc, #176]	; (8008998 <main+0x13c>)
 80088e8:	f001 fa7d 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80088ec:	2200      	movs	r2, #0
 80088ee:	2102      	movs	r1, #2
 80088f0:	4829      	ldr	r0, [pc, #164]	; (8008998 <main+0x13c>)
 80088f2:	f001 fa78 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80088f6:	2200      	movs	r2, #0
 80088f8:	2101      	movs	r1, #1
 80088fa:	4827      	ldr	r0, [pc, #156]	; (8008998 <main+0x13c>)
 80088fc:	f001 fa73 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008900:	2200      	movs	r2, #0
 8008902:	2120      	movs	r1, #32
 8008904:	4827      	ldr	r0, [pc, #156]	; (80089a4 <main+0x148>)
 8008906:	f001 fa6e 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800890a:	2200      	movs	r2, #0
 800890c:	2110      	movs	r1, #16
 800890e:	4825      	ldr	r0, [pc, #148]	; (80089a4 <main+0x148>)
 8008910:	f001 fa69 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008914:	2200      	movs	r2, #0
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	4823      	ldr	r0, [pc, #140]	; (80089a8 <main+0x14c>)
 800891a:	f001 fa64 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800891e:	2200      	movs	r2, #0
 8008920:	2140      	movs	r1, #64	; 0x40
 8008922:	4821      	ldr	r0, [pc, #132]	; (80089a8 <main+0x14c>)
 8008924:	f001 fa5f 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008928:	2200      	movs	r2, #0
 800892a:	2120      	movs	r1, #32
 800892c:	481e      	ldr	r0, [pc, #120]	; (80089a8 <main+0x14c>)
 800892e:	f001 fa5a 	bl	8009de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008932:	2200      	movs	r2, #0
 8008934:	2110      	movs	r1, #16
 8008936:	481c      	ldr	r0, [pc, #112]	; (80089a8 <main+0x14c>)
 8008938:	f001 fa55 	bl	8009de6 <HAL_GPIO_WritePin>

  i2cTest();
 800893c:	f7fd fd36 	bl	80063ac <i2cTest>
  HAL_Delay(100);
 8008940:	2064      	movs	r0, #100	; 0x64
 8008942:	f000 fc69 	bl	8009218 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008946:	4a19      	ldr	r2, [pc, #100]	; (80089ac <main+0x150>)
 8008948:	2101      	movs	r1, #1
 800894a:	2001      	movs	r0, #1
 800894c:	f7f7 fe8c 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008950:	4a17      	ldr	r2, [pc, #92]	; (80089b0 <main+0x154>)
 8008952:	2101      	movs	r1, #1
 8008954:	2002      	movs	r0, #2
 8008956:	f7f7 fe87 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 800895a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800895e:	f000 fc5b 	bl	8009218 <HAL_Delay>
  lcd_clear();
 8008962:	f7f7 fead 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 8008966:	2000      	movs	r0, #0
 8008968:	f7fd f944 	bl	8005bf4 <eepromKontrol>
  HAL_Delay(200);
 800896c:	20c8      	movs	r0, #200	; 0xc8
 800896e:	f000 fc53 	bl	8009218 <HAL_Delay>

  lcd_clear();
 8008972:	f7f7 fea5 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 8008976:	20c8      	movs	r0, #200	; 0xc8
 8008978:	f000 fc4e 	bl	8009218 <HAL_Delay>

  backLightTimer = millis;
 800897c:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <main+0x158>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0d      	ldr	r2, [pc, #52]	; (80089b8 <main+0x15c>)
 8008982:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 8008984:	4b0d      	ldr	r3, [pc, #52]	; (80089bc <main+0x160>)
 8008986:	7adb      	ldrb	r3, [r3, #11]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <main+0x136>
	  takeMachineID(0);
 800898c:	2000      	movs	r0, #0
 800898e:	f7f8 f91d 	bl	8000bcc <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008992:	f7ff fdb9 	bl	8008508 <mainLoop>
 8008996:	e7fc      	b.n	8008992 <main+0x136>
 8008998:	40010c00 	.word	0x40010c00
 800899c:	20000ba8 	.word	0x20000ba8
 80089a0:	20000b54 	.word	0x20000b54
 80089a4:	40011000 	.word	0x40011000
 80089a8:	40010800 	.word	0x40010800
 80089ac:	0800e718 	.word	0x0800e718
 80089b0:	0800e72c 	.word	0x0800e72c
 80089b4:	20000cb0 	.word	0x20000cb0
 80089b8:	20000ccc 	.word	0x20000ccc
 80089bc:	20000cd0 	.word	0x20000cd0

080089c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b090      	sub	sp, #64	; 0x40
 80089c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089c6:	f107 0318 	add.w	r3, r7, #24
 80089ca:	2228      	movs	r2, #40	; 0x28
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f004 fb36 	bl	800d040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	609a      	str	r2, [r3, #8]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80089e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80089ec:	2300      	movs	r3, #0
 80089ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80089f0:	2301      	movs	r3, #1
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089f4:	2302      	movs	r3, #2
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80089f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80089fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a04:	f107 0318 	add.w	r3, r7, #24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f002 fc3f 	bl	800b28c <HAL_RCC_OscConfig>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008a14:	f000 f9a2 	bl	8008d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a18:	230f      	movs	r3, #15
 8008a1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008a2e:	1d3b      	adds	r3, r7, #4
 8008a30:	2102      	movs	r1, #2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f002 feac 	bl	800b790 <HAL_RCC_ClockConfig>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008a3e:	f000 f98d 	bl	8008d5c <Error_Handler>
  }
}
 8008a42:	bf00      	nop
 8008a44:	3740      	adds	r7, #64	; 0x40
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008a50:	4b16      	ldr	r3, [pc, #88]	; (8008aac <MX_CAN_Init+0x60>)
 8008a52:	4a17      	ldr	r2, [pc, #92]	; (8008ab0 <MX_CAN_Init+0x64>)
 8008a54:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008a56:	4b15      	ldr	r3, [pc, #84]	; (8008aac <MX_CAN_Init+0x60>)
 8008a58:	2210      	movs	r2, #16
 8008a5a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008a5c:	4b13      	ldr	r3, [pc, #76]	; (8008aac <MX_CAN_Init+0x60>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008a62:	4b12      	ldr	r3, [pc, #72]	; (8008aac <MX_CAN_Init+0x60>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008a68:	4b10      	ldr	r3, [pc, #64]	; (8008aac <MX_CAN_Init+0x60>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008a6e:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <MX_CAN_Init+0x60>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008a74:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <MX_CAN_Init+0x60>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008a7a:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <MX_CAN_Init+0x60>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <MX_CAN_Init+0x60>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <MX_CAN_Init+0x60>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008a8c:	4b07      	ldr	r3, [pc, #28]	; (8008aac <MX_CAN_Init+0x60>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <MX_CAN_Init+0x60>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008a98:	4804      	ldr	r0, [pc, #16]	; (8008aac <MX_CAN_Init+0x60>)
 8008a9a:	f000 fbe1 	bl	8009260 <HAL_CAN_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008aa4:	f000 f95a 	bl	8008d5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008aa8:	bf00      	nop
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20000b2c 	.word	0x20000b2c
 8008ab0:	40006400 	.word	0x40006400

08008ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008ab8:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008aba:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <MX_I2C1_Init+0x54>)
 8008abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008ac0:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <MX_I2C1_Init+0x58>)
 8008ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008aca:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008ae4:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008aea:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008af0:	4804      	ldr	r0, [pc, #16]	; (8008b04 <MX_I2C1_Init+0x50>)
 8008af2:	f001 f9a9 	bl	8009e48 <HAL_I2C_Init>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008afc:	f000 f92e 	bl	8008d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008b00:	bf00      	nop
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000b54 	.word	0x20000b54
 8008b08:	40005400 	.word	0x40005400
 8008b0c:	00061a80 	.word	0x00061a80

08008b10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b16:	f107 0308 	add.w	r3, r7, #8
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	605a      	str	r2, [r3, #4]
 8008b20:	609a      	str	r2, [r3, #8]
 8008b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b24:	463b      	mov	r3, r7
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008b2c:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b2e:	4a20      	ldr	r2, [pc, #128]	; (8008bb0 <MX_TIM1_Init+0xa0>)
 8008b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008b32:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b34:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b3a:	4b1c      	ldr	r3, [pc, #112]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b42:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b48:	4b18      	ldr	r3, [pc, #96]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b54:	4b15      	ldr	r3, [pc, #84]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008b5a:	4814      	ldr	r0, [pc, #80]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b5c:	f002 ffa6 	bl	800baac <HAL_TIM_Base_Init>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008b66:	f000 f8f9 	bl	8008d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008b70:	f107 0308 	add.w	r3, r7, #8
 8008b74:	4619      	mov	r1, r3
 8008b76:	480d      	ldr	r0, [pc, #52]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b78:	f003 f950 	bl	800be1c <HAL_TIM_ConfigClockSource>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008b82:	f000 f8eb 	bl	8008d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b86:	2300      	movs	r3, #0
 8008b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008b8e:	463b      	mov	r3, r7
 8008b90:	4619      	mov	r1, r3
 8008b92:	4806      	ldr	r0, [pc, #24]	; (8008bac <MX_TIM1_Init+0x9c>)
 8008b94:	f003 fb3e 	bl	800c214 <HAL_TIMEx_MasterConfigSynchronization>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008b9e:	f000 f8dd 	bl	8008d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008ba2:	bf00      	nop
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000ba8 	.word	0x20000ba8
 8008bb0:	40012c00 	.word	0x40012c00

08008bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008bb8:	4b11      	ldr	r3, [pc, #68]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bba:	4a12      	ldr	r2, [pc, #72]	; (8008c04 <MX_USART1_UART_Init+0x50>)
 8008bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008bbe:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008bc6:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bda:	220c      	movs	r2, #12
 8008bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008be4:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008bea:	4805      	ldr	r0, [pc, #20]	; (8008c00 <MX_USART1_UART_Init+0x4c>)
 8008bec:	f003 fb90 	bl	800c310 <HAL_UART_Init>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008bf6:	f000 f8b1 	bl	8008d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000bf0 	.word	0x20000bf0
 8008c04:	40013800 	.word	0x40013800

08008c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c0e:	f107 0310 	add.w	r3, r7, #16
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	605a      	str	r2, [r3, #4]
 8008c18:	609a      	str	r2, [r3, #8]
 8008c1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c1c:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	4a4a      	ldr	r2, [pc, #296]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c22:	f043 0310 	orr.w	r3, r3, #16
 8008c26:	6193      	str	r3, [r2, #24]
 8008c28:	4b48      	ldr	r3, [pc, #288]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c34:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	4a44      	ldr	r2, [pc, #272]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c3a:	f043 0320 	orr.w	r3, r3, #32
 8008c3e:	6193      	str	r3, [r2, #24]
 8008c40:	4b42      	ldr	r3, [pc, #264]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	60bb      	str	r3, [r7, #8]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c4c:	4b3f      	ldr	r3, [pc, #252]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	4a3e      	ldr	r2, [pc, #248]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c52:	f043 0304 	orr.w	r3, r3, #4
 8008c56:	6193      	str	r3, [r2, #24]
 8008c58:	4b3c      	ldr	r3, [pc, #240]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	607b      	str	r3, [r7, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c64:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	4a38      	ldr	r2, [pc, #224]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c6a:	f043 0308 	orr.w	r3, r3, #8
 8008c6e:	6193      	str	r3, [r2, #24]
 8008c70:	4b36      	ldr	r3, [pc, #216]	; (8008d4c <MX_GPIO_Init+0x144>)
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	21f0      	movs	r1, #240	; 0xf0
 8008c80:	4833      	ldr	r0, [pc, #204]	; (8008d50 <MX_GPIO_Init+0x148>)
 8008c82:	f001 f8b0 	bl	8009de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008c86:	2200      	movs	r2, #0
 8008c88:	f241 0130 	movw	r1, #4144	; 0x1030
 8008c8c:	4831      	ldr	r0, [pc, #196]	; (8008d54 <MX_GPIO_Init+0x14c>)
 8008c8e:	f001 f8aa 	bl	8009de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008c92:	2200      	movs	r2, #0
 8008c94:	f640 4107 	movw	r1, #3079	; 0xc07
 8008c98:	482f      	ldr	r0, [pc, #188]	; (8008d58 <MX_GPIO_Init+0x150>)
 8008c9a:	f001 f8a4 	bl	8009de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008c9e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008ca2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cac:	f107 0310 	add.w	r3, r7, #16
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4828      	ldr	r0, [pc, #160]	; (8008d54 <MX_GPIO_Init+0x14c>)
 8008cb4:	f000 fe20 	bl	80098f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008cb8:	f248 130f 	movw	r3, #33039	; 0x810f
 8008cbc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc6:	f107 0310 	add.w	r3, r7, #16
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4820      	ldr	r0, [pc, #128]	; (8008d50 <MX_GPIO_Init+0x148>)
 8008cce:	f000 fe13 	bl	80098f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008cd2:	23f0      	movs	r3, #240	; 0xf0
 8008cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ce2:	f107 0310 	add.w	r3, r7, #16
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4819      	ldr	r0, [pc, #100]	; (8008d50 <MX_GPIO_Init+0x148>)
 8008cea:	f000 fe05 	bl	80098f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008cee:	f241 0330 	movw	r3, #4144	; 0x1030
 8008cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d00:	f107 0310 	add.w	r3, r7, #16
 8008d04:	4619      	mov	r1, r3
 8008d06:	4813      	ldr	r0, [pc, #76]	; (8008d54 <MX_GPIO_Init+0x14c>)
 8008d08:	f000 fdf6 	bl	80098f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008d0c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008d10:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d12:	2301      	movs	r3, #1
 8008d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d1e:	f107 0310 	add.w	r3, r7, #16
 8008d22:	4619      	mov	r1, r3
 8008d24:	480c      	ldr	r0, [pc, #48]	; (8008d58 <MX_GPIO_Init+0x150>)
 8008d26:	f000 fde7 	bl	80098f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008d2a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d30:	2300      	movs	r3, #0
 8008d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d38:	f107 0310 	add.w	r3, r7, #16
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4806      	ldr	r0, [pc, #24]	; (8008d58 <MX_GPIO_Init+0x150>)
 8008d40:	f000 fdda 	bl	80098f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008d44:	bf00      	nop
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	40010800 	.word	0x40010800
 8008d54:	40011000 	.word	0x40011000
 8008d58:	40010c00 	.word	0x40010c00

08008d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008d60:	bf00      	nop
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <HAL_MspInit+0x5c>)
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	4a14      	ldr	r2, [pc, #80]	; (8008dc4 <HAL_MspInit+0x5c>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	6193      	str	r3, [r2, #24]
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <HAL_MspInit+0x5c>)
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	60bb      	str	r3, [r7, #8]
 8008d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d86:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <HAL_MspInit+0x5c>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	4a0e      	ldr	r2, [pc, #56]	; (8008dc4 <HAL_MspInit+0x5c>)
 8008d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d90:	61d3      	str	r3, [r2, #28]
 8008d92:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <HAL_MspInit+0x5c>)
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d9a:	607b      	str	r3, [r7, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <HAL_MspInit+0x60>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	4a04      	ldr	r2, [pc, #16]	; (8008dc8 <HAL_MspInit+0x60>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	40010000 	.word	0x40010000

08008dcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd4:	f107 0310 	add.w	r3, r7, #16
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	609a      	str	r2, [r3, #8]
 8008de0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a1c      	ldr	r2, [pc, #112]	; (8008e58 <HAL_CAN_MspInit+0x8c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d131      	bne.n	8008e50 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <HAL_CAN_MspInit+0x90>)
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <HAL_CAN_MspInit+0x90>)
 8008df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008df6:	61d3      	str	r3, [r2, #28]
 8008df8:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <HAL_CAN_MspInit+0x90>)
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <HAL_CAN_MspInit+0x90>)
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	4a14      	ldr	r2, [pc, #80]	; (8008e5c <HAL_CAN_MspInit+0x90>)
 8008e0a:	f043 0304 	orr.w	r3, r3, #4
 8008e0e:	6193      	str	r3, [r2, #24]
 8008e10:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <HAL_CAN_MspInit+0x90>)
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	60bb      	str	r3, [r7, #8]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e22:	2300      	movs	r3, #0
 8008e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e2a:	f107 0310 	add.w	r3, r7, #16
 8008e2e:	4619      	mov	r1, r3
 8008e30:	480b      	ldr	r0, [pc, #44]	; (8008e60 <HAL_CAN_MspInit+0x94>)
 8008e32:	f000 fd61 	bl	80098f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e40:	2303      	movs	r3, #3
 8008e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e44:	f107 0310 	add.w	r3, r7, #16
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4805      	ldr	r0, [pc, #20]	; (8008e60 <HAL_CAN_MspInit+0x94>)
 8008e4c:	f000 fd54 	bl	80098f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008e50:	bf00      	nop
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40006400 	.word	0x40006400
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	40010800 	.word	0x40010800

08008e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	605a      	str	r2, [r3, #4]
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a15      	ldr	r2, [pc, #84]	; (8008ed4 <HAL_I2C_MspInit+0x70>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d123      	bne.n	8008ecc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <HAL_I2C_MspInit+0x74>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <HAL_I2C_MspInit+0x74>)
 8008e8a:	f043 0308 	orr.w	r3, r3, #8
 8008e8e:	6193      	str	r3, [r2, #24]
 8008e90:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <HAL_I2C_MspInit+0x74>)
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008e9c:	23c0      	movs	r3, #192	; 0xc0
 8008e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ea0:	2312      	movs	r3, #18
 8008ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ea8:	f107 0310 	add.w	r3, r7, #16
 8008eac:	4619      	mov	r1, r3
 8008eae:	480b      	ldr	r0, [pc, #44]	; (8008edc <HAL_I2C_MspInit+0x78>)
 8008eb0:	f000 fd22 	bl	80098f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008eb4:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <HAL_I2C_MspInit+0x74>)
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	4a07      	ldr	r2, [pc, #28]	; (8008ed8 <HAL_I2C_MspInit+0x74>)
 8008eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ebe:	61d3      	str	r3, [r2, #28]
 8008ec0:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <HAL_I2C_MspInit+0x74>)
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008ecc:	bf00      	nop
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40005400 	.word	0x40005400
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	40010c00 	.word	0x40010c00

08008ee0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a0a      	ldr	r2, [pc, #40]	; (8008f18 <HAL_I2C_MspDeInit+0x38>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d10d      	bne.n	8008f0e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008ef2:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <HAL_I2C_MspDeInit+0x3c>)
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	4a09      	ldr	r2, [pc, #36]	; (8008f1c <HAL_I2C_MspDeInit+0x3c>)
 8008ef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008efc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008efe:	2140      	movs	r1, #64	; 0x40
 8008f00:	4807      	ldr	r0, [pc, #28]	; (8008f20 <HAL_I2C_MspDeInit+0x40>)
 8008f02:	f000 fe8d 	bl	8009c20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008f06:	2180      	movs	r1, #128	; 0x80
 8008f08:	4805      	ldr	r0, [pc, #20]	; (8008f20 <HAL_I2C_MspDeInit+0x40>)
 8008f0a:	f000 fe89 	bl	8009c20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	40005400 	.word	0x40005400
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	40010c00 	.word	0x40010c00

08008f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0d      	ldr	r2, [pc, #52]	; (8008f68 <HAL_TIM_Base_MspInit+0x44>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d113      	bne.n	8008f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <HAL_TIM_Base_MspInit+0x48>)
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	4a0c      	ldr	r2, [pc, #48]	; (8008f6c <HAL_TIM_Base_MspInit+0x48>)
 8008f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f40:	6193      	str	r3, [r2, #24]
 8008f42:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <HAL_TIM_Base_MspInit+0x48>)
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2100      	movs	r1, #0
 8008f52:	2019      	movs	r0, #25
 8008f54:	f000 fb57 	bl	8009606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008f58:	2019      	movs	r0, #25
 8008f5a:	f000 fb70 	bl	800963e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	40012c00 	.word	0x40012c00
 8008f6c:	40021000 	.word	0x40021000

08008f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f78:	f107 0310 	add.w	r3, r7, #16
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	605a      	str	r2, [r3, #4]
 8008f82:	609a      	str	r2, [r3, #8]
 8008f84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a20      	ldr	r2, [pc, #128]	; (800900c <HAL_UART_MspInit+0x9c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d139      	bne.n	8009004 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008f90:	4b1f      	ldr	r3, [pc, #124]	; (8009010 <HAL_UART_MspInit+0xa0>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <HAL_UART_MspInit+0xa0>)
 8008f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f9a:	6193      	str	r3, [r2, #24]
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	; (8009010 <HAL_UART_MspInit+0xa0>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fa8:	4b19      	ldr	r3, [pc, #100]	; (8009010 <HAL_UART_MspInit+0xa0>)
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	4a18      	ldr	r2, [pc, #96]	; (8009010 <HAL_UART_MspInit+0xa0>)
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	6193      	str	r3, [r2, #24]
 8008fb4:	4b16      	ldr	r3, [pc, #88]	; (8009010 <HAL_UART_MspInit+0xa0>)
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	60bb      	str	r3, [r7, #8]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fce:	f107 0310 	add.w	r3, r7, #16
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	480f      	ldr	r0, [pc, #60]	; (8009014 <HAL_UART_MspInit+0xa4>)
 8008fd6:	f000 fc8f 	bl	80098f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fe8:	f107 0310 	add.w	r3, r7, #16
 8008fec:	4619      	mov	r1, r3
 8008fee:	4809      	ldr	r0, [pc, #36]	; (8009014 <HAL_UART_MspInit+0xa4>)
 8008ff0:	f000 fc82 	bl	80098f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	2025      	movs	r0, #37	; 0x25
 8008ffa:	f000 fb04 	bl	8009606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008ffe:	2025      	movs	r0, #37	; 0x25
 8009000:	f000 fb1d 	bl	800963e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009004:	bf00      	nop
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40013800 	.word	0x40013800
 8009010:	40021000 	.word	0x40021000
 8009014:	40010800 	.word	0x40010800

08009018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800901c:	e7fe      	b.n	800901c <NMI_Handler+0x4>

0800901e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800901e:	b480      	push	{r7}
 8009020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009022:	e7fe      	b.n	8009022 <HardFault_Handler+0x4>

08009024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009028:	e7fe      	b.n	8009028 <MemManage_Handler+0x4>

0800902a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800902a:	b480      	push	{r7}
 800902c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800902e:	e7fe      	b.n	800902e <BusFault_Handler+0x4>

08009030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009034:	e7fe      	b.n	8009034 <UsageFault_Handler+0x4>

08009036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009036:	b480      	push	{r7}
 8009038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800903a:	bf00      	nop
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr

08009042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009042:	b480      	push	{r7}
 8009044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr

0800904e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800904e:	b480      	push	{r7}
 8009050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009052:	bf00      	nop
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800905e:	f000 f8bf 	bl	80091e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009062:	bf00      	nop
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800906c:	4802      	ldr	r0, [pc, #8]	; (8009078 <TIM1_UP_IRQHandler+0x10>)
 800906e:	f002 fdcd 	bl	800bc0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000ba8 	.word	0x20000ba8

0800907c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009080:	4802      	ldr	r0, [pc, #8]	; (800908c <USART1_IRQHandler+0x10>)
 8009082:	f003 f9cb 	bl	800c41c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009086:	bf00      	nop
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000bf0 	.word	0x20000bf0

08009090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009098:	4a14      	ldr	r2, [pc, #80]	; (80090ec <_sbrk+0x5c>)
 800909a:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <_sbrk+0x60>)
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80090a4:	4b13      	ldr	r3, [pc, #76]	; (80090f4 <_sbrk+0x64>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <_sbrk+0x64>)
 80090ae:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <_sbrk+0x68>)
 80090b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <_sbrk+0x64>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4413      	add	r3, r2
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d207      	bcs.n	80090d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80090c0:	f003 ffe6 	bl	800d090 <__errno>
 80090c4:	4603      	mov	r3, r0
 80090c6:	220c      	movs	r2, #12
 80090c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80090ca:	f04f 33ff 	mov.w	r3, #4294967295
 80090ce:	e009      	b.n	80090e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80090d0:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <_sbrk+0x64>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80090d6:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <_sbrk+0x64>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	4a05      	ldr	r2, [pc, #20]	; (80090f4 <_sbrk+0x64>)
 80090e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80090e2:	68fb      	ldr	r3, [r7, #12]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	2000c000 	.word	0x2000c000
 80090f0:	00000400 	.word	0x00000400
 80090f4:	20000ec4 	.word	0x20000ec4
 80090f8:	20001018 	.word	0x20001018

080090fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009100:	bf00      	nop
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr

08009108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009108:	480c      	ldr	r0, [pc, #48]	; (800913c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800910a:	490d      	ldr	r1, [pc, #52]	; (8009140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800910c:	4a0d      	ldr	r2, [pc, #52]	; (8009144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800910e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009110:	e002      	b.n	8009118 <LoopCopyDataInit>

08009112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009116:	3304      	adds	r3, #4

08009118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800911a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800911c:	d3f9      	bcc.n	8009112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800911e:	4a0a      	ldr	r2, [pc, #40]	; (8009148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009120:	4c0a      	ldr	r4, [pc, #40]	; (800914c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009124:	e001      	b.n	800912a <LoopFillZerobss>

08009126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009128:	3204      	adds	r2, #4

0800912a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800912a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800912c:	d3fb      	bcc.n	8009126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800912e:	f7ff ffe5 	bl	80090fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009132:	f003 ffb3 	bl	800d09c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009136:	f7ff fb91 	bl	800885c <main>
  bx lr
 800913a:	4770      	bx	lr
  ldr r0, =_sdata
 800913c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009140:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8009144:	0800e7cc 	.word	0x0800e7cc
  ldr r2, =_sbss
 8009148:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 800914c:	20001014 	.word	0x20001014

08009150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009150:	e7fe      	b.n	8009150 <ADC1_2_IRQHandler>
	...

08009154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <HAL_Init+0x28>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a07      	ldr	r2, [pc, #28]	; (800917c <HAL_Init+0x28>)
 800915e:	f043 0310 	orr.w	r3, r3, #16
 8009162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009164:	2003      	movs	r0, #3
 8009166:	f000 fa43 	bl	80095f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800916a:	200f      	movs	r0, #15
 800916c:	f000 f808 	bl	8009180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009170:	f7ff fdfa 	bl	8008d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40022000 	.word	0x40022000

08009180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009188:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <HAL_InitTick+0x54>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <HAL_InitTick+0x58>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	4619      	mov	r1, r3
 8009192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009196:	fbb3 f3f1 	udiv	r3, r3, r1
 800919a:	fbb2 f3f3 	udiv	r3, r2, r3
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fa5b 	bl	800965a <HAL_SYSTICK_Config>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e00e      	b.n	80091cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b0f      	cmp	r3, #15
 80091b2:	d80a      	bhi.n	80091ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091b4:	2200      	movs	r2, #0
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	f000 fa23 	bl	8009606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80091c0:	4a06      	ldr	r2, [pc, #24]	; (80091dc <HAL_InitTick+0x5c>)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	200009b8 	.word	0x200009b8
 80091d8:	200009c0 	.word	0x200009c0
 80091dc:	200009bc 	.word	0x200009bc

080091e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091e4:	4b05      	ldr	r3, [pc, #20]	; (80091fc <HAL_IncTick+0x1c>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	4b05      	ldr	r3, [pc, #20]	; (8009200 <HAL_IncTick+0x20>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4413      	add	r3, r2
 80091f0:	4a03      	ldr	r2, [pc, #12]	; (8009200 <HAL_IncTick+0x20>)
 80091f2:	6013      	str	r3, [r2, #0]
}
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr
 80091fc:	200009c0 	.word	0x200009c0
 8009200:	20000ec8 	.word	0x20000ec8

08009204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  return uwTick;
 8009208:	4b02      	ldr	r3, [pc, #8]	; (8009214 <HAL_GetTick+0x10>)
 800920a:	681b      	ldr	r3, [r3, #0]
}
 800920c:	4618      	mov	r0, r3
 800920e:	46bd      	mov	sp, r7
 8009210:	bc80      	pop	{r7}
 8009212:	4770      	bx	lr
 8009214:	20000ec8 	.word	0x20000ec8

08009218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009220:	f7ff fff0 	bl	8009204 <HAL_GetTick>
 8009224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009230:	d005      	beq.n	800923e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009232:	4b0a      	ldr	r3, [pc, #40]	; (800925c <HAL_Delay+0x44>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800923e:	bf00      	nop
 8009240:	f7ff ffe0 	bl	8009204 <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d8f7      	bhi.n	8009240 <HAL_Delay+0x28>
  {
  }
}
 8009250:	bf00      	nop
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200009c0 	.word	0x200009c0

08009260 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e0ed      	b.n	800944e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fda4 	bl	8008dcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0201 	orr.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009294:	f7ff ffb6 	bl	8009204 <HAL_GetTick>
 8009298:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800929a:	e012      	b.n	80092c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800929c:	f7ff ffb2 	bl	8009204 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b0a      	cmp	r3, #10
 80092a8:	d90b      	bls.n	80092c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2205      	movs	r2, #5
 80092ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e0c5      	b.n	800944e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0e5      	beq.n	800929c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0202 	bic.w	r2, r2, #2
 80092de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092e0:	f7ff ff90 	bl	8009204 <HAL_GetTick>
 80092e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80092e6:	e012      	b.n	800930e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80092e8:	f7ff ff8c 	bl	8009204 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b0a      	cmp	r3, #10
 80092f4:	d90b      	bls.n	800930e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2205      	movs	r2, #5
 8009306:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e09f      	b.n	800944e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e5      	bne.n	80092e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7e1b      	ldrb	r3, [r3, #24]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d108      	bne.n	8009336 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e007      	b.n	8009346 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009344:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	7e5b      	ldrb	r3, [r3, #25]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d108      	bne.n	8009360 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e007      	b.n	8009370 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800936e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	7e9b      	ldrb	r3, [r3, #26]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d108      	bne.n	800938a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0220 	orr.w	r2, r2, #32
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	e007      	b.n	800939a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0220 	bic.w	r2, r2, #32
 8009398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7edb      	ldrb	r3, [r3, #27]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d108      	bne.n	80093b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0210 	bic.w	r2, r2, #16
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	e007      	b.n	80093c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0210 	orr.w	r2, r2, #16
 80093c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	7f1b      	ldrb	r3, [r3, #28]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d108      	bne.n	80093de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0208 	orr.w	r2, r2, #8
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e007      	b.n	80093ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0208 	bic.w	r2, r2, #8
 80093ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7f5b      	ldrb	r3, [r3, #29]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d108      	bne.n	8009408 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0204 	orr.w	r2, r2, #4
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	e007      	b.n	8009418 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 0204 	bic.w	r2, r2, #4
 8009416:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	ea42 0103 	orr.w	r1, r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	1e5a      	subs	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <__NVIC_SetPriorityGrouping>:
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <__NVIC_SetPriorityGrouping+0x44>)
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009474:	4013      	ands	r3, r2
 8009476:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800948a:	4a04      	ldr	r2, [pc, #16]	; (800949c <__NVIC_SetPriorityGrouping+0x44>)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	60d3      	str	r3, [r2, #12]
}
 8009490:	bf00      	nop
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	e000ed00 	.word	0xe000ed00

080094a0 <__NVIC_GetPriorityGrouping>:
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80094a4:	4b04      	ldr	r3, [pc, #16]	; (80094b8 <__NVIC_GetPriorityGrouping+0x18>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	0a1b      	lsrs	r3, r3, #8
 80094aa:	f003 0307 	and.w	r3, r3, #7
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bc80      	pop	{r7}
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	e000ed00 	.word	0xe000ed00

080094bc <__NVIC_EnableIRQ>:
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	db0b      	blt.n	80094e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	f003 021f 	and.w	r2, r3, #31
 80094d4:	4906      	ldr	r1, [pc, #24]	; (80094f0 <__NVIC_EnableIRQ+0x34>)
 80094d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094da:	095b      	lsrs	r3, r3, #5
 80094dc:	2001      	movs	r0, #1
 80094de:	fa00 f202 	lsl.w	r2, r0, r2
 80094e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr
 80094f0:	e000e100 	.word	0xe000e100

080094f4 <__NVIC_SetPriority>:
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009504:	2b00      	cmp	r3, #0
 8009506:	db0a      	blt.n	800951e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	b2da      	uxtb	r2, r3
 800950c:	490c      	ldr	r1, [pc, #48]	; (8009540 <__NVIC_SetPriority+0x4c>)
 800950e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009512:	0112      	lsls	r2, r2, #4
 8009514:	b2d2      	uxtb	r2, r2
 8009516:	440b      	add	r3, r1
 8009518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800951c:	e00a      	b.n	8009534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	b2da      	uxtb	r2, r3
 8009522:	4908      	ldr	r1, [pc, #32]	; (8009544 <__NVIC_SetPriority+0x50>)
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	3b04      	subs	r3, #4
 800952c:	0112      	lsls	r2, r2, #4
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	440b      	add	r3, r1
 8009532:	761a      	strb	r2, [r3, #24]
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	e000e100 	.word	0xe000e100
 8009544:	e000ed00 	.word	0xe000ed00

08009548 <NVIC_EncodePriority>:
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f1c3 0307 	rsb	r3, r3, #7
 8009562:	2b04      	cmp	r3, #4
 8009564:	bf28      	it	cs
 8009566:	2304      	movcs	r3, #4
 8009568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	3304      	adds	r3, #4
 800956e:	2b06      	cmp	r3, #6
 8009570:	d902      	bls.n	8009578 <NVIC_EncodePriority+0x30>
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	3b03      	subs	r3, #3
 8009576:	e000      	b.n	800957a <NVIC_EncodePriority+0x32>
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800957c:	f04f 32ff 	mov.w	r2, #4294967295
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	fa02 f303 	lsl.w	r3, r2, r3
 8009586:	43da      	mvns	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	401a      	ands	r2, r3
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009590:	f04f 31ff 	mov.w	r1, #4294967295
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	fa01 f303 	lsl.w	r3, r1, r3
 800959a:	43d9      	mvns	r1, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095a0:	4313      	orrs	r3, r2
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3724      	adds	r7, #36	; 0x24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr

080095ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095bc:	d301      	bcc.n	80095c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80095be:	2301      	movs	r3, #1
 80095c0:	e00f      	b.n	80095e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80095c2:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <SysTick_Config+0x40>)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80095ca:	210f      	movs	r1, #15
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	f7ff ff90 	bl	80094f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <SysTick_Config+0x40>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80095da:	4b04      	ldr	r3, [pc, #16]	; (80095ec <SysTick_Config+0x40>)
 80095dc:	2207      	movs	r2, #7
 80095de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	e000e010 	.word	0xe000e010

080095f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff ff2d 	bl	8009458 <__NVIC_SetPriorityGrouping>
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009606:	b580      	push	{r7, lr}
 8009608:	b086      	sub	sp, #24
 800960a:	af00      	add	r7, sp, #0
 800960c:	4603      	mov	r3, r0
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009618:	f7ff ff42 	bl	80094a0 <__NVIC_GetPriorityGrouping>
 800961c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	6978      	ldr	r0, [r7, #20]
 8009624:	f7ff ff90 	bl	8009548 <NVIC_EncodePriority>
 8009628:	4602      	mov	r2, r0
 800962a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff ff5f 	bl	80094f4 <__NVIC_SetPriority>
}
 8009636:	bf00      	nop
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	4603      	mov	r3, r0
 8009646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff ff35 	bl	80094bc <__NVIC_EnableIRQ>
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff ffa2 	bl	80095ac <SysTick_Config>
 8009668:	4603      	mov	r3, r0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d008      	beq.n	800969c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2204      	movs	r2, #4
 800968e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e020      	b.n	80096de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 020e 	bic.w	r2, r2, #14
 80096aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0201 	bic.w	r2, r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c4:	2101      	movs	r1, #1
 80096c6:	fa01 f202 	lsl.w	r2, r1, r2
 80096ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d005      	beq.n	800970c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2204      	movs	r2, #4
 8009704:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	73fb      	strb	r3, [r7, #15]
 800970a:	e0d6      	b.n	80098ba <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 020e 	bic.w	r2, r2, #14
 800971a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	461a      	mov	r2, r3
 8009732:	4b64      	ldr	r3, [pc, #400]	; (80098c4 <HAL_DMA_Abort_IT+0x1dc>)
 8009734:	429a      	cmp	r2, r3
 8009736:	d958      	bls.n	80097ea <HAL_DMA_Abort_IT+0x102>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a62      	ldr	r2, [pc, #392]	; (80098c8 <HAL_DMA_Abort_IT+0x1e0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d04f      	beq.n	80097e2 <HAL_DMA_Abort_IT+0xfa>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a61      	ldr	r2, [pc, #388]	; (80098cc <HAL_DMA_Abort_IT+0x1e4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d048      	beq.n	80097de <HAL_DMA_Abort_IT+0xf6>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a5f      	ldr	r2, [pc, #380]	; (80098d0 <HAL_DMA_Abort_IT+0x1e8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d040      	beq.n	80097d8 <HAL_DMA_Abort_IT+0xf0>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a5e      	ldr	r2, [pc, #376]	; (80098d4 <HAL_DMA_Abort_IT+0x1ec>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d038      	beq.n	80097d2 <HAL_DMA_Abort_IT+0xea>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a5c      	ldr	r2, [pc, #368]	; (80098d8 <HAL_DMA_Abort_IT+0x1f0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d030      	beq.n	80097cc <HAL_DMA_Abort_IT+0xe4>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a5b      	ldr	r2, [pc, #364]	; (80098dc <HAL_DMA_Abort_IT+0x1f4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d028      	beq.n	80097c6 <HAL_DMA_Abort_IT+0xde>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a52      	ldr	r2, [pc, #328]	; (80098c4 <HAL_DMA_Abort_IT+0x1dc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d020      	beq.n	80097c0 <HAL_DMA_Abort_IT+0xd8>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a57      	ldr	r2, [pc, #348]	; (80098e0 <HAL_DMA_Abort_IT+0x1f8>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d019      	beq.n	80097bc <HAL_DMA_Abort_IT+0xd4>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a55      	ldr	r2, [pc, #340]	; (80098e4 <HAL_DMA_Abort_IT+0x1fc>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d012      	beq.n	80097b8 <HAL_DMA_Abort_IT+0xd0>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a54      	ldr	r2, [pc, #336]	; (80098e8 <HAL_DMA_Abort_IT+0x200>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00a      	beq.n	80097b2 <HAL_DMA_Abort_IT+0xca>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a52      	ldr	r2, [pc, #328]	; (80098ec <HAL_DMA_Abort_IT+0x204>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d102      	bne.n	80097ac <HAL_DMA_Abort_IT+0xc4>
 80097a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097aa:	e01b      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097b0:	e018      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b6:	e015      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097b8:	2310      	movs	r3, #16
 80097ba:	e013      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097bc:	2301      	movs	r3, #1
 80097be:	e011      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097c4:	e00e      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80097ca:	e00b      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097d0:	e008      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097d6:	e005      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097dc:	e002      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097de:	2310      	movs	r3, #16
 80097e0:	e000      	b.n	80097e4 <HAL_DMA_Abort_IT+0xfc>
 80097e2:	2301      	movs	r3, #1
 80097e4:	4a42      	ldr	r2, [pc, #264]	; (80098f0 <HAL_DMA_Abort_IT+0x208>)
 80097e6:	6053      	str	r3, [r2, #4]
 80097e8:	e057      	b.n	800989a <HAL_DMA_Abort_IT+0x1b2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a36      	ldr	r2, [pc, #216]	; (80098c8 <HAL_DMA_Abort_IT+0x1e0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d04f      	beq.n	8009894 <HAL_DMA_Abort_IT+0x1ac>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a34      	ldr	r2, [pc, #208]	; (80098cc <HAL_DMA_Abort_IT+0x1e4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d048      	beq.n	8009890 <HAL_DMA_Abort_IT+0x1a8>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a33      	ldr	r2, [pc, #204]	; (80098d0 <HAL_DMA_Abort_IT+0x1e8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d040      	beq.n	800988a <HAL_DMA_Abort_IT+0x1a2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a31      	ldr	r2, [pc, #196]	; (80098d4 <HAL_DMA_Abort_IT+0x1ec>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d038      	beq.n	8009884 <HAL_DMA_Abort_IT+0x19c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a30      	ldr	r2, [pc, #192]	; (80098d8 <HAL_DMA_Abort_IT+0x1f0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d030      	beq.n	800987e <HAL_DMA_Abort_IT+0x196>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a2e      	ldr	r2, [pc, #184]	; (80098dc <HAL_DMA_Abort_IT+0x1f4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d028      	beq.n	8009878 <HAL_DMA_Abort_IT+0x190>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a26      	ldr	r2, [pc, #152]	; (80098c4 <HAL_DMA_Abort_IT+0x1dc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d020      	beq.n	8009872 <HAL_DMA_Abort_IT+0x18a>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a2a      	ldr	r2, [pc, #168]	; (80098e0 <HAL_DMA_Abort_IT+0x1f8>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d019      	beq.n	800986e <HAL_DMA_Abort_IT+0x186>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a29      	ldr	r2, [pc, #164]	; (80098e4 <HAL_DMA_Abort_IT+0x1fc>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d012      	beq.n	800986a <HAL_DMA_Abort_IT+0x182>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a27      	ldr	r2, [pc, #156]	; (80098e8 <HAL_DMA_Abort_IT+0x200>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00a      	beq.n	8009864 <HAL_DMA_Abort_IT+0x17c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a26      	ldr	r2, [pc, #152]	; (80098ec <HAL_DMA_Abort_IT+0x204>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d102      	bne.n	800985e <HAL_DMA_Abort_IT+0x176>
 8009858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800985c:	e01b      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 800985e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009862:	e018      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 8009864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009868:	e015      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 800986a:	2310      	movs	r3, #16
 800986c:	e013      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 800986e:	2301      	movs	r3, #1
 8009870:	e011      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 8009872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009876:	e00e      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 8009878:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800987c:	e00b      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 800987e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009882:	e008      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 8009884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009888:	e005      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 800988a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800988e:	e002      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 8009890:	2310      	movs	r3, #16
 8009892:	e000      	b.n	8009896 <HAL_DMA_Abort_IT+0x1ae>
 8009894:	2301      	movs	r3, #1
 8009896:	4a17      	ldr	r2, [pc, #92]	; (80098f4 <HAL_DMA_Abort_IT+0x20c>)
 8009898:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	4798      	blx	r3
    } 
  }
  return status;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40020080 	.word	0x40020080
 80098c8:	40020008 	.word	0x40020008
 80098cc:	4002001c 	.word	0x4002001c
 80098d0:	40020030 	.word	0x40020030
 80098d4:	40020044 	.word	0x40020044
 80098d8:	40020058 	.word	0x40020058
 80098dc:	4002006c 	.word	0x4002006c
 80098e0:	40020408 	.word	0x40020408
 80098e4:	4002041c 	.word	0x4002041c
 80098e8:	40020430 	.word	0x40020430
 80098ec:	40020444 	.word	0x40020444
 80098f0:	40020400 	.word	0x40020400
 80098f4:	40020000 	.word	0x40020000

080098f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b08b      	sub	sp, #44	; 0x2c
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009902:	2300      	movs	r3, #0
 8009904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009906:	2300      	movs	r3, #0
 8009908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800990a:	e179      	b.n	8009c00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800990c:	2201      	movs	r2, #1
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	fa02 f303 	lsl.w	r3, r2, r3
 8009914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	4013      	ands	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	429a      	cmp	r2, r3
 8009926:	f040 8168 	bne.w	8009bfa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4a96      	ldr	r2, [pc, #600]	; (8009b88 <HAL_GPIO_Init+0x290>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d05e      	beq.n	80099f2 <HAL_GPIO_Init+0xfa>
 8009934:	4a94      	ldr	r2, [pc, #592]	; (8009b88 <HAL_GPIO_Init+0x290>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d875      	bhi.n	8009a26 <HAL_GPIO_Init+0x12e>
 800993a:	4a94      	ldr	r2, [pc, #592]	; (8009b8c <HAL_GPIO_Init+0x294>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d058      	beq.n	80099f2 <HAL_GPIO_Init+0xfa>
 8009940:	4a92      	ldr	r2, [pc, #584]	; (8009b8c <HAL_GPIO_Init+0x294>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d86f      	bhi.n	8009a26 <HAL_GPIO_Init+0x12e>
 8009946:	4a92      	ldr	r2, [pc, #584]	; (8009b90 <HAL_GPIO_Init+0x298>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d052      	beq.n	80099f2 <HAL_GPIO_Init+0xfa>
 800994c:	4a90      	ldr	r2, [pc, #576]	; (8009b90 <HAL_GPIO_Init+0x298>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d869      	bhi.n	8009a26 <HAL_GPIO_Init+0x12e>
 8009952:	4a90      	ldr	r2, [pc, #576]	; (8009b94 <HAL_GPIO_Init+0x29c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d04c      	beq.n	80099f2 <HAL_GPIO_Init+0xfa>
 8009958:	4a8e      	ldr	r2, [pc, #568]	; (8009b94 <HAL_GPIO_Init+0x29c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d863      	bhi.n	8009a26 <HAL_GPIO_Init+0x12e>
 800995e:	4a8e      	ldr	r2, [pc, #568]	; (8009b98 <HAL_GPIO_Init+0x2a0>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d046      	beq.n	80099f2 <HAL_GPIO_Init+0xfa>
 8009964:	4a8c      	ldr	r2, [pc, #560]	; (8009b98 <HAL_GPIO_Init+0x2a0>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d85d      	bhi.n	8009a26 <HAL_GPIO_Init+0x12e>
 800996a:	2b12      	cmp	r3, #18
 800996c:	d82a      	bhi.n	80099c4 <HAL_GPIO_Init+0xcc>
 800996e:	2b12      	cmp	r3, #18
 8009970:	d859      	bhi.n	8009a26 <HAL_GPIO_Init+0x12e>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <HAL_GPIO_Init+0x80>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	080099f3 	.word	0x080099f3
 800997c:	080099cd 	.word	0x080099cd
 8009980:	080099df 	.word	0x080099df
 8009984:	08009a21 	.word	0x08009a21
 8009988:	08009a27 	.word	0x08009a27
 800998c:	08009a27 	.word	0x08009a27
 8009990:	08009a27 	.word	0x08009a27
 8009994:	08009a27 	.word	0x08009a27
 8009998:	08009a27 	.word	0x08009a27
 800999c:	08009a27 	.word	0x08009a27
 80099a0:	08009a27 	.word	0x08009a27
 80099a4:	08009a27 	.word	0x08009a27
 80099a8:	08009a27 	.word	0x08009a27
 80099ac:	08009a27 	.word	0x08009a27
 80099b0:	08009a27 	.word	0x08009a27
 80099b4:	08009a27 	.word	0x08009a27
 80099b8:	08009a27 	.word	0x08009a27
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	080099e9 	.word	0x080099e9
 80099c4:	4a75      	ldr	r2, [pc, #468]	; (8009b9c <HAL_GPIO_Init+0x2a4>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d013      	beq.n	80099f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80099ca:	e02c      	b.n	8009a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	623b      	str	r3, [r7, #32]
          break;
 80099d2:	e029      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	3304      	adds	r3, #4
 80099da:	623b      	str	r3, [r7, #32]
          break;
 80099dc:	e024      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	3308      	adds	r3, #8
 80099e4:	623b      	str	r3, [r7, #32]
          break;
 80099e6:	e01f      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	330c      	adds	r3, #12
 80099ee:	623b      	str	r3, [r7, #32]
          break;
 80099f0:	e01a      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80099fa:	2304      	movs	r3, #4
 80099fc:	623b      	str	r3, [r7, #32]
          break;
 80099fe:	e013      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d105      	bne.n	8009a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a08:	2308      	movs	r3, #8
 8009a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	611a      	str	r2, [r3, #16]
          break;
 8009a12:	e009      	b.n	8009a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a14:	2308      	movs	r3, #8
 8009a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	615a      	str	r2, [r3, #20]
          break;
 8009a1e:	e003      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009a20:	2300      	movs	r3, #0
 8009a22:	623b      	str	r3, [r7, #32]
          break;
 8009a24:	e000      	b.n	8009a28 <HAL_GPIO_Init+0x130>
          break;
 8009a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	2bff      	cmp	r3, #255	; 0xff
 8009a2c:	d801      	bhi.n	8009a32 <HAL_GPIO_Init+0x13a>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	e001      	b.n	8009a36 <HAL_GPIO_Init+0x13e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3304      	adds	r3, #4
 8009a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2bff      	cmp	r3, #255	; 0xff
 8009a3c:	d802      	bhi.n	8009a44 <HAL_GPIO_Init+0x14c>
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	e002      	b.n	8009a4a <HAL_GPIO_Init+0x152>
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	3b08      	subs	r3, #8
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	210f      	movs	r1, #15
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	fa01 f303 	lsl.w	r3, r1, r3
 8009a58:	43db      	mvns	r3, r3
 8009a5a:	401a      	ands	r2, r3
 8009a5c:	6a39      	ldr	r1, [r7, #32]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	fa01 f303 	lsl.w	r3, r1, r3
 8009a64:	431a      	orrs	r2, r3
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80c1 	beq.w	8009bfa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009a78:	4b49      	ldr	r3, [pc, #292]	; (8009ba0 <HAL_GPIO_Init+0x2a8>)
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	4a48      	ldr	r2, [pc, #288]	; (8009ba0 <HAL_GPIO_Init+0x2a8>)
 8009a7e:	f043 0301 	orr.w	r3, r3, #1
 8009a82:	6193      	str	r3, [r2, #24]
 8009a84:	4b46      	ldr	r3, [pc, #280]	; (8009ba0 <HAL_GPIO_Init+0x2a8>)
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	60bb      	str	r3, [r7, #8]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009a90:	4a44      	ldr	r2, [pc, #272]	; (8009ba4 <HAL_GPIO_Init+0x2ac>)
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	089b      	lsrs	r3, r3, #2
 8009a96:	3302      	adds	r3, #2
 8009a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	220f      	movs	r2, #15
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	43db      	mvns	r3, r3
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a3c      	ldr	r2, [pc, #240]	; (8009ba8 <HAL_GPIO_Init+0x2b0>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d01f      	beq.n	8009afc <HAL_GPIO_Init+0x204>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a3b      	ldr	r2, [pc, #236]	; (8009bac <HAL_GPIO_Init+0x2b4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d019      	beq.n	8009af8 <HAL_GPIO_Init+0x200>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a3a      	ldr	r2, [pc, #232]	; (8009bb0 <HAL_GPIO_Init+0x2b8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d013      	beq.n	8009af4 <HAL_GPIO_Init+0x1fc>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a39      	ldr	r2, [pc, #228]	; (8009bb4 <HAL_GPIO_Init+0x2bc>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d00d      	beq.n	8009af0 <HAL_GPIO_Init+0x1f8>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a38      	ldr	r2, [pc, #224]	; (8009bb8 <HAL_GPIO_Init+0x2c0>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d007      	beq.n	8009aec <HAL_GPIO_Init+0x1f4>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a37      	ldr	r2, [pc, #220]	; (8009bbc <HAL_GPIO_Init+0x2c4>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d101      	bne.n	8009ae8 <HAL_GPIO_Init+0x1f0>
 8009ae4:	2305      	movs	r3, #5
 8009ae6:	e00a      	b.n	8009afe <HAL_GPIO_Init+0x206>
 8009ae8:	2306      	movs	r3, #6
 8009aea:	e008      	b.n	8009afe <HAL_GPIO_Init+0x206>
 8009aec:	2304      	movs	r3, #4
 8009aee:	e006      	b.n	8009afe <HAL_GPIO_Init+0x206>
 8009af0:	2303      	movs	r3, #3
 8009af2:	e004      	b.n	8009afe <HAL_GPIO_Init+0x206>
 8009af4:	2302      	movs	r3, #2
 8009af6:	e002      	b.n	8009afe <HAL_GPIO_Init+0x206>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e000      	b.n	8009afe <HAL_GPIO_Init+0x206>
 8009afc:	2300      	movs	r3, #0
 8009afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b00:	f002 0203 	and.w	r2, r2, #3
 8009b04:	0092      	lsls	r2, r2, #2
 8009b06:	4093      	lsls	r3, r2
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009b0e:	4925      	ldr	r1, [pc, #148]	; (8009ba4 <HAL_GPIO_Init+0x2ac>)
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	3302      	adds	r3, #2
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009b28:	4b25      	ldr	r3, [pc, #148]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	4924      	ldr	r1, [pc, #144]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	608b      	str	r3, [r1, #8]
 8009b34:	e006      	b.n	8009b44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009b36:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b38:	689a      	ldr	r2, [r3, #8]
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	43db      	mvns	r3, r3
 8009b3e:	4920      	ldr	r1, [pc, #128]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d006      	beq.n	8009b5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009b50:	4b1b      	ldr	r3, [pc, #108]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	491a      	ldr	r1, [pc, #104]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	60cb      	str	r3, [r1, #12]
 8009b5c:	e006      	b.n	8009b6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009b5e:	4b18      	ldr	r3, [pc, #96]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	43db      	mvns	r3, r3
 8009b66:	4916      	ldr	r1, [pc, #88]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d025      	beq.n	8009bc4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009b78:	4b11      	ldr	r3, [pc, #68]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	4910      	ldr	r1, [pc, #64]	; (8009bc0 <HAL_GPIO_Init+0x2c8>)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	604b      	str	r3, [r1, #4]
 8009b84:	e025      	b.n	8009bd2 <HAL_GPIO_Init+0x2da>
 8009b86:	bf00      	nop
 8009b88:	10320000 	.word	0x10320000
 8009b8c:	10310000 	.word	0x10310000
 8009b90:	10220000 	.word	0x10220000
 8009b94:	10210000 	.word	0x10210000
 8009b98:	10120000 	.word	0x10120000
 8009b9c:	10110000 	.word	0x10110000
 8009ba0:	40021000 	.word	0x40021000
 8009ba4:	40010000 	.word	0x40010000
 8009ba8:	40010800 	.word	0x40010800
 8009bac:	40010c00 	.word	0x40010c00
 8009bb0:	40011000 	.word	0x40011000
 8009bb4:	40011400 	.word	0x40011400
 8009bb8:	40011800 	.word	0x40011800
 8009bbc:	40011c00 	.word	0x40011c00
 8009bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009bc4:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <HAL_GPIO_Init+0x324>)
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	43db      	mvns	r3, r3
 8009bcc:	4913      	ldr	r1, [pc, #76]	; (8009c1c <HAL_GPIO_Init+0x324>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009bde:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <HAL_GPIO_Init+0x324>)
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	490e      	ldr	r1, [pc, #56]	; (8009c1c <HAL_GPIO_Init+0x324>)
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	600b      	str	r3, [r1, #0]
 8009bea:	e006      	b.n	8009bfa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009bec:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <HAL_GPIO_Init+0x324>)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	43db      	mvns	r3, r3
 8009bf4:	4909      	ldr	r1, [pc, #36]	; (8009c1c <HAL_GPIO_Init+0x324>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f ae7e 	bne.w	800990c <HAL_GPIO_Init+0x14>
  }
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	372c      	adds	r7, #44	; 0x2c
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr
 8009c1c:	40010400 	.word	0x40010400

08009c20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b089      	sub	sp, #36	; 0x24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009c2e:	e0a6      	b.n	8009d7e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009c30:	2201      	movs	r2, #1
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	fa02 f303 	lsl.w	r3, r2, r3
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8099 	beq.w	8009d78 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009c46:	4a54      	ldr	r2, [pc, #336]	; (8009d98 <HAL_GPIO_DeInit+0x178>)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c52:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	220f      	movs	r2, #15
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4013      	ands	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a4c      	ldr	r2, [pc, #304]	; (8009d9c <HAL_GPIO_DeInit+0x17c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d01f      	beq.n	8009cb0 <HAL_GPIO_DeInit+0x90>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a4b      	ldr	r2, [pc, #300]	; (8009da0 <HAL_GPIO_DeInit+0x180>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d019      	beq.n	8009cac <HAL_GPIO_DeInit+0x8c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a4a      	ldr	r2, [pc, #296]	; (8009da4 <HAL_GPIO_DeInit+0x184>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <HAL_GPIO_DeInit+0x88>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a49      	ldr	r2, [pc, #292]	; (8009da8 <HAL_GPIO_DeInit+0x188>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00d      	beq.n	8009ca4 <HAL_GPIO_DeInit+0x84>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a48      	ldr	r2, [pc, #288]	; (8009dac <HAL_GPIO_DeInit+0x18c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <HAL_GPIO_DeInit+0x80>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a47      	ldr	r2, [pc, #284]	; (8009db0 <HAL_GPIO_DeInit+0x190>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d101      	bne.n	8009c9c <HAL_GPIO_DeInit+0x7c>
 8009c98:	2305      	movs	r3, #5
 8009c9a:	e00a      	b.n	8009cb2 <HAL_GPIO_DeInit+0x92>
 8009c9c:	2306      	movs	r3, #6
 8009c9e:	e008      	b.n	8009cb2 <HAL_GPIO_DeInit+0x92>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	e006      	b.n	8009cb2 <HAL_GPIO_DeInit+0x92>
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e004      	b.n	8009cb2 <HAL_GPIO_DeInit+0x92>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e002      	b.n	8009cb2 <HAL_GPIO_DeInit+0x92>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e000      	b.n	8009cb2 <HAL_GPIO_DeInit+0x92>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	69fa      	ldr	r2, [r7, #28]
 8009cb4:	f002 0203 	and.w	r2, r2, #3
 8009cb8:	0092      	lsls	r2, r2, #2
 8009cba:	4093      	lsls	r3, r2
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d132      	bne.n	8009d28 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009cc2:	4b3c      	ldr	r3, [pc, #240]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	493a      	ldr	r1, [pc, #232]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009cd0:	4b38      	ldr	r3, [pc, #224]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	43db      	mvns	r3, r3
 8009cd8:	4936      	ldr	r1, [pc, #216]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009cda:	4013      	ands	r3, r2
 8009cdc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009cde:	4b35      	ldr	r3, [pc, #212]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	43db      	mvns	r3, r3
 8009ce6:	4933      	ldr	r1, [pc, #204]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009cec:	4b31      	ldr	r3, [pc, #196]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	43db      	mvns	r3, r3
 8009cf4:	492f      	ldr	r1, [pc, #188]	; (8009db4 <HAL_GPIO_DeInit+0x194>)
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	220f      	movs	r2, #15
 8009d04:	fa02 f303 	lsl.w	r3, r2, r3
 8009d08:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009d0a:	4a23      	ldr	r2, [pc, #140]	; (8009d98 <HAL_GPIO_DeInit+0x178>)
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	089b      	lsrs	r3, r3, #2
 8009d10:	3302      	adds	r3, #2
 8009d12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	43da      	mvns	r2, r3
 8009d1a:	481f      	ldr	r0, [pc, #124]	; (8009d98 <HAL_GPIO_DeInit+0x178>)
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	089b      	lsrs	r3, r3, #2
 8009d20:	400a      	ands	r2, r1
 8009d22:	3302      	adds	r3, #2
 8009d24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	2bff      	cmp	r3, #255	; 0xff
 8009d2c:	d801      	bhi.n	8009d32 <HAL_GPIO_DeInit+0x112>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	e001      	b.n	8009d36 <HAL_GPIO_DeInit+0x116>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3304      	adds	r3, #4
 8009d36:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	2bff      	cmp	r3, #255	; 0xff
 8009d3c:	d802      	bhi.n	8009d44 <HAL_GPIO_DeInit+0x124>
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	e002      	b.n	8009d4a <HAL_GPIO_DeInit+0x12a>
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	3b08      	subs	r3, #8
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	210f      	movs	r1, #15
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	fa01 f303 	lsl.w	r3, r1, r3
 8009d58:	43db      	mvns	r3, r3
 8009d5a:	401a      	ands	r2, r3
 8009d5c:	2104      	movs	r1, #4
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	431a      	orrs	r2, r3
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	401a      	ands	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	fa22 f303 	lsr.w	r3, r2, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f47f af52 	bne.w	8009c30 <HAL_GPIO_DeInit+0x10>
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	3724      	adds	r7, #36	; 0x24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010800 	.word	0x40010800
 8009da0:	40010c00 	.word	0x40010c00
 8009da4:	40011000 	.word	0x40011000
 8009da8:	40011400 	.word	0x40011400
 8009dac:	40011800 	.word	0x40011800
 8009db0:	40011c00 	.word	0x40011c00
 8009db4:	40010400 	.word	0x40010400

08009db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	887b      	ldrh	r3, [r7, #2]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
 8009dd4:	e001      	b.n	8009dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr

08009de6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	807b      	strh	r3, [r7, #2]
 8009df2:	4613      	mov	r3, r2
 8009df4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009df6:	787b      	ldrb	r3, [r7, #1]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dfc:	887a      	ldrh	r2, [r7, #2]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009e02:	e003      	b.n	8009e0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009e04:	887b      	ldrh	r3, [r7, #2]
 8009e06:	041a      	lsls	r2, r3, #16
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	611a      	str	r2, [r3, #16]
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bc80      	pop	{r7}
 8009e14:	4770      	bx	lr

08009e16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e28:	887a      	ldrh	r2, [r7, #2]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	041a      	lsls	r2, r3, #16
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	43d9      	mvns	r1, r3
 8009e34:	887b      	ldrh	r3, [r7, #2]
 8009e36:	400b      	ands	r3, r1
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	611a      	str	r2, [r3, #16]
}
 8009e3e:	bf00      	nop
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr

08009e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e12b      	b.n	800a0b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fe fff8 	bl	8008e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2224      	movs	r2, #36	; 0x24
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0201 	bic.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009eac:	f001 fdb8 	bl	800ba20 <HAL_RCC_GetPCLK1Freq>
 8009eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	4a81      	ldr	r2, [pc, #516]	; (800a0bc <HAL_I2C_Init+0x274>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d807      	bhi.n	8009ecc <HAL_I2C_Init+0x84>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4a80      	ldr	r2, [pc, #512]	; (800a0c0 <HAL_I2C_Init+0x278>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	bf94      	ite	ls
 8009ec4:	2301      	movls	r3, #1
 8009ec6:	2300      	movhi	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	e006      	b.n	8009eda <HAL_I2C_Init+0x92>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4a7d      	ldr	r2, [pc, #500]	; (800a0c4 <HAL_I2C_Init+0x27c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	bf94      	ite	ls
 8009ed4:	2301      	movls	r3, #1
 8009ed6:	2300      	movhi	r3, #0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e0e7      	b.n	800a0b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a78      	ldr	r2, [pc, #480]	; (800a0c8 <HAL_I2C_Init+0x280>)
 8009ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eea:	0c9b      	lsrs	r3, r3, #18
 8009eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a6a      	ldr	r2, [pc, #424]	; (800a0bc <HAL_I2C_Init+0x274>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d802      	bhi.n	8009f1c <HAL_I2C_Init+0xd4>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	e009      	b.n	8009f30 <HAL_I2C_Init+0xe8>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f22:	fb02 f303 	mul.w	r3, r2, r3
 8009f26:	4a69      	ldr	r2, [pc, #420]	; (800a0cc <HAL_I2C_Init+0x284>)
 8009f28:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2c:	099b      	lsrs	r3, r3, #6
 8009f2e:	3301      	adds	r3, #1
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6812      	ldr	r2, [r2, #0]
 8009f34:	430b      	orrs	r3, r1
 8009f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	495c      	ldr	r1, [pc, #368]	; (800a0bc <HAL_I2C_Init+0x274>)
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	d819      	bhi.n	8009f84 <HAL_I2C_Init+0x13c>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	1e59      	subs	r1, r3, #1
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009f64:	400b      	ands	r3, r1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <HAL_I2C_Init+0x138>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1e59      	subs	r1, r3, #1
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f78:	3301      	adds	r3, #1
 8009f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f7e:	e051      	b.n	800a024 <HAL_I2C_Init+0x1dc>
 8009f80:	2304      	movs	r3, #4
 8009f82:	e04f      	b.n	800a024 <HAL_I2C_Init+0x1dc>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d111      	bne.n	8009fb0 <HAL_I2C_Init+0x168>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	1e58      	subs	r0, r3, #1
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6859      	ldr	r1, [r3, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	440b      	add	r3, r1
 8009f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bf0c      	ite	eq
 8009fa8:	2301      	moveq	r3, #1
 8009faa:	2300      	movne	r3, #0
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	e012      	b.n	8009fd6 <HAL_I2C_Init+0x18e>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	1e58      	subs	r0, r3, #1
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6859      	ldr	r1, [r3, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	0099      	lsls	r1, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bf0c      	ite	eq
 8009fd0:	2301      	moveq	r3, #1
 8009fd2:	2300      	movne	r3, #0
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <HAL_I2C_Init+0x196>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e022      	b.n	800a024 <HAL_I2C_Init+0x1dc>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10e      	bne.n	800a004 <HAL_I2C_Init+0x1bc>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1e58      	subs	r0, r3, #1
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6859      	ldr	r1, [r3, #4]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	440b      	add	r3, r1
 8009ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a002:	e00f      	b.n	800a024 <HAL_I2C_Init+0x1dc>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	1e58      	subs	r0, r3, #1
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6859      	ldr	r1, [r3, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	0099      	lsls	r1, r3, #2
 800a014:	440b      	add	r3, r1
 800a016:	fbb0 f3f3 	udiv	r3, r0, r3
 800a01a:	3301      	adds	r3, #1
 800a01c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a024:	6879      	ldr	r1, [r7, #4]
 800a026:	6809      	ldr	r1, [r1, #0]
 800a028:	4313      	orrs	r3, r2
 800a02a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69da      	ldr	r2, [r3, #28]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	431a      	orrs	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	6911      	ldr	r1, [r2, #16]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	68d2      	ldr	r2, [r2, #12]
 800a05e:	4311      	orrs	r1, r2
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6812      	ldr	r2, [r2, #0]
 800a064:	430b      	orrs	r3, r1
 800a066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	695a      	ldr	r2, [r3, #20]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0201 	orr.w	r2, r2, #1
 800a092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2220      	movs	r2, #32
 800a09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	000186a0 	.word	0x000186a0
 800a0c0:	001e847f 	.word	0x001e847f
 800a0c4:	003d08ff 	.word	0x003d08ff
 800a0c8:	431bde83 	.word	0x431bde83
 800a0cc:	10624dd3 	.word	0x10624dd3

0800a0d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e021      	b.n	800a126 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2224      	movs	r2, #36	; 0x24
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 0201 	bic.w	r2, r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7fe fef0 	bl	8008ee0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	461a      	mov	r2, r3
 800a13c:	460b      	mov	r3, r1
 800a13e:	817b      	strh	r3, [r7, #10]
 800a140:	4613      	mov	r3, r2
 800a142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a144:	f7ff f85e 	bl	8009204 <HAL_GetTick>
 800a148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b20      	cmp	r3, #32
 800a154:	f040 80e0 	bne.w	800a318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	2319      	movs	r3, #25
 800a15e:	2201      	movs	r2, #1
 800a160:	4970      	ldr	r1, [pc, #448]	; (800a324 <HAL_I2C_Master_Transmit+0x1f4>)
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fe5c 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a16e:	2302      	movs	r3, #2
 800a170:	e0d3      	b.n	800a31a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_I2C_Master_Transmit+0x50>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e0cc      	b.n	800a31a <HAL_I2C_Master_Transmit+0x1ea>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b01      	cmp	r3, #1
 800a194:	d007      	beq.n	800a1a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f042 0201 	orr.w	r2, r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2221      	movs	r2, #33	; 0x21
 800a1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2210      	movs	r2, #16
 800a1c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	893a      	ldrh	r2, [r7, #8]
 800a1d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4a50      	ldr	r2, [pc, #320]	; (800a328 <HAL_I2C_Master_Transmit+0x1f8>)
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a1e8:	8979      	ldrh	r1, [r7, #10]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	6a3a      	ldr	r2, [r7, #32]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fc16 	bl	800aa20 <I2C_MasterRequestWrite>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e08d      	b.n	800a31a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1fe:	2300      	movs	r3, #0
 800a200:	613b      	str	r3, [r7, #16]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	613b      	str	r3, [r7, #16]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	613b      	str	r3, [r7, #16]
 800a212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a214:	e066      	b.n	800a2e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	6a39      	ldr	r1, [r7, #32]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 ff1a 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d107      	bne.n	800a23e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a23c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e06b      	b.n	800a31a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	3b01      	subs	r3, #1
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d11b      	bne.n	800a2b8 <HAL_I2C_Master_Transmit+0x188>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a284:	2b00      	cmp	r3, #0
 800a286:	d017      	beq.n	800a2b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	781a      	ldrb	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	6a39      	ldr	r1, [r7, #32]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 ff11 	bl	800b0e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00d      	beq.n	800a2e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d107      	bne.n	800a2e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e01a      	b.n	800a31a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d194      	bne.n	800a216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	e000      	b.n	800a31a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a318:	2302      	movs	r3, #2
  }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	00100002 	.word	0x00100002
 800a328:	ffff0000 	.word	0xffff0000

0800a32c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	4603      	mov	r3, r0
 800a33c:	817b      	strh	r3, [r7, #10]
 800a33e:	460b      	mov	r3, r1
 800a340:	813b      	strh	r3, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a346:	f7fe ff5d 	bl	8009204 <HAL_GetTick>
 800a34a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b20      	cmp	r3, #32
 800a356:	f040 80d9 	bne.w	800a50c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	2319      	movs	r3, #25
 800a360:	2201      	movs	r2, #1
 800a362:	496d      	ldr	r1, [pc, #436]	; (800a518 <HAL_I2C_Mem_Write+0x1ec>)
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 fd5b 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a370:	2302      	movs	r3, #2
 800a372:	e0cc      	b.n	800a50e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <HAL_I2C_Mem_Write+0x56>
 800a37e:	2302      	movs	r3, #2
 800a380:	e0c5      	b.n	800a50e <HAL_I2C_Mem_Write+0x1e2>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b01      	cmp	r3, #1
 800a396:	d007      	beq.n	800a3a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0201 	orr.w	r2, r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2221      	movs	r2, #33	; 0x21
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2240      	movs	r2, #64	; 0x40
 800a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a3a      	ldr	r2, [r7, #32]
 800a3d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4a4d      	ldr	r2, [pc, #308]	; (800a51c <HAL_I2C_Mem_Write+0x1f0>)
 800a3e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3ea:	88f8      	ldrh	r0, [r7, #6]
 800a3ec:	893a      	ldrh	r2, [r7, #8]
 800a3ee:	8979      	ldrh	r1, [r7, #10]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 fb92 	bl	800ab24 <I2C_RequestMemoryWrite>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d052      	beq.n	800a4ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e081      	b.n	800a50e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fe20 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00d      	beq.n	800a436 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d107      	bne.n	800a432 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e06b      	b.n	800a50e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	781a      	ldrb	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a450:	3b01      	subs	r3, #1
 800a452:	b29a      	uxth	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	3b01      	subs	r3, #1
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b04      	cmp	r3, #4
 800a472:	d11b      	bne.n	800a4ac <HAL_I2C_Mem_Write+0x180>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d017      	beq.n	800a4ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	3b01      	subs	r3, #1
 800a498:	b29a      	uxth	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1aa      	bne.n	800a40a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fe13 	bl	800b0e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00d      	beq.n	800a4e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d107      	bne.n	800a4dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e016      	b.n	800a50e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	e000      	b.n	800a50e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a50c:	2302      	movs	r3, #2
  }
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	00100002 	.word	0x00100002
 800a51c:	ffff0000 	.word	0xffff0000

0800a520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08c      	sub	sp, #48	; 0x30
 800a524:	af02      	add	r7, sp, #8
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	461a      	mov	r2, r3
 800a52e:	4603      	mov	r3, r0
 800a530:	817b      	strh	r3, [r7, #10]
 800a532:	460b      	mov	r3, r1
 800a534:	813b      	strh	r3, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a53e:	f7fe fe61 	bl	8009204 <HAL_GetTick>
 800a542:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	f040 8244 	bne.w	800a9da <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2319      	movs	r3, #25
 800a558:	2201      	movs	r2, #1
 800a55a:	4982      	ldr	r1, [pc, #520]	; (800a764 <HAL_I2C_Mem_Read+0x244>)
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 fc5f 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a568:	2302      	movs	r3, #2
 800a56a:	e237      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a572:	2b01      	cmp	r3, #1
 800a574:	d101      	bne.n	800a57a <HAL_I2C_Mem_Read+0x5a>
 800a576:	2302      	movs	r3, #2
 800a578:	e230      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d007      	beq.n	800a5a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2222      	movs	r2, #34	; 0x22
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2240      	movs	r2, #64	; 0x40
 800a5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a5d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4a62      	ldr	r2, [pc, #392]	; (800a768 <HAL_I2C_Mem_Read+0x248>)
 800a5e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a5e2:	88f8      	ldrh	r0, [r7, #6]
 800a5e4:	893a      	ldrh	r2, [r7, #8]
 800a5e6:	8979      	ldrh	r1, [r7, #10]
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fb2c 	bl	800ac50 <I2C_RequestMemoryRead>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e1ec      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a606:	2b00      	cmp	r3, #0
 800a608:	d113      	bne.n	800a632 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	61fb      	str	r3, [r7, #28]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	61fb      	str	r3, [r7, #28]
 800a61e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	e1c0      	b.n	800a9b4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a636:	2b01      	cmp	r3, #1
 800a638:	d11e      	bne.n	800a678 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a648:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a64a:	b672      	cpsid	i
}
 800a64c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a64e:	2300      	movs	r3, #0
 800a650:	61bb      	str	r3, [r7, #24]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a674:	b662      	cpsie	i
}
 800a676:	e035      	b.n	800a6e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d11e      	bne.n	800a6be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a68e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a690:	b672      	cpsid	i
}
 800a692:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a694:	2300      	movs	r3, #0
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6ba:	b662      	cpsie	i
}
 800a6bc:	e012      	b.n	800a6e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a6cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	613b      	str	r3, [r7, #16]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a6e4:	e166      	b.n	800a9b4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	f200 811f 	bhi.w	800a92e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d123      	bne.n	800a740 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 fd39 	bl	800b174 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e167      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	691a      	ldr	r2, [r3, #16]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a734:	b29b      	uxth	r3, r3
 800a736:	3b01      	subs	r3, #1
 800a738:	b29a      	uxth	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a73e:	e139      	b.n	800a9b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a744:	2b02      	cmp	r3, #2
 800a746:	d152      	bne.n	800a7ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	2200      	movs	r2, #0
 800a750:	4906      	ldr	r1, [pc, #24]	; (800a76c <HAL_I2C_Mem_Read+0x24c>)
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fb64 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d008      	beq.n	800a770 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e13c      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
 800a762:	bf00      	nop
 800a764:	00100002 	.word	0x00100002
 800a768:	ffff0000 	.word	0xffff0000
 800a76c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a770:	b672      	cpsid	i
}
 800a772:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691a      	ldr	r2, [r3, #16]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7b6:	b662      	cpsie	i
}
 800a7b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	691a      	ldr	r2, [r3, #16]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	b2d2      	uxtb	r2, r2
 800a7c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7ec:	e0e2      	b.n	800a9b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	497b      	ldr	r1, [pc, #492]	; (800a9e4 <HAL_I2C_Mem_Read+0x4c4>)
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fb11 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e0e9      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a818:	b672      	cpsid	i
}
 800a81a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a838:	3b01      	subs	r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a844:	b29b      	uxth	r3, r3
 800a846:	3b01      	subs	r3, #1
 800a848:	b29a      	uxth	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a84e:	4b66      	ldr	r3, [pc, #408]	; (800a9e8 <HAL_I2C_Mem_Read+0x4c8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	08db      	lsrs	r3, r3, #3
 800a854:	4a65      	ldr	r2, [pc, #404]	; (800a9ec <HAL_I2C_Mem_Read+0x4cc>)
 800a856:	fba2 2303 	umull	r2, r3, r2, r3
 800a85a:	0a1a      	lsrs	r2, r3, #8
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	00da      	lsls	r2, r3, #3
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d118      	bne.n	800a8a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88e:	f043 0220 	orr.w	r2, r3, #32
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a896:	b662      	cpsie	i
}
 800a898:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e09a      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	d1d9      	bne.n	800a868 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a8f6:	b662      	cpsie	i
}
 800a8f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691a      	ldr	r2, [r3, #16]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	b2d2      	uxtb	r2, r2
 800a906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a922:	b29b      	uxth	r3, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a92c:	e042      	b.n	800a9b4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 fc1e 	bl	800b174 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e04c      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	691a      	ldr	r2, [r3, #16]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	b2d2      	uxtb	r2, r2
 800a94e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95e:	3b01      	subs	r3, #1
 800a960:	b29a      	uxth	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	f003 0304 	and.w	r3, r3, #4
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d118      	bne.n	800a9b4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	b2d2      	uxtb	r2, r2
 800a98e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f47f ae94 	bne.w	800a6e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e000      	b.n	800a9dc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a9da:	2302      	movs	r3, #2
  }
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3728      	adds	r7, #40	; 0x28
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	00010004 	.word	0x00010004
 800a9e8:	200009b8 	.word	0x200009b8
 800a9ec:	14f8b589 	.word	0x14f8b589

0800a9f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9fe:	b2db      	uxtb	r3, r3
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr

0800aa0a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bc80      	pop	{r7}
 800aa1e:	4770      	bx	lr

0800aa20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	607a      	str	r2, [r7, #4]
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d006      	beq.n	800aa4a <I2C_MasterRequestWrite+0x2a>
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d003      	beq.n	800aa4a <I2C_MasterRequestWrite+0x2a>
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa48:	d108      	bne.n	800aa5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	e00b      	b.n	800aa74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa60:	2b12      	cmp	r3, #18
 800aa62:	d107      	bne.n	800aa74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 f9cd 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00d      	beq.n	800aaa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9a:	d103      	bne.n	800aaa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e035      	b.n	800ab14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab0:	d108      	bne.n	800aac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aab2:	897b      	ldrh	r3, [r7, #10]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	461a      	mov	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aac0:	611a      	str	r2, [r3, #16]
 800aac2:	e01b      	b.n	800aafc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aac4:	897b      	ldrh	r3, [r7, #10]
 800aac6:	11db      	asrs	r3, r3, #7
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	f003 0306 	and.w	r3, r3, #6
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	f063 030f 	orn	r3, r3, #15
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	490e      	ldr	r1, [pc, #56]	; (800ab1c <I2C_MasterRequestWrite+0xfc>)
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 fa16 	bl	800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e010      	b.n	800ab14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800aaf2:	897b      	ldrh	r3, [r7, #10]
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	4907      	ldr	r1, [pc, #28]	; (800ab20 <I2C_MasterRequestWrite+0x100>)
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fa06 	bl	800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e000      	b.n	800ab14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	00010008 	.word	0x00010008
 800ab20:	00010002 	.word	0x00010002

0800ab24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af02      	add	r7, sp, #8
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	4611      	mov	r1, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	817b      	strh	r3, [r7, #10]
 800ab36:	460b      	mov	r3, r1
 800ab38:	813b      	strh	r3, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 f960 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00d      	beq.n	800ab82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab74:	d103      	bne.n	800ab7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e05f      	b.n	800ac42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab82:	897b      	ldrh	r3, [r7, #10]
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	6a3a      	ldr	r2, [r7, #32]
 800ab96:	492d      	ldr	r1, [pc, #180]	; (800ac4c <I2C_RequestMemoryWrite+0x128>)
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 f9bb 	bl	800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e04c      	b.n	800ac42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc0:	6a39      	ldr	r1, [r7, #32]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fa46 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00d      	beq.n	800abea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d107      	bne.n	800abe6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e02b      	b.n	800ac42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d105      	bne.n	800abfc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abf0:	893b      	ldrh	r3, [r7, #8]
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	611a      	str	r2, [r3, #16]
 800abfa:	e021      	b.n	800ac40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800abfc:	893b      	ldrh	r3, [r7, #8]
 800abfe:	0a1b      	lsrs	r3, r3, #8
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0c:	6a39      	ldr	r1, [r7, #32]
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fa20 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00d      	beq.n	800ac36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d107      	bne.n	800ac32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e005      	b.n	800ac42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac36:	893b      	ldrh	r3, [r7, #8]
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	00010002 	.word	0x00010002

0800ac50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af02      	add	r7, sp, #8
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	4608      	mov	r0, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	4603      	mov	r3, r0
 800ac60:	817b      	strh	r3, [r7, #10]
 800ac62:	460b      	mov	r3, r1
 800ac64:	813b      	strh	r3, [r7, #8]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f000 f8c2 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00d      	beq.n	800acbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acb0:	d103      	bne.n	800acba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e0aa      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acbe:	897b      	ldrh	r3, [r7, #10]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	461a      	mov	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800accc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	6a3a      	ldr	r2, [r7, #32]
 800acd2:	4952      	ldr	r1, [pc, #328]	; (800ae1c <I2C_RequestMemoryRead+0x1cc>)
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 f91d 	bl	800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e097      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfc:	6a39      	ldr	r1, [r7, #32]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 f9a8 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00d      	beq.n	800ad26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d107      	bne.n	800ad22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e076      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d105      	bne.n	800ad38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad2c:	893b      	ldrh	r3, [r7, #8]
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	611a      	str	r2, [r3, #16]
 800ad36:	e021      	b.n	800ad7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad38:	893b      	ldrh	r3, [r7, #8]
 800ad3a:	0a1b      	lsrs	r3, r3, #8
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad48:	6a39      	ldr	r1, [r7, #32]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f982 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00d      	beq.n	800ad72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d107      	bne.n	800ad6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e050      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad72:	893b      	ldrh	r3, [r7, #8]
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7e:	6a39      	ldr	r1, [r7, #32]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f967 	bl	800b054 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b04      	cmp	r3, #4
 800ad92:	d107      	bne.n	800ada4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e035      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f82b 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00d      	beq.n	800adec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adde:	d103      	bne.n	800ade8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ade6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e013      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800adec:	897b      	ldrh	r3, [r7, #10]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	f043 0301 	orr.w	r3, r3, #1
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	6a3a      	ldr	r2, [r7, #32]
 800ae00:	4906      	ldr	r1, [pc, #24]	; (800ae1c <I2C_RequestMemoryRead+0x1cc>)
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 f886 	bl	800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	00010002 	.word	0x00010002

0800ae20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae30:	e048      	b.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d044      	beq.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae3a:	f7fe f9e3 	bl	8009204 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d302      	bcc.n	800ae50 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d139      	bne.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	0c1b      	lsrs	r3, r3, #16
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d10d      	bne.n	800ae76 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	43da      	mvns	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	4013      	ands	r3, r2
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2301      	moveq	r3, #1
 800ae6e:	2300      	movne	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	e00c      	b.n	800ae90 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	43da      	mvns	r2, r3
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	4013      	ands	r3, r2
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	bf0c      	ite	eq
 800ae88:	2301      	moveq	r3, #1
 800ae8a:	2300      	movne	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	461a      	mov	r2, r3
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d116      	bne.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb0:	f043 0220 	orr.w	r2, r3, #32
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e023      	b.n	800af0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	0c1b      	lsrs	r3, r3, #16
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10d      	bne.n	800aeea <I2C_WaitOnFlagUntilTimeout+0xca>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	43da      	mvns	r2, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	4013      	ands	r3, r2
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bf0c      	ite	eq
 800aee0:	2301      	moveq	r3, #1
 800aee2:	2300      	movne	r3, #0
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	461a      	mov	r2, r3
 800aee8:	e00c      	b.n	800af04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	43da      	mvns	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4013      	ands	r3, r2
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bf0c      	ite	eq
 800aefc:	2301      	moveq	r3, #1
 800aefe:	2300      	movne	r3, #0
 800af00:	b2db      	uxtb	r3, r3
 800af02:	461a      	mov	r2, r3
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	429a      	cmp	r2, r3
 800af08:	d093      	beq.n	800ae32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af22:	e071      	b.n	800b008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af32:	d123      	bne.n	800af7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2220      	movs	r2, #32
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	f043 0204 	orr.w	r2, r3, #4
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e067      	b.n	800b04c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af82:	d041      	beq.n	800b008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af84:	f7fe f93e 	bl	8009204 <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d302      	bcc.n	800af9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d136      	bne.n	800b008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	0c1b      	lsrs	r3, r3, #16
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d10c      	bne.n	800afbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	43da      	mvns	r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4013      	ands	r3, r2
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bf14      	ite	ne
 800afb6:	2301      	movne	r3, #1
 800afb8:	2300      	moveq	r3, #0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	e00b      	b.n	800afd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	43da      	mvns	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	4013      	ands	r3, r2
 800afca:	b29b      	uxth	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bf14      	ite	ne
 800afd0:	2301      	movne	r3, #1
 800afd2:	2300      	moveq	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d016      	beq.n	800b008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	f043 0220 	orr.w	r2, r3, #32
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e021      	b.n	800b04c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	0c1b      	lsrs	r3, r3, #16
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d10c      	bne.n	800b02c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	43da      	mvns	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	4013      	ands	r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	bf14      	ite	ne
 800b024:	2301      	movne	r3, #1
 800b026:	2300      	moveq	r3, #0
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	e00b      	b.n	800b044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	43da      	mvns	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	4013      	ands	r3, r2
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bf14      	ite	ne
 800b03e:	2301      	movne	r3, #1
 800b040:	2300      	moveq	r3, #0
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	f47f af6d 	bne.w	800af24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b060:	e034      	b.n	800b0cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 f8e3 	bl	800b22e <I2C_IsAcknowledgeFailed>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e034      	b.n	800b0dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d028      	beq.n	800b0cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b07a:	f7fe f8c3 	bl	8009204 <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	429a      	cmp	r2, r3
 800b088:	d302      	bcc.n	800b090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d11d      	bne.n	800b0cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09a:	2b80      	cmp	r3, #128	; 0x80
 800b09c:	d016      	beq.n	800b0cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b8:	f043 0220 	orr.w	r2, r3, #32
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e007      	b.n	800b0dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d6:	2b80      	cmp	r3, #128	; 0x80
 800b0d8:	d1c3      	bne.n	800b062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0f0:	e034      	b.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 f89b 	bl	800b22e <I2C_IsAcknowledgeFailed>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e034      	b.n	800b16c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b108:	d028      	beq.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b10a:	f7fe f87b 	bl	8009204 <HAL_GetTick>
 800b10e:	4602      	mov	r2, r0
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	429a      	cmp	r2, r3
 800b118:	d302      	bcc.n	800b120 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d11d      	bne.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	f003 0304 	and.w	r3, r3, #4
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	d016      	beq.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2220      	movs	r2, #32
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b148:	f043 0220 	orr.w	r2, r3, #32
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e007      	b.n	800b16c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	f003 0304 	and.w	r3, r3, #4
 800b166:	2b04      	cmp	r3, #4
 800b168:	d1c3      	bne.n	800b0f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b180:	e049      	b.n	800b216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	f003 0310 	and.w	r3, r3, #16
 800b18c:	2b10      	cmp	r3, #16
 800b18e:	d119      	bne.n	800b1c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f06f 0210 	mvn.w	r2, #16
 800b198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e030      	b.n	800b226 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1c4:	f7fe f81e 	bl	8009204 <HAL_GetTick>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d302      	bcc.n	800b1da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d11d      	bne.n	800b216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e4:	2b40      	cmp	r3, #64	; 0x40
 800b1e6:	d016      	beq.n	800b216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b202:	f043 0220 	orr.w	r2, r3, #32
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e007      	b.n	800b226 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b220:	2b40      	cmp	r3, #64	; 0x40
 800b222:	d1ae      	bne.n	800b182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b244:	d11b      	bne.n	800b27e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b24e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2220      	movs	r2, #32
 800b25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26a:	f043 0204 	orr.w	r2, r3, #4
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e000      	b.n	800b280 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr
	...

0800b28c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e272      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 8087 	beq.w	800b3ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b2ac:	4b92      	ldr	r3, [pc, #584]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	f003 030c 	and.w	r3, r3, #12
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d00c      	beq.n	800b2d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b2b8:	4b8f      	ldr	r3, [pc, #572]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f003 030c 	and.w	r3, r3, #12
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d112      	bne.n	800b2ea <HAL_RCC_OscConfig+0x5e>
 800b2c4:	4b8c      	ldr	r3, [pc, #560]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d0:	d10b      	bne.n	800b2ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2d2:	4b89      	ldr	r3, [pc, #548]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d06c      	beq.n	800b3b8 <HAL_RCC_OscConfig+0x12c>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d168      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e24c      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2f2:	d106      	bne.n	800b302 <HAL_RCC_OscConfig+0x76>
 800b2f4:	4b80      	ldr	r3, [pc, #512]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a7f      	ldr	r2, [pc, #508]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b2fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	e02e      	b.n	800b360 <HAL_RCC_OscConfig+0xd4>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10c      	bne.n	800b324 <HAL_RCC_OscConfig+0x98>
 800b30a:	4b7b      	ldr	r3, [pc, #492]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a7a      	ldr	r2, [pc, #488]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	4b78      	ldr	r3, [pc, #480]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a77      	ldr	r2, [pc, #476]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b31c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	e01d      	b.n	800b360 <HAL_RCC_OscConfig+0xd4>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b32c:	d10c      	bne.n	800b348 <HAL_RCC_OscConfig+0xbc>
 800b32e:	4b72      	ldr	r3, [pc, #456]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a71      	ldr	r2, [pc, #452]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	4b6f      	ldr	r3, [pc, #444]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a6e      	ldr	r2, [pc, #440]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b344:	6013      	str	r3, [r2, #0]
 800b346:	e00b      	b.n	800b360 <HAL_RCC_OscConfig+0xd4>
 800b348:	4b6b      	ldr	r3, [pc, #428]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a6a      	ldr	r2, [pc, #424]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b34e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	4b68      	ldr	r3, [pc, #416]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a67      	ldr	r2, [pc, #412]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b35a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b35e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d013      	beq.n	800b390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b368:	f7fd ff4c 	bl	8009204 <HAL_GetTick>
 800b36c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b36e:	e008      	b.n	800b382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b370:	f7fd ff48 	bl	8009204 <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	2b64      	cmp	r3, #100	; 0x64
 800b37c:	d901      	bls.n	800b382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e200      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b382:	4b5d      	ldr	r3, [pc, #372]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0f0      	beq.n	800b370 <HAL_RCC_OscConfig+0xe4>
 800b38e:	e014      	b.n	800b3ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b390:	f7fd ff38 	bl	8009204 <HAL_GetTick>
 800b394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b396:	e008      	b.n	800b3aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b398:	f7fd ff34 	bl	8009204 <HAL_GetTick>
 800b39c:	4602      	mov	r2, r0
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b64      	cmp	r3, #100	; 0x64
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e1ec      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3aa:	4b53      	ldr	r3, [pc, #332]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1f0      	bne.n	800b398 <HAL_RCC_OscConfig+0x10c>
 800b3b6:	e000      	b.n	800b3ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d063      	beq.n	800b48e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b3c6:	4b4c      	ldr	r3, [pc, #304]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f003 030c 	and.w	r3, r3, #12
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b3d2:	4b49      	ldr	r3, [pc, #292]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f003 030c 	and.w	r3, r3, #12
 800b3da:	2b08      	cmp	r3, #8
 800b3dc:	d11c      	bne.n	800b418 <HAL_RCC_OscConfig+0x18c>
 800b3de:	4b46      	ldr	r3, [pc, #280]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d116      	bne.n	800b418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3ea:	4b43      	ldr	r3, [pc, #268]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 0302 	and.w	r3, r3, #2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d005      	beq.n	800b402 <HAL_RCC_OscConfig+0x176>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d001      	beq.n	800b402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e1c0      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b402:	4b3d      	ldr	r3, [pc, #244]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	4939      	ldr	r1, [pc, #228]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b412:	4313      	orrs	r3, r2
 800b414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b416:	e03a      	b.n	800b48e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d020      	beq.n	800b462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b420:	4b36      	ldr	r3, [pc, #216]	; (800b4fc <HAL_RCC_OscConfig+0x270>)
 800b422:	2201      	movs	r2, #1
 800b424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b426:	f7fd feed 	bl	8009204 <HAL_GetTick>
 800b42a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b42c:	e008      	b.n	800b440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b42e:	f7fd fee9 	bl	8009204 <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d901      	bls.n	800b440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e1a1      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b440:	4b2d      	ldr	r3, [pc, #180]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0302 	and.w	r3, r3, #2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d0f0      	beq.n	800b42e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b44c:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	4927      	ldr	r1, [pc, #156]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	600b      	str	r3, [r1, #0]
 800b460:	e015      	b.n	800b48e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b462:	4b26      	ldr	r3, [pc, #152]	; (800b4fc <HAL_RCC_OscConfig+0x270>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b468:	f7fd fecc 	bl	8009204 <HAL_GetTick>
 800b46c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b46e:	e008      	b.n	800b482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b470:	f7fd fec8 	bl	8009204 <HAL_GetTick>
 800b474:	4602      	mov	r2, r0
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d901      	bls.n	800b482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b47e:	2303      	movs	r3, #3
 800b480:	e180      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b482:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f0      	bne.n	800b470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0308 	and.w	r3, r3, #8
 800b496:	2b00      	cmp	r3, #0
 800b498:	d03a      	beq.n	800b510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d019      	beq.n	800b4d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4a2:	4b17      	ldr	r3, [pc, #92]	; (800b500 <HAL_RCC_OscConfig+0x274>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4a8:	f7fd feac 	bl	8009204 <HAL_GetTick>
 800b4ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4b0:	f7fd fea8 	bl	8009204 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e160      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4c2:	4b0d      	ldr	r3, [pc, #52]	; (800b4f8 <HAL_RCC_OscConfig+0x26c>)
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0f0      	beq.n	800b4b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	f000 face 	bl	800ba70 <RCC_Delay>
 800b4d4:	e01c      	b.n	800b510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <HAL_RCC_OscConfig+0x274>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4dc:	f7fd fe92 	bl	8009204 <HAL_GetTick>
 800b4e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4e2:	e00f      	b.n	800b504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4e4:	f7fd fe8e 	bl	8009204 <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d908      	bls.n	800b504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e146      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
 800b4f6:	bf00      	nop
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	42420000 	.word	0x42420000
 800b500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b504:	4b92      	ldr	r3, [pc, #584]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	f003 0302 	and.w	r3, r3, #2
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1e9      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 80a6 	beq.w	800b66a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b51e:	2300      	movs	r3, #0
 800b520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b522:	4b8b      	ldr	r3, [pc, #556]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10d      	bne.n	800b54a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b52e:	4b88      	ldr	r3, [pc, #544]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	4a87      	ldr	r2, [pc, #540]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b538:	61d3      	str	r3, [r2, #28]
 800b53a:	4b85      	ldr	r3, [pc, #532]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b542:	60bb      	str	r3, [r7, #8]
 800b544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b546:	2301      	movs	r3, #1
 800b548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b54a:	4b82      	ldr	r3, [pc, #520]	; (800b754 <HAL_RCC_OscConfig+0x4c8>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b552:	2b00      	cmp	r3, #0
 800b554:	d118      	bne.n	800b588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b556:	4b7f      	ldr	r3, [pc, #508]	; (800b754 <HAL_RCC_OscConfig+0x4c8>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a7e      	ldr	r2, [pc, #504]	; (800b754 <HAL_RCC_OscConfig+0x4c8>)
 800b55c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b562:	f7fd fe4f 	bl	8009204 <HAL_GetTick>
 800b566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b568:	e008      	b.n	800b57c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b56a:	f7fd fe4b 	bl	8009204 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	2b64      	cmp	r3, #100	; 0x64
 800b576:	d901      	bls.n	800b57c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e103      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b57c:	4b75      	ldr	r3, [pc, #468]	; (800b754 <HAL_RCC_OscConfig+0x4c8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b584:	2b00      	cmp	r3, #0
 800b586:	d0f0      	beq.n	800b56a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d106      	bne.n	800b59e <HAL_RCC_OscConfig+0x312>
 800b590:	4b6f      	ldr	r3, [pc, #444]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	4a6e      	ldr	r2, [pc, #440]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	6213      	str	r3, [r2, #32]
 800b59c:	e02d      	b.n	800b5fa <HAL_RCC_OscConfig+0x36e>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10c      	bne.n	800b5c0 <HAL_RCC_OscConfig+0x334>
 800b5a6:	4b6a      	ldr	r3, [pc, #424]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	4a69      	ldr	r2, [pc, #420]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5ac:	f023 0301 	bic.w	r3, r3, #1
 800b5b0:	6213      	str	r3, [r2, #32]
 800b5b2:	4b67      	ldr	r3, [pc, #412]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	4a66      	ldr	r2, [pc, #408]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5b8:	f023 0304 	bic.w	r3, r3, #4
 800b5bc:	6213      	str	r3, [r2, #32]
 800b5be:	e01c      	b.n	800b5fa <HAL_RCC_OscConfig+0x36e>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	2b05      	cmp	r3, #5
 800b5c6:	d10c      	bne.n	800b5e2 <HAL_RCC_OscConfig+0x356>
 800b5c8:	4b61      	ldr	r3, [pc, #388]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	4a60      	ldr	r2, [pc, #384]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5ce:	f043 0304 	orr.w	r3, r3, #4
 800b5d2:	6213      	str	r3, [r2, #32]
 800b5d4:	4b5e      	ldr	r3, [pc, #376]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	4a5d      	ldr	r2, [pc, #372]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5da:	f043 0301 	orr.w	r3, r3, #1
 800b5de:	6213      	str	r3, [r2, #32]
 800b5e0:	e00b      	b.n	800b5fa <HAL_RCC_OscConfig+0x36e>
 800b5e2:	4b5b      	ldr	r3, [pc, #364]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	4a5a      	ldr	r2, [pc, #360]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5e8:	f023 0301 	bic.w	r3, r3, #1
 800b5ec:	6213      	str	r3, [r2, #32]
 800b5ee:	4b58      	ldr	r3, [pc, #352]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	4a57      	ldr	r2, [pc, #348]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b5f4:	f023 0304 	bic.w	r3, r3, #4
 800b5f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d015      	beq.n	800b62e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b602:	f7fd fdff 	bl	8009204 <HAL_GetTick>
 800b606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b608:	e00a      	b.n	800b620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b60a:	f7fd fdfb 	bl	8009204 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	f241 3288 	movw	r2, #5000	; 0x1388
 800b618:	4293      	cmp	r3, r2
 800b61a:	d901      	bls.n	800b620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e0b1      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b620:	4b4b      	ldr	r3, [pc, #300]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0ee      	beq.n	800b60a <HAL_RCC_OscConfig+0x37e>
 800b62c:	e014      	b.n	800b658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b62e:	f7fd fde9 	bl	8009204 <HAL_GetTick>
 800b632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b634:	e00a      	b.n	800b64c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b636:	f7fd fde5 	bl	8009204 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	f241 3288 	movw	r2, #5000	; 0x1388
 800b644:	4293      	cmp	r3, r2
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e09b      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b64c:	4b40      	ldr	r3, [pc, #256]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b64e:	6a1b      	ldr	r3, [r3, #32]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1ee      	bne.n	800b636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d105      	bne.n	800b66a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b65e:	4b3c      	ldr	r3, [pc, #240]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	4a3b      	ldr	r2, [pc, #236]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 8087 	beq.w	800b782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b674:	4b36      	ldr	r3, [pc, #216]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f003 030c 	and.w	r3, r3, #12
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d061      	beq.n	800b744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d146      	bne.n	800b716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b688:	4b33      	ldr	r3, [pc, #204]	; (800b758 <HAL_RCC_OscConfig+0x4cc>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b68e:	f7fd fdb9 	bl	8009204 <HAL_GetTick>
 800b692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b694:	e008      	b.n	800b6a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b696:	f7fd fdb5 	bl	8009204 <HAL_GetTick>
 800b69a:	4602      	mov	r2, r0
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d901      	bls.n	800b6a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e06d      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b6a8:	4b29      	ldr	r3, [pc, #164]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f0      	bne.n	800b696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6bc:	d108      	bne.n	800b6d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b6be:	4b24      	ldr	r3, [pc, #144]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	4921      	ldr	r1, [pc, #132]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b6d0:	4b1f      	ldr	r3, [pc, #124]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a19      	ldr	r1, [r3, #32]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	491b      	ldr	r1, [pc, #108]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6e8:	4b1b      	ldr	r3, [pc, #108]	; (800b758 <HAL_RCC_OscConfig+0x4cc>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6ee:	f7fd fd89 	bl	8009204 <HAL_GetTick>
 800b6f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b6f4:	e008      	b.n	800b708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6f6:	f7fd fd85 	bl	8009204 <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	d901      	bls.n	800b708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e03d      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b708:	4b11      	ldr	r3, [pc, #68]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0f0      	beq.n	800b6f6 <HAL_RCC_OscConfig+0x46a>
 800b714:	e035      	b.n	800b782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b716:	4b10      	ldr	r3, [pc, #64]	; (800b758 <HAL_RCC_OscConfig+0x4cc>)
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b71c:	f7fd fd72 	bl	8009204 <HAL_GetTick>
 800b720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b722:	e008      	b.n	800b736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b724:	f7fd fd6e 	bl	8009204 <HAL_GetTick>
 800b728:	4602      	mov	r2, r0
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d901      	bls.n	800b736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e026      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <HAL_RCC_OscConfig+0x4c4>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1f0      	bne.n	800b724 <HAL_RCC_OscConfig+0x498>
 800b742:	e01e      	b.n	800b782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d107      	bne.n	800b75c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e019      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
 800b750:	40021000 	.word	0x40021000
 800b754:	40007000 	.word	0x40007000
 800b758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b75c:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <HAL_RCC_OscConfig+0x500>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d106      	bne.n	800b77e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d001      	beq.n	800b782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e000      	b.n	800b784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	40021000 	.word	0x40021000

0800b790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e0d0      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7a4:	4b6a      	ldr	r3, [pc, #424]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0307 	and.w	r3, r3, #7
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d910      	bls.n	800b7d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7b2:	4b67      	ldr	r3, [pc, #412]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f023 0207 	bic.w	r2, r3, #7
 800b7ba:	4965      	ldr	r1, [pc, #404]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7c2:	4b63      	ldr	r3, [pc, #396]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d001      	beq.n	800b7d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e0b8      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d020      	beq.n	800b822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7ec:	4b59      	ldr	r3, [pc, #356]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	4a58      	ldr	r2, [pc, #352]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b7f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b7f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d005      	beq.n	800b810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b804:	4b53      	ldr	r3, [pc, #332]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	4a52      	ldr	r2, [pc, #328]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b80a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b80e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b810:	4b50      	ldr	r3, [pc, #320]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	494d      	ldr	r1, [pc, #308]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d040      	beq.n	800b8b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d107      	bne.n	800b846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b836:	4b47      	ldr	r3, [pc, #284]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d115      	bne.n	800b86e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e07f      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d107      	bne.n	800b85e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b84e:	4b41      	ldr	r3, [pc, #260]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d109      	bne.n	800b86e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e073      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b85e:	4b3d      	ldr	r3, [pc, #244]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 0302 	and.w	r3, r3, #2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e06b      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b86e:	4b39      	ldr	r3, [pc, #228]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f023 0203 	bic.w	r2, r3, #3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	4936      	ldr	r1, [pc, #216]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b880:	f7fd fcc0 	bl	8009204 <HAL_GetTick>
 800b884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b886:	e00a      	b.n	800b89e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b888:	f7fd fcbc 	bl	8009204 <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	f241 3288 	movw	r2, #5000	; 0x1388
 800b896:	4293      	cmp	r3, r2
 800b898:	d901      	bls.n	800b89e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b89a:	2303      	movs	r3, #3
 800b89c:	e053      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b89e:	4b2d      	ldr	r3, [pc, #180]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f003 020c 	and.w	r2, r3, #12
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d1eb      	bne.n	800b888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8b0:	4b27      	ldr	r3, [pc, #156]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	683a      	ldr	r2, [r7, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d210      	bcs.n	800b8e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8be:	4b24      	ldr	r3, [pc, #144]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f023 0207 	bic.w	r2, r3, #7
 800b8c6:	4922      	ldr	r1, [pc, #136]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ce:	4b20      	ldr	r3, [pc, #128]	; (800b950 <HAL_RCC_ClockConfig+0x1c0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d001      	beq.n	800b8e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e032      	b.n	800b946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0304 	and.w	r3, r3, #4
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d008      	beq.n	800b8fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b8ec:	4b19      	ldr	r3, [pc, #100]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	4916      	ldr	r1, [pc, #88]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0308 	and.w	r3, r3, #8
 800b906:	2b00      	cmp	r3, #0
 800b908:	d009      	beq.n	800b91e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b90a:	4b12      	ldr	r3, [pc, #72]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	490e      	ldr	r1, [pc, #56]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b91a:	4313      	orrs	r3, r2
 800b91c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b91e:	f000 f821 	bl	800b964 <HAL_RCC_GetSysClockFreq>
 800b922:	4602      	mov	r2, r0
 800b924:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <HAL_RCC_ClockConfig+0x1c4>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	091b      	lsrs	r3, r3, #4
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	490a      	ldr	r1, [pc, #40]	; (800b958 <HAL_RCC_ClockConfig+0x1c8>)
 800b930:	5ccb      	ldrb	r3, [r1, r3]
 800b932:	fa22 f303 	lsr.w	r3, r2, r3
 800b936:	4a09      	ldr	r2, [pc, #36]	; (800b95c <HAL_RCC_ClockConfig+0x1cc>)
 800b938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <HAL_RCC_ClockConfig+0x1d0>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fd fc1e 	bl	8009180 <HAL_InitTick>

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	40022000 	.word	0x40022000
 800b954:	40021000 	.word	0x40021000
 800b958:	0800e740 	.word	0x0800e740
 800b95c:	200009b8 	.word	0x200009b8
 800b960:	200009bc 	.word	0x200009bc

0800b964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	2300      	movs	r3, #0
 800b970:	60bb      	str	r3, [r7, #8]
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	2300      	movs	r3, #0
 800b978:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b97a:	2300      	movs	r3, #0
 800b97c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b97e:	4b1e      	ldr	r3, [pc, #120]	; (800b9f8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f003 030c 	and.w	r3, r3, #12
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d002      	beq.n	800b994 <HAL_RCC_GetSysClockFreq+0x30>
 800b98e:	2b08      	cmp	r3, #8
 800b990:	d003      	beq.n	800b99a <HAL_RCC_GetSysClockFreq+0x36>
 800b992:	e027      	b.n	800b9e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b994:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <HAL_RCC_GetSysClockFreq+0x98>)
 800b996:	613b      	str	r3, [r7, #16]
      break;
 800b998:	e027      	b.n	800b9ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	0c9b      	lsrs	r3, r3, #18
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	4a17      	ldr	r2, [pc, #92]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b9a4:	5cd3      	ldrb	r3, [r2, r3]
 800b9a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d010      	beq.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b9b2:	4b11      	ldr	r3, [pc, #68]	; (800b9f8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	0c5b      	lsrs	r3, r3, #17
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	4a11      	ldr	r2, [pc, #68]	; (800ba04 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b9be:	5cd3      	ldrb	r3, [r2, r3]
 800b9c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a0d      	ldr	r2, [pc, #52]	; (800b9fc <HAL_RCC_GetSysClockFreq+0x98>)
 800b9c6:	fb03 f202 	mul.w	r2, r3, r2
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e004      	b.n	800b9de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a0c      	ldr	r2, [pc, #48]	; (800ba08 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b9d8:	fb02 f303 	mul.w	r3, r2, r3
 800b9dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	613b      	str	r3, [r7, #16]
      break;
 800b9e2:	e002      	b.n	800b9ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b9e4:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <HAL_RCC_GetSysClockFreq+0x98>)
 800b9e6:	613b      	str	r3, [r7, #16]
      break;
 800b9e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9ea:	693b      	ldr	r3, [r7, #16]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40021000 	.word	0x40021000
 800b9fc:	007a1200 	.word	0x007a1200
 800ba00:	0800e758 	.word	0x0800e758
 800ba04:	0800e768 	.word	0x0800e768
 800ba08:	003d0900 	.word	0x003d0900

0800ba0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba10:	4b02      	ldr	r3, [pc, #8]	; (800ba1c <HAL_RCC_GetHCLKFreq+0x10>)
 800ba12:	681b      	ldr	r3, [r3, #0]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bc80      	pop	{r7}
 800ba1a:	4770      	bx	lr
 800ba1c:	200009b8 	.word	0x200009b8

0800ba20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba24:	f7ff fff2 	bl	800ba0c <HAL_RCC_GetHCLKFreq>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	f003 0307 	and.w	r3, r3, #7
 800ba34:	4903      	ldr	r1, [pc, #12]	; (800ba44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba36:	5ccb      	ldrb	r3, [r1, r3]
 800ba38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	40021000 	.word	0x40021000
 800ba44:	0800e750 	.word	0x0800e750

0800ba48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ba4c:	f7ff ffde 	bl	800ba0c <HAL_RCC_GetHCLKFreq>
 800ba50:	4602      	mov	r2, r0
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	0adb      	lsrs	r3, r3, #11
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	4903      	ldr	r1, [pc, #12]	; (800ba6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba5e:	5ccb      	ldrb	r3, [r1, r3]
 800ba60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	40021000 	.word	0x40021000
 800ba6c:	0800e750 	.word	0x0800e750

0800ba70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ba78:	4b0a      	ldr	r3, [pc, #40]	; (800baa4 <RCC_Delay+0x34>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a0a      	ldr	r2, [pc, #40]	; (800baa8 <RCC_Delay+0x38>)
 800ba7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba82:	0a5b      	lsrs	r3, r3, #9
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	fb02 f303 	mul.w	r3, r2, r3
 800ba8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ba8c:	bf00      	nop
  }
  while (Delay --);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	1e5a      	subs	r2, r3, #1
 800ba92:	60fa      	str	r2, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f9      	bne.n	800ba8c <RCC_Delay+0x1c>
}
 800ba98:	bf00      	nop
 800ba9a:	bf00      	nop
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr
 800baa4:	200009b8 	.word	0x200009b8
 800baa8:	10624dd3 	.word	0x10624dd3

0800baac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e041      	b.n	800bb42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7fd fa26 	bl	8008f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2202      	movs	r2, #2
 800badc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	3304      	adds	r3, #4
 800bae8:	4619      	mov	r1, r3
 800baea:	4610      	mov	r0, r2
 800baec:	f000 fa82 	bl	800bff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d001      	beq.n	800bb64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e044      	b.n	800bbee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68da      	ldr	r2, [r3, #12]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f042 0201 	orr.w	r2, r2, #1
 800bb7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a1d      	ldr	r2, [pc, #116]	; (800bbf8 <HAL_TIM_Base_Start_IT+0xac>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d018      	beq.n	800bbb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a1c      	ldr	r2, [pc, #112]	; (800bbfc <HAL_TIM_Base_Start_IT+0xb0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d013      	beq.n	800bbb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb98:	d00e      	beq.n	800bbb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a18      	ldr	r2, [pc, #96]	; (800bc00 <HAL_TIM_Base_Start_IT+0xb4>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d009      	beq.n	800bbb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a16      	ldr	r2, [pc, #88]	; (800bc04 <HAL_TIM_Base_Start_IT+0xb8>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d004      	beq.n	800bbb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <HAL_TIM_Base_Start_IT+0xbc>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d111      	bne.n	800bbdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f003 0307 	and.w	r3, r3, #7
 800bbc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b06      	cmp	r3, #6
 800bbc8:	d010      	beq.n	800bbec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f042 0201 	orr.w	r2, r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbda:	e007      	b.n	800bbec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f042 0201 	orr.w	r2, r2, #1
 800bbea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bc80      	pop	{r7}
 800bbf6:	4770      	bx	lr
 800bbf8:	40012c00 	.word	0x40012c00
 800bbfc:	40013400 	.word	0x40013400
 800bc00:	40000400 	.word	0x40000400
 800bc04:	40000800 	.word	0x40000800
 800bc08:	40000c00 	.word	0x40000c00

0800bc0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d122      	bne.n	800bc68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d11b      	bne.n	800bc68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f06f 0202 	mvn.w	r2, #2
 800bc38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	f003 0303 	and.w	r3, r3, #3
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d003      	beq.n	800bc56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f9b4 	bl	800bfbc <HAL_TIM_IC_CaptureCallback>
 800bc54:	e005      	b.n	800bc62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f9a7 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f9b6 	bl	800bfce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d122      	bne.n	800bcbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	2b04      	cmp	r3, #4
 800bc82:	d11b      	bne.n	800bcbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f06f 0204 	mvn.w	r2, #4
 800bc8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2202      	movs	r2, #2
 800bc92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f98a 	bl	800bfbc <HAL_TIM_IC_CaptureCallback>
 800bca8:	e005      	b.n	800bcb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f97d 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f98c 	bl	800bfce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	f003 0308 	and.w	r3, r3, #8
 800bcc6:	2b08      	cmp	r3, #8
 800bcc8:	d122      	bne.n	800bd10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	2b08      	cmp	r3, #8
 800bcd6:	d11b      	bne.n	800bd10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f06f 0208 	mvn.w	r2, #8
 800bce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2204      	movs	r2, #4
 800bce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	f003 0303 	and.w	r3, r3, #3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f960 	bl	800bfbc <HAL_TIM_IC_CaptureCallback>
 800bcfc:	e005      	b.n	800bd0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f953 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f962 	bl	800bfce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	f003 0310 	and.w	r3, r3, #16
 800bd1a:	2b10      	cmp	r3, #16
 800bd1c:	d122      	bne.n	800bd64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	f003 0310 	and.w	r3, r3, #16
 800bd28:	2b10      	cmp	r3, #16
 800bd2a:	d11b      	bne.n	800bd64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f06f 0210 	mvn.w	r2, #16
 800bd34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2208      	movs	r2, #8
 800bd3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f936 	bl	800bfbc <HAL_TIM_IC_CaptureCallback>
 800bd50:	e005      	b.n	800bd5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f929 	bl	800bfaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f938 	bl	800bfce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d10e      	bne.n	800bd90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d107      	bne.n	800bd90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f06f 0201 	mvn.w	r2, #1
 800bd88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7fc fd56 	bl	800883c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9a:	2b80      	cmp	r3, #128	; 0x80
 800bd9c:	d10e      	bne.n	800bdbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bda8:	2b80      	cmp	r3, #128	; 0x80
 800bdaa:	d107      	bne.n	800bdbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bdb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 faa1 	bl	800c2fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc6:	2b40      	cmp	r3, #64	; 0x40
 800bdc8:	d10e      	bne.n	800bde8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdd4:	2b40      	cmp	r3, #64	; 0x40
 800bdd6:	d107      	bne.n	800bde8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bde0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f8fc 	bl	800bfe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	d10e      	bne.n	800be14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	2b20      	cmp	r3, #32
 800be02:	d107      	bne.n	800be14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f06f 0220 	mvn.w	r2, #32
 800be0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fa6c 	bl	800c2ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be30:	2b01      	cmp	r3, #1
 800be32:	d101      	bne.n	800be38 <HAL_TIM_ConfigClockSource+0x1c>
 800be34:	2302      	movs	r3, #2
 800be36:	e0b4      	b.n	800bfa2 <HAL_TIM_ConfigClockSource+0x186>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800be56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be70:	d03e      	beq.n	800bef0 <HAL_TIM_ConfigClockSource+0xd4>
 800be72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be76:	f200 8087 	bhi.w	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be7e:	f000 8086 	beq.w	800bf8e <HAL_TIM_ConfigClockSource+0x172>
 800be82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be86:	d87f      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be88:	2b70      	cmp	r3, #112	; 0x70
 800be8a:	d01a      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0xa6>
 800be8c:	2b70      	cmp	r3, #112	; 0x70
 800be8e:	d87b      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be90:	2b60      	cmp	r3, #96	; 0x60
 800be92:	d050      	beq.n	800bf36 <HAL_TIM_ConfigClockSource+0x11a>
 800be94:	2b60      	cmp	r3, #96	; 0x60
 800be96:	d877      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800be98:	2b50      	cmp	r3, #80	; 0x50
 800be9a:	d03c      	beq.n	800bf16 <HAL_TIM_ConfigClockSource+0xfa>
 800be9c:	2b50      	cmp	r3, #80	; 0x50
 800be9e:	d873      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800bea0:	2b40      	cmp	r3, #64	; 0x40
 800bea2:	d058      	beq.n	800bf56 <HAL_TIM_ConfigClockSource+0x13a>
 800bea4:	2b40      	cmp	r3, #64	; 0x40
 800bea6:	d86f      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800bea8:	2b30      	cmp	r3, #48	; 0x30
 800beaa:	d064      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800beac:	2b30      	cmp	r3, #48	; 0x30
 800beae:	d86b      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800beb0:	2b20      	cmp	r3, #32
 800beb2:	d060      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	d867      	bhi.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d05c      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d05a      	beq.n	800bf76 <HAL_TIM_ConfigClockSource+0x15a>
 800bec0:	e062      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bed2:	f000 f980 	bl	800c1d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	609a      	str	r2, [r3, #8]
      break;
 800beee:	e04f      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf00:	f000 f969 	bl	800c1d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf12:	609a      	str	r2, [r3, #8]
      break;
 800bf14:	e03c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf22:	461a      	mov	r2, r3
 800bf24:	f000 f8e0 	bl	800c0e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2150      	movs	r1, #80	; 0x50
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 f937 	bl	800c1a2 <TIM_ITRx_SetConfig>
      break;
 800bf34:	e02c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf42:	461a      	mov	r2, r3
 800bf44:	f000 f8fe 	bl	800c144 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2160      	movs	r1, #96	; 0x60
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f927 	bl	800c1a2 <TIM_ITRx_SetConfig>
      break;
 800bf54:	e01c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf62:	461a      	mov	r2, r3
 800bf64:	f000 f8c0 	bl	800c0e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2140      	movs	r1, #64	; 0x40
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 f917 	bl	800c1a2 <TIM_ITRx_SetConfig>
      break;
 800bf74:	e00c      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	f000 f90e 	bl	800c1a2 <TIM_ITRx_SetConfig>
      break;
 800bf86:	e003      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8c:	e000      	b.n	800bf90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bf8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfb2:	bf00      	nop
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bc80      	pop	{r7}
 800bfba:	4770      	bx	lr

0800bfbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfc4:	bf00      	nop
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bc80      	pop	{r7}
 800bfcc:	4770      	bx	lr

0800bfce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bc80      	pop	{r7}
 800bff0:	4770      	bx	lr
	...

0800bff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a33      	ldr	r2, [pc, #204]	; (800c0d4 <TIM_Base_SetConfig+0xe0>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d013      	beq.n	800c034 <TIM_Base_SetConfig+0x40>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a32      	ldr	r2, [pc, #200]	; (800c0d8 <TIM_Base_SetConfig+0xe4>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d00f      	beq.n	800c034 <TIM_Base_SetConfig+0x40>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c01a:	d00b      	beq.n	800c034 <TIM_Base_SetConfig+0x40>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a2f      	ldr	r2, [pc, #188]	; (800c0dc <TIM_Base_SetConfig+0xe8>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d007      	beq.n	800c034 <TIM_Base_SetConfig+0x40>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a2e      	ldr	r2, [pc, #184]	; (800c0e0 <TIM_Base_SetConfig+0xec>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d003      	beq.n	800c034 <TIM_Base_SetConfig+0x40>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a2d      	ldr	r2, [pc, #180]	; (800c0e4 <TIM_Base_SetConfig+0xf0>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d108      	bne.n	800c046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c03a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	4313      	orrs	r3, r2
 800c044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a22      	ldr	r2, [pc, #136]	; (800c0d4 <TIM_Base_SetConfig+0xe0>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d013      	beq.n	800c076 <TIM_Base_SetConfig+0x82>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a21      	ldr	r2, [pc, #132]	; (800c0d8 <TIM_Base_SetConfig+0xe4>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d00f      	beq.n	800c076 <TIM_Base_SetConfig+0x82>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05c:	d00b      	beq.n	800c076 <TIM_Base_SetConfig+0x82>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a1e      	ldr	r2, [pc, #120]	; (800c0dc <TIM_Base_SetConfig+0xe8>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d007      	beq.n	800c076 <TIM_Base_SetConfig+0x82>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a1d      	ldr	r2, [pc, #116]	; (800c0e0 <TIM_Base_SetConfig+0xec>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d003      	beq.n	800c076 <TIM_Base_SetConfig+0x82>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a1c      	ldr	r2, [pc, #112]	; (800c0e4 <TIM_Base_SetConfig+0xf0>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d108      	bne.n	800c088 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c07c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	4313      	orrs	r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	4313      	orrs	r3, r2
 800c094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	689a      	ldr	r2, [r3, #8]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4a09      	ldr	r2, [pc, #36]	; (800c0d4 <TIM_Base_SetConfig+0xe0>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d003      	beq.n	800c0bc <TIM_Base_SetConfig+0xc8>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a08      	ldr	r2, [pc, #32]	; (800c0d8 <TIM_Base_SetConfig+0xe4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d103      	bne.n	800c0c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	691a      	ldr	r2, [r3, #16]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	615a      	str	r2, [r3, #20]
}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bc80      	pop	{r7}
 800c0d2:	4770      	bx	lr
 800c0d4:	40012c00 	.word	0x40012c00
 800c0d8:	40013400 	.word	0x40013400
 800c0dc:	40000400 	.word	0x40000400
 800c0e0:	40000800 	.word	0x40000800
 800c0e4:	40000c00 	.word	0x40000c00

0800c0e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	f023 0201 	bic.w	r2, r3, #1
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	011b      	lsls	r3, r3, #4
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f023 030a 	bic.w	r3, r3, #10
 800c124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	621a      	str	r2, [r3, #32]
}
 800c13a:	bf00      	nop
 800c13c:	371c      	adds	r7, #28
 800c13e:	46bd      	mov	sp, r7
 800c140:	bc80      	pop	{r7}
 800c142:	4770      	bx	lr

0800c144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	f023 0210 	bic.w	r2, r3, #16
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c16e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	031b      	lsls	r3, r3, #12
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	4313      	orrs	r3, r2
 800c178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c180:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	011b      	lsls	r3, r3, #4
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4313      	orrs	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	621a      	str	r2, [r3, #32]
}
 800c198:	bf00      	nop
 800c19a:	371c      	adds	r7, #28
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bc80      	pop	{r7}
 800c1a0:	4770      	bx	lr

0800c1a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	f043 0307 	orr.w	r3, r3, #7
 800c1c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	609a      	str	r2, [r3, #8]
}
 800c1cc:	bf00      	nop
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bc80      	pop	{r7}
 800c1d4:	4770      	bx	lr

0800c1d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b087      	sub	sp, #28
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	60b9      	str	r1, [r7, #8]
 800c1e0:	607a      	str	r2, [r7, #4]
 800c1e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	021a      	lsls	r2, r3, #8
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	4313      	orrs	r3, r2
 800c202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	609a      	str	r2, [r3, #8]
}
 800c20a:	bf00      	nop
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	bc80      	pop	{r7}
 800c212:	4770      	bx	lr

0800c214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d101      	bne.n	800c22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c228:	2302      	movs	r3, #2
 800c22a:	e050      	b.n	800c2ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a1b      	ldr	r2, [pc, #108]	; (800c2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d018      	beq.n	800c2a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a19      	ldr	r2, [pc, #100]	; (800c2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d013      	beq.n	800c2a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c282:	d00e      	beq.n	800c2a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a15      	ldr	r2, [pc, #84]	; (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d009      	beq.n	800c2a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a14      	ldr	r2, [pc, #80]	; (800c2e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d004      	beq.n	800c2a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a12      	ldr	r2, [pc, #72]	; (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d10c      	bne.n	800c2bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bc80      	pop	{r7}
 800c2d6:	4770      	bx	lr
 800c2d8:	40012c00 	.word	0x40012c00
 800c2dc:	40013400 	.word	0x40013400
 800c2e0:	40000400 	.word	0x40000400
 800c2e4:	40000800 	.word	0x40000800
 800c2e8:	40000c00 	.word	0x40000c00

0800c2ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bc80      	pop	{r7}
 800c2fc:	4770      	bx	lr

0800c2fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2fe:	b480      	push	{r7}
 800c300:	b083      	sub	sp, #12
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c306:	bf00      	nop
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bc80      	pop	{r7}
 800c30e:	4770      	bx	lr

0800c310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e042      	b.n	800c3a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7fc fe1a 	bl	8008f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2224      	movs	r2, #36	; 0x24
 800c340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68da      	ldr	r2, [r3, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fcb5 	bl	800ccc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	691a      	ldr	r2, [r3, #16]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	695a      	ldr	r2, [r3, #20]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68da      	ldr	r2, [r3, #12]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2220      	movs	r2, #32
 800c394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2220      	movs	r2, #32
 800c39c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b20      	cmp	r3, #32
 800c3c8:	d121      	bne.n	800c40e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <HAL_UART_Transmit_IT+0x26>
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e01a      	b.n	800c410 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	88fa      	ldrh	r2, [r7, #6]
 800c3e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	88fa      	ldrh	r2, [r7, #6]
 800c3ea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2221      	movs	r2, #33	; 0x21
 800c3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c408:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e000      	b.n	800c410 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c40e:	2302      	movs	r3, #2
  }
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	bc80      	pop	{r7}
 800c418:	4770      	bx	lr
	...

0800c41c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b0ba      	sub	sp, #232	; 0xe8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c442:	2300      	movs	r3, #0
 800c444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c448:	2300      	movs	r3, #0
 800c44a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c452:	f003 030f 	and.w	r3, r3, #15
 800c456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c45a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10f      	bne.n	800c482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d009      	beq.n	800c482 <HAL_UART_IRQHandler+0x66>
 800c46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c472:	f003 0320 	and.w	r3, r3, #32
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fb63 	bl	800cb46 <UART_Receive_IT>
      return;
 800c480:	e25b      	b.n	800c93a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 80de 	beq.w	800c648 <HAL_UART_IRQHandler+0x22c>
 800c48c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c49c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 80d1 	beq.w	800c648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00b      	beq.n	800c4ca <HAL_UART_IRQHandler+0xae>
 800c4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d005      	beq.n	800c4ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c2:	f043 0201 	orr.w	r2, r3, #1
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ce:	f003 0304 	and.w	r3, r3, #4
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <HAL_UART_IRQHandler+0xd2>
 800c4d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e6:	f043 0202 	orr.w	r2, r3, #2
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <HAL_UART_IRQHandler+0xf6>
 800c4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d005      	beq.n	800c512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c50a:	f043 0204 	orr.w	r2, r3, #4
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c516:	f003 0308 	and.w	r3, r3, #8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d011      	beq.n	800c542 <HAL_UART_IRQHandler+0x126>
 800c51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c522:	f003 0320 	and.w	r3, r3, #32
 800c526:	2b00      	cmp	r3, #0
 800c528:	d105      	bne.n	800c536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c52a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53a:	f043 0208 	orr.w	r2, r3, #8
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 81f2 	beq.w	800c930 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c550:	f003 0320 	and.w	r3, r3, #32
 800c554:	2b00      	cmp	r3, #0
 800c556:	d008      	beq.n	800c56a <HAL_UART_IRQHandler+0x14e>
 800c558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c55c:	f003 0320 	and.w	r3, r3, #32
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 faee 	bl	800cb46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c574:	2b00      	cmp	r3, #0
 800c576:	bf14      	ite	ne
 800c578:	2301      	movne	r3, #1
 800c57a:	2300      	moveq	r3, #0
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d103      	bne.n	800c596 <HAL_UART_IRQHandler+0x17a>
 800c58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c592:	2b00      	cmp	r3, #0
 800c594:	d04f      	beq.n	800c636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f9f8 	bl	800c98c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d041      	beq.n	800c62e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3314      	adds	r3, #20
 800c5b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5e6:	e841 2300 	strex	r3, r2, [r1]
 800c5ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1d9      	bne.n	800c5aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d013      	beq.n	800c626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c602:	4a7e      	ldr	r2, [pc, #504]	; (800c7fc <HAL_UART_IRQHandler+0x3e0>)
 800c604:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fd f86c 	bl	80096e8 <HAL_DMA_Abort_IT>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d016      	beq.n	800c644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c620:	4610      	mov	r0, r2
 800c622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c624:	e00e      	b.n	800c644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f99c 	bl	800c964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62c:	e00a      	b.n	800c644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f998 	bl	800c964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c634:	e006      	b.n	800c644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f994 	bl	800c964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c642:	e175      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c644:	bf00      	nop
    return;
 800c646:	e173      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	f040 814f 	bne.w	800c8f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c656:	f003 0310 	and.w	r3, r3, #16
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8148 	beq.w	800c8f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c664:	f003 0310 	and.w	r3, r3, #16
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 8141 	beq.w	800c8f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c66e:	2300      	movs	r3, #0
 800c670:	60bb      	str	r3, [r7, #8]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	60bb      	str	r3, [r7, #8]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	60bb      	str	r3, [r7, #8]
 800c682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 80b6 	beq.w	800c800 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 8145 	beq.w	800c934 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	f080 813e 	bcs.w	800c934 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	2b20      	cmp	r3, #32
 800c6c8:	f000 8088 	beq.w	800c7dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6da:	e853 3f00 	ldrex	r3, [r3]
 800c6de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	330c      	adds	r3, #12
 800c6f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c6f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c6fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c700:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c704:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1d9      	bne.n	800c6cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3314      	adds	r3, #20
 800c71e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c722:	e853 3f00 	ldrex	r3, [r3]
 800c726:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c72a:	f023 0301 	bic.w	r3, r3, #1
 800c72e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3314      	adds	r3, #20
 800c738:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c73c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c740:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c744:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c748:	e841 2300 	strex	r3, r2, [r1]
 800c74c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c74e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1e1      	bne.n	800c718 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3314      	adds	r3, #20
 800c75a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c76a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3314      	adds	r3, #20
 800c774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c778:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c77a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c77e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e3      	bne.n	800c754 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2220      	movs	r2, #32
 800c790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	330c      	adds	r3, #12
 800c7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a4:	e853 3f00 	ldrex	r3, [r3]
 800c7a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ac:	f023 0310 	bic.w	r3, r3, #16
 800c7b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	330c      	adds	r3, #12
 800c7ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c7be:	65ba      	str	r2, [r7, #88]	; 0x58
 800c7c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7c6:	e841 2300 	strex	r3, r2, [r1]
 800c7ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1e3      	bne.n	800c79a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7fc ff4b 	bl	8009672 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2202      	movs	r2, #2
 800c7e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f8bf 	bl	800c976 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7f8:	e09c      	b.n	800c934 <HAL_UART_IRQHandler+0x518>
 800c7fa:	bf00      	nop
 800c7fc:	0800ca51 	.word	0x0800ca51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c808:	b29b      	uxth	r3, r3
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c814:	b29b      	uxth	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	f000 808e 	beq.w	800c938 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c81c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 8089 	beq.w	800c938 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	330c      	adds	r3, #12
 800c82c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c830:	e853 3f00 	ldrex	r3, [r3]
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c83c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	330c      	adds	r3, #12
 800c846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c84a:	647a      	str	r2, [r7, #68]	; 0x44
 800c84c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c852:	e841 2300 	strex	r3, r2, [r1]
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e3      	bne.n	800c826 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3314      	adds	r3, #20
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	623b      	str	r3, [r7, #32]
   return(result);
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	f023 0301 	bic.w	r3, r3, #1
 800c874:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3314      	adds	r3, #20
 800c87e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c882:	633a      	str	r2, [r7, #48]	; 0x30
 800c884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e3      	bne.n	800c85e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2220      	movs	r2, #32
 800c89a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	330c      	adds	r3, #12
 800c8aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	e853 3f00 	ldrex	r3, [r3]
 800c8b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 0310 	bic.w	r3, r3, #16
 800c8ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	330c      	adds	r3, #12
 800c8c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c8c8:	61fa      	str	r2, [r7, #28]
 800c8ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8cc:	69b9      	ldr	r1, [r7, #24]
 800c8ce:	69fa      	ldr	r2, [r7, #28]
 800c8d0:	e841 2300 	strex	r3, r2, [r1]
 800c8d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1e3      	bne.n	800c8a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f844 	bl	800c976 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c8ee:	e023      	b.n	800c938 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d009      	beq.n	800c910 <HAL_UART_IRQHandler+0x4f4>
 800c8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f8b5 	bl	800ca78 <UART_Transmit_IT>
    return;
 800c90e:	e014      	b.n	800c93a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00e      	beq.n	800c93a <HAL_UART_IRQHandler+0x51e>
 800c91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f8f4 	bl	800cb16 <UART_EndTransmit_IT>
    return;
 800c92e:	e004      	b.n	800c93a <HAL_UART_IRQHandler+0x51e>
    return;
 800c930:	bf00      	nop
 800c932:	e002      	b.n	800c93a <HAL_UART_IRQHandler+0x51e>
      return;
 800c934:	bf00      	nop
 800c936:	e000      	b.n	800c93a <HAL_UART_IRQHandler+0x51e>
      return;
 800c938:	bf00      	nop
  }
}
 800c93a:	37e8      	adds	r7, #232	; 0xe8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bc80      	pop	{r7}
 800c950:	4770      	bx	lr

0800c952 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c95a:	bf00      	nop
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	bc80      	pop	{r7}
 800c962:	4770      	bx	lr

0800c964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	bc80      	pop	{r7}
 800c974:	4770      	bx	lr

0800c976 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	bc80      	pop	{r7}
 800c98a:	4770      	bx	lr

0800c98c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b095      	sub	sp, #84	; 0x54
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	330c      	adds	r3, #12
 800c99a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99e:	e853 3f00 	ldrex	r3, [r3]
 800c9a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	330c      	adds	r3, #12
 800c9b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9b4:	643a      	str	r2, [r7, #64]	; 0x40
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9bc:	e841 2300 	strex	r3, r2, [r1]
 800c9c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1e5      	bne.n	800c994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3314      	adds	r3, #20
 800c9ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	f023 0301 	bic.w	r3, r3, #1
 800c9de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3314      	adds	r3, #20
 800c9e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f0:	e841 2300 	strex	r3, r2, [r1]
 800c9f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e5      	bne.n	800c9c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d119      	bne.n	800ca38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	330c      	adds	r3, #12
 800ca0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	e853 3f00 	ldrex	r3, [r3]
 800ca12:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	f023 0310 	bic.w	r3, r3, #16
 800ca1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	330c      	adds	r3, #12
 800ca22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca24:	61ba      	str	r2, [r7, #24]
 800ca26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca28:	6979      	ldr	r1, [r7, #20]
 800ca2a:	69ba      	ldr	r2, [r7, #24]
 800ca2c:	e841 2300 	strex	r3, r2, [r1]
 800ca30:	613b      	str	r3, [r7, #16]
   return(result);
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1e5      	bne.n	800ca04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ca46:	bf00      	nop
 800ca48:	3754      	adds	r7, #84	; 0x54
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bc80      	pop	{r7}
 800ca4e:	4770      	bx	lr

0800ca50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7ff ff7a 	bl	800c964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca70:	bf00      	nop
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b21      	cmp	r3, #33	; 0x21
 800ca8a:	d13e      	bne.n	800cb0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca94:	d114      	bne.n	800cac0 <UART_Transmit_IT+0x48>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d110      	bne.n	800cac0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	461a      	mov	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cab2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a1b      	ldr	r3, [r3, #32]
 800cab8:	1c9a      	adds	r2, r3, #2
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	621a      	str	r2, [r3, #32]
 800cabe:	e008      	b.n	800cad2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a1b      	ldr	r3, [r3, #32]
 800cac4:	1c59      	adds	r1, r3, #1
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6211      	str	r1, [r2, #32]
 800caca:	781a      	ldrb	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3b01      	subs	r3, #1
 800cada:	b29b      	uxth	r3, r3
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	4619      	mov	r1, r3
 800cae0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10f      	bne.n	800cb06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68da      	ldr	r2, [r3, #12]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e000      	b.n	800cb0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cb0a:	2302      	movs	r3, #2
  }
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr

0800cb16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68da      	ldr	r2, [r3, #12]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ff02 	bl	800c940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b08c      	sub	sp, #48	; 0x30
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b22      	cmp	r3, #34	; 0x22
 800cb58:	f040 80ae 	bne.w	800ccb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb64:	d117      	bne.n	800cb96 <UART_Receive_IT+0x50>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d113      	bne.n	800cb96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8e:	1c9a      	adds	r2, r3, #2
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	629a      	str	r2, [r3, #40]	; 0x28
 800cb94:	e026      	b.n	800cbe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba8:	d007      	beq.n	800cbba <UART_Receive_IT+0x74>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10a      	bne.n	800cbc8 <UART_Receive_IT+0x82>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d106      	bne.n	800cbc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	e008      	b.n	800cbda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbde:	1c5a      	adds	r2, r3, #1
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3b01      	subs	r3, #1
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d15d      	bne.n	800ccb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f022 0220 	bic.w	r2, r2, #32
 800cc06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695a      	ldr	r2, [r3, #20]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 0201 	bic.w	r2, r2, #1
 800cc26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d135      	bne.n	800ccaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	330c      	adds	r3, #12
 800cc4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	e853 3f00 	ldrex	r3, [r3]
 800cc52:	613b      	str	r3, [r7, #16]
   return(result);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f023 0310 	bic.w	r3, r3, #16
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	330c      	adds	r3, #12
 800cc62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc64:	623a      	str	r2, [r7, #32]
 800cc66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc68:	69f9      	ldr	r1, [r7, #28]
 800cc6a:	6a3a      	ldr	r2, [r7, #32]
 800cc6c:	e841 2300 	strex	r3, r2, [r1]
 800cc70:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1e5      	bne.n	800cc44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0310 	and.w	r3, r3, #16
 800cc82:	2b10      	cmp	r3, #16
 800cc84:	d10a      	bne.n	800cc9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	60fb      	str	r3, [r7, #12]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff fe67 	bl	800c976 <HAL_UARTEx_RxEventCallback>
 800cca8:	e002      	b.n	800ccb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff fe51 	bl	800c952 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e002      	b.n	800ccba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	e000      	b.n	800ccba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ccb8:	2302      	movs	r3, #2
  }
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3730      	adds	r7, #48	; 0x30
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
	...

0800ccc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68da      	ldr	r2, [r3, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	689a      	ldr	r2, [r3, #8]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ccfe:	f023 030c 	bic.w	r3, r3, #12
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	6812      	ldr	r2, [r2, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	430b      	orrs	r3, r1
 800cd0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	699a      	ldr	r2, [r3, #24]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a2c      	ldr	r2, [pc, #176]	; (800cdd8 <UART_SetConfig+0x114>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d103      	bne.n	800cd34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cd2c:	f7fe fe8c 	bl	800ba48 <HAL_RCC_GetPCLK2Freq>
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	e002      	b.n	800cd3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cd34:	f7fe fe74 	bl	800ba20 <HAL_RCC_GetPCLK1Freq>
 800cd38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	009a      	lsls	r2, r3, #2
 800cd44:	441a      	add	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd50:	4a22      	ldr	r2, [pc, #136]	; (800cddc <UART_SetConfig+0x118>)
 800cd52:	fba2 2303 	umull	r2, r3, r2, r3
 800cd56:	095b      	lsrs	r3, r3, #5
 800cd58:	0119      	lsls	r1, r3, #4
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	009a      	lsls	r2, r3, #2
 800cd64:	441a      	add	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd70:	4b1a      	ldr	r3, [pc, #104]	; (800cddc <UART_SetConfig+0x118>)
 800cd72:	fba3 0302 	umull	r0, r3, r3, r2
 800cd76:	095b      	lsrs	r3, r3, #5
 800cd78:	2064      	movs	r0, #100	; 0x64
 800cd7a:	fb00 f303 	mul.w	r3, r0, r3
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	011b      	lsls	r3, r3, #4
 800cd82:	3332      	adds	r3, #50	; 0x32
 800cd84:	4a15      	ldr	r2, [pc, #84]	; (800cddc <UART_SetConfig+0x118>)
 800cd86:	fba2 2303 	umull	r2, r3, r2, r3
 800cd8a:	095b      	lsrs	r3, r3, #5
 800cd8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd90:	4419      	add	r1, r3
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009a      	lsls	r2, r3, #2
 800cd9c:	441a      	add	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cda8:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <UART_SetConfig+0x118>)
 800cdaa:	fba3 0302 	umull	r0, r3, r3, r2
 800cdae:	095b      	lsrs	r3, r3, #5
 800cdb0:	2064      	movs	r0, #100	; 0x64
 800cdb2:	fb00 f303 	mul.w	r3, r0, r3
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	3332      	adds	r3, #50	; 0x32
 800cdbc:	4a07      	ldr	r2, [pc, #28]	; (800cddc <UART_SetConfig+0x118>)
 800cdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc2:	095b      	lsrs	r3, r3, #5
 800cdc4:	f003 020f 	and.w	r2, r3, #15
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	440a      	add	r2, r1
 800cdce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cdd0:	bf00      	nop
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	40013800 	.word	0x40013800
 800cddc:	51eb851f 	.word	0x51eb851f

0800cde0 <__itoa>:
 800cde0:	1e93      	subs	r3, r2, #2
 800cde2:	2b22      	cmp	r3, #34	; 0x22
 800cde4:	b510      	push	{r4, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	d904      	bls.n	800cdf4 <__itoa+0x14>
 800cdea:	2300      	movs	r3, #0
 800cdec:	461c      	mov	r4, r3
 800cdee:	700b      	strb	r3, [r1, #0]
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	bd10      	pop	{r4, pc}
 800cdf4:	2a0a      	cmp	r2, #10
 800cdf6:	d109      	bne.n	800ce0c <__itoa+0x2c>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	da07      	bge.n	800ce0c <__itoa+0x2c>
 800cdfc:	232d      	movs	r3, #45	; 0x2d
 800cdfe:	700b      	strb	r3, [r1, #0]
 800ce00:	2101      	movs	r1, #1
 800ce02:	4240      	negs	r0, r0
 800ce04:	4421      	add	r1, r4
 800ce06:	f000 f8b9 	bl	800cf7c <__utoa>
 800ce0a:	e7f1      	b.n	800cdf0 <__itoa+0x10>
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	e7f9      	b.n	800ce04 <__itoa+0x24>

0800ce10 <itoa>:
 800ce10:	f7ff bfe6 	b.w	800cde0 <__itoa>

0800ce14 <malloc>:
 800ce14:	4b02      	ldr	r3, [pc, #8]	; (800ce20 <malloc+0xc>)
 800ce16:	4601      	mov	r1, r0
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	f000 b823 	b.w	800ce64 <_malloc_r>
 800ce1e:	bf00      	nop
 800ce20:	20000a10 	.word	0x20000a10

0800ce24 <sbrk_aligned>:
 800ce24:	b570      	push	{r4, r5, r6, lr}
 800ce26:	4e0e      	ldr	r6, [pc, #56]	; (800ce60 <sbrk_aligned+0x3c>)
 800ce28:	460c      	mov	r4, r1
 800ce2a:	6831      	ldr	r1, [r6, #0]
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	b911      	cbnz	r1, 800ce36 <sbrk_aligned+0x12>
 800ce30:	f000 f91e 	bl	800d070 <_sbrk_r>
 800ce34:	6030      	str	r0, [r6, #0]
 800ce36:	4621      	mov	r1, r4
 800ce38:	4628      	mov	r0, r5
 800ce3a:	f000 f919 	bl	800d070 <_sbrk_r>
 800ce3e:	1c43      	adds	r3, r0, #1
 800ce40:	d00a      	beq.n	800ce58 <sbrk_aligned+0x34>
 800ce42:	1cc4      	adds	r4, r0, #3
 800ce44:	f024 0403 	bic.w	r4, r4, #3
 800ce48:	42a0      	cmp	r0, r4
 800ce4a:	d007      	beq.n	800ce5c <sbrk_aligned+0x38>
 800ce4c:	1a21      	subs	r1, r4, r0
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f000 f90e 	bl	800d070 <_sbrk_r>
 800ce54:	3001      	adds	r0, #1
 800ce56:	d101      	bne.n	800ce5c <sbrk_aligned+0x38>
 800ce58:	f04f 34ff 	mov.w	r4, #4294967295
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	20000ed0 	.word	0x20000ed0

0800ce64 <_malloc_r>:
 800ce64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce68:	1ccd      	adds	r5, r1, #3
 800ce6a:	f025 0503 	bic.w	r5, r5, #3
 800ce6e:	3508      	adds	r5, #8
 800ce70:	2d0c      	cmp	r5, #12
 800ce72:	bf38      	it	cc
 800ce74:	250c      	movcc	r5, #12
 800ce76:	2d00      	cmp	r5, #0
 800ce78:	4607      	mov	r7, r0
 800ce7a:	db01      	blt.n	800ce80 <_malloc_r+0x1c>
 800ce7c:	42a9      	cmp	r1, r5
 800ce7e:	d905      	bls.n	800ce8c <_malloc_r+0x28>
 800ce80:	230c      	movs	r3, #12
 800ce82:	2600      	movs	r6, #0
 800ce84:	603b      	str	r3, [r7, #0]
 800ce86:	4630      	mov	r0, r6
 800ce88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cf60 <_malloc_r+0xfc>
 800ce90:	f000 f868 	bl	800cf64 <__malloc_lock>
 800ce94:	f8d8 3000 	ldr.w	r3, [r8]
 800ce98:	461c      	mov	r4, r3
 800ce9a:	bb5c      	cbnz	r4, 800cef4 <_malloc_r+0x90>
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4638      	mov	r0, r7
 800cea0:	f7ff ffc0 	bl	800ce24 <sbrk_aligned>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	4604      	mov	r4, r0
 800cea8:	d155      	bne.n	800cf56 <_malloc_r+0xf2>
 800ceaa:	f8d8 4000 	ldr.w	r4, [r8]
 800ceae:	4626      	mov	r6, r4
 800ceb0:	2e00      	cmp	r6, #0
 800ceb2:	d145      	bne.n	800cf40 <_malloc_r+0xdc>
 800ceb4:	2c00      	cmp	r4, #0
 800ceb6:	d048      	beq.n	800cf4a <_malloc_r+0xe6>
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	4631      	mov	r1, r6
 800cebc:	4638      	mov	r0, r7
 800cebe:	eb04 0903 	add.w	r9, r4, r3
 800cec2:	f000 f8d5 	bl	800d070 <_sbrk_r>
 800cec6:	4581      	cmp	r9, r0
 800cec8:	d13f      	bne.n	800cf4a <_malloc_r+0xe6>
 800ceca:	6821      	ldr	r1, [r4, #0]
 800cecc:	4638      	mov	r0, r7
 800cece:	1a6d      	subs	r5, r5, r1
 800ced0:	4629      	mov	r1, r5
 800ced2:	f7ff ffa7 	bl	800ce24 <sbrk_aligned>
 800ced6:	3001      	adds	r0, #1
 800ced8:	d037      	beq.n	800cf4a <_malloc_r+0xe6>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	442b      	add	r3, r5
 800cede:	6023      	str	r3, [r4, #0]
 800cee0:	f8d8 3000 	ldr.w	r3, [r8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d038      	beq.n	800cf5a <_malloc_r+0xf6>
 800cee8:	685a      	ldr	r2, [r3, #4]
 800ceea:	42a2      	cmp	r2, r4
 800ceec:	d12b      	bne.n	800cf46 <_malloc_r+0xe2>
 800ceee:	2200      	movs	r2, #0
 800cef0:	605a      	str	r2, [r3, #4]
 800cef2:	e00f      	b.n	800cf14 <_malloc_r+0xb0>
 800cef4:	6822      	ldr	r2, [r4, #0]
 800cef6:	1b52      	subs	r2, r2, r5
 800cef8:	d41f      	bmi.n	800cf3a <_malloc_r+0xd6>
 800cefa:	2a0b      	cmp	r2, #11
 800cefc:	d917      	bls.n	800cf2e <_malloc_r+0xca>
 800cefe:	1961      	adds	r1, r4, r5
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	6025      	str	r5, [r4, #0]
 800cf04:	bf18      	it	ne
 800cf06:	6059      	strne	r1, [r3, #4]
 800cf08:	6863      	ldr	r3, [r4, #4]
 800cf0a:	bf08      	it	eq
 800cf0c:	f8c8 1000 	streq.w	r1, [r8]
 800cf10:	5162      	str	r2, [r4, r5]
 800cf12:	604b      	str	r3, [r1, #4]
 800cf14:	4638      	mov	r0, r7
 800cf16:	f104 060b 	add.w	r6, r4, #11
 800cf1a:	f000 f829 	bl	800cf70 <__malloc_unlock>
 800cf1e:	f026 0607 	bic.w	r6, r6, #7
 800cf22:	1d23      	adds	r3, r4, #4
 800cf24:	1af2      	subs	r2, r6, r3
 800cf26:	d0ae      	beq.n	800ce86 <_malloc_r+0x22>
 800cf28:	1b9b      	subs	r3, r3, r6
 800cf2a:	50a3      	str	r3, [r4, r2]
 800cf2c:	e7ab      	b.n	800ce86 <_malloc_r+0x22>
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	6862      	ldr	r2, [r4, #4]
 800cf32:	d1dd      	bne.n	800cef0 <_malloc_r+0x8c>
 800cf34:	f8c8 2000 	str.w	r2, [r8]
 800cf38:	e7ec      	b.n	800cf14 <_malloc_r+0xb0>
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	6864      	ldr	r4, [r4, #4]
 800cf3e:	e7ac      	b.n	800ce9a <_malloc_r+0x36>
 800cf40:	4634      	mov	r4, r6
 800cf42:	6876      	ldr	r6, [r6, #4]
 800cf44:	e7b4      	b.n	800ceb0 <_malloc_r+0x4c>
 800cf46:	4613      	mov	r3, r2
 800cf48:	e7cc      	b.n	800cee4 <_malloc_r+0x80>
 800cf4a:	230c      	movs	r3, #12
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	f000 f80e 	bl	800cf70 <__malloc_unlock>
 800cf54:	e797      	b.n	800ce86 <_malloc_r+0x22>
 800cf56:	6025      	str	r5, [r4, #0]
 800cf58:	e7dc      	b.n	800cf14 <_malloc_r+0xb0>
 800cf5a:	605b      	str	r3, [r3, #4]
 800cf5c:	deff      	udf	#255	; 0xff
 800cf5e:	bf00      	nop
 800cf60:	20000ecc 	.word	0x20000ecc

0800cf64 <__malloc_lock>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__malloc_lock+0x8>)
 800cf66:	f000 b8bd 	b.w	800d0e4 <__retarget_lock_acquire_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	20001010 	.word	0x20001010

0800cf70 <__malloc_unlock>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__malloc_unlock+0x8>)
 800cf72:	f000 b8b8 	b.w	800d0e6 <__retarget_lock_release_recursive>
 800cf76:	bf00      	nop
 800cf78:	20001010 	.word	0x20001010

0800cf7c <__utoa>:
 800cf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf7e:	b08b      	sub	sp, #44	; 0x2c
 800cf80:	4605      	mov	r5, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	466e      	mov	r6, sp
 800cf86:	4c1d      	ldr	r4, [pc, #116]	; (800cffc <__utoa+0x80>)
 800cf88:	f104 0c20 	add.w	ip, r4, #32
 800cf8c:	4637      	mov	r7, r6
 800cf8e:	6820      	ldr	r0, [r4, #0]
 800cf90:	6861      	ldr	r1, [r4, #4]
 800cf92:	3408      	adds	r4, #8
 800cf94:	c703      	stmia	r7!, {r0, r1}
 800cf96:	4564      	cmp	r4, ip
 800cf98:	463e      	mov	r6, r7
 800cf9a:	d1f7      	bne.n	800cf8c <__utoa+0x10>
 800cf9c:	7921      	ldrb	r1, [r4, #4]
 800cf9e:	6820      	ldr	r0, [r4, #0]
 800cfa0:	7139      	strb	r1, [r7, #4]
 800cfa2:	1e91      	subs	r1, r2, #2
 800cfa4:	2922      	cmp	r1, #34	; 0x22
 800cfa6:	6038      	str	r0, [r7, #0]
 800cfa8:	f04f 0100 	mov.w	r1, #0
 800cfac:	d904      	bls.n	800cfb8 <__utoa+0x3c>
 800cfae:	7019      	strb	r1, [r3, #0]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	b00b      	add	sp, #44	; 0x2c
 800cfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb8:	1e58      	subs	r0, r3, #1
 800cfba:	4684      	mov	ip, r0
 800cfbc:	fbb5 f7f2 	udiv	r7, r5, r2
 800cfc0:	fb02 5617 	mls	r6, r2, r7, r5
 800cfc4:	3628      	adds	r6, #40	; 0x28
 800cfc6:	446e      	add	r6, sp
 800cfc8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cfcc:	460c      	mov	r4, r1
 800cfce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cfd2:	462e      	mov	r6, r5
 800cfd4:	42b2      	cmp	r2, r6
 800cfd6:	463d      	mov	r5, r7
 800cfd8:	f101 0101 	add.w	r1, r1, #1
 800cfdc:	d9ee      	bls.n	800cfbc <__utoa+0x40>
 800cfde:	2200      	movs	r2, #0
 800cfe0:	545a      	strb	r2, [r3, r1]
 800cfe2:	1919      	adds	r1, r3, r4
 800cfe4:	1aa5      	subs	r5, r4, r2
 800cfe6:	42aa      	cmp	r2, r5
 800cfe8:	dae3      	bge.n	800cfb2 <__utoa+0x36>
 800cfea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cfee:	780e      	ldrb	r6, [r1, #0]
 800cff0:	3201      	adds	r2, #1
 800cff2:	7006      	strb	r6, [r0, #0]
 800cff4:	f801 5901 	strb.w	r5, [r1], #-1
 800cff8:	e7f4      	b.n	800cfe4 <__utoa+0x68>
 800cffa:	bf00      	nop
 800cffc:	0800e76a 	.word	0x0800e76a

0800d000 <siprintf>:
 800d000:	b40e      	push	{r1, r2, r3}
 800d002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d006:	b500      	push	{lr}
 800d008:	b09c      	sub	sp, #112	; 0x70
 800d00a:	ab1d      	add	r3, sp, #116	; 0x74
 800d00c:	9002      	str	r0, [sp, #8]
 800d00e:	9006      	str	r0, [sp, #24]
 800d010:	9107      	str	r1, [sp, #28]
 800d012:	9104      	str	r1, [sp, #16]
 800d014:	4808      	ldr	r0, [pc, #32]	; (800d038 <siprintf+0x38>)
 800d016:	4909      	ldr	r1, [pc, #36]	; (800d03c <siprintf+0x3c>)
 800d018:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01c:	9105      	str	r1, [sp, #20]
 800d01e:	6800      	ldr	r0, [r0, #0]
 800d020:	a902      	add	r1, sp, #8
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	f000 f90a 	bl	800d23c <_svfiprintf_r>
 800d028:	2200      	movs	r2, #0
 800d02a:	9b02      	ldr	r3, [sp, #8]
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	b01c      	add	sp, #112	; 0x70
 800d030:	f85d eb04 	ldr.w	lr, [sp], #4
 800d034:	b003      	add	sp, #12
 800d036:	4770      	bx	lr
 800d038:	20000a10 	.word	0x20000a10
 800d03c:	ffff0208 	.word	0xffff0208

0800d040 <memset>:
 800d040:	4603      	mov	r3, r0
 800d042:	4402      	add	r2, r0
 800d044:	4293      	cmp	r3, r2
 800d046:	d100      	bne.n	800d04a <memset+0xa>
 800d048:	4770      	bx	lr
 800d04a:	f803 1b01 	strb.w	r1, [r3], #1
 800d04e:	e7f9      	b.n	800d044 <memset+0x4>

0800d050 <strcat>:
 800d050:	4602      	mov	r2, r0
 800d052:	b510      	push	{r4, lr}
 800d054:	7814      	ldrb	r4, [r2, #0]
 800d056:	4613      	mov	r3, r2
 800d058:	3201      	adds	r2, #1
 800d05a:	2c00      	cmp	r4, #0
 800d05c:	d1fa      	bne.n	800d054 <strcat+0x4>
 800d05e:	3b01      	subs	r3, #1
 800d060:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d064:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d068:	2a00      	cmp	r2, #0
 800d06a:	d1f9      	bne.n	800d060 <strcat+0x10>
 800d06c:	bd10      	pop	{r4, pc}
	...

0800d070 <_sbrk_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	2300      	movs	r3, #0
 800d074:	4d05      	ldr	r5, [pc, #20]	; (800d08c <_sbrk_r+0x1c>)
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	602b      	str	r3, [r5, #0]
 800d07c:	f7fc f808 	bl	8009090 <_sbrk>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_sbrk_r+0x1a>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_sbrk_r+0x1a>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	2000100c 	.word	0x2000100c

0800d090 <__errno>:
 800d090:	4b01      	ldr	r3, [pc, #4]	; (800d098 <__errno+0x8>)
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	20000a10 	.word	0x20000a10

0800d09c <__libc_init_array>:
 800d09c:	b570      	push	{r4, r5, r6, lr}
 800d09e:	2600      	movs	r6, #0
 800d0a0:	4d0c      	ldr	r5, [pc, #48]	; (800d0d4 <__libc_init_array+0x38>)
 800d0a2:	4c0d      	ldr	r4, [pc, #52]	; (800d0d8 <__libc_init_array+0x3c>)
 800d0a4:	1b64      	subs	r4, r4, r5
 800d0a6:	10a4      	asrs	r4, r4, #2
 800d0a8:	42a6      	cmp	r6, r4
 800d0aa:	d109      	bne.n	800d0c0 <__libc_init_array+0x24>
 800d0ac:	f000 fbc6 	bl	800d83c <_init>
 800d0b0:	2600      	movs	r6, #0
 800d0b2:	4d0a      	ldr	r5, [pc, #40]	; (800d0dc <__libc_init_array+0x40>)
 800d0b4:	4c0a      	ldr	r4, [pc, #40]	; (800d0e0 <__libc_init_array+0x44>)
 800d0b6:	1b64      	subs	r4, r4, r5
 800d0b8:	10a4      	asrs	r4, r4, #2
 800d0ba:	42a6      	cmp	r6, r4
 800d0bc:	d105      	bne.n	800d0ca <__libc_init_array+0x2e>
 800d0be:	bd70      	pop	{r4, r5, r6, pc}
 800d0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c4:	4798      	blx	r3
 800d0c6:	3601      	adds	r6, #1
 800d0c8:	e7ee      	b.n	800d0a8 <__libc_init_array+0xc>
 800d0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ce:	4798      	blx	r3
 800d0d0:	3601      	adds	r6, #1
 800d0d2:	e7f2      	b.n	800d0ba <__libc_init_array+0x1e>
 800d0d4:	0800e7c4 	.word	0x0800e7c4
 800d0d8:	0800e7c4 	.word	0x0800e7c4
 800d0dc:	0800e7c4 	.word	0x0800e7c4
 800d0e0:	0800e7c8 	.word	0x0800e7c8

0800d0e4 <__retarget_lock_acquire_recursive>:
 800d0e4:	4770      	bx	lr

0800d0e6 <__retarget_lock_release_recursive>:
 800d0e6:	4770      	bx	lr

0800d0e8 <strcpy>:
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ee:	f803 2b01 	strb.w	r2, [r3], #1
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	d1f9      	bne.n	800d0ea <strcpy+0x2>
 800d0f6:	4770      	bx	lr

0800d0f8 <_free_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	2900      	cmp	r1, #0
 800d0fe:	d040      	beq.n	800d182 <_free_r+0x8a>
 800d100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d104:	1f0c      	subs	r4, r1, #4
 800d106:	2b00      	cmp	r3, #0
 800d108:	bfb8      	it	lt
 800d10a:	18e4      	addlt	r4, r4, r3
 800d10c:	f7ff ff2a 	bl	800cf64 <__malloc_lock>
 800d110:	4a1c      	ldr	r2, [pc, #112]	; (800d184 <_free_r+0x8c>)
 800d112:	6813      	ldr	r3, [r2, #0]
 800d114:	b933      	cbnz	r3, 800d124 <_free_r+0x2c>
 800d116:	6063      	str	r3, [r4, #4]
 800d118:	6014      	str	r4, [r2, #0]
 800d11a:	4628      	mov	r0, r5
 800d11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d120:	f7ff bf26 	b.w	800cf70 <__malloc_unlock>
 800d124:	42a3      	cmp	r3, r4
 800d126:	d908      	bls.n	800d13a <_free_r+0x42>
 800d128:	6820      	ldr	r0, [r4, #0]
 800d12a:	1821      	adds	r1, r4, r0
 800d12c:	428b      	cmp	r3, r1
 800d12e:	bf01      	itttt	eq
 800d130:	6819      	ldreq	r1, [r3, #0]
 800d132:	685b      	ldreq	r3, [r3, #4]
 800d134:	1809      	addeq	r1, r1, r0
 800d136:	6021      	streq	r1, [r4, #0]
 800d138:	e7ed      	b.n	800d116 <_free_r+0x1e>
 800d13a:	461a      	mov	r2, r3
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	b10b      	cbz	r3, 800d144 <_free_r+0x4c>
 800d140:	42a3      	cmp	r3, r4
 800d142:	d9fa      	bls.n	800d13a <_free_r+0x42>
 800d144:	6811      	ldr	r1, [r2, #0]
 800d146:	1850      	adds	r0, r2, r1
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d10b      	bne.n	800d164 <_free_r+0x6c>
 800d14c:	6820      	ldr	r0, [r4, #0]
 800d14e:	4401      	add	r1, r0
 800d150:	1850      	adds	r0, r2, r1
 800d152:	4283      	cmp	r3, r0
 800d154:	6011      	str	r1, [r2, #0]
 800d156:	d1e0      	bne.n	800d11a <_free_r+0x22>
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	4408      	add	r0, r1
 800d15e:	6010      	str	r0, [r2, #0]
 800d160:	6053      	str	r3, [r2, #4]
 800d162:	e7da      	b.n	800d11a <_free_r+0x22>
 800d164:	d902      	bls.n	800d16c <_free_r+0x74>
 800d166:	230c      	movs	r3, #12
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	e7d6      	b.n	800d11a <_free_r+0x22>
 800d16c:	6820      	ldr	r0, [r4, #0]
 800d16e:	1821      	adds	r1, r4, r0
 800d170:	428b      	cmp	r3, r1
 800d172:	bf01      	itttt	eq
 800d174:	6819      	ldreq	r1, [r3, #0]
 800d176:	685b      	ldreq	r3, [r3, #4]
 800d178:	1809      	addeq	r1, r1, r0
 800d17a:	6021      	streq	r1, [r4, #0]
 800d17c:	6063      	str	r3, [r4, #4]
 800d17e:	6054      	str	r4, [r2, #4]
 800d180:	e7cb      	b.n	800d11a <_free_r+0x22>
 800d182:	bd38      	pop	{r3, r4, r5, pc}
 800d184:	20000ecc 	.word	0x20000ecc

0800d188 <__ssputs_r>:
 800d188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	461f      	mov	r7, r3
 800d18e:	688e      	ldr	r6, [r1, #8]
 800d190:	4682      	mov	sl, r0
 800d192:	42be      	cmp	r6, r7
 800d194:	460c      	mov	r4, r1
 800d196:	4690      	mov	r8, r2
 800d198:	680b      	ldr	r3, [r1, #0]
 800d19a:	d82c      	bhi.n	800d1f6 <__ssputs_r+0x6e>
 800d19c:	898a      	ldrh	r2, [r1, #12]
 800d19e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1a2:	d026      	beq.n	800d1f2 <__ssputs_r+0x6a>
 800d1a4:	6965      	ldr	r5, [r4, #20]
 800d1a6:	6909      	ldr	r1, [r1, #16]
 800d1a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ac:	eba3 0901 	sub.w	r9, r3, r1
 800d1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1b4:	1c7b      	adds	r3, r7, #1
 800d1b6:	444b      	add	r3, r9
 800d1b8:	106d      	asrs	r5, r5, #1
 800d1ba:	429d      	cmp	r5, r3
 800d1bc:	bf38      	it	cc
 800d1be:	461d      	movcc	r5, r3
 800d1c0:	0553      	lsls	r3, r2, #21
 800d1c2:	d527      	bpl.n	800d214 <__ssputs_r+0x8c>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	f7ff fe4d 	bl	800ce64 <_malloc_r>
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	b360      	cbz	r0, 800d228 <__ssputs_r+0xa0>
 800d1ce:	464a      	mov	r2, r9
 800d1d0:	6921      	ldr	r1, [r4, #16]
 800d1d2:	f000 faed 	bl	800d7b0 <memcpy>
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	6126      	str	r6, [r4, #16]
 800d1e4:	444e      	add	r6, r9
 800d1e6:	6026      	str	r6, [r4, #0]
 800d1e8:	463e      	mov	r6, r7
 800d1ea:	6165      	str	r5, [r4, #20]
 800d1ec:	eba5 0509 	sub.w	r5, r5, r9
 800d1f0:	60a5      	str	r5, [r4, #8]
 800d1f2:	42be      	cmp	r6, r7
 800d1f4:	d900      	bls.n	800d1f8 <__ssputs_r+0x70>
 800d1f6:	463e      	mov	r6, r7
 800d1f8:	4632      	mov	r2, r6
 800d1fa:	4641      	mov	r1, r8
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	f000 faaf 	bl	800d760 <memmove>
 800d202:	2000      	movs	r0, #0
 800d204:	68a3      	ldr	r3, [r4, #8]
 800d206:	1b9b      	subs	r3, r3, r6
 800d208:	60a3      	str	r3, [r4, #8]
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	4433      	add	r3, r6
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d214:	462a      	mov	r2, r5
 800d216:	f000 fad9 	bl	800d7cc <_realloc_r>
 800d21a:	4606      	mov	r6, r0
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d1e0      	bne.n	800d1e2 <__ssputs_r+0x5a>
 800d220:	4650      	mov	r0, sl
 800d222:	6921      	ldr	r1, [r4, #16]
 800d224:	f7ff ff68 	bl	800d0f8 <_free_r>
 800d228:	230c      	movs	r3, #12
 800d22a:	f8ca 3000 	str.w	r3, [sl]
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d238:	81a3      	strh	r3, [r4, #12]
 800d23a:	e7e9      	b.n	800d210 <__ssputs_r+0x88>

0800d23c <_svfiprintf_r>:
 800d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	4698      	mov	r8, r3
 800d242:	898b      	ldrh	r3, [r1, #12]
 800d244:	4607      	mov	r7, r0
 800d246:	061b      	lsls	r3, r3, #24
 800d248:	460d      	mov	r5, r1
 800d24a:	4614      	mov	r4, r2
 800d24c:	b09d      	sub	sp, #116	; 0x74
 800d24e:	d50e      	bpl.n	800d26e <_svfiprintf_r+0x32>
 800d250:	690b      	ldr	r3, [r1, #16]
 800d252:	b963      	cbnz	r3, 800d26e <_svfiprintf_r+0x32>
 800d254:	2140      	movs	r1, #64	; 0x40
 800d256:	f7ff fe05 	bl	800ce64 <_malloc_r>
 800d25a:	6028      	str	r0, [r5, #0]
 800d25c:	6128      	str	r0, [r5, #16]
 800d25e:	b920      	cbnz	r0, 800d26a <_svfiprintf_r+0x2e>
 800d260:	230c      	movs	r3, #12
 800d262:	603b      	str	r3, [r7, #0]
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	e0d0      	b.n	800d40c <_svfiprintf_r+0x1d0>
 800d26a:	2340      	movs	r3, #64	; 0x40
 800d26c:	616b      	str	r3, [r5, #20]
 800d26e:	2300      	movs	r3, #0
 800d270:	9309      	str	r3, [sp, #36]	; 0x24
 800d272:	2320      	movs	r3, #32
 800d274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d278:	2330      	movs	r3, #48	; 0x30
 800d27a:	f04f 0901 	mov.w	r9, #1
 800d27e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d282:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d424 <_svfiprintf_r+0x1e8>
 800d286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d28a:	4623      	mov	r3, r4
 800d28c:	469a      	mov	sl, r3
 800d28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d292:	b10a      	cbz	r2, 800d298 <_svfiprintf_r+0x5c>
 800d294:	2a25      	cmp	r2, #37	; 0x25
 800d296:	d1f9      	bne.n	800d28c <_svfiprintf_r+0x50>
 800d298:	ebba 0b04 	subs.w	fp, sl, r4
 800d29c:	d00b      	beq.n	800d2b6 <_svfiprintf_r+0x7a>
 800d29e:	465b      	mov	r3, fp
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	f7ff ff6f 	bl	800d188 <__ssputs_r>
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	f000 80a9 	beq.w	800d402 <_svfiprintf_r+0x1c6>
 800d2b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2b2:	445a      	add	r2, fp
 800d2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 80a1 	beq.w	800d402 <_svfiprintf_r+0x1c6>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ca:	f10a 0a01 	add.w	sl, sl, #1
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	9307      	str	r3, [sp, #28]
 800d2d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2d6:	931a      	str	r3, [sp, #104]	; 0x68
 800d2d8:	4654      	mov	r4, sl
 800d2da:	2205      	movs	r2, #5
 800d2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e0:	4850      	ldr	r0, [pc, #320]	; (800d424 <_svfiprintf_r+0x1e8>)
 800d2e2:	f000 fa57 	bl	800d794 <memchr>
 800d2e6:	9a04      	ldr	r2, [sp, #16]
 800d2e8:	b9d8      	cbnz	r0, 800d322 <_svfiprintf_r+0xe6>
 800d2ea:	06d0      	lsls	r0, r2, #27
 800d2ec:	bf44      	itt	mi
 800d2ee:	2320      	movmi	r3, #32
 800d2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2f4:	0711      	lsls	r1, r2, #28
 800d2f6:	bf44      	itt	mi
 800d2f8:	232b      	movmi	r3, #43	; 0x2b
 800d2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d302:	2b2a      	cmp	r3, #42	; 0x2a
 800d304:	d015      	beq.n	800d332 <_svfiprintf_r+0xf6>
 800d306:	4654      	mov	r4, sl
 800d308:	2000      	movs	r0, #0
 800d30a:	f04f 0c0a 	mov.w	ip, #10
 800d30e:	9a07      	ldr	r2, [sp, #28]
 800d310:	4621      	mov	r1, r4
 800d312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d316:	3b30      	subs	r3, #48	; 0x30
 800d318:	2b09      	cmp	r3, #9
 800d31a:	d94d      	bls.n	800d3b8 <_svfiprintf_r+0x17c>
 800d31c:	b1b0      	cbz	r0, 800d34c <_svfiprintf_r+0x110>
 800d31e:	9207      	str	r2, [sp, #28]
 800d320:	e014      	b.n	800d34c <_svfiprintf_r+0x110>
 800d322:	eba0 0308 	sub.w	r3, r0, r8
 800d326:	fa09 f303 	lsl.w	r3, r9, r3
 800d32a:	4313      	orrs	r3, r2
 800d32c:	46a2      	mov	sl, r4
 800d32e:	9304      	str	r3, [sp, #16]
 800d330:	e7d2      	b.n	800d2d8 <_svfiprintf_r+0x9c>
 800d332:	9b03      	ldr	r3, [sp, #12]
 800d334:	1d19      	adds	r1, r3, #4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	9103      	str	r1, [sp, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	bfbb      	ittet	lt
 800d33e:	425b      	neglt	r3, r3
 800d340:	f042 0202 	orrlt.w	r2, r2, #2
 800d344:	9307      	strge	r3, [sp, #28]
 800d346:	9307      	strlt	r3, [sp, #28]
 800d348:	bfb8      	it	lt
 800d34a:	9204      	strlt	r2, [sp, #16]
 800d34c:	7823      	ldrb	r3, [r4, #0]
 800d34e:	2b2e      	cmp	r3, #46	; 0x2e
 800d350:	d10c      	bne.n	800d36c <_svfiprintf_r+0x130>
 800d352:	7863      	ldrb	r3, [r4, #1]
 800d354:	2b2a      	cmp	r3, #42	; 0x2a
 800d356:	d134      	bne.n	800d3c2 <_svfiprintf_r+0x186>
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	3402      	adds	r4, #2
 800d35c:	1d1a      	adds	r2, r3, #4
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	9203      	str	r2, [sp, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	bfb8      	it	lt
 800d366:	f04f 33ff 	movlt.w	r3, #4294967295
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d428 <_svfiprintf_r+0x1ec>
 800d370:	2203      	movs	r2, #3
 800d372:	4650      	mov	r0, sl
 800d374:	7821      	ldrb	r1, [r4, #0]
 800d376:	f000 fa0d 	bl	800d794 <memchr>
 800d37a:	b138      	cbz	r0, 800d38c <_svfiprintf_r+0x150>
 800d37c:	2240      	movs	r2, #64	; 0x40
 800d37e:	9b04      	ldr	r3, [sp, #16]
 800d380:	eba0 000a 	sub.w	r0, r0, sl
 800d384:	4082      	lsls	r2, r0
 800d386:	4313      	orrs	r3, r2
 800d388:	3401      	adds	r4, #1
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d390:	2206      	movs	r2, #6
 800d392:	4826      	ldr	r0, [pc, #152]	; (800d42c <_svfiprintf_r+0x1f0>)
 800d394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d398:	f000 f9fc 	bl	800d794 <memchr>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d038      	beq.n	800d412 <_svfiprintf_r+0x1d6>
 800d3a0:	4b23      	ldr	r3, [pc, #140]	; (800d430 <_svfiprintf_r+0x1f4>)
 800d3a2:	bb1b      	cbnz	r3, 800d3ec <_svfiprintf_r+0x1b0>
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	3307      	adds	r3, #7
 800d3a8:	f023 0307 	bic.w	r3, r3, #7
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	9303      	str	r3, [sp, #12]
 800d3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b2:	4433      	add	r3, r6
 800d3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b6:	e768      	b.n	800d28a <_svfiprintf_r+0x4e>
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3c0:	e7a6      	b.n	800d310 <_svfiprintf_r+0xd4>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f04f 0c0a 	mov.w	ip, #10
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3d4:	3a30      	subs	r2, #48	; 0x30
 800d3d6:	2a09      	cmp	r2, #9
 800d3d8:	d903      	bls.n	800d3e2 <_svfiprintf_r+0x1a6>
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d0c6      	beq.n	800d36c <_svfiprintf_r+0x130>
 800d3de:	9105      	str	r1, [sp, #20]
 800d3e0:	e7c4      	b.n	800d36c <_svfiprintf_r+0x130>
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ea:	e7f0      	b.n	800d3ce <_svfiprintf_r+0x192>
 800d3ec:	ab03      	add	r3, sp, #12
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	462a      	mov	r2, r5
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	4b0f      	ldr	r3, [pc, #60]	; (800d434 <_svfiprintf_r+0x1f8>)
 800d3f6:	a904      	add	r1, sp, #16
 800d3f8:	f3af 8000 	nop.w
 800d3fc:	1c42      	adds	r2, r0, #1
 800d3fe:	4606      	mov	r6, r0
 800d400:	d1d6      	bne.n	800d3b0 <_svfiprintf_r+0x174>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	065b      	lsls	r3, r3, #25
 800d406:	f53f af2d 	bmi.w	800d264 <_svfiprintf_r+0x28>
 800d40a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d40c:	b01d      	add	sp, #116	; 0x74
 800d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d412:	ab03      	add	r3, sp, #12
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	462a      	mov	r2, r5
 800d418:	4638      	mov	r0, r7
 800d41a:	4b06      	ldr	r3, [pc, #24]	; (800d434 <_svfiprintf_r+0x1f8>)
 800d41c:	a904      	add	r1, sp, #16
 800d41e:	f000 f87d 	bl	800d51c <_printf_i>
 800d422:	e7eb      	b.n	800d3fc <_svfiprintf_r+0x1c0>
 800d424:	0800e78f 	.word	0x0800e78f
 800d428:	0800e795 	.word	0x0800e795
 800d42c:	0800e799 	.word	0x0800e799
 800d430:	00000000 	.word	0x00000000
 800d434:	0800d189 	.word	0x0800d189

0800d438 <_printf_common>:
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	4616      	mov	r6, r2
 800d43e:	4699      	mov	r9, r3
 800d440:	688a      	ldr	r2, [r1, #8]
 800d442:	690b      	ldr	r3, [r1, #16]
 800d444:	4607      	mov	r7, r0
 800d446:	4293      	cmp	r3, r2
 800d448:	bfb8      	it	lt
 800d44a:	4613      	movlt	r3, r2
 800d44c:	6033      	str	r3, [r6, #0]
 800d44e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d452:	460c      	mov	r4, r1
 800d454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d458:	b10a      	cbz	r2, 800d45e <_printf_common+0x26>
 800d45a:	3301      	adds	r3, #1
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	0699      	lsls	r1, r3, #26
 800d462:	bf42      	ittt	mi
 800d464:	6833      	ldrmi	r3, [r6, #0]
 800d466:	3302      	addmi	r3, #2
 800d468:	6033      	strmi	r3, [r6, #0]
 800d46a:	6825      	ldr	r5, [r4, #0]
 800d46c:	f015 0506 	ands.w	r5, r5, #6
 800d470:	d106      	bne.n	800d480 <_printf_common+0x48>
 800d472:	f104 0a19 	add.w	sl, r4, #25
 800d476:	68e3      	ldr	r3, [r4, #12]
 800d478:	6832      	ldr	r2, [r6, #0]
 800d47a:	1a9b      	subs	r3, r3, r2
 800d47c:	42ab      	cmp	r3, r5
 800d47e:	dc2b      	bgt.n	800d4d8 <_printf_common+0xa0>
 800d480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d484:	1e13      	subs	r3, r2, #0
 800d486:	6822      	ldr	r2, [r4, #0]
 800d488:	bf18      	it	ne
 800d48a:	2301      	movne	r3, #1
 800d48c:	0692      	lsls	r2, r2, #26
 800d48e:	d430      	bmi.n	800d4f2 <_printf_common+0xba>
 800d490:	4649      	mov	r1, r9
 800d492:	4638      	mov	r0, r7
 800d494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d498:	47c0      	blx	r8
 800d49a:	3001      	adds	r0, #1
 800d49c:	d023      	beq.n	800d4e6 <_printf_common+0xae>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	6922      	ldr	r2, [r4, #16]
 800d4a2:	f003 0306 	and.w	r3, r3, #6
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	bf14      	ite	ne
 800d4aa:	2500      	movne	r5, #0
 800d4ac:	6833      	ldreq	r3, [r6, #0]
 800d4ae:	f04f 0600 	mov.w	r6, #0
 800d4b2:	bf08      	it	eq
 800d4b4:	68e5      	ldreq	r5, [r4, #12]
 800d4b6:	f104 041a 	add.w	r4, r4, #26
 800d4ba:	bf08      	it	eq
 800d4bc:	1aed      	subeq	r5, r5, r3
 800d4be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d4c2:	bf08      	it	eq
 800d4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	bfc4      	itt	gt
 800d4cc:	1a9b      	subgt	r3, r3, r2
 800d4ce:	18ed      	addgt	r5, r5, r3
 800d4d0:	42b5      	cmp	r5, r6
 800d4d2:	d11a      	bne.n	800d50a <_printf_common+0xd2>
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	e008      	b.n	800d4ea <_printf_common+0xb2>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	4652      	mov	r2, sl
 800d4dc:	4649      	mov	r1, r9
 800d4de:	4638      	mov	r0, r7
 800d4e0:	47c0      	blx	r8
 800d4e2:	3001      	adds	r0, #1
 800d4e4:	d103      	bne.n	800d4ee <_printf_common+0xb6>
 800d4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ee:	3501      	adds	r5, #1
 800d4f0:	e7c1      	b.n	800d476 <_printf_common+0x3e>
 800d4f2:	2030      	movs	r0, #48	; 0x30
 800d4f4:	18e1      	adds	r1, r4, r3
 800d4f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4fa:	1c5a      	adds	r2, r3, #1
 800d4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d500:	4422      	add	r2, r4
 800d502:	3302      	adds	r3, #2
 800d504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d508:	e7c2      	b.n	800d490 <_printf_common+0x58>
 800d50a:	2301      	movs	r3, #1
 800d50c:	4622      	mov	r2, r4
 800d50e:	4649      	mov	r1, r9
 800d510:	4638      	mov	r0, r7
 800d512:	47c0      	blx	r8
 800d514:	3001      	adds	r0, #1
 800d516:	d0e6      	beq.n	800d4e6 <_printf_common+0xae>
 800d518:	3601      	adds	r6, #1
 800d51a:	e7d9      	b.n	800d4d0 <_printf_common+0x98>

0800d51c <_printf_i>:
 800d51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d520:	7e0f      	ldrb	r7, [r1, #24]
 800d522:	4691      	mov	r9, r2
 800d524:	2f78      	cmp	r7, #120	; 0x78
 800d526:	4680      	mov	r8, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	469a      	mov	sl, r3
 800d52c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d52e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d532:	d807      	bhi.n	800d544 <_printf_i+0x28>
 800d534:	2f62      	cmp	r7, #98	; 0x62
 800d536:	d80a      	bhi.n	800d54e <_printf_i+0x32>
 800d538:	2f00      	cmp	r7, #0
 800d53a:	f000 80d5 	beq.w	800d6e8 <_printf_i+0x1cc>
 800d53e:	2f58      	cmp	r7, #88	; 0x58
 800d540:	f000 80c1 	beq.w	800d6c6 <_printf_i+0x1aa>
 800d544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d54c:	e03a      	b.n	800d5c4 <_printf_i+0xa8>
 800d54e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d552:	2b15      	cmp	r3, #21
 800d554:	d8f6      	bhi.n	800d544 <_printf_i+0x28>
 800d556:	a101      	add	r1, pc, #4	; (adr r1, 800d55c <_printf_i+0x40>)
 800d558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d55c:	0800d5b5 	.word	0x0800d5b5
 800d560:	0800d5c9 	.word	0x0800d5c9
 800d564:	0800d545 	.word	0x0800d545
 800d568:	0800d545 	.word	0x0800d545
 800d56c:	0800d545 	.word	0x0800d545
 800d570:	0800d545 	.word	0x0800d545
 800d574:	0800d5c9 	.word	0x0800d5c9
 800d578:	0800d545 	.word	0x0800d545
 800d57c:	0800d545 	.word	0x0800d545
 800d580:	0800d545 	.word	0x0800d545
 800d584:	0800d545 	.word	0x0800d545
 800d588:	0800d6cf 	.word	0x0800d6cf
 800d58c:	0800d5f5 	.word	0x0800d5f5
 800d590:	0800d689 	.word	0x0800d689
 800d594:	0800d545 	.word	0x0800d545
 800d598:	0800d545 	.word	0x0800d545
 800d59c:	0800d6f1 	.word	0x0800d6f1
 800d5a0:	0800d545 	.word	0x0800d545
 800d5a4:	0800d5f5 	.word	0x0800d5f5
 800d5a8:	0800d545 	.word	0x0800d545
 800d5ac:	0800d545 	.word	0x0800d545
 800d5b0:	0800d691 	.word	0x0800d691
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	1d1a      	adds	r2, r3, #4
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	602a      	str	r2, [r5, #0]
 800d5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e0a0      	b.n	800d70a <_printf_i+0x1ee>
 800d5c8:	6820      	ldr	r0, [r4, #0]
 800d5ca:	682b      	ldr	r3, [r5, #0]
 800d5cc:	0607      	lsls	r7, r0, #24
 800d5ce:	f103 0104 	add.w	r1, r3, #4
 800d5d2:	6029      	str	r1, [r5, #0]
 800d5d4:	d501      	bpl.n	800d5da <_printf_i+0xbe>
 800d5d6:	681e      	ldr	r6, [r3, #0]
 800d5d8:	e003      	b.n	800d5e2 <_printf_i+0xc6>
 800d5da:	0646      	lsls	r6, r0, #25
 800d5dc:	d5fb      	bpl.n	800d5d6 <_printf_i+0xba>
 800d5de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d5e2:	2e00      	cmp	r6, #0
 800d5e4:	da03      	bge.n	800d5ee <_printf_i+0xd2>
 800d5e6:	232d      	movs	r3, #45	; 0x2d
 800d5e8:	4276      	negs	r6, r6
 800d5ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5ee:	230a      	movs	r3, #10
 800d5f0:	4859      	ldr	r0, [pc, #356]	; (800d758 <_printf_i+0x23c>)
 800d5f2:	e012      	b.n	800d61a <_printf_i+0xfe>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	6820      	ldr	r0, [r4, #0]
 800d5f8:	1d19      	adds	r1, r3, #4
 800d5fa:	6029      	str	r1, [r5, #0]
 800d5fc:	0605      	lsls	r5, r0, #24
 800d5fe:	d501      	bpl.n	800d604 <_printf_i+0xe8>
 800d600:	681e      	ldr	r6, [r3, #0]
 800d602:	e002      	b.n	800d60a <_printf_i+0xee>
 800d604:	0641      	lsls	r1, r0, #25
 800d606:	d5fb      	bpl.n	800d600 <_printf_i+0xe4>
 800d608:	881e      	ldrh	r6, [r3, #0]
 800d60a:	2f6f      	cmp	r7, #111	; 0x6f
 800d60c:	bf0c      	ite	eq
 800d60e:	2308      	moveq	r3, #8
 800d610:	230a      	movne	r3, #10
 800d612:	4851      	ldr	r0, [pc, #324]	; (800d758 <_printf_i+0x23c>)
 800d614:	2100      	movs	r1, #0
 800d616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d61a:	6865      	ldr	r5, [r4, #4]
 800d61c:	2d00      	cmp	r5, #0
 800d61e:	bfa8      	it	ge
 800d620:	6821      	ldrge	r1, [r4, #0]
 800d622:	60a5      	str	r5, [r4, #8]
 800d624:	bfa4      	itt	ge
 800d626:	f021 0104 	bicge.w	r1, r1, #4
 800d62a:	6021      	strge	r1, [r4, #0]
 800d62c:	b90e      	cbnz	r6, 800d632 <_printf_i+0x116>
 800d62e:	2d00      	cmp	r5, #0
 800d630:	d04b      	beq.n	800d6ca <_printf_i+0x1ae>
 800d632:	4615      	mov	r5, r2
 800d634:	fbb6 f1f3 	udiv	r1, r6, r3
 800d638:	fb03 6711 	mls	r7, r3, r1, r6
 800d63c:	5dc7      	ldrb	r7, [r0, r7]
 800d63e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d642:	4637      	mov	r7, r6
 800d644:	42bb      	cmp	r3, r7
 800d646:	460e      	mov	r6, r1
 800d648:	d9f4      	bls.n	800d634 <_printf_i+0x118>
 800d64a:	2b08      	cmp	r3, #8
 800d64c:	d10b      	bne.n	800d666 <_printf_i+0x14a>
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	07de      	lsls	r6, r3, #31
 800d652:	d508      	bpl.n	800d666 <_printf_i+0x14a>
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	6861      	ldr	r1, [r4, #4]
 800d658:	4299      	cmp	r1, r3
 800d65a:	bfde      	ittt	le
 800d65c:	2330      	movle	r3, #48	; 0x30
 800d65e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d662:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d666:	1b52      	subs	r2, r2, r5
 800d668:	6122      	str	r2, [r4, #16]
 800d66a:	464b      	mov	r3, r9
 800d66c:	4621      	mov	r1, r4
 800d66e:	4640      	mov	r0, r8
 800d670:	f8cd a000 	str.w	sl, [sp]
 800d674:	aa03      	add	r2, sp, #12
 800d676:	f7ff fedf 	bl	800d438 <_printf_common>
 800d67a:	3001      	adds	r0, #1
 800d67c:	d14a      	bne.n	800d714 <_printf_i+0x1f8>
 800d67e:	f04f 30ff 	mov.w	r0, #4294967295
 800d682:	b004      	add	sp, #16
 800d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	f043 0320 	orr.w	r3, r3, #32
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	2778      	movs	r7, #120	; 0x78
 800d692:	4832      	ldr	r0, [pc, #200]	; (800d75c <_printf_i+0x240>)
 800d694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	6829      	ldr	r1, [r5, #0]
 800d69c:	061f      	lsls	r7, r3, #24
 800d69e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6a2:	d402      	bmi.n	800d6aa <_printf_i+0x18e>
 800d6a4:	065f      	lsls	r7, r3, #25
 800d6a6:	bf48      	it	mi
 800d6a8:	b2b6      	uxthmi	r6, r6
 800d6aa:	07df      	lsls	r7, r3, #31
 800d6ac:	bf48      	it	mi
 800d6ae:	f043 0320 	orrmi.w	r3, r3, #32
 800d6b2:	6029      	str	r1, [r5, #0]
 800d6b4:	bf48      	it	mi
 800d6b6:	6023      	strmi	r3, [r4, #0]
 800d6b8:	b91e      	cbnz	r6, 800d6c2 <_printf_i+0x1a6>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	f023 0320 	bic.w	r3, r3, #32
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	2310      	movs	r3, #16
 800d6c4:	e7a6      	b.n	800d614 <_printf_i+0xf8>
 800d6c6:	4824      	ldr	r0, [pc, #144]	; (800d758 <_printf_i+0x23c>)
 800d6c8:	e7e4      	b.n	800d694 <_printf_i+0x178>
 800d6ca:	4615      	mov	r5, r2
 800d6cc:	e7bd      	b.n	800d64a <_printf_i+0x12e>
 800d6ce:	682b      	ldr	r3, [r5, #0]
 800d6d0:	6826      	ldr	r6, [r4, #0]
 800d6d2:	1d18      	adds	r0, r3, #4
 800d6d4:	6961      	ldr	r1, [r4, #20]
 800d6d6:	6028      	str	r0, [r5, #0]
 800d6d8:	0635      	lsls	r5, r6, #24
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	d501      	bpl.n	800d6e2 <_printf_i+0x1c6>
 800d6de:	6019      	str	r1, [r3, #0]
 800d6e0:	e002      	b.n	800d6e8 <_printf_i+0x1cc>
 800d6e2:	0670      	lsls	r0, r6, #25
 800d6e4:	d5fb      	bpl.n	800d6de <_printf_i+0x1c2>
 800d6e6:	8019      	strh	r1, [r3, #0]
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4615      	mov	r5, r2
 800d6ec:	6123      	str	r3, [r4, #16]
 800d6ee:	e7bc      	b.n	800d66a <_printf_i+0x14e>
 800d6f0:	682b      	ldr	r3, [r5, #0]
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	1d1a      	adds	r2, r3, #4
 800d6f6:	602a      	str	r2, [r5, #0]
 800d6f8:	681d      	ldr	r5, [r3, #0]
 800d6fa:	6862      	ldr	r2, [r4, #4]
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f000 f849 	bl	800d794 <memchr>
 800d702:	b108      	cbz	r0, 800d708 <_printf_i+0x1ec>
 800d704:	1b40      	subs	r0, r0, r5
 800d706:	6060      	str	r0, [r4, #4]
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	6123      	str	r3, [r4, #16]
 800d70c:	2300      	movs	r3, #0
 800d70e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d712:	e7aa      	b.n	800d66a <_printf_i+0x14e>
 800d714:	462a      	mov	r2, r5
 800d716:	4649      	mov	r1, r9
 800d718:	4640      	mov	r0, r8
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	47d0      	blx	sl
 800d71e:	3001      	adds	r0, #1
 800d720:	d0ad      	beq.n	800d67e <_printf_i+0x162>
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	079b      	lsls	r3, r3, #30
 800d726:	d413      	bmi.n	800d750 <_printf_i+0x234>
 800d728:	68e0      	ldr	r0, [r4, #12]
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	4298      	cmp	r0, r3
 800d72e:	bfb8      	it	lt
 800d730:	4618      	movlt	r0, r3
 800d732:	e7a6      	b.n	800d682 <_printf_i+0x166>
 800d734:	2301      	movs	r3, #1
 800d736:	4632      	mov	r2, r6
 800d738:	4649      	mov	r1, r9
 800d73a:	4640      	mov	r0, r8
 800d73c:	47d0      	blx	sl
 800d73e:	3001      	adds	r0, #1
 800d740:	d09d      	beq.n	800d67e <_printf_i+0x162>
 800d742:	3501      	adds	r5, #1
 800d744:	68e3      	ldr	r3, [r4, #12]
 800d746:	9903      	ldr	r1, [sp, #12]
 800d748:	1a5b      	subs	r3, r3, r1
 800d74a:	42ab      	cmp	r3, r5
 800d74c:	dcf2      	bgt.n	800d734 <_printf_i+0x218>
 800d74e:	e7eb      	b.n	800d728 <_printf_i+0x20c>
 800d750:	2500      	movs	r5, #0
 800d752:	f104 0619 	add.w	r6, r4, #25
 800d756:	e7f5      	b.n	800d744 <_printf_i+0x228>
 800d758:	0800e7a0 	.word	0x0800e7a0
 800d75c:	0800e7b1 	.word	0x0800e7b1

0800d760 <memmove>:
 800d760:	4288      	cmp	r0, r1
 800d762:	b510      	push	{r4, lr}
 800d764:	eb01 0402 	add.w	r4, r1, r2
 800d768:	d902      	bls.n	800d770 <memmove+0x10>
 800d76a:	4284      	cmp	r4, r0
 800d76c:	4623      	mov	r3, r4
 800d76e:	d807      	bhi.n	800d780 <memmove+0x20>
 800d770:	1e43      	subs	r3, r0, #1
 800d772:	42a1      	cmp	r1, r4
 800d774:	d008      	beq.n	800d788 <memmove+0x28>
 800d776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d77e:	e7f8      	b.n	800d772 <memmove+0x12>
 800d780:	4601      	mov	r1, r0
 800d782:	4402      	add	r2, r0
 800d784:	428a      	cmp	r2, r1
 800d786:	d100      	bne.n	800d78a <memmove+0x2a>
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d792:	e7f7      	b.n	800d784 <memmove+0x24>

0800d794 <memchr>:
 800d794:	4603      	mov	r3, r0
 800d796:	b510      	push	{r4, lr}
 800d798:	b2c9      	uxtb	r1, r1
 800d79a:	4402      	add	r2, r0
 800d79c:	4293      	cmp	r3, r2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	d101      	bne.n	800d7a6 <memchr+0x12>
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	e003      	b.n	800d7ae <memchr+0x1a>
 800d7a6:	7804      	ldrb	r4, [r0, #0]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	428c      	cmp	r4, r1
 800d7ac:	d1f6      	bne.n	800d79c <memchr+0x8>
 800d7ae:	bd10      	pop	{r4, pc}

0800d7b0 <memcpy>:
 800d7b0:	440a      	add	r2, r1
 800d7b2:	4291      	cmp	r1, r2
 800d7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7b8:	d100      	bne.n	800d7bc <memcpy+0xc>
 800d7ba:	4770      	bx	lr
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c8:	d1f9      	bne.n	800d7be <memcpy+0xe>
 800d7ca:	bd10      	pop	{r4, pc}

0800d7cc <_realloc_r>:
 800d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d0:	4680      	mov	r8, r0
 800d7d2:	4614      	mov	r4, r2
 800d7d4:	460e      	mov	r6, r1
 800d7d6:	b921      	cbnz	r1, 800d7e2 <_realloc_r+0x16>
 800d7d8:	4611      	mov	r1, r2
 800d7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7de:	f7ff bb41 	b.w	800ce64 <_malloc_r>
 800d7e2:	b92a      	cbnz	r2, 800d7f0 <_realloc_r+0x24>
 800d7e4:	f7ff fc88 	bl	800d0f8 <_free_r>
 800d7e8:	4625      	mov	r5, r4
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f0:	f000 f81b 	bl	800d82a <_malloc_usable_size_r>
 800d7f4:	4284      	cmp	r4, r0
 800d7f6:	4607      	mov	r7, r0
 800d7f8:	d802      	bhi.n	800d800 <_realloc_r+0x34>
 800d7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7fe:	d812      	bhi.n	800d826 <_realloc_r+0x5a>
 800d800:	4621      	mov	r1, r4
 800d802:	4640      	mov	r0, r8
 800d804:	f7ff fb2e 	bl	800ce64 <_malloc_r>
 800d808:	4605      	mov	r5, r0
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d0ed      	beq.n	800d7ea <_realloc_r+0x1e>
 800d80e:	42bc      	cmp	r4, r7
 800d810:	4622      	mov	r2, r4
 800d812:	4631      	mov	r1, r6
 800d814:	bf28      	it	cs
 800d816:	463a      	movcs	r2, r7
 800d818:	f7ff ffca 	bl	800d7b0 <memcpy>
 800d81c:	4631      	mov	r1, r6
 800d81e:	4640      	mov	r0, r8
 800d820:	f7ff fc6a 	bl	800d0f8 <_free_r>
 800d824:	e7e1      	b.n	800d7ea <_realloc_r+0x1e>
 800d826:	4635      	mov	r5, r6
 800d828:	e7df      	b.n	800d7ea <_realloc_r+0x1e>

0800d82a <_malloc_usable_size_r>:
 800d82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d82e:	1f18      	subs	r0, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	bfbc      	itt	lt
 800d834:	580b      	ldrlt	r3, [r1, r0]
 800d836:	18c0      	addlt	r0, r0, r3
 800d838:	4770      	bx	lr
	...

0800d83c <_init>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	bf00      	nop
 800d840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d842:	bc08      	pop	{r3}
 800d844:	469e      	mov	lr, r3
 800d846:	4770      	bx	lr

0800d848 <_fini>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	bf00      	nop
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr
